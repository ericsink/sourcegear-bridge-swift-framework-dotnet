// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Data
extension System.Data {
// type: System.Data.AcceptRejectRule
    /**
    Determines the action that occurs when the  or  method is invoked on a  with a .

    */
public struct AcceptRejectRule : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_AcceptRejectRule_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.AcceptRejectRule None
    /**
    No action occurs (default).

    */
    public static var None : dotnet.System.Data.AcceptRejectRule {
        get {
        let __return = dotnet.System.Data.AcceptRejectRule(val: System_Data_AcceptRejectRule_get_None());
            return __return;
        }
    }
    // static field: System.Data.AcceptRejectRule Cascade
    /**
    Changes are cascaded across the relationship.

    */
    public static var Cascade : dotnet.System.Data.AcceptRejectRule {
        get {
        let __return = dotnet.System.Data.AcceptRejectRule(val: System_Data_AcceptRejectRule_get_Cascade());
            return __return;
        }
    }
} // AcceptRejectRule


// type: System.Data.CommandBehavior
    /**
    Provides a description of the results of the query and its effect on the database.

    */
public struct CommandBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_CommandBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.CommandBehavior Default
    /**
    The query may return multiple result sets. Execution of the query may affect the database state.  sets no  flags, so calling  is functionally equivalent to calling .

    */
    public static var Default : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_Default());
            return __return;
        }
    }
    // static field: System.Data.CommandBehavior SingleResult
    /**
    The query returns a single result set.

    */
    public static var SingleResult : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_SingleResult());
            return __return;
        }
    }
    // static field: System.Data.CommandBehavior SchemaOnly
    /**
    The query returns column information only. When using , the .NET Framework Data Provider for SQL Server precedes the statement being executed with SET FMTONLY ON.

    */
    public static var SchemaOnly : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_SchemaOnly());
            return __return;
        }
    }
    // static field: System.Data.CommandBehavior KeyInfo
    /**
    The query returns column and primary key information. The provider appends extra columns to the result set for existing primary key and timestamp columns.

    */
    public static var KeyInfo : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_KeyInfo());
            return __return;
        }
    }
    // static field: System.Data.CommandBehavior SingleRow
    /**
    The query is expected to return a single row of the first result set. Execution of the query may affect the database state. Some .NET Framework data providers may, but are not required to, use this information to optimize the performance of the command. When you specify  with the  method of the  object, the .NET Framework Data Provider for OLE DB performs binding using the OLE DB  interface if it is available. Otherwise, it uses the  interface. If your SQL statement is expected to return only a single row, specifying  can also improve application performance. It is possible to specify  when executing queries that are expected to return multiple result sets.  In that case, where both a multi-result set SQL query and single row are specified, the result returned will contain only the first row of the first result set. The other result sets of the query will not be returned.

    */
    public static var SingleRow : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_SingleRow());
            return __return;
        }
    }
    // static field: System.Data.CommandBehavior SequentialAccess
    /**
    Provides a way for the  to handle rows that contain columns with large binary values. Rather than loading the entire row,  enables the  to load data as a stream. You can then use the  or  method to specify a byte location to start the read operation, and a limited buffer size for the data being returned.

    */
    public static var SequentialAccess : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_SequentialAccess());
            return __return;
        }
    }
    // static field: System.Data.CommandBehavior CloseConnection
    /**
    When the command is executed, the associated  object is closed when the associated  object is closed.

    */
    public static var CloseConnection : dotnet.System.Data.CommandBehavior {
        get {
        let __return = dotnet.System.Data.CommandBehavior(val: System_Data_CommandBehavior_get_CloseConnection());
            return __return;
        }
    }
} // CommandBehavior


// type: System.Data.CommandType
    /**
    Specifies how a command string is interpreted.

    */
public struct CommandType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_CommandType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.CommandType Text
    /**
    An SQL text command. (Default.)

    */
    public static var Text : dotnet.System.Data.CommandType {
        get {
        let __return = dotnet.System.Data.CommandType(val: System_Data_CommandType_get_Text());
            return __return;
        }
    }
    // static field: System.Data.CommandType StoredProcedure
    /**
    The name of a stored procedure.

    */
    public static var StoredProcedure : dotnet.System.Data.CommandType {
        get {
        let __return = dotnet.System.Data.CommandType(val: System_Data_CommandType_get_StoredProcedure());
            return __return;
        }
    }
    // static field: System.Data.CommandType TableDirect
    /**
    The name of a table.

    */
    public static var TableDirect : dotnet.System.Data.CommandType {
        get {
        let __return = dotnet.System.Data.CommandType(val: System_Data_CommandType_get_TableDirect());
            return __return;
        }
    }
} // CommandType


// type: System.Data.ConflictOption
    /**
    Specifies how conflicting changes to the data source will be detected and resolved.

    */
public struct ConflictOption : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_ConflictOption_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.ConflictOption CompareAllSearchableValues
    /**
    Update and delete statements will include all searchable columns from the table in the WHERE clause. This is equivalent to specifying  | .

    */
    public static var CompareAllSearchableValues : dotnet.System.Data.ConflictOption {
        get {
        let __return = dotnet.System.Data.ConflictOption(val: System_Data_ConflictOption_get_CompareAllSearchableValues());
            return __return;
        }
    }
    // static field: System.Data.ConflictOption CompareRowVersion
    /**
    If any Timestamp columns exist in the table, they are used in the WHERE clause for all generated update statements. This is equivalent to specifying  | .

    */
    public static var CompareRowVersion : dotnet.System.Data.ConflictOption {
        get {
        let __return = dotnet.System.Data.ConflictOption(val: System_Data_ConflictOption_get_CompareRowVersion());
            return __return;
        }
    }
    // static field: System.Data.ConflictOption OverwriteChanges
    /**
    All update and delete statements include only  columns in the WHERE clause. If no  is defined, all searchable columns are included in the WHERE clause. This is equivalent to  | .

    */
    public static var OverwriteChanges : dotnet.System.Data.ConflictOption {
        get {
        let __return = dotnet.System.Data.ConflictOption(val: System_Data_ConflictOption_get_OverwriteChanges());
            return __return;
        }
    }
} // ConflictOption


// type: System.Data.ConnectionState
    /**
    Describes the current state of the connection to a data source.

    */
public struct ConnectionState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_ConnectionState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.ConnectionState Closed
    /**
    The connection is closed.

    */
    public static var Closed : dotnet.System.Data.ConnectionState {
        get {
        let __return = dotnet.System.Data.ConnectionState(val: System_Data_ConnectionState_get_Closed());
            return __return;
        }
    }
    // static field: System.Data.ConnectionState Open
    /**
    The connection is open.

    */
    public static var Open : dotnet.System.Data.ConnectionState {
        get {
        let __return = dotnet.System.Data.ConnectionState(val: System_Data_ConnectionState_get_Open());
            return __return;
        }
    }
    // static field: System.Data.ConnectionState Connecting
    /**
    The connection object is connecting to the data source.

    */
    public static var Connecting : dotnet.System.Data.ConnectionState {
        get {
        let __return = dotnet.System.Data.ConnectionState(val: System_Data_ConnectionState_get_Connecting());
            return __return;
        }
    }
    // static field: System.Data.ConnectionState Executing
    /**
    The connection object is executing a command. (This value is reserved for future versions of the product.)

    */
    public static var Executing : dotnet.System.Data.ConnectionState {
        get {
        let __return = dotnet.System.Data.ConnectionState(val: System_Data_ConnectionState_get_Executing());
            return __return;
        }
    }
    // static field: System.Data.ConnectionState Fetching
    /**
    The connection object is retrieving data. (This value is reserved for future versions of the product.)

    */
    public static var Fetching : dotnet.System.Data.ConnectionState {
        get {
        let __return = dotnet.System.Data.ConnectionState(val: System_Data_ConnectionState_get_Fetching());
            return __return;
        }
    }
    // static field: System.Data.ConnectionState Broken
    /**
    The connection to the data source is broken. This can occur only after the connection has been opened. A connection in this state may be closed and then re-opened. (This value is reserved for future versions of the product.)

    */
    public static var Broken : dotnet.System.Data.ConnectionState {
        get {
        let __return = dotnet.System.Data.ConnectionState(val: System_Data_ConnectionState_get_Broken());
            return __return;
        }
    }
} // ConnectionState


// type: System.Data.Constraint
    /**
    Represents a constraint that can be enforced on one or more  objects.

    */
open class Constraint
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Constraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Data.Constraint.ToString
    /**
    Gets the , if there is one, as a string.

    - Returns: The string value of the .

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Constraint_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ConstraintName()
// docid: M:System.Data.Constraint.get_ConstraintName
    open func get_ConstraintName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Constraint_String__get_ConstraintName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConstraintName(System.String)
// docid: M:System.Data.Constraint.set_ConstraintName(System.String)
    open func set_ConstraintName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Constraint_void__set_ConstraintName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.PropertyCollection get_ExtendedProperties()
// docid: M:System.Data.Constraint.get_ExtendedProperties
    open func get_ExtendedProperties() throws -> dotnet.System.Data.PropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Constraint_PropertyCollection__get_ExtendedProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.PropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.Constraint.get_Table
    open func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Constraint_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    The name of a constraint in the .

    */
    open var ConstraintName : dotnet.System.String {
        get {
            return try! get_ConstraintName();
        }
        set(v) {
            return try! set_ConstraintName(value: v);
        }
    }
    /**
    Gets the collection of user-defined constraint properties.

    */
    open var ExtendedProperties : dotnet.System.Data.PropertyCollection {
        get {
            return try! get_ExtendedProperties();
        }
    }
    /**
    Gets the  to which the constraint applies.

    */
    open var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
    }
} // Constraint


// type: System.Data.ConstraintCollection
    /**
    Represents a collection of constraints for a .

    */
public final class ConstraintCollection
    :
    dotnet.System.Data.InternalDataCollectionBase
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_ConstraintCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Data.Constraint)
// docid: M:System.Data.ConstraintCollection.Add(System.Data.Constraint)
    /**
    Adds the specified  object to the collection.

    - Parameter constraint: The  to add.
    */
    public func Add(constraint : dotnet.System.Data.Constraint) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__Add_0__1__Constraint(&__thrown, self.get_handle(), constraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.Constraint Add(System.String, System.Data.DataColumn, bool)
// docid: M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)
    /**
    Constructs a new  with the specified name, , and value that indicates whether the column is a primary key, and adds it to the collection.

    - Parameter name: The name of the .
    - Parameter column: The  to which the constraint applies.
    - Parameter primaryKey: Specifies whether the column should be the primary key. If , the column will be a primary key column.
    - Returns: A new .

    */
    public func Add(name : Optional<dotnet.System.String>, column : dotnet.System.Data.DataColumn, primaryKey : Bool) throws -> dotnet.System.Data.Constraint {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_Constraint__Add_0__3__String_DataColumn_bool(&__thrown, self.get_handle(), name?.get_handle() ?? nil, column.get_handle(), Swift.Int32(primaryKey ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Constraint(hndl : __return);
        }
    }
    // System.Data.Constraint Add(System.String, System.Data.DataColumn, System.Data.DataColumn)
// docid: M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)
    /**
    Constructs a new  with the specified name, parent column, and child column, and adds the constraint to the collection.

    - Parameter name: The name of the .
    - Parameter primaryKeyColumn: The primary key, or parent, .
    - Parameter foreignKeyColumn: The foreign key, or child, .
    - Returns: A new .

    */
    public func Add(name : Optional<dotnet.System.String>, primaryKeyColumn : dotnet.System.Data.DataColumn, foreignKeyColumn : dotnet.System.Data.DataColumn) throws -> dotnet.System.Data.Constraint {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_Constraint__Add_0__3__String_DataColumn_DataColumn(&__thrown, self.get_handle(), name?.get_handle() ?? nil, primaryKeyColumn.get_handle(), foreignKeyColumn.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Constraint(hndl : __return);
        }
    }
    // System.Data.Constraint Add(System.String, System.Data.DataColumn[], bool)
// docid: M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)
    /**
    Constructs a new  with the specified name, array of  objects, and value that indicates whether the column is a primary key, and adds it to the collection.

    - Parameter name: The name of the .
    - Parameter columns: An array of  objects to which the constraint applies.
    - Parameter primaryKey: Specifies whether the column should be the primary key. If , the column will be a primary key column.
    - Returns: A new .

    */
    public func Add(name : Optional<dotnet.System.String>, columns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, primaryKey : Bool) throws -> dotnet.System.Data.Constraint {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_Constraint__Add_0__3__String_DataColumnArray_bool(&__thrown, self.get_handle(), name?.get_handle() ?? nil, columns.get_handle(), Swift.Int32(primaryKey ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Constraint(hndl : __return);
        }
    }
    // System.Data.Constraint Add(System.String, System.Data.DataColumn[], System.Data.DataColumn[])
// docid: M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
    /**
    Constructs a new , with the specified arrays of parent columns and child columns, and adds the constraint to the collection.

    - Parameter name: The name of the .
    - Parameter primaryKeyColumns: An array of  objects that are the primary key, or parent, columns.
    - Parameter foreignKeyColumns: An array of  objects that are the foreign key, or child, columns.
    - Returns: A new .

    */
    public func Add(name : Optional<dotnet.System.String>, primaryKeyColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, foreignKeyColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws -> dotnet.System.Data.Constraint {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_Constraint__Add_0__3__String_DataColumnArray_DataColumnArray(&__thrown, self.get_handle(), name?.get_handle() ?? nil, primaryKeyColumns.get_handle(), foreignKeyColumns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Constraint(hndl : __return);
        }
    }
    // void AddRange(System.Data.Constraint[])
// docid: M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])
    /**
    Copies the elements of the specified  array to the end of the collection.

    - Parameter constraints: An array of  objects to add to the collection.
    */
    public func AddRange(constraints : Optional<dotnet.System_Arr<dotnet.System.Data.Constraint>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__AddRange_0__1__ConstraintArray(&__thrown, self.get_handle(), (constraints?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CanRemove(System.Data.Constraint)
// docid: M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)
    /**
    Indicates whether a  can be removed.

    - Parameter constraint: The  to be tested for removal from the collection.
    - Returns: 
         if the  can be removed from collection; otherwise, .

    */
    public func CanRemove(constraint : dotnet.System.Data.Constraint) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_bool__CanRemove_0__1__Constraint(&__thrown, self.get_handle(), constraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Data.ConstraintCollection.Clear
    /**
    Clears the collection of any  objects.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.ConstraintCollection.Contains(System.String)
    /**
    Indicates whether the  object specified by name exists in the collection.

    - Parameter name: The  of the constraint.
    - Returns: 
         if the collection contains the specified constraint; otherwise, .

    */
    public func Contains(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Data.Constraint[], System.Int32)
// docid: M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)
    /**
    Copies the collection objects to a one-dimensional  instance starting at the specified index.

    - Parameter array: The one-dimensional  that is the destination of the values copied from the collection.
    - Parameter index: The index of the array at which to start inserting.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.Constraint>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__CopyTo_0__2__ConstraintArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Data.Constraint)
// docid: M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)
    /**
    Gets the index of the specified .

    - Parameter constraint: The  to search for.
    - Returns: The zero-based index of the  if it is in the collection; otherwise, -1.

    */
    public func IndexOf(constraint : Optional<dotnet.System.Data.Constraint>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_i32__IndexOf_0__1__Constraint(&__thrown, self.get_handle(), constraint?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.ConstraintCollection.IndexOf(System.String)
    /**
    Gets the index of the  specified by name.

    - Parameter constraintName: The name of the .
    - Returns: The index of the  if it is in the collection; otherwise, -1.

    */
    public func IndexOf(constraintName : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), constraintName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Remove(System.Data.Constraint)
// docid: M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)
    /**
    Removes the specified  from the collection.

    - Parameter constraint: The  to remove.
    */
    public func Remove(constraint : dotnet.System.Data.Constraint) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__Remove_0__1__Constraint(&__thrown, self.get_handle(), constraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Data.ConstraintCollection.Remove(System.String)
    /**
    Removes the  object specified by name from the collection.

    - Parameter name: The name of the  to remove.
    */
    public func Remove(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.ConstraintCollection.RemoveAt(System.Int32)
    /**
    Removes the  object at the specified index from the collection.

    - Parameter index: The index of the  to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Constraint get_Item(System.Int32)
// docid: M:System.Data.ConstraintCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.Constraint {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_Constraint__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Constraint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Constraint get_Item(System.String)
// docid: M:System.Data.ConstraintCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Data.Constraint> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ConstraintCollection_Constraint__get_Item_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Constraint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.ConstraintCollection.add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    public func add_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__add_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try add_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.ConstraintCollection.remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    public func remove_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ConstraintCollection_void__remove_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try remove_CollectionChanged(value: del_value);
    }
} // ConstraintCollection


// type: System.Data.ConstraintException
    /**
    Represents the exception that is thrown when attempting an action that violates a constraint.

    */
open class ConstraintException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_ConstraintException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.ConstraintException.#ctor
    /**
    Initializes a new instance of the  class. This is the parameterless constructor.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ConstraintException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.ConstraintException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ConstraintException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.ConstraintException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class using the specified string and inner exception.

    - Parameter message: The string to display when the exception is thrown.
    - Parameter innerException: Gets the  instance that caused the current exception.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ConstraintException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ConstraintException


// type: System.Data.DBConcurrencyException
    /**
    The exception that is thrown by the  during an insert, update, or delete operation if the number of rows affected equals zero.

    */
public final class DBConcurrencyException
    :
    dotnet.System.SystemException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DBConcurrencyException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DBConcurrencyException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DBConcurrencyException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DBConcurrencyException.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The text string describing the details of the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DBConcurrencyException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The text string describing the details of the exception.
    - Parameter inner: A reference to an inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DBConcurrencyException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Data.DataRow[])
// docid: M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
    /**
    Initializes a new instance of the  class.

    - Parameter message: The error message that explains the reason for this exception.
    - Parameter inner: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    - Parameter dataRows: An array containing the  objects whose update failure generated this exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>, dataRows : Optional<dotnet.System_Arr<dotnet.System.Data.DataRow>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DBConcurrencyException_ctor_0__3__String_Exception_DataRowArray(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil, (dataRows?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyToRows(System.Data.DataRow[])
// docid: M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
    /**
    Copies the  objects whose update failure generated this exception, to the specified array of  objects.

    - Parameter array: The one-dimensional array of  objects to copy the  objects into.
    */
    public func CopyToRows(array : dotnet.System_Arr<dotnet.System.Data.DataRow>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DBConcurrencyException_void__CopyToRows_0__1__DataRowArray(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyToRows(System.Data.DataRow[], System.Int32)
// docid: M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
    /**
    Copies the  objects whose update failure generated this exception, to the specified array of  objects, starting at the specified destination array index.

    - Parameter array: The one-dimensional array of  objects to copy the  objects into.
    - Parameter arrayIndex: The destination array index to start copying into.
    */
    public func CopyToRows(array : dotnet.System_Arr<dotnet.System.Data.DataRow>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DBConcurrencyException_void__CopyToRows_0__2__DataRowArray_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates the specified serialization information object with the data needed to serialize the .

    - Parameter info: A  that holds the serialized data associated with the .
    - Parameter context: A  that contains the source and destination of the serialized stream associated with the .
    */
    public override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DBConcurrencyException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.DBConcurrencyException.get_Row
    public func get_Row() throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DBConcurrencyException_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Row(System.Data.DataRow)
// docid: M:System.Data.DBConcurrencyException.set_Row(System.Data.DataRow)
    public func set_Row(value : Optional<dotnet.System.Data.DataRow>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DBConcurrencyException_void__set_Row_0__1__DataRow(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_RowCount()
// docid: M:System.Data.DBConcurrencyException.get_RowCount
    public func get_RowCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DBConcurrencyException_i32__get_RowCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets or sets the value of the  that generated the .

    */
    public var Row : Optional<dotnet.System.Data.DataRow> {
        get {
            return try! get_Row();
        }
        set(v) {
            return try! set_Row(value: v!);
        }
    }
    /**
    Gets the number of rows whose update failed, generating this exception.

    */
    public var RowCount : Swift.Int32 {
        get {
            return try! get_RowCount();
        }
    }
} // DBConcurrencyException


// type: System.Data.DataColumn
    /**
    Represents the schema of a column in a .

    */
open class DataColumn
    :
    dotnet.System.ComponentModel.MarshalByValueComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataColumn_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DataColumn.#ctor
    /**
    Initializes a new instance of a  class as type string.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumn_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DataColumn.#ctor(System.String)
    /**
    Initializes a new instance of the  class, as type string, using the specified column name.

    - Parameter columnName: A string that represents the name of the column to be created. If set to  or an empty string (""), a default name will be specified when added to the columns collection.
    */
    public init(columnName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumn_ctor_0__1__String(&__thrown, columnName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.Data.DataColumn.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class using the specified column name and data type.

    - Parameter columnName: A string that represents the name of the column to be created. If set to  or an empty string (""), a default name will be specified when added to the columns collection.
    - Parameter dataType: A supported .
    */
    public init(columnName : Optional<dotnet.System.String>, dataType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumn_ctor_0__2__String_Type(&__thrown, columnName?.get_handle() ?? nil, dataType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type, System.String)
// docid: M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
    /**
    Initializes a new instance of the  class using the specified name, data type, and expression.

    - Parameter columnName: A string that represents the name of the column to be created. If set to  or an empty string (""), a default name will be specified when added to the columns collection.
    - Parameter dataType: A supported .
    - Parameter expr: The expression used to create this column. For more information, see the  property.
    */
    public init(columnName : Optional<dotnet.System.String>, dataType : dotnet.System.Type_, expr : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumn_ctor_0__3__String_Type_String(&__thrown, columnName?.get_handle() ?? nil, dataType.get_handle(), expr?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type, System.String, System.Data.MappingType)
// docid: M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
    /**
    Initializes a new instance of the  class using the specified name, data type, expression, and value that determines whether the column is an attribute.

    - Parameter columnName: A string that represents the name of the column to be created. If set to  or an empty string (""), a default name will be specified when added to the columns collection.
    - Parameter dataType: A supported .
    - Parameter expr: The expression used to create this column. For more information, see the  property.
    - Parameter type: One of the  values.
    */
    public init(columnName : Optional<dotnet.System.String>, dataType : dotnet.System.Type_, expr : Optional<dotnet.System.String>, type : dotnet.System.Data.MappingType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumn_ctor_0__4__String_Type_String_MappingType(&__thrown, columnName?.get_handle() ?? nil, dataType.get_handle(), expr?.get_handle() ?? nil, type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetOrdinal(System.Int32)
// docid: M:System.Data.DataColumn.SetOrdinal(System.Int32)
    /**
    Changes the ordinal or position of the  to the specified ordinal or position.

    - Parameter ordinal: The specified ordinal.
    */
    open func SetOrdinal(ordinal : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__SetOrdinal_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Data.DataColumn.ToString
    /**
    Gets the  of the column, if one exists.

    - Returns: The  value, if the property is set; otherwise, the  property.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_AllowDBNull()
// docid: M:System.Data.DataColumn.get_AllowDBNull
    open func get_AllowDBNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_bool__get_AllowDBNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowDBNull(bool)
// docid: M:System.Data.DataColumn.set_AllowDBNull(System.Boolean)
    open func set_AllowDBNull(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_AllowDBNull_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AutoIncrement()
// docid: M:System.Data.DataColumn.get_AutoIncrement
    open func get_AutoIncrement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_bool__get_AutoIncrement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AutoIncrement(bool)
// docid: M:System.Data.DataColumn.set_AutoIncrement(System.Boolean)
    open func set_AutoIncrement(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_AutoIncrement_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_AutoIncrementSeed()
// docid: M:System.Data.DataColumn.get_AutoIncrementSeed
    open func get_AutoIncrementSeed() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_i64__get_AutoIncrementSeed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_AutoIncrementSeed(System.Int64)
// docid: M:System.Data.DataColumn.set_AutoIncrementSeed(System.Int64)
    open func set_AutoIncrementSeed(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_AutoIncrementSeed_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_AutoIncrementStep()
// docid: M:System.Data.DataColumn.get_AutoIncrementStep
    open func get_AutoIncrementStep() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_i64__get_AutoIncrementStep_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_AutoIncrementStep(System.Int64)
// docid: M:System.Data.DataColumn.set_AutoIncrementStep(System.Int64)
    open func set_AutoIncrementStep(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_AutoIncrementStep_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Caption()
// docid: M:System.Data.DataColumn.get_Caption
    open func get_Caption() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_String__get_Caption_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Caption(System.String)
// docid: M:System.Data.DataColumn.set_Caption(System.String)
    open func set_Caption(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_Caption_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.MappingType get_ColumnMapping()
// docid: M:System.Data.DataColumn.get_ColumnMapping
    open func get_ColumnMapping() throws -> dotnet.System.Data.MappingType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_MappingType__get_ColumnMapping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.MappingType(val: __return);
        }
    }
    // [IsSpecialName] void set_ColumnMapping(System.Data.MappingType)
// docid: M:System.Data.DataColumn.set_ColumnMapping(System.Data.MappingType)
    open func set_ColumnMapping(value : dotnet.System.Data.MappingType) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_ColumnMapping_0__1__MappingType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ColumnName()
// docid: M:System.Data.DataColumn.get_ColumnName
    open func get_ColumnName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_String__get_ColumnName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ColumnName(System.String)
// docid: M:System.Data.DataColumn.set_ColumnName(System.String)
    open func set_ColumnName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_ColumnName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataSetDateTime get_DateTimeMode()
// docid: M:System.Data.DataColumn.get_DateTimeMode
    open func get_DateTimeMode() throws -> dotnet.System.Data.DataSetDateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_DataSetDateTime__get_DateTimeMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataSetDateTime(val: __return);
        }
    }
    // [IsSpecialName] void set_DateTimeMode(System.Data.DataSetDateTime)
// docid: M:System.Data.DataColumn.set_DateTimeMode(System.Data.DataSetDateTime)
    open func set_DateTimeMode(value : dotnet.System.Data.DataSetDateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_DateTimeMode_0__1__DataSetDateTime(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Expression()
// docid: M:System.Data.DataColumn.get_Expression
    open func get_Expression() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_String__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Expression(System.String)
// docid: M:System.Data.DataColumn.set_Expression(System.String)
    open func set_Expression(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_Expression_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.PropertyCollection get_ExtendedProperties()
// docid: M:System.Data.DataColumn.get_ExtendedProperties
    open func get_ExtendedProperties() throws -> dotnet.System.Data.PropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_PropertyCollection__get_ExtendedProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.PropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxLength()
// docid: M:System.Data.DataColumn.get_MaxLength
    open func get_MaxLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_i32__get_MaxLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxLength(System.Int32)
// docid: M:System.Data.DataColumn.set_MaxLength(System.Int32)
    open func set_MaxLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_MaxLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Data.DataColumn.get_Namespace
    open func get_Namespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Data.DataColumn.set_Namespace(System.String)
    open func set_Namespace(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Ordinal()
// docid: M:System.Data.DataColumn.get_Ordinal
    open func get_Ordinal() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_i32__get_Ordinal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Data.DataColumn.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:System.Data.DataColumn.set_Prefix(System.String)
    open func set_Prefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ReadOnly()
// docid: M:System.Data.DataColumn.get_ReadOnly
    open func get_ReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_bool__get_ReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ReadOnly(bool)
// docid: M:System.Data.DataColumn.set_ReadOnly(System.Boolean)
    open func set_ReadOnly(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_ReadOnly_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.DataColumn.get_Table
    open func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_Unique()
// docid: M:System.Data.DataColumn.get_Unique
    open func get_Unique() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_bool__get_Unique_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Unique(bool)
// docid: M:System.Data.DataColumn.set_Unique(System.Boolean)
    open func set_Unique(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_Unique_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_DataType()
// docid: M:System.Data.DataColumn.get_DataType
    open func get_DataType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_Type__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.Type)
// docid: M:System.Data.DataColumn.set_DataType(System.Type)
    open func set_DataType(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_DataType_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_DefaultValue()
// docid: M:System.Data.DataColumn.get_DefaultValue
    open func get_DefaultValue() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumn_Object__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultValue(System.Object)
// docid: M:System.Data.DataColumn.set_DefaultValue(System.Object)
    open func set_DefaultValue(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumn_void__set_DefaultValue_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether null values are allowed in this column for rows that belong to the table.

    */
    open var AllowDBNull : Bool {
        get {
            return try! get_AllowDBNull();
        }
        set(v) {
            return try! set_AllowDBNull(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the column automatically increments the value of the column for new rows added to the table.

    */
    open var AutoIncrement : Bool {
        get {
            return try! get_AutoIncrement();
        }
        set(v) {
            return try! set_AutoIncrement(value: v);
        }
    }
    /**
    Gets or sets the starting value for a column that has its  property set to . The default is 0.

    */
    open var AutoIncrementSeed : Swift.Int64 {
        get {
            return try! get_AutoIncrementSeed();
        }
        set(v) {
            return try! set_AutoIncrementSeed(value: v);
        }
    }
    /**
    Gets or sets the increment used by a column with its  property set to .

    */
    open var AutoIncrementStep : Swift.Int64 {
        get {
            return try! get_AutoIncrementStep();
        }
        set(v) {
            return try! set_AutoIncrementStep(value: v);
        }
    }
    /**
    Gets or sets the caption for the column.

    */
    open var Caption : dotnet.System.String {
        get {
            return try! get_Caption();
        }
        set(v) {
            return try! set_Caption(value: v);
        }
    }
    /**
    Gets or sets the  of the column.

    */
    open var ColumnMapping : dotnet.System.Data.MappingType {
        get {
            return try! get_ColumnMapping();
        }
        set(v) {
            return try! set_ColumnMapping(value: v);
        }
    }
    /**
    Gets or sets the name of the column in the .

    */
    open var ColumnName : dotnet.System.String {
        get {
            return try! get_ColumnName();
        }
        set(v) {
            return try! set_ColumnName(value: v);
        }
    }
    /**
    Gets or sets the type of data stored in the column.

    */
    open var DataType : dotnet.System.Type_ {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the  for the column.

    */
    open var DateTimeMode : dotnet.System.Data.DataSetDateTime {
        get {
            return try! get_DateTimeMode();
        }
        set(v) {
            return try! set_DateTimeMode(value: v);
        }
    }
    /**
    Gets or sets the default value for the column when you are creating new rows.

    */
    open var DefaultValue : dotnet.System.Object {
        get {
            return try! get_DefaultValue();
        }
        set(v) {
            return try! set_DefaultValue(value: v);
        }
    }
    /**
    Gets or sets the expression used to filter rows, calculate the values in a column, or create an aggregate column.

    */
    open var Expression : dotnet.System.String {
        get {
            return try! get_Expression();
        }
        set(v) {
            return try! set_Expression(value: v);
        }
    }
    /**
    Gets the collection of custom user information associated with a .

    */
    open var ExtendedProperties : dotnet.System.Data.PropertyCollection {
        get {
            return try! get_ExtendedProperties();
        }
    }
    /**
    Gets or sets the maximum length of a text column.

    */
    open var MaxLength : Swift.Int32 {
        get {
            return try! get_MaxLength();
        }
        set(v) {
            return try! set_MaxLength(value: v);
        }
    }
    /**
    Gets or sets the namespace of the .

    */
    open var Namespace : dotnet.System.String {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v);
        }
    }
    /**
    Gets the (zero-based) position of the column in the  collection.

    */
    open var Ordinal : Swift.Int32 {
        get {
            return try! get_Ordinal();
        }
    }
    /**
    Gets or sets an XML prefix that aliases the namespace of the .

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the column allows for changes as soon as a row has been added to the table.

    */
    open var ReadOnly : Bool {
        get {
            return try! get_ReadOnly();
        }
        set(v) {
            return try! set_ReadOnly(value: v);
        }
    }
    /**
    Gets the  to which the column belongs to.

    */
    open var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
    }
    /**
    Gets or sets a value that indicates whether the values in each row of the column must be unique.

    */
    open var Unique : Bool {
        get {
            return try! get_Unique();
        }
        set(v) {
            return try! set_Unique(value: v);
        }
    }
} // DataColumn


// type: System.Data.DataColumnChangeEventArgs
    /**
    Provides data for the  event.

    */
open class DataColumnChangeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataColumnChangeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataRow, System.Data.DataColumn, System.Object)
// docid: M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter row: The  of the column with the changing value.
    - Parameter column: The  with the changing value.
    - Parameter value: The new value.
    */
    public init(row : dotnet.System.Data.DataRow, column : Optional<dotnet.System.Data.DataColumn>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumnChangeEventArgs_ctor_0__3__DataRow_DataColumn_Object(&__thrown, row.get_handle(), column?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Data.DataColumn get_Column()
// docid: M:System.Data.DataColumnChangeEventArgs.get_Column
    open func get_Column() throws -> Optional<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnChangeEventArgs_DataColumn__get_Column_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataColumn(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ProposedValue()
// docid: M:System.Data.DataColumnChangeEventArgs.get_ProposedValue
    open func get_ProposedValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnChangeEventArgs_Object__get_ProposedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ProposedValue(System.Object)
// docid: M:System.Data.DataColumnChangeEventArgs.set_ProposedValue(System.Object)
    open func set_ProposedValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnChangeEventArgs_void__set_ProposedValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.DataColumnChangeEventArgs.get_Row
    open func get_Row() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnChangeEventArgs_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    /**
    Gets the  with a changing value.

    */
    open var Column : Optional<dotnet.System.Data.DataColumn> {
        get {
            return try! get_Column();
        }
    }
    /**
    Gets or sets the proposed new value for the column.

    */
    open var ProposedValue : Optional<dotnet.System.Object> {
        get {
            return try! get_ProposedValue();
        }
        set(v) {
            return try! set_ProposedValue(value: v!);
        }
    }
    /**
    Gets the  of the column with a changing value.

    */
    open var Row : dotnet.System.Data.DataRow {
        get {
            return try! get_Row();
        }
    }
} // DataColumnChangeEventArgs


// type: System.Data.DataColumnChangeEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class DataColumnChangeEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataColumnChangeEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.DataColumnChangeEventArgs)
// docid: M:System.Data.DataColumnChangeEventHandler.Invoke(System.Object,System.Data.DataColumnChangeEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataColumnChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnChangeEventHandler_void__Invoke_0__2__Object_DataColumnChangeEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.DataColumnChangeEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.DataColumnChangeEventHandler.BeginInvoke(System.Object,System.Data.DataColumnChangeEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataColumnChangeEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnChangeEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DataColumnChangeEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.DataColumnChangeEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnChangeEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.DataColumnChangeEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.DataColumnChangeEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataColumnChangeEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.DataColumnChangeEventArgs)
// docid: M:System.Data.DataColumnChangeEventHandler.Invoke(System.Object,System.Data.DataColumnChangeEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.DataColumnChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnChangeEventHandler_void__Invoke_0__2__Object_DataColumnChangeEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataColumnChangeEventHandler


// type: System.Data.DataColumnCollection
    /**
    Represents a collection of  objects for a .

    */
public final class DataColumnCollection
    :
    dotnet.System.Data.InternalDataCollectionBase
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataColumnCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.DataColumn Add()
// docid: M:System.Data.DataColumnCollection.Add
    /**
    Creates and adds a  object to the .

    - Returns: The newly created .

    */
    public func Add() throws -> dotnet.System.Data.DataColumn {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_DataColumn__Add_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataColumn(hndl : __return);
        }
    }
    // void Add(System.Data.DataColumn)
// docid: M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)
    /**
    Creates and adds the specified  object to the .

    - Parameter column: The  to add.
    */
    public func Add(column : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__Add_0__1__DataColumn(&__thrown, self.get_handle(), column.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataColumn Add(System.String)
// docid: M:System.Data.DataColumnCollection.Add(System.String)
    /**
    Creates and adds a  object that has the specified name to the .

    - Parameter columnName: The name of the column.
    - Returns: The newly created .

    */
    public func Add(columnName : Optional<dotnet.System.String>) throws -> dotnet.System.Data.DataColumn {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_DataColumn__Add_0__1__String(&__thrown, self.get_handle(), columnName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataColumn(hndl : __return);
        }
    }
    // System.Data.DataColumn Add(System.String, System.Type)
// docid: M:System.Data.DataColumnCollection.Add(System.String,System.Type)
    /**
    Creates and adds a  object that has the specified name and type to the .

    - Parameter columnName: The  to use when you create the column.
    - Parameter type: The  of the new column.
    - Returns: The newly created .

    */
    public func Add(columnName : Optional<dotnet.System.String>, type : dotnet.System.Type_) throws -> dotnet.System.Data.DataColumn {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_DataColumn__Add_0__2__String_Type(&__thrown, self.get_handle(), columnName?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataColumn(hndl : __return);
        }
    }
    // System.Data.DataColumn Add(System.String, System.Type, System.String)
// docid: M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)
    /**
    Creates and adds a  object that has the specified name, type, and expression to the .

    - Parameter columnName: The name to use when you create the column.
    - Parameter type: The  of the new column.
    - Parameter expression: The expression to assign to the  property.
    - Returns: The newly created .

    */
    public func Add(columnName : Optional<dotnet.System.String>, type : dotnet.System.Type_, expression : dotnet.System.String) throws -> dotnet.System.Data.DataColumn {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_DataColumn__Add_0__3__String_Type_String(&__thrown, self.get_handle(), columnName?.get_handle() ?? nil, type.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataColumn(hndl : __return);
        }
    }
    // void AddRange(System.Data.DataColumn[])
// docid: M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])
    /**
    Copies the elements of the specified  array to the end of the collection.

    - Parameter columns: The array of  objects to add to the collection.
    */
    public func AddRange(columns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__AddRange_0__1__DataColumnArray(&__thrown, self.get_handle(), columns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CanRemove(System.Data.DataColumn)
// docid: M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)
    /**
    Checks whether a specific column can be removed from the collection.

    - Parameter column: A  in the collection.
    - Returns: 
         if the column can be removed.  if,  
  
-   The  parameter is .  
  
-   The column does not belong to this collection.  
  
-   The column is part of a relationship.  
  
-   Another column's expression depends on this column.

    */
    public func CanRemove(column : Optional<dotnet.System.Data.DataColumn>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_bool__CanRemove_0__1__DataColumn(&__thrown, self.get_handle(), column?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Data.DataColumnCollection.Clear
    /**
    Clears the collection of any columns.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.DataColumnCollection.Contains(System.String)
    /**
    Checks whether the collection contains a column with the specified name.

    - Parameter name: The  of the column to look for.
    - Returns: 
         if a column exists with this name; otherwise, .

    */
    public func Contains(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Data.DataColumn[], System.Int32)
// docid: M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)
    /**
    Copies the entire collection into an existing array, starting at a specified index within the array.

    - Parameter array: An array of  objects to copy the collection into.
    - Parameter index: The index to start from.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.DataColumn>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__CopyTo_0__2__DataColumnArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Data.DataColumn)
// docid: M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)
    /**
    Gets the index of a column specified by name.

    - Parameter column: The name of the column to return.
    - Returns: The index of the column specified by  if it is found; otherwise, -1.

    */
    public func IndexOf(column : Optional<dotnet.System.Data.DataColumn>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_i32__IndexOf_0__1__DataColumn(&__thrown, self.get_handle(), column?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.DataColumnCollection.IndexOf(System.String)
    /**
    Gets the index of the column with the specific name (the name is not case sensitive).

    - Parameter columnName: The name of the column to find.
    - Returns: The zero-based index of the column with the specified name, or -1 if the column does not exist in the collection.

    */
    public func IndexOf(columnName : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), columnName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Remove(System.Data.DataColumn)
// docid: M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)
    /**
    Removes the specified  object from the collection.

    - Parameter column: The  to remove.
    */
    public func Remove(column : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__Remove_0__1__DataColumn(&__thrown, self.get_handle(), column.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Data.DataColumnCollection.Remove(System.String)
    /**
    Removes the  object that has the specified name from the collection.

    - Parameter name: The name of the column to remove.
    */
    public func Remove(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.DataColumnCollection.RemoveAt(System.Int32)
    /**
    Removes the column at the specified index from the collection.

    - Parameter index: The index of the column to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataColumn get_Item(System.Int32)
// docid: M:System.Data.DataColumnCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.DataColumn {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_DataColumn__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataColumn(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataColumn get_Item(System.String)
// docid: M:System.Data.DataColumnCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataColumnCollection_DataColumn__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataColumn(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataColumnCollection.add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    public func add_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__add_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try add_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataColumnCollection.remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    public func remove_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataColumnCollection_void__remove_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try remove_CollectionChanged(value: del_value);
    }
} // DataColumnCollection


// type: System.Data.DataException
    /**
    Represents the exception that is thrown when errors are generated using ADO.NET components.

    */
open class DataException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DataException.#ctor
    /**
    Initializes a new instance of the  class. This is the parameterless constructor.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DataException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.DataException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified string and inner exception.

    - Parameter s: The string to display when the exception is thrown.
    - Parameter innerException: A reference to an inner exception.
    */
    public init(s : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataException_ctor_0__2__String_Exception(&__thrown, s?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DataException


// type: System.Data.DataReaderExtensions
public struct DataReaderExtensions {
    // bool GetBoolean(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a Boolean.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetBoolean(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_bool__GetBoolean_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte GetByte(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetByte(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a byte.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetByte(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_u8__GetByte_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetBytes(System.Data.Common.DbDataReader, System.String, System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.DataReaderExtensions.GetBytes(System.Data.Common.DbDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    Reads a specified number of bytes from the specified column starting at a specified index and writes them to a buffer starting at a specified position in the buffer.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Parameter dataOffset: The index within the row from which to begin the read operation.
    - Parameter buffer: The buffer into which to copy the data.
    - Parameter bufferOffset: The index with the buffer to which the data will be copied.
    - Parameter length: The maximum number of characters to read.
    - Returns: The actual number of bytes read.

    */
    public static func GetBytes(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String, dataOffset : Swift.Int64, buffer : dotnet.System_Arr<Swift.UInt8>, bufferOffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_i64__GetBytes_0__6__DbDataReader_String_i64_u8Array_i32_i32(&__thrown, reader.get_handle(), name.get_handle(), dataOffset, buffer.get_handle(), bufferOffset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char GetChar(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetChar(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a single character.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetChar(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Char__GetChar_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.Int64 GetChars(System.Data.Common.DbDataReader, System.String, System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.DataReaderExtensions.GetChars(System.Data.Common.DbDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    Reads a specified number of characters from a specified column starting at a specified index, and writes them to a buffer starting at a specified position.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Parameter dataOffset: The index within the row from which to begin the read operation.
    - Parameter buffer: The buffer into which to copy the data.
    - Parameter bufferOffset: The index with the buffer to which the data will be copied.
    - Parameter length: The maximum number of characters to read.
    - Returns: The actual number of characters read.

    */
    public static func GetChars(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String, dataOffset : Swift.Int64, buffer : dotnet.System_Arr<dotnet.System.Char>, bufferOffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_i64__GetChars_0__6__DbDataReader_String_i64_CharArray_i32_i32(&__thrown, reader.get_handle(), name.get_handle(), dataOffset, buffer.get_handle(), bufferOffset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.Common.DbDataReader GetData(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetData(System.Data.Common.DbDataReader,System.String)
    /**
    Returns a nested data reader for the requested column.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: A data reader.

    */
    public static func GetData(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Data.Common.DbDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_DbDataReader__GetData_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbDataReader(hndl : __return);
        }
    }
    // System.String GetDataTypeName(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetDataTypeName(System.Data.Common.DbDataReader,System.String)
    /**
    Gets name of the data type of the specified column.

    - Parameter reader: The data reader to get the column type name from.
    - Parameter name: The name of the column.
    - Returns: The name of the data type.

    */
    public static func GetDataTypeName(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_String__GetDataTypeName_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.DateTime GetDateTime(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetDateTime(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a  object.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetDateTime(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_DateTime__GetDateTime_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal GetDecimal(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetDecimal(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a .

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetDecimal(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Decimal__GetDecimal_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double GetDouble(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetDouble(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a double-precision floating point number.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetDouble(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_f64__GetDouble_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetFieldType(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetFieldType(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the data type of the specified column.

    - Parameter reader: The data reader to get the field type from.
    - Parameter name: The name of the column.
    - Returns: The data type of the specified column.

    */
    public static func GetFieldType(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Type__GetFieldType_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(System.Data.Common.DbDataReader, System.String, System.Threading.CancellationToken)
// TODO COPE (write_all_methods) (unused generic param) T GetFieldValue<T>(System.Data.Common.DbDataReader, System.String)
    // System.Single GetFloat(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetFloat(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a single-precision floating point number.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetFloat(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_f32__GetFloat_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid GetGuid(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetGuid(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a globally unique identifier (GUID).

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetGuid(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Guid__GetGuid_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 GetInt16(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a 16-bit signed integer.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetInt16(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_i16__GetInt16_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetInt32(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a 32-bit signed integer.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetInt32(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_i32__GetInt32_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetInt64(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as a 64-bit signed integer.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetInt64(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_i64__GetInt64_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetProviderSpecificFieldType(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetProviderSpecificFieldType(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the provider-specific type of the specified column.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: A provider-specific .NET type.

    */
    public static func GetProviderSpecificFieldType(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Type__GetProviderSpecificFieldType_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Object GetProviderSpecificValue(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetProviderSpecificValue(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as an instance of a provider-specific type.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetProviderSpecificValue(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Object__GetProviderSpecificValue_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.IO.Stream GetStream(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetStream(System.Data.Common.DbDataReader,System.String)
    /**
    Gets a stream to retrieve data from the specified column.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: A stream.

    */
    public static func GetStream(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Stream__GetStream_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.String GetString(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetString(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as an instance of .

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetString(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_String__GetString_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.IO.TextReader GetTextReader(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetTextReader(System.Data.Common.DbDataReader,System.String)
    /**
    Gets a text reader to retrieve data from the column.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: A text reader.

    */
    public static func GetTextReader(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.IO.TextReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_TextReader__GetTextReader_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextReader(hndl : __return);
        }
    }
    // System.Object GetValue(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.GetValue(System.Data.Common.DbDataReader,System.String)
    /**
    Gets the value of the specified column as an instance of .

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: The value of the specified column.

    */
    public static func GetValue(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_Object__GetValue_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsDBNull(System.Data.Common.DbDataReader, System.String)
// docid: M:System.Data.DataReaderExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)
    /**
    Gets a value that indicates whether the column contains nonexistent or missing values.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Returns: 
         if the specified column is equivalent to ; otherwise, .

    */
    public static func IsDBNull(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_bool__IsDBNull_0__2__DbDataReader_String(&__thrown, reader.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> IsDBNullAsync(System.Data.Common.DbDataReader, System.String, System.Threading.CancellationToken)
// docid: M:System.Data.DataReaderExtensions.IsDBNullAsync(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)
    /**
    Asynchronously gets a value that indicates whether the column contains non-existent or missing values.

    - Parameter reader: The data reader to get the column value from.
    - Parameter name: The name of the column.
    - Parameter cancellationToken: An optional token to cancel the asynchronous operation.
    - Returns: A  whose  property is  if the specified column value is equivalent to  or  if it is not.

    */
    public static func IsDBNullAsync(reader : dotnet.System.Data.Common.DbDataReader, name : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataReaderExtensions_System_Threading_Tasks_Task_bool___IsDBNullAsync_0__3__DbDataReader_String_CancellationToken(&__thrown, reader.get_handle(), name.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // DataReaderExtensions


// type: System.Data.DataRelation
    /**
    Represents a parent/child relationship between two  objects.

    */
open class DataRelation
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRelation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Data.DataColumn, System.Data.DataColumn)
// docid: M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
    /**
    Initializes a new instance of the  class using the specified  name, and parent and child  objects.

    - Parameter relationName: The name of the . If  or an empty string (""), a default name will be given when the created object is added to the .
    - Parameter parentColumn: The parent  in the relationship.
    - Parameter childColumn: The child  in the relationship.
    */
    public init(relationName : Optional<dotnet.System.String>, parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRelation_ctor_0__3__String_DataColumn_DataColumn(&__thrown, relationName?.get_handle() ?? nil, parentColumn.get_handle(), childColumn.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn, System.Data.DataColumn, bool)
// docid: M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified name, parent and child  objects, and a value that indicates whether to create constraints.

    - Parameter relationName: The name of the relation. If  or an empty string (""), a default name will be given when the created object is added to the .
    - Parameter parentColumn: The parent  in the relation.
    - Parameter childColumn: The child  in the relation.
    - Parameter createConstraints: A value that indicates whether constraints are created. , if constraints are created. Otherwise, .
    */
    public init(relationName : Optional<dotnet.System.String>, parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn, createConstraints : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRelation_ctor_0__4__String_DataColumn_DataColumn_bool(&__thrown, relationName?.get_handle() ?? nil, parentColumn.get_handle(), childColumn.get_handle(), Swift.Int32(createConstraints ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn[], System.Data.DataColumn[])
// docid: M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
    /**
    Initializes a new instance of the  class using the specified  name and matched arrays of parent and child  objects.

    - Parameter relationName: The name of the relation. If  or an empty string (""), a default name will be given when the created object is added to the .
    - Parameter parentColumns: An array of parent  objects.
    - Parameter childColumns: An array of child  objects.
    */
    public init(relationName : Optional<dotnet.System.String>, parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRelation_ctor_0__3__String_DataColumnArray_DataColumnArray(&__thrown, relationName?.get_handle() ?? nil, parentColumns.get_handle(), childColumns.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn[], System.Data.DataColumn[], bool)
// docid: M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
    /**
    Initializes a new instance of the  class using the specified name, matched arrays of parent and child  objects, and value that indicates whether to create constraints.

    - Parameter relationName: The name of the relation. If  or an empty string (""), a default name will be given when the created object is added to the .
    - Parameter parentColumns: An array of parent  objects.
    - Parameter childColumns: An array of child  objects.
    - Parameter createConstraints: A value that indicates whether to create constraints. , if constraints are created. Otherwise, .
    */
    public init(relationName : Optional<dotnet.System.String>, parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, createConstraints : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRelation_ctor_0__4__String_DataColumnArray_DataColumnArray_bool(&__thrown, relationName?.get_handle() ?? nil, parentColumns.get_handle(), childColumns.get_handle(), Swift.Int32(createConstraints ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String, System.String, System.String[], System.String[], bool)
// docid: M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
    /**
    This constructor is provided for design time support in the Visual Studio environment.

    - Parameter relationName: The name of the . If  or an empty string (""), a default name will be given when the created object is added to the .
    - Parameter parentTableName: The name of the  that is the parent table of the relation.
    - Parameter parentTableNamespace: The name of the parent table namespace.
    - Parameter childTableName: The name of the  that is the child table of the relation.
    - Parameter childTableNamespace: The name of the child table namespace.
    - Parameter parentColumnNames: An array of  object names in the parent  of the relation.
    - Parameter childColumnNames: An array of  object names in the child  of the relation.
    - Parameter nested: A value that indicates whether relationships are nested.
    */
    public init(relationName : dotnet.System.String, parentTableName : Optional<dotnet.System.String>, parentTableNamespace : Optional<dotnet.System.String>, childTableName : Optional<dotnet.System.String>, childTableNamespace : Optional<dotnet.System.String>, parentColumnNames : Optional<dotnet.System_Arr<dotnet.System.String>>, childColumnNames : Optional<dotnet.System_Arr<dotnet.System.String>>, nested : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRelation_ctor_0__8__String_String_String_String_String_StringArray_StringArray_bool(&__thrown, relationName.get_handle(), parentTableName?.get_handle() ?? nil, parentTableNamespace?.get_handle() ?? nil, childTableName?.get_handle() ?? nil, childTableNamespace?.get_handle() ?? nil, (parentColumnNames?.get_handle()), (childColumnNames?.get_handle()), Swift.Int32(nested ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String[], System.String[], bool)
// docid: M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
    /**
    This constructor is provided for design time support in the Visual Studio environment.

    - Parameter relationName: The name of the relation. If  or an empty string (""), a default name will be given when the created object is added to the .
    - Parameter parentTableName: The name of the  that is the parent table of the relation.
    - Parameter childTableName: The name of the  that is the child table of the relation.
    - Parameter parentColumnNames: An array of  object names in the parent  of the relation.
    - Parameter childColumnNames: An array of  object names in the child  of the relation.
    - Parameter nested: A value that indicates whether relationships are nested.
    */
    public init(relationName : dotnet.System.String, parentTableName : Optional<dotnet.System.String>, childTableName : Optional<dotnet.System.String>, parentColumnNames : Optional<dotnet.System_Arr<dotnet.System.String>>, childColumnNames : Optional<dotnet.System_Arr<dotnet.System.String>>, nested : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRelation_ctor_0__6__String_String_String_StringArray_StringArray_bool(&__thrown, relationName.get_handle(), parentTableName?.get_handle() ?? nil, childTableName?.get_handle() ?? nil, (parentColumnNames?.get_handle()), (childColumnNames?.get_handle()), Swift.Int32(nested ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Data.DataRelation.ToString
    /**
    Gets the , if one exists.

    - Returns: The value of the  property.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataColumn[] get_ChildColumns()
// docid: M:System.Data.DataRelation.get_ChildColumns
    open func get_ChildColumns() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_DataColumnArray__get_ChildColumns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.ForeignKeyConstraint get_ChildKeyConstraint()
// docid: M:System.Data.DataRelation.get_ChildKeyConstraint
    open func get_ChildKeyConstraint() throws -> Optional<dotnet.System.Data.ForeignKeyConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_ForeignKeyConstraint__get_ChildKeyConstraint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.ForeignKeyConstraint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.DataTable get_ChildTable()
// docid: M:System.Data.DataRelation.get_ChildTable
    open func get_ChildTable() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_DataTable__get_ChildTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataSet get_DataSet()
// docid: M:System.Data.DataRelation.get_DataSet
    open func get_DataSet() throws -> Optional<dotnet.System.Data.DataSet> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_DataSet__get_DataSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataSet(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.PropertyCollection get_ExtendedProperties()
// docid: M:System.Data.DataRelation.get_ExtendedProperties
    open func get_ExtendedProperties() throws -> dotnet.System.Data.PropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_PropertyCollection__get_ExtendedProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.PropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Nested()
// docid: M:System.Data.DataRelation.get_Nested
    open func get_Nested() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_bool__get_Nested_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Nested(bool)
// docid: M:System.Data.DataRelation.set_Nested(System.Boolean)
    open func set_Nested(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelation_void__set_Nested_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataColumn[] get_ParentColumns()
// docid: M:System.Data.DataRelation.get_ParentColumns
    open func get_ParentColumns() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_DataColumnArray__get_ParentColumns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.UniqueConstraint get_ParentKeyConstraint()
// docid: M:System.Data.DataRelation.get_ParentKeyConstraint
    open func get_ParentKeyConstraint() throws -> Optional<dotnet.System.Data.UniqueConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_UniqueConstraint__get_ParentKeyConstraint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.UniqueConstraint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.DataTable get_ParentTable()
// docid: M:System.Data.DataRelation.get_ParentTable
    open func get_ParentTable() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_DataTable__get_ParentTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RelationName()
// docid: M:System.Data.DataRelation.get_RelationName
    open func get_RelationName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelation_String__get_RelationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RelationName(System.String)
// docid: M:System.Data.DataRelation.set_RelationName(System.String)
    open func set_RelationName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelation_void__set_RelationName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the child  objects of this relation.

    */
    open var ChildColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        get {
            return try! get_ChildColumns();
        }
    }
    /**
    Gets the  for the relation.

    */
    open var ChildKeyConstraint : Optional<dotnet.System.Data.ForeignKeyConstraint> {
        get {
            return try! get_ChildKeyConstraint();
        }
    }
    /**
    Gets the child table of this relation.

    */
    open var ChildTable : dotnet.System.Data.DataTable {
        get {
            return try! get_ChildTable();
        }
    }
    /**
    Gets the  to which the  belongs.

    */
    open var DataSet : Optional<dotnet.System.Data.DataSet> {
        get {
            return try! get_DataSet();
        }
    }
    /**
    Gets the collection that stores customized properties.

    */
    open var ExtendedProperties : dotnet.System.Data.PropertyCollection {
        get {
            return try! get_ExtendedProperties();
        }
    }
    /**
    Gets or sets a value that indicates whether  objects are nested.

    */
    open var Nested : Bool {
        get {
            return try! get_Nested();
        }
        set(v) {
            return try! set_Nested(value: v);
        }
    }
    /**
    Gets an array of  objects that are the parent columns of this .

    */
    open var ParentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        get {
            return try! get_ParentColumns();
        }
    }
    /**
    Gets the  that guarantees that values in the parent column of a  are unique.

    */
    open var ParentKeyConstraint : Optional<dotnet.System.Data.UniqueConstraint> {
        get {
            return try! get_ParentKeyConstraint();
        }
    }
    /**
    Gets the parent  of this .

    */
    open var ParentTable : dotnet.System.Data.DataTable {
        get {
            return try! get_ParentTable();
        }
    }
    /**
    Gets or sets the name used to retrieve a  from the .

    */
    open var RelationName : dotnet.System.String {
        get {
            return try! get_RelationName();
        }
        set(v) {
            return try! set_RelationName(value: v);
        }
    }
} // DataRelation


// type: System.Data.DataRelationCollection
    /**
    Represents the collection of  objects for this .

    */
open class DataRelationCollection
    :
    dotnet.System.Data.InternalDataCollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRelationCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.DataRelation Add(System.Data.DataColumn, System.Data.DataColumn)
// docid: M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)
    /**
    Creates a  with a specified parent and child column, and adds it to the collection.

    - Parameter parentColumn: The parent column of the relation.
    - Parameter childColumn: The child column of the relation.
    - Returns: The created relation.

    */
    open func Add(parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__Add_0__2__DataColumn_DataColumn(&__thrown, self.get_handle(), parentColumn.get_handle(), childColumn.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // System.Data.DataRelation Add(System.Data.DataColumn[], System.Data.DataColumn[])
// docid: M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])
    /**
    Creates a  with the specified parent and child columns, and adds it to the collection.

    - Parameter parentColumns: The parent columns of the relation.
    - Parameter childColumns: The child columns of the relation.
    - Returns: The created relation.

    */
    open func Add(parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__Add_0__2__DataColumnArray_DataColumnArray(&__thrown, self.get_handle(), parentColumns.get_handle(), childColumns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // void Add(System.Data.DataRelation)
// docid: M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)
    /**
    Adds a  to the .

    - Parameter relation: The  to add to the collection.
    */
    open func Add(relation : dotnet.System.Data.DataRelation) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__Add_0__1__DataRelation(&__thrown, self.get_handle(), relation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataRelation Add(System.String, System.Data.DataColumn, System.Data.DataColumn)
// docid: M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)
    /**
    Creates a  with the specified name, and parent and child columns, and adds it to the collection.

    - Parameter name: The name of the relation.
    - Parameter parentColumn: The parent column of the relation.
    - Parameter childColumn: The child column of the relation.
    - Returns: The created relation.

    */
    open func Add(name : Optional<dotnet.System.String>, parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__Add_0__3__String_DataColumn_DataColumn(&__thrown, self.get_handle(), name?.get_handle() ?? nil, parentColumn.get_handle(), childColumn.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // System.Data.DataRelation Add(System.String, System.Data.DataColumn, System.Data.DataColumn, bool)
// docid: M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
    /**
    Creates a  with the specified name, parent and child columns, with optional constraints according to the value of the  parameter, and adds it to the collection.

    - Parameter name: The name of the relation.
    - Parameter parentColumn: The parent column of the relation.
    - Parameter childColumn: The child column of the relation.
    - Parameter createConstraints: 
         to create constraints; otherwise . (The default is ).
    - Returns: The created relation.

    */
    open func Add(name : Optional<dotnet.System.String>, parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn, createConstraints : Bool) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__Add_0__4__String_DataColumn_DataColumn_bool(&__thrown, self.get_handle(), name?.get_handle() ?? nil, parentColumn.get_handle(), childColumn.get_handle(), Swift.Int32(createConstraints ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // System.Data.DataRelation Add(System.String, System.Data.DataColumn[], System.Data.DataColumn[])
// docid: M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
    /**
    Creates a  with the specified name and arrays of parent and child columns, and adds it to the collection.

    - Parameter name: The name of the  to create.
    - Parameter parentColumns: An array of parent  objects.
    - Parameter childColumns: An array of child  objects.
    - Returns: The created .

    */
    open func Add(name : Optional<dotnet.System.String>, parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__Add_0__3__String_DataColumnArray_DataColumnArray(&__thrown, self.get_handle(), name?.get_handle() ?? nil, parentColumns.get_handle(), childColumns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // System.Data.DataRelation Add(System.String, System.Data.DataColumn[], System.Data.DataColumn[], bool)
// docid: M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
    /**
    Creates a  with the specified name, arrays of parent and child columns, and value specifying whether to create a constraint, and adds it to the collection.

    - Parameter name: The name of the  to create.
    - Parameter parentColumns: An array of parent  objects.
    - Parameter childColumns: An array of child  objects.
    - Parameter createConstraints: 
         to create a constraint; otherwise .
    - Returns: The created relation.

    */
    open func Add(name : Optional<dotnet.System.String>, parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, createConstraints : Bool) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__Add_0__4__String_DataColumnArray_DataColumnArray_bool(&__thrown, self.get_handle(), name?.get_handle() ?? nil, parentColumns.get_handle(), childColumns.get_handle(), Swift.Int32(createConstraints ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // void AddRange(System.Data.DataRelation[])
// docid: M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])
    /**
    Copies the elements of the specified  array to the end of the collection.

    - Parameter relations: The array of  objects to add to the collection.
    */
    open func AddRange(relations : Optional<dotnet.System_Arr<dotnet.System.Data.DataRelation>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__AddRange_0__1__DataRelationArray(&__thrown, self.get_handle(), (relations?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CanRemove(System.Data.DataRelation)
// docid: M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)
    /**
    Verifies whether the specified  can be removed from the collection.

    - Parameter relation: The relation to perform the check against.
    - Returns: 
         if the  can be removed; otherwise, .

    */
    open func CanRemove(relation : Optional<dotnet.System.Data.DataRelation>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_bool__CanRemove_0__1__DataRelation(&__thrown, self.get_handle(), relation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Data.DataRelationCollection.Clear
    /**
    Clears the collection of any relations.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.DataRelationCollection.Contains(System.String)
    /**
    Verifies whether a  with the specific name (case insensitive) exists in the collection.

    - Parameter name: The name of the relation to find.
    - Returns: 
        , if a relation with the specified name exists; otherwise .

    */
    open func Contains(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Data.DataRelation[], System.Int32)
// docid: M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)
    /**
    Copies the collection of  objects starting at the specified index.

    - Parameter array: The array of  objects to copy the collection to.
    - Parameter index: The index to start from.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.DataRelation>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__CopyTo_0__2__DataRelationArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Data.DataRelation)
// docid: M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)
    /**
    Gets the index of the specified  object.

    - Parameter relation: The relation to search for.
    - Returns: The 0-based index of the relation, or -1 if the relation is not found in the collection.

    */
    open func IndexOf(relation : Optional<dotnet.System.Data.DataRelation>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_i32__IndexOf_0__1__DataRelation(&__thrown, self.get_handle(), relation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.DataRelationCollection.IndexOf(System.String)
    /**
    Gets the index of the  specified by name.

    - Parameter relationName: The name of the relation to find.
    - Returns: The zero-based index of the relation with the specified name, or -1 if the relation does not exist in the collection.

    */
    open func IndexOf(relationName : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Remove(System.Data.DataRelation)
// docid: M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)
    /**
    Removes the specified relation from the collection.

    - Parameter relation: The relation to remove.
    */
    open func Remove(relation : dotnet.System.Data.DataRelation) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__Remove_0__1__DataRelation(&__thrown, self.get_handle(), relation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Data.DataRelationCollection.Remove(System.String)
    /**
    Removes the relation with the specified name from the collection.

    - Parameter name: The name of the relation to remove.
    */
    open func Remove(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.DataRelationCollection.RemoveAt(System.Int32)
    /**
    Removes the relation at the specified index from the collection.

    - Parameter index: The index of the relation to remove.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRelation get_Item(System.Int32)
// docid: M:System.Data.DataRelationCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.DataRelation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelation(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataRelation get_Item(System.String)
// docid: M:System.Data.DataRelationCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Data.DataRelation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRelationCollection_DataRelation__get_Item_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRelation(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataRelationCollection.add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    open func add_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__add_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try add_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataRelationCollection.remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    open func remove_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRelationCollection_void__remove_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try remove_CollectionChanged(value: del_value);
    }
} // DataRelationCollection


// type: System.Data.DataRow
    /**
    Represents a row of data in a .

    */
open class DataRow
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRow_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AcceptChanges()
// docid: M:System.Data.DataRow.AcceptChanges
    /**
    Commits all the changes made to this row since the last time  was called.

    */
    open func AcceptChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__AcceptChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginEdit()
// docid: M:System.Data.DataRow.BeginEdit
    /**
    Starts an edit operation on a  object.

    */
    open func BeginEdit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__BeginEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CancelEdit()
// docid: M:System.Data.DataRow.CancelEdit
    /**
    Cancels the current edit on the row.

    */
    open func CancelEdit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__CancelEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ClearErrors()
// docid: M:System.Data.DataRow.ClearErrors
    /**
    Clears the errors for the row. This includes the  and errors set with .

    */
    open func ClearErrors() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__ClearErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Delete()
// docid: M:System.Data.DataRow.Delete
    /**
    Deletes the .

    */
    open func Delete() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__Delete_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndEdit()
// docid: M:System.Data.DataRow.EndEdit
    /**
    Ends the edit occurring on the row.

    */
    open func EndEdit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__EndEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataRow[] GetChildRows(System.Data.DataRelation)
// docid: M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)
    /**
    Gets the child rows of this  using the specified .

    - Parameter relation: The  to use.
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetChildRows(relation : Optional<dotnet.System.Data.DataRelation>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetChildRows_0__1__DataRelation(&__thrown, self.get_handle(), relation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetChildRows(System.Data.DataRelation, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
    /**
    Gets the child rows of a  using the specified , and .

    - Parameter relation: The  to use.
    - Parameter version: One of the  values specifying the version of the data to get. Possible values are , , , and .
    - Returns: An array of  objects.

    */
    open func GetChildRows(relation : Optional<dotnet.System.Data.DataRelation>, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetChildRows_0__2__DataRelation_DataRowVersion(&__thrown, self.get_handle(), relation?.get_handle() ?? nil, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetChildRows(System.String)
// docid: M:System.Data.DataRow.GetChildRows(System.String)
    /**
    Gets the child rows of a  using the specified  of a .

    - Parameter relationName: The  of the  to use.
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetChildRows(relationName : Optional<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetChildRows_0__1__String(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetChildRows(System.String, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
    /**
    Gets the child rows of a  using the specified  of a , and .

    - Parameter relationName: The  of the  to use.
    - Parameter version: One of the  values specifying the version of the data to get. Possible values are , , , and .
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetChildRows(relationName : Optional<dotnet.System.String>, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetChildRows_0__2__String_DataRowVersion(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.String GetColumnError(System.Data.DataColumn)
// docid: M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)
    /**
    Gets the error description of the specified .

    - Parameter column: A .
    - Returns: The text of the error description.

    */
    open func GetColumnError(column : dotnet.System.Data.DataColumn) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_String__GetColumnError_0__1__DataColumn(&__thrown, self.get_handle(), column.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetColumnError(System.Int32)
// docid: M:System.Data.DataRow.GetColumnError(System.Int32)
    /**
    Gets the error description for the column specified by index.

    - Parameter columnIndex: The zero-based index of the column.
    - Returns: The text of the error description.

    */
    open func GetColumnError(columnIndex : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_String__GetColumnError_0__1__i32(&__thrown, self.get_handle(), columnIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetColumnError(System.String)
// docid: M:System.Data.DataRow.GetColumnError(System.String)
    /**
    Gets the error description for a column, specified by name.

    - Parameter columnName: The name of the column.
    - Returns: The text of the error description.

    */
    open func GetColumnError(columnName : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_String__GetColumnError_0__1__String(&__thrown, self.get_handle(), columnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.DataColumn[] GetColumnsInError()
// docid: M:System.Data.DataRow.GetColumnsInError
    /**
    Gets an array of columns that have errors.

    - Returns: An array of  objects that contain errors.

    */
    open func GetColumnsInError() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataColumnArray__GetColumnsInError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // System.Data.DataRow GetParentRow(System.Data.DataRelation)
// docid: M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)
    /**
    Gets the parent row of a  using the specified .

    - Parameter relation: The  to use.
    - Returns: The parent  of the current row.

    */
    open func GetParentRow(relation : Optional<dotnet.System.Data.DataRelation>) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRow__GetParentRow_0__1__DataRelation(&__thrown, self.get_handle(), relation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataRow GetParentRow(System.Data.DataRelation, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
    /**
    Gets the parent row of a  using the specified , and .

    - Parameter relation: The  to use.
    - Parameter version: One of the  values specifying the version of the data to get.
    - Returns: The parent  of the current row.

    */
    open func GetParentRow(relation : Optional<dotnet.System.Data.DataRelation>, version : dotnet.System.Data.DataRowVersion) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRow__GetParentRow_0__2__DataRelation_DataRowVersion(&__thrown, self.get_handle(), relation?.get_handle() ?? nil, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataRow GetParentRow(System.String)
// docid: M:System.Data.DataRow.GetParentRow(System.String)
    /**
    Gets the parent row of a  using the specified  of a .

    - Parameter relationName: The  of a .
    - Returns: The parent  of the current row.

    */
    open func GetParentRow(relationName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRow__GetParentRow_0__1__String(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataRow GetParentRow(System.String, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
    /**
    Gets the parent row of a  using the specified  of a , and .

    - Parameter relationName: The  of a .
    - Parameter version: One of the  values.
    - Returns: The parent  of the current row.

    */
    open func GetParentRow(relationName : Optional<dotnet.System.String>, version : dotnet.System.Data.DataRowVersion) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRow__GetParentRow_0__2__String_DataRowVersion(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataRow[] GetParentRows(System.Data.DataRelation)
// docid: M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)
    /**
    Gets the parent rows of a  using the specified .

    - Parameter relation: The  to use.
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetParentRows(relation : Optional<dotnet.System.Data.DataRelation>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetParentRows_0__1__DataRelation(&__thrown, self.get_handle(), relation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetParentRows(System.Data.DataRelation, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
    /**
    Gets the parent rows of a  using the specified , and .

    - Parameter relation: The  to use.
    - Parameter version: One of the  values specifying the version of the data to get.
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetParentRows(relation : Optional<dotnet.System.Data.DataRelation>, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetParentRows_0__2__DataRelation_DataRowVersion(&__thrown, self.get_handle(), relation?.get_handle() ?? nil, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetParentRows(System.String)
// docid: M:System.Data.DataRow.GetParentRows(System.String)
    /**
    Gets the parent rows of a  using the specified  of a .

    - Parameter relationName: The  of a .
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetParentRows(relationName : Optional<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetParentRows_0__1__String(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetParentRows(System.String, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
    /**
    Gets the parent rows of a  using the specified  of a , and .

    - Parameter relationName: The  of a .
    - Parameter version: One of the  values specifying the version of the data to get. Possible values are , , , and .
    - Returns: An array of  objects or an array of length zero.

    */
    open func GetParentRows(relationName : Optional<dotnet.System.String>, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowArray__GetParentRows_0__2__String_DataRowVersion(&__thrown, self.get_handle(), relationName?.get_handle() ?? nil, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // bool HasVersion(System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
    /**
    Gets a value that indicates whether a specified version exists.

    - Parameter version: One of the  values that specifies the row version.
    - Returns: 
         if the version exists; otherwise, .

    */
    open func HasVersion(version : dotnet.System.Data.DataRowVersion) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_bool__HasVersion_0__1__DataRowVersion(&__thrown, self.get_handle(), version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNull(System.Data.DataColumn)
// docid: M:System.Data.DataRow.IsNull(System.Data.DataColumn)
    /**
    Gets a value that indicates whether the specified  contains a null value.

    - Parameter column: A .
    - Returns: 
         if the column contains a null value; otherwise, .

    */
    open func IsNull(column : dotnet.System.Data.DataColumn) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_bool__IsNull_0__1__DataColumn(&__thrown, self.get_handle(), column.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNull(System.Data.DataColumn, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
    /**
    Gets a value that indicates whether the specified  and  contains a null value.

    - Parameter column: A .
    - Parameter version: One of the  values that specifies the row version. Possible values are , , , and .
    - Returns: 
         if the column contains a null value; otherwise, .

    */
    open func IsNull(column : dotnet.System.Data.DataColumn, version : dotnet.System.Data.DataRowVersion) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_bool__IsNull_0__2__DataColumn_DataRowVersion(&__thrown, self.get_handle(), column.get_handle(), version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNull(System.Int32)
// docid: M:System.Data.DataRow.IsNull(System.Int32)
    /**
    Gets a value that indicates whether the column at the specified index contains a null value.

    - Parameter columnIndex: The zero-based index of the column.
    - Returns: 
         if the column contains a null value; otherwise, .

    */
    open func IsNull(columnIndex : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_bool__IsNull_0__1__i32(&__thrown, self.get_handle(), columnIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNull(System.String)
// docid: M:System.Data.DataRow.IsNull(System.String)
    /**
    Gets a value that indicates whether the named column contains a null value.

    - Parameter columnName: The name of the column.
    - Returns: 
         if the column contains a null value; otherwise, .

    */
    open func IsNull(columnName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_bool__IsNull_0__1__String(&__thrown, self.get_handle(), columnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RejectChanges()
// docid: M:System.Data.DataRow.RejectChanges
    /**
    Rejects all changes made to the row since  was last called.

    */
    open func RejectChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__RejectChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAdded()
// docid: M:System.Data.DataRow.SetAdded
    /**
    Changes the  of a  to .

    */
    open func SetAdded() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetAdded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetColumnError(System.Data.DataColumn, System.String)
// docid: M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
    /**
    Sets the error description for a column specified as a .

    - Parameter column: The  to set the error description for.
    - Parameter error: The error description.
    */
    open func SetColumnError(column : dotnet.System.Data.DataColumn, error : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetColumnError_0__2__DataColumn_String(&__thrown, self.get_handle(), column.get_handle(), error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetColumnError(System.Int32, System.String)
// docid: M:System.Data.DataRow.SetColumnError(System.Int32,System.String)
    /**
    Sets the error description for a column specified by index.

    - Parameter columnIndex: The zero-based index of the column.
    - Parameter error: The error description.
    */
    open func SetColumnError(columnIndex : Swift.Int32, error : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetColumnError_0__2__i32_String(&__thrown, self.get_handle(), columnIndex, error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetColumnError(System.String, System.String)
// docid: M:System.Data.DataRow.SetColumnError(System.String,System.String)
    /**
    Sets the error description for a column specified by name.

    - Parameter columnName: The name of the column.
    - Parameter error: The error description.
    */
    open func SetColumnError(columnName : dotnet.System.String, error : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetColumnError_0__2__String_String(&__thrown, self.get_handle(), columnName.get_handle(), error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetModified()
// docid: M:System.Data.DataRow.SetModified
    /**
    Changes the  of a  to .

    */
    open func SetModified() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetParentRow(System.Data.DataRow)
// docid: M:System.Data.DataRow.SetParentRow(System.Data.DataRow)
    /**
    Sets the parent row of a  with specified new parent .

    - Parameter parentRow: The new parent .
    */
    open func SetParentRow(parentRow : Optional<dotnet.System.Data.DataRow>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetParentRow_0__1__DataRow(&__thrown, self.get_handle(), parentRow?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetParentRow(System.Data.DataRow, System.Data.DataRelation)
// docid: M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
    /**
    Sets the parent row of a  with specified new parent  and .

    - Parameter parentRow: The new parent .
    - Parameter relation: The relation  to use.
    */
    open func SetParentRow(parentRow : Optional<dotnet.System.Data.DataRow>, relation : Optional<dotnet.System.Data.DataRelation>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__SetParentRow_0__2__DataRow_DataRelation(&__thrown, self.get_handle(), parentRow?.get_handle() ?? nil, relation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasErrors()
// docid: M:System.Data.DataRow.get_HasErrors
    open func get_HasErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_bool__get_HasErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object[] get_ItemArray()
// docid: M:System.Data.DataRow.get_ItemArray
    open func get_ItemArray() throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_ObjectArray__get_ItemArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ItemArray(System.Object[])
// docid: M:System.Data.DataRow.set_ItemArray(System.Object[])
    open func set_ItemArray(value : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__set_ItemArray_0__1__ObjectArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RowError()
// docid: M:System.Data.DataRow.get_RowError
    open func get_RowError() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_String__get_RowError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RowError(System.String)
// docid: M:System.Data.DataRow.set_RowError(System.String)
    open func set_RowError(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__set_RowError_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRowState get_RowState()
// docid: M:System.Data.DataRow.get_RowState
    open func get_RowState() throws -> dotnet.System.Data.DataRowState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataRowState__get_RowState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowState(val: __return);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.DataRow.get_Table
    open func get_Table() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Data.DataColumn)
// docid: M:System.Data.DataRow.get_Item(System.Data.DataColumn)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(column : dotnet.System.Data.DataColumn) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_Object__get_Item_0__1__DataColumn(&__thrown, self.get_handle(), column.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Data.DataColumn, System.Object)
// docid: M:System.Data.DataRow.set_Item(System.Data.DataColumn,System.Object)
    open func set_Item(column : dotnet.System.Data.DataColumn, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__set_Item_0__2__DataColumn_Object(&__thrown, self.get_handle(), column.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Data.DataColumn, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.get_Item(System.Data.DataColumn,System.Data.DataRowVersion)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(column : dotnet.System.Data.DataColumn, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_Object__get_Item_0__2__DataColumn_DataRowVersion(&__thrown, self.get_handle(), column.get_handle(), version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Data.DataRow.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(columnIndex : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), columnIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Object)
// docid: M:System.Data.DataRow.set_Item(System.Int32,System.Object)
    open func set_Item(columnIndex : Swift.Int32, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__set_Item_0__2__i32_Object(&__thrown, self.get_handle(), columnIndex, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.get_Item(System.Int32,System.Data.DataRowVersion)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(columnIndex : Swift.Int32, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_Object__get_Item_0__2__i32_DataRowVersion(&__thrown, self.get_handle(), columnIndex, version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.DataRow.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(columnName : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_Object__get_Item_0__1__String(&__thrown, self.get_handle(), columnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Data.DataRow.set_Item(System.String,System.Object)
    open func set_Item(columnName : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRow_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), columnName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String, System.Data.DataRowVersion)
// docid: M:System.Data.DataRow.get_Item(System.String,System.Data.DataRowVersion)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(columnName : dotnet.System.String, version : dotnet.System.Data.DataRowVersion) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRow_Object__get_Item_0__2__String_DataRowVersion(&__thrown, self.get_handle(), columnName.get_handle(), version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets a value that indicates whether there are errors in a row.

    */
    open var HasErrors : Bool {
        get {
            return try! get_HasErrors();
        }
    }
    /**
    Gets or sets all the values for this row through an array.

    */
    open var ItemArray : dotnet.System_Arr<dotnet.System.Object> {
        get {
            return try! get_ItemArray();
        }
        set(v) {
            return try! set_ItemArray(value: v);
        }
    }
    /**
    Gets or sets the custom error description for a row.

    */
    open var RowError : dotnet.System.String {
        get {
            return try! get_RowError();
        }
        set(v) {
            return try! set_RowError(value: v);
        }
    }
    /**
    Gets the current state of the row with regard to its relationship to the .

    */
    open var RowState : dotnet.System.Data.DataRowState {
        get {
            return try! get_RowState();
        }
    }
    /**
    Gets the  for which this row has a schema.

    */
    open var Table : dotnet.System.Data.DataTable {
        get {
            return try! get_Table();
        }
    }
} // DataRow


// type: System.Data.DataRowAction
    /**
    Describes an action performed on a .

    */
public struct DataRowAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_DataRowAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.DataRowAction Nothing
    /**
    The row has not changed.

    */
    public static var Nothing : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_Nothing());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction Delete
    /**
    The row was deleted from the table.

    */
    public static var Delete : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_Delete());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction Change
    /**
    The row has changed.

    */
    public static var Change : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_Change());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction Rollback
    /**
    The most recent change to the row has been rolled back.

    */
    public static var Rollback : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_Rollback());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction Commit
    /**
    The changes to the row have been committed.

    */
    public static var Commit : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_Commit());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction Add
    /**
    The row has been added to the table.

    */
    public static var Add : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_Add());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction ChangeOriginal
    /**
    The original version of the row has been changed.

    */
    public static var ChangeOriginal : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_ChangeOriginal());
            return __return;
        }
    }
    // static field: System.Data.DataRowAction ChangeCurrentAndOriginal
    /**
    The original and the current versions of the row have been changed.

    */
    public static var ChangeCurrentAndOriginal : dotnet.System.Data.DataRowAction {
        get {
        let __return = dotnet.System.Data.DataRowAction(val: System_Data_DataRowAction_get_ChangeCurrentAndOriginal());
            return __return;
        }
    }
} // DataRowAction


// type: System.Data.DataRowBuilder
    /**
    The  type supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
public final class DataRowBuilder
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRowBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // DataRowBuilder


// type: System.Data.DataRowChangeEventArgs
    /**
    Provides data for the , , , and  events.

    */
open class DataRowChangeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRowChangeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataRow, System.Data.DataRowAction)
// docid: M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)
    /**
    Initializes a new instance of the  class.

    - Parameter row: The  upon which an action is occurring.
    - Parameter action: One of the  values.
    */
    public init(row : dotnet.System.Data.DataRow, action : dotnet.System.Data.DataRowAction) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRowChangeEventArgs_ctor_0__2__DataRow_DataRowAction(&__thrown, row.get_handle(), action.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Data.DataRowAction get_Action()
// docid: M:System.Data.DataRowChangeEventArgs.get_Action
    open func get_Action() throws -> dotnet.System.Data.DataRowAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowChangeEventArgs_DataRowAction__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowAction(val: __return);
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.DataRowChangeEventArgs.get_Row
    open func get_Row() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowChangeEventArgs_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    /**
    Gets the action that has occurred on a .

    */
    open var Action : dotnet.System.Data.DataRowAction {
        get {
            return try! get_Action();
        }
    }
    /**
    Gets the row upon which an action has occurred.

    */
    open var Row : dotnet.System.Data.DataRow {
        get {
            return try! get_Row();
        }
    }
} // DataRowChangeEventArgs


// type: System.Data.DataRowChangeEventHandler
    /**
    Represents the method that will handle the , , , and  events of a .

    */
public final class DataRowChangeEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRowChangeEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.DataRowChangeEventArgs)
// docid: M:System.Data.DataRowChangeEventHandler.Invoke(System.Object,System.Data.DataRowChangeEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataRowChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowChangeEventHandler_void__Invoke_0__2__Object_DataRowChangeEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.DataRowChangeEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.DataRowChangeEventHandler.BeginInvoke(System.Object,System.Data.DataRowChangeEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataRowChangeEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowChangeEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DataRowChangeEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.DataRowChangeEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowChangeEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.DataRowChangeEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataRowChangeEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.DataRowChangeEventArgs)
// docid: M:System.Data.DataRowChangeEventHandler.Invoke(System.Object,System.Data.DataRowChangeEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.DataRowChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowChangeEventHandler_void__Invoke_0__2__Object_DataRowChangeEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataRowChangeEventHandler


// type: System.Data.DataRowCollection
    /**
    Represents a collection of rows for a .

    */
public final class DataRowCollection
    :
    dotnet.System.Data.InternalDataCollectionBase
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRowCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Data.DataRow)
// docid: M:System.Data.DataRowCollection.Add(System.Data.DataRow)
    /**
    Adds the specified  to the  object.

    - Parameter row: The  to add.
    */
    public func Add(row : dotnet.System.Data.DataRow) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__Add_0__1__DataRow(&__thrown, self.get_handle(), row.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataRow Add(System.Object[])
// docid: M:System.Data.DataRowCollection.Add(System.Object[])
    /**
    Creates a row using specified values and adds it to the .

    - Parameter values: The array of values that are used to create the new row.
    - Returns: None.

    */
    public func Add(values : dotnet.System_Arr<dotnet.System.Object>) throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_DataRow__Add_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // void Clear()
// docid: M:System.Data.DataRowCollection.Clear
    /**
    Clears the collection of all rows.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Data.DataRowCollection.Contains(System.Object)
    /**
    Gets a value that indicates whether the primary key of any row in the collection contains the specified value.

    - Parameter key: The value of the primary key to test for.
    - Returns: 
         if the collection contains a  with the specified primary key value; otherwise, .

    */
    public func Contains(key : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_bool__Contains_0__1__Object(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Object[])
// docid: M:System.Data.DataRowCollection.Contains(System.Object[])
    /**
    Gets a value that indicates whether the primary key columns of any row in the collection contain the values specified in the object array.

    - Parameter keys: An array of primary key values to test for.
    - Returns: 
         if the  contains a  with the specified key values; otherwise, .

    */
    public func Contains(keys : dotnet.System_Arr<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_bool__Contains_0__1__ObjectArray(&__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies all the  objects from the collection into the given array, starting at the given destination array index.

    - Parameter ar: The one-dimensional array that is the destination of the elements copied from the . The array must have zero-based indexing.
    - Parameter index: The zero-based index in the array at which copying begins.
    */
    public override func CopyTo(ar : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), ar.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Data.DataRow[], System.Int32)
// docid: M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
    /**
    Copies all the  objects from the collection into the given array, starting at the given destination array index.

    - Parameter array: The one-dimensional array that is the destination of the elements copied from the . The array must have zero-based indexing.
    - Parameter index: The zero-based index in the array at which copying begins.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.DataRow>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__CopyTo_0__2__DataRowArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataRow Find(System.Object)
// docid: M:System.Data.DataRowCollection.Find(System.Object)
    /**
    Gets the row specified by the primary key value.

    - Parameter key: The primary key value of the  to find.
    - Returns: A  that contains the primary key value specified; otherwise a null value if the primary key value does not exist in the .

    */
    public func Find(key : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_DataRow__Find_0__1__Object(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataRow Find(System.Object[])
// docid: M:System.Data.DataRowCollection.Find(System.Object[])
    /**
    Gets the row that contains the specified primary key values.

    - Parameter keys: An array of primary key values to find. The type of the array is .
    - Returns: A  object that contains the primary key values specified; otherwise a null value if the primary key value does not exist in the .

    */
    public func Find(keys : dotnet.System_Arr<dotnet.System.Object>) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_DataRow__Find_0__1__ObjectArray(&__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.DataRowCollection.GetEnumerator
    /**
    Gets an  for this collection.

    - Returns: An  for this collection.

    */
    public override func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Data.DataRow)
// docid: M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
    /**
    Gets the index of the specified  object.

    - Parameter row: The  to search for.
    - Returns: The zero-based index of the row, or -1 if the row is not found in the collection.

    */
    public func IndexOf(row : Optional<dotnet.System.Data.DataRow>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_i32__IndexOf_0__1__DataRow(&__thrown, self.get_handle(), row?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void InsertAt(System.Data.DataRow, System.Int32)
// docid: M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
    /**
    Inserts a new row into the collection at the specified location.

    - Parameter row: The  to add.
    - Parameter pos: The (zero-based) location in the collection where you want to add the .
    */
    public func InsertAt(row : dotnet.System.Data.DataRow, pos : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__InsertAt_0__2__DataRow_i32(&__thrown, self.get_handle(), row.get_handle(), pos);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Data.DataRow)
// docid: M:System.Data.DataRowCollection.Remove(System.Data.DataRow)
    /**
    Removes the specified  from the collection.

    - Parameter row: The  to remove.
    */
    public func Remove(row : dotnet.System.Data.DataRow) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__Remove_0__1__DataRow(&__thrown, self.get_handle(), row.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.DataRowCollection.RemoveAt(System.Int32)
    /**
    Removes the row at the specified index from the collection.

    - Parameter index: The index of the row to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.DataRowCollection.get_Count
    public override func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Item(System.Int32)
// docid: M:System.Data.DataRowCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowCollection_DataRow__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    /**
    Gets the total number of  objects in this collection.

    */
    public override var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // DataRowCollection


// type: System.Data.DataRowComparer
public struct DataRowComparer {
    // [IsSpecialName] System.Data.DataRowComparer<System.Data.DataRow> get_Default()
// docid: M:System.Data.DataRowComparer.get_Default
    public static func get_Default() throws -> dotnet.System.Data.DataRowComparer_1<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowComparer_System_Data_DataRowComparer_System_Data_DataRow___get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowComparer_1(hndl : __return);
        }
    }
    /**
    Gets a singleton instance of . This property is read-only.

    */
    public static var Default : dotnet.System.Data.DataRowComparer_1<dotnet.System.Data.DataRow> {
        get {
            return try! get_Default();
        }
    }
} // DataRowComparer


// type: System.Data.DataRowComparer`1
    /**
    Compares two  objects for equivalence by using value-based comparison.

    */
public final class DataRowComparer_1<TRow : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRowComparer_1_get_type_handle(TRow.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(TRow, TRow)
// docid: M:System.Data.DataRowComparer`1.Equals(`0,`0)
    /**
    Compares two  objects by using a column-by-column, value-based comparison.

    - Parameter leftRow: The first  object to compare.
    - Parameter rightRow: The second  object to compare.
    - Returns: 
         if the two  objects have ordered sets of column values that are equal; otherwise, .

    */
    public func Equals(leftRow : TRow, rightRow : TRow) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowComparer_1_bool__Equals_0__2__TRow_TRow(TRow.get_type_handle(), &__thrown, self.get_handle(), leftRow.to_gval(), rightRow.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode(TRow)
// docid: M:System.Data.DataRowComparer`1.GetHashCode(`0)
    /**
    Returns a hash code for the specified  object.

    - Parameter row: The  to compute the hash code from.
    - Returns: An  value representing the hash code of the row.

    */
    public func GetHashCode(row : TRow) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowComparer_1_i32__GetHashCode_0__1__TRow(TRow.get_type_handle(), &__thrown, self.get_handle(), row.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.DataRowComparer<TRow> get_Default()
// docid: M:System.Data.DataRowComparer`1.get_Default
    public class func get_Default() throws -> dotnet.System.Data.DataRowComparer_1<TRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowComparer_1_System_Data_DataRowComparer_TRow___get_Default_0__0(TRow.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowComparer_1(hndl : __return);
        }
    }
    /**
    Gets a singleton instance of . This property is read-only.

    */
    public static var Default : dotnet.System.Data.DataRowComparer_1<TRow> {
        get {
            return try! get_Default();
        }
    }
} // DataRowComparer_1


// type: System.Data.DataRowExtensions
public struct DataRowExtensions {
// TODO COPE (write_all_methods) (unused generic param) T Field<T>(System.Data.DataRow, System.Data.DataColumn)
// TODO COPE (write_all_methods) (unused generic param) T Field<T>(System.Data.DataRow, System.Data.DataColumn, System.Data.DataRowVersion)
// TODO COPE (write_all_methods) (unused generic param) T Field<T>(System.Data.DataRow, System.Int32)
// TODO COPE (write_all_methods) (unused generic param) T Field<T>(System.Data.DataRow, System.Int32, System.Data.DataRowVersion)
// TODO COPE (write_all_methods) (unused generic param) T Field<T>(System.Data.DataRow, System.String)
// TODO COPE (write_all_methods) (unused generic param) T Field<T>(System.Data.DataRow, System.String, System.Data.DataRowVersion)
    // void SetField<T>(System.Data.DataRow, System.Data.DataColumn, T)
// docid: M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)
    /**
    Sets a new value for the specified column in the . The  method also supports nullable types.

    - Parameter row: The input , which acts as the  instance for the extension method.
    - Parameter column: The input  specifies which row value to retrieve.
    - Parameter value: The new row value for the specified column, of type .
    */
    public static func SetField<UT : SGBridgeGenericValue>(row : dotnet.System.Data.DataRow, column : dotnet.System.Data.DataColumn, value : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowExtensions_void__SetField_1__3__DataRow_DataColumn_UT(UT.get_type_handle(), &__thrown, row.get_handle(), column.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetField<T>(System.Data.DataRow, System.Int32, T)
// docid: M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)
    /**
    Sets a new value for the specified column in the  the method is called on. The  method also supports nullable types.

    - Parameter row: The input , which acts as the  instance for the extension method.
    - Parameter columnIndex: The zero-based ordinal of the column to set the value of.
    - Parameter value: The new row value for the specified column, of type .
    */
    public static func SetField<UT : SGBridgeGenericValue>(row : dotnet.System.Data.DataRow, columnIndex : Swift.Int32, value : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowExtensions_void__SetField_1__3__DataRow_i32_UT(UT.get_type_handle(), &__thrown, row.get_handle(), columnIndex, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetField<T>(System.Data.DataRow, System.String, T)
// docid: M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)
    /**
    Sets a new value for the specified column in the . The  method also supports nullable types.

    - Parameter row: The input , which acts as the  instance for the extension method.
    - Parameter columnName: The name of the column to set the value of.
    - Parameter value: The new row value for the specified column, of type .
    */
    public static func SetField<UT : SGBridgeGenericValue>(row : dotnet.System.Data.DataRow, columnName : dotnet.System.String, value : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowExtensions_void__SetField_1__3__DataRow_String_UT(UT.get_type_handle(), &__thrown, row.get_handle(), columnName.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataRowExtensions


// type: System.Data.DataRowState
    /**
    Gets the state of a  object.

    */
public struct DataRowState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_DataRowState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.DataRowState Detached
    /**
    The row has been created but is not part of any . A  is in this state immediately after it has been created and before it is added to a collection, or if it has been removed from a collection.

    */
    public static var Detached : dotnet.System.Data.DataRowState {
        get {
        let __return = dotnet.System.Data.DataRowState(val: System_Data_DataRowState_get_Detached());
            return __return;
        }
    }
    // static field: System.Data.DataRowState Unchanged
    /**
    The row has not changed since  was last called.

    */
    public static var Unchanged : dotnet.System.Data.DataRowState {
        get {
        let __return = dotnet.System.Data.DataRowState(val: System_Data_DataRowState_get_Unchanged());
            return __return;
        }
    }
    // static field: System.Data.DataRowState Added
    /**
    The row has been added to a , and  has not been called.

    */
    public static var Added : dotnet.System.Data.DataRowState {
        get {
        let __return = dotnet.System.Data.DataRowState(val: System_Data_DataRowState_get_Added());
            return __return;
        }
    }
    // static field: System.Data.DataRowState Deleted
    /**
    The row was deleted using the  method of the .

    */
    public static var Deleted : dotnet.System.Data.DataRowState {
        get {
        let __return = dotnet.System.Data.DataRowState(val: System_Data_DataRowState_get_Deleted());
            return __return;
        }
    }
    // static field: System.Data.DataRowState Modified
    /**
    The row has been modified and  has not been called.

    */
    public static var Modified : dotnet.System.Data.DataRowState {
        get {
        let __return = dotnet.System.Data.DataRowState(val: System_Data_DataRowState_get_Modified());
            return __return;
        }
    }
} // DataRowState


// type: System.Data.DataRowVersion
    /**
    Describes the version of a .

    */
public struct DataRowVersion : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_DataRowVersion_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.DataRowVersion Original
    /**
    The row contains its original values.

    */
    public static var Original : dotnet.System.Data.DataRowVersion {
        get {
        let __return = dotnet.System.Data.DataRowVersion(val: System_Data_DataRowVersion_get_Original());
            return __return;
        }
    }
    // static field: System.Data.DataRowVersion Current
    /**
    The row contains current values.

    */
    public static var Current : dotnet.System.Data.DataRowVersion {
        get {
        let __return = dotnet.System.Data.DataRowVersion(val: System_Data_DataRowVersion_get_Current());
            return __return;
        }
    }
    // static field: System.Data.DataRowVersion Proposed
    /**
    The row contains a proposed value.

    */
    public static var Proposed : dotnet.System.Data.DataRowVersion {
        get {
        let __return = dotnet.System.Data.DataRowVersion(val: System_Data_DataRowVersion_get_Proposed());
            return __return;
        }
    }
    // static field: System.Data.DataRowVersion Default
    /**
    The default version of . For a  value of ,  or , the default version is . For a  value of , the version is .

    */
    public static var Default : dotnet.System.Data.DataRowVersion {
        get {
        let __return = dotnet.System.Data.DataRowVersion(val: System_Data_DataRowVersion_get_Default());
            return __return;
        }
    }
} // DataRowVersion


// type: System.Data.DataRowView
    /**
    Represents a customized view of a .

    */
open class DataRowView
    :
    dotnet.System.Object,
    System_ComponentModel_ICustomTypeDescriptor,
    System_ComponentModel_IDataErrorInfo,
    System_ComponentModel_IEditableObject,
    System_ComponentModel_INotifyPropertyChanged
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataRowView_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void BeginEdit()
// docid: M:System.Data.DataRowView.BeginEdit
    /**
    Begins an edit procedure.

    */
    open /* method final */ func BeginEdit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__BeginEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CancelEdit()
// docid: M:System.Data.DataRowView.CancelEdit
    /**
    Cancels an edit procedure.

    */
    open /* method final */ func CancelEdit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__CancelEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataView CreateChildView(System.Data.DataRelation)
// docid: M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)
    /**
    Returns a  for the child  with the specified child .

    - Parameter relation: The  object.
    - Returns: a  for the child .

    */
    open func CreateChildView(relation : dotnet.System.Data.DataRelation) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataView__CreateChildView_0__1__DataRelation(&__thrown, self.get_handle(), relation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // System.Data.DataView CreateChildView(System.Data.DataRelation, bool)
// docid: M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)
    /**
    Returns a  for the child  with the specified  and parent.

    - Parameter relation: The  object.
    - Parameter followParent: The parent object.
    - Returns: A  for the child .

    */
    open func CreateChildView(relation : dotnet.System.Data.DataRelation, followParent : Bool) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataView__CreateChildView_0__2__DataRelation_bool(&__thrown, self.get_handle(), relation.get_handle(), Swift.Int32(followParent ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // System.Data.DataView CreateChildView(System.String)
// docid: M:System.Data.DataRowView.CreateChildView(System.String)
    /**
    Returns a  for the child  with the specified child  name.

    - Parameter relationName: A string containing the  name.
    - Returns: a  for the child .

    */
    open func CreateChildView(relationName : dotnet.System.String) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataView__CreateChildView_0__1__String(&__thrown, self.get_handle(), relationName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // System.Data.DataView CreateChildView(System.String, bool)
// docid: M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)
    /**
    Returns a  for the child  with the specified  name and parent.

    - Parameter relationName: A string containing the  name.
    - Parameter followParent: 
         to keep the created child view in sync with the parent; otherwise, .
    - Returns: a  for the child .

    */
    open func CreateChildView(relationName : dotnet.System.String, followParent : Bool) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataView__CreateChildView_0__2__String_bool(&__thrown, self.get_handle(), relationName.get_handle(), Swift.Int32(followParent ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // void Delete()
// docid: M:System.Data.DataRowView.Delete
    /**
    Deletes a row.

    */
    open func Delete() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__Delete_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndEdit()
// docid: M:System.Data.DataRowView.EndEdit
    /**
    Commits changes to the underlying  and ends the editing session that was begun with .  Use  to discard the changes made to the .

    */
    open /* method final */ func EndEdit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__EndEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.DataRowView.Equals(System.Object)
    /**
    Gets a value indicating whether the current  is identical to the specified object.

    - Parameter other: An  to be compared.
    - Returns: 
         if  is a  and it returns the same row as the current ; otherwise .

    */
    open func Equals(other : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_bool__Equals_0__1__Object(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.DataRowView.GetHashCode
    /**
    Returns the hash code of the  object.

    - Returns: A 32-bit signed integer hash code 1, which represents Boolean  if the value of this instance is nonzero; otherwise the integer zero, which represents Boolean .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.DataView get_DataView()
// docid: M:System.Data.DataRowView.get_DataView
    open func get_DataView() throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataView__get_DataView_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEdit()
// docid: M:System.Data.DataRowView.get_IsEdit
    open func get_IsEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_bool__get_IsEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNew()
// docid: M:System.Data.DataRowView.get_IsNew
    open func get_IsNew() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_bool__get_IsNew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.DataRowView.get_Row
    open func get_Row() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataRowVersion get_RowVersion()
// docid: M:System.Data.DataRowView.get_RowVersion
    open func get_RowVersion() throws -> dotnet.System.Data.DataRowVersion {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_DataRowVersion__get_RowVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowVersion(val: __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Data.DataRowView.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(ndx : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), ndx);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Object)
// docid: M:System.Data.DataRowView.set_Item(System.Int32,System.Object)
    open func set_Item(ndx : Swift.Int32, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__set_Item_0__2__i32_Object(&__thrown, self.get_handle(), ndx, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.DataRowView.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(property : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataRowView_Object__get_Item_0__1__String(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Data.DataRowView.set_Item(System.String,System.Object)
    open func set_Item(property : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), property.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
// docid: M:System.Data.DataRowView.add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
    open /* method final */ func add_PropertyChanged(value : Optional<dotnet.System.ComponentModel.PropertyChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__add_PropertyChanged_0__1__PropertyChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_PropertyChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.PropertyChangedEventHandler(value);
        return try add_PropertyChanged(value: del_value);
    }
    // [IsSpecialName] void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
// docid: M:System.Data.DataRowView.remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
    open /* method final */ func remove_PropertyChanged(value : Optional<dotnet.System.ComponentModel.PropertyChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataRowView_void__remove_PropertyChanged_0__1__PropertyChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_PropertyChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.PropertyChangedEventHandler(value);
        return try remove_PropertyChanged(value: del_value);
    }
    /**
    Gets the  to which this row belongs.

    */
    open var DataView : dotnet.System.Data.DataView {
        get {
            return try! get_DataView();
        }
    }
    /**
    Indicates whether the row is in edit mode.

    */
    open var IsEdit : Bool {
        get {
            return try! get_IsEdit();
        }
    }
    /**
    Indicates whether a  is new.

    */
    open var IsNew : Bool {
        get {
            return try! get_IsNew();
        }
    }
    /**
    Gets the  being viewed.

    */
    open var Row : dotnet.System.Data.DataRow {
        get {
            return try! get_Row();
        }
    }
    /**
    Gets the current version description of the .

    */
    open var RowVersion : dotnet.System.Data.DataRowVersion {
        get {
            return try! get_RowVersion();
        }
    }
} // DataRowView


// type: System.Data.DataSet
    /**
    Represents an in-memory cache of data.

    */
open class DataSet
    :
    dotnet.System.ComponentModel.MarshalByValueComponent,
    System_ComponentModel_IListSource,
    System_ComponentModel_ISupportInitialize,
    System_ComponentModel_ISupportInitializeNotification,
    System_Runtime_Serialization_ISerializable,
    System_Xml_Serialization_IXmlSerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataSet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DataSet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataSet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DataSet.#ctor(System.String)
    /**
    Initializes a new instance of a  class with the given name.

    - Parameter dataSetName: The name of the .
    */
    public init(dataSetName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataSet_ctor_0__1__String(&__thrown, dataSetName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AcceptChanges()
// docid: M:System.Data.DataSet.AcceptChanges
    /**
    Commits all the changes made to this  since it was loaded or since the last time  was called.

    */
    open func AcceptChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__AcceptChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginInit()
// docid: M:System.Data.DataSet.BeginInit
    /**
    Begins the initialization of a  that is used on a form or used by another component. The initialization occurs at run time.

    */
    open /* method final */ func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.DataSet.Clear
    /**
    Clears the  of any data by removing all rows in all tables.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataSet Clone()
// docid: M:System.Data.DataSet.Clone
    /**
    Copies the structure of the , including all  schemas, relations, and constraints. Does not copy any data.

    - Returns: A new  with the same schema as the current , but none of the data.

    */
    open func Clone() throws -> dotnet.System.Data.DataSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataSet__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataSet(hndl : __return);
        }
    }
    // System.Data.DataSet Copy()
// docid: M:System.Data.DataSet.Copy
    /**
    Copies both the structure and data for this .

    - Returns: A new  with the same structure (table schemas, relations, and constraints) and data as this .  
  
   
 If these classes have been subclassed, the copy will also be of the same subclasses.

    */
    open func Copy() throws -> dotnet.System.Data.DataSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataSet__Copy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataSet(hndl : __return);
        }
    }
    // System.Data.DataTableReader CreateDataReader()
// docid: M:System.Data.DataSet.CreateDataReader
    /**
    Returns a  with one result set per , in the same sequence as the tables appear in the  collection.

    - Returns: A  containing one or more result sets, corresponding to the  instances contained within the source .

    */
    open func CreateDataReader() throws -> dotnet.System.Data.DataTableReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataTableReader__CreateDataReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTableReader(hndl : __return);
        }
    }
    // System.Data.DataTableReader CreateDataReader(System.Data.DataTable[])
// docid: M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
    /**
    Returns a  with one result set per .

    - Parameter dataTables: An array of DataTables providing the order of the result sets to be returned in the .
    - Returns: A  containing one or more result sets, corresponding to the  instances contained within the source . The returned result sets are in the order specified by the  parameter.

    */
    open func CreateDataReader(dataTables : dotnet.System_Arr<dotnet.System.Data.DataTable>) throws -> dotnet.System.Data.DataTableReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataTableReader__CreateDataReader_0__1__DataTableArray(&__thrown, self.get_handle(), dataTables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTableReader(hndl : __return);
        }
    }
    // void EndInit()
// docid: M:System.Data.DataSet.EndInit
    /**
    Ends the initialization of a  that is used on a form or used by another component. The initialization occurs at run time.

    */
    open /* method final */ func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataSet GetChanges()
// docid: M:System.Data.DataSet.GetChanges
    /**
    Gets a copy of the  that contains all changes made to it since it was loaded or since  was last called.

    - Returns: A copy of the changes from this  that can have actions performed on it and later be merged back in using . If no changed rows are found, the method returns .

    */
    open func GetChanges() throws -> Optional<dotnet.System.Data.DataSet> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataSet__GetChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataSet(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataSet GetChanges(System.Data.DataRowState)
// docid: M:System.Data.DataSet.GetChanges(System.Data.DataRowState)
    /**
    Gets a copy of the  containing all changes made to it since it was last loaded, or since  was called, filtered by .

    - Parameter rowStates: One of the  values.
    - Returns: A filtered copy of the  that can have actions performed on it, and subsequently be merged back in using . If no rows of the desired  are found, the method returns .

    */
    open func GetChanges(rowStates : dotnet.System.Data.DataRowState) throws -> Optional<dotnet.System.Data.DataSet> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataSet__GetChanges_0__1__DataRowState(&__thrown, self.get_handle(), rowStates.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataSet(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
    /**
    Gets a copy of  for the DataSet.

    - Parameter schemaSet: The specified schema set.
    - Returns: A copy of .

    */
    open class func GetDataSetSchema(schemaSet : Optional<dotnet.System.Xml.Schema.XmlSchemaSet>) throws -> dotnet.System.Xml.Schema.XmlSchemaComplexType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlSchemaComplexType__GetDataSetSchema_0__1__XmlSchemaSet(&__thrown, schemaSet?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaComplexType(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a serialization information object with the data needed to serialize the .

    - Parameter info: A  that holds the serialized data associated with the .
    - Parameter context: A  that contains the source and destination of the serialized stream associated with the .
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetXml()
// docid: M:System.Data.DataSet.GetXml
    /**
    Returns the XML representation of the data stored in the .

    - Returns: A string that is a representation of the data stored in the .

    */
    open func GetXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_String__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetXmlSchema()
// docid: M:System.Data.DataSet.GetXmlSchema
    /**
    Returns the XML Schema for the XML representation of the data stored in the .

    - Returns: String that is the XML Schema for the XML representation of the data stored in the .

    */
    open func GetXmlSchema() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_String__GetXmlSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool HasChanges()
// docid: M:System.Data.DataSet.HasChanges
    /**
    Gets a value indicating whether the  has changes, including new, deleted, or modified rows.

    - Returns: 
         if the  has changes; otherwise, .

    */
    open func HasChanges() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_bool__HasChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool HasChanges(System.Data.DataRowState)
// docid: M:System.Data.DataSet.HasChanges(System.Data.DataRowState)
    /**
    Gets a value indicating whether the  has changes, including new, deleted, or modified rows, filtered by .

    - Parameter rowStates: One of the  values.
    - Returns: 
         if the  has changes; otherwise, .

    */
    open func HasChanges(rowStates : dotnet.System.Data.DataRowState) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_bool__HasChanges_0__1__DataRowState(&__thrown, self.get_handle(), rowStates.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void InferXmlSchema(System.IO.Stream, System.String[])
// docid: M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
    /**
    Applies the XML schema from the specified  to the .

    - Parameter stream: The  from which to read the schema.
    - Parameter nsArray: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.
    */
    open func InferXmlSchema(stream : Optional<dotnet.System.IO.Stream>, nsArray : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__InferXmlSchema_0__2__Stream_StringArray(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, (nsArray?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InferXmlSchema(System.IO.TextReader, System.String[])
// docid: M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
    /**
    Applies the XML schema from the specified  to the .

    - Parameter reader: The  from which to read the schema.
    - Parameter nsArray: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.
    */
    open func InferXmlSchema(reader : Optional<dotnet.System.IO.TextReader>, nsArray : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__InferXmlSchema_0__2__TextReader_StringArray(&__thrown, self.get_handle(), reader?.get_handle() ?? nil, (nsArray?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InferXmlSchema(System.String, System.String[])
// docid: M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])
    /**
    Applies the XML schema from the specified file to the .

    - Parameter fileName: The name of the file (including the path) from which to read the schema.
    - Parameter nsArray: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.
    */
    open func InferXmlSchema(fileName : dotnet.System.String, nsArray : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__InferXmlSchema_0__2__String_StringArray(&__thrown, self.get_handle(), fileName.get_handle(), (nsArray?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InferXmlSchema(System.Xml.XmlReader, System.String[])
// docid: M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
    /**
    Applies the XML schema from the specified  to the .

    - Parameter reader: The  from which to read the schema.
    - Parameter nsArray: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.
    */
    open func InferXmlSchema(reader : Optional<dotnet.System.Xml.XmlReader>, nsArray : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__InferXmlSchema_0__2__XmlReader_StringArray(&__thrown, self.get_handle(), reader?.get_handle() ?? nil, (nsArray?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Data.IDataReader, System.Data.LoadOption, System.Data.DataTable[])
// docid: M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
    /**
    Fills a  with values from a data source using the supplied , using an array of  instances to supply the schema and namespace information.

    - Parameter reader: An  that provides one or more result sets.
    - Parameter loadOption: A value from the  enumeration that indicates how rows already in the  instances within the  will be combined with incoming rows that share the same primary key.
    - Parameter tables: An array of  instances, from which the  method retrieves name and namespace information. Each of these tables must be a member of the  contained by this .
    */
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption, tables : dotnet.System_Arr<dotnet.System.Data.DataTable>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Load_0__3__IDataReader_LoadOption_DataTableArray(&__thrown, self.get_handle(), reader.get_handle(), loadOption.get_value(), tables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Data.IDataReader, System.Data.LoadOption, System.Data.FillErrorEventHandler, System.Data.DataTable[])
// docid: M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
    /**
    Fills a  with values from a data source using the supplied , using an array of  instances to supply the schema and namespace information.

    - Parameter reader: An  that provides one or more result sets.
    - Parameter loadOption: A value from the  enumeration that indicates how rows already in the  instances within the  will be combined with incoming rows that share the same primary key.
    - Parameter errorHandler: A  delegate to call when an error occurs while loading data.
    - Parameter tables: An array of  instances, from which the  method retrieves name and namespace information.
    */
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption, errorHandler : Optional<dotnet.System.Data.FillErrorEventHandler>, tables : dotnet.System_Arr<dotnet.System.Data.DataTable>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Load_0__4__IDataReader_LoadOption_FillErrorEventHandler_DataTableArray(&__thrown, self.get_handle(), reader.get_handle(), loadOption.get_value(), errorHandler?.get_handle() ?? nil, tables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption, errorHandler : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void, tables : dotnet.System_Arr<dotnet.System.Data.DataTable>) throws {
        let del_errorHandler = try dotnet.System.Data.FillErrorEventHandler(errorHandler);
        return try Load(reader: reader, loadOption: loadOption, errorHandler: del_errorHandler, tables: tables);
    }
    // void Load(System.Data.IDataReader, System.Data.LoadOption, System.String[])
// docid: M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
    /**
    Fills a  with values from a data source using the supplied , using an array of strings to supply the names for the tables within the .

    - Parameter reader: An  that provides one or more result sets.
    - Parameter loadOption: A value from the  enumeration that indicates how rows already in the  instances within the  will be combined with incoming rows that share the same primary key.
    - Parameter tables: An array of strings, from which the  method retrieves table name information.
    */
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption, tables : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Load_0__3__IDataReader_LoadOption_StringArray(&__thrown, self.get_handle(), reader.get_handle(), loadOption.get_value(), tables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataRow[])
// docid: M:System.Data.DataSet.Merge(System.Data.DataRow[])
    /**
    Merges an array of  objects into the current .

    - Parameter rows: The array of  objects to be merged into the .
    */
    open func Merge(rows : dotnet.System_Arr<dotnet.System.Data.DataRow>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__1__DataRowArray(&__thrown, self.get_handle(), rows.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataRow[], bool, System.Data.MissingSchemaAction)
// docid: M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
    /**
    Merges an array of  objects into the current , preserving or discarding changes in the  and handling an incompatible schema according to the given arguments.

    - Parameter rows: The array of  objects to be merged into the .
    - Parameter preserveChanges: 
         to preserve changes in the ; otherwise, .
    - Parameter missingSchemaAction: One of the  values.
    */
    open func Merge(rows : dotnet.System_Arr<dotnet.System.Data.DataRow>, preserveChanges : Bool, missingSchemaAction : dotnet.System.Data.MissingSchemaAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__3__DataRowArray_bool_MissingSchemaAction(&__thrown, self.get_handle(), rows.get_handle(), Swift.Int32(preserveChanges ? 1 : 0), missingSchemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataSet)
// docid: M:System.Data.DataSet.Merge(System.Data.DataSet)
    /**
    Merges a specified  and its schema into the current .

    - Parameter dataSet: The  whose data and schema will be merged.
    */
    open func Merge(dataSet : dotnet.System.Data.DataSet) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataSet, bool)
// docid: M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
    /**
    Merges a specified  and its schema into the current , preserving or discarding any changes in this  according to the given argument.

    - Parameter dataSet: The  whose data and schema will be merged.
    - Parameter preserveChanges: 
         to preserve changes in the current ; otherwise, .
    */
    open func Merge(dataSet : dotnet.System.Data.DataSet, preserveChanges : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__2__DataSet_bool(&__thrown, self.get_handle(), dataSet.get_handle(), Swift.Int32(preserveChanges ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataSet, bool, System.Data.MissingSchemaAction)
// docid: M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
    /**
    Merges a specified  and its schema with the current , preserving or discarding changes in the current  and handling an incompatible schema according to the given arguments.

    - Parameter dataSet: The  whose data and schema will be merged.
    - Parameter preserveChanges: 
         to preserve changes in the current ; otherwise, .
    - Parameter missingSchemaAction: One of the  values.
    */
    open func Merge(dataSet : dotnet.System.Data.DataSet, preserveChanges : Bool, missingSchemaAction : dotnet.System.Data.MissingSchemaAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__3__DataSet_bool_MissingSchemaAction(&__thrown, self.get_handle(), dataSet.get_handle(), Swift.Int32(preserveChanges ? 1 : 0), missingSchemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataTable)
// docid: M:System.Data.DataSet.Merge(System.Data.DataTable)
    /**
    Merges a specified  and its schema into the current .

    - Parameter table: The  whose data and schema will be merged.
    */
    open func Merge(table : dotnet.System.Data.DataTable) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__1__DataTable(&__thrown, self.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataTable, bool, System.Data.MissingSchemaAction)
// docid: M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
    /**
    Merges a specified  and its schema into the current , preserving or discarding changes in the  and handling an incompatible schema according to the given arguments.

    - Parameter table: The  whose data and schema will be merged.
    - Parameter preserveChanges: One of the  values.
    - Parameter missingSchemaAction: 
         to preserve changes in the ; otherwise, .
    */
    open func Merge(table : dotnet.System.Data.DataTable, preserveChanges : Bool, missingSchemaAction : dotnet.System.Data.MissingSchemaAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Merge_0__3__DataTable_bool_MissingSchemaAction(&__thrown, self.get_handle(), table.get_handle(), Swift.Int32(preserveChanges ? 1 : 0), missingSchemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.XmlReadMode ReadXml(System.IO.Stream)
// docid: M:System.Data.DataSet.ReadXml(System.IO.Stream)
    /**
    Reads XML schema and data into the  using the specified .

    - Parameter stream: An object that derives from .
    - Returns: The  used to read the data.

    */
    open func ReadXml(stream : Optional<dotnet.System.IO.Stream>) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.IO.Stream, System.Data.XmlReadMode)
// docid: M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
    /**
    Reads XML schema and data into the  using the specified  and .

    - Parameter stream: The  from which to read.
    - Parameter mode: One of the  values.
    - Returns: The  used to read the data.

    */
    open func ReadXml(stream : Optional<dotnet.System.IO.Stream>, mode : dotnet.System.Data.XmlReadMode) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__2__Stream_XmlReadMode(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.IO.TextReader)
// docid: M:System.Data.DataSet.ReadXml(System.IO.TextReader)
    /**
    Reads XML schema and data into the  using the specified .

    - Parameter reader: The  from which to read the schema and data.
    - Returns: The  used to read the data.

    */
    open func ReadXml(reader : Optional<dotnet.System.IO.TextReader>) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__1__TextReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.IO.TextReader, System.Data.XmlReadMode)
// docid: M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
    /**
    Reads XML schema and data into the  using the specified  and .

    - Parameter reader: The  from which to read.
    - Parameter mode: One of the  values.
    - Returns: The  used to read the data.

    */
    open func ReadXml(reader : Optional<dotnet.System.IO.TextReader>, mode : dotnet.System.Data.XmlReadMode) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__2__TextReader_XmlReadMode(&__thrown, self.get_handle(), reader?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.String)
// docid: M:System.Data.DataSet.ReadXml(System.String)
    /**
    Reads XML schema and data into the  using the specified file.

    - Parameter fileName: The filename (including the path) from which to read.
    - Returns: The  used to read the data.

    */
    open func ReadXml(fileName : dotnet.System.String) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.String, System.Data.XmlReadMode)
// docid: M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
    /**
    Reads XML schema and data into the  using the specified file and .

    - Parameter fileName: The filename (including the path) from which to read.
    - Parameter mode: One of the  values.
    - Returns: The  used to read the data.

    */
    open func ReadXml(fileName : dotnet.System.String, mode : dotnet.System.Data.XmlReadMode) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__2__String_XmlReadMode(&__thrown, self.get_handle(), fileName.get_handle(), mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.Xml.XmlReader)
// docid: M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)
    /**
    Reads XML schema and data into the  using the specified .

    - Parameter reader: The  from which to read.
    - Returns: The  used to read the data.

    */
    open func ReadXml(reader : Optional<dotnet.System.Xml.XmlReader>) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__1__XmlReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.Xml.XmlReader, System.Data.XmlReadMode)
// docid: M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
    /**
    Reads XML schema and data into the  using the specified  and .

    - Parameter reader: The  from which to read.
    - Parameter mode: One of the  values.
    - Returns: The  used to read the data.

    */
    open func ReadXml(reader : Optional<dotnet.System.Xml.XmlReader>, mode : dotnet.System.Data.XmlReadMode) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_XmlReadMode__ReadXml_0__2__XmlReader_XmlReadMode(&__thrown, self.get_handle(), reader?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // void ReadXmlSchema(System.IO.Stream)
// docid: M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
    /**
    Reads the XML schema from the specified  into the .

    - Parameter stream: The  from which to read.
    */
    open func ReadXmlSchema(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__ReadXmlSchema_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadXmlSchema(System.IO.TextReader)
// docid: M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
    /**
    Reads the XML schema from the specified  into the .

    - Parameter reader: The  from which to read.
    */
    open func ReadXmlSchema(reader : Optional<dotnet.System.IO.TextReader>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__ReadXmlSchema_0__1__TextReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadXmlSchema(System.String)
// docid: M:System.Data.DataSet.ReadXmlSchema(System.String)
    /**
    Reads the XML schema from the specified file into the .

    - Parameter fileName: The file name (including the path) from which to read.
    */
    open func ReadXmlSchema(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__ReadXmlSchema_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadXmlSchema(System.Xml.XmlReader)
// docid: M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
    /**
    Reads the XML schema from the specified  into the .

    - Parameter reader: The  from which to read.
    */
    open func ReadXmlSchema(reader : Optional<dotnet.System.Xml.XmlReader>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__ReadXmlSchema_0__1__XmlReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RejectChanges()
// docid: M:System.Data.DataSet.RejectChanges
    /**
    Rolls back all the changes made to the  since it was created, or since the last time  was called.

    */
    open func RejectChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__RejectChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reset()
// docid: M:System.Data.DataSet.Reset
    /**
    Clears all tables and removes all relations, foreign constraints, and tables from the . Subclasses should override  to restore a  to its original state.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.Stream)
// docid: M:System.Data.DataSet.WriteXml(System.IO.Stream)
    /**
    Writes the current data for the  using the specified .

    - Parameter stream: A  object used to write to a file.
    */
    open func WriteXml(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.Stream, System.Data.XmlWriteMode)
// docid: M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to .

    - Parameter stream: A  object used to write to a file.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(stream : Optional<dotnet.System.IO.Stream>, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__2__Stream_XmlWriteMode(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.TextWriter)
// docid: M:System.Data.DataSet.WriteXml(System.IO.TextWriter)
    /**
    Writes the current data for the  using the specified .

    - Parameter writer: The  object with which to write.
    */
    open func WriteXml(writer : Optional<dotnet.System.IO.TextWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__1__TextWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.TextWriter, System.Data.XmlWriteMode)
// docid: M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to .

    - Parameter writer: A  object used to write the document.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(writer : Optional<dotnet.System.IO.TextWriter>, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__2__TextWriter_XmlWriteMode(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.String)
// docid: M:System.Data.DataSet.WriteXml(System.String)
    /**
    Writes the current data for the  to the specified file.

    - Parameter fileName: The file name (including the path) to which to write.
    */
    open func WriteXml(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.String, System.Data.XmlWriteMode)
// docid: M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  to the specified file using the specified . To write the schema, set the value for the  parameter to .

    - Parameter fileName: The file name (including the path) to which to write.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(fileName : dotnet.System.String, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__2__String_XmlWriteMode(&__thrown, self.get_handle(), fileName.get_handle(), mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter)
// docid: M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
    /**
    Writes the current data for the  to the specified .

    - Parameter writer: The  with which to write.
    */
    open func WriteXml(writer : Optional<dotnet.System.Xml.XmlWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__1__XmlWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter, System.Data.XmlWriteMode)
// docid: M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to .

    - Parameter writer: The  with which to write.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(writer : Optional<dotnet.System.Xml.XmlWriter>, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXml_0__2__XmlWriter_XmlWriteMode(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.Stream)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
    /**
    Writes the  structure as an XML schema to the specified  object.

    - Parameter stream: A  object used to write to a file.
    */
    open func WriteXmlSchema(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.Stream, System.Converter<System.Type,System.String>)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
    /**
    Writes the  structure as an XML schema to the specified  object.

    - Parameter stream: A  object to write to.
    - Parameter multipleTargetConverter: A delegate used to convert  to string.
    */
    open func WriteXmlSchema(stream : Optional<dotnet.System.IO.Stream>, multipleTargetConverter : dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__2__Stream_System_Converter_System_Type_string_(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, multipleTargetConverter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func WriteXmlSchema(stream : Optional<dotnet.System.IO.Stream>, multipleTargetConverter : @escaping (Optional<dotnet.System.Type_>) throws -> dotnet.System.String) throws {
        let del_multipleTargetConverter = try dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>(multipleTargetConverter);
        return try WriteXmlSchema(stream: stream, multipleTargetConverter: del_multipleTargetConverter);
    }
    // void WriteXmlSchema(System.IO.TextWriter)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
    /**
    Writes the  structure as an XML schema to the specified  object.

    - Parameter writer: The  object with which to write.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.IO.TextWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__1__TextWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.TextWriter, System.Converter<System.Type,System.String>)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
    /**
    Writes the  structure as an XML schema to the specified .

    - Parameter writer: A  object to write to.
    - Parameter multipleTargetConverter: A delegate used to convert  to string.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.IO.TextWriter>, multipleTargetConverter : dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__2__TextWriter_System_Converter_System_Type_string_(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, multipleTargetConverter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func WriteXmlSchema(writer : Optional<dotnet.System.IO.TextWriter>, multipleTargetConverter : @escaping (Optional<dotnet.System.Type_>) throws -> dotnet.System.String) throws {
        let del_multipleTargetConverter = try dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>(multipleTargetConverter);
        return try WriteXmlSchema(writer: writer, multipleTargetConverter: del_multipleTargetConverter);
    }
    // void WriteXmlSchema(System.String)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.String)
    /**
    Writes the  structure as an XML schema to a file.

    - Parameter fileName: The file name (including the path) to which to write.
    */
    open func WriteXmlSchema(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.String, System.Converter<System.Type,System.String>)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
    /**
    Writes the  structure as an XML schema to a file.

    - Parameter fileName: The name of the file to write to.
    - Parameter multipleTargetConverter: A delegate used to convert  to string.
    */
    open func WriteXmlSchema(fileName : dotnet.System.String, multipleTargetConverter : dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__2__String_System_Converter_System_Type_string_(&__thrown, self.get_handle(), fileName.get_handle(), multipleTargetConverter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func WriteXmlSchema(fileName : dotnet.System.String, multipleTargetConverter : @escaping (Optional<dotnet.System.Type_>) throws -> dotnet.System.String) throws {
        let del_multipleTargetConverter = try dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>(multipleTargetConverter);
        return try WriteXmlSchema(fileName: fileName, multipleTargetConverter: del_multipleTargetConverter);
    }
    // void WriteXmlSchema(System.Xml.XmlWriter)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
    /**
    Writes the  structure as an XML schema to an  object.

    - Parameter writer: The  to write to.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.Xml.XmlWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__1__XmlWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.Xml.XmlWriter, System.Converter<System.Type,System.String>)
// docid: M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
    /**
    Writes the  structure as an XML schema to the specified .

    - Parameter writer: A  object to write to.
    - Parameter multipleTargetConverter: A delegate used to convert  to string.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.Xml.XmlWriter>, multipleTargetConverter : dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__WriteXmlSchema_0__2__XmlWriter_System_Converter_System_Type_string_(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, multipleTargetConverter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func WriteXmlSchema(writer : Optional<dotnet.System.Xml.XmlWriter>, multipleTargetConverter : @escaping (Optional<dotnet.System.Type_>) throws -> dotnet.System.String) throws {
        let del_multipleTargetConverter = try dotnet.System.Converter_2<dotnet.System.Type_,dotnet.System.String>(multipleTargetConverter);
        return try WriteXmlSchema(writer: writer, multipleTargetConverter: del_multipleTargetConverter);
    }
    // [IsSpecialName] bool get_CaseSensitive()
// docid: M:System.Data.DataSet.get_CaseSensitive
    open func get_CaseSensitive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_bool__get_CaseSensitive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CaseSensitive(bool)
// docid: M:System.Data.DataSet.set_CaseSensitive(System.Boolean)
    open func set_CaseSensitive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_CaseSensitive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataSetName()
// docid: M:System.Data.DataSet.get_DataSetName
    open func get_DataSetName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_String__get_DataSetName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataSetName(System.String)
// docid: M:System.Data.DataSet.set_DataSetName(System.String)
    open func set_DataSetName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_DataSetName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewManager get_DefaultViewManager()
// docid: M:System.Data.DataSet.get_DefaultViewManager
    open func get_DefaultViewManager() throws -> dotnet.System.Data.DataViewManager {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataViewManager__get_DefaultViewManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataViewManager(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_EnforceConstraints()
// docid: M:System.Data.DataSet.get_EnforceConstraints
    open func get_EnforceConstraints() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_bool__get_EnforceConstraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnforceConstraints(bool)
// docid: M:System.Data.DataSet.set_EnforceConstraints(System.Boolean)
    open func set_EnforceConstraints(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_EnforceConstraints_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.PropertyCollection get_ExtendedProperties()
// docid: M:System.Data.DataSet.get_ExtendedProperties
    open func get_ExtendedProperties() throws -> dotnet.System.Data.PropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_PropertyCollection__get_ExtendedProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.PropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasErrors()
// docid: M:System.Data.DataSet.get_HasErrors
    open func get_HasErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_bool__get_HasErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsInitialized()
// docid: M:System.Data.DataSet.get_IsInitialized
    open /* method final */ func get_IsInitialized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_bool__get_IsInitialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Locale()
// docid: M:System.Data.DataSet.get_Locale
    open func get_Locale() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_CultureInfo__get_Locale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Locale(System.Globalization.CultureInfo)
// docid: M:System.Data.DataSet.set_Locale(System.Globalization.CultureInfo)
    open func set_Locale(value : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_Locale_0__1__CultureInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Data.DataSet.get_Namespace
    open func get_Namespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Data.DataSet.set_Namespace(System.String)
    open func set_Namespace(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Data.DataSet.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:System.Data.DataSet.set_Prefix(System.String)
    open func set_Prefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRelationCollection get_Relations()
// docid: M:System.Data.DataSet.get_Relations
    open func get_Relations() throws -> dotnet.System.Data.DataRelationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataRelationCollection__get_Relations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SerializationFormat get_RemotingFormat()
// docid: M:System.Data.DataSet.get_RemotingFormat
    open func get_RemotingFormat() throws -> dotnet.System.Data.SerializationFormat {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_SerializationFormat__get_RemotingFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SerializationFormat(val: __return);
        }
    }
    // [IsSpecialName] void set_RemotingFormat(System.Data.SerializationFormat)
// docid: M:System.Data.DataSet.set_RemotingFormat(System.Data.SerializationFormat)
    open func set_RemotingFormat(value : dotnet.System.Data.SerializationFormat) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_RemotingFormat_0__1__SerializationFormat(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.SchemaSerializationMode get_SchemaSerializationMode()
// docid: M:System.Data.DataSet.get_SchemaSerializationMode
    open func get_SchemaSerializationMode() throws -> dotnet.System.Data.SchemaSerializationMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_SchemaSerializationMode__get_SchemaSerializationMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SchemaSerializationMode(val: __return);
        }
    }
    // [IsSpecialName] void set_SchemaSerializationMode(System.Data.SchemaSerializationMode)
// docid: M:System.Data.DataSet.set_SchemaSerializationMode(System.Data.SchemaSerializationMode)
    open func set_SchemaSerializationMode(value : dotnet.System.Data.SchemaSerializationMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_SchemaSerializationMode_0__1__SchemaSerializationMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.Data.DataSet.get_Site
    open override func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.Data.DataSet.set_Site(System.ComponentModel.ISite)
    open override func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataTableCollection get_Tables()
// docid: M:System.Data.DataSet.get_Tables
    open func get_Tables() throws -> dotnet.System.Data.DataTableCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSet_DataTableCollection__get_Tables_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTableCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void add_Initialized(System.EventHandler)
// docid: M:System.Data.DataSet.add_Initialized(System.EventHandler)
    open /* method final */ func add_Initialized(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__add_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Initialized(value: del_value);
    }
    // [IsSpecialName] void remove_Initialized(System.EventHandler)
// docid: M:System.Data.DataSet.remove_Initialized(System.EventHandler)
    open /* method final */ func remove_Initialized(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__remove_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Initialized(value: del_value);
    }
    // [IsSpecialName] void add_MergeFailed(System.Data.MergeFailedEventHandler)
// docid: M:System.Data.DataSet.add_MergeFailed(System.Data.MergeFailedEventHandler)
    open func add_MergeFailed(value : Optional<dotnet.System.Data.MergeFailedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__add_MergeFailed_0__1__MergeFailedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_MergeFailed(value : @escaping (dotnet.System.Object, dotnet.System.Data.MergeFailedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.MergeFailedEventHandler(value);
        return try add_MergeFailed(value: del_value);
    }
    // [IsSpecialName] void remove_MergeFailed(System.Data.MergeFailedEventHandler)
// docid: M:System.Data.DataSet.remove_MergeFailed(System.Data.MergeFailedEventHandler)
    open func remove_MergeFailed(value : Optional<dotnet.System.Data.MergeFailedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataSet_void__remove_MergeFailed_0__1__MergeFailedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_MergeFailed(value : @escaping (dotnet.System.Object, dotnet.System.Data.MergeFailedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.MergeFailedEventHandler(value);
        return try remove_MergeFailed(value: del_value);
    }
    /**
    Gets or sets a value indicating whether string comparisons within  objects are case-sensitive.

    */
    open var CaseSensitive : Bool {
        get {
            return try! get_CaseSensitive();
        }
        set(v) {
            return try! set_CaseSensitive(value: v);
        }
    }
    /**
    Gets or sets the name of the current .

    */
    open var DataSetName : dotnet.System.String {
        get {
            return try! get_DataSetName();
        }
        set(v) {
            return try! set_DataSetName(value: v);
        }
    }
    /**
    Gets a custom view of the data contained in the  to allow filtering, searching, and navigating using a custom .

    */
    open var DefaultViewManager : dotnet.System.Data.DataViewManager {
        get {
            return try! get_DefaultViewManager();
        }
    }
    /**
    Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.

    */
    open var EnforceConstraints : Bool {
        get {
            return try! get_EnforceConstraints();
        }
        set(v) {
            return try! set_EnforceConstraints(value: v);
        }
    }
    /**
    Gets the collection of customized user information associated with the .

    */
    open var ExtendedProperties : dotnet.System.Data.PropertyCollection {
        get {
            return try! get_ExtendedProperties();
        }
    }
    /**
    Gets a value indicating whether there are errors in any of the  objects within this .

    */
    open var HasErrors : Bool {
        get {
            return try! get_HasErrors();
        }
    }
    /**
    Gets a value that indicates whether the  is initialized.

    */
    public var IsInitialized : Bool {
        get {
            return try! get_IsInitialized();
        }
    }
    /**
    Gets or sets the locale information used to compare strings within the table.

    */
    open var Locale : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_Locale();
        }
        set(v) {
            return try! set_Locale(value: v);
        }
    }
    /**
    Gets or sets the namespace of the .

    */
    open var Namespace : dotnet.System.String {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v);
        }
    }
    /**
    Gets or sets an XML prefix that aliases the namespace of the .

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v);
        }
    }
    /**
    Gets the collection of relations that link tables and allow navigation from parent tables to child tables.

    */
    open var Relations : dotnet.System.Data.DataRelationCollection {
        get {
            return try! get_Relations();
        }
    }
    /**
    Gets or sets a  for the  used during remoting.

    */
    open var RemotingFormat : dotnet.System.Data.SerializationFormat {
        get {
            return try! get_RemotingFormat();
        }
        set(v) {
            return try! set_RemotingFormat(value: v);
        }
    }
    /**
    Gets or sets a  for a .

    */
    open var SchemaSerializationMode : dotnet.System.Data.SchemaSerializationMode {
        get {
            return try! get_SchemaSerializationMode();
        }
        set(v) {
            return try! set_SchemaSerializationMode(value: v);
        }
    }
    /**
    Gets or sets an  for the .

    */
    open override var Site : Optional<dotnet.System.ComponentModel.ISite> {
        get {
            return try! get_Site();
        }
        set(v) {
            return try! set_Site(value: v!);
        }
    }
    /**
    Gets the collection of tables contained in the .

    */
    open var Tables : dotnet.System.Data.DataTableCollection {
        get {
            return try! get_Tables();
        }
    }
} // DataSet


// type: System.Data.DataSetDateTime
    /**
    Describes the serialization format for  columns in a .

    */
public struct DataSetDateTime : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_DataSetDateTime_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.DataSetDateTime Local
    /**
    
         is always stored in Local. If  or  is assigned to a column in this mode, it is first converted into Local. Serialization in this mode is always performed in Local. There is an offset during serialization.

    */
    public static var Local : dotnet.System.Data.DataSetDateTime {
        get {
        let __return = dotnet.System.Data.DataSetDateTime(val: System_Data_DataSetDateTime_get_Local());
            return __return;
        }
    }
    // static field: System.Data.DataSetDateTime Unspecified
    /**
    
         is always stored in Unspecified. If  or  is assigned to a column in this mode, it is first converted into . Serialization in this mode does not cause an offset.

    */
    public static var Unspecified : dotnet.System.Data.DataSetDateTime {
        get {
        let __return = dotnet.System.Data.DataSetDateTime(val: System_Data_DataSetDateTime_get_Unspecified());
            return __return;
        }
    }
    // static field: System.Data.DataSetDateTime UnspecifiedLocal
    /**
    
         is stored in Unspecified. If  or  is assigned to a column in this mode, it is first converted into . Serialization in this mode causes offset. This is the default behavior and is backward compatible. This option should be thought of as being Unspecified in storage but applying an offset that is similar to  during serialization.

    */
    public static var UnspecifiedLocal : dotnet.System.Data.DataSetDateTime {
        get {
        let __return = dotnet.System.Data.DataSetDateTime(val: System_Data_DataSetDateTime_get_UnspecifiedLocal());
            return __return;
        }
    }
    // static field: System.Data.DataSetDateTime Utc
    /**
    
         is stored in Universal Coordinated Time (UTC). If  or  is assigned to a column in this mode, it is first converted into  format. Serialization in this mode is always performed in . There is no offset during serialization.

    */
    public static var Utc : dotnet.System.Data.DataSetDateTime {
        get {
        let __return = dotnet.System.Data.DataSetDateTime(val: System_Data_DataSetDateTime_get_Utc());
            return __return;
        }
    }
} // DataSetDateTime


// type: System.Data.DataSysDescriptionAttribute
    /**
    Marks a property, event, or extender with a description. Visual designers can display this description when referencing the member.

    */
open class DataSysDescriptionAttribute
    :
    dotnet.System.ComponentModel.DescriptionAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataSysDescriptionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified description string.

    - Parameter description: The description string.
    */
    public override init(description : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataSysDescriptionAttribute_ctor_0__1__String(&__thrown, description.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Data.DataSysDescriptionAttribute.get_Description
    open override func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataSysDescriptionAttribute_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the text for the description.

    */
    open override var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
} // DataSysDescriptionAttribute


// type: System.Data.DataTable
    /**
    Represents one table of in-memory data.

    */
open class DataTable
    :
    dotnet.System.ComponentModel.MarshalByValueComponent,
    System_ComponentModel_IListSource,
    System_ComponentModel_ISupportInitialize,
    System_ComponentModel_ISupportInitializeNotification,
    System_Runtime_Serialization_ISerializable,
    System_Xml_Serialization_IXmlSerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DataTable.#ctor
    /**
    Initializes a new instance of the  class with no arguments.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTable_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DataTable.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified table name.

    - Parameter tableName: The name to give the table. If  is  or an empty string, a default name is given when added to the .
    */
    public init(tableName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTable_ctor_0__1__String(&__thrown, tableName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Data.DataTable.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the specified table name and namespace.

    - Parameter tableName: The name to give the table. If  is  or an empty string, a default name is given when added to the .
    - Parameter tableNamespace: The namespace for the XML representation of the data stored in the .
    */
    public init(tableName : Optional<dotnet.System.String>, tableNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTable_ctor_0__2__String_String(&__thrown, tableName?.get_handle() ?? nil, tableNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AcceptChanges()
// docid: M:System.Data.DataTable.AcceptChanges
    /**
    Commits all the changes made to this table since the last time  was called.

    */
    open func AcceptChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__AcceptChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginInit()
// docid: M:System.Data.DataTable.BeginInit
    /**
    Begins the initialization of a  that is used on a form or used by another component. The initialization occurs at run time.

    */
    open func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginLoadData()
// docid: M:System.Data.DataTable.BeginLoadData
    /**
    Turns off notifications, index maintenance, and constraints while loading data.

    */
    open func BeginLoadData() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__BeginLoadData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.DataTable.Clear
    /**
    Clears the  of all data.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataTable Clone()
// docid: M:System.Data.DataTable.Clone
    /**
    Clones the structure of the , including all  schemas and constraints.

    - Returns: A new  with the same schema as the current .

    */
    open func Clone() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataTable__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Object Compute(System.String, System.String)
// docid: M:System.Data.DataTable.Compute(System.String,System.String)
    /**
    Computes the given expression on the current rows that pass the filter criteria.

    - Parameter expression: The expression to compute.
    - Parameter filter: The filter to limit the rows that evaluate in the expression.
    - Returns: An , set to the result of the computation. If the expression evaluates to null, the return value will be .

    */
    open func Compute(expression : Optional<dotnet.System.String>, filter : Optional<dotnet.System.String>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_Object__Compute_0__2__String_String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, filter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Data.DataTable Copy()
// docid: M:System.Data.DataTable.Copy
    /**
    Copies both the structure and data for this .

    - Returns: A new  with the same structure (table schemas and constraints) and data as this .  
  
 If these classes have been derived, the copy will also be of the same derived classes.  
  
  creates a new  with the same structure and data as the original . To copy the structure to a new , but not the data, use .

    */
    open func Copy() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataTable__Copy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTableReader CreateDataReader()
// docid: M:System.Data.DataTable.CreateDataReader
    /**
    Returns a  corresponding to the data within this .

    - Returns: A  containing one result set, corresponding to the source  instance.

    */
    open func CreateDataReader() throws -> dotnet.System.Data.DataTableReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataTableReader__CreateDataReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTableReader(hndl : __return);
        }
    }
    // void EndInit()
// docid: M:System.Data.DataTable.EndInit
    /**
    Ends the initialization of a  that is used on a form or used by another component. The initialization occurs at run time.

    */
    open func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndLoadData()
// docid: M:System.Data.DataTable.EndLoadData
    /**
    Turns on notifications, index maintenance, and constraints after loading data.

    */
    open func EndLoadData() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__EndLoadData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataTable GetChanges()
// docid: M:System.Data.DataTable.GetChanges
    /**
    Gets a copy of the  that contains all changes made to it since it was loaded or  was last called.

    - Returns: A copy of the changes from this , or  if no changes are found.

    */
    open func GetChanges() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataTable__GetChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataTable GetChanges(System.Data.DataRowState)
// docid: M:System.Data.DataTable.GetChanges(System.Data.DataRowState)
    /**
    Gets a copy of the  containing all changes made to it since it was last loaded, or since  was called, filtered by .

    - Parameter rowStates: One of the  values.
    - Returns: A filtered copy of the  that can have actions performed on it, and later be merged back in the  using . If no rows of the desired  are found, the method returns .

    */
    open func GetChanges(rowStates : dotnet.System.Data.DataRowState) throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataTable__GetChanges_0__1__DataRowState(&__thrown, self.get_handle(), rowStates.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
    /**
    This method returns an  instance containing the Web Services Description Language (WSDL) that describes the  for Web Services.

    - Parameter schemaSet: An  instance.
    - Returns: The  instance.

    */
    open class func GetDataTableSchema(schemaSet : Optional<dotnet.System.Xml.Schema.XmlSchemaSet>) throws -> dotnet.System.Xml.Schema.XmlSchemaComplexType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_XmlSchemaComplexType__GetDataTableSchema_0__1__XmlSchemaSet(&__thrown, schemaSet?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaComplexType(hndl : __return);
        }
    }
    // System.Data.DataRow[] GetErrors()
// docid: M:System.Data.DataTable.GetErrors
    /**
    Gets an array of  objects that contain errors.

    - Returns: An array of  objects that have errors.

    */
    open func GetErrors() throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRowArray__GetErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a serialization information object with the data needed to serialize the .

    - Parameter info: A  object that holds the serialized data associated with the .
    - Parameter context: A  object that contains the source and destination of the serialized stream associated with the .
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ImportRow(System.Data.DataRow)
// docid: M:System.Data.DataTable.ImportRow(System.Data.DataRow)
    /**
    Copies a  into a , preserving any property settings, as well as original and current values.

    - Parameter row: The  to be imported.
    */
    open func ImportRow(row : Optional<dotnet.System.Data.DataRow>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__ImportRow_0__1__DataRow(&__thrown, self.get_handle(), row?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Data.IDataReader)
// docid: M:System.Data.DataTable.Load(System.Data.IDataReader)
    /**
    Fills a  with values from a data source using the supplied . If the  already contains rows, the incoming data from the data source is merged with the existing rows.

    - Parameter reader: An  that provides a result set.
    */
    open func Load(reader : dotnet.System.Data.IDataReader) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Load_0__1__IDataReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Data.IDataReader, System.Data.LoadOption)
// docid: M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
    /**
    Fills a  with values from a data source using the supplied . If the  already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the  parameter.

    - Parameter reader: An  that provides one or more result sets.
    - Parameter loadOption: A value from the  enumeration that indicates how rows already in the  are combined with incoming rows that share the same primary key.
    */
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Load_0__2__IDataReader_LoadOption(&__thrown, self.get_handle(), reader.get_handle(), loadOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Data.IDataReader, System.Data.LoadOption, System.Data.FillErrorEventHandler)
// docid: M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
    /**
    Fills a  with values from a data source using the supplied  using an error-handling delegate.

    - Parameter reader: A  that provides a result set.
    - Parameter loadOption: A value from the  enumeration that indicates how rows already in the  are combined with incoming rows that share the same primary key.
    - Parameter errorHandler: A  delegate to call when an error occurs while loading data.
    */
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption, errorHandler : Optional<dotnet.System.Data.FillErrorEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Load_0__3__IDataReader_LoadOption_FillErrorEventHandler(&__thrown, self.get_handle(), reader.get_handle(), loadOption.get_value(), errorHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Load(reader : dotnet.System.Data.IDataReader, loadOption : dotnet.System.Data.LoadOption, errorHandler : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void) throws {
        let del_errorHandler = try dotnet.System.Data.FillErrorEventHandler(errorHandler);
        return try Load(reader: reader, loadOption: loadOption, errorHandler: del_errorHandler);
    }
    // System.Data.DataRow LoadDataRow(System.Object[], bool)
// docid: M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
    /**
    Finds and updates a specific row. If no matching row is found, a new row is created using the given values.

    - Parameter values: An array of values used to create the new row.
    - Parameter fAcceptChanges: 
         to accept changes; otherwise .
    - Returns: The new .

    */
    open func LoadDataRow(values : dotnet.System_Arr<dotnet.System.Object>, fAcceptChanges : Bool) throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRow__LoadDataRow_0__2__ObjectArray_bool(&__thrown, self.get_handle(), values.get_handle(), Swift.Int32(fAcceptChanges ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // System.Data.DataRow LoadDataRow(System.Object[], System.Data.LoadOption)
// docid: M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
    /**
    Finds and updates a specific row. If no matching row is found, a new row is created using the given values.

    - Parameter values: An array of values used to create the new row.
    - Parameter loadOption: Used to determine how the array values are applied to the corresponding values in an existing row.
    - Returns: The new .

    */
    open func LoadDataRow(values : dotnet.System_Arr<dotnet.System.Object>, loadOption : dotnet.System.Data.LoadOption) throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRow__LoadDataRow_0__2__ObjectArray_LoadOption(&__thrown, self.get_handle(), values.get_handle(), loadOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // void Merge(System.Data.DataTable)
// docid: M:System.Data.DataTable.Merge(System.Data.DataTable)
    /**
    Merge the specified  with the current .

    - Parameter table: The  to be merged with the current .
    */
    open func Merge(table : dotnet.System.Data.DataTable) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Merge_0__1__DataTable(&__thrown, self.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataTable, bool)
// docid: M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
    /**
    Merge the specified  with the current , indicating whether to preserve changes in the current .

    - Parameter table: The  to be merged with the current .
    - Parameter preserveChanges: 
        , to preserve changes in the current ; otherwise .
    */
    open func Merge(table : dotnet.System.Data.DataTable, preserveChanges : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Merge_0__2__DataTable_bool(&__thrown, self.get_handle(), table.get_handle(), Swift.Int32(preserveChanges ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(System.Data.DataTable, bool, System.Data.MissingSchemaAction)
// docid: M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
    /**
    Merge the specified  with the current , indicating whether to preserve changes and how to handle missing schema in the current .

    - Parameter table: The  to be merged with the current .
    - Parameter preserveChanges: 
        , to preserve changes in the current ; otherwise .
    - Parameter missingSchemaAction: One of the  values.
    */
    open func Merge(table : dotnet.System.Data.DataTable, preserveChanges : Bool, missingSchemaAction : dotnet.System.Data.MissingSchemaAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Merge_0__3__DataTable_bool_MissingSchemaAction(&__thrown, self.get_handle(), table.get_handle(), Swift.Int32(preserveChanges ? 1 : 0), missingSchemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataRow NewRow()
// docid: M:System.Data.DataTable.NewRow
    /**
    Creates a new  with the same schema as the table.

    - Returns: A  with the same schema as the .

    */
    open func NewRow() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRow__NewRow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.IO.Stream)
// docid: M:System.Data.DataTable.ReadXml(System.IO.Stream)
    /**
    Reads XML schema and data into the  using the specified .

    - Parameter stream: An object that derives from 
    - Returns: The  used to read the data.

    */
    open func ReadXml(stream : Optional<dotnet.System.IO.Stream>) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_XmlReadMode__ReadXml_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.IO.TextReader)
// docid: M:System.Data.DataTable.ReadXml(System.IO.TextReader)
    /**
    Reads XML schema and data into the  using the specified .

    - Parameter reader: The  that will be used to read the data.
    - Returns: The  used to read the data.

    */
    open func ReadXml(reader : Optional<dotnet.System.IO.TextReader>) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_XmlReadMode__ReadXml_0__1__TextReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.String)
// docid: M:System.Data.DataTable.ReadXml(System.String)
    /**
    Reads XML schema and data into the  from the specified file.

    - Parameter fileName: The name of the file from which to read the data.
    - Returns: The  used to read the data.

    */
    open func ReadXml(fileName : dotnet.System.String) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_XmlReadMode__ReadXml_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // System.Data.XmlReadMode ReadXml(System.Xml.XmlReader)
// docid: M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)
    /**
    Reads XML Schema and Data into the  using the specified .

    - Parameter reader: The  that will be used to read the data.
    - Returns: The  used to read the data.

    */
    open func ReadXml(reader : Optional<dotnet.System.Xml.XmlReader>) throws -> dotnet.System.Data.XmlReadMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_XmlReadMode__ReadXml_0__1__XmlReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.XmlReadMode(val: __return);
        }
    }
    // void ReadXmlSchema(System.IO.Stream)
// docid: M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
    /**
    Reads an XML schema into the  using the specified stream.

    - Parameter stream: The stream used to read the schema.
    */
    open func ReadXmlSchema(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__ReadXmlSchema_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadXmlSchema(System.IO.TextReader)
// docid: M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
    /**
    Reads an XML schema into the  using the specified .

    - Parameter reader: The  used to read the schema information.
    */
    open func ReadXmlSchema(reader : Optional<dotnet.System.IO.TextReader>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__ReadXmlSchema_0__1__TextReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadXmlSchema(System.String)
// docid: M:System.Data.DataTable.ReadXmlSchema(System.String)
    /**
    Reads an XML schema into the  from the specified file.

    - Parameter fileName: The name of the file from which to read the schema information.
    */
    open func ReadXmlSchema(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__ReadXmlSchema_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadXmlSchema(System.Xml.XmlReader)
// docid: M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
    /**
    Reads an XML schema into the  using the specified .

    - Parameter reader: The  used to read the schema information.
    */
    open func ReadXmlSchema(reader : Optional<dotnet.System.Xml.XmlReader>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__ReadXmlSchema_0__1__XmlReader(&__thrown, self.get_handle(), reader?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RejectChanges()
// docid: M:System.Data.DataTable.RejectChanges
    /**
    Rolls back all changes that have been made to the table since it was loaded, or the last time  was called.

    */
    open func RejectChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__RejectChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reset()
// docid: M:System.Data.DataTable.Reset
    /**
    Resets the  to its original state. Reset removes all data, indexes, relations, and columns of the table. If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataRow[] Select()
// docid: M:System.Data.DataTable.Select
    /**
    Gets an array of all  objects.

    - Returns: An array of  objects.

    */
    open func Select() throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRowArray__Select_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] Select(System.String)
// docid: M:System.Data.DataTable.Select(System.String)
    /**
    Gets an array of all  objects that match the filter criteria.

    - Parameter filterExpression: The criteria to use to filter the rows. For examples on how to filter rows, see DataView RowFilter Syntax [C#].
    - Returns: An array of  objects.

    */
    open func Select(filterExpression : Optional<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRowArray__Select_0__1__String(&__thrown, self.get_handle(), filterExpression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] Select(System.String, System.String)
// docid: M:System.Data.DataTable.Select(System.String,System.String)
    /**
    Gets an array of all  objects that match the filter criteria, in the specified sort order.

    - Parameter filterExpression: The criteria to use to filter the rows. For examples on how to filter rows, see DataView RowFilter Syntax [C#].
    - Parameter sort: A string specifying the column and sort direction.
    - Returns: An array of  objects matching the filter expression.

    */
    open func Select(filterExpression : Optional<dotnet.System.String>, sort : Optional<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRowArray__Select_0__2__String_String(&__thrown, self.get_handle(), filterExpression?.get_handle() ?? nil, sort?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.Data.DataRow[] Select(System.String, System.String, System.Data.DataViewRowState)
// docid: M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
    /**
    Gets an array of all  objects that match the filter in the order of the sort that match the specified state.

    - Parameter filterExpression: The criteria to use to filter the rows. For examples on how to filter rows, see DataView RowFilter Syntax [C#].
    - Parameter sort: A string specifying the column and sort direction.
    - Parameter recordStates: One of the  values.
    - Returns: An array of  objects.

    */
    open func Select(filterExpression : Optional<dotnet.System.String>, sort : Optional<dotnet.System.String>, recordStates : dotnet.System.Data.DataViewRowState) throws -> dotnet.System_Arr<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRowArray__Select_0__3__String_String_DataViewRowState(&__thrown, self.get_handle(), filterExpression?.get_handle() ?? nil, sort?.get_handle() ?? nil, recordStates.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRow>(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.DataTable.ToString
    /**
    Gets the  and , if there is one as a concatenated string.

    - Returns: A string consisting of the  and the  values.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteXml(System.IO.Stream)
// docid: M:System.Data.DataTable.WriteXml(System.IO.Stream)
    /**
    Writes the current contents of the  as XML using the specified .

    - Parameter stream: The stream to which the data will be written.
    */
    open func WriteXml(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.Stream, bool)
// docid: M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
    /**
    Writes the current contents of the  as XML using the specified . To save the data for the table and all its descendants, set the  parameter to .

    - Parameter stream: The stream to which the data will be written.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(stream : Optional<dotnet.System.IO.Stream>, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__Stream_bool(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.Stream, System.Data.XmlWriteMode)
// docid: M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  to the specified file using the specified . To write the schema, set the value for the  parameter to .

    - Parameter stream: The stream to which the data will be written.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(stream : Optional<dotnet.System.IO.Stream>, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__Stream_XmlWriteMode(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.Stream, System.Data.XmlWriteMode, bool)
// docid: M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
    /**
    Writes the current data, and optionally the schema, for the  to the specified file using the specified . To write the schema, set the value for the  parameter to . To save the data for the table and all its descendants, set the  parameter to .

    - Parameter stream: The stream to which the data will be written.
    - Parameter mode: One of the  values.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(stream : Optional<dotnet.System.IO.Stream>, mode : dotnet.System.Data.XmlWriteMode, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__3__Stream_XmlWriteMode_bool(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, mode.get_value(), Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.TextWriter)
// docid: M:System.Data.DataTable.WriteXml(System.IO.TextWriter)
    /**
    Writes the current contents of the  as XML using the specified .

    - Parameter writer: The  with which to write the content.
    */
    open func WriteXml(writer : Optional<dotnet.System.IO.TextWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__1__TextWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.TextWriter, bool)
// docid: M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
    /**
    Writes the current contents of the  as XML using the specified . To save the data for the table and all its descendants, set the  parameter to .

    - Parameter writer: The  with which to write the content.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(writer : Optional<dotnet.System.IO.TextWriter>, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__TextWriter_bool(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.TextWriter, System.Data.XmlWriteMode)
// docid: M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to .

    - Parameter writer: The  used to write the document.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(writer : Optional<dotnet.System.IO.TextWriter>, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__TextWriter_XmlWriteMode(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.IO.TextWriter, System.Data.XmlWriteMode, bool)
// docid: M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to . To save the data for the table and all its descendants, set the  parameter to .

    - Parameter writer: The  used to write the document.
    - Parameter mode: One of the  values.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(writer : Optional<dotnet.System.IO.TextWriter>, mode : dotnet.System.Data.XmlWriteMode, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__3__TextWriter_XmlWriteMode_bool(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, mode.get_value(), Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.String)
// docid: M:System.Data.DataTable.WriteXml(System.String)
    /**
    Writes the current contents of the  as XML using the specified file.

    - Parameter fileName: The file to which to write the XML data.
    */
    open func WriteXml(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.String, bool)
// docid: M:System.Data.DataTable.WriteXml(System.String,System.Boolean)
    /**
    Writes the current contents of the  as XML using the specified file. To save the data for the table and all its descendants, set the  parameter to .

    - Parameter fileName: The file to which to write the XML data.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(fileName : dotnet.System.String, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__String_bool(&__thrown, self.get_handle(), fileName.get_handle(), Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.String, System.Data.XmlWriteMode)
// docid: M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  using the specified file and . To write the schema, set the value for the  parameter to .

    - Parameter fileName: The name of the file to which the data will be written.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(fileName : dotnet.System.String, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__String_XmlWriteMode(&__thrown, self.get_handle(), fileName.get_handle(), mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.String, System.Data.XmlWriteMode, bool)
// docid: M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
    /**
    Writes the current data, and optionally the schema, for the  using the specified file and . To write the schema, set the value for the  parameter to . To save the data for the table and all its descendants, set the  parameter to .

    - Parameter fileName: The name of the file to which the data will be written.
    - Parameter mode: One of the  values.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(fileName : dotnet.System.String, mode : dotnet.System.Data.XmlWriteMode, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__3__String_XmlWriteMode_bool(&__thrown, self.get_handle(), fileName.get_handle(), mode.get_value(), Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter)
// docid: M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
    /**
    Writes the current contents of the  as XML using the specified .

    - Parameter writer: The  with which to write the contents.
    */
    open func WriteXml(writer : Optional<dotnet.System.Xml.XmlWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__1__XmlWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter, bool)
// docid: M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
    /**
    Writes the current contents of the  as XML using the specified .

    - Parameter writer: The  with which to write the contents.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(writer : Optional<dotnet.System.Xml.XmlWriter>, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__XmlWriter_bool(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter, System.Data.XmlWriteMode)
// docid: M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to .

    - Parameter writer: The  used to write the document.
    - Parameter mode: One of the  values.
    */
    open func WriteXml(writer : Optional<dotnet.System.Xml.XmlWriter>, mode : dotnet.System.Data.XmlWriteMode) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__2__XmlWriter_XmlWriteMode(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter, System.Data.XmlWriteMode, bool)
// docid: M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
    /**
    Writes the current data, and optionally the schema, for the  using the specified  and . To write the schema, set the value for the  parameter to . To save the data for the table and all its descendants, set the  parameter to .

    - Parameter writer: The  used to write the document.
    - Parameter mode: One of the  values.
    - Parameter writeHierarchy: If , write the contents of the current table and all its descendants. If  (the default value), write the data for the current table only.
    */
    open func WriteXml(writer : Optional<dotnet.System.Xml.XmlWriter>, mode : dotnet.System.Data.XmlWriteMode, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXml_0__3__XmlWriter_XmlWriteMode_bool(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, mode.get_value(), Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.Stream)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
    /**
    Writes the current data structure of the  as an XML schema to the specified stream.

    - Parameter stream: The stream to which the XML schema will be written.
    */
    open func WriteXmlSchema(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.Stream, bool)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
    /**
    Writes the current data structure of the  as an XML schema to the specified stream. To save the schema for the table and all its descendants, set the  parameter to .

    - Parameter stream: The stream to which the XML schema will be written.
    - Parameter writeHierarchy: If , write the schema of the current table and all its descendants. If  (the default value), write the schema for the current table only.
    */
    open func WriteXmlSchema(stream : Optional<dotnet.System.IO.Stream>, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__2__Stream_bool(&__thrown, self.get_handle(), stream?.get_handle() ?? nil, Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.TextWriter)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
    /**
    Writes the current data structure of the  as an XML schema using the specified .

    - Parameter writer: The  with which to write.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.IO.TextWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__1__TextWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.IO.TextWriter, bool)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
    /**
    Writes the current data structure of the  as an XML schema using the specified . To save the schema for the table and all its descendants, set the  parameter to .

    - Parameter writer: The  with which to write.
    - Parameter writeHierarchy: If , write the schema of the current table and all its descendants. If  (the default value), write the schema for the current table only.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.IO.TextWriter>, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__2__TextWriter_bool(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.String)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.String)
    /**
    Writes the current data structure of the  as an XML schema to the specified file.

    - Parameter fileName: The name of the file to use.
    */
    open func WriteXmlSchema(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.String, bool)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
    /**
    Writes the current data structure of the  as an XML schema to the specified file. To save the schema for the table and all its descendants, set the  parameter to .

    - Parameter fileName: The name of the file to use.
    - Parameter writeHierarchy: If , write the schema of the current table and all its descendants. If  (the default value), write the schema for the current table only.
    */
    open func WriteXmlSchema(fileName : dotnet.System.String, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__2__String_bool(&__thrown, self.get_handle(), fileName.get_handle(), Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.Xml.XmlWriter)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
    /**
    Writes the current data structure of the  as an XML schema using the specified .

    - Parameter writer: The  to use.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.Xml.XmlWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__1__XmlWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlSchema(System.Xml.XmlWriter, bool)
// docid: M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
    /**
    Writes the current data structure of the  as an XML schema using the specified . To save the schema for the table and all its descendants, set the  parameter to .

    - Parameter writer: The  used to write the document.
    - Parameter writeHierarchy: If , write the schema of the current table and all its descendants. If  (the default value), write the schema for the current table only.
    */
    open func WriteXmlSchema(writer : Optional<dotnet.System.Xml.XmlWriter>, writeHierarchy : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__WriteXmlSchema_0__2__XmlWriter_bool(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, Swift.Int32(writeHierarchy ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CaseSensitive()
// docid: M:System.Data.DataTable.get_CaseSensitive
    open func get_CaseSensitive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_bool__get_CaseSensitive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CaseSensitive(bool)
// docid: M:System.Data.DataTable.set_CaseSensitive(System.Boolean)
    open func set_CaseSensitive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_CaseSensitive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRelationCollection get_ChildRelations()
// docid: M:System.Data.DataTable.get_ChildRelations
    open func get_ChildRelations() throws -> dotnet.System.Data.DataRelationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRelationCollection__get_ChildRelations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataColumnCollection get_Columns()
// docid: M:System.Data.DataTable.get_Columns
    open func get_Columns() throws -> dotnet.System.Data.DataColumnCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataColumnCollection__get_Columns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataColumnCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.ConstraintCollection get_Constraints()
// docid: M:System.Data.DataTable.get_Constraints
    open func get_Constraints() throws -> dotnet.System.Data.ConstraintCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_ConstraintCollection__get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ConstraintCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataSet get_DataSet()
// docid: M:System.Data.DataTable.get_DataSet
    open func get_DataSet() throws -> Optional<dotnet.System.Data.DataSet> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataSet__get_DataSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataSet(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.DataView get_DefaultView()
// docid: M:System.Data.DataTable.get_DefaultView
    open func get_DefaultView() throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataView__get_DefaultView_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayExpression()
// docid: M:System.Data.DataTable.get_DisplayExpression
    open func get_DisplayExpression() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_String__get_DisplayExpression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DisplayExpression(System.String)
// docid: M:System.Data.DataTable.set_DisplayExpression(System.String)
    open func set_DisplayExpression(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_DisplayExpression_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.PropertyCollection get_ExtendedProperties()
// docid: M:System.Data.DataTable.get_ExtendedProperties
    open func get_ExtendedProperties() throws -> dotnet.System.Data.PropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_PropertyCollection__get_ExtendedProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.PropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasErrors()
// docid: M:System.Data.DataTable.get_HasErrors
    open func get_HasErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_bool__get_HasErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsInitialized()
// docid: M:System.Data.DataTable.get_IsInitialized
    open /* method final */ func get_IsInitialized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_bool__get_IsInitialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Locale()
// docid: M:System.Data.DataTable.get_Locale
    open func get_Locale() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_CultureInfo__get_Locale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Locale(System.Globalization.CultureInfo)
// docid: M:System.Data.DataTable.set_Locale(System.Globalization.CultureInfo)
    open func set_Locale(value : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_Locale_0__1__CultureInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MinimumCapacity()
// docid: M:System.Data.DataTable.get_MinimumCapacity
    open func get_MinimumCapacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_i32__get_MinimumCapacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MinimumCapacity(System.Int32)
// docid: M:System.Data.DataTable.set_MinimumCapacity(System.Int32)
    open func set_MinimumCapacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_MinimumCapacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Data.DataTable.get_Namespace
    open func get_Namespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Data.DataTable.set_Namespace(System.String)
    open func set_Namespace(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRelationCollection get_ParentRelations()
// docid: M:System.Data.DataTable.get_ParentRelations
    open func get_ParentRelations() throws -> dotnet.System.Data.DataRelationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRelationCollection__get_ParentRelations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRelationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Data.DataTable.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:System.Data.DataTable.set_Prefix(System.String)
    open func set_Prefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.SerializationFormat get_RemotingFormat()
// docid: M:System.Data.DataTable.get_RemotingFormat
    open func get_RemotingFormat() throws -> dotnet.System.Data.SerializationFormat {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_SerializationFormat__get_RemotingFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SerializationFormat(val: __return);
        }
    }
    // [IsSpecialName] void set_RemotingFormat(System.Data.SerializationFormat)
// docid: M:System.Data.DataTable.set_RemotingFormat(System.Data.SerializationFormat)
    open func set_RemotingFormat(value : dotnet.System.Data.SerializationFormat) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_RemotingFormat_0__1__SerializationFormat(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRowCollection get_Rows()
// docid: M:System.Data.DataTable.get_Rows
    open func get_Rows() throws -> dotnet.System.Data.DataRowCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataRowCollection__get_Rows_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.Data.DataTable.get_Site
    open override func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.Data.DataTable.set_Site(System.ComponentModel.ISite)
    open override func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TableName()
// docid: M:System.Data.DataTable.get_TableName
    open func get_TableName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_String__get_TableName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TableName(System.String)
// docid: M:System.Data.DataTable.set_TableName(System.String)
    open func set_TableName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_TableName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataColumn[] get_PrimaryKey()
// docid: M:System.Data.DataTable.get_PrimaryKey
    open func get_PrimaryKey() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTable_DataColumnArray__get_PrimaryKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PrimaryKey(System.Data.DataColumn[])
// docid: M:System.Data.DataTable.set_PrimaryKey(System.Data.DataColumn[])
    open func set_PrimaryKey(value : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__set_PrimaryKey_0__1__DataColumnArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_ColumnChanged(System.Data.DataColumnChangeEventHandler)
// docid: M:System.Data.DataTable.add_ColumnChanged(System.Data.DataColumnChangeEventHandler)
    open func add_ColumnChanged(value : Optional<dotnet.System.Data.DataColumnChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_ColumnChanged_0__1__DataColumnChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ColumnChanged(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataColumnChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataColumnChangeEventHandler(value);
        return try add_ColumnChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ColumnChanged(System.Data.DataColumnChangeEventHandler)
// docid: M:System.Data.DataTable.remove_ColumnChanged(System.Data.DataColumnChangeEventHandler)
    open func remove_ColumnChanged(value : Optional<dotnet.System.Data.DataColumnChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_ColumnChanged_0__1__DataColumnChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ColumnChanged(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataColumnChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataColumnChangeEventHandler(value);
        return try remove_ColumnChanged(value: del_value);
    }
    // [IsSpecialName] void add_ColumnChanging(System.Data.DataColumnChangeEventHandler)
// docid: M:System.Data.DataTable.add_ColumnChanging(System.Data.DataColumnChangeEventHandler)
    open func add_ColumnChanging(value : Optional<dotnet.System.Data.DataColumnChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_ColumnChanging_0__1__DataColumnChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ColumnChanging(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataColumnChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataColumnChangeEventHandler(value);
        return try add_ColumnChanging(value: del_value);
    }
    // [IsSpecialName] void remove_ColumnChanging(System.Data.DataColumnChangeEventHandler)
// docid: M:System.Data.DataTable.remove_ColumnChanging(System.Data.DataColumnChangeEventHandler)
    open func remove_ColumnChanging(value : Optional<dotnet.System.Data.DataColumnChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_ColumnChanging_0__1__DataColumnChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ColumnChanging(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataColumnChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataColumnChangeEventHandler(value);
        return try remove_ColumnChanging(value: del_value);
    }
    // [IsSpecialName] void add_Initialized(System.EventHandler)
// docid: M:System.Data.DataTable.add_Initialized(System.EventHandler)
    open /* method final */ func add_Initialized(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Initialized(value: del_value);
    }
    // [IsSpecialName] void remove_Initialized(System.EventHandler)
// docid: M:System.Data.DataTable.remove_Initialized(System.EventHandler)
    open /* method final */ func remove_Initialized(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Initialized(value: del_value);
    }
    // [IsSpecialName] void add_RowChanged(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.add_RowChanged(System.Data.DataRowChangeEventHandler)
    open func add_RowChanged(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_RowChanged_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_RowChanged(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try add_RowChanged(value: del_value);
    }
    // [IsSpecialName] void remove_RowChanged(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.remove_RowChanged(System.Data.DataRowChangeEventHandler)
    open func remove_RowChanged(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_RowChanged_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_RowChanged(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try remove_RowChanged(value: del_value);
    }
    // [IsSpecialName] void add_RowChanging(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.add_RowChanging(System.Data.DataRowChangeEventHandler)
    open func add_RowChanging(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_RowChanging_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_RowChanging(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try add_RowChanging(value: del_value);
    }
    // [IsSpecialName] void remove_RowChanging(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.remove_RowChanging(System.Data.DataRowChangeEventHandler)
    open func remove_RowChanging(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_RowChanging_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_RowChanging(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try remove_RowChanging(value: del_value);
    }
    // [IsSpecialName] void add_RowDeleted(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.add_RowDeleted(System.Data.DataRowChangeEventHandler)
    open func add_RowDeleted(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_RowDeleted_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_RowDeleted(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try add_RowDeleted(value: del_value);
    }
    // [IsSpecialName] void remove_RowDeleted(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.remove_RowDeleted(System.Data.DataRowChangeEventHandler)
    open func remove_RowDeleted(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_RowDeleted_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_RowDeleted(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try remove_RowDeleted(value: del_value);
    }
    // [IsSpecialName] void add_RowDeleting(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.add_RowDeleting(System.Data.DataRowChangeEventHandler)
    open func add_RowDeleting(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_RowDeleting_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_RowDeleting(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try add_RowDeleting(value: del_value);
    }
    // [IsSpecialName] void remove_RowDeleting(System.Data.DataRowChangeEventHandler)
// docid: M:System.Data.DataTable.remove_RowDeleting(System.Data.DataRowChangeEventHandler)
    open func remove_RowDeleting(value : Optional<dotnet.System.Data.DataRowChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_RowDeleting_0__1__DataRowChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_RowDeleting(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataRowChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataRowChangeEventHandler(value);
        return try remove_RowDeleting(value: del_value);
    }
    // [IsSpecialName] void add_TableCleared(System.Data.DataTableClearEventHandler)
// docid: M:System.Data.DataTable.add_TableCleared(System.Data.DataTableClearEventHandler)
    open func add_TableCleared(value : Optional<dotnet.System.Data.DataTableClearEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_TableCleared_0__1__DataTableClearEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TableCleared(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableClearEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataTableClearEventHandler(value);
        return try add_TableCleared(value: del_value);
    }
    // [IsSpecialName] void remove_TableCleared(System.Data.DataTableClearEventHandler)
// docid: M:System.Data.DataTable.remove_TableCleared(System.Data.DataTableClearEventHandler)
    open func remove_TableCleared(value : Optional<dotnet.System.Data.DataTableClearEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_TableCleared_0__1__DataTableClearEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TableCleared(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableClearEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataTableClearEventHandler(value);
        return try remove_TableCleared(value: del_value);
    }
    // [IsSpecialName] void add_TableClearing(System.Data.DataTableClearEventHandler)
// docid: M:System.Data.DataTable.add_TableClearing(System.Data.DataTableClearEventHandler)
    open func add_TableClearing(value : Optional<dotnet.System.Data.DataTableClearEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_TableClearing_0__1__DataTableClearEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TableClearing(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableClearEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataTableClearEventHandler(value);
        return try add_TableClearing(value: del_value);
    }
    // [IsSpecialName] void remove_TableClearing(System.Data.DataTableClearEventHandler)
// docid: M:System.Data.DataTable.remove_TableClearing(System.Data.DataTableClearEventHandler)
    open func remove_TableClearing(value : Optional<dotnet.System.Data.DataTableClearEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_TableClearing_0__1__DataTableClearEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TableClearing(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableClearEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataTableClearEventHandler(value);
        return try remove_TableClearing(value: del_value);
    }
    // [IsSpecialName] void add_TableNewRow(System.Data.DataTableNewRowEventHandler)
// docid: M:System.Data.DataTable.add_TableNewRow(System.Data.DataTableNewRowEventHandler)
    open func add_TableNewRow(value : Optional<dotnet.System.Data.DataTableNewRowEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__add_TableNewRow_0__1__DataTableNewRowEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TableNewRow(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableNewRowEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataTableNewRowEventHandler(value);
        return try add_TableNewRow(value: del_value);
    }
    // [IsSpecialName] void remove_TableNewRow(System.Data.DataTableNewRowEventHandler)
// docid: M:System.Data.DataTable.remove_TableNewRow(System.Data.DataTableNewRowEventHandler)
    open func remove_TableNewRow(value : Optional<dotnet.System.Data.DataTableNewRowEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTable_void__remove_TableNewRow_0__1__DataTableNewRowEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TableNewRow(value : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableNewRowEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.DataTableNewRowEventHandler(value);
        return try remove_TableNewRow(value: del_value);
    }
    /**
    Indicates whether string comparisons within the table are case-sensitive.

    */
    open var CaseSensitive : Bool {
        get {
            return try! get_CaseSensitive();
        }
        set(v) {
            return try! set_CaseSensitive(value: v);
        }
    }
    /**
    Gets the collection of child relations for this .

    */
    open var ChildRelations : dotnet.System.Data.DataRelationCollection {
        get {
            return try! get_ChildRelations();
        }
    }
    /**
    Gets the collection of columns that belong to this table.

    */
    open var Columns : dotnet.System.Data.DataColumnCollection {
        get {
            return try! get_Columns();
        }
    }
    /**
    Gets the collection of constraints maintained by this table.

    */
    open var Constraints : dotnet.System.Data.ConstraintCollection {
        get {
            return try! get_Constraints();
        }
    }
    /**
    Gets the  to which this table belongs.

    */
    open var DataSet : Optional<dotnet.System.Data.DataSet> {
        get {
            return try! get_DataSet();
        }
    }
    /**
    Gets a customized view of the table that may include a filtered view, or a cursor position.

    */
    open var DefaultView : dotnet.System.Data.DataView {
        get {
            return try! get_DefaultView();
        }
    }
    /**
    Gets or sets the expression that returns a value used to represent this table in the user interface. The  property lets you display the name of this table in a user interface.

    */
    open var DisplayExpression : dotnet.System.String {
        get {
            return try! get_DisplayExpression();
        }
        set(v) {
            return try! set_DisplayExpression(value: v);
        }
    }
    /**
    Gets the collection of customized user information.

    */
    open var ExtendedProperties : dotnet.System.Data.PropertyCollection {
        get {
            return try! get_ExtendedProperties();
        }
    }
    /**
    Gets a value indicating whether there are errors in any of the rows in any of the tables of the  to which the table belongs.

    */
    open var HasErrors : Bool {
        get {
            return try! get_HasErrors();
        }
    }
    /**
    Gets a value that indicates whether the  is initialized.

    */
    public var IsInitialized : Bool {
        get {
            return try! get_IsInitialized();
        }
    }
    /**
    Gets or sets the locale information used to compare strings within the table.

    */
    open var Locale : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_Locale();
        }
        set(v) {
            return try! set_Locale(value: v);
        }
    }
    /**
    Gets or sets the initial starting size for this table.

    */
    open var MinimumCapacity : Swift.Int32 {
        get {
            return try! get_MinimumCapacity();
        }
        set(v) {
            return try! set_MinimumCapacity(value: v);
        }
    }
    /**
    Gets or sets the namespace for the XML representation of the data stored in the .

    */
    open var Namespace : dotnet.System.String {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v);
        }
    }
    /**
    Gets the collection of parent relations for this .

    */
    open var ParentRelations : dotnet.System.Data.DataRelationCollection {
        get {
            return try! get_ParentRelations();
        }
    }
    /**
    Gets or sets the namespace for the XML representation of the data stored in the .

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v);
        }
    }
    /**
    Gets or sets an array of columns that function as primary keys for the data table.

    */
    open var PrimaryKey : dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        get {
            return try! get_PrimaryKey();
        }
        set(v) {
            return try! set_PrimaryKey(value: v);
        }
    }
    /**
    Gets or sets the serialization format.

    */
    open var RemotingFormat : dotnet.System.Data.SerializationFormat {
        get {
            return try! get_RemotingFormat();
        }
        set(v) {
            return try! set_RemotingFormat(value: v);
        }
    }
    /**
    Gets the collection of rows that belong to this table.

    */
    open var Rows : dotnet.System.Data.DataRowCollection {
        get {
            return try! get_Rows();
        }
    }
    /**
    Gets or sets an  for the .

    */
    open override var Site : Optional<dotnet.System.ComponentModel.ISite> {
        get {
            return try! get_Site();
        }
        set(v) {
            return try! set_Site(value: v!);
        }
    }
    /**
    Gets or sets the name of the .

    */
    open var TableName : dotnet.System.String {
        get {
            return try! get_TableName();
        }
        set(v) {
            return try! set_TableName(value: v);
        }
    }
} // DataTable


// type: System.Data.DataTableClearEventArgs
    /**
    Provides data for the  method.

    */
public final class DataTableClearEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTableClearEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataTable)
// docid: M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)
    /**
    Initializes a new instance of the  class.

    - Parameter dataTable: The  whose rows are being cleared.
    */
    public init(dataTable : dotnet.System.Data.DataTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTableClearEventArgs_ctor_0__1__DataTable(&__thrown, dataTable.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.DataTableClearEventArgs.get_Table
    public func get_Table() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableClearEventArgs_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TableName()
// docid: M:System.Data.DataTableClearEventArgs.get_TableName
    public func get_TableName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableClearEventArgs_String__get_TableName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TableNamespace()
// docid: M:System.Data.DataTableClearEventArgs.get_TableNamespace
    public func get_TableNamespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableClearEventArgs_String__get_TableNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the table whose rows are being cleared.

    */
    public var Table : dotnet.System.Data.DataTable {
        get {
            return try! get_Table();
        }
    }
    /**
    Gets the table name whose rows are being cleared.

    */
    public var TableName : dotnet.System.String {
        get {
            return try! get_TableName();
        }
    }
    /**
    Gets the namespace of the table whose rows are being cleared.

    */
    public var TableNamespace : dotnet.System.String {
        get {
            return try! get_TableNamespace();
        }
    }
} // DataTableClearEventArgs


// type: System.Data.DataTableClearEventHandler
    /**
    Represents the method that handles the  method.

    */
public final class DataTableClearEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTableClearEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.DataTableClearEventArgs)
// docid: M:System.Data.DataTableClearEventHandler.Invoke(System.Object,System.Data.DataTableClearEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataTableClearEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableClearEventHandler_void__Invoke_0__2__Object_DataTableClearEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.DataTableClearEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.DataTableClearEventHandler.BeginInvoke(System.Object,System.Data.DataTableClearEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataTableClearEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableClearEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DataTableClearEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.DataTableClearEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableClearEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableClearEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.DataTableClearEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTableClearEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.DataTableClearEventArgs)
// docid: M:System.Data.DataTableClearEventHandler.Invoke(System.Object,System.Data.DataTableClearEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.DataTableClearEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableClearEventHandler_void__Invoke_0__2__Object_DataTableClearEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataTableClearEventHandler


// type: System.Data.DataTableCollection
    /**
    Represents the collection of tables for the .

    */
public final class DataTableCollection
    :
    dotnet.System.Data.InternalDataCollectionBase
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTableCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.DataTable Add()
// docid: M:System.Data.DataTableCollection.Add
    /**
    Creates a new  object by using a default name and adds it to the collection.

    - Returns: The newly created .

    */
    public func Add() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_DataTable__Add_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // void Add(System.Data.DataTable)
// docid: M:System.Data.DataTableCollection.Add(System.Data.DataTable)
    /**
    Adds the specified  to the collection.

    - Parameter table: The  object to add.
    */
    public func Add(table : dotnet.System.Data.DataTable) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__Add_0__1__DataTable(&__thrown, self.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataTable Add(System.String)
// docid: M:System.Data.DataTableCollection.Add(System.String)
    /**
    Creates a  object by using the specified name and adds it to the collection.

    - Parameter name: The name to give the created .
    - Returns: The newly created .

    */
    public func Add(name : Optional<dotnet.System.String>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_DataTable__Add_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTable Add(System.String, System.String)
// docid: M:System.Data.DataTableCollection.Add(System.String,System.String)
    /**
    Creates a  object by using the specified name and adds it to the collection.

    - Parameter name: The name to give the created .
    - Parameter tableNamespace: The namespace to give the created .
    - Returns: The newly created .

    */
    public func Add(name : Optional<dotnet.System.String>, tableNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_DataTable__Add_0__2__String_String(&__thrown, self.get_handle(), name?.get_handle() ?? nil, tableNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // void AddRange(System.Data.DataTable[])
// docid: M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])
    /**
    Copies the elements of the specified  array to the end of the collection.

    - Parameter tables: The array of  objects to add to the collection.
    */
    public func AddRange(tables : Optional<dotnet.System_Arr<dotnet.System.Data.DataTable>>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__AddRange_0__1__DataTableArray(&__thrown, self.get_handle(), (tables?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CanRemove(System.Data.DataTable)
// docid: M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)
    /**
    Verifies whether the specified  object can be removed from the collection.

    - Parameter table: The  in the collection to perform the check against.
    - Returns: 
         if the table can be removed; otherwise .

    */
    public func CanRemove(table : Optional<dotnet.System.Data.DataTable>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_bool__CanRemove_0__1__DataTable(&__thrown, self.get_handle(), table?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Data.DataTableCollection.Clear
    /**
    Clears the collection of all  objects.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.DataTableCollection.Contains(System.String)
    /**
    Gets a value that indicates whether a  object with the specified name exists in the collection.

    - Parameter name: The name of the  to find.
    - Returns: 
         if the specified table exists; otherwise .

    */
    public func Contains(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.String, System.String)
// docid: M:System.Data.DataTableCollection.Contains(System.String,System.String)
    /**
    Gets a value that indicates whether a  object with the specified name and table namespace exists in the collection.

    - Parameter name: The name of the  to find.
    - Parameter tableNamespace: The name of the  namespace to look in.
    - Returns: 
         if the specified table exists; otherwise .

    */
    public func Contains(name : dotnet.System.String, tableNamespace : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_bool__Contains_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), tableNamespace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Data.DataTable[], System.Int32)
// docid: M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)
    /**
    Copies all the elements of the current  to a one-dimensional , starting at the specified destination array index.

    - Parameter array: The one-dimensional  to copy the current  object's elements into.
    - Parameter index: The destination  index to start copying into.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.DataTable>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__CopyTo_0__2__DataTableArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Data.DataTable)
// docid: M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)
    /**
    Gets the index of the specified  object.

    - Parameter table: The  to search for.
    - Returns: The zero-based index of the table, or -1 if the table is not found in the collection.

    */
    public func IndexOf(table : Optional<dotnet.System.Data.DataTable>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_i32__IndexOf_0__1__DataTable(&__thrown, self.get_handle(), table?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.DataTableCollection.IndexOf(System.String)
    /**
    Gets the index in the collection of the  object with the specified name.

    - Parameter tableName: The name of the  object to look for.
    - Returns: The zero-based index of the  with the specified name, or -1 if the table does not exist in the collection.  
  
   
 Returns -1 when two or more tables have the same name but different namespaces. The call does not succeed if there is any ambiguity when matching a table name to exactly one table.

    */
    public func IndexOf(tableName : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), tableName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String, System.String)
// docid: M:System.Data.DataTableCollection.IndexOf(System.String,System.String)
    /**
    Gets the index in the collection of the specified  object.

    - Parameter tableName: The name of the  object to look for.
    - Parameter tableNamespace: The name of the  namespace to look in.
    - Returns: The zero-based index of the  with the specified name, or -1 if the table does not exist in the collection.

    */
    public func IndexOf(tableName : dotnet.System.String, tableNamespace : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_i32__IndexOf_0__2__String_String(&__thrown, self.get_handle(), tableName.get_handle(), tableNamespace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Remove(System.Data.DataTable)
// docid: M:System.Data.DataTableCollection.Remove(System.Data.DataTable)
    /**
    Removes the specified  object from the collection.

    - Parameter table: The  to remove.
    */
    public func Remove(table : dotnet.System.Data.DataTable) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__Remove_0__1__DataTable(&__thrown, self.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Data.DataTableCollection.Remove(System.String)
    /**
    Removes the  object with the specified name from the collection.

    - Parameter name: The name of the  object to remove.
    */
    public func Remove(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String, System.String)
// docid: M:System.Data.DataTableCollection.Remove(System.String,System.String)
    /**
    Removes the  object with the specified name from the collection.

    - Parameter name: The name of the  object to remove.
    - Parameter tableNamespace: The name of the  namespace to look in.
    */
    public func Remove(name : dotnet.System.String, tableNamespace : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__Remove_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), tableNamespace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.DataTableCollection.RemoveAt(System.Int32)
    /**
    Removes the  object at the specified index from the collection.

    - Parameter index: The index of the  to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Item(System.Int32)
// docid: M:System.Data.DataTableCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_DataTable__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Item(System.String)
// docid: M:System.Data.DataTableCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_DataTable__get_Item_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Item(System.String, System.String)
// docid: M:System.Data.DataTableCollection.get_Item(System.String,System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(name : Optional<dotnet.System.String>, tableNamespace : dotnet.System.String) throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableCollection_DataTable__get_Item_0__2__String_String(&__thrown, self.get_handle(), name?.get_handle() ?? nil, tableNamespace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataTableCollection.add_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    public func add_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__add_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try add_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataTableCollection.remove_CollectionChanged(System.ComponentModel.CollectionChangeEventHandler)
    public func remove_CollectionChanged(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__remove_CollectionChanged_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try remove_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void add_CollectionChanging(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataTableCollection.add_CollectionChanging(System.ComponentModel.CollectionChangeEventHandler)
    public func add_CollectionChanging(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__add_CollectionChanging_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_CollectionChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try add_CollectionChanging(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanging(System.ComponentModel.CollectionChangeEventHandler)
// docid: M:System.Data.DataTableCollection.remove_CollectionChanging(System.ComponentModel.CollectionChangeEventHandler)
    public func remove_CollectionChanging(value : Optional<dotnet.System.ComponentModel.CollectionChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableCollection_void__remove_CollectionChanging_0__1__CollectionChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_CollectionChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.CollectionChangeEventHandler(value);
        return try remove_CollectionChanging(value: del_value);
    }
} // DataTableCollection


// type: System.Data.DataTableExtensions
public struct DataTableExtensions {
    // System.Data.DataView AsDataView(System.Data.DataTable)
// docid: M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)
    /**
    Creates and returns a LINQ-enabled  object.

    - Parameter table: The source  from which the LINQ-enabled  is created.
    - Returns: A LINQ-enabled  object.

    */
    public static func AsDataView(table : dotnet.System.Data.DataTable) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableExtensions_DataView__AsDataView_0__1__DataTable(&__thrown, table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // System.Data.DataView AsDataView<T>(System.Data.EnumerableRowCollection<T>)
// docid: M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})
    /**
    Creates and returns a LINQ-enabled  object representing the LINQ to DataSet query.

    - Parameter source: The source LINQ to DataSet query from which the LINQ-enabled  is created.
    - Returns: A LINQ-enabled  object.

    */
    public static func AsDataView<UT : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UT>) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableExtensions_DataView__AsDataView_1__1__System_Data_EnumerableRowCollection_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // System.Data.EnumerableRowCollection<System.Data.DataRow> AsEnumerable(System.Data.DataTable)
// docid: M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)
    /**
    Returns an  object, where the generic parameter  is . This object can be used in a LINQ expression or method query.

    - Parameter source: The source  to make enumerable.
    - Returns: An  object, where the generic parameter  is .

    */
    public static func AsEnumerable(source : dotnet.System.Data.DataTable) throws -> dotnet.System.Data.EnumerableRowCollection_1<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableExtensions_System_Data_EnumerableRowCollection_System_Data_DataRow___AsEnumerable_0__1__DataTable(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.EnumerableRowCollection_1(hndl : __return);
        }
    }
    // System.Data.DataTable CopyToDataTable<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a  that contains copies of the  objects, given an input  object where the generic parameter  is .

    - Parameter source: The source  sequence.
    - Returns: A  that contains the input sequence as the type of  objects.

    */
    public static func CopyToDataTable<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableExtensions_DataTable__CopyToDataTable_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // void CopyToDataTable<T>(System.Collections.Generic.IEnumerable<T>, System.Data.DataTable, System.Data.LoadOption)
// docid: M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
    /**
    Copies  objects to the specified , given an input  object where the generic parameter  is .

    - Parameter source: The source  sequence.
    - Parameter table: The destination .
    - Parameter options: A  enumeration that specifies the  load options.
    */
    public static func CopyToDataTable<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>, table : dotnet.System.Data.DataTable, options : dotnet.System.Data.LoadOption) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableExtensions_void__CopyToDataTable_1__3__System_Collections_Generic_IEnumerable_UT__DataTable_LoadOption(UT.get_type_handle(), &__thrown, source.get_handle(), table.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyToDataTable<T>(System.Collections.Generic.IEnumerable<T>, System.Data.DataTable, System.Data.LoadOption, System.Data.FillErrorEventHandler)
// docid: M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
    /**
    Copies  objects to the specified , given an input  object where the generic parameter  is .

    - Parameter source: The source  sequence.
    - Parameter table: The destination .
    - Parameter options: A  enumeration that specifies the  load options.
    - Parameter errorHandler: A  delegate that represents the method that will handle an error.
    */
    public static func CopyToDataTable<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>, table : dotnet.System.Data.DataTable, options : dotnet.System.Data.LoadOption, errorHandler : Optional<dotnet.System.Data.FillErrorEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableExtensions_void__CopyToDataTable_1__4__System_Collections_Generic_IEnumerable_UT__DataTable_LoadOption_FillErrorEventHandler(UT.get_type_handle(), &__thrown, source.get_handle(), table.get_handle(), options.get_value(), errorHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func CopyToDataTable<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>, table : dotnet.System.Data.DataTable, options : dotnet.System.Data.LoadOption, errorHandler : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void) throws {
        let del_errorHandler = try dotnet.System.Data.FillErrorEventHandler(errorHandler);
        return try CopyToDataTable(source: source, table: table, options: options, errorHandler: del_errorHandler);
    }
} // DataTableExtensions


// type: System.Data.DataTableNewRowEventArgs
    /**
    Provides data for the  method.

    */
public final class DataTableNewRowEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTableNewRowEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataRow)
// docid: M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)
    /**
    Initializes a new instance of .

    - Parameter dataRow: The  being added.
    */
    public init(dataRow : dotnet.System.Data.DataRow) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTableNewRowEventArgs_ctor_0__1__DataRow(&__thrown, dataRow.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.DataTableNewRowEventArgs.get_Row
    public func get_Row() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableNewRowEventArgs_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    /**
    Gets the row that is being added.

    */
    public var Row : dotnet.System.Data.DataRow {
        get {
            return try! get_Row();
        }
    }
} // DataTableNewRowEventArgs


// type: System.Data.DataTableNewRowEventHandler
    /**
    Represents the method that handles the  method.

    */
public final class DataTableNewRowEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTableNewRowEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.DataTableNewRowEventArgs)
// docid: M:System.Data.DataTableNewRowEventHandler.Invoke(System.Object,System.Data.DataTableNewRowEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataTableNewRowEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableNewRowEventHandler_void__Invoke_0__2__Object_DataTableNewRowEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.DataTableNewRowEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.DataTableNewRowEventHandler.BeginInvoke(System.Object,System.Data.DataTableNewRowEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.DataTableNewRowEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableNewRowEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DataTableNewRowEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.DataTableNewRowEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableNewRowEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.DataTableNewRowEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.DataTableNewRowEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTableNewRowEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.DataTableNewRowEventArgs)
// docid: M:System.Data.DataTableNewRowEventHandler.Invoke(System.Object,System.Data.DataTableNewRowEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.DataTableNewRowEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableNewRowEventHandler_void__Invoke_0__2__Object_DataTableNewRowEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataTableNewRowEventHandler


// type: System.Data.DataTableReader
    /**
    The  obtains the contents of one or more  objects in the form of one or more read-only, forward-only result sets.

    */
public final class DataTableReader
    :
    dotnet.System.Data.Common.DbDataReader
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_DataTableReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataTable)
// docid: M:System.Data.DataTableReader.#ctor(System.Data.DataTable)
    /**
    Initializes a new instance of the  class by using data from the supplied .

    - Parameter dataTable: The  from which the new  obtains its result set.
    */
    public init(dataTable : dotnet.System.Data.DataTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTableReader_ctor_0__1__DataTable(&__thrown, dataTable.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataTable[])
// docid: M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])
    /**
    Initializes a new instance of the  class using the supplied array of  objects.

    - Parameter dataTables: The array of  objects that supplies the results for the new  object.
    */
    public init(dataTables : dotnet.System_Arr<dotnet.System.Data.DataTable>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataTableReader_ctor_0__1__DataTableArray(&__thrown, dataTables.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Data.DataTableReader.Close
    /**
    Closes the current .

    */
    public override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataTableReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool GetBoolean(System.Int32)
// docid: M:System.Data.DataTableReader.GetBoolean(System.Int32)
    /**
    Gets the value of the specified column as a .

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    public override func GetBoolean(ordinal : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_bool__GetBoolean_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte GetByte(System.Int32)
// docid: M:System.Data.DataTableReader.GetByte(System.Int32)
    /**
    Gets the value of the specified column as a byte.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    public override func GetByte(ordinal : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_u8__GetByte_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    Reads a stream of bytes starting at the specified column offset into the buffer as an array starting at the specified buffer offset.

    - Parameter ordinal: The zero-based column ordinal.
    - Parameter dataIndex: The index within the field from which to start the read operation.
    - Parameter buffer: The buffer into which to read the stream of bytes.
    - Parameter bufferIndex: The index within the buffer at which to start placing the data.
    - Parameter length: The maximum length to copy into the buffer.
    - Returns: The actual number of bytes read.

    */
    public func GetBytes(ordinal : Swift.Int32, dataIndex : Swift.Int64, buffer : Optional<dotnet.System_Arr<Swift.UInt8>>, bufferIndex : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i64__GetBytes_0__5__i32_i64_u8Array_i32_i32(&__thrown, self.get_handle(), ordinal, dataIndex, (buffer?.get_handle()), bufferIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char GetChar(System.Int32)
// docid: M:System.Data.DataTableReader.GetChar(System.Int32)
    /**
    Gets the value of the specified column as a character.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the column.

    */
    public override func GetChar(ordinal : Swift.Int32) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Char__GetChar_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.Int64 GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    Returns the value of the specified column as a character array.

    - Parameter ordinal: The zero-based column ordinal.
    - Parameter dataIndex: The index within the field from which to start the read operation.
    - Parameter buffer: The buffer into which to read the stream of chars.
    - Parameter bufferIndex: The index within the buffer at which to start placing the data.
    - Parameter length: The maximum length to copy into the buffer.
    - Returns: The actual number of characters read.

    */
    public func GetChars(ordinal : Swift.Int32, dataIndex : Swift.Int64, buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>, bufferIndex : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i64__GetChars_0__5__i32_i64_CharArray_i32_i32(&__thrown, self.get_handle(), ordinal, dataIndex, (buffer?.get_handle()), bufferIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetDataTypeName(System.Int32)
// docid: M:System.Data.DataTableReader.GetDataTypeName(System.Int32)
    /**
    Gets a string representing the data type of the specified column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: A string representing the column's data type.

    */
    public override func GetDataTypeName(ordinal : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_String__GetDataTypeName_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.DateTime GetDateTime(System.Int32)
// docid: M:System.Data.DataTableReader.GetDateTime(System.Int32)
    /**
    Gets the value of the specified column as a  object.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    public override func GetDateTime(ordinal : Swift.Int32) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_DateTime__GetDateTime_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal GetDecimal(System.Int32)
// docid: M:System.Data.DataTableReader.GetDecimal(System.Int32)
    /**
    Gets the value of the specified column as a .

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    public override func GetDecimal(ordinal : Swift.Int32) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Decimal__GetDecimal_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double GetDouble(System.Int32)
// docid: M:System.Data.DataTableReader.GetDouble(System.Int32)
    /**
    Gets the value of the column as a double-precision floating point number.

    - Parameter ordinal: The zero-based ordinal of the column.
    - Returns: The value of the specified column.

    */
    public override func GetDouble(ordinal : Swift.Int32) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_f64__GetDouble_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.DataTableReader.GetEnumerator
    /**
    Returns an enumerator that can be used to iterate through the item collection.

    - Returns: An  object that represents the item collection.

    */
    public override func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Type GetFieldType(System.Int32)
// docid: M:System.Data.DataTableReader.GetFieldType(System.Int32)
    /**
    Gets the  that is the data type of the object.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The  that is the data type of the object.

    */
    public override func GetFieldType(ordinal : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Type__GetFieldType_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Single GetFloat(System.Int32)
// docid: M:System.Data.DataTableReader.GetFloat(System.Int32)
    /**
    Gets the value of the specified column as a single-precision floating point number.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the column.

    */
    public override func GetFloat(ordinal : Swift.Int32) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_f32__GetFloat_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid GetGuid(System.Int32)
// docid: M:System.Data.DataTableReader.GetGuid(System.Int32)
    /**
    Gets the value of the specified column as a globally-unique identifier (GUID).

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    public override func GetGuid(ordinal : Swift.Int32) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Guid__GetGuid_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 GetInt16(System.Int32)
// docid: M:System.Data.DataTableReader.GetInt16(System.Int32)
    /**
    Gets the value of the specified column as a 16-bit signed integer.

    - Parameter ordinal: The zero-based column ordinal
    - Returns: The value of the specified column.

    */
    public override func GetInt16(ordinal : Swift.Int32) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i16__GetInt16_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetInt32(System.Int32)
// docid: M:System.Data.DataTableReader.GetInt32(System.Int32)
    /**
    Gets the value of the specified column as a 32-bit signed integer.

    - Parameter ordinal: The zero-based column ordinal
    - Returns: The value of the specified column.

    */
    public override func GetInt32(ordinal : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__GetInt32_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetInt64(System.Int32)
// docid: M:System.Data.DataTableReader.GetInt64(System.Int32)
    /**
    Gets the value of the specified column as a 64-bit signed integer.

    - Parameter ordinal: The zero-based column ordinal
    - Returns: The value of the specified column.

    */
    public override func GetInt64(ordinal : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i64__GetInt64_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetName(System.Int32)
// docid: M:System.Data.DataTableReader.GetName(System.Int32)
    /**
    Gets the value of the specified column as a .

    - Parameter ordinal: The zero-based column ordinal
    - Returns: The name of the specified column.

    */
    public override func GetName(ordinal : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_String__GetName_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 GetOrdinal(System.String)
// docid: M:System.Data.DataTableReader.GetOrdinal(System.String)
    /**
    Gets the column ordinal, given the name of the column.

    - Parameter name: The name of the column.
    - Returns: The zero-based column ordinal.

    */
    public override func GetOrdinal(name : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__GetOrdinal_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetProviderSpecificFieldType(System.Int32)
// docid: M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)
    /**
    Gets the type of the specified column in provider-specific format.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The  that is the data type of the object.

    */
    public override func GetProviderSpecificFieldType(ordinal : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Type__GetProviderSpecificFieldType_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Object GetProviderSpecificValue(System.Int32)
// docid: M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)
    /**
    Gets the value of the specified column in provider-specific format.

    - Parameter ordinal: The zero-based number of the column whose value is retrieved.
    - Returns: The value of the specified column in provider-specific format.

    */
    public override func GetProviderSpecificValue(ordinal : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Object__GetProviderSpecificValue_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 GetProviderSpecificValues(System.Object[])
// docid: M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])
    /**
    Fills the supplied array with provider-specific type information for all the columns in the .

    - Parameter values: An array of objects to be filled in with type information for the columns in the .
    - Returns: The number of column values copied into the array.

    */
    public override func GetProviderSpecificValues(values : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__GetProviderSpecificValues_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.DataTable GetSchemaTable()
// docid: M:System.Data.DataTableReader.GetSchemaTable
    /**
    Returns a  that describes the column metadata of the .

    - Returns: A  that describes the column metadata.

    */
    public override func GetSchemaTable() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_DataTable__GetSchemaTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.String GetString(System.Int32)
// docid: M:System.Data.DataTableReader.GetString(System.Int32)
    /**
    Gets the value of the specified column as a string.

    - Parameter ordinal: The zero-based column ordinal
    - Returns: The value of the specified column.

    */
    public override func GetString(ordinal : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_String__GetString_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object GetValue(System.Int32)
// docid: M:System.Data.DataTableReader.GetValue(System.Int32)
    /**
    Gets the value of the specified column in its native format.

    - Parameter ordinal: The zero-based column ordinal
    - Returns: The value of the specified column. This method returns  for null columns.

    */
    public override func GetValue(ordinal : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Object__GetValue_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 GetValues(System.Object[])
// docid: M:System.Data.DataTableReader.GetValues(System.Object[])
    /**
    Populates an array of objects with the column values of the current row.

    - Parameter values: An array of  into which to copy the column values from the .
    - Returns: The number of column values copied into the array.

    */
    public override func GetValues(values : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__GetValues_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDBNull(System.Int32)
// docid: M:System.Data.DataTableReader.IsDBNull(System.Int32)
    /**
    Gets a value that indicates whether the column contains non-existent or missing values.

    - Parameter ordinal: The zero-based column ordinal
    - Returns: 
         if the specified column value is equivalent to ; otherwise, .

    */
    public override func IsDBNull(ordinal : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_bool__IsDBNull_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool NextResult()
// docid: M:System.Data.DataTableReader.NextResult
    /**
    Advances the  to the next result set, if any.

    - Returns: 
         if there was another result set; otherwise .

    */
    public override func NextResult() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_bool__NextResult_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Read()
// docid: M:System.Data.DataTableReader.Read
    /**
    Advances the  to the next record.

    - Returns: 
         if there was another row to read; otherwise .

    */
    public override func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Data.DataTableReader.get_Depth
    public override func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_FieldCount()
// docid: M:System.Data.DataTableReader.get_FieldCount
    public override func get_FieldCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__get_FieldCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_HasRows()
// docid: M:System.Data.DataTableReader.get_HasRows
    public override func get_HasRows() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_bool__get_HasRows_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsClosed()
// docid: M:System.Data.DataTableReader.get_IsClosed
    public override func get_IsClosed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_bool__get_IsClosed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_RecordsAffected()
// docid: M:System.Data.DataTableReader.get_RecordsAffected
    public override func get_RecordsAffected() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_i32__get_RecordsAffected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Data.DataTableReader.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//    DbDataReader : [IsSpecialName] System.Object get_Item(System.Int32) -- DbDataReader -- 100665721
//EARLY true
//matches :
//    DbDataReader : [IsSpecialName] System.Object get_Item(System.Int32)
    public override func get_Item(ordinal : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.DataTableReader.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//    DbDataReader : [IsSpecialName] System.Object get_Item(System.String) -- DbDataReader -- 100665722
//EARLY true
//matches :
//    DbDataReader : [IsSpecialName] System.Object get_Item(System.String)
    public override func get_Item(name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataTableReader_Object__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    The depth of nesting for the current row of the .

    */
    public override var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    Returns the number of columns in the current row.

    */
    public override var FieldCount : Swift.Int32 {
        get {
            return try! get_FieldCount();
        }
    }
    /**
    Gets a value that indicates whether the  contains one or more rows.

    */
    public override var HasRows : Bool {
        get {
            return try! get_HasRows();
        }
    }
    /**
    Gets a value that indicates whether the  is closed.

    */
    public override var IsClosed : Bool {
        get {
            return try! get_IsClosed();
        }
    }
    /**
    Gets the number of rows inserted, changed, or deleted by execution of the SQL statement.

    */
    public override var RecordsAffected : Swift.Int32 {
        get {
            return try! get_RecordsAffected();
        }
    }
} // DataTableReader


// type: System.Data.DataView
    /**
    Represents a databindable, customized view of a  for sorting, filtering, searching, editing, and navigation. The  does not store data, but instead represents a connected view of its corresponding . Changes to the 's data will affect the . Changes to the 's data will affect all s associated with it.

    */
open class DataView
    :
    dotnet.System.ComponentModel.MarshalByValueComponent,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList,
    System_ComponentModel_IBindingList,
    System_ComponentModel_IBindingListView,
    System_ComponentModel_ISupportInitialize,
    System_ComponentModel_ISupportInitializeNotification,
    System_ComponentModel_ITypedList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataView_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DataView.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataView_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataTable)
// docid: M:System.Data.DataView.#ctor(System.Data.DataTable)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter table: A  to add to the .
    */
    public init(table : Optional<dotnet.System.Data.DataTable>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataView_ctor_0__1__DataTable(&__thrown, table?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataTable, System.String, System.String, System.Data.DataViewRowState)
// docid: M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)
    /**
    Initializes a new instance of the  class with the specified , , , and .

    - Parameter table: A  to add to the .
    - Parameter RowFilter: A  to apply to the .
    - Parameter Sort: A  to apply to the .
    - Parameter RowState: A  to apply to the .
    */
    public init(table : dotnet.System.Data.DataTable, RowFilter : Optional<dotnet.System.String>, Sort : Optional<dotnet.System.String>, RowState : dotnet.System.Data.DataViewRowState) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataView_ctor_0__4__DataTable_String_String_DataViewRowState(&__thrown, table.get_handle(), RowFilter?.get_handle() ?? nil, Sort?.get_handle() ?? nil, RowState.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Data.DataRowView AddNew()
// docid: M:System.Data.DataView.AddNew
    /**
    Adds a new row to the .

    - Returns: A new  object.

    */
    open func AddNew() throws -> dotnet.System.Data.DataRowView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataRowView__AddNew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowView(hndl : __return);
        }
    }
    // void BeginInit()
// docid: M:System.Data.DataView.BeginInit
    /**
    Starts the initialization of a  that is used on a form or used by another component. The initialization occurs at runtime.

    */
    open /* method final */ func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.DataView.CopyTo(System.Array,System.Int32)
    /**
    Copies items into an array. Only for Web Forms Interfaces.

    - Parameter array: array to copy into.
    - Parameter index: index to start at.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Delete(System.Int32)
// docid: M:System.Data.DataView.Delete(System.Int32)
    /**
    Deletes a row at the specified index.

    - Parameter index: The index of the row to delete.
    */
    open func Delete(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__Delete_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndInit()
// docid: M:System.Data.DataView.EndInit
    /**
    Ends the initialization of a  that is used on a form or used by another component. The initialization occurs at runtime.

    */
    open /* method final */ func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Equals(System.Data.DataView)
// docid: M:System.Data.DataView.Equals(System.Data.DataView)
    /**
    Determines whether the specified  instances are considered equal.

    - Parameter view: The  to be compared.
    - Returns: 
         if the two  instances are equal; otherwise, .

    */
    open func Equals(view : Optional<dotnet.System.Data.DataView>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_bool__Equals_0__1__DataView(&__thrown, self.get_handle(), view?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 Find(System.Object)
// docid: M:System.Data.DataView.Find(System.Object)
    /**
    Finds a row in the  by the specified sort key value.

    - Parameter key: The object to search for.
    - Returns: The index of the row in the  that contains the sort key value specified; otherwise -1 if the sort key value does not exist.

    */
    open func Find(key : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_i32__Find_0__1__Object(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Find(System.Object[])
// docid: M:System.Data.DataView.Find(System.Object[])
    /**
    Finds a row in the  by the specified sort key values.

    - Parameter key: An array of values, typed as .
    - Returns: The index of the position of the first row in the  that matches the sort key values specified; otherwise -1 if there are no matching sort key values.

    */
    open func Find(key : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_i32__Find_0__1__ObjectArray(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.DataRowView[] FindRows(System.Object)
// docid: M:System.Data.DataView.FindRows(System.Object)
    /**
    Returns an array of  objects whose columns match the specified sort key value.

    - Parameter key: The column value, typed as , to search for.
    - Returns: An array of  objects whose columns match the specified sort key value; or, if no rows contain the specified sort key values, an empty  array.

    */
    open func FindRows(key : Optional<dotnet.System.Object>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRowView> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataRowViewArray__FindRows_0__1__Object(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRowView>(hndl : __return);
        }
    }
    // System.Data.DataRowView[] FindRows(System.Object[])
// docid: M:System.Data.DataView.FindRows(System.Object[])
    /**
    Returns an array of  objects whose columns match the specified sort key value.

    - Parameter key: An array of column values, typed as , to search for.
    - Returns: An array of  objects whose columns match the specified sort key value; or, if no rows contain the specified sort key values, an empty  array.

    */
    open func FindRows(key : dotnet.System_Arr<dotnet.System.Object>) throws -> dotnet.System_Arr<dotnet.System.Data.DataRowView> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataRowViewArray__FindRows_0__1__ObjectArray(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataRowView>(hndl : __return);
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.DataView.GetEnumerator
    /**
    Gets an enumerator for this .

    - Returns: An  for navigating through the list.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Data.DataTable ToTable()
// docid: M:System.Data.DataView.ToTable
    /**
    Creates and returns a new  based on rows in an existing .

    - Returns: A new  instance that contains the requested rows and columns.

    */
    open func ToTable() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataTable__ToTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTable ToTable(bool, System.String[])
// docid: M:System.Data.DataView.ToTable(System.Boolean,System.String[])
    /**
    Creates and returns a new  based on rows in an existing .

    - Parameter distinct: If , the returned  contains rows that have distinct values for all its columns. The default value is .
    - Parameter columnNames: A string array that contains a list of the column names to be included in the returned . The  contains the specified columns in the order they appear within this array.
    - Returns: A new  instance that contains the requested rows and columns.

    */
    open func ToTable(distinct : Bool, columnNames : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataTable__ToTable_0__2__bool_StringArray(&__thrown, self.get_handle(), Swift.Int32(distinct ? 1 : 0), columnNames.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTable ToTable(System.String)
// docid: M:System.Data.DataView.ToTable(System.String)
    /**
    Creates and returns a new  based on rows in an existing .

    - Parameter tableName: The name of the returned .
    - Returns: A new  instance that contains the requested rows and columns.

    */
    open func ToTable(tableName : Optional<dotnet.System.String>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataTable__ToTable_0__1__String(&__thrown, self.get_handle(), tableName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTable ToTable(System.String, bool, System.String[])
// docid: M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])
    /**
    Creates and returns a new  based on rows in an existing .

    - Parameter tableName: The name of the returned .
    - Parameter distinct: If , the returned  contains rows that have distinct values for all its columns. The default value is .
    - Parameter columnNames: A string array that contains a list of the column names to be included in the returned . The  contains the specified columns in the order they appear within this array.
    - Returns: A new  instance that contains the requested rows and columns.

    */
    open func ToTable(tableName : Optional<dotnet.System.String>, distinct : Bool, columnNames : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataTable__ToTable_0__3__String_bool_StringArray(&__thrown, self.get_handle(), tableName?.get_handle() ?? nil, Swift.Int32(distinct ? 1 : 0), columnNames.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_AllowDelete()
// docid: M:System.Data.DataView.get_AllowDelete
    open func get_AllowDelete() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_bool__get_AllowDelete_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowDelete(bool)
// docid: M:System.Data.DataView.set_AllowDelete(System.Boolean)
    open func set_AllowDelete(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_AllowDelete_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowEdit()
// docid: M:System.Data.DataView.get_AllowEdit
    open func get_AllowEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_bool__get_AllowEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowEdit(bool)
// docid: M:System.Data.DataView.set_AllowEdit(System.Boolean)
    open func set_AllowEdit(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_AllowEdit_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowNew()
// docid: M:System.Data.DataView.get_AllowNew
    open func get_AllowNew() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_bool__get_AllowNew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowNew(bool)
// docid: M:System.Data.DataView.set_AllowNew(System.Boolean)
    open func set_AllowNew(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_AllowNew_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ApplyDefaultSort()
// docid: M:System.Data.DataView.get_ApplyDefaultSort
    open func get_ApplyDefaultSort() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_bool__get_ApplyDefaultSort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ApplyDefaultSort(bool)
// docid: M:System.Data.DataView.set_ApplyDefaultSort(System.Boolean)
    open func set_ApplyDefaultSort(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_ApplyDefaultSort_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.DataView.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.DataViewManager get_DataViewManager()
// docid: M:System.Data.DataView.get_DataViewManager
    open func get_DataViewManager() throws -> Optional<dotnet.System.Data.DataViewManager> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataViewManager__get_DataViewManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataViewManager(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsInitialized()
// docid: M:System.Data.DataView.get_IsInitialized
    open /* method final */ func get_IsInitialized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_bool__get_IsInitialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_RowFilter()
// docid: M:System.Data.DataView.get_RowFilter
    open func get_RowFilter() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_String__get_RowFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RowFilter(System.String)
// docid: M:System.Data.DataView.set_RowFilter(System.String)
    open func set_RowFilter(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_RowFilter_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewRowState get_RowStateFilter()
// docid: M:System.Data.DataView.get_RowStateFilter
    open func get_RowStateFilter() throws -> dotnet.System.Data.DataViewRowState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataViewRowState__get_RowStateFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataViewRowState(val: __return);
        }
    }
    // [IsSpecialName] void set_RowStateFilter(System.Data.DataViewRowState)
// docid: M:System.Data.DataView.set_RowStateFilter(System.Data.DataViewRowState)
    open func set_RowStateFilter(value : dotnet.System.Data.DataViewRowState) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_RowStateFilter_0__1__DataViewRowState(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Sort()
// docid: M:System.Data.DataView.get_Sort
    open func get_Sort() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_String__get_Sort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Sort(System.String)
// docid: M:System.Data.DataView.set_Sort(System.String)
    open func set_Sort(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_Sort_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.DataView.get_Table
    open func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Table(System.Data.DataTable)
// docid: M:System.Data.DataView.set_Table(System.Data.DataTable)
    open func set_Table(value : Optional<dotnet.System.Data.DataTable>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__set_Table_0__1__DataTable(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRowView get_Item(System.Int32)
// docid: M:System.Data.DataView.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(recordIndex : Swift.Int32) throws -> dotnet.System.Data.DataRowView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataView_DataRowView__get_Item_0__1__i32(&__thrown, self.get_handle(), recordIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowView(hndl : __return);
        }
    }
    // [IsSpecialName] void add_Initialized(System.EventHandler)
// docid: M:System.Data.DataView.add_Initialized(System.EventHandler)
    open /* method final */ func add_Initialized(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__add_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Initialized(value: del_value);
    }
    // [IsSpecialName] void remove_Initialized(System.EventHandler)
// docid: M:System.Data.DataView.remove_Initialized(System.EventHandler)
    open /* method final */ func remove_Initialized(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__remove_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Initialized(value: del_value);
    }
    // [IsSpecialName] void add_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.Data.DataView.add_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open /* method final */ func add_ListChanged(value : Optional<dotnet.System.ComponentModel.ListChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__add_ListChanged_0__1__ListChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try add_ListChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.Data.DataView.remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open /* method final */ func remove_ListChanged(value : Optional<dotnet.System.ComponentModel.ListChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataView_void__remove_ListChanged_0__1__ListChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try remove_ListChanged(value: del_value);
    }
    /**
    Gets or sets a value that indicates whether deletes are allowed.

    */
    open var AllowDelete : Bool {
        get {
            return try! get_AllowDelete();
        }
        set(v) {
            return try! set_AllowDelete(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether edits are allowed.

    */
    open var AllowEdit : Bool {
        get {
            return try! get_AllowEdit();
        }
        set(v) {
            return try! set_AllowEdit(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the new rows can be added by using the  method.

    */
    open var AllowNew : Bool {
        get {
            return try! get_AllowNew();
        }
        set(v) {
            return try! set_AllowNew(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to use the default sort. The default sort is (ascending) by all primary keys as specified by .

    */
    open var ApplyDefaultSort : Bool {
        get {
            return try! get_ApplyDefaultSort();
        }
        set(v) {
            return try! set_ApplyDefaultSort(value: v);
        }
    }
    /**
    Gets the number of records in the  after  and  have been applied.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the  associated with this view.

    */
    open var DataViewManager : Optional<dotnet.System.Data.DataViewManager> {
        get {
            return try! get_DataViewManager();
        }
    }
    /**
    Gets a value that indicates whether the component is initialized.

    */
    public var IsInitialized : Bool {
        get {
            return try! get_IsInitialized();
        }
    }
    /**
    Gets or sets the expression used to filter which rows are viewed in the .

    */
    open var RowFilter : Optional<dotnet.System.String> {
        get {
            return try! get_RowFilter();
        }
        set(v) {
            return try! set_RowFilter(value: v!);
        }
    }
    /**
    Gets or sets the row state filter used in the .

    */
    open var RowStateFilter : dotnet.System.Data.DataViewRowState {
        get {
            return try! get_RowStateFilter();
        }
        set(v) {
            return try! set_RowStateFilter(value: v);
        }
    }
    /**
    Gets or sets the sort column or columns, and sort order for the .

    */
    open var Sort : dotnet.System.String {
        get {
            return try! get_Sort();
        }
        set(v) {
            return try! set_Sort(value: v);
        }
    }
    /**
    Gets or sets the source .

    */
    open var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
        set(v) {
            return try! set_Table(value: v!);
        }
    }
} // DataView


// type: System.Data.DataViewManager
    /**
    Contains a default  for each  in a .

    */
open class DataViewManager
    :
    dotnet.System.ComponentModel.MarshalByValueComponent,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList,
    System_ComponentModel_IBindingList,
    System_ComponentModel_ITypedList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataViewManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DataViewManager.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataViewManager_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataSet)
// docid: M:System.Data.DataViewManager.#ctor(System.Data.DataSet)
    /**
    Initializes a new instance of the  class for the specified .

    - Parameter dataSet: The name of the  to use.
    */
    public init(dataSet : Optional<dotnet.System.Data.DataSet>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DataViewManager_ctor_0__1__DataSet(&__thrown, dataSet?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Data.DataView CreateDataView(System.Data.DataTable)
// docid: M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)
    /**
    Creates a  for the specified .

    - Parameter table: The name of the  to use in the .
    - Returns: A  object.

    */
    open func CreateDataView(table : dotnet.System.Data.DataTable) throws -> dotnet.System.Data.DataView {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewManager_DataView__CreateDataView_0__1__DataTable(&__thrown, self.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataView(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataSet get_DataSet()
// docid: M:System.Data.DataViewManager.get_DataSet
    open func get_DataSet() throws -> Optional<dotnet.System.Data.DataSet> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewManager_DataSet__get_DataSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataSet(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataSet(System.Data.DataSet)
// docid: M:System.Data.DataViewManager.set_DataSet(System.Data.DataSet)
    open func set_DataSet(value : Optional<dotnet.System.Data.DataSet>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewManager_void__set_DataSet_0__1__DataSet(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataViewSettingCollectionString()
// docid: M:System.Data.DataViewManager.get_DataViewSettingCollectionString
    open func get_DataViewSettingCollectionString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewManager_String__get_DataViewSettingCollectionString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataViewSettingCollectionString(System.String)
// docid: M:System.Data.DataViewManager.set_DataViewSettingCollectionString(System.String)
    open func set_DataViewSettingCollectionString(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewManager_void__set_DataViewSettingCollectionString_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewSettingCollection get_DataViewSettings()
// docid: M:System.Data.DataViewManager.get_DataViewSettings
    open func get_DataViewSettings() throws -> dotnet.System.Data.DataViewSettingCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewManager_DataViewSettingCollection__get_DataViewSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataViewSettingCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void add_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.Data.DataViewManager.add_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open /* method final */ func add_ListChanged(value : Optional<dotnet.System.ComponentModel.ListChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewManager_void__add_ListChanged_0__1__ListChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try add_ListChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.Data.DataViewManager.remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open /* method final */ func remove_ListChanged(value : Optional<dotnet.System.ComponentModel.ListChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewManager_void__remove_ListChanged_0__1__ListChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try remove_ListChanged(value: del_value);
    }
    /**
    Gets or sets the  to use with the .

    */
    open var DataSet : Optional<dotnet.System.Data.DataSet> {
        get {
            return try! get_DataSet();
        }
        set(v) {
            return try! set_DataSet(value: v!);
        }
    }
    /**
    Gets or sets a value that is used for code persistence.

    */
    open var DataViewSettingCollectionString : dotnet.System.String {
        get {
            return try! get_DataViewSettingCollectionString();
        }
        set(v) {
            return try! set_DataViewSettingCollectionString(value: v);
        }
    }
    /**
    Gets the  for each  in the .

    */
    open var DataViewSettings : dotnet.System.Data.DataViewSettingCollection {
        get {
            return try! get_DataViewSettings();
        }
    }
} // DataViewManager


// type: System.Data.DataViewRowState
    /**
    Describes the version of data in a .

    */
public struct DataViewRowState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_DataViewRowState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.DataViewRowState None
    /**
    None.

    */
    public static var None : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_None());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState Unchanged
    /**
    An unchanged row.

    */
    public static var Unchanged : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_Unchanged());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState Added
    /**
    A new row.

    */
    public static var Added : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_Added());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState Deleted
    /**
    A deleted row.

    */
    public static var Deleted : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_Deleted());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState ModifiedCurrent
    /**
    A current version of original data that has been modified (see ).

    */
    public static var ModifiedCurrent : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_ModifiedCurrent());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState CurrentRows
    /**
    Current rows including unchanged, new, and modified rows. By default,  is set to CurrentRows.

    */
    public static var CurrentRows : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_CurrentRows());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState ModifiedOriginal
    /**
    The original version of the data that was modified. (Although the data has since been modified, it is available as ).

    */
    public static var ModifiedOriginal : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_ModifiedOriginal());
            return __return;
        }
    }
    // static field: System.Data.DataViewRowState OriginalRows
    /**
    Original rows including unchanged and deleted rows.

    */
    public static var OriginalRows : dotnet.System.Data.DataViewRowState {
        get {
        let __return = dotnet.System.Data.DataViewRowState(val: System_Data_DataViewRowState_get_OriginalRows());
            return __return;
        }
    }
} // DataViewRowState


// type: System.Data.DataViewSetting
    /**
    Represents the default settings for , , , , , and  for DataViews created from the .

    */
open class DataViewSetting
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataViewSetting_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_ApplyDefaultSort()
// docid: M:System.Data.DataViewSetting.get_ApplyDefaultSort
    open func get_ApplyDefaultSort() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSetting_bool__get_ApplyDefaultSort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ApplyDefaultSort(bool)
// docid: M:System.Data.DataViewSetting.set_ApplyDefaultSort(System.Boolean)
    open func set_ApplyDefaultSort(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSetting_void__set_ApplyDefaultSort_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewManager get_DataViewManager()
// docid: M:System.Data.DataViewSetting.get_DataViewManager
    open func get_DataViewManager() throws -> Optional<dotnet.System.Data.DataViewManager> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSetting_DataViewManager__get_DataViewManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataViewManager(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_RowFilter()
// docid: M:System.Data.DataViewSetting.get_RowFilter
    open func get_RowFilter() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSetting_String__get_RowFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RowFilter(System.String)
// docid: M:System.Data.DataViewSetting.set_RowFilter(System.String)
    open func set_RowFilter(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSetting_void__set_RowFilter_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewRowState get_RowStateFilter()
// docid: M:System.Data.DataViewSetting.get_RowStateFilter
    open func get_RowStateFilter() throws -> dotnet.System.Data.DataViewRowState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSetting_DataViewRowState__get_RowStateFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataViewRowState(val: __return);
        }
    }
    // [IsSpecialName] void set_RowStateFilter(System.Data.DataViewRowState)
// docid: M:System.Data.DataViewSetting.set_RowStateFilter(System.Data.DataViewRowState)
    open func set_RowStateFilter(value : dotnet.System.Data.DataViewRowState) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSetting_void__set_RowStateFilter_0__1__DataViewRowState(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Sort()
// docid: M:System.Data.DataViewSetting.get_Sort
    open func get_Sort() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSetting_String__get_Sort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Sort(System.String)
// docid: M:System.Data.DataViewSetting.set_Sort(System.String)
    open func set_Sort(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSetting_void__set_Sort_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.DataViewSetting.get_Table
    open func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSetting_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets or sets a value indicating whether to use the default sort.

    */
    open var ApplyDefaultSort : Bool {
        get {
            return try! get_ApplyDefaultSort();
        }
        set(v) {
            return try! set_ApplyDefaultSort(value: v);
        }
    }
    /**
    Gets the  that contains this .

    */
    open var DataViewManager : Optional<dotnet.System.Data.DataViewManager> {
        get {
            return try! get_DataViewManager();
        }
    }
    /**
    Gets or sets the filter to apply in the . See  for a code sample using RowFilter.

    */
    open var RowFilter : dotnet.System.String {
        get {
            return try! get_RowFilter();
        }
        set(v) {
            return try! set_RowFilter(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to display Current, Deleted, Modified Current, ModifiedOriginal, New, Original, Unchanged, or no rows in the .

    */
    open var RowStateFilter : dotnet.System.Data.DataViewRowState {
        get {
            return try! get_RowStateFilter();
        }
        set(v) {
            return try! set_RowStateFilter(value: v);
        }
    }
    /**
    Gets or sets a value indicating the sort to apply in the .

    */
    open var Sort : dotnet.System.String {
        get {
            return try! get_Sort();
        }
        set(v) {
            return try! set_Sort(value: v);
        }
    }
    /**
    Gets the  to which the  properties apply.

    */
    open var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
    }
} // DataViewSetting


// type: System.Data.DataViewSettingCollection
    /**
    Contains a read-only collection of  objects for each  in a .

    */
open class DataViewSettingCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DataViewSettingCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the collection objects to a one-dimensional  instance starting at the specified index.

    - Parameter ar: The one-dimensional  that is the destination of the values copied from the collection.
    - Parameter index: The index of the array at which to start inserting.
    */
    open /* method final */ func CopyTo(ar : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSettingCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), ar.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Data.DataViewSetting[], System.Int32)
// docid: M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)
    /**
    Copies the collection objects to a one-dimensional  instance starting at the specified index.

    - Parameter ar: The one-dimensional  that is the destination of the values copied from the collection.
    - Parameter index: The index of the array at which to start inserting.
    */
    open func CopyTo(ar : dotnet.System_Arr<dotnet.System.Data.DataViewSetting>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSettingCollection_void__CopyTo_0__2__DataViewSettingArray_i32(&__thrown, self.get_handle(), ar.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.DataViewSettingCollection.GetEnumerator
    /**
    Gets an  for the collection.

    - Returns: An  object.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.DataViewSettingCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Data.DataViewSettingCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Data.DataViewSettingCollection.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Data.DataViewSettingCollection.get_SyncRoot
    open /* method final */ func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataViewSetting get_Item(System.Data.DataTable)
// docid: M:System.Data.DataViewSettingCollection.get_Item(System.Data.DataTable)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(table : dotnet.System.Data.DataTable) throws -> dotnet.System.Data.DataViewSetting {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_DataViewSetting__get_Item_0__1__DataTable(&__thrown, self.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataViewSetting(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Data.DataTable, System.Data.DataViewSetting)
// docid: M:System.Data.DataViewSettingCollection.set_Item(System.Data.DataTable,System.Data.DataViewSetting)
    open func set_Item(table : dotnet.System.Data.DataTable, value : dotnet.System.Data.DataViewSetting) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSettingCollection_void__set_Item_0__2__DataTable_DataViewSetting(&__thrown, self.get_handle(), table.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewSetting get_Item(System.Int32)
// docid: M:System.Data.DataViewSettingCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Data.DataViewSetting> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_DataViewSetting__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataViewSetting(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Data.DataViewSetting)
// docid: M:System.Data.DataViewSettingCollection.set_Item(System.Int32,System.Data.DataViewSetting)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Data.DataViewSetting>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_DataViewSettingCollection_void__set_Item_0__2__i32_DataViewSetting(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataViewSetting get_Item(System.String)
// docid: M:System.Data.DataViewSettingCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(tableName : dotnet.System.String) throws -> Optional<dotnet.System.Data.DataViewSetting> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_DataViewSettingCollection_DataViewSetting__get_Item_0__1__String(&__thrown, self.get_handle(), tableName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataViewSetting(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of  objects in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value that indicates whether access to the  is synchronized (thread-safe).

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // DataViewSettingCollection


// type: System.Data.DbType
    /**
    Specifies the data type of a field, a property, or a  object of a .NET Framework data provider.

    */
public struct DbType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_DbType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.DbType AnsiString
    /**
    A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters.

    */
    public static var AnsiString : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_AnsiString());
            return __return;
        }
    }
    // static field: System.Data.DbType Binary
    /**
    A variable-length stream of binary data ranging between 1 and 8,000 bytes.

    */
    public static var Binary : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Binary());
            return __return;
        }
    }
    // static field: System.Data.DbType Byte
    /**
    An 8-bit unsigned integer ranging in value from 0 to 255.

    */
    public static var Byte : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Byte());
            return __return;
        }
    }
    // static field: System.Data.DbType Boolean
    /**
    A simple type representing Boolean values of  or .

    */
    public static var Boolean : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Boolean());
            return __return;
        }
    }
    // static field: System.Data.DbType Currency
    /**
    A currency value ranging from -2 63 (or -922,337,203,685,477.5808) to 2 63 -1 (or +922,337,203,685,477.5807) with an accuracy to a ten-thousandth of a currency unit.

    */
    public static var Currency : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Currency());
            return __return;
        }
    }
    // static field: System.Data.DbType Date
    /**
    A type representing a date value.

    */
    public static var Date : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Date());
            return __return;
        }
    }
    // static field: System.Data.DbType DateTime
    /**
    A type representing a date and time value.

    */
    public static var DateTime : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_DateTime());
            return __return;
        }
    }
    // static field: System.Data.DbType Decimal
    /**
    A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.

    */
    public static var Decimal : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Decimal());
            return __return;
        }
    }
    // static field: System.Data.DbType Double
    /**
    A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.

    */
    public static var Double : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Double());
            return __return;
        }
    }
    // static field: System.Data.DbType Guid
    /**
    A globally unique identifier (or GUID).

    */
    public static var Guid : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Guid());
            return __return;
        }
    }
    // static field: System.Data.DbType Int16
    /**
    An integral type representing signed 16-bit integers with values between -32768 and 32767.

    */
    public static var Int16 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Int16());
            return __return;
        }
    }
    // static field: System.Data.DbType Int32
    /**
    An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.

    */
    public static var Int32 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Int32());
            return __return;
        }
    }
    // static field: System.Data.DbType Int64
    /**
    An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.

    */
    public static var Int64 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Int64());
            return __return;
        }
    }
    // static field: System.Data.DbType Object
    /**
    A general type representing any reference or value type not explicitly represented by another  value.

    */
    public static var Object : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Object());
            return __return;
        }
    }
    // static field: System.Data.DbType SByte
    /**
    An integral type representing signed 8-bit integers with values between -128 and 127.

    */
    public static var SByte : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_SByte());
            return __return;
        }
    }
    // static field: System.Data.DbType Single
    /**
    A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.

    */
    public static var Single : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Single());
            return __return;
        }
    }
    // static field: System.Data.DbType String
    /**
    A type representing Unicode character strings.

    */
    public static var String : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_String());
            return __return;
        }
    }
    // static field: System.Data.DbType Time
    /**
    A type representing a SQL Server  value. If you want to use a SQL Server  value, use .

    */
    public static var Time : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Time());
            return __return;
        }
    }
    // static field: System.Data.DbType UInt16
    /**
    An integral type representing unsigned 16-bit integers with values between 0 and 65535.

    */
    public static var UInt16 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_UInt16());
            return __return;
        }
    }
    // static field: System.Data.DbType UInt32
    /**
    An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.

    */
    public static var UInt32 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_UInt32());
            return __return;
        }
    }
    // static field: System.Data.DbType UInt64
    /**
    An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.

    */
    public static var UInt64 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_UInt64());
            return __return;
        }
    }
    // static field: System.Data.DbType VarNumeric
    /**
    A variable-length numeric value.

    */
    public static var VarNumeric : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_VarNumeric());
            return __return;
        }
    }
    // static field: System.Data.DbType AnsiStringFixedLength
    /**
    A fixed-length stream of non-Unicode characters.

    */
    public static var AnsiStringFixedLength : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_AnsiStringFixedLength());
            return __return;
        }
    }
    // static field: System.Data.DbType StringFixedLength
    /**
    A fixed-length string of Unicode characters.

    */
    public static var StringFixedLength : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_StringFixedLength());
            return __return;
        }
    }
    // static field: System.Data.DbType Xml
    /**
    A parsed representation of an XML document or fragment.

    */
    public static var Xml : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_Xml());
            return __return;
        }
    }
    // static field: System.Data.DbType DateTime2
    /**
    Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.

    */
    public static var DateTime2 : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_DateTime2());
            return __return;
        }
    }
    // static field: System.Data.DbType DateTimeOffset
    /**
    Date and time data with time zone awareness. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through +14:00.

    */
    public static var DateTimeOffset : dotnet.System.Data.DbType {
        get {
        let __return = dotnet.System.Data.DbType(val: System_Data_DbType_get_DateTimeOffset());
            return __return;
        }
    }
} // DbType


// type: System.Data.DeletedRowInaccessibleException
    /**
    Represents the exception that is thrown when an action is tried on a  that has been deleted.

    */
open class DeletedRowInaccessibleException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DeletedRowInaccessibleException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DeletedRowInaccessibleException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DeletedRowInaccessibleException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DeletedRowInaccessibleException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DeletedRowInaccessibleException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DeletedRowInaccessibleException


// type: System.Data.DuplicateNameException
    /**
    Represents the exception that is thrown when a duplicate database object name is encountered during an add operation in a  -related object.

    */
open class DuplicateNameException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_DuplicateNameException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.DuplicateNameException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DuplicateNameException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.DuplicateNameException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DuplicateNameException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified string and exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_DuplicateNameException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DuplicateNameException


// type: System.Data.EnumerableRowCollection
    /**
    Represents a collection of  objects returned from a LINQ to DataSet query. This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
open class EnumerableRowCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_EnumerableRowCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // EnumerableRowCollection


// type: System.Data.EnumerableRowCollectionExtensions
public struct EnumerableRowCollectionExtensions {
// TODO COPE (write_all_methods) (unused generic param) System.Data.EnumerableRowCollection<TResult> Cast<TResult>(System.Data.EnumerableRowCollection)
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})
    /**
    Sorts the rows of a  in descending order according to the specified key.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted by the specified key.

    */
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderByDescending_2__2__System_Data_EnumerableRowCollection_UTRow__System_Func_UTRow_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the rows of a  in descending order according to the specified key and comparer.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted by the specified key and comparer.

    */
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderByDescending_2__3__System_Data_EnumerableRowCollection_UTRow__System_Func_UTRow_UTKey__System_Collections_Generic_IComparer_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})
    /**
    Sorts the rows of a  in ascending order according to the specified key.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted by the specified key.

    */
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderBy_2__2__System_Data_EnumerableRowCollection_UTRow__System_Func_UTRow_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the rows of a  in ascending order according to the specified key and comparer.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted by the specified key and comparer.

    */
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderBy_2__3__System_Data_EnumerableRowCollection_UTRow__System_Func_UTRow_UTKey__System_Collections_Generic_IComparer_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Data.EnumerableRowCollection<S> Select<TRow, S>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,S>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})
    /**
    Projects each element of an  into a new form.

    - Parameter source: An  containing the  elements to invoke a transform function upon.
    - Parameter selector: A transform function to apply to each element.
    - Returns: An  whose elements are the result of invoking the transform function on each element of .

    */
    public static func Select<UTRow : SGBridgeGenericValue,US : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, selector : dotnet.System.Func_2<UTRow,US>) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_EnumerableRowCollection_US___Select_2__2__System_Data_EnumerableRowCollection_UTRow__System_Func_UTRow_US_(UTRow.get_type_handle(), US.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.EnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UTRow : SGBridgeGenericValue,US : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, selector : @escaping (UTRow) throws -> US) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        let del_selector = try dotnet.System.Func_2<UTRow,US>(selector);
        return try Select(source: source, selector: del_selector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> ThenByDescending<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})
    /**
    Performs a secondary ordering of the rows of a  in descending order according to the specified key.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted by the specified key.

    */
    public static func ThenByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___ThenByDescending_2__2__System_Data_OrderedEnumerableRowCollection_UTRow__System_Func_UTRow_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try ThenByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> ThenByDescending<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Performs a secondary ordering of the rows of a  in descending order according to the specified key and comparer.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted by the specified key and comparer.

    */
    public static func ThenByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___ThenByDescending_2__3__System_Data_OrderedEnumerableRowCollection_UTRow__System_Func_UTRow_UTKey__System_Collections_Generic_IComparer_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try ThenByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> ThenBy<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})
    /**
    Performs a secondary ordering of the rows of a  in ascending order according to the specified key.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted by the specified key.

    */
    public static func ThenBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___ThenBy_2__2__System_Data_OrderedEnumerableRowCollection_UTRow__System_Func_UTRow_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try ThenBy(source: source, keySelector: del_keySelector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> ThenBy<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Performs a secondary ordering of the rows of a  in ascending order according to the specified key and comparer.

    - Parameter source: An  containing the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted by the specified key and comparer.

    */
    public static func ThenBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___ThenBy_2__3__System_Data_OrderedEnumerableRowCollection_UTRow__System_Func_UTRow_UTKey__System_Collections_Generic_IComparer_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try ThenBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Data.EnumerableRowCollection<TRow> Where<TRow>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,bool>)
// docid: M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})
    /**
    Filters a sequence of rows based on the specified predicate.

    - Parameter source: An  containing the  elements to filter.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains rows from the input sequence that satisfy the condition.

    */
    public static func Where<UTRow : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, predicate : dotnet.System.Func_2<UTRow,Bool>) throws -> dotnet.System.Data.EnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollectionExtensions_System_Data_EnumerableRowCollection_UTRow___Where_1__2__System_Data_EnumerableRowCollection_UTRow__System_Func_UTRow_bool_(UTRow.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.EnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UTRow : SGBridgeGenericValue>(source : dotnet.System.Data.EnumerableRowCollection_1<UTRow>, predicate : @escaping (UTRow) throws -> Bool) throws -> dotnet.System.Data.EnumerableRowCollection_1<UTRow> {
        let del_predicate = try dotnet.System.Func_2<UTRow,Swift.Bool>(predicate);
        return try Where(source: source, predicate: del_predicate);
    }
} // EnumerableRowCollectionExtensions


// type: System.Data.EnumerableRowCollection`1
    /**
    Represents a collection of  objects returned from a query.

    */
open class EnumerableRowCollection_1<TRow : SGBridgeGenericValue>
    :
    dotnet.System.Data.EnumerableRowCollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_EnumerableRowCollection_1_get_type_handle(TRow.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerator<TRow> GetEnumerator()
// docid: M:System.Data.EnumerableRowCollection`1.GetEnumerator
    /**
    Returns an enumerator for the collection of contained row objects.

    - Returns: A strongly-typed  that can be used to traverse the collection of  objects.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<TRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_EnumerableRowCollection_1_System_Collections_Generic_IEnumerator_TRow___GetEnumerator_0__0(TRow.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // EnumerableRowCollection_1


// type: System.Data.EvaluateException
    /**
    Represents the exception that is thrown when the  property of a  cannot be evaluated.

    */
open class EvaluateException
    :
    dotnet.System.Data.InvalidExpressionException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_EvaluateException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.EvaluateException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_EvaluateException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.EvaluateException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_EvaluateException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.EvaluateException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_EvaluateException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EvaluateException


// type: System.Data.FillErrorEventArgs
    /**
    Provides data for the  event of a .

    */
open class FillErrorEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_FillErrorEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataTable, System.Object[])
// docid: M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])
    /**
    Initializes a new instance of the  class.

    - Parameter dataTable: The  being updated.
    - Parameter values: The values for the row being updated.
    */
    public init(dataTable : Optional<dotnet.System.Data.DataTable>, values : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_FillErrorEventArgs_ctor_0__2__DataTable_ObjectArray(&__thrown, dataTable?.get_handle() ?? nil, (values?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Continue()
// docid: M:System.Data.FillErrorEventArgs.get_Continue
    open func get_Continue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_FillErrorEventArgs_bool__get_Continue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Continue(bool)
// docid: M:System.Data.FillErrorEventArgs.set_Continue(System.Boolean)
    open func set_Continue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_FillErrorEventArgs_void__set_Continue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataTable get_DataTable()
// docid: M:System.Data.FillErrorEventArgs.get_DataTable
    open func get_DataTable() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_FillErrorEventArgs_DataTable__get_DataTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Exception get_Errors()
// docid: M:System.Data.FillErrorEventArgs.get_Errors
    open func get_Errors() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_FillErrorEventArgs_Exception__get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Errors(System.Exception)
// docid: M:System.Data.FillErrorEventArgs.set_Errors(System.Exception)
    open func set_Errors(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_FillErrorEventArgs_void__set_Errors_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object[] get_Values()
// docid: M:System.Data.FillErrorEventArgs.get_Values
    open func get_Values() throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_FillErrorEventArgs_ObjectArray__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    /**
    Gets or sets a value indicating whether to continue the fill operation despite the error.

    */
    open var Continue : Bool {
        get {
            return try! get_Continue();
        }
        set(v) {
            return try! set_Continue(value: v);
        }
    }
    /**
    Gets the  being updated when the error occurred.

    */
    open var DataTable : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_DataTable();
        }
    }
    /**
    Gets the errors being handled.

    */
    open var Errors : Optional<dotnet.System.Exception> {
        get {
            return try! get_Errors();
        }
        set(v) {
            return try! set_Errors(value: v!);
        }
    }
    /**
    Gets the values for the row being updated when the error occurred.

    */
    open var Values : dotnet.System_Arr<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
    }
} // FillErrorEventArgs


// type: System.Data.FillErrorEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class FillErrorEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_FillErrorEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.FillErrorEventArgs)
// docid: M:System.Data.FillErrorEventHandler.Invoke(System.Object,System.Data.FillErrorEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.FillErrorEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_FillErrorEventHandler_void__Invoke_0__2__Object_FillErrorEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.FillErrorEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.FillErrorEventHandler.BeginInvoke(System.Object,System.Data.FillErrorEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.FillErrorEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_FillErrorEventHandler_IAsyncResult__BeginInvoke_0__4__Object_FillErrorEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.FillErrorEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_FillErrorEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.FillErrorEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_FillErrorEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.FillErrorEventArgs)
// docid: M:System.Data.FillErrorEventHandler.Invoke(System.Object,System.Data.FillErrorEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.FillErrorEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_FillErrorEventHandler_void__Invoke_0__2__Object_FillErrorEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // FillErrorEventHandler


// type: System.Data.ForeignKeyConstraint
    /**
    Represents an action restriction enforced on a set of columns in a primary key/foreign key relationship when a value or row is either deleted or updated.

    */
open class ForeignKeyConstraint
    :
    dotnet.System.Data.Constraint
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_ForeignKeyConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataColumn, System.Data.DataColumn)
// docid: M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)
    /**
    Initializes a new instance of the  class with the specified parent and child  objects.

    - Parameter parentColumn: The parent  in the constraint.
    - Parameter childColumn: The child  in the constraint.
    */
    public init(parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ForeignKeyConstraint_ctor_0__2__DataColumn_DataColumn(&__thrown, parentColumn.get_handle(), childColumn.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataColumn[], System.Data.DataColumn[])
// docid: M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])
    /**
    Initializes a new instance of the  class with the specified arrays of parent and child  objects.

    - Parameter parentColumns: An array of parent  in the constraint.
    - Parameter childColumns: An array of child  in the constraint.
    */
    public init(parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ForeignKeyConstraint_ctor_0__2__DataColumnArray_DataColumnArray(&__thrown, parentColumns.get_handle(), childColumns.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn, System.Data.DataColumn)
// docid: M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
    /**
    Initializes a new instance of the  class with the specified name, parent and child  objects.

    - Parameter constraintName: The name of the constraint.
    - Parameter parentColumn: The parent  in the constraint.
    - Parameter childColumn: The child  in the constraint.
    */
    public init(constraintName : Optional<dotnet.System.String>, parentColumn : dotnet.System.Data.DataColumn, childColumn : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ForeignKeyConstraint_ctor_0__3__String_DataColumn_DataColumn(&__thrown, constraintName?.get_handle() ?? nil, parentColumn.get_handle(), childColumn.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn[], System.Data.DataColumn[])
// docid: M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
    /**
    Initializes a new instance of the  class with the specified name, and arrays of parent and child  objects.

    - Parameter constraintName: The name of the . If  or empty string, a default name will be given when added to the constraints collection.
    - Parameter parentColumns: An array of parent  in the constraint.
    - Parameter childColumns: An array of child  in the constraint.
    */
    public init(constraintName : Optional<dotnet.System.String>, parentColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, childColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ForeignKeyConstraint_ctor_0__3__String_DataColumnArray_DataColumnArray(&__thrown, constraintName?.get_handle() ?? nil, parentColumns.get_handle(), childColumns.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String[], System.String[], System.Data.AcceptRejectRule, System.Data.Rule, System.Data.Rule)
// docid: M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)
    /**
    This constructor is provided for design time support in the Visual Studio  environment.  objects created by using this constructor must then be added to the collection via . Tables and columns with the specified names must exist at the time the method is called, or if  has been called prior to calling this constructor, the tables and columns with the specified names must exist at the time that  is called.

    - Parameter constraintName: The name of the constraint.
    - Parameter parentTableName: The name of the parent  that contains parent  objects in the constraint.
    - Parameter parentTableNamespace: The name of the .
    - Parameter parentColumnNames: An array of the names of parent  objects in the constraint.
    - Parameter childColumnNames: An array of the names of child  objects in the constraint.
    - Parameter acceptRejectRule: One of the  values. Possible values include , , and .
    - Parameter deleteRule: One of the  values to use when a row is deleted. The default is . Possible values include: , , , , and .
    - Parameter updateRule: One of the  values to use when a row is updated. The default is . Possible values include: , , , , and .
    */
    public init(constraintName : Optional<dotnet.System.String>, parentTableName : Optional<dotnet.System.String>, parentTableNamespace : Optional<dotnet.System.String>, parentColumnNames : dotnet.System_Arr<dotnet.System.String>, childColumnNames : dotnet.System_Arr<dotnet.System.String>, acceptRejectRule : dotnet.System.Data.AcceptRejectRule, deleteRule : dotnet.System.Data.Rule, updateRule : dotnet.System.Data.Rule) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ForeignKeyConstraint_ctor_0__8__String_String_String_StringArray_StringArray_AcceptRejectRule_Rule_Rule(&__thrown, constraintName?.get_handle() ?? nil, parentTableName?.get_handle() ?? nil, parentTableNamespace?.get_handle() ?? nil, parentColumnNames.get_handle(), childColumnNames.get_handle(), acceptRejectRule.get_value(), deleteRule.get_value(), updateRule.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String[], System.String[], System.Data.AcceptRejectRule, System.Data.Rule, System.Data.Rule)
// docid: M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)
    /**
    This constructor is provided for design time support in the Visual Studio  environment.  objects created by using this constructor must then be added to the collection via . Tables and columns with the specified names must exist at the time the method is called, or if  has been called prior to calling this constructor, the tables and columns with the specified names must exist at the time that  is called.

    - Parameter constraintName: The name of the constraint.
    - Parameter parentTableName: The name of the parent  that contains parent  objects in the constraint.
    - Parameter parentColumnNames: An array of the names of parent  objects in the constraint.
    - Parameter childColumnNames: An array of the names of child  objects in the constraint.
    - Parameter acceptRejectRule: One of the  values. Possible values include , , and .
    - Parameter deleteRule: One of the  values to use when a row is deleted. The default is . Possible values include: , , , , and .
    - Parameter updateRule: One of the  values to use when a row is updated. The default is . Possible values include: , , , , and .
    */
    public init(constraintName : Optional<dotnet.System.String>, parentTableName : Optional<dotnet.System.String>, parentColumnNames : dotnet.System_Arr<dotnet.System.String>, childColumnNames : dotnet.System_Arr<dotnet.System.String>, acceptRejectRule : dotnet.System.Data.AcceptRejectRule, deleteRule : dotnet.System.Data.Rule, updateRule : dotnet.System.Data.Rule) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ForeignKeyConstraint_ctor_0__7__String_String_StringArray_StringArray_AcceptRejectRule_Rule_Rule(&__thrown, constraintName?.get_handle() ?? nil, parentTableName?.get_handle() ?? nil, parentColumnNames.get_handle(), childColumnNames.get_handle(), acceptRejectRule.get_value(), deleteRule.get_value(), updateRule.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.ForeignKeyConstraint.Equals(System.Object)
    /**
    Gets a value indicating whether the current  is identical to the specified object.

    - Parameter key: The object to which this  is compared. Two  are equal if they constrain the same columns.
    - Returns: 
        , if the objects are identical; otherwise, .

    */
    open func Equals(key : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_bool__Equals_0__1__Object(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.ForeignKeyConstraint.GetHashCode
    /**
    Gets the hash code of this instance of the  object.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.AcceptRejectRule get_AcceptRejectRule()
// docid: M:System.Data.ForeignKeyConstraint.get_AcceptRejectRule
    open func get_AcceptRejectRule() throws -> dotnet.System.Data.AcceptRejectRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_AcceptRejectRule__get_AcceptRejectRule_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.AcceptRejectRule(val: __return);
        }
    }
    // [IsSpecialName] void set_AcceptRejectRule(System.Data.AcceptRejectRule)
// docid: M:System.Data.ForeignKeyConstraint.set_AcceptRejectRule(System.Data.AcceptRejectRule)
    open func set_AcceptRejectRule(value : dotnet.System.Data.AcceptRejectRule) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ForeignKeyConstraint_void__set_AcceptRejectRule_0__1__AcceptRejectRule(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataColumn[] get_Columns()
// docid: M:System.Data.ForeignKeyConstraint.get_Columns
    open func get_Columns() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_DataColumnArray__get_Columns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Rule get_DeleteRule()
// docid: M:System.Data.ForeignKeyConstraint.get_DeleteRule
    open func get_DeleteRule() throws -> dotnet.System.Data.Rule {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_Rule__get_DeleteRule_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Rule(val: __return);
        }
    }
    // [IsSpecialName] void set_DeleteRule(System.Data.Rule)
// docid: M:System.Data.ForeignKeyConstraint.set_DeleteRule(System.Data.Rule)
    open func set_DeleteRule(value : dotnet.System.Data.Rule) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ForeignKeyConstraint_void__set_DeleteRule_0__1__Rule(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataColumn[] get_RelatedColumns()
// docid: M:System.Data.ForeignKeyConstraint.get_RelatedColumns
    open func get_RelatedColumns() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_DataColumnArray__get_RelatedColumns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_RelatedTable()
// docid: M:System.Data.ForeignKeyConstraint.get_RelatedTable
    open func get_RelatedTable() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_DataTable__get_RelatedTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.ForeignKeyConstraint.get_Table
    open override func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.Rule get_UpdateRule()
// docid: M:System.Data.ForeignKeyConstraint.get_UpdateRule
    open func get_UpdateRule() throws -> dotnet.System.Data.Rule {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ForeignKeyConstraint_Rule__get_UpdateRule_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Rule(val: __return);
        }
    }
    // [IsSpecialName] void set_UpdateRule(System.Data.Rule)
// docid: M:System.Data.ForeignKeyConstraint.set_UpdateRule(System.Data.Rule)
    open func set_UpdateRule(value : dotnet.System.Data.Rule) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ForeignKeyConstraint_void__set_UpdateRule_0__1__Rule(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Indicates the action that should take place across this constraint when  is invoked.

    */
    open var AcceptRejectRule : dotnet.System.Data.AcceptRejectRule {
        get {
            return try! get_AcceptRejectRule();
        }
        set(v) {
            return try! set_AcceptRejectRule(value: v);
        }
    }
    /**
    Gets the child columns of this constraint.

    */
    open var Columns : dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        get {
            return try! get_Columns();
        }
    }
    /**
    Gets or sets the action that occurs across this constraint when a row is deleted.

    */
    open var DeleteRule : dotnet.System.Data.Rule {
        get {
            return try! get_DeleteRule();
        }
        set(v) {
            return try! set_DeleteRule(value: v);
        }
    }
    /**
    The parent columns of this constraint.

    */
    open var RelatedColumns : dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        get {
            return try! get_RelatedColumns();
        }
    }
    /**
    Gets the parent table of this constraint.

    */
    open var RelatedTable : dotnet.System.Data.DataTable {
        get {
            return try! get_RelatedTable();
        }
    }
    /**
    Gets the child table of this constraint.

    */
    open override var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
    }
    /**
    Gets or sets the action that occurs across this constraint on when a row is updated.

    */
    open var UpdateRule : dotnet.System.Data.Rule {
        get {
            return try! get_UpdateRule();
        }
        set(v) {
            return try! set_UpdateRule(value: v);
        }
    }
} // ForeignKeyConstraint


// type: System.Data.IColumnMapping
    /**
    Associates a data source column with a  column, and is implemented by the  class, which is used in common by .NET Framework data providers.

    */
open class IColumnMapping
    :
    SGBridgeGenericValue,
    System_Data_IColumnMapping
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IColumnMapping_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_DataSetColumn()
// docid: M:System.Data.IColumnMapping.get_DataSetColumn
    open func get_DataSetColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMapping_String__get_DataSetColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataSetColumn(System.String)
// docid: M:System.Data.IColumnMapping.set_DataSetColumn(System.String)
    open func set_DataSetColumn(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IColumnMapping_void__set_DataSetColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceColumn()
// docid: M:System.Data.IColumnMapping.get_SourceColumn
    open func get_SourceColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMapping_String__get_SourceColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SourceColumn(System.String)
// docid: M:System.Data.IColumnMapping.set_SourceColumn(System.String)
    open func set_SourceColumn(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IColumnMapping_void__set_SourceColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IColumnMapping


// type: System.Data.IColumnMappingCollection
    /**
    Contains a collection of DataColumnMapping objects, and is implemented by the , which is used in common by .NET Framework data providers.

    */
open class IColumnMappingCollection
    :
    SGBridgeGenericValue,
    System_Data_IColumnMappingCollection,
    System_Collections_IList
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IColumnMappingCollection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Data.IColumnMapping Add(System.String, System.String)
// docid: M:System.Data.IColumnMappingCollection.Add(System.String,System.String)
    /**
    Adds a ColumnMapping object to the ColumnMapping collection using the source column and  column names.

    - Parameter sourceColumnName: The case-sensitive name of the source column.
    - Parameter dataSetColumnName: The name of the  column.
    - Returns: The ColumnMapping object that was added to the collection.

    */
    open func Add(sourceColumnName : dotnet.System.String, dataSetColumnName : dotnet.System.String) throws -> dotnet.System.Data.IColumnMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMappingCollection_IColumnMapping__Add_0__2__String_String(&__thrown, self.get_handle(), sourceColumnName.get_handle(), dataSetColumnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IColumnMapping(hndl : __return);
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.IColumnMappingCollection.Contains(System.String)
    /**
    Gets a value indicating whether the  contains a  object with the specified source column name.

    - Parameter sourceColumnName: The case-sensitive name of the source column.
    - Returns: 
         if a  object with the specified source column name exists, otherwise .

    */
    open func Contains(sourceColumnName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMappingCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), sourceColumnName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Data.IColumnMapping GetByDataSetColumn(System.String)
// docid: M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)
    /**
    Gets the ColumnMapping object with the specified  column name.

    - Parameter dataSetColumnName: The name of the  column within the collection.
    - Returns: The ColumnMapping object with the specified  column name.

    */
    open func GetByDataSetColumn(dataSetColumnName : dotnet.System.String) throws -> dotnet.System.Data.IColumnMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMappingCollection_IColumnMapping__GetByDataSetColumn_0__1__String(&__thrown, self.get_handle(), dataSetColumnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IColumnMapping(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.IColumnMappingCollection.IndexOf(System.String)
    /**
    Gets the location of the  object with the specified source column name. The name is case-sensitive.

    - Parameter sourceColumnName: The case-sensitive name of the source column.
    - Returns: The zero-based location of the  object with the specified source column name.

    */
    open func IndexOf(sourceColumnName : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMappingCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), sourceColumnName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void RemoveAt(System.String)
// docid: M:System.Data.IColumnMappingCollection.RemoveAt(System.String)
    /**
    Removes the  object with the specified  name from the collection.

    - Parameter sourceColumnName: The case-sensitive  name.
    */
    open func RemoveAt(sourceColumnName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IColumnMappingCollection_void__RemoveAt_0__1__String(&__thrown, self.get_handle(), sourceColumnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.IColumnMappingCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IColumnMappingCollection_Object__get_Item_0__1__String(&__thrown, self.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Data.IColumnMappingCollection.set_Item(System.String,System.Object)
    open func set_Item(index : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IColumnMappingCollection_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), index.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IColumnMappingCollection


// type: System.Data.IDataAdapter
    /**
    Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a  and update a data source.  
  
  instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while  instances could can use any type of data source.

    */
open class IDataAdapter
    :
    SGBridgeGenericValue,
    System_Data_IDataAdapter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDataAdapter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Int32 Fill(System.Data.DataSet)
// docid: M:System.Data.IDataAdapter.Fill(System.Data.DataSet)
    /**
    Adds or updates rows in the  to match those in the data source using the  name, and creates a  named "Table".

    - Parameter dataSet: A  to fill with records and, if necessary, schema.
    - Returns: The number of rows successfully added to or refreshed in the . This does not include rows affected by statements that do not return rows.

    */
    open func Fill(dataSet : dotnet.System.Data.DataSet) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_i32__Fill_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.DataTable[] FillSchema(System.Data.DataSet, System.Data.SchemaType)
// docid: M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
    /**
    Adds a  named "Table" to the specified  and configures the schema to match that in the data source based on the specified .

    - Parameter dataSet: The  to be filled with the schema from the data source.
    - Parameter schemaType: One of the  values.
    - Returns: An array of  objects that contain schema information returned from the data source.

    */
    open func FillSchema(dataSet : dotnet.System.Data.DataSet, schemaType : dotnet.System.Data.SchemaType) throws -> dotnet.System_Arr<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_DataTableArray__FillSchema_0__2__DataSet_SchemaType(&__thrown, self.get_handle(), dataSet.get_handle(), schemaType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataTable>(hndl : __return);
        }
    }
    // System.Data.IDataParameter[] GetFillParameters()
// docid: M:System.Data.IDataAdapter.GetFillParameters
    /**
    Gets the parameters set by the user when executing an SQL SELECT statement.

    - Returns: An array of  objects that contains the parameters set by the user.

    */
    open func GetFillParameters() throws -> dotnet.System_Arr<dotnet.System.Data.IDataParameter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_IDataParameterArray__GetFillParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.IDataParameter>(hndl : __return);
        }
    }
    // System.Int32 Update(System.Data.DataSet)
// docid: M:System.Data.IDataAdapter.Update(System.Data.DataSet)
    /**
    Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified  from a  named "Table".

    - Parameter dataSet: The  used to update the data source.
    - Returns: The number of rows successfully updated from the .

    */
    open func Update(dataSet : dotnet.System.Data.DataSet) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_i32__Update_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.MissingMappingAction get_MissingMappingAction()
// docid: M:System.Data.IDataAdapter.get_MissingMappingAction
    open func get_MissingMappingAction() throws -> dotnet.System.Data.MissingMappingAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_MissingMappingAction__get_MissingMappingAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.MissingMappingAction(val: __return);
        }
    }
    // [IsSpecialName] void set_MissingMappingAction(System.Data.MissingMappingAction)
// docid: M:System.Data.IDataAdapter.set_MissingMappingAction(System.Data.MissingMappingAction)
    open func set_MissingMappingAction(value : dotnet.System.Data.MissingMappingAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataAdapter_void__set_MissingMappingAction_0__1__MissingMappingAction(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.MissingSchemaAction get_MissingSchemaAction()
// docid: M:System.Data.IDataAdapter.get_MissingSchemaAction
    open func get_MissingSchemaAction() throws -> dotnet.System.Data.MissingSchemaAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_MissingSchemaAction__get_MissingSchemaAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.MissingSchemaAction(val: __return);
        }
    }
    // [IsSpecialName] void set_MissingSchemaAction(System.Data.MissingSchemaAction)
// docid: M:System.Data.IDataAdapter.set_MissingSchemaAction(System.Data.MissingSchemaAction)
    open func set_MissingSchemaAction(value : dotnet.System.Data.MissingSchemaAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataAdapter_void__set_MissingSchemaAction_0__1__MissingSchemaAction(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.ITableMappingCollection get_TableMappings()
// docid: M:System.Data.IDataAdapter.get_TableMappings
    open func get_TableMappings() throws -> dotnet.System.Data.ITableMappingCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataAdapter_ITableMappingCollection__get_TableMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ITableMappingCollection(hndl : __return);
        }
    }
} // IDataAdapter


// type: System.Data.IDataParameter
    /**
    Represents a parameter to a Command object, and optionally, its mapping to  columns; and is implemented by .NET Framework data providers that access data sources.

    */
open class IDataParameter
    :
    SGBridgeGenericValue,
    System_Data_IDataParameter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDataParameter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Data.DbType get_DbType()
// docid: M:System.Data.IDataParameter.get_DbType
    open func get_DbType() throws -> dotnet.System.Data.DbType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_DbType__get_DbType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DbType(val: __return);
        }
    }
    // [IsSpecialName] void set_DbType(System.Data.DbType)
// docid: M:System.Data.IDataParameter.set_DbType(System.Data.DbType)
    open func set_DbType(value : dotnet.System.Data.DbType) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameter_void__set_DbType_0__1__DbType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.ParameterDirection get_Direction()
// docid: M:System.Data.IDataParameter.get_Direction
    open func get_Direction() throws -> dotnet.System.Data.ParameterDirection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_ParameterDirection__get_Direction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ParameterDirection(val: __return);
        }
    }
    // [IsSpecialName] void set_Direction(System.Data.ParameterDirection)
// docid: M:System.Data.IDataParameter.set_Direction(System.Data.ParameterDirection)
    open func set_Direction(value : dotnet.System.Data.ParameterDirection) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameter_void__set_Direction_0__1__ParameterDirection(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Data.IDataParameter.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_ParameterName()
// docid: M:System.Data.IDataParameter.get_ParameterName
    open func get_ParameterName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_String__get_ParameterName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterName(System.String)
// docid: M:System.Data.IDataParameter.set_ParameterName(System.String)
    open func set_ParameterName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameter_void__set_ParameterName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceColumn()
// docid: M:System.Data.IDataParameter.get_SourceColumn
    open func get_SourceColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_String__get_SourceColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SourceColumn(System.String)
// docid: M:System.Data.IDataParameter.set_SourceColumn(System.String)
    open func set_SourceColumn(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameter_void__set_SourceColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRowVersion get_SourceVersion()
// docid: M:System.Data.IDataParameter.get_SourceVersion
    open func get_SourceVersion() throws -> dotnet.System.Data.DataRowVersion {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_DataRowVersion__get_SourceVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowVersion(val: __return);
        }
    }
    // [IsSpecialName] void set_SourceVersion(System.Data.DataRowVersion)
// docid: M:System.Data.IDataParameter.set_SourceVersion(System.Data.DataRowVersion)
    open func set_SourceVersion(value : dotnet.System.Data.DataRowVersion) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameter_void__set_SourceVersion_0__1__DataRowVersion(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Data.IDataParameter.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameter_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:System.Data.IDataParameter.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameter_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDataParameter


// type: System.Data.IDataParameterCollection
    /**
    Collects all parameters relevant to a Command object and their mappings to  columns, and is implemented by .NET Framework data providers that access data sources.

    */
open class IDataParameterCollection
    :
    SGBridgeGenericValue,
    System_Data_IDataParameterCollection,
    System_Collections_IList
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDataParameterCollection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool Contains(System.String)
// docid: M:System.Data.IDataParameterCollection.Contains(System.String)
    /**
    Gets a value indicating whether a parameter in the collection has the specified name.

    - Parameter parameterName: The name of the parameter.
    - Returns: 
         if the collection contains the parameter; otherwise, .

    */
    open func Contains(parameterName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameterCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.IDataParameterCollection.IndexOf(System.String)
    /**
    Gets the location of the  within the collection.

    - Parameter parameterName: The name of the parameter.
    - Returns: The zero-based location of the  within the collection.

    */
    open func IndexOf(parameterName : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameterCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void RemoveAt(System.String)
// docid: M:System.Data.IDataParameterCollection.RemoveAt(System.String)
    /**
    Removes the  from the collection.

    - Parameter parameterName: The name of the parameter.
    */
    open func RemoveAt(parameterName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameterCollection_void__RemoveAt_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.IDataParameterCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(parameterName : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataParameterCollection_Object__get_Item_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Data.IDataParameterCollection.set_Item(System.String,System.Object)
    open func set_Item(parameterName : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataParameterCollection_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), parameterName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDataParameterCollection


// type: System.Data.IDataReader
    /**
    Provides a means of reading one or more forward-only streams of result sets obtained by executing a command at a data source, and is implemented by .NET Framework data providers that access relational databases.

    */
open class IDataReader
    :
    SGBridgeGenericValue,
    System_Data_IDataReader,
    System_Data_IDataRecord,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDataReader_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Close()
// docid: M:System.Data.IDataReader.Close
    /**
    Closes the  Object.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDataReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataTable GetSchemaTable()
// docid: M:System.Data.IDataReader.GetSchemaTable
    /**
    Returns a  that describes the column metadata of the .

    - Returns: A  that describes the column metadata.

    */
    open func GetSchemaTable() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataReader_DataTable__GetSchemaTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool NextResult()
// docid: M:System.Data.IDataReader.NextResult
    /**
    Advances the data reader to the next result, when reading the results of batch SQL statements.

    - Returns: 
         if there are more rows; otherwise, .

    */
    open func NextResult() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataReader_bool__NextResult_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Read()
// docid: M:System.Data.IDataReader.Read
    /**
    Advances the  to the next record.

    - Returns: 
         if there are more rows; otherwise, .

    */
    open func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Data.IDataReader.get_Depth
    open func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsClosed()
// docid: M:System.Data.IDataReader.get_IsClosed
    open func get_IsClosed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataReader_bool__get_IsClosed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_RecordsAffected()
// docid: M:System.Data.IDataReader.get_RecordsAffected
    open func get_RecordsAffected() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataReader_i32__get_RecordsAffected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IDataReader


// type: System.Data.IDataRecord
    /**
    Provides access to the column values within each row for a , and is implemented by .NET Framework data providers that access relational databases.

    */
open class IDataRecord
    :
    SGBridgeGenericValue,
    System_Data_IDataRecord
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDataRecord_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool GetBoolean(System.Int32)
// docid: M:System.Data.IDataRecord.GetBoolean(System.Int32)
    /**
    Gets the value of the specified column as a Boolean.

    - Parameter i: The zero-based column ordinal.
    - Returns: The value of the column.

    */
    open func GetBoolean(i : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_bool__GetBoolean_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte GetByte(System.Int32)
// docid: M:System.Data.IDataRecord.GetByte(System.Int32)
    /**
    Gets the 8-bit unsigned integer value of the specified column.

    - Parameter i: The zero-based column ordinal.
    - Returns: The 8-bit unsigned integer value of the specified column.

    */
    open func GetByte(i : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_u8__GetByte_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.

    - Parameter i: The zero-based column ordinal.
    - Parameter fieldOffset: The index within the field from which to start the read operation.
    - Parameter buffer: The buffer into which to read the stream of bytes.
    - Parameter bufferoffset: The index for  to start the read operation.
    - Parameter length: The number of bytes to read.
    - Returns: The actual number of bytes read.

    */
    open func GetBytes(i : Swift.Int32, fieldOffset : Swift.Int64, buffer : Optional<dotnet.System_Arr<Swift.UInt8>>, bufferoffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i64__GetBytes_0__5__i32_i64_u8Array_i32_i32(&__thrown, self.get_handle(), i, fieldOffset, (buffer?.get_handle()), bufferoffset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char GetChar(System.Int32)
// docid: M:System.Data.IDataRecord.GetChar(System.Int32)
    /**
    Gets the character value of the specified column.

    - Parameter i: The zero-based column ordinal.
    - Returns: The character value of the specified column.

    */
    open func GetChar(i : Swift.Int32) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Char__GetChar_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.Int64 GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.

    - Parameter i: The zero-based column ordinal.
    - Parameter fieldoffset: The index within the row from which to start the read operation.
    - Parameter buffer: The buffer into which to read the stream of bytes.
    - Parameter bufferoffset: The index for  to start the read operation.
    - Parameter length: The number of bytes to read.
    - Returns: The actual number of characters read.

    */
    open func GetChars(i : Swift.Int32, fieldoffset : Swift.Int64, buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>, bufferoffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i64__GetChars_0__5__i32_i64_CharArray_i32_i32(&__thrown, self.get_handle(), i, fieldoffset, (buffer?.get_handle()), bufferoffset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.IDataReader GetData(System.Int32)
// docid: M:System.Data.IDataRecord.GetData(System.Int32)
    /**
    Returns an  for the specified column ordinal.

    - Parameter i: The index of the field to find.
    - Returns: The  for the specified column ordinal.

    */
    open func GetData(i : Swift.Int32) throws -> dotnet.System.Data.IDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_IDataReader__GetData_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDataReader(hndl : __return);
        }
    }
    // System.String GetDataTypeName(System.Int32)
// docid: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)
    /**
    Gets the data type information for the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The data type information for the specified field.

    */
    open func GetDataTypeName(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_String__GetDataTypeName_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.DateTime GetDateTime(System.Int32)
// docid: M:System.Data.IDataRecord.GetDateTime(System.Int32)
    /**
    Gets the date and time data value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The date and time data value of the specified field.

    */
    open func GetDateTime(i : Swift.Int32) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_DateTime__GetDateTime_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal GetDecimal(System.Int32)
// docid: M:System.Data.IDataRecord.GetDecimal(System.Int32)
    /**
    Gets the fixed-position numeric value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The fixed-position numeric value of the specified field.

    */
    open func GetDecimal(i : Swift.Int32) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Decimal__GetDecimal_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double GetDouble(System.Int32)
// docid: M:System.Data.IDataRecord.GetDouble(System.Int32)
    /**
    Gets the double-precision floating point number of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The double-precision floating point number of the specified field.

    */
    open func GetDouble(i : Swift.Int32) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_f64__GetDouble_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetFieldType(System.Int32)
// docid: M:System.Data.IDataRecord.GetFieldType(System.Int32)
    /**
    Gets the  information corresponding to the type of  that would be returned from .

    - Parameter i: The index of the field to find.
    - Returns: The  information corresponding to the type of  that would be returned from .

    */
    open func GetFieldType(i : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Type__GetFieldType_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Single GetFloat(System.Int32)
// docid: M:System.Data.IDataRecord.GetFloat(System.Int32)
    /**
    Gets the single-precision floating point number of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The single-precision floating point number of the specified field.

    */
    open func GetFloat(i : Swift.Int32) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_f32__GetFloat_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid GetGuid(System.Int32)
// docid: M:System.Data.IDataRecord.GetGuid(System.Int32)
    /**
    Returns the GUID value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The GUID value of the specified field.

    */
    open func GetGuid(i : Swift.Int32) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Guid__GetGuid_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 GetInt16(System.Int32)
// docid: M:System.Data.IDataRecord.GetInt16(System.Int32)
    /**
    Gets the 16-bit signed integer value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The 16-bit signed integer value of the specified field.

    */
    open func GetInt16(i : Swift.Int32) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i16__GetInt16_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetInt32(System.Int32)
// docid: M:System.Data.IDataRecord.GetInt32(System.Int32)
    /**
    Gets the 32-bit signed integer value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The 32-bit signed integer value of the specified field.

    */
    open func GetInt32(i : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i32__GetInt32_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetInt64(System.Int32)
// docid: M:System.Data.IDataRecord.GetInt64(System.Int32)
    /**
    Gets the 64-bit signed integer value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The 64-bit signed integer value of the specified field.

    */
    open func GetInt64(i : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i64__GetInt64_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetName(System.Int32)
// docid: M:System.Data.IDataRecord.GetName(System.Int32)
    /**
    Gets the name for the field to find.

    - Parameter i: The index of the field to find.
    - Returns: The name of the field or the empty string (""), if there is no value to return.

    */
    open func GetName(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_String__GetName_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 GetOrdinal(System.String)
// docid: M:System.Data.IDataRecord.GetOrdinal(System.String)
    /**
    Return the index of the named field.

    - Parameter name: The name of the field to find.
    - Returns: The index of the named field.

    */
    open func GetOrdinal(name : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i32__GetOrdinal_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetString(System.Int32)
// docid: M:System.Data.IDataRecord.GetString(System.Int32)
    /**
    Gets the string value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The string value of the specified field.

    */
    open func GetString(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_String__GetString_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object GetValue(System.Int32)
// docid: M:System.Data.IDataRecord.GetValue(System.Int32)
    /**
    Return the value of the specified field.

    - Parameter i: The index of the field to find.
    - Returns: The  which will contain the field value upon return.

    */
    open func GetValue(i : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Object__GetValue_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 GetValues(System.Object[])
// docid: M:System.Data.IDataRecord.GetValues(System.Object[])
    /**
    Populates an array of objects with the column values of the current record.

    - Parameter values: An array of  to copy the attribute fields into.
    - Returns: The number of instances of  in the array.

    */
    open func GetValues(values : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i32__GetValues_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDBNull(System.Int32)
// docid: M:System.Data.IDataRecord.IsDBNull(System.Int32)
    /**
    Return whether the specified field is set to null.

    - Parameter i: The index of the field to find.
    - Returns: 
         if the specified field is set to null; otherwise, .

    */
    open func IsDBNull(i : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_bool__IsDBNull_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_FieldCount()
// docid: M:System.Data.IDataRecord.get_FieldCount
    open func get_FieldCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_i32__get_FieldCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Data.IDataRecord.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(i : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.IDataRecord.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDataRecord_Object__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // IDataRecord


// type: System.Data.IDbCommand
    /**
    Represents an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases.

    */
open class IDbCommand
    :
    SGBridgeGenericValue,
    System_Data_IDbCommand,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDbCommand_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Cancel()
// docid: M:System.Data.IDbCommand.Cancel
    /**
    Attempts to cancels the execution of an .

    */
    open func Cancel() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.IDbDataParameter CreateParameter()
// docid: M:System.Data.IDbCommand.CreateParameter
    /**
    Creates a new instance of an  object.

    - Returns: An  object.

    */
    open func CreateParameter() throws -> dotnet.System.Data.IDbDataParameter {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_IDbDataParameter__CreateParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDbDataParameter(hndl : __return);
        }
    }
    // System.Int32 ExecuteNonQuery()
// docid: M:System.Data.IDbCommand.ExecuteNonQuery
    /**
    Executes an SQL statement against the  object of a .NET Framework data provider, and returns the number of rows affected.

    - Returns: The number of rows affected.

    */
    open func ExecuteNonQuery() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_i32__ExecuteNonQuery_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.IDataReader ExecuteReader()
// docid: M:System.Data.IDbCommand.ExecuteReader
    /**
    Executes the  against the  and builds an .

    - Returns: An  object.

    */
    open func ExecuteReader() throws -> dotnet.System.Data.IDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_IDataReader__ExecuteReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDataReader(hndl : __return);
        }
    }
    // System.Data.IDataReader ExecuteReader(System.Data.CommandBehavior)
// docid: M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
    /**
    Executes the  against the , and builds an  using one of the  values.

    - Parameter behavior: One of the  values.
    - Returns: An  object.

    */
    open func ExecuteReader(behavior : dotnet.System.Data.CommandBehavior) throws -> dotnet.System.Data.IDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_IDataReader__ExecuteReader_0__1__CommandBehavior(&__thrown, self.get_handle(), behavior.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDataReader(hndl : __return);
        }
    }
    // System.Object ExecuteScalar()
// docid: M:System.Data.IDbCommand.ExecuteScalar
    /**
    Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.

    - Returns: The first column of the first row in the resultset.

    */
    open func ExecuteScalar() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_Object__ExecuteScalar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Prepare()
// docid: M:System.Data.IDbCommand.Prepare
    /**
    Creates a prepared (or compiled) version of the command on the data source.

    */
    open func Prepare() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__Prepare_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CommandText()
// docid: M:System.Data.IDbCommand.get_CommandText
    open func get_CommandText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_String__get_CommandText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CommandText(System.String)
// docid: M:System.Data.IDbCommand.set_CommandText(System.String)
    open func set_CommandText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__set_CommandText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_CommandTimeout()
// docid: M:System.Data.IDbCommand.get_CommandTimeout
    open func get_CommandTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_i32__get_CommandTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CommandTimeout(System.Int32)
// docid: M:System.Data.IDbCommand.set_CommandTimeout(System.Int32)
    open func set_CommandTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__set_CommandTimeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.CommandType get_CommandType()
// docid: M:System.Data.IDbCommand.get_CommandType
    open func get_CommandType() throws -> dotnet.System.Data.CommandType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_CommandType__get_CommandType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.CommandType(val: __return);
        }
    }
    // [IsSpecialName] void set_CommandType(System.Data.CommandType)
// docid: M:System.Data.IDbCommand.set_CommandType(System.Data.CommandType)
    open func set_CommandType(value : dotnet.System.Data.CommandType) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__set_CommandType_0__1__CommandType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDbConnection get_Connection()
// docid: M:System.Data.IDbCommand.get_Connection
    open func get_Connection() throws -> Optional<dotnet.System.Data.IDbConnection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_IDbConnection__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbConnection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Connection(System.Data.IDbConnection)
// docid: M:System.Data.IDbCommand.set_Connection(System.Data.IDbConnection)
    open func set_Connection(value : Optional<dotnet.System.Data.IDbConnection>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__set_Connection_0__1__IDbConnection(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDataParameterCollection get_Parameters()
// docid: M:System.Data.IDbCommand.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Data.IDataParameterCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_IDataParameterCollection__get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDataParameterCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.IDbTransaction get_Transaction()
// docid: M:System.Data.IDbCommand.get_Transaction
    open func get_Transaction() throws -> Optional<dotnet.System.Data.IDbTransaction> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_IDbTransaction__get_Transaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbTransaction(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Transaction(System.Data.IDbTransaction)
// docid: M:System.Data.IDbCommand.set_Transaction(System.Data.IDbTransaction)
    open func set_Transaction(value : Optional<dotnet.System.Data.IDbTransaction>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__set_Transaction_0__1__IDbTransaction(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.UpdateRowSource get_UpdatedRowSource()
// docid: M:System.Data.IDbCommand.get_UpdatedRowSource
    open func get_UpdatedRowSource() throws -> dotnet.System.Data.UpdateRowSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbCommand_UpdateRowSource__get_UpdatedRowSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.UpdateRowSource(val: __return);
        }
    }
    // [IsSpecialName] void set_UpdatedRowSource(System.Data.UpdateRowSource)
// docid: M:System.Data.IDbCommand.set_UpdatedRowSource(System.Data.UpdateRowSource)
    open func set_UpdatedRowSource(value : dotnet.System.Data.UpdateRowSource) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbCommand_void__set_UpdatedRowSource_0__1__UpdateRowSource(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDbCommand


// type: System.Data.IDbConnection
    /**
    Represents an open connection to a data source, and is implemented by .NET Framework data providers that access relational databases.

    */
open class IDbConnection
    :
    SGBridgeGenericValue,
    System_Data_IDbConnection,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDbConnection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Data.IDbTransaction BeginTransaction()
// docid: M:System.Data.IDbConnection.BeginTransaction
    /**
    Begins a database transaction.

    - Returns: An object representing the new transaction.

    */
    open func BeginTransaction() throws -> dotnet.System.Data.IDbTransaction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_IDbTransaction__BeginTransaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDbTransaction(hndl : __return);
        }
    }
    // System.Data.IDbTransaction BeginTransaction(System.Data.IsolationLevel)
// docid: M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
    /**
    Begins a database transaction with the specified  value.

    - Parameter il: One of the  values.
    - Returns: An object representing the new transaction.

    */
    open func BeginTransaction(il : dotnet.System.Data.IsolationLevel) throws -> dotnet.System.Data.IDbTransaction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_IDbTransaction__BeginTransaction_0__1__IsolationLevel(&__thrown, self.get_handle(), il.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDbTransaction(hndl : __return);
        }
    }
    // void ChangeDatabase(System.String)
// docid: M:System.Data.IDbConnection.ChangeDatabase(System.String)
    /**
    Changes the current database for an open  object.

    - Parameter databaseName: The name of the database to use in place of the current database.
    */
    open func ChangeDatabase(databaseName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbConnection_void__ChangeDatabase_0__1__String(&__thrown, self.get_handle(), databaseName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Data.IDbConnection.Close
    /**
    Closes the connection to the database.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbConnection_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.IDbCommand CreateCommand()
// docid: M:System.Data.IDbConnection.CreateCommand
    /**
    Creates and returns a Command object associated with the connection.

    - Returns: A Command object associated with the connection.

    */
    open func CreateCommand() throws -> dotnet.System.Data.IDbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_IDbCommand__CreateCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDbCommand(hndl : __return);
        }
    }
    // void Open()
// docid: M:System.Data.IDbConnection.Open
    /**
    Opens a database connection with the settings specified by the  property of the provider-specific Connection object.

    */
    open func Open() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbConnection_void__Open_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionString()
// docid: M:System.Data.IDbConnection.get_ConnectionString
    open func get_ConnectionString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_String__get_ConnectionString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConnectionString(System.String)
// docid: M:System.Data.IDbConnection.set_ConnectionString(System.String)
    open func set_ConnectionString(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbConnection_void__set_ConnectionString_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ConnectionTimeout()
// docid: M:System.Data.IDbConnection.get_ConnectionTimeout
    open func get_ConnectionTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_i32__get_ConnectionTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Database()
// docid: M:System.Data.IDbConnection.get_Database
    open func get_Database() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_String__get_Database_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.ConnectionState get_State()
// docid: M:System.Data.IDbConnection.get_State
    open func get_State() throws -> dotnet.System.Data.ConnectionState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbConnection_ConnectionState__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ConnectionState(val: __return);
        }
    }
} // IDbConnection


// type: System.Data.IDbDataAdapter
    /**
    Represents a set of command-related properties that are used to fill the  and update a data source, and is implemented by .NET Framework data providers that access relational databases.

    */
open class IDbDataAdapter
    :
    SGBridgeGenericValue,
    System_Data_IDbDataAdapter,
    System_Data_IDataAdapter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDbDataAdapter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Data.IDbCommand get_DeleteCommand()
// docid: M:System.Data.IDbDataAdapter.get_DeleteCommand
    open func get_DeleteCommand() throws -> Optional<dotnet.System.Data.IDbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataAdapter_IDbCommand__get_DeleteCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DeleteCommand(System.Data.IDbCommand)
// docid: M:System.Data.IDbDataAdapter.set_DeleteCommand(System.Data.IDbCommand)
    open func set_DeleteCommand(value : Optional<dotnet.System.Data.IDbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataAdapter_void__set_DeleteCommand_0__1__IDbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDbCommand get_InsertCommand()
// docid: M:System.Data.IDbDataAdapter.get_InsertCommand
    open func get_InsertCommand() throws -> Optional<dotnet.System.Data.IDbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataAdapter_IDbCommand__get_InsertCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InsertCommand(System.Data.IDbCommand)
// docid: M:System.Data.IDbDataAdapter.set_InsertCommand(System.Data.IDbCommand)
    open func set_InsertCommand(value : Optional<dotnet.System.Data.IDbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataAdapter_void__set_InsertCommand_0__1__IDbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDbCommand get_SelectCommand()
// docid: M:System.Data.IDbDataAdapter.get_SelectCommand
    open func get_SelectCommand() throws -> Optional<dotnet.System.Data.IDbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataAdapter_IDbCommand__get_SelectCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SelectCommand(System.Data.IDbCommand)
// docid: M:System.Data.IDbDataAdapter.set_SelectCommand(System.Data.IDbCommand)
    open func set_SelectCommand(value : Optional<dotnet.System.Data.IDbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataAdapter_void__set_SelectCommand_0__1__IDbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDbCommand get_UpdateCommand()
// docid: M:System.Data.IDbDataAdapter.get_UpdateCommand
    open func get_UpdateCommand() throws -> Optional<dotnet.System.Data.IDbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataAdapter_IDbCommand__get_UpdateCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UpdateCommand(System.Data.IDbCommand)
// docid: M:System.Data.IDbDataAdapter.set_UpdateCommand(System.Data.IDbCommand)
    open func set_UpdateCommand(value : Optional<dotnet.System.Data.IDbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataAdapter_void__set_UpdateCommand_0__1__IDbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDbDataAdapter


// type: System.Data.IDbDataParameter
    /**
    Used by the Visual Basic .NET Data Designers to represent a parameter to a Command object, and optionally, its mapping to  columns.

    */
open class IDbDataParameter
    :
    SGBridgeGenericValue,
    System_Data_IDbDataParameter,
    System_Data_IDataParameter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDbDataParameter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Byte get_Precision()
// docid: M:System.Data.IDbDataParameter.get_Precision
    open func get_Precision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataParameter_u8__get_Precision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Precision(System.Byte)
// docid: M:System.Data.IDbDataParameter.set_Precision(System.Byte)
    open func set_Precision(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataParameter_void__set_Precision_0__1__u8(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte get_Scale()
// docid: M:System.Data.IDbDataParameter.get_Scale
    open func get_Scale() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataParameter_u8__get_Scale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Scale(System.Byte)
// docid: M:System.Data.IDbDataParameter.set_Scale(System.Byte)
    open func set_Scale(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataParameter_void__set_Scale_0__1__u8(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Size()
// docid: M:System.Data.IDbDataParameter.get_Size
    open func get_Size() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbDataParameter_i32__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Size(System.Int32)
// docid: M:System.Data.IDbDataParameter.set_Size(System.Int32)
    open func set_Size(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbDataParameter_void__set_Size_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDbDataParameter


// type: System.Data.IDbTransaction
    /**
    Represents a transaction to be performed at a data source, and is implemented by .NET Framework data providers that access relational databases.

    */
open class IDbTransaction
    :
    SGBridgeGenericValue,
    System_Data_IDbTransaction,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_IDbTransaction_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Commit()
// docid: M:System.Data.IDbTransaction.Commit
    /**
    Commits the database transaction.

    */
    open func Commit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbTransaction_void__Commit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Rollback()
// docid: M:System.Data.IDbTransaction.Rollback
    /**
    Rolls back a transaction from a pending state.

    */
    open func Rollback() throws {
        var __thrown : NullableHandle = nil;
        System_Data_IDbTransaction_void__Rollback_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDbConnection get_Connection()
// docid: M:System.Data.IDbTransaction.get_Connection
    open func get_Connection() throws -> Optional<dotnet.System.Data.IDbConnection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbTransaction_IDbConnection__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbConnection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.IsolationLevel get_IsolationLevel()
// docid: M:System.Data.IDbTransaction.get_IsolationLevel
    open func get_IsolationLevel() throws -> dotnet.System.Data.IsolationLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_IDbTransaction_IsolationLevel__get_IsolationLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IsolationLevel(val: __return);
        }
    }
} // IDbTransaction


// type: System.Data.ITableMapping
    /**
    Associates a source table with a table in a , and is implemented by the  class, which is used in common by .NET Framework data providers.

    */
open class ITableMapping
    :
    SGBridgeGenericValue,
    System_Data_ITableMapping
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_ITableMapping_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Data.IColumnMappingCollection get_ColumnMappings()
// docid: M:System.Data.ITableMapping.get_ColumnMappings
    open func get_ColumnMappings() throws -> dotnet.System.Data.IColumnMappingCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMapping_IColumnMappingCollection__get_ColumnMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IColumnMappingCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DataSetTable()
// docid: M:System.Data.ITableMapping.get_DataSetTable
    open func get_DataSetTable() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMapping_String__get_DataSetTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataSetTable(System.String)
// docid: M:System.Data.ITableMapping.set_DataSetTable(System.String)
    open func set_DataSetTable(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ITableMapping_void__set_DataSetTable_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceTable()
// docid: M:System.Data.ITableMapping.get_SourceTable
    open func get_SourceTable() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMapping_String__get_SourceTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SourceTable(System.String)
// docid: M:System.Data.ITableMapping.set_SourceTable(System.String)
    open func set_SourceTable(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ITableMapping_void__set_SourceTable_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITableMapping


// type: System.Data.ITableMappingCollection
    /**
    Contains a collection of TableMapping objects, and is implemented by the , which is used in common by .NET Framework data providers.

    */
open class ITableMappingCollection
    :
    SGBridgeGenericValue,
    System_Data_ITableMappingCollection,
    System_Collections_IList
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_ITableMappingCollection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Data.ITableMapping Add(System.String, System.String)
// docid: M:System.Data.ITableMappingCollection.Add(System.String,System.String)
    /**
    Adds a table mapping to the collection.

    - Parameter sourceTableName: The case-sensitive name of the source table.
    - Parameter dataSetTableName: The name of the  table.
    - Returns: A reference to the newly-mapped  object.

    */
    open func Add(sourceTableName : dotnet.System.String, dataSetTableName : dotnet.System.String) throws -> dotnet.System.Data.ITableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMappingCollection_ITableMapping__Add_0__2__String_String(&__thrown, self.get_handle(), sourceTableName.get_handle(), dataSetTableName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ITableMapping(hndl : __return);
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.ITableMappingCollection.Contains(System.String)
    /**
    Gets a value indicating whether the collection contains a table mapping with the specified source table name.

    - Parameter sourceTableName: The case-sensitive name of the source table.
    - Returns: 
         if a table mapping with the specified source table name exists, otherwise .

    */
    open func Contains(sourceTableName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMappingCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), sourceTableName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Data.ITableMapping GetByDataSetTable(System.String)
// docid: M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)
    /**
    Gets the TableMapping object with the specified  table name.

    - Parameter dataSetTableName: The name of the  table within the collection.
    - Returns: The TableMapping object with the specified  table name.

    */
    open func GetByDataSetTable(dataSetTableName : dotnet.System.String) throws -> dotnet.System.Data.ITableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMappingCollection_ITableMapping__GetByDataSetTable_0__1__String(&__thrown, self.get_handle(), dataSetTableName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ITableMapping(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.ITableMappingCollection.IndexOf(System.String)
    /**
    Gets the location of the  object within the collection.

    - Parameter sourceTableName: The case-sensitive name of the source table.
    - Returns: The zero-based location of the  object within the collection.

    */
    open func IndexOf(sourceTableName : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMappingCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), sourceTableName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void RemoveAt(System.String)
// docid: M:System.Data.ITableMappingCollection.RemoveAt(System.String)
    /**
    Removes the  object with the specified  name from the collection.

    - Parameter sourceTableName: The case-sensitive name of the .
    */
    open func RemoveAt(sourceTableName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ITableMappingCollection_void__RemoveAt_0__1__String(&__thrown, self.get_handle(), sourceTableName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.ITableMappingCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_ITableMappingCollection_Object__get_Item_0__1__String(&__thrown, self.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Data.ITableMappingCollection.set_Item(System.String,System.Object)
    open func set_Item(index : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_ITableMappingCollection_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), index.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITableMappingCollection


// type: System.Data.InRowChangingEventException
    /**
    Represents the exception that is thrown when you call the  method within the  event.

    */
open class InRowChangingEventException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_InRowChangingEventException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.InRowChangingEventException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InRowChangingEventException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.InRowChangingEventException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InRowChangingEventException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InRowChangingEventException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InRowChangingEventException


// type: System.Data.InternalDataCollectionBase
    /**
    Provides the base functionality for creating collections.

    */
open class InternalDataCollectionBase
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_InternalDataCollectionBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.InternalDataCollectionBase.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InternalDataCollectionBase_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)
    /**
    Copies all the elements of the current  to a one-dimensional , starting at the specified  index.

    - Parameter ar: The one-dimensional  to copy the current  object's elements into.
    - Parameter index: The destination  index to start copying into.
    */
    open func CopyTo(ar : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_InternalDataCollectionBase_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), ar.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.InternalDataCollectionBase.GetEnumerator
    /**
    Gets an  for the collection.

    - Returns: An  for the collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_InternalDataCollectionBase_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.InternalDataCollectionBase.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_InternalDataCollectionBase_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Data.InternalDataCollectionBase.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_InternalDataCollectionBase_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Data.InternalDataCollectionBase.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_InternalDataCollectionBase_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Data.InternalDataCollectionBase.get_SyncRoot
    open /* method final */ func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_InternalDataCollectionBase_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the total number of elements in a collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value that indicates whether the  is synchronized.

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize the collection.

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // InternalDataCollectionBase


// type: System.Data.InvalidConstraintException
    /**
    Represents the exception that is thrown when incorrectly trying to create or access a relation.

    */
open class InvalidConstraintException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_InvalidConstraintException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.InvalidConstraintException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InvalidConstraintException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.InvalidConstraintException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InvalidConstraintException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InvalidConstraintException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidConstraintException


// type: System.Data.InvalidExpressionException
    /**
    Represents the exception that is thrown when you try to add a  that contains an invalid  to a .

    */
open class InvalidExpressionException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_InvalidExpressionException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.InvalidExpressionException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InvalidExpressionException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.InvalidExpressionException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InvalidExpressionException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_InvalidExpressionException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidExpressionException


// type: System.Data.IsolationLevel
    /**
    Specifies the transaction locking behavior for the connection.

    */
public struct IsolationLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_IsolationLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.IsolationLevel Unspecified
    /**
    A different isolation level than the one specified is being used, but the level cannot be determined.

    */
    public static var Unspecified : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_Unspecified());
            return __return;
        }
    }
    // static field: System.Data.IsolationLevel Chaos
    /**
    The pending changes from more highly isolated transactions cannot be overwritten.

    */
    public static var Chaos : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_Chaos());
            return __return;
        }
    }
    // static field: System.Data.IsolationLevel ReadUncommitted
    /**
    A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.

    */
    public static var ReadUncommitted : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_ReadUncommitted());
            return __return;
        }
    }
    // static field: System.Data.IsolationLevel ReadCommitted
    /**
    Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.

    */
    public static var ReadCommitted : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_ReadCommitted());
            return __return;
        }
    }
    // static field: System.Data.IsolationLevel RepeatableRead
    /**
    Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible.

    */
    public static var RepeatableRead : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_RepeatableRead());
            return __return;
        }
    }
    // static field: System.Data.IsolationLevel Serializable
    /**
    A range lock is placed on the , preventing other users from updating or inserting rows into the dataset until the transaction is complete.

    */
    public static var Serializable : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_Serializable());
            return __return;
        }
    }
    // static field: System.Data.IsolationLevel Snapshot
    /**
    Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.

    */
    public static var Snapshot : dotnet.System.Data.IsolationLevel {
        get {
        let __return = dotnet.System.Data.IsolationLevel(val: System_Data_IsolationLevel_get_Snapshot());
            return __return;
        }
    }
} // IsolationLevel


// type: System.Data.KeyRestrictionBehavior
    /**
    Identifies a list of connection string parameters identified by the  property that are either allowed or not allowed.

    */
public struct KeyRestrictionBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_KeyRestrictionBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.KeyRestrictionBehavior AllowOnly
    /**
    Default. Identifies the only additional connection string parameters that are allowed.

    */
    public static var AllowOnly : dotnet.System.Data.KeyRestrictionBehavior {
        get {
        let __return = dotnet.System.Data.KeyRestrictionBehavior(val: System_Data_KeyRestrictionBehavior_get_AllowOnly());
            return __return;
        }
    }
    // static field: System.Data.KeyRestrictionBehavior PreventUsage
    /**
    Identifies additional connection string parameters that are not allowed.

    */
    public static var PreventUsage : dotnet.System.Data.KeyRestrictionBehavior {
        get {
        let __return = dotnet.System.Data.KeyRestrictionBehavior(val: System_Data_KeyRestrictionBehavior_get_PreventUsage());
            return __return;
        }
    }
} // KeyRestrictionBehavior


// type: System.Data.LoadOption
    /**
    Controls how the values from the data source will be applied to existing rows when using the  or  method.

    */
public struct LoadOption : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_LoadOption_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.LoadOption OverwriteChanges
    /**
    The incoming values for this row will be written to both the current value and the original value versions of the data for each column.

    */
    public static var OverwriteChanges : dotnet.System.Data.LoadOption {
        get {
        let __return = dotnet.System.Data.LoadOption(val: System_Data_LoadOption_get_OverwriteChanges());
            return __return;
        }
    }
    // static field: System.Data.LoadOption PreserveChanges
    /**
    The incoming values for this row will be written to the original value version of each column. The current version of the data in each column will not be changed.  This is the default.

    */
    public static var PreserveChanges : dotnet.System.Data.LoadOption {
        get {
        let __return = dotnet.System.Data.LoadOption(val: System_Data_LoadOption_get_PreserveChanges());
            return __return;
        }
    }
    // static field: System.Data.LoadOption Upsert
    /**
    The incoming values for this row will be written to the current version of each column. The original version of each column's data will not be changed.

    */
    public static var Upsert : dotnet.System.Data.LoadOption {
        get {
        let __return = dotnet.System.Data.LoadOption(val: System_Data_LoadOption_get_Upsert());
            return __return;
        }
    }
} // LoadOption


// type: System.Data.MappingType
    /**
    Specifies how a  is mapped.

    */
public struct MappingType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_MappingType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.MappingType Element
    /**
    The column is mapped to an XML element.

    */
    public static var Element : dotnet.System.Data.MappingType {
        get {
        let __return = dotnet.System.Data.MappingType(val: System_Data_MappingType_get_Element());
            return __return;
        }
    }
    // static field: System.Data.MappingType Attribute
    /**
    The column is mapped to an XML attribute.

    */
    public static var Attribute : dotnet.System.Data.MappingType {
        get {
        let __return = dotnet.System.Data.MappingType(val: System_Data_MappingType_get_Attribute());
            return __return;
        }
    }
    // static field: System.Data.MappingType SimpleContent
    /**
    The column is mapped to an  node.

    */
    public static var SimpleContent : dotnet.System.Data.MappingType {
        get {
        let __return = dotnet.System.Data.MappingType(val: System_Data_MappingType_get_SimpleContent());
            return __return;
        }
    }
    // static field: System.Data.MappingType Hidden
    /**
    The column is mapped to an internal structure.

    */
    public static var Hidden : dotnet.System.Data.MappingType {
        get {
        let __return = dotnet.System.Data.MappingType(val: System_Data_MappingType_get_Hidden());
            return __return;
        }
    }
} // MappingType


// type: System.Data.MergeFailedEventArgs
    /**
    Occurs when a target and source  have the same primary key value, and the  property is set to true.

    */
open class MergeFailedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_MergeFailedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataTable, System.String)
// docid: M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)
    /**
    Initializes a new instance of a  class with the  and a description of the merge conflict.

    - Parameter table: The  object.
    - Parameter conflict: A description of the merge conflict.
    */
    public init(table : Optional<dotnet.System.Data.DataTable>, conflict : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_MergeFailedEventArgs_ctor_0__2__DataTable_String(&__thrown, table?.get_handle() ?? nil, conflict.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Conflict()
// docid: M:System.Data.MergeFailedEventArgs.get_Conflict
    open func get_Conflict() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_MergeFailedEventArgs_String__get_Conflict_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.MergeFailedEventArgs.get_Table
    open func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_MergeFailedEventArgs_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Returns a description of the merge conflict.

    */
    open var Conflict : dotnet.System.String {
        get {
            return try! get_Conflict();
        }
    }
    /**
    Returns the  object.

    */
    open var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
    }
} // MergeFailedEventArgs


// type: System.Data.MergeFailedEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class MergeFailedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_MergeFailedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.MergeFailedEventArgs)
// docid: M:System.Data.MergeFailedEventHandler.Invoke(System.Object,System.Data.MergeFailedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.MergeFailedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_MergeFailedEventHandler_void__Invoke_0__2__Object_MergeFailedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.MergeFailedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.MergeFailedEventHandler.BeginInvoke(System.Object,System.Data.MergeFailedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.MergeFailedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_MergeFailedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_MergeFailedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.MergeFailedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_MergeFailedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.MergeFailedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.MergeFailedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_MergeFailedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.MergeFailedEventArgs)
// docid: M:System.Data.MergeFailedEventHandler.Invoke(System.Object,System.Data.MergeFailedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.MergeFailedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_MergeFailedEventHandler_void__Invoke_0__2__Object_MergeFailedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MergeFailedEventHandler


// type: System.Data.MissingMappingAction
    /**
    Determines the action that occurs when a mapping is missing from a source table or a source column.

    */
public struct MissingMappingAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_MissingMappingAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.MissingMappingAction Passthrough
    /**
    The source column or source table is created and added to the  using its original name.

    */
    public static var Passthrough : dotnet.System.Data.MissingMappingAction {
        get {
        let __return = dotnet.System.Data.MissingMappingAction(val: System_Data_MissingMappingAction_get_Passthrough());
            return __return;
        }
    }
    // static field: System.Data.MissingMappingAction Ignore
    /**
    The column or table not having a mapping is ignored. Returns .

    */
    public static var Ignore : dotnet.System.Data.MissingMappingAction {
        get {
        let __return = dotnet.System.Data.MissingMappingAction(val: System_Data_MissingMappingAction_get_Ignore());
            return __return;
        }
    }
    // static field: System.Data.MissingMappingAction Error
    /**
    An  is generated if the specified column mapping is missing.

    */
    public static var Error : dotnet.System.Data.MissingMappingAction {
        get {
        let __return = dotnet.System.Data.MissingMappingAction(val: System_Data_MissingMappingAction_get_Error());
            return __return;
        }
    }
} // MissingMappingAction


// type: System.Data.MissingPrimaryKeyException
    /**
    Represents the exception that is thrown when you try to access a row in a table that has no primary key.

    */
open class MissingPrimaryKeyException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_MissingPrimaryKeyException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.MissingPrimaryKeyException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_MissingPrimaryKeyException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.MissingPrimaryKeyException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_MissingPrimaryKeyException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_MissingPrimaryKeyException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // MissingPrimaryKeyException


// type: System.Data.MissingSchemaAction
    /**
    Specifies the action to take when adding data to the  and the required  or  is missing.

    */
public struct MissingSchemaAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_MissingSchemaAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.MissingSchemaAction Add
    /**
    Adds the necessary columns to complete the schema.

    */
    public static var Add : dotnet.System.Data.MissingSchemaAction {
        get {
        let __return = dotnet.System.Data.MissingSchemaAction(val: System_Data_MissingSchemaAction_get_Add());
            return __return;
        }
    }
    // static field: System.Data.MissingSchemaAction Ignore
    /**
    Ignores the extra columns.

    */
    public static var Ignore : dotnet.System.Data.MissingSchemaAction {
        get {
        let __return = dotnet.System.Data.MissingSchemaAction(val: System_Data_MissingSchemaAction_get_Ignore());
            return __return;
        }
    }
    // static field: System.Data.MissingSchemaAction Error
    /**
    An  is generated if the specified column mapping is missing.

    */
    public static var Error : dotnet.System.Data.MissingSchemaAction {
        get {
        let __return = dotnet.System.Data.MissingSchemaAction(val: System_Data_MissingSchemaAction_get_Error());
            return __return;
        }
    }
    // static field: System.Data.MissingSchemaAction AddWithKey
    /**
    Adds the necessary columns and primary key information to complete the schema. For more information about how primary key information is added to a , see .To function properly with the .NET Framework Data Provider for OLE DB,  requires that the native OLE DB provider obtains necessary primary key information by setting the DBPROP_UNIQUEROWS property, and then determines which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the IColumnsRowset. As an alternative, the user may explicitly set the primary key constraints on each . This ensures that incoming records that match existing records are updated instead of appended. When using , the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. For more information, see SET FMTONLY (Transact-SQL).

    */
    public static var AddWithKey : dotnet.System.Data.MissingSchemaAction {
        get {
        let __return = dotnet.System.Data.MissingSchemaAction(val: System_Data_MissingSchemaAction_get_AddWithKey());
            return __return;
        }
    }
} // MissingSchemaAction


// type: System.Data.NoNullAllowedException
    /**
    Represents the exception that is thrown when you try to insert a null value into a column where  is set to .

    */
open class NoNullAllowedException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_NoNullAllowedException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.NoNullAllowedException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_NoNullAllowedException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.NoNullAllowedException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_NoNullAllowedException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_NoNullAllowedException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NoNullAllowedException


// type: System.Data.OrderedEnumerableRowCollection`1
    /**
    Represents a collection of ordered  objects returned from a query.

    */
public final class OrderedEnumerableRowCollection_1<TRow : SGBridgeGenericValue>
    :
    dotnet.System.Data.EnumerableRowCollection_1<TRow>
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_OrderedEnumerableRowCollection_1_get_type_handle(TRow.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // OrderedEnumerableRowCollection_1


// type: System.Data.ParameterDirection
    /**
    Specifies the type of a parameter within a query relative to the .

    */
public struct ParameterDirection : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_ParameterDirection_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.ParameterDirection Input
    /**
    The parameter is an input parameter.

    */
    public static var Input : dotnet.System.Data.ParameterDirection {
        get {
        let __return = dotnet.System.Data.ParameterDirection(val: System_Data_ParameterDirection_get_Input());
            return __return;
        }
    }
    // static field: System.Data.ParameterDirection Output
    /**
    The parameter is an output parameter.

    */
    public static var Output : dotnet.System.Data.ParameterDirection {
        get {
        let __return = dotnet.System.Data.ParameterDirection(val: System_Data_ParameterDirection_get_Output());
            return __return;
        }
    }
    // static field: System.Data.ParameterDirection InputOutput
    /**
    The parameter is capable of both input and output.

    */
    public static var InputOutput : dotnet.System.Data.ParameterDirection {
        get {
        let __return = dotnet.System.Data.ParameterDirection(val: System_Data_ParameterDirection_get_InputOutput());
            return __return;
        }
    }
    // static field: System.Data.ParameterDirection ReturnValue
    /**
    The parameter represents a return value from an operation such as a stored procedure, built-in function, or user-defined function.

    */
    public static var ReturnValue : dotnet.System.Data.ParameterDirection {
        get {
        let __return = dotnet.System.Data.ParameterDirection(val: System_Data_ParameterDirection_get_ReturnValue());
            return __return;
        }
    }
} // ParameterDirection


// type: System.Data.PropertyCollection
    /**
    Represents a collection of properties that can be added to , , or .

    */
open class PropertyCollection
    :
    dotnet.System.Collections.Hashtable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_PropertyCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.PropertyCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_PropertyCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Clone()
// docid: M:System.Data.PropertyCollection.Clone
    /**
    Creates a shallow copy of the  object.

    - Returns: Returns , a shallow copy of the  object.

    */
    open override func Clone() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_PropertyCollection_Object__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // PropertyCollection


// type: System.Data.ReadOnlyException
    /**
    Represents the exception that is thrown when you try to change the value of a read-only column.

    */
open class ReadOnlyException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_ReadOnlyException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.ReadOnlyException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ReadOnlyException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.ReadOnlyException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ReadOnlyException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_ReadOnlyException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ReadOnlyException


// type: System.Data.RowNotInTableException
    /**
    Represents the exception that is thrown when you try to perform an operation on a  that is not in a .

    */
open class RowNotInTableException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_RowNotInTableException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.RowNotInTableException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_RowNotInTableException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.RowNotInTableException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_RowNotInTableException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_RowNotInTableException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RowNotInTableException


// type: System.Data.Rule
    /**
    Indicates the action that occurs when a  is enforced.

    */
public struct Rule : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_Rule_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.Rule None
    /**
    No action taken on related rows.

    */
    public static var None : dotnet.System.Data.Rule {
        get {
        let __return = dotnet.System.Data.Rule(val: System_Data_Rule_get_None());
            return __return;
        }
    }
    // static field: System.Data.Rule Cascade
    /**
    Delete or update related rows. This is the default.

    */
    public static var Cascade : dotnet.System.Data.Rule {
        get {
        let __return = dotnet.System.Data.Rule(val: System_Data_Rule_get_Cascade());
            return __return;
        }
    }
    // static field: System.Data.Rule SetNull
    /**
    Set values in related rows to .

    */
    public static var SetNull : dotnet.System.Data.Rule {
        get {
        let __return = dotnet.System.Data.Rule(val: System_Data_Rule_get_SetNull());
            return __return;
        }
    }
    // static field: System.Data.Rule SetDefault
    /**
    Set values in related rows to the value contained in the  property.

    */
    public static var SetDefault : dotnet.System.Data.Rule {
        get {
        let __return = dotnet.System.Data.Rule(val: System_Data_Rule_get_SetDefault());
            return __return;
        }
    }
} // Rule


// type: System.Data.SchemaSerializationMode
    /**
    Indicates the schema serialization mode for a typed .

    */
public struct SchemaSerializationMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_SchemaSerializationMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.SchemaSerializationMode IncludeSchema
    /**
    Includes schema serialization for a typed . The default.

    */
    public static var IncludeSchema : dotnet.System.Data.SchemaSerializationMode {
        get {
        let __return = dotnet.System.Data.SchemaSerializationMode(val: System_Data_SchemaSerializationMode_get_IncludeSchema());
            return __return;
        }
    }
    // static field: System.Data.SchemaSerializationMode ExcludeSchema
    /**
    Skips schema serialization for a typed .

    */
    public static var ExcludeSchema : dotnet.System.Data.SchemaSerializationMode {
        get {
        let __return = dotnet.System.Data.SchemaSerializationMode(val: System_Data_SchemaSerializationMode_get_ExcludeSchema());
            return __return;
        }
    }
} // SchemaSerializationMode


// type: System.Data.SchemaType
    /**
    Specifies how to handle existing schema mappings when performing a  operation.

    */
public struct SchemaType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_SchemaType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.SchemaType Source
    /**
    Ignore any table mappings on the DataAdapter. Configure the  using the incoming schema without applying any transformations.

    */
    public static var Source : dotnet.System.Data.SchemaType {
        get {
        let __return = dotnet.System.Data.SchemaType(val: System_Data_SchemaType_get_Source());
            return __return;
        }
    }
    // static field: System.Data.SchemaType Mapped
    /**
    Apply any existing table mappings to the incoming schema. Configure the  with the transformed schema.

    */
    public static var Mapped : dotnet.System.Data.SchemaType {
        get {
        let __return = dotnet.System.Data.SchemaType(val: System_Data_SchemaType_get_Mapped());
            return __return;
        }
    }
} // SchemaType


// type: System.Data.SerializationFormat
    /**
    Determines the serialization format for a .

    */
public struct SerializationFormat : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_SerializationFormat_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.SerializationFormat Xml
    /**
    Serialize as XML content. The default.

    */
    public static var Xml : dotnet.System.Data.SerializationFormat {
        get {
        let __return = dotnet.System.Data.SerializationFormat(val: System_Data_SerializationFormat_get_Xml());
            return __return;
        }
    }
    // static field: System.Data.SerializationFormat Binary
    /**
    Serialize as binary content. Available in ADO.NET 2.0 only.

    */
    public static var Binary : dotnet.System.Data.SerializationFormat {
        get {
        let __return = dotnet.System.Data.SerializationFormat(val: System_Data_SerializationFormat_get_Binary());
            return __return;
        }
    }
} // SerializationFormat


// type: System.Data.SqlDbType
    /**
    Specifies SQL Server-specific data type of a field, property, for use in a .

    */
public struct SqlDbType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_SqlDbType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.SqlDbType BigInt
    /**
    
        . A 64-bit signed integer.

    */
    public static var BigInt : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_BigInt());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Binary
    /**
    
         of type . A fixed-length stream of binary data ranging between 1 and 8,000 bytes.

    */
    public static var Binary : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Binary());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Bit
    /**
    
        . An unsigned numeric value that can be 0, 1, or .

    */
    public static var Bit : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Bit());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Char
    /**
    
        . A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters.

    */
    public static var Char : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Char());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType DateTime
    /**
    
        . Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds.

    */
    public static var DateTime : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_DateTime());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Decimal
    /**
    
        . A fixed precision and scale numeric value between -10 38 -1 and 10 38 -1.

    */
    public static var Decimal : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Decimal());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Float
    /**
    
        . A floating point number within the range of -1.79E +308 through 1.79E +308.

    */
    public static var Float : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Float());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Image
    /**
    
         of type . A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes.

    */
    public static var Image : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Image());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Int
    /**
    
        . A 32-bit signed integer.

    */
    public static var Int : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Int());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Money
    /**
    
        . A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth of a currency unit.

    */
    public static var Money : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Money());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType NChar
    /**
    
        . A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters.

    */
    public static var NChar : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_NChar());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType NText
    /**
    
        . A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters.

    */
    public static var NText : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_NText());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType NVarChar
    /**
    
        . A variable-length stream of Unicode characters ranging between 1 and 4,000 characters. Implicit conversion fails if the string is greater than 4,000 characters. Explicitly set the object when working with strings longer than 4,000 characters. Use  when the database column is .

    */
    public static var NVarChar : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_NVarChar());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Real
    /**
    
        . A floating point number within the range of -3.40E +38 through 3.40E +38.

    */
    public static var Real : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Real());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType UniqueIdentifier
    /**
    
        . A globally unique identifier (or GUID).

    */
    public static var UniqueIdentifier : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_UniqueIdentifier());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType SmallDateTime
    /**
    
        . Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute.

    */
    public static var SmallDateTime : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_SmallDateTime());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType SmallInt
    /**
    
        . A 16-bit signed integer.

    */
    public static var SmallInt : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_SmallInt());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType SmallMoney
    /**
    
        . A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit.

    */
    public static var SmallMoney : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_SmallMoney());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Text
    /**
    
        . A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters.

    */
    public static var Text : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Text());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Timestamp
    /**
    
         of type . Automatically generated binary numbers, which are guaranteed to be unique within a database.  is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes.

    */
    public static var Timestamp : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Timestamp());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType TinyInt
    /**
    
        . An 8-bit unsigned integer.

    */
    public static var TinyInt : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_TinyInt());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType VarBinary
    /**
    
         of type . A variable-length stream of binary data ranging between 1 and 8,000 bytes. Implicit conversion fails if the byte array is greater than 8,000 bytes. Explicitly set the object when working with byte arrays larger than 8,000 bytes.

    */
    public static var VarBinary : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_VarBinary());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType VarChar
    /**
    
        . A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Use  when the database column is .

    */
    public static var VarChar : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_VarChar());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Variant
    /**
    
        . A special data type that can contain numeric, string, binary, or date data as well as the SQL Server values Empty and Null, which is assumed if no other type is declared.

    */
    public static var Variant : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Variant());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Xml
    /**
    An XML value. Obtain the XML as a string using the  method or  property, or as an  by calling the  method.

    */
    public static var Xml : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Xml());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Udt
    /**
    A SQL Server user-defined type (UDT).

    */
    public static var Udt : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Udt());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Structured
    /**
    A special data type for specifying structured data contained in table-valued parameters.

    */
    public static var Structured : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Structured());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Date
    /**
    Date data ranging in value from January 1,1 AD through December 31, 9999 AD.

    */
    public static var Date : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Date());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType Time
    /**
    Time data based on a 24-hour clock. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Corresponds to a SQL Server  value.

    */
    public static var Time : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_Time());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType DateTime2
    /**
    Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.

    */
    public static var DateTime2 : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_DateTime2());
            return __return;
        }
    }
    // static field: System.Data.SqlDbType DateTimeOffset
    /**
    Date and time data with time zone awareness. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through +14:00.

    */
    public static var DateTimeOffset : dotnet.System.Data.SqlDbType {
        get {
        let __return = dotnet.System.Data.SqlDbType(val: System_Data_SqlDbType_get_DateTimeOffset());
            return __return;
        }
    }
} // SqlDbType


// type: System.Data.StateChangeEventArgs
    /**
    Provides data for the state change event of a .NET Framework data provider.

    */
public final class StateChangeEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_StateChangeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.ConnectionState, System.Data.ConnectionState)
// docid: M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)
    /**
    Initializes a new instance of the  class, when given the original state and the current state of the object.

    - Parameter originalState: One of the  values.
    - Parameter currentState: One of the  values.
    */
    public init(originalState : dotnet.System.Data.ConnectionState, currentState : dotnet.System.Data.ConnectionState) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_StateChangeEventArgs_ctor_0__2__ConnectionState_ConnectionState(&__thrown, originalState.get_value(), currentState.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Data.ConnectionState get_CurrentState()
// docid: M:System.Data.StateChangeEventArgs.get_CurrentState
    public func get_CurrentState() throws -> dotnet.System.Data.ConnectionState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_StateChangeEventArgs_ConnectionState__get_CurrentState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ConnectionState(val: __return);
        }
    }
    // [IsSpecialName] System.Data.ConnectionState get_OriginalState()
// docid: M:System.Data.StateChangeEventArgs.get_OriginalState
    public func get_OriginalState() throws -> dotnet.System.Data.ConnectionState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_StateChangeEventArgs_ConnectionState__get_OriginalState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ConnectionState(val: __return);
        }
    }
    /**
    Gets the new state of the connection. The connection object will be in the new state already when the event is fired.

    */
    public var CurrentState : dotnet.System.Data.ConnectionState {
        get {
            return try! get_CurrentState();
        }
    }
    /**
    Gets the original state of the connection.

    */
    public var OriginalState : dotnet.System.Data.ConnectionState {
        get {
            return try! get_OriginalState();
        }
    }
} // StateChangeEventArgs


// type: System.Data.StateChangeEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class StateChangeEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_StateChangeEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.StateChangeEventArgs)
// docid: M:System.Data.StateChangeEventHandler.Invoke(System.Object,System.Data.StateChangeEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.StateChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_StateChangeEventHandler_void__Invoke_0__2__Object_StateChangeEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.StateChangeEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.StateChangeEventHandler.BeginInvoke(System.Object,System.Data.StateChangeEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.StateChangeEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_StateChangeEventHandler_IAsyncResult__BeginInvoke_0__4__Object_StateChangeEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.StateChangeEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_StateChangeEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.StateChangeEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.StateChangeEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_StateChangeEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.StateChangeEventArgs)
// docid: M:System.Data.StateChangeEventHandler.Invoke(System.Object,System.Data.StateChangeEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.StateChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_StateChangeEventHandler_void__Invoke_0__2__Object_StateChangeEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // StateChangeEventHandler


// type: System.Data.StatementCompletedEventArgs
    /**
    Provides additional information for the  event.

    */
public final class StatementCompletedEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_StatementCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)
    /**
    Creates a new instance of the  class.

    - Parameter recordCount: Indicates the number of rows affected by the statement that caused the  event to occur.
    */
    public init(recordCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_StatementCompletedEventArgs_ctor_0__1__i32(&__thrown, recordCount);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_RecordCount()
// docid: M:System.Data.StatementCompletedEventArgs.get_RecordCount
    public func get_RecordCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_StatementCompletedEventArgs_i32__get_RecordCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Indicates the number of rows affected by the statement that caused the  event to occur.

    */
    public var RecordCount : Swift.Int32 {
        get {
            return try! get_RecordCount();
        }
    }
} // StatementCompletedEventArgs


// type: System.Data.StatementCompletedEventHandler
    /**
    The delegate type for the event handlers of the  event.

    */
public final class StatementCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_StatementCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Data.StatementCompletedEventArgs)
// docid: M:System.Data.StatementCompletedEventHandler.Invoke(System.Object,System.Data.StatementCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Data.StatementCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_StatementCompletedEventHandler_void__Invoke_0__2__Object_StatementCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Data.StatementCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Data.StatementCompletedEventHandler.BeginInvoke(System.Object,System.Data.StatementCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Data.StatementCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_StatementCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_StatementCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Data.StatementCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_StatementCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Data.StatementCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Data.StatementCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Data_StatementCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Data.StatementCompletedEventArgs)
// docid: M:System.Data.StatementCompletedEventHandler.Invoke(System.Object,System.Data.StatementCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Data.StatementCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Data_StatementCompletedEventHandler_void__Invoke_0__2__Object_StatementCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // StatementCompletedEventHandler


// type: System.Data.StatementType
    /**
    Specifies the type of SQL query to be used by the , , , or  class.

    */
public struct StatementType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_StatementType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.StatementType Select
    /**
    An SQL query that is a SELECT statement.

    */
    public static var Select : dotnet.System.Data.StatementType {
        get {
        let __return = dotnet.System.Data.StatementType(val: System_Data_StatementType_get_Select());
            return __return;
        }
    }
    // static field: System.Data.StatementType Insert
    /**
    An SQL query that is an INSERT statement.

    */
    public static var Insert : dotnet.System.Data.StatementType {
        get {
        let __return = dotnet.System.Data.StatementType(val: System_Data_StatementType_get_Insert());
            return __return;
        }
    }
    // static field: System.Data.StatementType Update
    /**
    An SQL query that is an UPDATE statement.

    */
    public static var Update : dotnet.System.Data.StatementType {
        get {
        let __return = dotnet.System.Data.StatementType(val: System_Data_StatementType_get_Update());
            return __return;
        }
    }
    // static field: System.Data.StatementType Delete
    /**
    An SQL query that is a DELETE statement.

    */
    public static var Delete : dotnet.System.Data.StatementType {
        get {
        let __return = dotnet.System.Data.StatementType(val: System_Data_StatementType_get_Delete());
            return __return;
        }
    }
    // static field: System.Data.StatementType Batch
    /**
    A SQL query that is a batch statement.

    */
    public static var Batch : dotnet.System.Data.StatementType {
        get {
        let __return = dotnet.System.Data.StatementType(val: System_Data_StatementType_get_Batch());
            return __return;
        }
    }
} // StatementType


// type: System.Data.StrongTypingException
    /**
    The exception that is thrown by a strongly typed  when the user accesses a  value.

    */
open class StrongTypingException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_StrongTypingException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.StrongTypingException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_StrongTypingException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.StrongTypingException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter message: The string to display when the exception is thrown.
    */
    public init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_StrongTypingException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified string and inner exception.

    - Parameter s: The string to display when the exception is thrown.
    - Parameter innerException: A reference to an inner exception.
    */
    public override init(s : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_StrongTypingException_ctor_0__2__String_Exception(&__thrown, s?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // StrongTypingException


// type: System.Data.SyntaxErrorException
    /**
    Represents the exception that is thrown when the  property of a  contains a syntax error.

    */
open class SyntaxErrorException
    :
    dotnet.System.Data.InvalidExpressionException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_SyntaxErrorException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SyntaxErrorException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SyntaxErrorException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SyntaxErrorException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SyntaxErrorException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SyntaxErrorException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SyntaxErrorException


// type: System.Data.TypedTableBaseExtensions
public struct TypedTableBaseExtensions {
    // System.Data.EnumerableRowCollection<TRow> AsEnumerable<TRow>(System.Data.TypedTableBase<TRow>)
// docid: M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})
    /**
    Enumerates the data row elements of the  and returns an  object, where the generic parameter  is . This object can be used in a LINQ expression or method query.

    - Parameter source: The source  to make enumerable.
    - Returns: An  object, where the generic parameter  is .

    */
    public static func AsEnumerable<UTRow : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>) throws -> dotnet.System.Data.EnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_EnumerableRowCollection_UTRow___AsEnumerable_1__1__System_Data_TypedTableBase_UTRow_(UTRow.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.EnumerableRowCollection_1(hndl : __return);
        }
    }
    // TRow ElementAtOrDefault<TRow>(System.Data.TypedTableBase<TRow>, System.Int32)
// docid: M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)
    /**
    Returns the element at a specified row in a sequence or a default value if the row is out of range.

    - Parameter source: An enumerable object to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: The element at a specified row in a sequence.

    */
    public static func ElementAtOrDefault<UTRow : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, index : Swift.Int32) throws -> UTRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_UTRow__ElementAtOrDefault_1__2__System_Data_TypedTableBase_UTRow__i32(UTRow.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTRow(gval: __return);
        }
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>)
// docid: M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})
    /**
    Sorts the rows of a  in descending order according to the specified key.

    - Parameter source: A  that contains the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted by the specified key.

    */
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderByDescending_2__2__System_Data_TypedTableBase_UTRow__System_Func_UTRow_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the rows of a  in descending order according to the specified key and comparer.

    - Parameter source: A  that contains the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted by the specified key and comparer.

    */
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderByDescending_2__3__System_Data_TypedTableBase_UTRow__System_Func_UTRow_UTKey__System_Collections_Generic_IComparer_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>)
// docid: M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})
    /**
    Sorts the rows of a  in ascending order according to the specified key.

    - Parameter source: A  that contains the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted by the specified key.

    */
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderBy_2__2__System_Data_TypedTableBase_UTRow__System_Func_UTRow_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector);
    }
    // System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the rows of a  in ascending order according to the specified key and comparer.

    - Parameter source: A  that contains the  elements to be ordered.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted by the specified key and comparer.

    */
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : dotnet.System.Func_2<UTRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_OrderedEnumerableRowCollection_UTRow___OrderBy_2__3__System_Data_TypedTableBase_UTRow__System_Func_UTRow_UTKey__System_Collections_Generic_IComparer_UTKey_(UTRow.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.OrderedEnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTRow : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, keySelector : @escaping (UTRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<UTRow> {
        let del_keySelector = try dotnet.System.Func_2<UTRow,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Data.EnumerableRowCollection<S> Select<TRow, S>(System.Data.TypedTableBase<TRow>, System.Func<TRow,S>)
// docid: M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})
    /**
    Projects each element of a  into a new form.

    - Parameter source: A  that contains the  elements to invoke a transformation function upon.
    - Parameter selector: A transformation function to apply to each element.
    - Returns: An  whose elements are the result of invoking the transformation function on each element of .

    */
    public static func Select<UTRow : SGBridgeGenericValue,US : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, selector : dotnet.System.Func_2<UTRow,US>) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_EnumerableRowCollection_US___Select_2__2__System_Data_TypedTableBase_UTRow__System_Func_UTRow_US_(UTRow.get_type_handle(), US.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.EnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UTRow : SGBridgeGenericValue,US : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, selector : @escaping (UTRow) throws -> US) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        let del_selector = try dotnet.System.Func_2<UTRow,US>(selector);
        return try Select(source: source, selector: del_selector);
    }
    // System.Data.EnumerableRowCollection<TRow> Where<TRow>(System.Data.TypedTableBase<TRow>, System.Func<TRow,bool>)
// docid: M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})
    /**
    Filters a sequence of rows based on the specified predicate.

    - Parameter source: A  that contains the  elements to filter.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains rows from the input sequence that satisfy the condition.

    */
    public static func Where<UTRow : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, predicate : dotnet.System.Func_2<UTRow,Bool>) throws -> dotnet.System.Data.EnumerableRowCollection_1<UTRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBaseExtensions_System_Data_EnumerableRowCollection_UTRow___Where_1__2__System_Data_TypedTableBase_UTRow__System_Func_UTRow_bool_(UTRow.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.EnumerableRowCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UTRow : SGBridgeGenericValue>(source : dotnet.System.Data.TypedTableBase_1<UTRow>, predicate : @escaping (UTRow) throws -> Bool) throws -> dotnet.System.Data.EnumerableRowCollection_1<UTRow> {
        let del_predicate = try dotnet.System.Func_2<UTRow,Swift.Bool>(predicate);
        return try Where(source: source, predicate: del_predicate);
    }
} // TypedTableBaseExtensions


// type: System.Data.TypedTableBase`1
    /**
    This type is used as a base class for typed- object generation by Visual Studio and the XSD.exe .NET Framework tool, and is not intended to be used directly from your code.

    */
open class TypedTableBase_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Data.DataTable,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_TypedTableBase_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE (write_all_methods) (unused generic param) System.Data.EnumerableRowCollection<TResult> Cast<TResult>()
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Data.TypedTableBase`1.GetEnumerator
    /**
    Returns an enumerator for the typed-. This method supports typed- object generation by Visual Studio and the XSD.exe .NET Framework tool. This method is not intended to be used directly from your code.

    - Returns: An object that implements the  interface.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_TypedTableBase_1_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // TypedTableBase_1


// type: System.Data.UniqueConstraint
    /**
    Represents a restriction on a set of columns in which all values must be unique.

    */
open class UniqueConstraint
    :
    dotnet.System.Data.Constraint
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_UniqueConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataColumn)
// docid: M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter column: The  to constrain.
    */
    public init(column : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__1__DataColumn(&__thrown, column.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataColumn, bool)
// docid: M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)
    /**
    Initializes a new instance of the  class with the  to constrain, and a value specifying whether the constraint is a primary key.

    - Parameter column: The  to constrain.
    - Parameter isPrimaryKey: 
         to indicate that the constraint is a primary key; otherwise, .
    */
    public init(column : dotnet.System.Data.DataColumn, isPrimaryKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__2__DataColumn_bool(&__thrown, column.get_handle(), Swift.Int32(isPrimaryKey ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataColumn[])
// docid: M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])
    /**
    Initializes a new instance of the  class with the given array of  objects.

    - Parameter columns: The array of  objects to constrain.
    */
    public init(columns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__1__DataColumnArray(&__thrown, columns.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataColumn[], bool)
// docid: M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)
    /**
    Initializes a new instance of the  class with an array of  objects to constrain, and a value specifying whether the constraint is a primary key.

    - Parameter columns: An array of  objects to constrain.
    - Parameter isPrimaryKey: 
         to indicate that the constraint is a primary key; otherwise, .
    */
    public init(columns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, isPrimaryKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__2__DataColumnArray_bool(&__thrown, columns.get_handle(), Swift.Int32(isPrimaryKey ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn)
// docid: M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)
    /**
    Initializes a new instance of the  class with the specified name and .

    - Parameter name: The name of the constraint.
    - Parameter column: The  to constrain.
    */
    public init(name : Optional<dotnet.System.String>, column : dotnet.System.Data.DataColumn) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__2__String_DataColumn(&__thrown, name?.get_handle() ?? nil, column.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn, bool)
// docid: M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)
    /**
    Initializes a new instance of the  class with the specified name, the  to constrain, and a value specifying whether the constraint is a primary key.

    - Parameter name: The name of the constraint.
    - Parameter column: The  to constrain.
    - Parameter isPrimaryKey: 
         to indicate that the constraint is a primary key; otherwise, .
    */
    public init(name : Optional<dotnet.System.String>, column : dotnet.System.Data.DataColumn, isPrimaryKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__3__String_DataColumn_bool(&__thrown, name?.get_handle() ?? nil, column.get_handle(), Swift.Int32(isPrimaryKey ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn[])
// docid: M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])
    /**
    Initializes a new instance of the  class with the specified name and array of  objects.

    - Parameter name: The name of the constraint.
    - Parameter columns: The array of  objects to constrain.
    */
    public init(name : Optional<dotnet.System.String>, columns : dotnet.System_Arr<dotnet.System.Data.DataColumn>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__2__String_DataColumnArray(&__thrown, name?.get_handle() ?? nil, columns.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Data.DataColumn[], bool)
// docid: M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)
    /**
    Initializes a new instance of the  class with the specified name, an array of  objects to constrain, and a value specifying whether the constraint is a primary key.

    - Parameter name: The name of the constraint.
    - Parameter columns: An array of  objects to constrain.
    - Parameter isPrimaryKey: 
         to indicate that the constraint is a primary key; otherwise, .
    */
    public init(name : Optional<dotnet.System.String>, columns : dotnet.System_Arr<dotnet.System.Data.DataColumn>, isPrimaryKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__3__String_DataColumnArray_bool(&__thrown, name?.get_handle() ?? nil, columns.get_handle(), Swift.Int32(isPrimaryKey ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String[], bool)
// docid: M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)
    /**
    Initializes a new instance of the  class with the specified name, an array of  objects to constrain, and a value specifying whether the constraint is a primary key.

    - Parameter name: The name of the constraint.
    - Parameter columnNames: An array of  objects to constrain.
    - Parameter isPrimaryKey: 
         to indicate that the constraint is a primary key; otherwise, .
    */
    public init(name : Optional<dotnet.System.String>, columnNames : Optional<dotnet.System_Arr<dotnet.System.String>>, isPrimaryKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_UniqueConstraint_ctor_0__3__String_StringArray_bool(&__thrown, name?.get_handle() ?? nil, (columnNames?.get_handle()), Swift.Int32(isPrimaryKey ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.UniqueConstraint.Equals(System.Object)
    /**
    Compares this constraint to a second to determine if both are identical.

    - Parameter key2: The object to which this  is compared.
    - Returns: 
        , if the constraints are equal; otherwise, .

    */
    open func Equals(key2 : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_UniqueConstraint_bool__Equals_0__1__Object(&__thrown, self.get_handle(), key2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.UniqueConstraint.GetHashCode
    /**
    Gets the hash code of this instance of the  object.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_UniqueConstraint_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.DataColumn[] get_Columns()
// docid: M:System.Data.UniqueConstraint.get_Columns
    open func get_Columns() throws -> dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_UniqueConstraint_DataColumnArray__get_Columns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataColumn>(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsPrimaryKey()
// docid: M:System.Data.UniqueConstraint.get_IsPrimaryKey
    open func get_IsPrimaryKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_UniqueConstraint_bool__get_IsPrimaryKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Data.DataTable get_Table()
// docid: M:System.Data.UniqueConstraint.get_Table
    open override func get_Table() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_UniqueConstraint_DataTable__get_Table_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the array of columns that this constraint affects.

    */
    open var Columns : dotnet.System_Arr<dotnet.System.Data.DataColumn> {
        get {
            return try! get_Columns();
        }
    }
    /**
    Gets a value indicating whether or not the constraint is on a primary key.

    */
    open var IsPrimaryKey : Bool {
        get {
            return try! get_IsPrimaryKey();
        }
    }
    /**
    Gets the table to which this constraint belongs.

    */
    open override var Table : Optional<dotnet.System.Data.DataTable> {
        get {
            return try! get_Table();
        }
    }
} // UniqueConstraint


// type: System.Data.UpdateRowSource
    /**
    Specifies how query command results are applied to the row being updated.

    */
public struct UpdateRowSource : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_UpdateRowSource_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.UpdateRowSource None
    /**
    Any returned parameters or rows are ignored.

    */
    public static var None : dotnet.System.Data.UpdateRowSource {
        get {
        let __return = dotnet.System.Data.UpdateRowSource(val: System_Data_UpdateRowSource_get_None());
            return __return;
        }
    }
    // static field: System.Data.UpdateRowSource OutputParameters
    /**
    Output parameters are mapped to the changed row in the .

    */
    public static var OutputParameters : dotnet.System.Data.UpdateRowSource {
        get {
        let __return = dotnet.System.Data.UpdateRowSource(val: System_Data_UpdateRowSource_get_OutputParameters());
            return __return;
        }
    }
    // static field: System.Data.UpdateRowSource FirstReturnedRecord
    /**
    The data in the first returned row is mapped to the changed row in the .

    */
    public static var FirstReturnedRecord : dotnet.System.Data.UpdateRowSource {
        get {
        let __return = dotnet.System.Data.UpdateRowSource(val: System_Data_UpdateRowSource_get_FirstReturnedRecord());
            return __return;
        }
    }
    // static field: System.Data.UpdateRowSource Both
    /**
    Both the output parameters and the first returned row are mapped to the changed row in the .

    */
    public static var Both : dotnet.System.Data.UpdateRowSource {
        get {
        let __return = dotnet.System.Data.UpdateRowSource(val: System_Data_UpdateRowSource_get_Both());
            return __return;
        }
    }
} // UpdateRowSource


// type: System.Data.UpdateStatus
    /**
    Specifies the action to take with regard to the current and remaining rows during an .

    */
public struct UpdateStatus : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_UpdateStatus_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.UpdateStatus Continue
    /**
    The  is to continue processing rows.

    */
    public static var Continue : dotnet.System.Data.UpdateStatus {
        get {
        let __return = dotnet.System.Data.UpdateStatus(val: System_Data_UpdateStatus_get_Continue());
            return __return;
        }
    }
    // static field: System.Data.UpdateStatus ErrorsOccurred
    /**
    The event handler reports that the update should be treated as an error.

    */
    public static var ErrorsOccurred : dotnet.System.Data.UpdateStatus {
        get {
        let __return = dotnet.System.Data.UpdateStatus(val: System_Data_UpdateStatus_get_ErrorsOccurred());
            return __return;
        }
    }
    // static field: System.Data.UpdateStatus SkipCurrentRow
    /**
    The current row is not to be updated.

    */
    public static var SkipCurrentRow : dotnet.System.Data.UpdateStatus {
        get {
        let __return = dotnet.System.Data.UpdateStatus(val: System_Data_UpdateStatus_get_SkipCurrentRow());
            return __return;
        }
    }
    // static field: System.Data.UpdateStatus SkipAllRemainingRows
    /**
    The current row and all remaining rows are not to be updated.

    */
    public static var SkipAllRemainingRows : dotnet.System.Data.UpdateStatus {
        get {
        let __return = dotnet.System.Data.UpdateStatus(val: System_Data_UpdateStatus_get_SkipAllRemainingRows());
            return __return;
        }
    }
} // UpdateStatus


// type: System.Data.VersionNotFoundException
    /**
    Represents the exception that is thrown when you try to return a version of a  that has been deleted.

    */
open class VersionNotFoundException
    :
    dotnet.System.Data.DataException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_VersionNotFoundException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.VersionNotFoundException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_VersionNotFoundException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.VersionNotFoundException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string.

    - Parameter s: The string to display when the exception is thrown.
    */
    public override init(s : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_VersionNotFoundException_ctor_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference ( in Visual Basic) if no inner exception is specified.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_VersionNotFoundException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // VersionNotFoundException


// type: System.Data.XmlReadMode
    /**
    Specifies how to read XML data and a relational schema into a .

    */
public struct XmlReadMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_XmlReadMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.XmlReadMode Auto
    /**
    The default read mode.

    */
    public static var Auto : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_Auto());
            return __return;
        }
    }
    // static field: System.Data.XmlReadMode ReadSchema
    /**
    Reads any inline schema and loads the data. If the  already contains schema, new tables may be added to the schema, but an exception is thrown if any tables in the inline schema already exist in the .

    */
    public static var ReadSchema : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_ReadSchema());
            return __return;
        }
    }
    // static field: System.Data.XmlReadMode IgnoreSchema
    /**
    Ignores any inline schema and reads data into the existing  schema. If any data does not match the existing schema, it is discarded (including data from differing namespaces defined for the ). If the data is a DiffGram,  has the same functionality as .

    */
    public static var IgnoreSchema : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_IgnoreSchema());
            return __return;
        }
    }
    // static field: System.Data.XmlReadMode InferSchema
    /**
    Ignores any inline schema, infers schema from the data and loads the data. If the  already contains a schema, the current schema is extended by adding new tables or adding columns to existing tables. An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.

    */
    public static var InferSchema : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_InferSchema());
            return __return;
        }
    }
    // static field: System.Data.XmlReadMode DiffGram
    /**
    Reads a DiffGram, applying changes from the DiffGram to the . The semantics are identical to those of a  operation. As with the  operation,  values are preserved. Input to  with DiffGrams should only be obtained using the output from  as a DiffGram.
        
The target  must have the same schema as the  on which  as DiffGram is called. Otherwise the DiffGram merge operation fails and an exception is thrown.

    */
    public static var DiffGram : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_DiffGram());
            return __return;
        }
    }
    // static field: System.Data.XmlReadMode Fragment
    /**
    Reads XML fragments, such as those generated by executing FOR XML queries, against an instance of SQL Server. When  is set to , the default namespace is read as the inline schema.

    */
    public static var Fragment : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_Fragment());
            return __return;
        }
    }
    // static field: System.Data.XmlReadMode InferTypedSchema
    /**
    Ignores any inline schema, infers a strongly typed schema from the data, and loads the data. If the type cannot be inferred from the data, it is interpreted as string data. If the  already contains a schema, the current schema is extended, either by adding new tables or by adding columns to existing tables. An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.

    */
    public static var InferTypedSchema : dotnet.System.Data.XmlReadMode {
        get {
        let __return = dotnet.System.Data.XmlReadMode(val: System_Data_XmlReadMode_get_InferTypedSchema());
            return __return;
        }
    }
} // XmlReadMode


// type: System.Data.XmlWriteMode
    /**
    Specifies how to write XML data and a relational schema from a .

    */
public struct XmlWriteMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_XmlWriteMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.XmlWriteMode WriteSchema
    /**
    Writes the current contents of the  as XML data with the relational structure as inline XSD schema. If the  has only a schema with no data, only the inline schema is written. If the  does not have a current schema, nothing is written.

    */
    public static var WriteSchema : dotnet.System.Data.XmlWriteMode {
        get {
        let __return = dotnet.System.Data.XmlWriteMode(val: System_Data_XmlWriteMode_get_WriteSchema());
            return __return;
        }
    }
    // static field: System.Data.XmlWriteMode IgnoreSchema
    /**
    Writes the current contents of the  as XML data, without an XSD schema. If no data is loaded into the , nothing is written.

    */
    public static var IgnoreSchema : dotnet.System.Data.XmlWriteMode {
        get {
        let __return = dotnet.System.Data.XmlWriteMode(val: System_Data_XmlWriteMode_get_IgnoreSchema());
            return __return;
        }
    }
    // static field: System.Data.XmlWriteMode DiffGram
    /**
    Writes the entire  as a DiffGram, including original and current values. To generate a DiffGram containing only changed values, call , and then call  as a DiffGram on the returned .

    */
    public static var DiffGram : dotnet.System.Data.XmlWriteMode {
        get {
        let __return = dotnet.System.Data.XmlWriteMode(val: System_Data_XmlWriteMode_get_DiffGram());
            return __return;
        }
    }
} // XmlWriteMode


}
// System.Data.Common
extension System.Data.Common {
// type: System.Data.Common.CatalogLocation
    /**
    Indicates the position of the catalog name in a qualified table name in a text command.

    */
public struct CatalogLocation : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_Common_CatalogLocation_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.Common.CatalogLocation Start
    /**
    Indicates that the position of the catalog name occurs before the schema portion of a fully qualified table name in a text command. Start and End are mutually exclusive.

    */
    public static var Start : dotnet.System.Data.Common.CatalogLocation {
        get {
        let __return = dotnet.System.Data.Common.CatalogLocation(val: System_Data_Common_CatalogLocation_get_Start());
            return __return;
        }
    }
    // static field: System.Data.Common.CatalogLocation End
    /**
    Indicates that the position of the catalog name occurs after the schema portion of a fully qualified table name in a text command. End and Start are mutually exclusive.

    */
    public static var End : dotnet.System.Data.Common.CatalogLocation {
        get {
        let __return = dotnet.System.Data.Common.CatalogLocation(val: System_Data_Common_CatalogLocation_get_End());
            return __return;
        }
    }
} // CatalogLocation


// type: System.Data.Common.DataAdapter
    /**
    Represents a set of SQL commands and a database connection that are used to fill the  and update the data source.

    */
open class DataAdapter
    :
    dotnet.System.ComponentModel.Component,
    System_Data_IDataAdapter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DataAdapter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 Fill(System.Data.DataSet)
// docid: M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
    /**
    Adds or refreshes rows in the  to match those in the data source.

    - Parameter dataSet: A  to fill with records and, if necessary, schema.
    - Returns: The number of rows successfully added to or refreshed in the . This does not include rows affected by statements that do not return rows.

    */
    open func Fill(dataSet : dotnet.System.Data.DataSet) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_i32__Fill_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.DataTable[] FillSchema(System.Data.DataSet, System.Data.SchemaType)
// docid: M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
    /**
    Adds a  to the specified  and configures the schema to match that in the data source based on the specified .

    - Parameter dataSet: The  to be filled with the schema from the data source.
    - Parameter schemaType: One of the  values.
    - Returns: A  object that contains schema information returned from the data source.

    */
    open func FillSchema(dataSet : dotnet.System.Data.DataSet, schemaType : dotnet.System.Data.SchemaType) throws -> dotnet.System_Arr<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_DataTableArray__FillSchema_0__2__DataSet_SchemaType(&__thrown, self.get_handle(), dataSet.get_handle(), schemaType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataTable>(hndl : __return);
        }
    }
    // System.Data.IDataParameter[] GetFillParameters()
// docid: M:System.Data.Common.DataAdapter.GetFillParameters
    /**
    Gets the parameters set by the user when executing an SQL SELECT statement.

    - Returns: An array of  objects that contains the parameters set by the user.

    */
    open func GetFillParameters() throws -> dotnet.System_Arr<dotnet.System.Data.IDataParameter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_IDataParameterArray__GetFillParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.IDataParameter>(hndl : __return);
        }
    }
    // void ResetFillLoadOption()
// docid: M:System.Data.Common.DataAdapter.ResetFillLoadOption
    /**
    Resets  to its default state and causes  to honor .

    */
    open func ResetFillLoadOption() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__ResetFillLoadOption_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ShouldSerializeAcceptChangesDuringFill()
// docid: M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
    /**
    Determines whether the  property should be persisted.

    - Returns: 
         if the  property is persisted; otherwise .

    */
    open func ShouldSerializeAcceptChangesDuringFill() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_bool__ShouldSerializeAcceptChangesDuringFill_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ShouldSerializeFillLoadOption()
// docid: M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
    /**
    Determines whether the  property should be persisted.

    - Returns: 
         if the  property is persisted; otherwise .

    */
    open func ShouldSerializeFillLoadOption() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_bool__ShouldSerializeFillLoadOption_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 Update(System.Data.DataSet)
// docid: M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)
    /**
    Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified  from a  named "Table."

    - Parameter dataSet: The  used to update the data source.
    - Returns: The number of rows successfully updated from the .

    */
    open func Update(dataSet : dotnet.System.Data.DataSet) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_i32__Update_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_AcceptChangesDuringFill()
// docid: M:System.Data.Common.DataAdapter.get_AcceptChangesDuringFill
    open func get_AcceptChangesDuringFill() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_bool__get_AcceptChangesDuringFill_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AcceptChangesDuringFill(bool)
// docid: M:System.Data.Common.DataAdapter.set_AcceptChangesDuringFill(System.Boolean)
    open func set_AcceptChangesDuringFill(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_AcceptChangesDuringFill_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AcceptChangesDuringUpdate()
// docid: M:System.Data.Common.DataAdapter.get_AcceptChangesDuringUpdate
    open func get_AcceptChangesDuringUpdate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_bool__get_AcceptChangesDuringUpdate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AcceptChangesDuringUpdate(bool)
// docid: M:System.Data.Common.DataAdapter.set_AcceptChangesDuringUpdate(System.Boolean)
    open func set_AcceptChangesDuringUpdate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_AcceptChangesDuringUpdate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ContinueUpdateOnError()
// docid: M:System.Data.Common.DataAdapter.get_ContinueUpdateOnError
    open func get_ContinueUpdateOnError() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_bool__get_ContinueUpdateOnError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ContinueUpdateOnError(bool)
// docid: M:System.Data.Common.DataAdapter.set_ContinueUpdateOnError(System.Boolean)
    open func set_ContinueUpdateOnError(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_ContinueUpdateOnError_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.LoadOption get_FillLoadOption()
// docid: M:System.Data.Common.DataAdapter.get_FillLoadOption
    open func get_FillLoadOption() throws -> dotnet.System.Data.LoadOption {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_LoadOption__get_FillLoadOption_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.LoadOption(val: __return);
        }
    }
    // [IsSpecialName] void set_FillLoadOption(System.Data.LoadOption)
// docid: M:System.Data.Common.DataAdapter.set_FillLoadOption(System.Data.LoadOption)
    open func set_FillLoadOption(value : dotnet.System.Data.LoadOption) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_FillLoadOption_0__1__LoadOption(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.MissingMappingAction get_MissingMappingAction()
// docid: M:System.Data.Common.DataAdapter.get_MissingMappingAction
    open /* method final */ func get_MissingMappingAction() throws -> dotnet.System.Data.MissingMappingAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_MissingMappingAction__get_MissingMappingAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.MissingMappingAction(val: __return);
        }
    }
    // [IsSpecialName] void set_MissingMappingAction(System.Data.MissingMappingAction)
// docid: M:System.Data.Common.DataAdapter.set_MissingMappingAction(System.Data.MissingMappingAction)
    open /* method final */ func set_MissingMappingAction(value : dotnet.System.Data.MissingMappingAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_MissingMappingAction_0__1__MissingMappingAction(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.MissingSchemaAction get_MissingSchemaAction()
// docid: M:System.Data.Common.DataAdapter.get_MissingSchemaAction
    open /* method final */ func get_MissingSchemaAction() throws -> dotnet.System.Data.MissingSchemaAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_MissingSchemaAction__get_MissingSchemaAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.MissingSchemaAction(val: __return);
        }
    }
    // [IsSpecialName] void set_MissingSchemaAction(System.Data.MissingSchemaAction)
// docid: M:System.Data.Common.DataAdapter.set_MissingSchemaAction(System.Data.MissingSchemaAction)
    open /* method final */ func set_MissingSchemaAction(value : dotnet.System.Data.MissingSchemaAction) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_MissingSchemaAction_0__1__MissingSchemaAction(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ReturnProviderSpecificTypes()
// docid: M:System.Data.Common.DataAdapter.get_ReturnProviderSpecificTypes
    open func get_ReturnProviderSpecificTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_bool__get_ReturnProviderSpecificTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ReturnProviderSpecificTypes(bool)
// docid: M:System.Data.Common.DataAdapter.set_ReturnProviderSpecificTypes(System.Boolean)
    open func set_ReturnProviderSpecificTypes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__set_ReturnProviderSpecificTypes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataTableMappingCollection get_TableMappings()
// docid: M:System.Data.Common.DataAdapter.get_TableMappings
    open func get_TableMappings() throws -> dotnet.System.Data.Common.DataTableMappingCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataAdapter_DataTableMappingCollection__get_TableMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMappingCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void add_FillError(System.Data.FillErrorEventHandler)
// docid: M:System.Data.Common.DataAdapter.add_FillError(System.Data.FillErrorEventHandler)
    open func add_FillError(value : Optional<dotnet.System.Data.FillErrorEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__add_FillError_0__1__FillErrorEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_FillError(value : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.FillErrorEventHandler(value);
        return try add_FillError(value: del_value);
    }
    // [IsSpecialName] void remove_FillError(System.Data.FillErrorEventHandler)
// docid: M:System.Data.Common.DataAdapter.remove_FillError(System.Data.FillErrorEventHandler)
    open func remove_FillError(value : Optional<dotnet.System.Data.FillErrorEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataAdapter_void__remove_FillError_0__1__FillErrorEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_FillError(value : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.FillErrorEventHandler(value);
        return try remove_FillError(value: del_value);
    }
    /**
    Gets or sets a value indicating whether  is called on a  after it is added to the  during any of the Fill operations.

    */
    open var AcceptChangesDuringFill : Bool {
        get {
            return try! get_AcceptChangesDuringFill();
        }
        set(v) {
            return try! set_AcceptChangesDuringFill(value: v);
        }
    }
    /**
    Gets or sets whether  is called during a .

    */
    open var AcceptChangesDuringUpdate : Bool {
        get {
            return try! get_AcceptChangesDuringUpdate();
        }
        set(v) {
            return try! set_AcceptChangesDuringUpdate(value: v);
        }
    }
    /**
    Gets or sets a value that specifies whether to generate an exception when an error is encountered during a row update.

    */
    open var ContinueUpdateOnError : Bool {
        get {
            return try! get_ContinueUpdateOnError();
        }
        set(v) {
            return try! set_ContinueUpdateOnError(value: v);
        }
    }
    /**
    Gets or sets the  that determines how the adapter fills the  from the .

    */
    open var FillLoadOption : dotnet.System.Data.LoadOption {
        get {
            return try! get_FillLoadOption();
        }
        set(v) {
            return try! set_FillLoadOption(value: v);
        }
    }
    /**
    Determines the action to take when incoming data does not have a matching table or column.

    */
    public var MissingMappingAction : dotnet.System.Data.MissingMappingAction {
        get {
            return try! get_MissingMappingAction();
        }
        set(v) {
            return try! set_MissingMappingAction(value: v);
        }
    }
    /**
    Determines the action to take when existing  schema does not match incoming data.

    */
    public var MissingSchemaAction : dotnet.System.Data.MissingSchemaAction {
        get {
            return try! get_MissingSchemaAction();
        }
        set(v) {
            return try! set_MissingSchemaAction(value: v);
        }
    }
    /**
    Gets or sets whether the  method should return provider-specific values or common CLS-compliant values.

    */
    open var ReturnProviderSpecificTypes : Bool {
        get {
            return try! get_ReturnProviderSpecificTypes();
        }
        set(v) {
            return try! set_ReturnProviderSpecificTypes(value: v);
        }
    }
    /**
    Gets a collection that provides the master mapping between a source table and a .

    */
    open var TableMappings : dotnet.System.Data.Common.DataTableMappingCollection {
        get {
            return try! get_TableMappings();
        }
    }
} // DataAdapter


// type: System.Data.Common.DataColumnMapping
    /**
    Contains a generic column mapping for an object that inherits from . This class cannot be inherited.

    */
public final class DataColumnMapping
    :
    dotnet.System.MarshalByRefObject,
    System_Data_IColumnMapping,
    System_ICloneable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DataColumnMapping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.Common.DataColumnMapping.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataColumnMapping_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified source column name and  column name to map to.

    - Parameter sourceColumn: The case-sensitive column name from a data source.
    - Parameter dataSetColumn: The column name, which is not case sensitive, from a  to map to.
    */
    public init(sourceColumn : Optional<dotnet.System.String>, dataSetColumn : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataColumnMapping_ctor_0__2__String_String(&__thrown, sourceColumn?.get_handle() ?? nil, dataSetColumn?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Data.DataColumn GetDataColumnBySchemaAction(System.Data.DataTable, System.Type, System.Data.MissingSchemaAction)
// docid: M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)
    /**
    Gets a  from the given  using the  and the  property.

    - Parameter dataTable: The  to get the column from.
    - Parameter dataType: The  of the data column.
    - Parameter schemaAction: One of the  values.
    - Returns: A data column.

    */
    public func GetDataColumnBySchemaAction(dataTable : dotnet.System.Data.DataTable, dataType : Optional<dotnet.System.Type_>, schemaAction : dotnet.System.Data.MissingSchemaAction) throws -> Optional<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMapping_DataColumn__GetDataColumnBySchemaAction_0__3__DataTable_Type_MissingSchemaAction(&__thrown, self.get_handle(), dataTable.get_handle(), dataType?.get_handle() ?? nil, schemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataColumn(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataColumn GetDataColumnBySchemaAction(System.String, System.String, System.Data.DataTable, System.Type, System.Data.MissingSchemaAction)
// docid: M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)
    /**
    A static version of  that can be called without instantiating a  object.

    - Parameter sourceColumn: The case-sensitive column name from a data source.
    - Parameter dataSetColumn: The column name, which is not case sensitive, from a  to map to.
    - Parameter dataTable: An instance of .
    - Parameter dataType: The data type for the column being mapped.
    - Parameter schemaAction: Determines the action to take when existing  schema does not match incoming data.
    - Returns: A  object.

    */
    public class func GetDataColumnBySchemaAction(sourceColumn : Optional<dotnet.System.String>, dataSetColumn : Optional<dotnet.System.String>, dataTable : dotnet.System.Data.DataTable, dataType : Optional<dotnet.System.Type_>, schemaAction : dotnet.System.Data.MissingSchemaAction) throws -> Optional<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMapping_DataColumn__GetDataColumnBySchemaAction_0__5__String_String_DataTable_Type_MissingSchemaAction(&__thrown, sourceColumn?.get_handle() ?? nil, dataSetColumn?.get_handle() ?? nil, dataTable.get_handle(), dataType?.get_handle() ?? nil, schemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataColumn(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:System.Data.Common.DataColumnMapping.ToString
    /**
    Converts the current  name to a string.

    - Returns: The current  name as a string.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMapping_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DataSetColumn()
// docid: M:System.Data.Common.DataColumnMapping.get_DataSetColumn
    public func get_DataSetColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMapping_String__get_DataSetColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataSetColumn(System.String)
// docid: M:System.Data.Common.DataColumnMapping.set_DataSetColumn(System.String)
    public func set_DataSetColumn(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMapping_void__set_DataSetColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceColumn()
// docid: M:System.Data.Common.DataColumnMapping.get_SourceColumn
    public func get_SourceColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMapping_String__get_SourceColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SourceColumn(System.String)
// docid: M:System.Data.Common.DataColumnMapping.set_SourceColumn(System.String)
    public func set_SourceColumn(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMapping_void__set_SourceColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the column within the  to map to.

    */
    public var DataSetColumn : dotnet.System.String {
        get {
            return try! get_DataSetColumn();
        }
        set(v) {
            return try! set_DataSetColumn(value: v);
        }
    }
    /**
    Gets or sets the name of the column within the data source to map from. The name is case-sensitive.

    */
    public var SourceColumn : dotnet.System.String {
        get {
            return try! get_SourceColumn();
        }
        set(v) {
            return try! set_SourceColumn(value: v);
        }
    }
} // DataColumnMapping


// type: System.Data.Common.DataColumnMappingCollection
    /**
    Contains a collection of  objects.

    */
public final class DataColumnMappingCollection
    :
    dotnet.System.MarshalByRefObject,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList,
    System_Data_IColumnMappingCollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DataColumnMappingCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.Common.DataColumnMappingCollection.#ctor
    /**
    Creates an empty .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataColumnMappingCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Object)
// docid: M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)
    /**
    Adds a  object to the collection.

    - Parameter value: A  object to add to the collection.
    - Returns: The index of the  object that was added to the collection.

    */
    public func Add(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_i32__Add_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.Common.DataColumnMapping Add(System.String, System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)
    /**
    Adds a  object to the collection when given a source column name and a  column name.

    - Parameter sourceColumn: The case-sensitive name of the source column to map to.
    - Parameter dataSetColumn: The name, which is not case-sensitive, of the  column to map to.
    - Returns: The  object that was added to the collection.

    */
    public func Add(sourceColumn : Optional<dotnet.System.String>, dataSetColumn : Optional<dotnet.System.String>) throws -> dotnet.System.Data.Common.DataColumnMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_DataColumnMapping__Add_0__2__String_String(&__thrown, self.get_handle(), sourceColumn?.get_handle() ?? nil, dataSetColumn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataColumnMapping(hndl : __return);
        }
    }
    // void AddRange(System.Array)
// docid: M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)
    /**
    Copies the elements of the specified  to the end of the collection.

    - Parameter values: The  to add to the collection.
    */
    public func AddRange(values : dotnet.System.Array) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__AddRange_0__1__Array(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Data.Common.DataColumnMapping[])
// docid: M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])
    /**
    Copies the elements of the specified  array to the end of the collection.

    - Parameter values: The array of  objects to add to the collection.
    */
    public func AddRange(values : dotnet.System_Arr<dotnet.System.Data.Common.DataColumnMapping>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__AddRange_0__1__DataColumnMappingArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.Common.DataColumnMappingCollection.Clear
    /**
    Removes all  objects from the collection.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)
    /**
    Gets a value indicating whether a  object with the given  exists in the collection.

    - Parameter value: An  that is the .
    - Returns: 
         if the collection contains the specified  object; otherwise, .

    */
    public func Contains(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_bool__Contains_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)
    /**
    Gets a value indicating whether a  object with the given source column name exists in the collection.

    - Parameter value: The case-sensitive source column name of the  object.
    - Returns: 
         if collection contains a  object with the specified source column name; otherwise, .

    */
    public func Contains(value : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the elements of the  to the specified array.

    - Parameter array: An  to which to copy  elements.
    - Parameter index: The starting index of the array.
    */
    public func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Data.Common.DataColumnMapping[], System.Int32)
// docid: M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)
    /**
    Copies the elements of the  to the specified  array.

    - Parameter array: A  array to which to copy the  elements.
    - Parameter index: The zero-based index in the  at which copying begins.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.Common.DataColumnMapping>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__CopyTo_0__2__DataColumnMappingArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.Common.DataColumnMapping GetByDataSetColumn(System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)
    /**
    Gets the  object with the specified  column name.

    - Parameter value: The name, which is not case-sensitive, of the  column to find.
    - Returns: The  object with the specified  column name.

    */
    public func GetByDataSetColumn(value : dotnet.System.String) throws -> dotnet.System.Data.Common.DataColumnMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_DataColumnMapping__GetByDataSetColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataColumnMapping(hndl : __return);
        }
    }
    // System.Data.Common.DataColumnMapping GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection, System.String, System.Data.MissingMappingAction)
// docid: M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)
    /**
    Gets a  for the specified , source column name, and .

    - Parameter columnMappings: The .
    - Parameter sourceColumn: The case-sensitive source column name to find.
    - Parameter mappingAction: One of the  values.
    - Returns: A  object.

    */
    public class func GetColumnMappingBySchemaAction(columnMappings : Optional<dotnet.System.Data.Common.DataColumnMappingCollection>, sourceColumn : dotnet.System.String, mappingAction : dotnet.System.Data.MissingMappingAction) throws -> Optional<dotnet.System.Data.Common.DataColumnMapping> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_DataColumnMapping__GetColumnMappingBySchemaAction_0__3__DataColumnMappingCollection_String_MissingMappingAction(&__thrown, columnMappings?.get_handle() ?? nil, sourceColumn.get_handle(), mappingAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DataColumnMapping(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataColumn GetDataColumn(System.Data.Common.DataColumnMappingCollection, System.String, System.Type, System.Data.DataTable, System.Data.MissingMappingAction, System.Data.MissingSchemaAction)
// docid: M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)
    /**
    A static method that returns a  object without instantiating a  object.

    - Parameter columnMappings: The .
    - Parameter sourceColumn: The case-sensitive column name from a data source.
    - Parameter dataType: The data type for the column being mapped.
    - Parameter dataTable: An instance of .
    - Parameter mappingAction: One of the  values.
    - Parameter schemaAction: Determines the action to take when the existing  schema does not match incoming data.
    - Returns: A  object.

    */
    public class func GetDataColumn(columnMappings : Optional<dotnet.System.Data.Common.DataColumnMappingCollection>, sourceColumn : dotnet.System.String, dataType : Optional<dotnet.System.Type_>, dataTable : dotnet.System.Data.DataTable, mappingAction : dotnet.System.Data.MissingMappingAction, schemaAction : dotnet.System.Data.MissingSchemaAction) throws -> Optional<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_DataColumn__GetDataColumn_0__6__DataColumnMappingCollection_String_Type_DataTable_MissingMappingAction_MissingSchemaAction(&__thrown, columnMappings?.get_handle() ?? nil, sourceColumn.get_handle(), dataType?.get_handle() ?? nil, dataTable.get_handle(), mappingAction.get_value(), schemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataColumn(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.Common.DataColumnMappingCollection.GetEnumerator
    /**
    Gets an enumerator that can iterate through the collection.

    - Returns: An  that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Object)
// docid: M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)
    /**
    Gets the location of the specified  that is a  within the collection.

    - Parameter value: An  that is the  to find.
    - Returns: The zero-based location of the specified  that is a  within the collection.

    */
    public func IndexOf(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_i32__IndexOf_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)
    /**
    Gets the location of the  with the specified source column name.

    - Parameter sourceColumn: The case-sensitive name of the source column.
    - Returns: The zero-based location of the  with the specified case-sensitive source column name.

    */
    public func IndexOf(sourceColumn : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), sourceColumn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfDataSetColumn(System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)
    /**
    Gets the location of the specified  with the given  column name.

    - Parameter dataSetColumn: The name, which is not case-sensitive, of the data set column to find.
    - Returns: The zero-based location of the specified  with the given  column name, or -1 if the  object does not exist in the collection.

    */
    public func IndexOfDataSetColumn(dataSetColumn : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_i32__IndexOfDataSetColumn_0__1__String(&__thrown, self.get_handle(), dataSetColumn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Data.Common.DataColumnMapping)
// docid: M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)
    /**
    Inserts a  object into the  at the specified index.

    - Parameter index: The zero-based index of the  object to insert.
    - Parameter value: The  object.
    */
    public func Insert(index : Swift.Int32, value : dotnet.System.Data.Common.DataColumnMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__Insert_0__2__i32_DataColumnMapping(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Insert(System.Int32, System.Object)
// docid: M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)
    /**
    Inserts a  object into the  at the specified index.

    - Parameter index: The zero-based index of the  object to insert.
    - Parameter value: The  object.
    */
    public func Insert(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__Insert_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Data.Common.DataColumnMapping)
// docid: M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)
    /**
    Removes the specified  from the collection.

    - Parameter value: The  to remove.
    */
    public func Remove(value : dotnet.System.Data.Common.DataColumnMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__Remove_0__1__DataColumnMapping(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Object)
// docid: M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)
    /**
    Removes the  that is a  from the collection.

    - Parameter value: The  that is the  to remove.
    */
    public func Remove(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__Remove_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)
    /**
    Removes the  object with the specified index from the collection.

    - Parameter index: The zero-based index of the  object to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)
    /**
    Removes the  object with the specified source column name from the collection.

    - Parameter sourceColumn: The case-sensitive source column name.
    */
    public func RemoveAt(sourceColumn : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__RemoveAt_0__1__String(&__thrown, self.get_handle(), sourceColumn.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.Common.DataColumnMappingCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataColumnMapping get_Item(System.Int32)
// docid: M:System.Data.Common.DataColumnMappingCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.Common.DataColumnMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_DataColumnMapping__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataColumnMapping(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Data.Common.DataColumnMapping)
// docid: M:System.Data.Common.DataColumnMappingCollection.set_Item(System.Int32,System.Data.Common.DataColumnMapping)
    public func set_Item(index : Swift.Int32, value : dotnet.System.Data.Common.DataColumnMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__set_Item_0__2__i32_DataColumnMapping(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataColumnMapping get_Item(System.String)
// docid: M:System.Data.Common.DataColumnMappingCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(sourceColumn : dotnet.System.String) throws -> dotnet.System.Data.Common.DataColumnMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataColumnMappingCollection_DataColumnMapping__get_Item_0__1__String(&__thrown, self.get_handle(), sourceColumn.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataColumnMapping(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Data.Common.DataColumnMapping)
// docid: M:System.Data.Common.DataColumnMappingCollection.set_Item(System.String,System.Data.Common.DataColumnMapping)
    public func set_Item(sourceColumn : dotnet.System.String, value : dotnet.System.Data.Common.DataColumnMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataColumnMappingCollection_void__set_Item_0__2__String_DataColumnMapping(&__thrown, self.get_handle(), sourceColumn.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of  objects in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // DataColumnMappingCollection


// type: System.Data.Common.DataTableMapping
    /**
    Contains a description of a mapped relationship between a source table and a . This class is used by a  when populating a .

    */
public final class DataTableMapping
    :
    dotnet.System.MarshalByRefObject,
    System_Data_ITableMapping,
    System_ICloneable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DataTableMapping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.Common.DataTableMapping.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataTableMapping_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with a source when given a source table name and a  name.

    - Parameter sourceTable: The case-sensitive source table name from a data source.
    - Parameter dataSetTable: The table name from a  to map to.
    */
    public init(sourceTable : Optional<dotnet.System.String>, dataSetTable : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataTableMapping_ctor_0__2__String_String(&__thrown, sourceTable?.get_handle() ?? nil, dataSetTable?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Data.Common.DataColumnMapping[])
// docid: M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])
    /**
    Initializes a new instance of the  class when given a source table name, a  name, and an array of  objects.

    - Parameter sourceTable: The case-sensitive source table name from a data source.
    - Parameter dataSetTable: The table name from a  to map to.
    - Parameter columnMappings: An array of  objects.
    */
    public init(sourceTable : Optional<dotnet.System.String>, dataSetTable : Optional<dotnet.System.String>, columnMappings : Optional<dotnet.System_Arr<dotnet.System.Data.Common.DataColumnMapping>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataTableMapping_ctor_0__3__String_String_DataColumnMappingArray(&__thrown, sourceTable?.get_handle() ?? nil, dataSetTable?.get_handle() ?? nil, (columnMappings?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Data.Common.DataColumnMapping GetColumnMappingBySchemaAction(System.String, System.Data.MissingMappingAction)
// docid: M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)
    /**
    Gets a  from the specified  using the specified  value and the name of the .

    - Parameter sourceColumn: The name of the .
    - Parameter mappingAction: One of the  values.
    - Returns: A data column.

    */
    public func GetColumnMappingBySchemaAction(sourceColumn : dotnet.System.String, mappingAction : dotnet.System.Data.MissingMappingAction) throws -> Optional<dotnet.System.Data.Common.DataColumnMapping> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_DataColumnMapping__GetColumnMappingBySchemaAction_0__2__String_MissingMappingAction(&__thrown, self.get_handle(), sourceColumn.get_handle(), mappingAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DataColumnMapping(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataColumn GetDataColumn(System.String, System.Type, System.Data.DataTable, System.Data.MissingMappingAction, System.Data.MissingSchemaAction)
// docid: M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)
    /**
    Returns a  object for a given column name.

    - Parameter sourceColumn: The name of the .
    - Parameter dataType: The data type for .
    - Parameter dataTable: The table name from a  to map to.
    - Parameter mappingAction: One of the  values.
    - Parameter schemaAction: One of the  values.
    - Returns: A  object.

    */
    public func GetDataColumn(sourceColumn : dotnet.System.String, dataType : Optional<dotnet.System.Type_>, dataTable : dotnet.System.Data.DataTable, mappingAction : dotnet.System.Data.MissingMappingAction, schemaAction : dotnet.System.Data.MissingSchemaAction) throws -> Optional<dotnet.System.Data.DataColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_DataColumn__GetDataColumn_0__5__String_Type_DataTable_MissingMappingAction_MissingSchemaAction(&__thrown, self.get_handle(), sourceColumn.get_handle(), dataType?.get_handle() ?? nil, dataTable.get_handle(), mappingAction.get_value(), schemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataColumn(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.DataTable GetDataTableBySchemaAction(System.Data.DataSet, System.Data.MissingSchemaAction)
// docid: M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)
    /**
    Gets the current  for the specified  using the specified  value.

    - Parameter dataSet: The  from which to get the .
    - Parameter schemaAction: One of the  values.
    - Returns: A data table.

    */
    public func GetDataTableBySchemaAction(dataSet : dotnet.System.Data.DataSet, schemaAction : dotnet.System.Data.MissingSchemaAction) throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_DataTable__GetDataTableBySchemaAction_0__2__DataSet_MissingSchemaAction(&__thrown, self.get_handle(), dataSet.get_handle(), schemaAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:System.Data.Common.DataTableMapping.ToString
    /**
    Converts the current  name to a string.

    - Returns: The current  name, as a string.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Common.DataColumnMappingCollection get_ColumnMappings()
// docid: M:System.Data.Common.DataTableMapping.get_ColumnMappings
    public func get_ColumnMappings() throws -> dotnet.System.Data.Common.DataColumnMappingCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_DataColumnMappingCollection__get_ColumnMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataColumnMappingCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DataSetTable()
// docid: M:System.Data.Common.DataTableMapping.get_DataSetTable
    public func get_DataSetTable() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_String__get_DataSetTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataSetTable(System.String)
// docid: M:System.Data.Common.DataTableMapping.set_DataSetTable(System.String)
    public func set_DataSetTable(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMapping_void__set_DataSetTable_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceTable()
// docid: M:System.Data.Common.DataTableMapping.get_SourceTable
    public func get_SourceTable() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMapping_String__get_SourceTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SourceTable(System.String)
// docid: M:System.Data.Common.DataTableMapping.set_SourceTable(System.String)
    public func set_SourceTable(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMapping_void__set_SourceTable_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the  for the .

    */
    public var ColumnMappings : dotnet.System.Data.Common.DataColumnMappingCollection {
        get {
            return try! get_ColumnMappings();
        }
    }
    /**
    Gets or sets the table name from a .

    */
    public var DataSetTable : dotnet.System.String {
        get {
            return try! get_DataSetTable();
        }
        set(v) {
            return try! set_DataSetTable(value: v);
        }
    }
    /**
    Gets or sets the case-sensitive source table name from a data source.

    */
    public var SourceTable : dotnet.System.String {
        get {
            return try! get_SourceTable();
        }
        set(v) {
            return try! set_SourceTable(value: v);
        }
    }
} // DataTableMapping


// type: System.Data.Common.DataTableMappingCollection
    /**
    A collection of  objects. This class cannot be inherited.

    */
public final class DataTableMappingCollection
    :
    dotnet.System.MarshalByRefObject,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList,
    System_Data_ITableMappingCollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DataTableMappingCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.Common.DataTableMappingCollection.#ctor
    /**
    Initializes a new instance of the  class. This new instance is empty, that is, it does not yet contain any  objects.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DataTableMappingCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Object)
// docid: M:System.Data.Common.DataTableMappingCollection.Add(System.Object)
    /**
    Adds an  that is a table mapping to the collection.

    - Parameter value: A  object to add to the collection.
    - Returns: The index of the  object added to the collection.

    */
    public func Add(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_i32__Add_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.Common.DataTableMapping Add(System.String, System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)
    /**
    Adds a  object to the collection when given a source table name and a  table name.

    - Parameter sourceTable: The case-sensitive name of the source table to map from.
    - Parameter dataSetTable: The name, which is not case-sensitive, of the  table to map to.
    - Returns: The  object that was added to the collection.

    */
    public func Add(sourceTable : Optional<dotnet.System.String>, dataSetTable : Optional<dotnet.System.String>) throws -> dotnet.System.Data.Common.DataTableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_DataTableMapping__Add_0__2__String_String(&__thrown, self.get_handle(), sourceTable?.get_handle() ?? nil, dataSetTable?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMapping(hndl : __return);
        }
    }
    // void AddRange(System.Array)
// docid: M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)
    /**
    Copies the elements of the specified  to the end of the collection.

    - Parameter values: An  of values to add to the collection.
    */
    public func AddRange(values : dotnet.System.Array) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__AddRange_0__1__Array(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Data.Common.DataTableMapping[])
// docid: M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])
    /**
    Copies the elements of the specified  array to the end of the collection.

    - Parameter values: The array of  objects to add to the collection.
    */
    public func AddRange(values : dotnet.System_Arr<dotnet.System.Data.Common.DataTableMapping>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__AddRange_0__1__DataTableMappingArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.Common.DataTableMappingCollection.Clear
    /**
    Removes all  objects from the collection.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)
    /**
    Gets a value indicating whether the given  object exists in the collection.

    - Parameter value: An  that is the .
    - Returns: 
         if this collection contains the specified ; otherwise .

    */
    public func Contains(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_bool__Contains_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.Contains(System.String)
    /**
    Gets a value indicating whether a  object with the specified source table name exists in the collection.

    - Parameter value: The case-sensitive source table name containing the  object.
    - Returns: 
         if the collection contains a  object with this source table name; otherwise .

    */
    public func Contains(value : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the elements of the  to the specified array.

    - Parameter array: An  to which to copy the  elements.
    - Parameter index: The starting index of the array.
    */
    public func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Data.Common.DataTableMapping[], System.Int32)
// docid: M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)
    /**
    Copies the elements of the  to the specified array.

    - Parameter array: A  to which to copy the  elements.
    - Parameter index: The starting index of the array.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.Common.DataTableMapping>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__CopyTo_0__2__DataTableMappingArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.Common.DataTableMapping GetByDataSetTable(System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)
    /**
    Gets the  object with the specified  table name.

    - Parameter dataSetTable: The name, which is not case-sensitive, of the  table to find.
    - Returns: The  object with the specified  table name.

    */
    public func GetByDataSetTable(dataSetTable : dotnet.System.String) throws -> dotnet.System.Data.Common.DataTableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_DataTableMapping__GetByDataSetTable_0__1__String(&__thrown, self.get_handle(), dataSetTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMapping(hndl : __return);
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.Common.DataTableMappingCollection.GetEnumerator
    /**
    Gets an enumerator that can iterate through the collection.

    - Returns: An  that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Data.Common.DataTableMapping GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection, System.String, System.String, System.Data.MissingMappingAction)
// docid: M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)
    /**
    Gets a  object with the specified source table name and  table name, using the given .

    - Parameter tableMappings: The  collection to search.
    - Parameter sourceTable: The case-sensitive name of the mapped source table.
    - Parameter dataSetTable: The name, which is not case-sensitive, of the mapped  table.
    - Parameter mappingAction: One of the  values.
    - Returns: A  object.

    */
    public class func GetTableMappingBySchemaAction(tableMappings : Optional<dotnet.System.Data.Common.DataTableMappingCollection>, sourceTable : dotnet.System.String, dataSetTable : dotnet.System.String, mappingAction : dotnet.System.Data.MissingMappingAction) throws -> Optional<dotnet.System.Data.Common.DataTableMapping> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_DataTableMapping__GetTableMappingBySchemaAction_0__4__DataTableMappingCollection_String_String_MissingMappingAction(&__thrown, tableMappings?.get_handle() ?? nil, sourceTable.get_handle(), dataSetTable.get_handle(), mappingAction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DataTableMapping(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Int32 IndexOf(System.Object)
// docid: M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)
    /**
    Gets the location of the specified  object within the collection.

    - Parameter value: An  that is the  object to find.
    - Returns: The zero-based location of the specified  object within the collection.

    */
    public func IndexOf(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_i32__IndexOf_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)
    /**
    Gets the location of the  object with the specified source table name.

    - Parameter sourceTable: The case-sensitive name of the source table.
    - Returns: The zero-based location of the  object with the specified source table name.

    */
    public func IndexOf(sourceTable : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), sourceTable?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfDataSetTable(System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)
    /**
    Gets the location of the  object with the specified  table name.

    - Parameter dataSetTable: The name, which is not case-sensitive, of the  table to find.
    - Returns: The zero-based location of the  object with the given  table name, or -1 if the  object does not exist in the collection.

    */
    public func IndexOfDataSetTable(dataSetTable : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_i32__IndexOfDataSetTable_0__1__String(&__thrown, self.get_handle(), dataSetTable?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Data.Common.DataTableMapping)
// docid: M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)
    /**
    Inserts a  object into the  at the specified index.

    - Parameter index: The zero-based index of the  object to insert.
    - Parameter value: The  object to insert.
    */
    public func Insert(index : Swift.Int32, value : dotnet.System.Data.Common.DataTableMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__Insert_0__2__i32_DataTableMapping(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Insert(System.Int32, System.Object)
// docid: M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)
    /**
    Inserts a  object into the  at the specified index.

    - Parameter index: The zero-based index of the  object to insert.
    - Parameter value: The  object to insert.
    */
    public func Insert(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__Insert_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Data.Common.DataTableMapping)
// docid: M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)
    /**
    Removes the specified  object from the collection.

    - Parameter value: The  object to remove.
    */
    public func Remove(value : dotnet.System.Data.Common.DataTableMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__Remove_0__1__DataTableMapping(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Object)
// docid: M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)
    /**
    Removes the specified  object from the collection.

    - Parameter value: The  object to remove.
    */
    public func Remove(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__Remove_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)
    /**
    Removes the  object located at the specified index from the collection.

    - Parameter index: The zero-based index of the  object to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)
    /**
    Removes the  object with the specified source table name from the collection.

    - Parameter sourceTable: The case-sensitive source table name to find.
    */
    public func RemoveAt(sourceTable : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__RemoveAt_0__1__String(&__thrown, self.get_handle(), sourceTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.Common.DataTableMappingCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataTableMapping get_Item(System.Int32)
// docid: M:System.Data.Common.DataTableMappingCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.Common.DataTableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_DataTableMapping__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMapping(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Data.Common.DataTableMapping)
// docid: M:System.Data.Common.DataTableMappingCollection.set_Item(System.Int32,System.Data.Common.DataTableMapping)
    public func set_Item(index : Swift.Int32, value : dotnet.System.Data.Common.DataTableMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__set_Item_0__2__i32_DataTableMapping(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataTableMapping get_Item(System.String)
// docid: M:System.Data.Common.DataTableMappingCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(sourceTable : dotnet.System.String) throws -> dotnet.System.Data.Common.DataTableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DataTableMappingCollection_DataTableMapping__get_Item_0__1__String(&__thrown, self.get_handle(), sourceTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMapping(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Data.Common.DataTableMapping)
// docid: M:System.Data.Common.DataTableMappingCollection.set_Item(System.String,System.Data.Common.DataTableMapping)
    public func set_Item(sourceTable : dotnet.System.String, value : dotnet.System.Data.Common.DataTableMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DataTableMappingCollection_void__set_Item_0__2__String_DataTableMapping(&__thrown, self.get_handle(), sourceTable.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of  objects in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // DataTableMappingCollection


// type: System.Data.Common.DbBatch
open class DbBatch
    :
    dotnet.System.Object,
    System_IDisposable,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbBatch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.Common.DbDataReader ExecuteReader(System.Data.CommandBehavior)
// docid: M:System.Data.Common.DbBatch.ExecuteReader(System.Data.CommandBehavior)
    open func ExecuteReader(behavior : dotnet.System.Data.CommandBehavior/* TODO default enum */) throws -> dotnet.System.Data.Common.DbDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_DbDataReader__ExecuteReader_0__1__CommandBehavior(&__thrown, self.get_handle(), behavior.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbDataReader(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbBatch.ExecuteReaderAsync(System.Threading.CancellationToken)
    open func ExecuteReaderAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.Common.DbDataReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_System_Threading_Tasks_Task_System_Data_Common_DbDataReader___ExecuteReaderAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbBatch.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
    open func ExecuteReaderAsync(behavior : dotnet.System.Data.CommandBehavior, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.Common.DbDataReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_System_Threading_Tasks_Task_System_Data_Common_DbDataReader___ExecuteReaderAsync_0__2__CommandBehavior_CancellationToken(&__thrown, self.get_handle(), behavior.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Int32 ExecuteNonQuery()
// docid: M:System.Data.Common.DbBatch.ExecuteNonQuery
    open func ExecuteNonQuery() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_i32__ExecuteNonQuery_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ExecuteNonQueryAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbBatch.ExecuteNonQueryAsync(System.Threading.CancellationToken)
    open func ExecuteNonQueryAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_System_Threading_Tasks_Task_i32___ExecuteNonQueryAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Object ExecuteScalar()
// docid: M:System.Data.Common.DbBatch.ExecuteScalar
    open func ExecuteScalar() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_Object__ExecuteScalar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Object> ExecuteScalarAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbBatch.ExecuteScalarAsync(System.Threading.CancellationToken)
    open func ExecuteScalarAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_System_Threading_Tasks_Task_object___ExecuteScalarAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Prepare()
// docid: M:System.Data.Common.DbBatch.Prepare
    open func Prepare() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatch_void__Prepare_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task PrepareAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbBatch.PrepareAsync(System.Threading.CancellationToken)
    open func PrepareAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_Task__PrepareAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Cancel()
// docid: M:System.Data.Common.DbBatch.Cancel
    open func Cancel() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatch_void__Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.Common.DbBatchCommand CreateBatchCommand()
// docid: M:System.Data.Common.DbBatch.CreateBatchCommand
    open func CreateBatchCommand() throws -> dotnet.System.Data.Common.DbBatchCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_DbBatchCommand__CreateBatchCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbBatchCommand(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Data.Common.DbBatch.Dispose
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatch_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Data.Common.DbBatch.DisposeAsync
    open func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Common.DbBatchCommandCollection get_BatchCommands()
// docid: M:System.Data.Common.DbBatch.get_BatchCommands
    open func get_BatchCommands() throws -> dotnet.System.Data.Common.DbBatchCommandCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_DbBatchCommandCollection__get_BatchCommands_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbBatchCommandCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Timeout()
// docid: M:System.Data.Common.DbBatch.get_Timeout
    open func get_Timeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_i32__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Timeout(System.Int32)
// docid: M:System.Data.Common.DbBatch.set_Timeout(System.Int32)
    open func set_Timeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatch_void__set_Timeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbConnection get_Connection()
// docid: M:System.Data.Common.DbBatch.get_Connection
    open func get_Connection() throws -> Optional<dotnet.System.Data.Common.DbConnection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_DbConnection__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbConnection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Connection(System.Data.Common.DbConnection)
// docid: M:System.Data.Common.DbBatch.set_Connection(System.Data.Common.DbConnection)
    open func set_Connection(value : Optional<dotnet.System.Data.Common.DbConnection>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatch_void__set_Connection_0__1__DbConnection(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbTransaction get_Transaction()
// docid: M:System.Data.Common.DbBatch.get_Transaction
    open func get_Transaction() throws -> Optional<dotnet.System.Data.Common.DbTransaction> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatch_DbTransaction__get_Transaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbTransaction(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Transaction(System.Data.Common.DbTransaction)
// docid: M:System.Data.Common.DbBatch.set_Transaction(System.Data.Common.DbTransaction)
    open func set_Transaction(value : Optional<dotnet.System.Data.Common.DbTransaction>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatch_void__set_Transaction_0__1__DbTransaction(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var BatchCommands : dotnet.System.Data.Common.DbBatchCommandCollection {
        get {
            return try! get_BatchCommands();
        }
    }
    open var Connection : Optional<dotnet.System.Data.Common.DbConnection> {
        get {
            return try! get_Connection();
        }
        set(v) {
            return try! set_Connection(value: v!);
        }
    }
    open var Timeout : Swift.Int32 {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
    open var Transaction : Optional<dotnet.System.Data.Common.DbTransaction> {
        get {
            return try! get_Transaction();
        }
        set(v) {
            return try! set_Transaction(value: v!);
        }
    }
} // DbBatch


// type: System.Data.Common.DbBatchCommand
open class DbBatchCommand
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbBatchCommand_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_CommandText()
// docid: M:System.Data.Common.DbBatchCommand.get_CommandText
    open func get_CommandText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommand_String__get_CommandText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CommandText(System.String)
// docid: M:System.Data.Common.DbBatchCommand.set_CommandText(System.String)
    open func set_CommandText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommand_void__set_CommandText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.CommandType get_CommandType()
// docid: M:System.Data.Common.DbBatchCommand.get_CommandType
    open func get_CommandType() throws -> dotnet.System.Data.CommandType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommand_CommandType__get_CommandType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.CommandType(val: __return);
        }
    }
    // [IsSpecialName] void set_CommandType(System.Data.CommandType)
// docid: M:System.Data.Common.DbBatchCommand.set_CommandType(System.Data.CommandType)
    open func set_CommandType(value : dotnet.System.Data.CommandType) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommand_void__set_CommandType_0__1__CommandType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_RecordsAffected()
// docid: M:System.Data.Common.DbBatchCommand.get_RecordsAffected
    open func get_RecordsAffected() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommand_i32__get_RecordsAffected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbParameterCollection get_Parameters()
// docid: M:System.Data.Common.DbBatchCommand.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Data.Common.DbParameterCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommand_DbParameterCollection__get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbParameterCollection(hndl : __return);
        }
    }
    open var CommandText : dotnet.System.String {
        get {
            return try! get_CommandText();
        }
        set(v) {
            return try! set_CommandText(value: v);
        }
    }
    open var CommandType : dotnet.System.Data.CommandType {
        get {
            return try! get_CommandType();
        }
        set(v) {
            return try! set_CommandType(value: v);
        }
    }
    open var Parameters : dotnet.System.Data.Common.DbParameterCollection {
        get {
            return try! get_Parameters();
        }
    }
    open var RecordsAffected : Swift.Int32 {
        get {
            return try! get_RecordsAffected();
        }
    }
} // DbBatchCommand


// type: System.Data.Common.DbBatchCommandCollection
open class DbBatchCommandCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbBatchCommandCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerator<System.Data.Common.DbBatchCommand> GetEnumerator()
// docid: M:System.Data.Common.DbBatchCommandCollection.GetEnumerator
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Data.Common.DbBatchCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_System_Collections_Generic_IEnumerator_System_Data_Common_DbBatchCommand___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // void Add(System.Data.Common.DbBatchCommand)
// docid: M:System.Data.Common.DbBatchCommandCollection.Add(System.Data.Common.DbBatchCommand)
    open func Add(item : dotnet.System.Data.Common.DbBatchCommand) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommandCollection_void__Add_0__1__DbBatchCommand(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.Common.DbBatchCommandCollection.Clear
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommandCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Data.Common.DbBatchCommand)
// docid: M:System.Data.Common.DbBatchCommandCollection.Contains(System.Data.Common.DbBatchCommand)
    open func Contains(item : dotnet.System.Data.Common.DbBatchCommand) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_bool__Contains_0__1__DbBatchCommand(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Data.Common.DbBatchCommand[], System.Int32)
// docid: M:System.Data.Common.DbBatchCommandCollection.CopyTo(System.Data.Common.DbBatchCommand[],System.Int32)
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Data.Common.DbBatchCommand>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommandCollection_void__CopyTo_0__2__DbBatchCommandArray_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(System.Data.Common.DbBatchCommand)
// docid: M:System.Data.Common.DbBatchCommandCollection.Remove(System.Data.Common.DbBatchCommand)
    open func Remove(item : dotnet.System.Data.Common.DbBatchCommand) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_bool__Remove_0__1__DbBatchCommand(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 IndexOf(System.Data.Common.DbBatchCommand)
// docid: M:System.Data.Common.DbBatchCommandCollection.IndexOf(System.Data.Common.DbBatchCommand)
    open func IndexOf(item : dotnet.System.Data.Common.DbBatchCommand) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_i32__IndexOf_0__1__DbBatchCommand(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Data.Common.DbBatchCommand)
// docid: M:System.Data.Common.DbBatchCommandCollection.Insert(System.Int32,System.Data.Common.DbBatchCommand)
    open func Insert(index : Swift.Int32, item : dotnet.System.Data.Common.DbBatchCommand) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommandCollection_void__Insert_0__2__i32_DbBatchCommand(&__thrown, self.get_handle(), index, item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.Common.DbBatchCommandCollection.RemoveAt(System.Int32)
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommandCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.Common.DbBatchCommandCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Data.Common.DbBatchCommandCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Data.Common.DbBatchCommand get_Item(System.Int32)
// docid: M:System.Data.Common.DbBatchCommandCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.Common.DbBatchCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbBatchCommandCollection_DbBatchCommand__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbBatchCommand(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Data.Common.DbBatchCommand)
// docid: M:System.Data.Common.DbBatchCommandCollection.set_Item(System.Int32,System.Data.Common.DbBatchCommand)
    open /* method final */ func set_Item(index : Swift.Int32, value : dotnet.System.Data.Common.DbBatchCommand) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbBatchCommandCollection_void__set_Item_0__2__i32_DbBatchCommand(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // DbBatchCommandCollection


// type: System.Data.Common.DbColumn
    /**
    Represents a column within a data source.

    */
open class DbColumn
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbColumn_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Nullable<bool> get_AllowDBNull()
// docid: M:System.Data.Common.DbColumn.get_AllowDBNull
    open func get_AllowDBNull() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_AllowDBNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_AllowDBNull(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_AllowDBNull(System.Nullable{System.Boolean})
    open func set_AllowDBNull(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_AllowDBNull_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseCatalogName()
// docid: M:System.Data.Common.DbColumn.get_BaseCatalogName
    open func get_BaseCatalogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_BaseCatalogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseCatalogName(System.String)
// docid: M:System.Data.Common.DbColumn.set_BaseCatalogName(System.String)
    open func set_BaseCatalogName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_BaseCatalogName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseColumnName()
// docid: M:System.Data.Common.DbColumn.get_BaseColumnName
    open func get_BaseColumnName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_BaseColumnName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseColumnName(System.String)
// docid: M:System.Data.Common.DbColumn.set_BaseColumnName(System.String)
    open func set_BaseColumnName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_BaseColumnName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseSchemaName()
// docid: M:System.Data.Common.DbColumn.get_BaseSchemaName
    open func get_BaseSchemaName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_BaseSchemaName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseSchemaName(System.String)
// docid: M:System.Data.Common.DbColumn.set_BaseSchemaName(System.String)
    open func set_BaseSchemaName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_BaseSchemaName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseServerName()
// docid: M:System.Data.Common.DbColumn.get_BaseServerName
    open func get_BaseServerName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_BaseServerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseServerName(System.String)
// docid: M:System.Data.Common.DbColumn.set_BaseServerName(System.String)
    open func set_BaseServerName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_BaseServerName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseTableName()
// docid: M:System.Data.Common.DbColumn.get_BaseTableName
    open func get_BaseTableName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_BaseTableName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseTableName(System.String)
// docid: M:System.Data.Common.DbColumn.set_BaseTableName(System.String)
    open func set_BaseTableName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_BaseTableName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ColumnName()
// docid: M:System.Data.Common.DbColumn.get_ColumnName
    open func get_ColumnName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_ColumnName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ColumnName(System.String)
// docid: M:System.Data.Common.DbColumn.set_ColumnName(System.String)
    open func set_ColumnName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_ColumnName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ColumnOrdinal()
// docid: M:System.Data.Common.DbColumn.get_ColumnOrdinal
    open func get_ColumnOrdinal() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_i32___get_ColumnOrdinal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ColumnOrdinal(System.Nullable<System.Int32>)
// docid: M:System.Data.Common.DbColumn.set_ColumnOrdinal(System.Nullable{System.Int32})
    open func set_ColumnOrdinal(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_ColumnOrdinal_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ColumnSize()
// docid: M:System.Data.Common.DbColumn.get_ColumnSize
    open func get_ColumnSize() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_i32___get_ColumnSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ColumnSize(System.Nullable<System.Int32>)
// docid: M:System.Data.Common.DbColumn.set_ColumnSize(System.Nullable{System.Int32})
    open func set_ColumnSize(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_ColumnSize_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_DataType()
// docid: M:System.Data.Common.DbColumn.get_DataType
    open func get_DataType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_Type__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataType(System.Type)
// docid: M:System.Data.Common.DbColumn.set_DataType(System.Type)
    open func set_DataType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_DataType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataTypeName()
// docid: M:System.Data.Common.DbColumn.get_DataTypeName
    open func get_DataTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_DataTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataTypeName(System.String)
// docid: M:System.Data.Common.DbColumn.set_DataTypeName(System.String)
    open func set_DataTypeName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_DataTypeName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsAliased()
// docid: M:System.Data.Common.DbColumn.get_IsAliased
    open func get_IsAliased() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsAliased_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsAliased(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsAliased(System.Nullable{System.Boolean})
    open func set_IsAliased(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsAliased_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsAutoIncrement()
// docid: M:System.Data.Common.DbColumn.get_IsAutoIncrement
    open func get_IsAutoIncrement() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsAutoIncrement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsAutoIncrement(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsAutoIncrement(System.Nullable{System.Boolean})
    open func set_IsAutoIncrement(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsAutoIncrement_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsExpression()
// docid: M:System.Data.Common.DbColumn.get_IsExpression
    open func get_IsExpression() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsExpression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsExpression(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsExpression(System.Nullable{System.Boolean})
    open func set_IsExpression(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsExpression_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsHidden()
// docid: M:System.Data.Common.DbColumn.get_IsHidden
    open func get_IsHidden() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsHidden_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsHidden(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsHidden(System.Nullable{System.Boolean})
    open func set_IsHidden(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsHidden_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsIdentity()
// docid: M:System.Data.Common.DbColumn.get_IsIdentity
    open func get_IsIdentity() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsIdentity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsIdentity(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsIdentity(System.Nullable{System.Boolean})
    open func set_IsIdentity(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsIdentity_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsKey()
// docid: M:System.Data.Common.DbColumn.get_IsKey
    open func get_IsKey() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsKey(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsKey(System.Nullable{System.Boolean})
    open func set_IsKey(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsKey_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsLong()
// docid: M:System.Data.Common.DbColumn.get_IsLong
    open func get_IsLong() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsLong(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsLong(System.Nullable{System.Boolean})
    open func set_IsLong(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsLong_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsReadOnly()
// docid: M:System.Data.Common.DbColumn.get_IsReadOnly
    open func get_IsReadOnly() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsReadOnly(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsReadOnly(System.Nullable{System.Boolean})
    open func set_IsReadOnly(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsReadOnly_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsUnique()
// docid: M:System.Data.Common.DbColumn.get_IsUnique
    open func get_IsUnique() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_bool___get_IsUnique_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsUnique(System.Nullable<bool>)
// docid: M:System.Data.Common.DbColumn.set_IsUnique(System.Nullable{System.Boolean})
    open func set_IsUnique(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_IsUnique_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_NumericPrecision()
// docid: M:System.Data.Common.DbColumn.get_NumericPrecision
    open func get_NumericPrecision() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_i32___get_NumericPrecision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_NumericPrecision(System.Nullable<System.Int32>)
// docid: M:System.Data.Common.DbColumn.set_NumericPrecision(System.Nullable{System.Int32})
    open func set_NumericPrecision(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_NumericPrecision_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_NumericScale()
// docid: M:System.Data.Common.DbColumn.get_NumericScale
    open func get_NumericScale() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_System_Nullable_i32___get_NumericScale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_NumericScale(System.Nullable<System.Int32>)
// docid: M:System.Data.Common.DbColumn.set_NumericScale(System.Nullable{System.Int32})
    open func set_NumericScale(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_NumericScale_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_UdtAssemblyQualifiedName()
// docid: M:System.Data.Common.DbColumn.get_UdtAssemblyQualifiedName
    open func get_UdtAssemblyQualifiedName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_String__get_UdtAssemblyQualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UdtAssemblyQualifiedName(System.String)
// docid: M:System.Data.Common.DbColumn.set_UdtAssemblyQualifiedName(System.String)
    open func set_UdtAssemblyQualifiedName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbColumn_void__set_UdtAssemblyQualifiedName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.Common.DbColumn.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(property : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbColumn_Object__get_Item_0__1__String(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets a nullable boolean value that indicates whether  values are allowed in this column, or returns  if no value is set. Can be set to either  or  indicating whether  values are allowed in this column, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var AllowDBNull : Optional<Bool> {
        get {
            return try! get_AllowDBNull();
        }
        set(v) {
            return try! set_AllowDBNull(value: v!);
        }
    }
    /**
    Gets the catalog name associated with the data source; otherwise,  if no value is set. Can be set to either the catalog name or  when overridden in a derived class.

    */
    open var BaseCatalogName : Optional<dotnet.System.String> {
        get {
            return try! get_BaseCatalogName();
        }
        set(v) {
            return try! set_BaseCatalogName(value: v!);
        }
    }
    /**
    Gets the base column name; otherwise,  if no value is set. Can be set to either the column name or  when overridden in a derived class.

    */
    open var BaseColumnName : Optional<dotnet.System.String> {
        get {
            return try! get_BaseColumnName();
        }
        set(v) {
            return try! set_BaseColumnName(value: v!);
        }
    }
    /**
    Gets the schema name associated with the data source; otherwise,  if no value is set. Can be set to either the schema name or  when overridden in a derived class.

    */
    open var BaseSchemaName : Optional<dotnet.System.String> {
        get {
            return try! get_BaseSchemaName();
        }
        set(v) {
            return try! set_BaseSchemaName(value: v!);
        }
    }
    /**
    Gets the server name associated with the column; otherwise,  if no value is set. Can be set to either the server name or  when overridden in a derived class.

    */
    open var BaseServerName : Optional<dotnet.System.String> {
        get {
            return try! get_BaseServerName();
        }
        set(v) {
            return try! set_BaseServerName(value: v!);
        }
    }
    /**
    Gets the table name in the schema; otherwise,  if no value is set. Can be set to either the table name or  when overridden in a derived class.

    */
    open var BaseTableName : Optional<dotnet.System.String> {
        get {
            return try! get_BaseTableName();
        }
        set(v) {
            return try! set_BaseTableName(value: v!);
        }
    }
    /**
    Gets the name of the column. Can be set to the column name when overridden in a derived class.

    */
    open var ColumnName : dotnet.System.String {
        get {
            return try! get_ColumnName();
        }
        set(v) {
            return try! set_ColumnName(value: v);
        }
    }
    /**
    Gets the column position (ordinal) in the datasource row; otherwise,  if no value is set. Can be set to either an  value to specify the column position or  when overridden in a derived class.

    */
    open var ColumnOrdinal : Optional<Swift.Int32> {
        get {
            return try! get_ColumnOrdinal();
        }
        set(v) {
            return try! set_ColumnOrdinal(value: v!);
        }
    }
    /**
    Gets the column size; otherwise,  if no value is set. Can be set to either an  value to specify the column size or  when overridden in a derived class.

    */
    open var ColumnSize : Optional<Swift.Int32> {
        get {
            return try! get_ColumnSize();
        }
        set(v) {
            return try! set_ColumnSize(value: v!);
        }
    }
    /**
    Gets the type of data stored in the column. Can be set to a  object that represents the type of data in the column when overridden in a derived class.

    */
    open var DataType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v!);
        }
    }
    /**
    Gets the name of the data type; otherwise,  if no value is set. Can be set to either the data type name or  when overridden in a derived class.

    */
    open var DataTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_DataTypeName();
        }
        set(v) {
            return try! set_DataTypeName(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column is aliased, or returns  if no value is set. Can be set to either  or  indicating whether this column is aliased, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsAliased : Optional<Bool> {
        get {
            return try! get_IsAliased();
        }
        set(v) {
            return try! set_IsAliased(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether values in this column are automatically incremented, or returns  if no value is set. Can be set to either  or  indicating whether values in this column are automatically incremented, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsAutoIncrement : Optional<Bool> {
        get {
            return try! get_IsAutoIncrement();
        }
        set(v) {
            return try! set_IsAutoIncrement(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column is an expression, or returns  if no value is set. Can be set to either  or  indicating whether this column is an expression, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsExpression : Optional<Bool> {
        get {
            return try! get_IsExpression();
        }
        set(v) {
            return try! set_IsExpression(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column is hidden, or returns  if no value is set. Can be set to either  or  indicating whether this column is hidden, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsHidden : Optional<Bool> {
        get {
            return try! get_IsHidden();
        }
        set(v) {
            return try! set_IsHidden(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column is an identity, or returns  if no value is set. Can be set to either  or  indicating whether this column is an identity, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsIdentity : Optional<Bool> {
        get {
            return try! get_IsIdentity();
        }
        set(v) {
            return try! set_IsIdentity(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column is a key, or returns  if no value is set. Can be set to either  or  indicating whether this column is a key, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsKey : Optional<Bool> {
        get {
            return try! get_IsKey();
        }
        set(v) {
            return try! set_IsKey(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column contains long data, or returns  if no value is set. Can be set to either  or  indicating whether this column contains long data, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsLong : Optional<Bool> {
        get {
            return try! get_IsLong();
        }
        set(v) {
            return try! set_IsLong(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether this column is read-only, or returns  if no value is set. Can be set to either  or  indicating whether this column is read-only, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsReadOnly : Optional<Bool> {
        get {
            return try! get_IsReadOnly();
        }
        set(v) {
            return try! set_IsReadOnly(value: v!);
        }
    }
    /**
    Gets a nullable boolean value that indicates whether a unique constraint applies to this column, or returns  if no value is set. Can be set to either  or  indicating whether a unique constraint applies to this column, or  ( in Visual Basic) when overridden in a derived class.

    */
    open var IsUnique : Optional<Bool> {
        get {
            return try! get_IsUnique();
        }
        set(v) {
            return try! set_IsUnique(value: v!);
        }
    }
    /**
    Gets the numeric precision of the column data; otherwise,  if no value is set. Can be set to either an  value to specify the numeric precision of the column data or  when overridden in a derived class.

    */
    open var NumericPrecision : Optional<Swift.Int32> {
        get {
            return try! get_NumericPrecision();
        }
        set(v) {
            return try! set_NumericPrecision(value: v!);
        }
    }
    /**
    Gets a nullable  value that either returns  or the numeric scale of the column data. Can be set to either  or an  value for the numeric scale of the column data when overridden in a derived class.

    */
    open var NumericScale : Optional<Swift.Int32> {
        get {
            return try! get_NumericScale();
        }
        set(v) {
            return try! set_NumericScale(value: v!);
        }
    }
    /**
    Gets the assembly-qualified name of the  object that represents the type of data in the column; otherwise,  if no value is set. Can be set to either the assembly-qualified name or  when overridden in a derived class.

    */
    open var UdtAssemblyQualifiedName : Optional<dotnet.System.String> {
        get {
            return try! get_UdtAssemblyQualifiedName();
        }
        set(v) {
            return try! set_UdtAssemblyQualifiedName(value: v!);
        }
    }
} // DbColumn


// type: System.Data.Common.DbCommand
    /**
    Represents an SQL statement or stored procedure to execute against a data source. Provides a base class for database-specific classes that represent commands. 

    */
open class DbCommand
    :
    dotnet.System.ComponentModel.Component,
    System_Data_IDbCommand,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbCommand_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Cancel()
// docid: M:System.Data.Common.DbCommand.Cancel
    /**
    When overridden in a derived class, attempts to cancel the execution of a .

    */
    open func Cancel() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.Common.DbParameter CreateParameter()
// docid: M:System.Data.Common.DbCommand.CreateParameter
    /**
    Creates a new instance of a  object.

    - Returns: A  object.

    */
    open func CreateParameter() throws -> dotnet.System.Data.Common.DbParameter {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_DbParameter__CreateParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbParameter(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Data.Common.DbCommand.DisposeAsync
    /**
    Asynchronously diposes the command object.

    - Returns: A  representing the asynchronous operation.

    */
    open func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // System.Int32 ExecuteNonQuery()
// docid: M:System.Data.Common.DbCommand.ExecuteNonQuery
    /**
    When overridden in a derived class, executes a SQL statement against a connection object.

    - Returns: The number of rows affected.

    */
    open func ExecuteNonQuery() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_i32__ExecuteNonQuery_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ExecuteNonQueryAsync()
// docid: M:System.Data.Common.DbCommand.ExecuteNonQueryAsync
    /**
    An asynchronous version of , which executes a SQL statement against a connection object.  
  
 Invokes  with CancellationToken.None.

    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteNonQueryAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_i32___ExecuteNonQueryAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ExecuteNonQueryAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
    /**
    This is the asynchronous version of . Providers should override with an appropriate implementation. The cancellation token may optionally be ignored.  
  
 The default implementation invokes the synchronous  method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token.  Exceptions thrown by  will be communicated via the returned Task Exception property.  
  
 Do not invoke other methods and properties of the  object until the returned Task is complete.

    - Parameter cancellationToken: A token to cancel the asynchronous operation.
    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteNonQueryAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_i32___ExecuteNonQueryAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Data.Common.DbDataReader ExecuteReader()
// docid: M:System.Data.Common.DbCommand.ExecuteReader
    /**
    Executes the  against the , and returns an .

    - Returns: A  object.

    */
    open func ExecuteReader() throws -> dotnet.System.Data.Common.DbDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_DbDataReader__ExecuteReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbDataReader(hndl : __return);
        }
    }
    // System.Data.Common.DbDataReader ExecuteReader(System.Data.CommandBehavior)
// docid: M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)
    /**
    Executes the  against the , and returns an  using one of the  values.

    - Parameter behavior: One of the enumeration values that specifies the command behavior.
    - Returns: An  object.

    */
    open func ExecuteReader(behavior : dotnet.System.Data.CommandBehavior) throws -> dotnet.System.Data.Common.DbDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_DbDataReader__ExecuteReader_0__1__CommandBehavior(&__thrown, self.get_handle(), behavior.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbDataReader(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync()
// docid: M:System.Data.Common.DbCommand.ExecuteReaderAsync
    /**
    An asynchronous version of , which executes the  against the  and returns a .  
  
 Invokes  with CancellationToken.None.

    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteReaderAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.Common.DbDataReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_System_Data_Common_DbDataReader___ExecuteReaderAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Data.CommandBehavior)
// docid: M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
    /**
    An asynchronous version of , which executes the  against the  and returns a .  
  
 Invokes .

    - Parameter behavior: One of the enumeration values that specified the command behavior.
    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteReaderAsync(behavior : dotnet.System.Data.CommandBehavior) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.Common.DbDataReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_System_Data_Common_DbDataReader___ExecuteReaderAsync_0__1__CommandBehavior(&__thrown, self.get_handle(), behavior.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
    /**
    Invokes .

    - Parameter behavior: One of the enumeration values that specifies the command behavior.
    - Parameter cancellationToken: A token to cancel the asynchronous operation.
    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteReaderAsync(behavior : dotnet.System.Data.CommandBehavior, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.Common.DbDataReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_System_Data_Common_DbDataReader___ExecuteReaderAsync_0__2__CommandBehavior_CancellationToken(&__thrown, self.get_handle(), behavior.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
    /**
    An asynchronous version of , which executes the  against the  and returns a . This method propagates a notification that operations should be canceled.  
  
 Invokes .

    - Parameter cancellationToken: A token to cancel the asynchronous operation.
    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteReaderAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.Common.DbDataReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_System_Data_Common_DbDataReader___ExecuteReaderAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Object ExecuteScalar()
// docid: M:System.Data.Common.DbCommand.ExecuteScalar
    /**
    When overridden in a derived class, executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.

    - Returns: The first column of the first row in the result set.

    */
    open func ExecuteScalar() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_Object__ExecuteScalar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Object> ExecuteScalarAsync()
// docid: M:System.Data.Common.DbCommand.ExecuteScalarAsync
    /**
    An asynchronous version of , which executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.  
  
 Invokes  with CancellationToken.None.

    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteScalarAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_object___ExecuteScalarAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> ExecuteScalarAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
    /**
    This is the asynchronous version of . Providers should override with an appropriate implementation. The cancellation token may optionally be ignored.  
  
 The default implementation invokes the synchronous  method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token. Exceptions thrown by ExecuteScalar will be communicated via the returned Task Exception property.  
  
 Do not invoke other methods and properties of the  object until the returned Task is complete.

    - Parameter cancellationToken: A token to cancel the asynchronous operation.
    - Returns: A task representing the asynchronous operation.

    */
    open func ExecuteScalarAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_System_Threading_Tasks_Task_object___ExecuteScalarAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Prepare()
// docid: M:System.Data.Common.DbCommand.Prepare
    /**
    When overridden in a derived class, creates a prepared (or compiled) version of the command on the data source.

    */
    open func Prepare() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__Prepare_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task PrepareAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbCommand.PrepareAsync(System.Threading.CancellationToken)
    /**
    Asynchronously creates a prepared (or compiled) version of the command on the data source.

    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A  representing the asynchronous operation.

    */
    open func PrepareAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_Task__PrepareAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_CommandText()
// docid: M:System.Data.Common.DbCommand.get_CommandText
    open func get_CommandText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_String__get_CommandText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CommandText(System.String)
// docid: M:System.Data.Common.DbCommand.set_CommandText(System.String)
    open func set_CommandText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_CommandText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_CommandTimeout()
// docid: M:System.Data.Common.DbCommand.get_CommandTimeout
    open func get_CommandTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_i32__get_CommandTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CommandTimeout(System.Int32)
// docid: M:System.Data.Common.DbCommand.set_CommandTimeout(System.Int32)
    open func set_CommandTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_CommandTimeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.CommandType get_CommandType()
// docid: M:System.Data.Common.DbCommand.get_CommandType
    open func get_CommandType() throws -> dotnet.System.Data.CommandType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_CommandType__get_CommandType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.CommandType(val: __return);
        }
    }
    // [IsSpecialName] void set_CommandType(System.Data.CommandType)
// docid: M:System.Data.Common.DbCommand.set_CommandType(System.Data.CommandType)
    open func set_CommandType(value : dotnet.System.Data.CommandType) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_CommandType_0__1__CommandType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbConnection get_Connection()
// docid: M:System.Data.Common.DbCommand.get_Connection
    open func get_Connection() throws -> Optional<dotnet.System.Data.Common.DbConnection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_DbConnection__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbConnection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Connection(System.Data.Common.DbConnection)
// docid: M:System.Data.Common.DbCommand.set_Connection(System.Data.Common.DbConnection)
    open func set_Connection(value : Optional<dotnet.System.Data.Common.DbConnection>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_Connection_0__1__DbConnection(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_DesignTimeVisible()
// docid: M:System.Data.Common.DbCommand.get_DesignTimeVisible
    open func get_DesignTimeVisible() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_bool__get_DesignTimeVisible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_DesignTimeVisible(bool)
// docid: M:System.Data.Common.DbCommand.set_DesignTimeVisible(System.Boolean)
    open func set_DesignTimeVisible(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_DesignTimeVisible_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbParameterCollection get_Parameters()
// docid: M:System.Data.Common.DbCommand.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Data.Common.DbParameterCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_DbParameterCollection__get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbParameterCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Common.DbTransaction get_Transaction()
// docid: M:System.Data.Common.DbCommand.get_Transaction
    open func get_Transaction() throws -> Optional<dotnet.System.Data.Common.DbTransaction> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_DbTransaction__get_Transaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbTransaction(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Transaction(System.Data.Common.DbTransaction)
// docid: M:System.Data.Common.DbCommand.set_Transaction(System.Data.Common.DbTransaction)
    open func set_Transaction(value : Optional<dotnet.System.Data.Common.DbTransaction>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_Transaction_0__1__DbTransaction(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.UpdateRowSource get_UpdatedRowSource()
// docid: M:System.Data.Common.DbCommand.get_UpdatedRowSource
    open func get_UpdatedRowSource() throws -> dotnet.System.Data.UpdateRowSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommand_UpdateRowSource__get_UpdatedRowSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.UpdateRowSource(val: __return);
        }
    }
    // [IsSpecialName] void set_UpdatedRowSource(System.Data.UpdateRowSource)
// docid: M:System.Data.Common.DbCommand.set_UpdatedRowSource(System.Data.UpdateRowSource)
    open func set_UpdatedRowSource(value : dotnet.System.Data.UpdateRowSource) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommand_void__set_UpdatedRowSource_0__1__UpdateRowSource(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    When overridden in a derived class, gets or sets the text command to run against the data source.

    */
    open var CommandText : dotnet.System.String {
        get {
            return try! get_CommandText();
        }
        set(v) {
            return try! set_CommandText(value: v);
        }
    }
    /**
    When overridden in a derived class, gets or sets the wait time (in seconds) before terminating the attempt to execute a command and generating an error.

    */
    open var CommandTimeout : Swift.Int32 {
        get {
            return try! get_CommandTimeout();
        }
        set(v) {
            return try! set_CommandTimeout(value: v);
        }
    }
    /**
    When overridden in a derived class, gets or sets how the  property is interpreted.

    */
    open var CommandType : dotnet.System.Data.CommandType {
        get {
            return try! get_CommandType();
        }
        set(v) {
            return try! set_CommandType(value: v);
        }
    }
    /**
    Gets or sets the  used by this .

    */
    open var Connection : Optional<dotnet.System.Data.Common.DbConnection> {
        get {
            return try! get_Connection();
        }
        set(v) {
            return try! set_Connection(value: v!);
        }
    }
    /**
    When overridden in a derived class, gets or sets a value indicating whether the command object should be visible in a customized interface control.

    */
    open var DesignTimeVisible : Bool {
        get {
            return try! get_DesignTimeVisible();
        }
        set(v) {
            return try! set_DesignTimeVisible(value: v);
        }
    }
    /**
    Gets the collection of  objects. For more information on parameters, see Configuring Parameters and Parameter Data Types.

    */
    open var Parameters : dotnet.System.Data.Common.DbParameterCollection {
        get {
            return try! get_Parameters();
        }
    }
    /**
    Gets or sets the  within which this  object executes.

    */
    open var Transaction : Optional<dotnet.System.Data.Common.DbTransaction> {
        get {
            return try! get_Transaction();
        }
        set(v) {
            return try! set_Transaction(value: v!);
        }
    }
    /**
    When overridden in a derived class, gets or sets how command results are applied to the  when used by the Update method of a .

    */
    open var UpdatedRowSource : dotnet.System.Data.UpdateRowSource {
        get {
            return try! get_UpdatedRowSource();
        }
        set(v) {
            return try! set_UpdatedRowSource(value: v);
        }
    }
} // DbCommand


// type: System.Data.Common.DbCommandBuilder
    /**
    Automatically generates single-table commands used to reconcile changes made to a  with the associated database. This is an abstract class that can only be inherited.

    */
open class DbCommandBuilder
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbCommandBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.Common.DbCommand GetDeleteCommand()
// docid: M:System.Data.Common.DbCommandBuilder.GetDeleteCommand
    /**
    Gets the automatically generated  object required to perform deletions at the data source.

    - Returns: The automatically generated  object required to perform deletions.

    */
    open func GetDeleteCommand() throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbCommand__GetDeleteCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand GetDeleteCommand(bool)
// docid: M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)
    /**
    Gets the automatically generated  object required to perform deletions at the data source, optionally using columns for parameter names.

    - Parameter useColumnsForParameterNames: If , generate parameter names matching column names, if possible. If , generate @p1, @p2, and so on.
    - Returns: The automatically generated  object required to perform deletions.

    */
    open func GetDeleteCommand(useColumnsForParameterNames : Bool) throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbCommand__GetDeleteCommand_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(useColumnsForParameterNames ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand GetInsertCommand()
// docid: M:System.Data.Common.DbCommandBuilder.GetInsertCommand
    /**
    Gets the automatically generated  object required to perform insertions at the data source.

    - Returns: The automatically generated  object required to perform insertions.

    */
    open func GetInsertCommand() throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbCommand__GetInsertCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand GetInsertCommand(bool)
// docid: M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)
    /**
    Gets the automatically generated  object required to perform insertions at the data source, optionally using columns for parameter names.

    - Parameter useColumnsForParameterNames: If , generate parameter names matching column names, if possible. If , generate @p1, @p2, and so on.
    - Returns: The automatically generated  object required to perform insertions.

    */
    open func GetInsertCommand(useColumnsForParameterNames : Bool) throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbCommand__GetInsertCommand_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(useColumnsForParameterNames ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand GetUpdateCommand()
// docid: M:System.Data.Common.DbCommandBuilder.GetUpdateCommand
    /**
    Gets the automatically generated  object required to perform updates at the data source.

    - Returns: The automatically generated  object required to perform updates.

    */
    open func GetUpdateCommand() throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbCommand__GetUpdateCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand GetUpdateCommand(bool)
// docid: M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)
    /**
    Gets the automatically generated  object required to perform updates at the data source, optionally using columns for parameter names.

    - Parameter useColumnsForParameterNames: If , generate parameter names matching column names, if possible. If , generate @p1, @p2, and so on.
    - Returns: The automatically generated  object required to perform updates.

    */
    open func GetUpdateCommand(useColumnsForParameterNames : Bool) throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbCommand__GetUpdateCommand_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(useColumnsForParameterNames ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.String QuoteIdentifier(System.String)
// docid: M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)
    /**
    Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.

    - Parameter unquotedIdentifier: The original unquoted identifier.
    - Returns: The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.

    */
    open func QuoteIdentifier(unquotedIdentifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_String__QuoteIdentifier_0__1__String(&__thrown, self.get_handle(), unquotedIdentifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void RefreshSchema()
// docid: M:System.Data.Common.DbCommandBuilder.RefreshSchema
    /**
    Clears the commands associated with this .

    */
    open func RefreshSchema() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__RefreshSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String UnquoteIdentifier(System.String)
// docid: M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)
    /**
    Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.

    - Parameter quotedIdentifier: The identifier that will have its embedded quotes removed.
    - Returns: The unquoted identifier, with embedded quotes properly un-escaped.

    */
    open func UnquoteIdentifier(quotedIdentifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_String__UnquoteIdentifier_0__1__String(&__thrown, self.get_handle(), quotedIdentifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Common.CatalogLocation get_CatalogLocation()
// docid: M:System.Data.Common.DbCommandBuilder.get_CatalogLocation
    open func get_CatalogLocation() throws -> dotnet.System.Data.Common.CatalogLocation {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_CatalogLocation__get_CatalogLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.CatalogLocation(val: __return);
        }
    }
    // [IsSpecialName] void set_CatalogLocation(System.Data.Common.CatalogLocation)
// docid: M:System.Data.Common.DbCommandBuilder.set_CatalogLocation(System.Data.Common.CatalogLocation)
    open func set_CatalogLocation(value : dotnet.System.Data.Common.CatalogLocation) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_CatalogLocation_0__1__CatalogLocation(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CatalogSeparator()
// docid: M:System.Data.Common.DbCommandBuilder.get_CatalogSeparator
    open func get_CatalogSeparator() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_String__get_CatalogSeparator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CatalogSeparator(System.String)
// docid: M:System.Data.Common.DbCommandBuilder.set_CatalogSeparator(System.String)
    open func set_CatalogSeparator(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_CatalogSeparator_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.ConflictOption get_ConflictOption()
// docid: M:System.Data.Common.DbCommandBuilder.get_ConflictOption
    open func get_ConflictOption() throws -> dotnet.System.Data.ConflictOption {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_ConflictOption__get_ConflictOption_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ConflictOption(val: __return);
        }
    }
    // [IsSpecialName] void set_ConflictOption(System.Data.ConflictOption)
// docid: M:System.Data.Common.DbCommandBuilder.set_ConflictOption(System.Data.ConflictOption)
    open func set_ConflictOption(value : dotnet.System.Data.ConflictOption) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_ConflictOption_0__1__ConflictOption(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbDataAdapter get_DataAdapter()
// docid: M:System.Data.Common.DbCommandBuilder.get_DataAdapter
    open func get_DataAdapter() throws -> Optional<dotnet.System.Data.Common.DbDataAdapter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_DbDataAdapter__get_DataAdapter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbDataAdapter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataAdapter(System.Data.Common.DbDataAdapter)
// docid: M:System.Data.Common.DbCommandBuilder.set_DataAdapter(System.Data.Common.DbDataAdapter)
    open func set_DataAdapter(value : Optional<dotnet.System.Data.Common.DbDataAdapter>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_DataAdapter_0__1__DbDataAdapter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_QuotePrefix()
// docid: M:System.Data.Common.DbCommandBuilder.get_QuotePrefix
    open func get_QuotePrefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_String__get_QuotePrefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QuotePrefix(System.String)
// docid: M:System.Data.Common.DbCommandBuilder.set_QuotePrefix(System.String)
    open func set_QuotePrefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_QuotePrefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_QuoteSuffix()
// docid: M:System.Data.Common.DbCommandBuilder.get_QuoteSuffix
    open func get_QuoteSuffix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_String__get_QuoteSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QuoteSuffix(System.String)
// docid: M:System.Data.Common.DbCommandBuilder.set_QuoteSuffix(System.String)
    open func set_QuoteSuffix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_QuoteSuffix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SchemaSeparator()
// docid: M:System.Data.Common.DbCommandBuilder.get_SchemaSeparator
    open func get_SchemaSeparator() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_String__get_SchemaSeparator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SchemaSeparator(System.String)
// docid: M:System.Data.Common.DbCommandBuilder.set_SchemaSeparator(System.String)
    open func set_SchemaSeparator(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_SchemaSeparator_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SetAllValues()
// docid: M:System.Data.Common.DbCommandBuilder.get_SetAllValues
    open func get_SetAllValues() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbCommandBuilder_bool__get_SetAllValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SetAllValues(bool)
// docid: M:System.Data.Common.DbCommandBuilder.set_SetAllValues(System.Boolean)
    open func set_SetAllValues(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbCommandBuilder_void__set_SetAllValues_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  for an instance of the  class.

    */
    open var CatalogLocation : dotnet.System.Data.Common.CatalogLocation {
        get {
            return try! get_CatalogLocation();
        }
        set(v) {
            return try! set_CatalogLocation(value: v);
        }
    }
    /**
    Gets or sets a string used as the catalog separator for an instance of the  class.

    */
    open var CatalogSeparator : dotnet.System.String {
        get {
            return try! get_CatalogSeparator();
        }
        set(v) {
            return try! set_CatalogSeparator(value: v);
        }
    }
    /**
    Specifies which  is to be used by the .

    */
    open var ConflictOption : dotnet.System.Data.ConflictOption {
        get {
            return try! get_ConflictOption();
        }
        set(v) {
            return try! set_ConflictOption(value: v);
        }
    }
    /**
    Gets or sets a  object for which Transact-SQL statements are automatically generated.

    */
    open var DataAdapter : Optional<dotnet.System.Data.Common.DbDataAdapter> {
        get {
            return try! get_DataAdapter();
        }
        set(v) {
            return try! set_DataAdapter(value: v!);
        }
    }
    /**
    Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.

    */
    open var QuotePrefix : dotnet.System.String {
        get {
            return try! get_QuotePrefix();
        }
        set(v) {
            return try! set_QuotePrefix(value: v);
        }
    }
    /**
    Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.

    */
    open var QuoteSuffix : dotnet.System.String {
        get {
            return try! get_QuoteSuffix();
        }
        set(v) {
            return try! set_QuoteSuffix(value: v);
        }
    }
    /**
    Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.

    */
    open var SchemaSeparator : dotnet.System.String {
        get {
            return try! get_SchemaSeparator();
        }
        set(v) {
            return try! set_SchemaSeparator(value: v);
        }
    }
    /**
    Specifies whether all column values in an update statement are included or only changed ones.

    */
    open var SetAllValues : Bool {
        get {
            return try! get_SetAllValues();
        }
        set(v) {
            return try! set_SetAllValues(value: v);
        }
    }
} // DbCommandBuilder


// type: System.Data.Common.DbConnection
    /**
    Defines the core behavior of database connections and provides a base class for database-specific connections.

    */
open class DbConnection
    :
    dotnet.System.ComponentModel.Component,
    System_Data_IDbConnection,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbConnection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.Common.DbTransaction BeginTransaction()
// docid: M:System.Data.Common.DbConnection.BeginTransaction
    /**
    Starts a database transaction.

    - Returns: An object representing the new transaction.

    */
    open func BeginTransaction() throws -> dotnet.System.Data.Common.DbTransaction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DbTransaction__BeginTransaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbTransaction(hndl : __return);
        }
    }
    // System.Data.Common.DbTransaction BeginTransaction(System.Data.IsolationLevel)
// docid: M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
    /**
    Starts a database transaction with the specified isolation level.

    - Parameter isolationLevel: One of the enumeration values that specifies the isolation level for the transaction to use.
    - Returns: An object representing the new transaction.

    */
    open func BeginTransaction(isolationLevel : dotnet.System.Data.IsolationLevel) throws -> dotnet.System.Data.Common.DbTransaction {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DbTransaction__BeginTransaction_0__1__IsolationLevel(&__thrown, self.get_handle(), isolationLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbTransaction(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Data.Common.DbTransaction> BeginTransactionAsync(System.Data.IsolationLevel, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
    /**
    Asynchronously begins a database transaction.

    - Parameter isolationLevel: One of the enumeration values that specifies the isolation level for the transaction to use.
    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A task whose  property is an object representing the new transaction.

    */
    open func BeginTransactionAsync(isolationLevel : dotnet.System.Data.IsolationLevel, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Data.Common.DbTransaction> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_System_Threading_Tasks_ValueTask_System_Data_Common_DbTransaction___BeginTransactionAsync_0__2__IsolationLevel_CancellationToken(&__thrown, self.get_handle(), isolationLevel.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Data.Common.DbTransaction> BeginTransactionAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Threading.CancellationToken)
    /**
    Asynchronously begins a database transaction.

    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A task whose  property is an object representing the new transaction.

    */
    open func BeginTransactionAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Data.Common.DbTransaction> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_System_Threading_Tasks_ValueTask_System_Data_Common_DbTransaction___BeginTransactionAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // void ChangeDatabase(System.String)
// docid: M:System.Data.Common.DbConnection.ChangeDatabase(System.String)
    /**
    When overridden in a derived class, changes the current database for an open connection.

    - Parameter databaseName: The name of the database for the connection to use.
    */
    open func ChangeDatabase(databaseName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__ChangeDatabase_0__1__String(&__thrown, self.get_handle(), databaseName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ChangeDatabaseAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)
    /**
    Asynchronously changes the current database for an open connection.

    - Parameter databaseName: The name of the database for the connection to use.
    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A task representing the asynchronous operation.

    */
    open func ChangeDatabaseAsync(databaseName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_Task__ChangeDatabaseAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), databaseName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Close()
// docid: M:System.Data.Common.DbConnection.Close
    /**
    When overridden in a derived class, closes the connection to the database.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CloseAsync()
// docid: M:System.Data.Common.DbConnection.CloseAsync
    /**
    Asynchronously closes the connection to the database.

    - Returns: A  representing the asynchronous operation.

    */
    open func CloseAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_Task__CloseAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Data.Common.DbBatch CreateBatch()
// docid: M:System.Data.Common.DbConnection.CreateBatch
    open func CreateBatch() throws -> dotnet.System.Data.Common.DbBatch {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DbBatch__CreateBatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbBatch(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand CreateCommand()
// docid: M:System.Data.Common.DbConnection.CreateCommand
    /**
    Creates and returns a  object associated with the current connection.

    - Returns: A  object.

    */
    open func CreateCommand() throws -> dotnet.System.Data.Common.DbCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DbCommand__CreateCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbCommand(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Data.Common.DbConnection.DisposeAsync
    /**
    Asynchronously diposes the connection object.

    - Returns: A  representing the asynchronous operation.

    */
    open func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // void EnlistTransaction(System.Transactions.Transaction)
// docid: M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
    /**
    Enlists in the specified transaction.

    - Parameter transaction: A reference to an existing  in which to enlist.
    */
    open func EnlistTransaction(transaction : Optional<dotnet.System.Transactions.Transaction>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__EnlistTransaction_0__1__Transaction(&__thrown, self.get_handle(), transaction?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.DataTable GetSchema()
// docid: M:System.Data.Common.DbConnection.GetSchema
    /**
    Returns schema information for the data source of this .

    - Returns: A  that contains schema information.

    */
    open func GetSchema() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DataTable__GetSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTable GetSchema(System.String)
// docid: M:System.Data.Common.DbConnection.GetSchema(System.String)
    /**
    Returns schema information for the data source of this  using the specified string for the schema name.

    - Parameter collectionName: Specifies the name of the schema to return.
    - Returns: A  that contains schema information.

    */
    open func GetSchema(collectionName : dotnet.System.String) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DataTable__GetSchema_0__1__String(&__thrown, self.get_handle(), collectionName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Data.DataTable GetSchema(System.String, System.String[])
// docid: M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
    /**
    Returns schema information for the data source of this  using the specified string for the schema name and the specified string array for the restriction values.

    - Parameter collectionName: Specifies the name of the schema to return.
    - Parameter restrictionValues: Specifies a set of restriction values for the requested schema.
    - Returns: A  that contains schema information.

    */
    open func GetSchema(collectionName : dotnet.System.String, restrictionValues : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_DataTable__GetSchema_0__2__String_StringArray(&__thrown, self.get_handle(), collectionName.get_handle(), restrictionValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.DataTable> GetSchemaAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.GetSchemaAsync(System.Threading.CancellationToken)
    /**
    This is an asynchronous version of .
            Providers should override with an appropriate implementation.
            The  can optionally be honored.
            The default implementation invokes the synchronous  call and returns a completed task.
            The default implementation will return a cancelled task if passed an already cancelled .
            Exceptions thrown by  will be communicated via the returned Task Exception property.

    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A task representing the asynchronous operation.

    */
    open func GetSchemaAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_System_Threading_Tasks_Task_System_Data_DataTable___GetSchemaAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.DataTable> GetSchemaAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.GetSchemaAsync(System.String,System.Threading.CancellationToken)
    /**
    This is the asynchronous version of .
            Providers should override with an appropriate implementation.
            The  can optionally be honored.
            The default implementation invokes the synchronous  call and returns a completed task.
            The default implementation will return a cancelled task if passed an already cancelled .
            Exceptions thrown by  will be communicated via the returned Task Exception property.

    - Parameter collectionName: Specifies the name of the schema to return.
    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A task representing the asynchronous operation.

    */
    open func GetSchemaAsync(collectionName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_System_Threading_Tasks_Task_System_Data_DataTable___GetSchemaAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), collectionName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Data.DataTable> GetSchemaAsync(System.String, System.String[], System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.GetSchemaAsync(System.String,System.String[],System.Threading.CancellationToken)
    /**
    This is the asynchronous version of .
            Providers should override with an appropriate implementation.
            The  can optionally be honored.
            The default implementation invokes the synchronous  call and returns a completed task.
            The default implementation will return a cancelled task if passed an already cancelled .
            Exceptions thrown by  will be communicated via the returned Task Exception property.

    - Parameter collectionName: Specifies the name of the schema to return.
    - Parameter restrictionValues: Specifies a set of restriction values for the requested schema.
    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A task representing the asynchronous operation.

    */
    open func GetSchemaAsync(collectionName : dotnet.System.String, restrictionValues : dotnet.System_Arr<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_System_Threading_Tasks_Task_System_Data_DataTable___GetSchemaAsync_0__3__String_StringArray_CancellationToken(&__thrown, self.get_handle(), collectionName.get_handle(), restrictionValues.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Open()
// docid: M:System.Data.Common.DbConnection.Open
    /**
    When overridden in a derived class, opens a database connection with the settings specified by the .

    */
    open func Open() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__Open_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OpenAsync()
// docid: M:System.Data.Common.DbConnection.OpenAsync
    /**
    An asynchronous version of , which opens a database connection with the settings specified by the . This method invokes the virtual method  with CancellationToken.None.

    - Returns: A task representing the asynchronous operation.

    */
    open func OpenAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_Task__OpenAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task OpenAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
    /**
    This is the asynchronous version of . Providers should override with an appropriate implementation. The cancellation token can optionally be honored.  
  
 The default implementation invokes the synchronous  call and returns a completed task. The default implementation will return a cancelled task if passed an already cancelled cancellationToken. Exceptions thrown by Open will be communicated via the returned Task Exception property.  
  
 Do not invoke other methods and properties of the  object until the returned Task is complete.

    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A task representing the asynchronous operation.

    */
    open func OpenAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_Task__OpenAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ConnectionString()
// docid: M:System.Data.Common.DbConnection.get_ConnectionString
    open func get_ConnectionString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_String__get_ConnectionString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConnectionString(System.String)
// docid: M:System.Data.Common.DbConnection.set_ConnectionString(System.String)
    open func set_ConnectionString(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__set_ConnectionString_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ConnectionTimeout()
// docid: M:System.Data.Common.DbConnection.get_ConnectionTimeout
    open func get_ConnectionTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_i32__get_ConnectionTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Database()
// docid: M:System.Data.Common.DbConnection.get_Database
    open func get_Database() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_String__get_Database_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DataSource()
// docid: M:System.Data.Common.DbConnection.get_DataSource
    open func get_DataSource() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_String__get_DataSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ServerVersion()
// docid: M:System.Data.Common.DbConnection.get_ServerVersion
    open func get_ServerVersion() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_String__get_ServerVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.ConnectionState get_State()
// docid: M:System.Data.Common.DbConnection.get_State
    open func get_State() throws -> dotnet.System.Data.ConnectionState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_ConnectionState__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ConnectionState(val: __return);
        }
    }
    // [IsSpecialName] bool get_CanCreateBatch()
// docid: M:System.Data.Common.DbConnection.get_CanCreateBatch
    open func get_CanCreateBatch() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnection_bool__get_CanCreateBatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void add_StateChange(System.Data.StateChangeEventHandler)
// docid: M:System.Data.Common.DbConnection.add_StateChange(System.Data.StateChangeEventHandler)
    open func add_StateChange(value : Optional<dotnet.System.Data.StateChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__add_StateChange_0__1__StateChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_StateChange(value : @escaping (dotnet.System.Object, dotnet.System.Data.StateChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.StateChangeEventHandler(value);
        return try add_StateChange(value: del_value);
    }
    // [IsSpecialName] void remove_StateChange(System.Data.StateChangeEventHandler)
// docid: M:System.Data.Common.DbConnection.remove_StateChange(System.Data.StateChangeEventHandler)
    open func remove_StateChange(value : Optional<dotnet.System.Data.StateChangeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnection_void__remove_StateChange_0__1__StateChangeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_StateChange(value : @escaping (dotnet.System.Object, dotnet.System.Data.StateChangeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Data.StateChangeEventHandler(value);
        return try remove_StateChange(value: del_value);
    }
    open var CanCreateBatch : Bool {
        get {
            return try! get_CanCreateBatch();
        }
    }
    /**
    When overridden in a derived class, gets or sets the string used to open the connection.

    */
    open var ConnectionString : dotnet.System.String {
        get {
            return try! get_ConnectionString();
        }
        set(v) {
            return try! set_ConnectionString(value: v);
        }
    }
    /**
    Gets the time to wait (in seconds) while establishing a connection before terminating the attempt and generating an error.

    */
    open var ConnectionTimeout : Swift.Int32 {
        get {
            return try! get_ConnectionTimeout();
        }
    }
    /**
    When overridden in a derived class, gets the name of the database server to which to connect.

    */
    open var DataSource : dotnet.System.String {
        get {
            return try! get_DataSource();
        }
    }
    /**
    When overridden in a derived class, gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.

    */
    open var Database : dotnet.System.String {
        get {
            return try! get_Database();
        }
    }
    /**
    When overridden in a derived class, gets a string that represents the version of the server to which the object is connected.

    */
    open var ServerVersion : dotnet.System.String {
        get {
            return try! get_ServerVersion();
        }
    }
    /**
    Gets a string that describes the state of the connection.

    */
    open var State : dotnet.System.Data.ConnectionState {
        get {
            return try! get_State();
        }
    }
} // DbConnection


// type: System.Data.Common.DbConnectionStringBuilder
    /**
    Provides a base class for strongly typed connection string builders.

    */
open class DbConnectionStringBuilder
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary,
    System_ComponentModel_ICustomTypeDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbConnectionStringBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.Common.DbConnectionStringBuilder.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbConnectionStringBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class, optionally using ODBC rules for quoting values.

    - Parameter useOdbcRules: 
         to use {} to delimit fields;  to use quotation marks.
    */
    public init(useOdbcRules : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbConnectionStringBuilder_ctor_0__1__bool(&__thrown, Swift.Int32(useOdbcRules ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.Object)
// docid: M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)
    /**
    Adds an entry with the specified key and value into the .

    - Parameter keyword: The key to add to the .
    - Parameter value: The value for the specified key.
    */
    open func Add(keyword : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__Add_0__2__String_Object(&__thrown, self.get_handle(), keyword.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String)
// docid: M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
    /**
    Provides an efficient and safe way to append a key and value to an existing  object.

    - Parameter builder: The  to which to add the key/value pair.
    - Parameter keyword: The key to be added.
    - Parameter value: The value for the supplied key.
    */
    open class func AppendKeyValuePair(builder : dotnet.System.Text.StringBuilder, keyword : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__AppendKeyValuePair_0__3__StringBuilder_String_String(&__thrown, builder.get_handle(), keyword.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String, bool)
// docid: M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)
    /**
    Provides an efficient and safe way to append a key and value to an existing  object.

    - Parameter builder: The  to which to add the key/value pair.
    - Parameter keyword: The key to be added.
    - Parameter value: The value for the supplied key.
    - Parameter useOdbcRules: 
         to use {} to delimit fields,  to use quotation marks.
    */
    open class func AppendKeyValuePair(builder : dotnet.System.Text.StringBuilder, keyword : dotnet.System.String, value : Optional<dotnet.System.String>, useOdbcRules : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__AppendKeyValuePair_0__4__StringBuilder_String_String_bool(&__thrown, builder.get_handle(), keyword.get_handle(), value?.get_handle() ?? nil, Swift.Int32(useOdbcRules ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.Common.DbConnectionStringBuilder.Clear
    /**
    Clears the contents of the  instance.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)
    /**
    Determines whether the  contains a specific key.

    - Parameter keyword: The key to locate in the .
    - Returns: 
         if the  contains an entry with the specified key; otherwise .

    */
    open func ContainsKey(keyword : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), keyword.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
// docid: M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
    /**
    Compares the connection information in this  object with the connection information in the supplied object.

    - Parameter connectionStringBuilder: The  to be compared with this  object.
    - Returns: 
         if the connection information in both of the  objects causes an equivalent connection string; otherwise .

    */
    open func EquivalentTo(connectionStringBuilder : dotnet.System.Data.Common.DbConnectionStringBuilder) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__EquivalentTo_0__1__DbConnectionStringBuilder(&__thrown, self.get_handle(), connectionStringBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.String)
// docid: M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)
    /**
    Removes the entry with the specified key from the  instance.

    - Parameter keyword: The key of the key/value pair to be removed from the connection string in this .
    - Returns: 
         if the key existed within the connection string and was removed;  if the key did not exist.

    */
    open func Remove(keyword : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__Remove_0__1__String(&__thrown, self.get_handle(), keyword.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ShouldSerialize(System.String)
// docid: M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)
    /**
    Indicates whether the specified key exists in this  instance.

    - Parameter keyword: The key to locate in the .
    - Returns: 
         if the  contains an entry with the specified key; otherwise .

    */
    open func ShouldSerialize(keyword : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__ShouldSerialize_0__1__String(&__thrown, self.get_handle(), keyword.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Data.Common.DbConnectionStringBuilder.ToString
    /**
    Returns the connection string associated with this .

    - Returns: The current  property.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryGetValue(System.String, ref System.Object)
// docid: M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
    /**
    Retrieves a value corresponding to the supplied key from this .

    - Parameter keyword: The key of the item to retrieve.
    - Parameter value: The value corresponding to the .
    - Returns: 
         if  was found within the connection string,  otherwise.

    */
    open func TryGetValue(keyword : dotnet.System.String, value : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__TryGetValue_0__2__String_outObject(&__thrown, self.get_handle(), keyword.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Object(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_BrowsableConnectionString()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_BrowsableConnectionString
    open func get_BrowsableConnectionString() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__get_BrowsableConnectionString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_BrowsableConnectionString(bool)
// docid: M:System.Data.Common.DbConnectionStringBuilder.set_BrowsableConnectionString(System.Boolean)
    open func set_BrowsableConnectionString(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__set_BrowsableConnectionString_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionString()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_ConnectionString
    open func get_ConnectionString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_String__get_ConnectionString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConnectionString(System.String)
// docid: M:System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(System.String)
    open func set_ConnectionString(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__set_ConnectionString_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFixedSize()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_IsFixedSize
    open func get_IsFixedSize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__get_IsFixedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Keys()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_ICollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_Values
    open func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.Common.DbConnectionStringBuilder.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(keyword : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbConnectionStringBuilder_Object__get_Item_0__1__String(&__thrown, self.get_handle(), keyword.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Data.Common.DbConnectionStringBuilder.set_Item(System.String,System.Object)
    open func set_Item(keyword : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbConnectionStringBuilder_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), keyword.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether the  property is visible in Visual Studio designers.

    */
    open var BrowsableConnectionString : Bool {
        get {
            return try! get_BrowsableConnectionString();
        }
        set(v) {
            return try! set_BrowsableConnectionString(value: v);
        }
    }
    /**
    Gets or sets the connection string associated with the .

    */
    open var ConnectionString : dotnet.System.String {
        get {
            return try! get_ConnectionString();
        }
        set(v) {
            return try! set_ConnectionString(value: v);
        }
    }
    /**
    Gets the current number of keys that are contained within the  property.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  has a fixed size.

    */
    open var IsFixedSize : Bool {
        get {
            return try! get_IsFixedSize();
        }
    }
    /**
    Gets a value that indicates whether the  is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets an  that contains the keys in the .

    */
    open var Keys : dotnet.System.Collections.ICollection {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets an  that contains the values in the .

    */
    open var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // DbConnectionStringBuilder


// type: System.Data.Common.DbDataAdapter
    /**
    Aids implementation of the  interface. Inheritors of  implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a DataAdapter.

    */
open class DbDataAdapter
    :
    dotnet.System.Data.Common.DataAdapter,
    System_Data_IDbDataAdapter,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbDataAdapter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String DefaultSourceTableName
    /**
    The default name used by the  object for table mappings.

    */
    open class var DefaultSourceTableName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbDataAdapter_get_DefaultSourceTableName());
            return __return;
        }
    }
    // System.Int32 Fill(System.Data.DataSet)
// docid: M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
    /**
    Adds or refreshes rows in the .

    - Parameter dataSet: A  to fill with records and, if necessary, schema.
    - Returns: The number of rows successfully added to or refreshed in the . This does not include rows affected by statements that do not return rows.

    */
    open override func Fill(dataSet : dotnet.System.Data.DataSet) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Fill_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Fill(System.Data.DataSet, System.Int32, System.Int32, System.String)
// docid: M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
    /**
    Adds or refreshes rows in a specified range in the  to match those in the data source using the  and  names.

    - Parameter dataSet: A  to fill with records and, if necessary, schema.
    - Parameter startRecord: The zero-based record number to start with.
    - Parameter maxRecords: The maximum number of records to retrieve.
    - Parameter srcTable: The name of the source table to use for table mapping.
    - Returns: The number of rows successfully added to or refreshed in the . This does not include rows affected by statements that do not return rows.

    */
    open func Fill(dataSet : dotnet.System.Data.DataSet, startRecord : Swift.Int32, maxRecords : Swift.Int32, srcTable : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Fill_0__4__DataSet_i32_i32_String(&__thrown, self.get_handle(), dataSet.get_handle(), startRecord, maxRecords, srcTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Fill(System.Data.DataSet, System.String)
// docid: M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
    /**
    Adds or refreshes rows in the  to match those in the data source using the  and  names.

    - Parameter dataSet: A  to fill with records and, if necessary, schema.
    - Parameter srcTable: The name of the source table to use for table mapping.
    - Returns: The number of rows successfully added to or refreshed in the . This does not include rows affected by statements that do not return rows.

    */
    open func Fill(dataSet : dotnet.System.Data.DataSet, srcTable : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Fill_0__2__DataSet_String(&__thrown, self.get_handle(), dataSet.get_handle(), srcTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Fill(System.Data.DataTable)
// docid: M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
    /**
    Adds or refreshes rows in a specified range in the  to match those in the data source using the  name.

    - Parameter dataTable: The name of the  to use for table mapping.
    - Returns: The number of rows successfully added to or refreshed in the . This does not include rows affected by statements that do not return rows.

    */
    open func Fill(dataTable : dotnet.System.Data.DataTable) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Fill_0__1__DataTable(&__thrown, self.get_handle(), dataTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Fill(System.Int32, System.Int32, System.Data.DataTable[])
// docid: M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
    /**
    Adds or refreshes rows in a  to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records.

    - Parameter startRecord: The zero-based record number to start with.
    - Parameter maxRecords: The maximum number of records to retrieve.
    - Parameter dataTables: The  objects to fill from the data source.
    - Returns: The number of rows successfully added to or refreshed in the . This value does not include rows affected by statements that do not return rows.

    */
    open func Fill(startRecord : Swift.Int32, maxRecords : Swift.Int32, dataTables : dotnet.System_Arr<dotnet.System.Data.DataTable>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Fill_0__3__i32_i32_DataTableArray(&__thrown, self.get_handle(), startRecord, maxRecords, dataTables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.DataTable[] FillSchema(System.Data.DataSet, System.Data.SchemaType)
// docid: M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
    /**
    Adds a  named "Table" to the specified  and configures the schema to match that in the data source based on the specified .

    - Parameter dataSet: A  to insert the schema in.
    - Parameter schemaType: One of the  values that specify how to insert the schema.
    - Returns: A reference to a collection of  objects that were added to the .

    */
    open override func FillSchema(dataSet : dotnet.System.Data.DataSet, schemaType : dotnet.System.Data.SchemaType) throws -> dotnet.System_Arr<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DataTableArray__FillSchema_0__2__DataSet_SchemaType(&__thrown, self.get_handle(), dataSet.get_handle(), schemaType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataTable>(hndl : __return);
        }
    }
    // System.Data.DataTable[] FillSchema(System.Data.DataSet, System.Data.SchemaType, System.String)
// docid: M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
    /**
    Adds a  to the specified  and configures the schema to match that in the data source based upon the specified  and .

    - Parameter dataSet: A  to insert the schema in.
    - Parameter schemaType: One of the  values that specify how to insert the schema.
    - Parameter srcTable: The name of the source table to use for table mapping.
    - Returns: A reference to a collection of  objects that were added to the .

    */
    open func FillSchema(dataSet : dotnet.System.Data.DataSet, schemaType : dotnet.System.Data.SchemaType, srcTable : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DataTableArray__FillSchema_0__3__DataSet_SchemaType_String(&__thrown, self.get_handle(), dataSet.get_handle(), schemaType.get_value(), srcTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.DataTable>(hndl : __return);
        }
    }
    // System.Data.DataTable FillSchema(System.Data.DataTable, System.Data.SchemaType)
// docid: M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
    /**
    Configures the schema of the specified  based on the specified .

    - Parameter dataTable: The  to be filled with the schema from the data source.
    - Parameter schemaType: One of the  values.
    - Returns: A  that contains schema information returned from the data source.

    */
    open func FillSchema(dataTable : dotnet.System.Data.DataTable, schemaType : dotnet.System.Data.SchemaType) throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DataTable__FillSchema_0__2__DataTable_SchemaType(&__thrown, self.get_handle(), dataTable.get_handle(), schemaType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.IDataParameter[] GetFillParameters()
// docid: M:System.Data.Common.DbDataAdapter.GetFillParameters
    /**
    Gets the parameters set by the user when executing an SQL SELECT statement.

    - Returns: An array of  objects that contains the parameters set by the user.

    */
    open override func GetFillParameters() throws -> dotnet.System_Arr<dotnet.System.Data.IDataParameter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_IDataParameterArray__GetFillParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Data.IDataParameter>(hndl : __return);
        }
    }
    // System.Int32 Update(System.Data.DataRow[])
// docid: M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
    /**
    Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the .

    - Parameter dataRows: An array of  objects used to update the data source.
    - Returns: The number of rows successfully updated from the .

    */
    open func Update(dataRows : dotnet.System_Arr<dotnet.System.Data.DataRow>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Update_0__1__DataRowArray(&__thrown, self.get_handle(), dataRows.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Update(System.Data.DataSet)
// docid: M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
    /**
    Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified .

    - Parameter dataSet: The  used to update the data source.
    - Returns: The number of rows successfully updated from the .

    */
    open override func Update(dataSet : dotnet.System.Data.DataSet) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Update_0__1__DataSet(&__thrown, self.get_handle(), dataSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Update(System.Data.DataSet, System.String)
// docid: M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
    /**
    Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the  with the specified  name.

    - Parameter dataSet: The  to use to update the data source.
    - Parameter srcTable: The name of the source table to use for table mapping.
    - Returns: The number of rows successfully updated from the .

    */
    open func Update(dataSet : dotnet.System.Data.DataSet, srcTable : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Update_0__2__DataSet_String(&__thrown, self.get_handle(), dataSet.get_handle(), srcTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Update(System.Data.DataTable)
// docid: M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
    /**
    Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified .

    - Parameter dataTable: The  used to update the data source.
    - Returns: The number of rows successfully updated from the .

    */
    open func Update(dataTable : dotnet.System.Data.DataTable) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__Update_0__1__DataTable(&__thrown, self.get_handle(), dataTable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbCommand get_DeleteCommand()
// docid: M:System.Data.Common.DbDataAdapter.get_DeleteCommand
    open func get_DeleteCommand() throws -> Optional<dotnet.System.Data.Common.DbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DbCommand__get_DeleteCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DeleteCommand(System.Data.Common.DbCommand)
// docid: M:System.Data.Common.DbDataAdapter.set_DeleteCommand(System.Data.Common.DbCommand)
    open func set_DeleteCommand(value : Optional<dotnet.System.Data.Common.DbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataAdapter_void__set_DeleteCommand_0__1__DbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbCommand get_InsertCommand()
// docid: M:System.Data.Common.DbDataAdapter.get_InsertCommand
    open func get_InsertCommand() throws -> Optional<dotnet.System.Data.Common.DbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DbCommand__get_InsertCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InsertCommand(System.Data.Common.DbCommand)
// docid: M:System.Data.Common.DbDataAdapter.set_InsertCommand(System.Data.Common.DbCommand)
    open func set_InsertCommand(value : Optional<dotnet.System.Data.Common.DbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataAdapter_void__set_InsertCommand_0__1__DbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbCommand get_SelectCommand()
// docid: M:System.Data.Common.DbDataAdapter.get_SelectCommand
    open func get_SelectCommand() throws -> Optional<dotnet.System.Data.Common.DbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DbCommand__get_SelectCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SelectCommand(System.Data.Common.DbCommand)
// docid: M:System.Data.Common.DbDataAdapter.set_SelectCommand(System.Data.Common.DbCommand)
    open func set_SelectCommand(value : Optional<dotnet.System.Data.Common.DbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataAdapter_void__set_SelectCommand_0__1__DbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_UpdateBatchSize()
// docid: M:System.Data.Common.DbDataAdapter.get_UpdateBatchSize
    open func get_UpdateBatchSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_i32__get_UpdateBatchSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_UpdateBatchSize(System.Int32)
// docid: M:System.Data.Common.DbDataAdapter.set_UpdateBatchSize(System.Int32)
    open func set_UpdateBatchSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataAdapter_void__set_UpdateBatchSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbCommand get_UpdateCommand()
// docid: M:System.Data.Common.DbDataAdapter.get_UpdateCommand
    open func get_UpdateCommand() throws -> Optional<dotnet.System.Data.Common.DbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataAdapter_DbCommand__get_UpdateCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UpdateCommand(System.Data.Common.DbCommand)
// docid: M:System.Data.Common.DbDataAdapter.set_UpdateCommand(System.Data.Common.DbCommand)
    open func set_UpdateCommand(value : Optional<dotnet.System.Data.Common.DbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataAdapter_void__set_UpdateCommand_0__1__DbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a command for deleting records from the data set.

    */
    open var DeleteCommand : Optional<dotnet.System.Data.Common.DbCommand> {
        get {
            return try! get_DeleteCommand();
        }
        set(v) {
            return try! set_DeleteCommand(value: v!);
        }
    }
    /**
    Gets or sets a command used to insert new records into the data source.

    */
    open var InsertCommand : Optional<dotnet.System.Data.Common.DbCommand> {
        get {
            return try! get_InsertCommand();
        }
        set(v) {
            return try! set_InsertCommand(value: v!);
        }
    }
    /**
    Gets or sets a command used to select records in the data source.

    */
    open var SelectCommand : Optional<dotnet.System.Data.Common.DbCommand> {
        get {
            return try! get_SelectCommand();
        }
        set(v) {
            return try! set_SelectCommand(value: v!);
        }
    }
    /**
    Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.

    */
    open var UpdateBatchSize : Swift.Int32 {
        get {
            return try! get_UpdateBatchSize();
        }
        set(v) {
            return try! set_UpdateBatchSize(value: v);
        }
    }
    /**
    Gets or sets a command used to update records in the data source.

    */
    open var UpdateCommand : Optional<dotnet.System.Data.Common.DbCommand> {
        get {
            return try! get_UpdateCommand();
        }
        set(v) {
            return try! set_UpdateCommand(value: v!);
        }
    }
} // DbDataAdapter


// type: System.Data.Common.DbDataReader
    /**
    Reads a forward-only stream of rows from a data source.

    */
open class DbDataReader
    :
    dotnet.System.MarshalByRefObject,
    System_Collections_IEnumerable,
    System_Data_IDataReader,
    System_Data_IDataRecord,
    System_IDisposable,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbDataReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Data.Common.DbDataReader.Close
    /**
    Closes the  object.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CloseAsync()
// docid: M:System.Data.Common.DbDataReader.CloseAsync
    /**
    Asynchronously closes the  object.

    - Returns: A task representing the asynchronous operation.

    */
    open func CloseAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Task__CloseAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Data.Common.DbDataReader.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbDataReader_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Data.Common.DbDataReader.DisposeAsync
    /**
    Asynchronously releases all resources used by the current instance of the  class.

    - Returns: A  representing the asynchronous operation.

    */
    open func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // bool GetBoolean(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a Boolean.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetBoolean(ordinal : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_bool__GetBoolean_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte GetByte(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetByte(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a byte.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetByte(ordinal : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_u8__GetByte_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, reads a specified number of bytes from the specified column starting at a specified index and writes them to a buffer starting at a specified position in the buffer.

    - Parameter ordinal: The zero-based column ordinal.
    - Parameter dataOffset: The index within the row from which to begin the read operation.
    - Parameter buffer: The buffer into which to copy the data.
    - Parameter bufferOffset: The index with the buffer to which the data will be copied.
    - Parameter length: The maximum number of bytes to read.
    - Returns: The actual number of bytes read.

    */
    open func GetBytes(ordinal : Swift.Int32, dataOffset : Swift.Int64, buffer : Optional<dotnet.System_Arr<Swift.UInt8>>, bufferOffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i64__GetBytes_0__5__i32_i64_u8Array_i32_i32(&__thrown, self.get_handle(), ordinal, dataOffset, (buffer?.get_handle()), bufferOffset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char GetChar(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetChar(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a single character.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetChar(ordinal : Swift.Int32) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Char__GetChar_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.Int64 GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, reads a specified number of characters from a specified column starting at a specified index, and writes them to a buffer starting at a specified position.

    - Parameter ordinal: The zero-based column ordinal.
    - Parameter dataOffset: The index within the row from which to begin the read operation.
    - Parameter buffer: The buffer into which to copy the data.
    - Parameter bufferOffset: The index with the buffer to which the data will be copied.
    - Parameter length: The maximum number of characters to read.
    - Returns: The actual number of characters read.

    */
    open func GetChars(ordinal : Swift.Int32, dataOffset : Swift.Int64, buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>, bufferOffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i64__GetChars_0__5__i32_i64_CharArray_i32_i32(&__thrown, self.get_handle(), ordinal, dataOffset, (buffer?.get_handle()), bufferOffset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.Common.DbDataReader GetData(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetData(System.Int32)
    /**
    Returns a nested data reader for the requested column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: A data reader.

    */
    open func GetData(ordinal : Swift.Int32) throws -> dotnet.System.Data.Common.DbDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_DbDataReader__GetData_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbDataReader(hndl : __return);
        }
    }
    // System.String GetDataTypeName(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)
    /**
    When overridden in a derived class, gets name of the data type of the specified column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The name of the data type.

    */
    open func GetDataTypeName(ordinal : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_String__GetDataTypeName_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.DateTime GetDateTime(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a  object.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetDateTime(ordinal : Swift.Int32) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_DateTime__GetDateTime_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal GetDecimal(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a .

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetDecimal(ordinal : Swift.Int32) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Decimal__GetDecimal_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double GetDouble(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetDouble(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a double-precision floating point number.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetDouble(ordinal : Swift.Int32) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_f64__GetDouble_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.Common.DbDataReader.GetEnumerator
    /**
    When overridden in a derived class, returns an enumerator that can be used to iterate through the rows in the data reader.

    - Returns: An enumerator that can be used to iterate through the rows in the data reader.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Type GetFieldType(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)
    /**
    When overridden in a derived class, gets the data type of the specified column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The data type of the specified column.

    */
    open func GetFieldType(ordinal : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Type__GetFieldType_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(System.Int32)
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken)
// TODO COPE (write_all_methods) (unused generic param) T GetFieldValue<T>(System.Int32)
    // System.Single GetFloat(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetFloat(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a single-precision floating point number.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetFloat(ordinal : Swift.Int32) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_f32__GetFloat_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid GetGuid(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetGuid(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a globally unique identifier (GUID).

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetGuid(ordinal : Swift.Int32) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Guid__GetGuid_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 GetInt16(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetInt16(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a 16-bit signed integer.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetInt16(ordinal : Swift.Int32) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i16__GetInt16_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetInt32(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetInt32(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a 32-bit signed integer.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetInt32(ordinal : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__GetInt32_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetInt64(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetInt64(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as a 64-bit signed integer.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetInt64(ordinal : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i64__GetInt64_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetName(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetName(System.Int32)
    /**
    When overridden in a derived class, gets the name of the column, given the zero-based column ordinal.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The name of the specified column.

    */
    open func GetName(ordinal : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_String__GetName_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 GetOrdinal(System.String)
// docid: M:System.Data.Common.DbDataReader.GetOrdinal(System.String)
    /**
    When overridden in a derived class, gets the column ordinal given the name of the column.

    - Parameter name: The name of the column.
    - Returns: The zero-based column ordinal.

    */
    open func GetOrdinal(name : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__GetOrdinal_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetProviderSpecificFieldType(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
    /**
    Gets the provider-specific type of the specified column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: A provider-specific .NET type.

    */
    open func GetProviderSpecificFieldType(ordinal : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Type__GetProviderSpecificFieldType_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Object GetProviderSpecificValue(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
    /**
    Gets the value of the specified column as an instance of a provider-specific type.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetProviderSpecificValue(ordinal : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Object__GetProviderSpecificValue_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 GetProviderSpecificValues(System.Object[])
// docid: M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
    /**
    Gets all provider-specific attribute columns in the collection for the current row.

    - Parameter values: An array of  into which to copy the attribute columns.
    - Returns: The number of instances of elements in the array.

    */
    open func GetProviderSpecificValues(values : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__GetProviderSpecificValues_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.DataTable GetSchemaTable()
// docid: M:System.Data.Common.DbDataReader.GetSchemaTable
    /**
    Returns a  that describes the column metadata of the .

    - Returns: A  that describes the column metadata.

    */
    open func GetSchemaTable() throws -> Optional<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_DataTable__GetSchemaTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Data.DataTable> GetSchemaTableAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbDataReader.GetSchemaTableAsync(System.Threading.CancellationToken)
    /**
    This is the asynchronous version of .
            Providers should override with an appropriate implementation.
            The  can optionally be honored.
            The default implementation invokes the synchronous  call and returns a completed task.
            The default implementation will return a cancelled task if passed an already cancelled .
            Exceptions thrown by  will be communicated via the returned Task Exception property.

    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A task representing the asynchronous operation.

    */
    open func GetSchemaTableAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Data.DataTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_System_Data_DataTable___GetSchemaTableAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn>> GetColumnSchemaAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbDataReader.GetColumnSchemaAsync(System.Threading.CancellationToken)
    /**
    This is the asynchronous version of .
            Providers should override with an appropriate implementation.
            The  can optionally be honored.
            The default implementation invokes the synchronous  call and returns a completed task.
            The default implementation will return a cancelled task if passed an already cancelled .
            Exceptions thrown by  will be communicated via the returned Task Exception property.

    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A task representing the asynchronous operation.

    */
    open func GetColumnSchemaAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Data.Common.DbColumn>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_System_Collections_ObjectModel_System_Collections_ObjectModel_ReadOnlyCollection_System_Data_Common_DbColumn____GetColumnSchemaAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IO.Stream GetStream(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetStream(System.Int32)
    /**
    Gets a stream to retrieve data from the specified column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: A stream.

    */
    open func GetStream(ordinal : Swift.Int32) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Stream__GetStream_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.String GetString(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetString(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as an instance of .

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetString(ordinal : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_String__GetString_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.IO.TextReader GetTextReader(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)
    /**
    Gets a text reader to retrieve data from the column.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: A text reader.

    */
    open func GetTextReader(ordinal : Swift.Int32) throws -> dotnet.System.IO.TextReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_TextReader__GetTextReader_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextReader(hndl : __return);
        }
    }
    // System.Object GetValue(System.Int32)
// docid: M:System.Data.Common.DbDataReader.GetValue(System.Int32)
    /**
    When overridden in a derived class, gets the value of the specified column as an instance of .

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetValue(ordinal : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Object__GetValue_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 GetValues(System.Object[])
// docid: M:System.Data.Common.DbDataReader.GetValues(System.Object[])
    /**
    When overridden in a derived class, populates an array of objects with the column values of the current row.

    - Parameter values: An array of  into which to copy the attribute columns.
    - Returns: The number of instances of  in the array.

    */
    open func GetValues(values : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__GetValues_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDBNull(System.Int32)
// docid: M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)
    /**
    When overridden in a derived class, gets a value that indicates whether the column contains nonexistent or missing values.

    - Parameter ordinal: The zero-based column ordinal.
    - Returns: 
         if the specified column is equivalent to ; otherwise, .

    */
    open func IsDBNull(ordinal : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_bool__IsDBNull_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> IsDBNullAsync(System.Int32)
// docid: M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
    /**
    Asynchronously gets a value that indicates whether the column contains non-existent or missing values.

    - Parameter ordinal: The zero-based column to be retrieved.
    - Returns: A  whose  property is  if the specified column value is equivalent to  or  if it is not.

    */
    open func IsDBNullAsync(ordinal : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_bool___IsDBNullAsync_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> IsDBNullAsync(System.Int32, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
    /**
    Asynchronously gets a value that indicates whether the column contains non-existent or missing values.

    - Parameter ordinal: The zero-based column to be retrieved.
    - Parameter cancellationToken: A token to cancel the asynchronous operation.
    - Returns: A  whose  property is  if the specified column value is equivalent to  or  if it is not.

    */
    open func IsDBNullAsync(ordinal : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_bool___IsDBNullAsync_0__2__i32_CancellationToken(&__thrown, self.get_handle(), ordinal, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool NextResult()
// docid: M:System.Data.Common.DbDataReader.NextResult
    /**
    When overridden in a derived class, advances the reader to the next result when reading the results of a batch of statements.

    - Returns: 
         if there are more result sets; otherwise, .

    */
    open func NextResult() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_bool__NextResult_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> NextResultAsync()
// docid: M:System.Data.Common.DbDataReader.NextResultAsync
    /**
    Asynchronously advances the reader to the next result when reading the results of a batch of statements.

    - Returns: A task whose  property is  if there are more result sets or  if there aren't.

    */
    open func NextResultAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_bool___NextResultAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> NextResultAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
    /**
    Asynchronously advances the reader to the next result when reading the results of a batch of statements.

    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A  whose  property is  if there are more result sets or  if there aren't.

    */
    open func NextResultAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_bool___NextResultAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool Read()
// docid: M:System.Data.Common.DbDataReader.Read
    /**
    When overridden in a derived class, advances the reader to the next record in a result set.

    - Returns: 
         if there are more rows; otherwise, .

    */
    open func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> ReadAsync()
// docid: M:System.Data.Common.DbDataReader.ReadAsync
    /**
    Asynchronously advances the reader to the next record in a result set.

    - Returns: A  whose  property is  if there are more rows or  if there aren't.

    */
    open func ReadAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_bool___ReadAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> ReadAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
    /**
    Asynchronously advances the reader to the next record in a result set.

    - Parameter cancellationToken: The cancellation instruction.
    - Returns: A  whose  property is  if there are more rows or  if there aren't.

    */
    open func ReadAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_System_Threading_Tasks_Task_bool___ReadAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Data.Common.DbDataReader.get_Depth
    open func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_FieldCount()
// docid: M:System.Data.Common.DbDataReader.get_FieldCount
    open func get_FieldCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__get_FieldCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_HasRows()
// docid: M:System.Data.Common.DbDataReader.get_HasRows
    open func get_HasRows() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_bool__get_HasRows_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsClosed()
// docid: M:System.Data.Common.DbDataReader.get_IsClosed
    open func get_IsClosed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_bool__get_IsClosed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_RecordsAffected()
// docid: M:System.Data.Common.DbDataReader.get_RecordsAffected
    open func get_RecordsAffected() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__get_RecordsAffected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_VisibleFieldCount()
// docid: M:System.Data.Common.DbDataReader.get_VisibleFieldCount
    open func get_VisibleFieldCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_i32__get_VisibleFieldCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Data.Common.DbDataReader.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(ordinal : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), ordinal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.Common.DbDataReader.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReader_Object__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets a value indicating the depth of nesting for the current row.

    */
    open var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    When overridden in a derived class, gets the number of columns in the current row.

    */
    open var FieldCount : Swift.Int32 {
        get {
            return try! get_FieldCount();
        }
    }
    /**
    When overridden in a derived class, gets a value that indicates whether this  contains one or more rows.

    */
    open var HasRows : Bool {
        get {
            return try! get_HasRows();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the  is closed.

    */
    open var IsClosed : Bool {
        get {
            return try! get_IsClosed();
        }
    }
    /**
    When overridden in a derived class, gets the number of rows changed, inserted, or deleted by execution of the SQL statement.

    */
    open var RecordsAffected : Swift.Int32 {
        get {
            return try! get_RecordsAffected();
        }
    }
    /**
    Gets the number of fields in the  that are not hidden.

    */
    open var VisibleFieldCount : Swift.Int32 {
        get {
            return try! get_VisibleFieldCount();
        }
    }
} // DbDataReader


// type: System.Data.Common.DbDataReaderExtensions
public struct DbDataReaderExtensions {
    // bool CanGetColumnSchema(System.Data.Common.DbDataReader)
// docid: M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
    /**
    Gets a value that indicates whether a  can get a column schema.

    - Parameter reader: The  to be checked for column schema support.
    - Returns: 
         if the  can get a column schema; otherwise, .

    */
    public static func CanGetColumnSchema(reader : dotnet.System.Data.Common.DbDataReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReaderExtensions_bool__CanGetColumnSchema_0__1__DbDataReader(&__thrown, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn> GetColumnSchema(System.Data.Common.DbDataReader)
// docid: M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
    /**
    Gets the column schema ( collection) for a .

    - Parameter reader: The  to return the column schema.
    - Returns: The column schema ( collection) for a .

    */
    public static func GetColumnSchema(reader : dotnet.System.Data.Common.DbDataReader) throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Data.Common.DbColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataReaderExtensions_System_Collections_ObjectModel_ReadOnlyCollection_System_Data_Common_DbColumn___GetColumnSchema_0__1__DbDataReader(&__thrown, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
} // DbDataReaderExtensions


// type: System.Data.Common.DbDataRecord
    /**
    Implements  and , and provides data binding support for .

    */
open class DbDataRecord
    :
    dotnet.System.Object,
    System_ComponentModel_ICustomTypeDescriptor,
    System_Data_IDataRecord
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbDataRecord_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool GetBoolean(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)
    /**
    Returns the value of the specified column as a Boolean.

    - Parameter i: The column ordinal.
    - Returns: 
         if the Boolean is ; otherwise .

    */
    open func GetBoolean(i : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_bool__GetBoolean_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte GetByte(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetByte(System.Int32)
    /**
    Returns the value of the specified column as a byte.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetByte(i : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_u8__GetByte_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    Returns the value of the specified column as a byte array.

    - Parameter i: The zero-based column ordinal.
    - Parameter dataIndex: The index within the field from which to start the read operation.
    - Parameter buffer: The buffer into which to read the stream of bytes.
    - Parameter bufferIndex: The index for  to start the read operation.
    - Parameter length: The number of bytes to read.
    - Returns: The value of the specified column.

    */
    open func GetBytes(i : Swift.Int32, dataIndex : Swift.Int64, buffer : Optional<dotnet.System_Arr<Swift.UInt8>>, bufferIndex : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i64__GetBytes_0__5__i32_i64_u8Array_i32_i32(&__thrown, self.get_handle(), i, dataIndex, (buffer?.get_handle()), bufferIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char GetChar(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetChar(System.Int32)
    /**
    Returns the value of the specified column as a character.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetChar(i : Swift.Int32) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Char__GetChar_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.Int64 GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    Returns the value of the specified column as a character array.

    - Parameter i: Column ordinal.
    - Parameter dataIndex: Buffer to copy data into.
    - Parameter buffer: Maximum length to copy into the buffer.
    - Parameter bufferIndex: Point to start from within the buffer.
    - Parameter length: Point to start from within the source data.
    - Returns: The value of the specified column.

    */
    open func GetChars(i : Swift.Int32, dataIndex : Swift.Int64, buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>, bufferIndex : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i64__GetChars_0__5__i32_i64_CharArray_i32_i32(&__thrown, self.get_handle(), i, dataIndex, (buffer?.get_handle()), bufferIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.IDataReader GetData(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetData(System.Int32)
    /**
    Not currently supported.

    - Parameter i: Not currently supported.
    - Returns: Not currently supported.

    */
    open /* method final */ func GetData(i : Swift.Int32) throws -> dotnet.System.Data.IDataReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_IDataReader__GetData_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IDataReader(hndl : __return);
        }
    }
    // System.String GetDataTypeName(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)
    /**
    Returns the name of the back-end data type.

    - Parameter i: The column ordinal.
    - Returns: The name of the back-end data type.

    */
    open func GetDataTypeName(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_String__GetDataTypeName_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.DateTime GetDateTime(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)
    /**
    Returns the value of the specified column as a  object.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetDateTime(i : Swift.Int32) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_DateTime__GetDateTime_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal GetDecimal(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)
    /**
    Returns the value of the specified column as a  object.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetDecimal(i : Swift.Int32) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Decimal__GetDecimal_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double GetDouble(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)
    /**
    Returns the value of the specified column as a double-precision floating-point number.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetDouble(i : Swift.Int32) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_f64__GetDouble_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetFieldType(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)
    /**
    Returns the  that is the data type of the object.

    - Parameter i: The column ordinal.
    - Returns: The  that is the data type of the object.

    */
    open func GetFieldType(i : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Type__GetFieldType_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Single GetFloat(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)
    /**
    Returns the value of the specified column as a single-precision floating-point number.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetFloat(i : Swift.Int32) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_f32__GetFloat_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid GetGuid(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)
    /**
    Returns the GUID value of the specified field.

    - Parameter i: The index of the field to return.
    - Returns: The GUID value of the specified field.

    */
    open func GetGuid(i : Swift.Int32) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Guid__GetGuid_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 GetInt16(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)
    /**
    Returns the value of the specified column as a 16-bit signed integer.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetInt16(i : Swift.Int32) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i16__GetInt16_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetInt32(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)
    /**
    Returns the value of the specified column as a 32-bit signed integer.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetInt32(i : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i32__GetInt32_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetInt64(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)
    /**
    Returns the value of the specified column as a 64-bit signed integer.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetInt64(i : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i64__GetInt64_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetName(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetName(System.Int32)
    /**
    Returns the name of the specified column.

    - Parameter i: The column ordinal.
    - Returns: The name of the specified column.

    */
    open func GetName(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_String__GetName_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 GetOrdinal(System.String)
// docid: M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)
    /**
    Returns the column ordinal, given the name of the column.

    - Parameter name: The name of the column.
    - Returns: The column ordinal.

    */
    open func GetOrdinal(name : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i32__GetOrdinal_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetString(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetString(System.Int32)
    /**
    Returns the value of the specified column as a string.

    - Parameter i: The column ordinal.
    - Returns: The value of the specified column.

    */
    open func GetString(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_String__GetString_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object GetValue(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.GetValue(System.Int32)
    /**
    Returns the value at the specified column in its native format.

    - Parameter i: The column ordinal.
    - Returns: The value to return.

    */
    open func GetValue(i : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Object__GetValue_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 GetValues(System.Object[])
// docid: M:System.Data.Common.DbDataRecord.GetValues(System.Object[])
    /**
    Populates an array of objects with the column values of the current record.

    - Parameter values: An array of  to copy the attribute fields into.
    - Returns: The number of instances of  in the array.

    */
    open func GetValues(values : dotnet.System_Arr<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i32__GetValues_0__1__ObjectArray(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDBNull(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)
    /**
    Used to indicate nonexistent values.

    - Parameter i: The column ordinal.
    - Returns: 
         if the specified column is equivalent to ; otherwise .

    */
    open func IsDBNull(i : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_bool__IsDBNull_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_FieldCount()
// docid: M:System.Data.Common.DbDataRecord.get_FieldCount
    open func get_FieldCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_i32__get_FieldCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Data.Common.DbDataRecord.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(i : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Data.Common.DbDataRecord.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataRecord_Object__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Indicates the number of fields within the current record. This property is read-only.

    */
    open var FieldCount : Swift.Int32 {
        get {
            return try! get_FieldCount();
        }
    }
} // DbDataRecord


// type: System.Data.Common.DbDataSourceEnumerator
    /**
    Provides a mechanism for enumerating all available instances of database servers within the local network.

    */
open class DbDataSourceEnumerator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbDataSourceEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.DataTable GetDataSources()
// docid: M:System.Data.Common.DbDataSourceEnumerator.GetDataSources
    /**
    Retrieves a  containing information about all visible instances of the server represented by the strongly typed instance of this class.

    - Returns: A  containing information about the visible instances of the associated data source.

    */
    open func GetDataSources() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbDataSourceEnumerator_DataTable__GetDataSources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
} // DbDataSourceEnumerator


// type: System.Data.Common.DbEnumerator
    /**
    Exposes the  method, which supports a simple iteration over a collection by a .NET Framework data provider.

    */
open class DbEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.Common.DbDataReader)
// docid: M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
    /**
    Initializes a new instance of the  class with the give n data reader.

    - Parameter reader: The DataReader through which to iterate.
    */
    public init(reader : dotnet.System.Data.Common.DbDataReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbEnumerator_ctor_0__1__DbDataReader(&__thrown, reader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.Common.DbDataReader, bool)
// docid: M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified reader and indicates whether to automatically close the reader after iterating through its data.

    - Parameter reader: The DataReader through which to iterate.
    - Parameter closeReader: 
         to automatically close the DataReader after iterating through its data; otherwise, .
    */
    public init(reader : dotnet.System.Data.Common.DbDataReader, closeReader : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbEnumerator_ctor_0__2__DbDataReader_bool(&__thrown, reader.get_handle(), Swift.Int32(closeReader ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.IDataReader)
// docid: M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
    /**
    Initializes a new instance of the  class using the specified .

    - Parameter reader: The  through which to iterate.
    */
    public init(reader : dotnet.System.Data.IDataReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbEnumerator_ctor_0__1__IDataReader(&__thrown, reader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.IDataReader, bool)
// docid: M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified , and indicates whether to automatically close the  after iterating through its data.

    - Parameter reader: The  through which to iterate.
    - Parameter closeReader: 
         to automatically close the  after iterating through its data; otherwise, .
    */
    public init(reader : dotnet.System.Data.IDataReader, closeReader : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbEnumerator_ctor_0__2__IDataReader_bool(&__thrown, reader.get_handle(), Swift.Int32(closeReader ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool MoveNext()
// docid: M:System.Data.Common.DbEnumerator.MoveNext
    /**
    Advances the enumerator to the next element of the collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    open /* method final */ func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Data.Common.DbEnumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the collection.

    */
    open /* method final */ func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Current()
// docid: M:System.Data.Common.DbEnumerator.get_Current
    open /* method final */ func get_Current() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbEnumerator_Object__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the current element in the collection.

    */
    public var Current : dotnet.System.Object {
        get {
            return try! get_Current();
        }
    }
} // DbEnumerator


// type: System.Data.Common.DbException
    /**
    The base class for all exceptions thrown on behalf of the data source.

    */
open class DbException
    :
    dotnet.System.Runtime.InteropServices.ExternalException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsTransient()
// docid: M:System.Data.Common.DbException.get_IsTransient
    open func get_IsTransient() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbException_bool__get_IsTransient_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_SqlState()
// docid: M:System.Data.Common.DbException.get_SqlState
    open func get_SqlState() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbException_String__get_SqlState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.Common.DbBatchCommand get_BatchCommand()
// docid: M:System.Data.Common.DbException.get_BatchCommand
    open func get_BatchCommand() throws -> Optional<dotnet.System.Data.Common.DbBatchCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbException_DbBatchCommand__get_BatchCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbBatchCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var BatchCommand : Optional<dotnet.System.Data.Common.DbBatchCommand> {
        get {
            return try! get_BatchCommand();
        }
    }
    /**
    Indicates whether the error represented by this  could be a transient error, i.e. if retrying the triggering operation may succeed without any other change.

    */
    open var IsTransient : Bool {
        get {
            return try! get_IsTransient();
        }
    }
    /**
    
         For database providers which support it, contains a standard SQL 5-character return code indicating the success or failure of the database operation. The first 2 characters represent the class of the return code (e.g. error, success), while the last 3 characters represent the subclass, allowing detection of error scenarios in a database-portable way.
         For database providers which don't support it, or for inapplicable error scenarios, contains .
      

    */
    open var SqlState : Optional<dotnet.System.String> {
        get {
            return try! get_SqlState();
        }
    }
} // DbException


// type: System.Data.Common.DbMetaDataCollectionNames
public struct DbMetaDataCollectionNames {
    // static field: System.String DataSourceInformation
    /**
    A constant for use with the  method that represents the DataSourceInformation collection.

    */
    public static var DataSourceInformation : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataCollectionNames_get_DataSourceInformation());
            return __return;
        }
    }
    // static field: System.String DataTypes
    /**
    A constant for use with the  method that represents the DataTypes collection.

    */
    public static var DataTypes : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataCollectionNames_get_DataTypes());
            return __return;
        }
    }
    // static field: System.String MetaDataCollections
    /**
    A constant for use with the  method that represents the MetaDataCollections collection.

    */
    public static var MetaDataCollections : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataCollectionNames_get_MetaDataCollections());
            return __return;
        }
    }
    // static field: System.String ReservedWords
    /**
    A constant for use with the  method that represents the ReservedWords collection.

    */
    public static var ReservedWords : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataCollectionNames_get_ReservedWords());
            return __return;
        }
    }
    // static field: System.String Restrictions
    /**
    A constant for use with the  method that represents the Restrictions collection.

    */
    public static var Restrictions : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataCollectionNames_get_Restrictions());
            return __return;
        }
    }
} // DbMetaDataCollectionNames


// type: System.Data.Common.DbMetaDataColumnNames
public struct DbMetaDataColumnNames {
    // static field: System.String CollectionName
    /**
    Used by the GetSchema method to create the CollectionName column in the DataTypes collection.

    */
    public static var CollectionName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_CollectionName());
            return __return;
        }
    }
    // static field: System.String ColumnSize
    /**
    Used by the GetSchema method to create the ColumnSize column in the DataTypes collection.

    */
    public static var ColumnSize : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ColumnSize());
            return __return;
        }
    }
    // static field: System.String CompositeIdentifierSeparatorPattern
    /**
    Used by the GetSchema method to create the CompositeIdentifierSeparatorPattern column in the DataSourceInformation collection.

    */
    public static var CompositeIdentifierSeparatorPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_CompositeIdentifierSeparatorPattern());
            return __return;
        }
    }
    // static field: System.String CreateFormat
    /**
    Used by the GetSchema method to create the CreateFormat column in the DataTypes collection.

    */
    public static var CreateFormat : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_CreateFormat());
            return __return;
        }
    }
    // static field: System.String CreateParameters
    /**
    Used by the GetSchema method to create the CreateParameters column in the DataTypes collection.

    */
    public static var CreateParameters : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_CreateParameters());
            return __return;
        }
    }
    // static field: System.String DataSourceProductName
    /**
    Used by the GetSchema method to create the DataSourceProductName column in the DataSourceInformation collection.

    */
    public static var DataSourceProductName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_DataSourceProductName());
            return __return;
        }
    }
    // static field: System.String DataSourceProductVersion
    /**
    Used by the GetSchema method to create the DataSourceProductVersion column in the DataSourceInformation collection.

    */
    public static var DataSourceProductVersion : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_DataSourceProductVersion());
            return __return;
        }
    }
    // static field: System.String DataSourceProductVersionNormalized
    /**
    Used by the GetSchema method to create the DataSourceProductVersionNormalized column in the DataSourceInformation collection.

    */
    public static var DataSourceProductVersionNormalized : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_DataSourceProductVersionNormalized());
            return __return;
        }
    }
    // static field: System.String DataType
    /**
    Used by the GetSchema method to create the DataType column in the DataTypes collection.

    */
    public static var DataType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_DataType());
            return __return;
        }
    }
    // static field: System.String GroupByBehavior
    /**
    Used by the GetSchema method to create the GroupByBehavior column in the DataSourceInformation collection.

    */
    public static var GroupByBehavior : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_GroupByBehavior());
            return __return;
        }
    }
    // static field: System.String IdentifierCase
    /**
    Used by the GetSchema method to create the IdentifierCase column in the DataSourceInformation collection.

    */
    public static var IdentifierCase : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IdentifierCase());
            return __return;
        }
    }
    // static field: System.String IdentifierPattern
    /**
    Used by the GetSchema method to create the IdentifierPattern column in the DataSourceInformation collection.

    */
    public static var IdentifierPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IdentifierPattern());
            return __return;
        }
    }
    // static field: System.String IsAutoIncrementable
    /**
    Used by the GetSchema method to create the IsAutoIncrementable column in the DataTypes collection.

    */
    public static var IsAutoIncrementable : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsAutoIncrementable());
            return __return;
        }
    }
    // static field: System.String IsBestMatch
    /**
    Used by the GetSchema method to create the IsBestMatch column in the DataTypes collection.

    */
    public static var IsBestMatch : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsBestMatch());
            return __return;
        }
    }
    // static field: System.String IsCaseSensitive
    /**
    Used by the GetSchema method to create the IsCaseSensitive column in the DataTypes collection.

    */
    public static var IsCaseSensitive : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsCaseSensitive());
            return __return;
        }
    }
    // static field: System.String IsConcurrencyType
    /**
    Used by the GetSchema method to create the IsConcurrencyType column in the DataTypes collection.

    */
    public static var IsConcurrencyType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsConcurrencyType());
            return __return;
        }
    }
    // static field: System.String IsFixedLength
    /**
    Used by the GetSchema method to create the IsFixedLength column in the DataTypes collection.

    */
    public static var IsFixedLength : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsFixedLength());
            return __return;
        }
    }
    // static field: System.String IsFixedPrecisionScale
    /**
    Used by the GetSchema method to create the IsFixedPrecisionScale column in the DataTypes collection.

    */
    public static var IsFixedPrecisionScale : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsFixedPrecisionScale());
            return __return;
        }
    }
    // static field: System.String IsLiteralSupported
    /**
    Used by the GetSchema method to create the IsLiteralSupported column in the DataTypes collection.

    */
    public static var IsLiteralSupported : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsLiteralSupported());
            return __return;
        }
    }
    // static field: System.String IsLong
    /**
    Used by the GetSchema method to create the IsLong column in the DataTypes collection.

    */
    public static var IsLong : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsLong());
            return __return;
        }
    }
    // static field: System.String IsNullable
    /**
    Used by the GetSchema method to create the IsNullable column in the DataTypes collection.

    */
    public static var IsNullable : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsNullable());
            return __return;
        }
    }
    // static field: System.String IsSearchable
    /**
    Used by the GetSchema method to create the IsSearchable column in the DataTypes collection.

    */
    public static var IsSearchable : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsSearchable());
            return __return;
        }
    }
    // static field: System.String IsSearchableWithLike
    /**
    Used by the GetSchema method to create the IsSearchableWithLike column in the DataTypes collection.

    */
    public static var IsSearchableWithLike : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsSearchableWithLike());
            return __return;
        }
    }
    // static field: System.String IsUnsigned
    /**
    Used by the GetSchema method to create the IsUnsigned column in the DataTypes collection.

    */
    public static var IsUnsigned : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_IsUnsigned());
            return __return;
        }
    }
    // static field: System.String LiteralPrefix
    /**
    Used by the GetSchema method to create the LiteralPrefix column in the DataTypes collection.

    */
    public static var LiteralPrefix : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_LiteralPrefix());
            return __return;
        }
    }
    // static field: System.String LiteralSuffix
    /**
    Used by the GetSchema method to create the LiteralSuffix column in the DataTypes collection.

    */
    public static var LiteralSuffix : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_LiteralSuffix());
            return __return;
        }
    }
    // static field: System.String MaximumScale
    /**
    Used by the GetSchema method to create the MaximumScale column in the DataTypes collection.

    */
    public static var MaximumScale : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_MaximumScale());
            return __return;
        }
    }
    // static field: System.String MinimumScale
    /**
    Used by the GetSchema method to create the MinimumScale column in the DataTypes collection.

    */
    public static var MinimumScale : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_MinimumScale());
            return __return;
        }
    }
    // static field: System.String NumberOfIdentifierParts
    /**
    Used by the GetSchema method to create the NumberOfIdentifierParts column in the MetaDataCollections collection.

    */
    public static var NumberOfIdentifierParts : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_NumberOfIdentifierParts());
            return __return;
        }
    }
    // static field: System.String NumberOfRestrictions
    /**
    Used by the GetSchema method to create the NumberOfRestrictions column in the MetaDataCollections collection.

    */
    public static var NumberOfRestrictions : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_NumberOfRestrictions());
            return __return;
        }
    }
    // static field: System.String OrderByColumnsInSelect
    /**
    Used by the GetSchema method to create the OrderByColumnsInSelect column in the DataSourceInformation collection.

    */
    public static var OrderByColumnsInSelect : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_OrderByColumnsInSelect());
            return __return;
        }
    }
    // static field: System.String ParameterMarkerFormat
    /**
    Used by the GetSchema method to create the ParameterMarkerFormat column in the DataSourceInformation collection.

    */
    public static var ParameterMarkerFormat : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ParameterMarkerFormat());
            return __return;
        }
    }
    // static field: System.String ParameterMarkerPattern
    /**
    Used by the GetSchema method to create the ParameterMarkerPattern column in the DataSourceInformation collection.

    */
    public static var ParameterMarkerPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ParameterMarkerPattern());
            return __return;
        }
    }
    // static field: System.String ParameterNameMaxLength
    /**
    Used by the GetSchema method to create the ParameterNameMaxLength column in the DataSourceInformation collection.

    */
    public static var ParameterNameMaxLength : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ParameterNameMaxLength());
            return __return;
        }
    }
    // static field: System.String ParameterNamePattern
    /**
    Used by the GetSchema method to create the ParameterNamePattern column in the DataSourceInformation collection.

    */
    public static var ParameterNamePattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ParameterNamePattern());
            return __return;
        }
    }
    // static field: System.String ProviderDbType
    /**
    Used by the GetSchema method to create the ProviderDbType column in the DataTypes collection.

    */
    public static var ProviderDbType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ProviderDbType());
            return __return;
        }
    }
    // static field: System.String QuotedIdentifierCase
    /**
    Used by the GetSchema method to create the QuotedIdentifierCase column in the DataSourceInformation collection.

    */
    public static var QuotedIdentifierCase : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_QuotedIdentifierCase());
            return __return;
        }
    }
    // static field: System.String QuotedIdentifierPattern
    /**
    Used by the GetSchema method to create the QuotedIdentifierPattern column in the DataSourceInformation collection.

    */
    public static var QuotedIdentifierPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_QuotedIdentifierPattern());
            return __return;
        }
    }
    // static field: System.String ReservedWord
    /**
    Used by the GetSchema method to create the ReservedWord column in the ReservedWords collection.

    */
    public static var ReservedWord : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_ReservedWord());
            return __return;
        }
    }
    // static field: System.String StatementSeparatorPattern
    /**
    Used by the GetSchema method to create the StatementSeparatorPattern column in the DataSourceInformation collection.

    */
    public static var StatementSeparatorPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_StatementSeparatorPattern());
            return __return;
        }
    }
    // static field: System.String StringLiteralPattern
    /**
    Used by the GetSchema method to create the StringLiteralPattern column in the DataSourceInformation collection.

    */
    public static var StringLiteralPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_StringLiteralPattern());
            return __return;
        }
    }
    // static field: System.String SupportedJoinOperators
    /**
    Used by the GetSchema method to create the SupportedJoinOperators column in the DataSourceInformation collection.

    */
    public static var SupportedJoinOperators : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_SupportedJoinOperators());
            return __return;
        }
    }
    // static field: System.String TypeName
    /**
    Used by the GetSchema method to create the TypeName column in the DataTypes collection.

    */
    public static var TypeName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_DbMetaDataColumnNames_get_TypeName());
            return __return;
        }
    }
} // DbMetaDataColumnNames


// type: System.Data.Common.DbParameter
    /**
    Represents a parameter to a  and optionally, its mapping to a  column. For more information on parameters, see Configuring Parameters and Parameter Data Types.

    */
open class DbParameter
    :
    dotnet.System.MarshalByRefObject,
    System_Data_IDataParameter,
    System_Data_IDbDataParameter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbParameter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void ResetDbType()
// docid: M:System.Data.Common.DbParameter.ResetDbType
    /**
    Resets the DbType property to its original settings.

    */
    open func ResetDbType() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__ResetDbType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DbType get_DbType()
// docid: M:System.Data.Common.DbParameter.get_DbType
    open func get_DbType() throws -> dotnet.System.Data.DbType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_DbType__get_DbType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DbType(val: __return);
        }
    }
    // [IsSpecialName] void set_DbType(System.Data.DbType)
// docid: M:System.Data.Common.DbParameter.set_DbType(System.Data.DbType)
    open func set_DbType(value : dotnet.System.Data.DbType) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_DbType_0__1__DbType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.ParameterDirection get_Direction()
// docid: M:System.Data.Common.DbParameter.get_Direction
    open func get_Direction() throws -> dotnet.System.Data.ParameterDirection {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_ParameterDirection__get_Direction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.ParameterDirection(val: __return);
        }
    }
    // [IsSpecialName] void set_Direction(System.Data.ParameterDirection)
// docid: M:System.Data.Common.DbParameter.set_Direction(System.Data.ParameterDirection)
    open func set_Direction(value : dotnet.System.Data.ParameterDirection) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_Direction_0__1__ParameterDirection(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Data.Common.DbParameter.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNullable(bool)
// docid: M:System.Data.Common.DbParameter.set_IsNullable(System.Boolean)
    open func set_IsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_IsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ParameterName()
// docid: M:System.Data.Common.DbParameter.get_ParameterName
    open func get_ParameterName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_String__get_ParameterName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterName(System.String)
// docid: M:System.Data.Common.DbParameter.set_ParameterName(System.String)
    open func set_ParameterName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_ParameterName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte get_Precision()
// docid: M:System.Data.Common.DbParameter.get_Precision
    open func get_Precision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_u8__get_Precision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Precision(System.Byte)
// docid: M:System.Data.Common.DbParameter.set_Precision(System.Byte)
    open func set_Precision(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_Precision_0__1__u8(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte get_Scale()
// docid: M:System.Data.Common.DbParameter.get_Scale
    open func get_Scale() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_u8__get_Scale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Scale(System.Byte)
// docid: M:System.Data.Common.DbParameter.set_Scale(System.Byte)
    open func set_Scale(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_Scale_0__1__u8(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Size()
// docid: M:System.Data.Common.DbParameter.get_Size
    open func get_Size() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_i32__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Size(System.Int32)
// docid: M:System.Data.Common.DbParameter.set_Size(System.Int32)
    open func set_Size(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_Size_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceColumn()
// docid: M:System.Data.Common.DbParameter.get_SourceColumn
    open func get_SourceColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_String__get_SourceColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SourceColumn(System.String)
// docid: M:System.Data.Common.DbParameter.set_SourceColumn(System.String)
    open func set_SourceColumn(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_SourceColumn_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SourceColumnNullMapping()
// docid: M:System.Data.Common.DbParameter.get_SourceColumnNullMapping
    open func get_SourceColumnNullMapping() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_bool__get_SourceColumnNullMapping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SourceColumnNullMapping(bool)
// docid: M:System.Data.Common.DbParameter.set_SourceColumnNullMapping(System.Boolean)
    open func set_SourceColumnNullMapping(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_SourceColumnNullMapping_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRowVersion get_SourceVersion()
// docid: M:System.Data.Common.DbParameter.get_SourceVersion
    open func get_SourceVersion() throws -> dotnet.System.Data.DataRowVersion {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_DataRowVersion__get_SourceVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRowVersion(val: __return);
        }
    }
    // [IsSpecialName] void set_SourceVersion(System.Data.DataRowVersion)
// docid: M:System.Data.Common.DbParameter.set_SourceVersion(System.Data.DataRowVersion)
    open func set_SourceVersion(value : dotnet.System.Data.DataRowVersion) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_SourceVersion_0__1__DataRowVersion(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Data.Common.DbParameter.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameter_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:System.Data.Common.DbParameter.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameter_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  of the parameter.

    */
    open var DbType : dotnet.System.Data.DbType {
        get {
            return try! get_DbType();
        }
        set(v) {
            return try! set_DbType(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.

    */
    open var Direction : dotnet.System.Data.ParameterDirection {
        get {
            return try! get_Direction();
        }
        set(v) {
            return try! set_Direction(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the parameter accepts null values.

    */
    open var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
        set(v) {
            return try! set_IsNullable(value: v);
        }
    }
    /**
    Gets or sets the name of the .

    */
    open var ParameterName : dotnet.System.String {
        get {
            return try! get_ParameterName();
        }
        set(v) {
            return try! set_ParameterName(value: v);
        }
    }
    /**
    Gets or sets the maximum number of digits used to represent the  property.

    */
    open var Precision : Swift.UInt8 {
        get {
            return try! get_Precision();
        }
        set(v) {
            return try! set_Precision(value: v);
        }
    }
    /**
    Gets or sets the number of decimal places to which  is resolved.

    */
    open var Scale : Swift.UInt8 {
        get {
            return try! get_Scale();
        }
        set(v) {
            return try! set_Scale(value: v);
        }
    }
    /**
    Gets or sets the maximum size, in bytes, of the data within the column.

    */
    open var Size : Swift.Int32 {
        get {
            return try! get_Size();
        }
        set(v) {
            return try! set_Size(value: v);
        }
    }
    /**
    Gets or sets the name of the source column mapped to the  and used for loading or returning the .

    */
    open var SourceColumn : dotnet.System.String {
        get {
            return try! get_SourceColumn();
        }
        set(v) {
            return try! set_SourceColumn(value: v);
        }
    }
    /**
    Gets or sets a value which indicates whether the source column is nullable. This allows  to correctly generate Update statements for nullable columns.

    */
    open var SourceColumnNullMapping : Bool {
        get {
            return try! get_SourceColumnNullMapping();
        }
        set(v) {
            return try! set_SourceColumnNullMapping(value: v);
        }
    }
    /**
    Gets or sets the  to use when you load .

    */
    open var SourceVersion : dotnet.System.Data.DataRowVersion {
        get {
            return try! get_SourceVersion();
        }
        set(v) {
            return try! set_SourceVersion(value: v);
        }
    }
    /**
    Gets or sets the value of the parameter.

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // DbParameter


// type: System.Data.Common.DbParameterCollection
    /**
    The base class for a collection of parameters relevant to a .

    */
open class DbParameterCollection
    :
    dotnet.System.MarshalByRefObject,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList,
    System_Data_IDataParameterCollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbParameterCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 Add(System.Object)
// docid: M:System.Data.Common.DbParameterCollection.Add(System.Object)
    /**
    Adds the specified  object to the .

    - Parameter value: The  of the  to add to the collection.
    - Returns: The index of the  object in the collection.

    */
    open func Add(value : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_i32__Add_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void AddRange(System.Array)
// docid: M:System.Data.Common.DbParameterCollection.AddRange(System.Array)
    /**
    Adds an array of items with the specified values to the .

    - Parameter values: An array of values of type  to add to the collection.
    */
    open func AddRange(values : dotnet.System.Array) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__AddRange_0__1__Array(&__thrown, self.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Data.Common.DbParameterCollection.Clear
    /**
    Removes all  values from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Data.Common.DbParameterCollection.Contains(System.Object)
    /**
    Indicates whether a  with the specified  is contained in the collection.

    - Parameter value: The  of the  to look for in the collection.
    - Returns: 
         if the  is in the collection; otherwise .

    */
    open func Contains(value : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_bool__Contains_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Data.Common.DbParameterCollection.Contains(System.String)
    /**
    Indicates whether a  with the specified name exists in the collection.

    - Parameter value: The name of the  to look for in the collection.
    - Returns: 
         if the  is in the collection; otherwise .

    */
    open func Contains(value : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies an array of items to the collection starting at the specified index.

    - Parameter array: The array of items to copy to the collection.
    - Parameter index: The index in the collection to copy the items.
    */
    open func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Data.Common.DbParameterCollection.GetEnumerator
    /**
    Exposes the  method, which supports a simple iteration over a collection by a .NET Framework data provider.

    - Returns: An  that can be used to iterate through the collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Object)
// docid: M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)
    /**
    Returns the index of the specified  object.

    - Parameter value: The  object in the collection.
    - Returns: The index of the specified  object.

    */
    open func IndexOf(value : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_i32__IndexOf_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Data.Common.DbParameterCollection.IndexOf(System.String)
    /**
    Returns the index of the  object with the specified name.

    - Parameter parameterName: The name of the  object in the collection.
    - Returns: The index of the  object with the specified name.

    */
    open func IndexOf(parameterName : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Object)
// docid: M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)
    /**
    Inserts the specified index of the  object with the specified name into the collection at the specified index.

    - Parameter index: The index at which to insert the  object.
    - Parameter value: The  object to insert into the collection.
    */
    open func Insert(index : Swift.Int32, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__Insert_0__2__i32_Object(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Object)
// docid: M:System.Data.Common.DbParameterCollection.Remove(System.Object)
    /**
    Removes the specified  object from the collection.

    - Parameter value: The  object to remove.
    */
    open func Remove(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__Remove_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)
    /**
    Removes the  object at the specified from the collection.

    - Parameter index: The index where the  object is located.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.String)
// docid: M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)
    /**
    Removes the  object with the specified name from the collection.

    - Parameter parameterName: The name of the  object to remove.
    */
    open func RemoveAt(parameterName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__RemoveAt_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Data.Common.DbParameterCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFixedSize()
// docid: M:System.Data.Common.DbParameterCollection.get_IsFixedSize
    open func get_IsFixedSize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_bool__get_IsFixedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Data.Common.DbParameterCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Data.Common.DbParameterCollection.get_IsSynchronized
    open func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Data.Common.DbParameterCollection.get_SyncRoot
    open func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.Common.DbParameter get_Item(System.Int32)
// docid: M:System.Data.Common.DbParameterCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Data.Common.DbParameter {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_DbParameter__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbParameter(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Data.Common.DbParameter)
// docid: M:System.Data.Common.DbParameterCollection.set_Item(System.Int32,System.Data.Common.DbParameter)
    open func set_Item(index : Swift.Int32, value : dotnet.System.Data.Common.DbParameter) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__set_Item_0__2__i32_DbParameter(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbParameter get_Item(System.String)
// docid: M:System.Data.Common.DbParameterCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(parameterName : dotnet.System.String) throws -> dotnet.System.Data.Common.DbParameter {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbParameterCollection_DbParameter__get_Item_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbParameter(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Data.Common.DbParameter)
// docid: M:System.Data.Common.DbParameterCollection.set_Item(System.String,System.Data.Common.DbParameter)
    open func set_Item(parameterName : dotnet.System.String, value : dotnet.System.Data.Common.DbParameter) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbParameterCollection_void__set_Item_0__2__String_DbParameter(&__thrown, self.get_handle(), parameterName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Specifies the number of items in the collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Specifies whether the collection is a fixed size.

    */
    open var IsFixedSize : Bool {
        get {
            return try! get_IsFixedSize();
        }
    }
    /**
    Specifies whether the collection is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Specifies whether the collection is synchronized.

    */
    open var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Specifies the  to be used to synchronize access to the collection.

    */
    open var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // DbParameterCollection


// type: System.Data.Common.DbProviderFactories
public struct DbProviderFactories {
    // System.Data.Common.DbProviderFactory GetFactory(System.Data.Common.DbConnection)
// docid: M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)
    /**
    Returns an instance of a .

    - Parameter connection: The connection used.
    - Returns: An instance of a  for a specified connection.

    */
    public static func GetFactory(connection : dotnet.System.Data.Common.DbConnection) throws -> Optional<dotnet.System.Data.Common.DbProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactories_DbProviderFactory__GetFactory_0__1__DbConnection(&__thrown, connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbProviderFactory(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbProviderFactory GetFactory(System.Data.DataRow)
// docid: M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)
    /**
    Returns an instance of a .

    - Parameter providerRow: 
         containing the provider's configuration information.
    - Returns: An instance of a  for a specified .

    */
    public static func GetFactory(providerRow : dotnet.System.Data.DataRow) throws -> dotnet.System.Data.Common.DbProviderFactory {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactories_DbProviderFactory__GetFactory_0__1__DataRow(&__thrown, providerRow.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbProviderFactory(hndl : __return);
        }
    }
    // System.Data.Common.DbProviderFactory GetFactory(System.String)
// docid: M:System.Data.Common.DbProviderFactories.GetFactory(System.String)
    /**
    Returns an instance of a .

    - Parameter providerInvariantName: Invariant name of a provider.
    - Returns: An instance of a  for a specified provider name.

    */
    public static func GetFactory(providerInvariantName : dotnet.System.String) throws -> dotnet.System.Data.Common.DbProviderFactory {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactories_DbProviderFactory__GetFactory_0__1__String(&__thrown, providerInvariantName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbProviderFactory(hndl : __return);
        }
    }
    // System.Data.DataTable GetFactoryClasses()
// docid: M:System.Data.Common.DbProviderFactories.GetFactoryClasses
    /**
    Returns a  that contains information about all installed providers that implement .

    - Returns: A  containing  objects that contain the following data:  
  
  Column ordinal Column name Description 0 Name Human-readable name for the data provider. 1 Description Human-readable description of the data provider. 2 InvariantName Name that can be used programmatically to refer to the data provider. 3 AssemblyQualifiedName Fully qualified name of the factory class, which contains enough information to instantiate the object.

    */
    public static func GetFactoryClasses() throws -> dotnet.System.Data.DataTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactories_DataTable__GetFactoryClasses_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataTable(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetProviderInvariantNames()
// docid: M:System.Data.Common.DbProviderFactories.GetProviderInvariantNames
    /**
    Returns the invariant provider names for all registered instances of .

    - Returns: The invariant provider names for all registered instances of .

    */
    public static func GetProviderInvariantNames() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactories_System_Collections_Generic_IEnumerable_string___GetProviderInvariantNames_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // void RegisterFactory(System.String, System.Data.Common.DbProviderFactory)
// docid: M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Data.Common.DbProviderFactory)
    /**
    Registers an instance of  under the specified invariant provider name.

    - Parameter providerInvariantName: The invariant provider name under which to register the provider.
    - Parameter factory: The instance of the provider factory to be registered.
    */
    public static func RegisterFactory(providerInvariantName : dotnet.System.String, factory : dotnet.System.Data.Common.DbProviderFactory) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbProviderFactories_void__RegisterFactory_0__2__String_DbProviderFactory(&__thrown, providerInvariantName.get_handle(), factory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterFactory(System.String, System.String)
// docid: M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.String)
    /**
    Registers a  with the given assembly-qualified name under the specified invariant provider name.

    - Parameter providerInvariantName: The invariant provider name under which to register the provider.
    - Parameter factoryTypeAssemblyQualifiedName: The assembly-qualified name for a .
    */
    public static func RegisterFactory(providerInvariantName : dotnet.System.String, factoryTypeAssemblyQualifiedName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbProviderFactories_void__RegisterFactory_0__2__String_String(&__thrown, providerInvariantName.get_handle(), factoryTypeAssemblyQualifiedName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterFactory(System.String, System.Type)
// docid: M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Type)
    /**
    Registers a  with the given type under the specified invariant provider name.

    - Parameter providerInvariantName: The invariant provider name under which to register the provider.
    - Parameter providerFactoryClass: The type representing a .
    */
    public static func RegisterFactory(providerInvariantName : dotnet.System.String, providerFactoryClass : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbProviderFactories_void__RegisterFactory_0__2__String_Type(&__thrown, providerInvariantName.get_handle(), providerFactoryClass.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetFactory(System.String, ref System.Data.Common.DbProviderFactory)
// docid: M:System.Data.Common.DbProviderFactories.TryGetFactory(System.String,System.Data.Common.DbProviderFactory@)
    /**
    Attempts to get the  registered under the specified invariant provider name.

    - Parameter providerInvariantName: The invariant provider name to look up.
    - Parameter factory: When this method returns, contains the  associated with the specified invariant provider name, if the name is found; otherwise, . This parameter is passed uninitialized.
    - Returns: 
         if a provider is registered under the specified invariant provider name; otherwise, .

    */
    public static func TryGetFactory(providerInvariantName : dotnet.System.String, factory : inout dotnet.System.Data.Common.DbProviderFactory) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_factory = factory.get_handle();
        let __return = System_Data_Common_DbProviderFactories_bool__TryGetFactory_0__2__String_outDbProviderFactory(&__thrown, providerInvariantName.get_handle(), &_tmp_out_factory);
        let _tmp2_factory = dotnet.System.Data.Common.DbProviderFactory(hndl: _tmp_out_factory);
            factory = _tmp2_factory;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool UnregisterFactory(System.String)
// docid: M:System.Data.Common.DbProviderFactories.UnregisterFactory(System.String)
    /**
    Removes a  registration for the given provider invariant name.

    - Parameter providerInvariantName: The invariant provider name of the registration to remove.
    - Returns: 
         if the registration is successfully found and removed; otherwise, . This method returns  if a registration for  is not found.

    */
    public static func UnregisterFactory(providerInvariantName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactories_bool__UnregisterFactory_0__1__String(&__thrown, providerInvariantName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DbProviderFactories


// type: System.Data.Common.DbProviderFactory
    /**
    Represents a set of methods for creating instances of a provider's implementation of the data source classes.

    */
open class DbProviderFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbProviderFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Data.Common.DbBatch CreateBatch()
// docid: M:System.Data.Common.DbProviderFactory.CreateBatch
    open func CreateBatch() throws -> dotnet.System.Data.Common.DbBatch {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbBatch__CreateBatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbBatch(hndl : __return);
        }
    }
    // System.Data.Common.DbBatchCommand CreateBatchCommand()
// docid: M:System.Data.Common.DbProviderFactory.CreateBatchCommand
    open func CreateBatchCommand() throws -> dotnet.System.Data.Common.DbBatchCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbBatchCommand__CreateBatchCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DbBatchCommand(hndl : __return);
        }
    }
    // System.Data.Common.DbCommand CreateCommand()
// docid: M:System.Data.Common.DbProviderFactory.CreateCommand
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateCommand() throws -> Optional<dotnet.System.Data.Common.DbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbCommand__CreateCommand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbCommandBuilder CreateCommandBuilder()
// docid: M:System.Data.Common.DbProviderFactory.CreateCommandBuilder
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateCommandBuilder() throws -> Optional<dotnet.System.Data.Common.DbCommandBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbCommandBuilder__CreateCommandBuilder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbCommandBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbConnection CreateConnection()
// docid: M:System.Data.Common.DbProviderFactory.CreateConnection
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateConnection() throws -> Optional<dotnet.System.Data.Common.DbConnection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbConnection__CreateConnection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbConnection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbConnectionStringBuilder CreateConnectionStringBuilder()
// docid: M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateConnectionStringBuilder() throws -> Optional<dotnet.System.Data.Common.DbConnectionStringBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbConnectionStringBuilder__CreateConnectionStringBuilder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbConnectionStringBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbDataAdapter CreateDataAdapter()
// docid: M:System.Data.Common.DbProviderFactory.CreateDataAdapter
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateDataAdapter() throws -> Optional<dotnet.System.Data.Common.DbDataAdapter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbDataAdapter__CreateDataAdapter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbDataAdapter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbDataSourceEnumerator CreateDataSourceEnumerator()
// docid: M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateDataSourceEnumerator() throws -> Optional<dotnet.System.Data.Common.DbDataSourceEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbDataSourceEnumerator__CreateDataSourceEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbDataSourceEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.Common.DbParameter CreateParameter()
// docid: M:System.Data.Common.DbProviderFactory.CreateParameter
    /**
    Returns a new instance of the provider's class that implements the  class.

    - Returns: A new instance of .

    */
    open func CreateParameter() throws -> Optional<dotnet.System.Data.Common.DbParameter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_DbParameter__CreateParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbParameter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_CanCreateBatch()
// docid: M:System.Data.Common.DbProviderFactory.get_CanCreateBatch
    open func get_CanCreateBatch() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_bool__get_CanCreateBatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanCreateCommandBuilder()
// docid: M:System.Data.Common.DbProviderFactory.get_CanCreateCommandBuilder
    open func get_CanCreateCommandBuilder() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_bool__get_CanCreateCommandBuilder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanCreateDataAdapter()
// docid: M:System.Data.Common.DbProviderFactory.get_CanCreateDataAdapter
    open func get_CanCreateDataAdapter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_bool__get_CanCreateDataAdapter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanCreateDataSourceEnumerator()
// docid: M:System.Data.Common.DbProviderFactory.get_CanCreateDataSourceEnumerator
    open func get_CanCreateDataSourceEnumerator() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderFactory_bool__get_CanCreateDataSourceEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    open var CanCreateBatch : Bool {
        get {
            return try! get_CanCreateBatch();
        }
    }
    /**
    Gets a value that indicates whether this  instance supports the  class.

    */
    open var CanCreateCommandBuilder : Bool {
        get {
            return try! get_CanCreateCommandBuilder();
        }
    }
    /**
    Gets a value that indicates whether this  instance supports the  class.

    */
    open var CanCreateDataAdapter : Bool {
        get {
            return try! get_CanCreateDataAdapter();
        }
    }
    /**
    Gets a value that indicates whether this  instance supports the  class.

    */
    open var CanCreateDataSourceEnumerator : Bool {
        get {
            return try! get_CanCreateDataSourceEnumerator();
        }
    }
} // DbProviderFactory


// type: System.Data.Common.DbProviderSpecificTypePropertyAttribute
    /**
    Identifies which provider-specific property in the strongly typed parameter classes is to be used when setting a provider-specific type.

    */
public final class DbProviderSpecificTypePropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbProviderSpecificTypePropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of a  class.

    - Parameter isProviderSpecificTypeProperty: Specifies whether this property is a provider-specific property.
    */
    public init(isProviderSpecificTypeProperty : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_DbProviderSpecificTypePropertyAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(isProviderSpecificTypeProperty ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsProviderSpecificTypeProperty()
// docid: M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.get_IsProviderSpecificTypeProperty
    public func get_IsProviderSpecificTypeProperty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbProviderSpecificTypePropertyAttribute_bool__get_IsProviderSpecificTypeProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Indicates whether the attributed property is a provider-specific type.

    */
    public var IsProviderSpecificTypeProperty : Bool {
        get {
            return try! get_IsProviderSpecificTypeProperty();
        }
    }
} // DbProviderSpecificTypePropertyAttribute


// type: System.Data.Common.DbTransaction
    /**
    Defines the core behavior of database transactions and provides a base class for database-specific transactions.

    */
open class DbTransaction
    :
    dotnet.System.MarshalByRefObject,
    System_Data_IDbTransaction,
    System_IDisposable,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_DbTransaction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Commit()
// docid: M:System.Data.Common.DbTransaction.Commit
    /**
    When overridden in a derived class, commits the database transaction.

    */
    open func Commit() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbTransaction_void__Commit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CommitAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)
    /**
    Asynchronously commits the database transaction.

    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A  representing the asynchronous operation.

    */
    open func CommitAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_Task__CommitAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Data.Common.DbTransaction.Dispose
    /**
    Releases the unmanaged resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbTransaction_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Data.Common.DbTransaction.DisposeAsync
    /**
    Asynchronously diposes the transaction object.

    - Returns: A  representing the asynchronous operation.

    */
    open func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // void Rollback()
// docid: M:System.Data.Common.DbTransaction.Rollback
    /**
    When overridden in a derived class, rolls back a transaction from a pending state.

    */
    open func Rollback() throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbTransaction_void__Rollback_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task RollbackAsync(System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)
    /**
    Asynchronously rolls back a transaction from a pending state.

    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A task representing the asynchronous operation.

    */
    open func RollbackAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_Task__RollbackAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbTransaction.SaveAsync(System.String,System.Threading.CancellationToken)
    /**
    Creates a savepoint in the transaction. This allows all commands that are executed after the savepoint was established to be rolled back, restoring the transaction state to what it was at the time of the savepoint.

    - Parameter savepointName: The name of the savepoint to be created.
    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A  representing the asynchronous operation.

    */
    open func SaveAsync(savepointName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_Task__SaveAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), savepointName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RollbackAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbTransaction.RollbackAsync(System.String,System.Threading.CancellationToken)
    /**
    Rolls back all commands that were executed after the specified savepoint was established.

    - Parameter savepointName: The name of the savepoint to roll back to.
    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A  representing the asynchronous operation.

    */
    open func RollbackAsync(savepointName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_Task__RollbackAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), savepointName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ReleaseAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Data.Common.DbTransaction.ReleaseAsync(System.String,System.Threading.CancellationToken)
    /**
    Destroys a savepoint previously defined in the current transaction. This allows the system to reclaim some resources before the transaction ends.

    - Parameter savepointName: The name of the savepoint to release.
    - Parameter cancellationToken: An optional token to cancel the asynchronous operation. The default value is .
    - Returns: A  representing the asynchronous operation.

    */
    open func ReleaseAsync(savepointName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_Task__ReleaseAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), savepointName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Save(System.String)
// docid: M:System.Data.Common.DbTransaction.Save(System.String)
    /**
    Creates a savepoint in the transaction. This allows all commands that are executed after the savepoint was established to be rolled back, restoring the transaction state to what it was at the time of the savepoint.

    - Parameter savepointName: The name of the savepoint to be created.
    */
    open func Save(savepointName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbTransaction_void__Save_0__1__String(&__thrown, self.get_handle(), savepointName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Rollback(System.String)
// docid: M:System.Data.Common.DbTransaction.Rollback(System.String)
    /**
    Rolls back all commands that were executed after the specified savepoint was established.

    - Parameter savepointName: The name of the savepoint to roll back to.
    */
    open func Rollback(savepointName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbTransaction_void__Rollback_0__1__String(&__thrown, self.get_handle(), savepointName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Release(System.String)
// docid: M:System.Data.Common.DbTransaction.Release(System.String)
    /**
    Destroys a savepoint previously defined in the current transaction. This allows the system to reclaim some resources before the transaction ends.

    - Parameter savepointName: The name of the savepoint to release.
    */
    open func Release(savepointName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_DbTransaction_void__Release_0__1__String(&__thrown, self.get_handle(), savepointName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DbConnection get_Connection()
// docid: M:System.Data.Common.DbTransaction.get_Connection
    open func get_Connection() throws -> Optional<dotnet.System.Data.Common.DbConnection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_DbConnection__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.Common.DbConnection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.IsolationLevel get_IsolationLevel()
// docid: M:System.Data.Common.DbTransaction.get_IsolationLevel
    open func get_IsolationLevel() throws -> dotnet.System.Data.IsolationLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_IsolationLevel__get_IsolationLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.IsolationLevel(val: __return);
        }
    }
    // [IsSpecialName] bool get_SupportsSavepoints()
// docid: M:System.Data.Common.DbTransaction.get_SupportsSavepoints
    open func get_SupportsSavepoints() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_DbTransaction_bool__get_SupportsSavepoints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Specifies the  object associated with the transaction.

    */
    open var Connection : Optional<dotnet.System.Data.Common.DbConnection> {
        get {
            return try! get_Connection();
        }
    }
    /**
    When overridden in a derived class, gets the isolation level for this transaction.

    */
    open var IsolationLevel : dotnet.System.Data.IsolationLevel {
        get {
            return try! get_IsolationLevel();
        }
    }
    /**
    Gets a value that indicates whether this  instance supports database savepoints.
            If , the methods ,  and  as well as their synchronous counterparts are expected to throw .

    */
    open var SupportsSavepoints : Bool {
        get {
            return try! get_SupportsSavepoints();
        }
    }
} // DbTransaction


// type: System.Data.Common.GroupByBehavior
    /**
    Specifies the relationship between the columns in a GROUP BY clause and the non-aggregated columns in the select-list of a SELECT statement.

    */
public struct GroupByBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_Common_GroupByBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.Common.GroupByBehavior Unknown
    /**
    The support for the GROUP BY clause is unknown.

    */
    public static var Unknown : dotnet.System.Data.Common.GroupByBehavior {
        get {
        let __return = dotnet.System.Data.Common.GroupByBehavior(val: System_Data_Common_GroupByBehavior_get_Unknown());
            return __return;
        }
    }
    // static field: System.Data.Common.GroupByBehavior NotSupported
    /**
    The GROUP BY clause is not supported.

    */
    public static var NotSupported : dotnet.System.Data.Common.GroupByBehavior {
        get {
        let __return = dotnet.System.Data.Common.GroupByBehavior(val: System_Data_Common_GroupByBehavior_get_NotSupported());
            return __return;
        }
    }
    // static field: System.Data.Common.GroupByBehavior Unrelated
    /**
    There is no relationship between the columns in the GROUP BY clause and the nonaggregated columns in the SELECT list. You may group by any column.

    */
    public static var Unrelated : dotnet.System.Data.Common.GroupByBehavior {
        get {
        let __return = dotnet.System.Data.Common.GroupByBehavior(val: System_Data_Common_GroupByBehavior_get_Unrelated());
            return __return;
        }
    }
    // static field: System.Data.Common.GroupByBehavior MustContainAll
    /**
    The GROUP BY clause must contain all nonaggregated columns in the select list, and can contain other columns not in the select list.

    */
    public static var MustContainAll : dotnet.System.Data.Common.GroupByBehavior {
        get {
        let __return = dotnet.System.Data.Common.GroupByBehavior(val: System_Data_Common_GroupByBehavior_get_MustContainAll());
            return __return;
        }
    }
    // static field: System.Data.Common.GroupByBehavior ExactMatch
    /**
    The GROUP BY clause must contain all nonaggregated columns in the select list, and must not contain other columns not in the select list.

    */
    public static var ExactMatch : dotnet.System.Data.Common.GroupByBehavior {
        get {
        let __return = dotnet.System.Data.Common.GroupByBehavior(val: System_Data_Common_GroupByBehavior_get_ExactMatch());
            return __return;
        }
    }
} // GroupByBehavior


// type: System.Data.Common.IDbColumnSchemaGenerator
    /**
    Generates a column schema.

    */
open class IDbColumnSchemaGenerator
    :
    SGBridgeGenericValue,
    System_Data_Common_IDbColumnSchemaGenerator
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_Common_IDbColumnSchemaGenerator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn> GetColumnSchema()
// docid: M:System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema
    /**
    Gets the column schema ( collection).

    - Returns: The column schema ( collection).

    */
    open func GetColumnSchema() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Data.Common.DbColumn> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_IDbColumnSchemaGenerator_System_Collections_ObjectModel_ReadOnlyCollection_System_Data_Common_DbColumn___GetColumnSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
} // IDbColumnSchemaGenerator


// type: System.Data.Common.IdentifierCase
    /**
    Specifies how identifiers are treated by the data source when searching the system catalog.

    */
public struct IdentifierCase : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_Common_IdentifierCase_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.Common.IdentifierCase Unknown
    /**
    The data source has ambiguous rules regarding identifier case and cannot discern this information.

    */
    public static var Unknown : dotnet.System.Data.Common.IdentifierCase {
        get {
        let __return = dotnet.System.Data.Common.IdentifierCase(val: System_Data_Common_IdentifierCase_get_Unknown());
            return __return;
        }
    }
    // static field: System.Data.Common.IdentifierCase Insensitive
    /**
    The data source ignores identifier case when searching the system catalog. The identifiers "ab" and "AB" will match.

    */
    public static var Insensitive : dotnet.System.Data.Common.IdentifierCase {
        get {
        let __return = dotnet.System.Data.Common.IdentifierCase(val: System_Data_Common_IdentifierCase_get_Insensitive());
            return __return;
        }
    }
    // static field: System.Data.Common.IdentifierCase Sensitive
    /**
    The data source distinguishes identifier case when searching the system catalog. The identifiers "ab" and "AB" will not match.

    */
    public static var Sensitive : dotnet.System.Data.Common.IdentifierCase {
        get {
        let __return = dotnet.System.Data.Common.IdentifierCase(val: System_Data_Common_IdentifierCase_get_Sensitive());
            return __return;
        }
    }
} // IdentifierCase


// type: System.Data.Common.RowUpdatedEventArgs
    /**
    Provides data for the  event of a .NET Framework data provider.

    */
open class RowUpdatedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_RowUpdatedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataRow, System.Data.IDbCommand, System.Data.StatementType, System.Data.Common.DataTableMapping)
// docid: M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
    /**
    Initializes a new instance of the  class.

    - Parameter dataRow: The  sent through an .
    - Parameter command: The  executed when  is called.
    - Parameter statementType: The type of SQL statement executed.
    - Parameter tableMapping: The  sent through an .
    */
    public init(dataRow : dotnet.System.Data.DataRow, command : Optional<dotnet.System.Data.IDbCommand>, statementType : dotnet.System.Data.StatementType, tableMapping : dotnet.System.Data.Common.DataTableMapping) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_RowUpdatedEventArgs_ctor_0__4__DataRow_IDbCommand_StatementType_DataTableMapping(&__thrown, dataRow.get_handle(), command?.get_handle() ?? nil, statementType.get_value(), tableMapping.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyToRows(System.Data.DataRow[])
// docid: M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])
    /**
    Copies references to the modified rows into the provided array.

    - Parameter array: The array of  to copy into.
    */
    open func CopyToRows(array : dotnet.System_Arr<dotnet.System.Data.DataRow>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatedEventArgs_void__CopyToRows_0__1__DataRowArray(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyToRows(System.Data.DataRow[], System.Int32)
// docid: M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)
    /**
    Copies references to the modified rows into the provided array.

    - Parameter array: The array of  to copy into.
    - Parameter arrayIndex: The index in the array to start copying into.
    */
    open func CopyToRows(array : dotnet.System_Arr<dotnet.System.Data.DataRow>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatedEventArgs_void__CopyToRows_0__2__DataRowArray_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.IDbCommand get_Command()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_Command
    open func get_Command() throws -> Optional<dotnet.System.Data.IDbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_IDbCommand__get_Command_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Exception get_Errors()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_Errors
    open func get_Errors() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_Exception__get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Errors(System.Exception)
// docid: M:System.Data.Common.RowUpdatedEventArgs.set_Errors(System.Exception)
    open func set_Errors(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatedEventArgs_void__set_Errors_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_RecordsAffected()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_RecordsAffected
    open func get_RecordsAffected() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_i32__get_RecordsAffected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_Row
    open func get_Row() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_RowCount()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_RowCount
    open func get_RowCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_i32__get_RowCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.StatementType get_StatementType()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_StatementType
    open func get_StatementType() throws -> dotnet.System.Data.StatementType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_StatementType__get_StatementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.StatementType(val: __return);
        }
    }
    // [IsSpecialName] System.Data.UpdateStatus get_Status()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_Status
    open func get_Status() throws -> dotnet.System.Data.UpdateStatus {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_UpdateStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.UpdateStatus(val: __return);
        }
    }
    // [IsSpecialName] void set_Status(System.Data.UpdateStatus)
// docid: M:System.Data.Common.RowUpdatedEventArgs.set_Status(System.Data.UpdateStatus)
    open func set_Status(value : dotnet.System.Data.UpdateStatus) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatedEventArgs_void__set_Status_0__1__UpdateStatus(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataTableMapping get_TableMapping()
// docid: M:System.Data.Common.RowUpdatedEventArgs.get_TableMapping
    open func get_TableMapping() throws -> dotnet.System.Data.Common.DataTableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatedEventArgs_DataTableMapping__get_TableMapping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMapping(hndl : __return);
        }
    }
    /**
    Gets the  executed when  is called.

    */
    open var Command : Optional<dotnet.System.Data.IDbCommand> {
        get {
            return try! get_Command();
        }
    }
    /**
    Gets any errors generated by the .NET Framework data provider when the  was executed.

    */
    open var Errors : Optional<dotnet.System.Exception> {
        get {
            return try! get_Errors();
        }
        set(v) {
            return try! set_Errors(value: v!);
        }
    }
    /**
    Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.

    */
    open var RecordsAffected : Swift.Int32 {
        get {
            return try! get_RecordsAffected();
        }
    }
    /**
    Gets the  sent through an .

    */
    open var Row : dotnet.System.Data.DataRow {
        get {
            return try! get_Row();
        }
    }
    /**
    Gets the number of rows processed in a batch of updated records.

    */
    open var RowCount : Swift.Int32 {
        get {
            return try! get_RowCount();
        }
    }
    /**
    Gets the type of SQL statement executed.

    */
    open var StatementType : dotnet.System.Data.StatementType {
        get {
            return try! get_StatementType();
        }
    }
    /**
    Gets the  of the  property.

    */
    open var Status : dotnet.System.Data.UpdateStatus {
        get {
            return try! get_Status();
        }
        set(v) {
            return try! set_Status(value: v);
        }
    }
    /**
    Gets the  sent through an .

    */
    open var TableMapping : dotnet.System.Data.Common.DataTableMapping {
        get {
            return try! get_TableMapping();
        }
    }
} // RowUpdatedEventArgs


// type: System.Data.Common.RowUpdatingEventArgs
    /**
    Provides the data for the RowUpdating event of a .NET Framework data provider.

    */
open class RowUpdatingEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_Common_RowUpdatingEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Data.DataRow, System.Data.IDbCommand, System.Data.StatementType, System.Data.Common.DataTableMapping)
// docid: M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
    /**
    Initializes a new instance of the  class.

    - Parameter dataRow: The  to .
    - Parameter command: The  to execute when  is called.
    - Parameter statementType: The type of SQL statement to execute.
    - Parameter tableMapping: The  to send through an .
    */
    public init(dataRow : dotnet.System.Data.DataRow, command : Optional<dotnet.System.Data.IDbCommand>, statementType : dotnet.System.Data.StatementType, tableMapping : dotnet.System.Data.Common.DataTableMapping) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_Common_RowUpdatingEventArgs_ctor_0__4__DataRow_IDbCommand_StatementType_DataTableMapping(&__thrown, dataRow.get_handle(), command?.get_handle() ?? nil, statementType.get_value(), tableMapping.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Data.IDbCommand get_Command()
// docid: M:System.Data.Common.RowUpdatingEventArgs.get_Command
    open func get_Command() throws -> Optional<dotnet.System.Data.IDbCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatingEventArgs_IDbCommand__get_Command_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.IDbCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Command(System.Data.IDbCommand)
// docid: M:System.Data.Common.RowUpdatingEventArgs.set_Command(System.Data.IDbCommand)
    open func set_Command(value : Optional<dotnet.System.Data.IDbCommand>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatingEventArgs_void__set_Command_0__1__IDbCommand(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Exception get_Errors()
// docid: M:System.Data.Common.RowUpdatingEventArgs.get_Errors
    open func get_Errors() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatingEventArgs_Exception__get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Errors(System.Exception)
// docid: M:System.Data.Common.RowUpdatingEventArgs.set_Errors(System.Exception)
    open func set_Errors(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatingEventArgs_void__set_Errors_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataRow get_Row()
// docid: M:System.Data.Common.RowUpdatingEventArgs.get_Row
    open func get_Row() throws -> dotnet.System.Data.DataRow {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatingEventArgs_DataRow__get_Row_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataRow(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.StatementType get_StatementType()
// docid: M:System.Data.Common.RowUpdatingEventArgs.get_StatementType
    open func get_StatementType() throws -> dotnet.System.Data.StatementType {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatingEventArgs_StatementType__get_StatementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.StatementType(val: __return);
        }
    }
    // [IsSpecialName] System.Data.UpdateStatus get_Status()
// docid: M:System.Data.Common.RowUpdatingEventArgs.get_Status
    open func get_Status() throws -> dotnet.System.Data.UpdateStatus {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatingEventArgs_UpdateStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.UpdateStatus(val: __return);
        }
    }
    // [IsSpecialName] void set_Status(System.Data.UpdateStatus)
// docid: M:System.Data.Common.RowUpdatingEventArgs.set_Status(System.Data.UpdateStatus)
    open func set_Status(value : dotnet.System.Data.UpdateStatus) throws {
        var __thrown : NullableHandle = nil;
        System_Data_Common_RowUpdatingEventArgs_void__set_Status_0__1__UpdateStatus(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.Common.DataTableMapping get_TableMapping()
// docid: M:System.Data.Common.RowUpdatingEventArgs.get_TableMapping
    open func get_TableMapping() throws -> dotnet.System.Data.Common.DataTableMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_Common_RowUpdatingEventArgs_DataTableMapping__get_TableMapping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.Common.DataTableMapping(hndl : __return);
        }
    }
    /**
    Gets the  to execute during the  operation.

    */
    open var Command : Optional<dotnet.System.Data.IDbCommand> {
        get {
            return try! get_Command();
        }
        set(v) {
            return try! set_Command(value: v!);
        }
    }
    /**
    Gets any errors generated by the .NET Framework data provider when the  executes.

    */
    open var Errors : Optional<dotnet.System.Exception> {
        get {
            return try! get_Errors();
        }
        set(v) {
            return try! set_Errors(value: v!);
        }
    }
    /**
    Gets the  that will be sent to the server as part of an insert, update, or delete operation.

    */
    open var Row : dotnet.System.Data.DataRow {
        get {
            return try! get_Row();
        }
    }
    /**
    Gets the type of SQL statement to execute.

    */
    open var StatementType : dotnet.System.Data.StatementType {
        get {
            return try! get_StatementType();
        }
    }
    /**
    Gets or sets the  of the  property.

    */
    open var Status : dotnet.System.Data.UpdateStatus {
        get {
            return try! get_Status();
        }
        set(v) {
            return try! set_Status(value: v);
        }
    }
    /**
    Gets the  to send through the .

    */
    open var TableMapping : dotnet.System.Data.Common.DataTableMapping {
        get {
            return try! get_TableMapping();
        }
    }
} // RowUpdatingEventArgs


// type: System.Data.Common.SchemaTableColumn
public struct SchemaTableColumn {
    // static field: System.String AllowDBNull
    /**
    Specifies whether value  is allowed.

    */
    public static var AllowDBNull : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_AllowDBNull());
            return __return;
        }
    }
    // static field: System.String BaseColumnName
    /**
    Specifies the name of the column in the schema table.

    */
    public static var BaseColumnName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_BaseColumnName());
            return __return;
        }
    }
    // static field: System.String BaseSchemaName
    /**
    Specifies the name of the schema in the schema table.

    */
    public static var BaseSchemaName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_BaseSchemaName());
            return __return;
        }
    }
    // static field: System.String BaseTableName
    /**
    Specifies the name of the table in the schema table.

    */
    public static var BaseTableName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_BaseTableName());
            return __return;
        }
    }
    // static field: System.String ColumnName
    /**
    Specifies the name of the column in the schema table.

    */
    public static var ColumnName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_ColumnName());
            return __return;
        }
    }
    // static field: System.String ColumnOrdinal
    /**
    Specifies the ordinal of the column.

    */
    public static var ColumnOrdinal : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_ColumnOrdinal());
            return __return;
        }
    }
    // static field: System.String ColumnSize
    /**
    Specifies the size of the column.

    */
    public static var ColumnSize : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_ColumnSize());
            return __return;
        }
    }
    // static field: System.String DataType
    /**
    Specifies the type of data in the column.

    */
    public static var DataType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_DataType());
            return __return;
        }
    }
    // static field: System.String IsAliased
    /**
    Specifies whether this column is aliased.

    */
    public static var IsAliased : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_IsAliased());
            return __return;
        }
    }
    // static field: System.String IsExpression
    /**
    Specifies whether this column is an expression.

    */
    public static var IsExpression : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_IsExpression());
            return __return;
        }
    }
    // static field: System.String IsKey
    /**
    Specifies whether this column is a key for the table.

    */
    public static var IsKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_IsKey());
            return __return;
        }
    }
    // static field: System.String IsLong
    /**
    Specifies whether this column contains long data.

    */
    public static var IsLong : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_IsLong());
            return __return;
        }
    }
    // static field: System.String IsUnique
    /**
    Specifies whether a unique constraint applies to this column.

    */
    public static var IsUnique : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_IsUnique());
            return __return;
        }
    }
    // static field: System.String NonVersionedProviderType
    /**
    Specifies the non-versioned provider-specific data type of the column.

    */
    public static var NonVersionedProviderType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_NonVersionedProviderType());
            return __return;
        }
    }
    // static field: System.String NumericPrecision
    /**
    Specifies the precision of the column data, if the data is numeric.

    */
    public static var NumericPrecision : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_NumericPrecision());
            return __return;
        }
    }
    // static field: System.String NumericScale
    /**
    Specifies the scale of the column data, if the data is numeric.

    */
    public static var NumericScale : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_NumericScale());
            return __return;
        }
    }
    // static field: System.String ProviderType
    /**
    Specifies the provider-specific data type of the column.

    */
    public static var ProviderType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableColumn_get_ProviderType());
            return __return;
        }
    }
} // SchemaTableColumn


// type: System.Data.Common.SchemaTableOptionalColumn
public struct SchemaTableOptionalColumn {
    // static field: System.String AutoIncrementSeed
    /**
    Specifies the value at which the series for new identity columns is assigned.

    */
    public static var AutoIncrementSeed : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_AutoIncrementSeed());
            return __return;
        }
    }
    // static field: System.String AutoIncrementStep
    /**
    Specifies the increment between values in the identity column.

    */
    public static var AutoIncrementStep : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_AutoIncrementStep());
            return __return;
        }
    }
    // static field: System.String BaseCatalogName
    /**
    The name of the catalog associated with the results of the latest query.

    */
    public static var BaseCatalogName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_BaseCatalogName());
            return __return;
        }
    }
    // static field: System.String BaseColumnNamespace
    /**
    The namespace of the column.

    */
    public static var BaseColumnNamespace : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_BaseColumnNamespace());
            return __return;
        }
    }
    // static field: System.String BaseServerName
    /**
    The server name of the column.

    */
    public static var BaseServerName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_BaseServerName());
            return __return;
        }
    }
    // static field: System.String BaseTableNamespace
    /**
    The namespace for the table that contains the column.

    */
    public static var BaseTableNamespace : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_BaseTableNamespace());
            return __return;
        }
    }
    // static field: System.String ColumnMapping
    /**
    Specifies the mapping for the column.

    */
    public static var ColumnMapping : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_ColumnMapping());
            return __return;
        }
    }
    // static field: System.String DefaultValue
    /**
    The default value for the column.

    */
    public static var DefaultValue : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_DefaultValue());
            return __return;
        }
    }
    // static field: System.String Expression
    /**
    The expression used to compute the column.

    */
    public static var Expression : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_Expression());
            return __return;
        }
    }
    // static field: System.String IsAutoIncrement
    /**
    Specifies whether the column values in the column are automatically incremented.

    */
    public static var IsAutoIncrement : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_IsAutoIncrement());
            return __return;
        }
    }
    // static field: System.String IsHidden
    /**
    Specifies whether this column is hidden.

    */
    public static var IsHidden : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_IsHidden());
            return __return;
        }
    }
    // static field: System.String IsReadOnly
    /**
    Specifies whether this column is read-only.

    */
    public static var IsReadOnly : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_IsReadOnly());
            return __return;
        }
    }
    // static field: System.String IsRowVersion
    /**
    Specifies whether this column contains row version information.

    */
    public static var IsRowVersion : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_IsRowVersion());
            return __return;
        }
    }
    // static field: System.String ProviderSpecificDataType
    /**
    Specifies the provider-specific data type of the column.

    */
    public static var ProviderSpecificDataType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Data_Common_SchemaTableOptionalColumn_get_ProviderSpecificDataType());
            return __return;
        }
    }
} // SchemaTableOptionalColumn


// type: System.Data.Common.SupportedJoinOperators
    /**
    Specifies what types of Transact-SQL join statements are supported by the data source.

    */
public struct SupportedJoinOperators : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_Common_SupportedJoinOperators_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.Common.SupportedJoinOperators None
    /**
    The data source does not support join queries.

    */
    public static var None : dotnet.System.Data.Common.SupportedJoinOperators {
        get {
        let __return = dotnet.System.Data.Common.SupportedJoinOperators(val: System_Data_Common_SupportedJoinOperators_get_None());
            return __return;
        }
    }
    // static field: System.Data.Common.SupportedJoinOperators Inner
    /**
    The data source supports inner joins.

    */
    public static var Inner : dotnet.System.Data.Common.SupportedJoinOperators {
        get {
        let __return = dotnet.System.Data.Common.SupportedJoinOperators(val: System_Data_Common_SupportedJoinOperators_get_Inner());
            return __return;
        }
    }
    // static field: System.Data.Common.SupportedJoinOperators LeftOuter
    /**
    The data source supports left outer joins.

    */
    public static var LeftOuter : dotnet.System.Data.Common.SupportedJoinOperators {
        get {
        let __return = dotnet.System.Data.Common.SupportedJoinOperators(val: System_Data_Common_SupportedJoinOperators_get_LeftOuter());
            return __return;
        }
    }
    // static field: System.Data.Common.SupportedJoinOperators RightOuter
    /**
    The data source supports right outer joins.

    */
    public static var RightOuter : dotnet.System.Data.Common.SupportedJoinOperators {
        get {
        let __return = dotnet.System.Data.Common.SupportedJoinOperators(val: System_Data_Common_SupportedJoinOperators_get_RightOuter());
            return __return;
        }
    }
    // static field: System.Data.Common.SupportedJoinOperators FullOuter
    /**
    The data source supports full outer joins.

    */
    public static var FullOuter : dotnet.System.Data.Common.SupportedJoinOperators {
        get {
        let __return = dotnet.System.Data.Common.SupportedJoinOperators(val: System_Data_Common_SupportedJoinOperators_get_FullOuter());
            return __return;
        }
    }
} // SupportedJoinOperators


}

// System.Data.SqlTypes
extension System.Data.SqlTypes {
// type: System.Data.SqlTypes.INullable
    /**
    All the  objects and structures implement the  interface.

    */
open class INullable
    :
    SGBridgeGenericValue,
    System_Data_SqlTypes_INullable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_INullable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.INullable.get_IsNull
    open func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_INullable_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // INullable


// type: System.Data.SqlTypes.SqlAlreadyFilledException
    /**
    The  class is not intended for use as a stand-alone component, but as a class from which other classes derive standard functionality.

    */
public final class SqlAlreadyFilledException
    :
    dotnet.System.Data.SqlTypes.SqlTypeException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlAlreadyFilledException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlAlreadyFilledException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The string to display when the exception is thrown.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlAlreadyFilledException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The string to display when the exception is thrown.
    - Parameter e: A reference to an inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, e : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlAlreadyFilledException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SqlAlreadyFilledException


// type: System.Data.SqlTypes.SqlBinary
// boxed value type
    /**
    Represents a variable-length stream of binary data to be stored in or retrieved from a database.

    */
public final class SqlBinary
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlBinary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlBinary Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlBinary {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlBinary(hndl: System_Data_SqlTypes_SqlBinary_get_Null());
            return __return;
        }
    }
    /**
    Indicates whether this  structure is null. This property is read-only.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the length in bytes of the  property. This property is read-only.

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets the value of the  structure. This property is read-only.

    */
    public var Value : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  structure, setting the  property to the contents of the supplied byte array.

    - Parameter value: The byte array to be stored or retrieved.
    */
    public init(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBinary_ctor_0__1__u8Array(&__thrown, (value?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlBinary_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlBinary Add(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Concatenates two specified  values to create a new  structure.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is the concatenated value of x and y.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBinary__Add_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)
    /**
    Compares this  object to the supplied  object and returns an indication of their relative values.

    - Parameter value: The  object to be compared to this  structure.
    - Returns: A signed number that indicates the relative values of this  structure and the object.  
  
  Return value Condition Less than zero The value of this  object is less than the object. Zero This  object is the same as object. Greater than zero This  object is greater than object, or the object is a null reference.

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlBinary) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_i32__CompareTo_0__1__SqlBinary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)
    /**
    Compares this  object to the supplied object and returns an indication of their relative values.

    - Parameter value: The object to be compared to this  structure.
    - Returns: A signed number that indicates the relative values of this  structure and the object.  
  
  Return value Condition Less than zero The value of this  object is less than the object. Zero This  object is the same as object. Greater than zero This  object is greater than object, or the object is a null reference.

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlBinary Concat(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Concatenates two  structures to create a new  structure.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The concatenated values of the  and  parameters.

    */
    public class func Concat(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBinary__Concat_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__Equals_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlBinary.GetHashCode
    /**
    Returns the hash code for this  structure.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A  that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__GreaterThan_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__GreaterThanOrEqual_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__LessThan_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__LessThanOrEqual_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__NotEquals_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBinary op_Addition(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Concatenates the two  parameters to create a new  structure.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: The concatenated values of the  and  parameters.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBinary__op_Addition_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether they are equal.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__op_Equality_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte[] op_Explicit(System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBinary) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_u8Array__op_Explicit_0__1__SqlBinary(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBinary op_Explicit(System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBinary__op_Explicit_0__1__SqlGuid(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is greater than the second.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__op_GreaterThan_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBinary op_Implicit(System.Byte[])
// docid: M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])
    public class func op_Implicit(x : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBinary__op_Implicit_0__1__u8Array(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether they are not equal.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__op_Inequality_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is less than the second.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__op_LessThan_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)
    /**
    Compares two  structures to determine whether the first is less than or equal to the second.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlBinary, y : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlBoolean__op_LessThanOrEqual_0__2__SqlBinary_SqlBinary(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlGuid ToSqlGuid()
// docid: M:System.Data.SqlTypes.SqlBinary.ToSqlGuid
    /**
    Converts this instance of  to .

    - Returns: A  structure.

    */
    public func ToSqlGuid() throws -> dotnet.System.Data.SqlTypes.SqlGuid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_SqlGuid__ToSqlGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlGuid(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlBinary.ToString
    /**
    Converts this  object to a string.

    - Returns: A string that contains the  of the . If the  is null the string will contain "null".

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlBinary.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.Data.SqlTypes.SqlBinary.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Byte[] get_Value()
// docid: M:System.Data.SqlTypes.SqlBinary.get_Value
    public func get_Value() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_u8Array__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_Item(System.Int32)
// docid: M:System.Data.SqlTypes.SqlBinary.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBinary_u8__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlBinary


// type: System.Data.SqlTypes.SqlBoolean
// boxed value type
    /**
    Represents an integer value that is either 1 or 0 to be stored in or retrieved from a database.

    */
public final class SqlBoolean
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlBoolean_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlBoolean False
    /**
    Represents a false value that can be assigned to the  property of an instance of the  structure.

    */
    public class var False : dotnet.System.Data.SqlTypes.SqlBoolean {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlBoolean(hndl: System_Data_SqlTypes_SqlBoolean_get_False());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlBoolean Null
    /**
    Represents  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlBoolean {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlBoolean(hndl: System_Data_SqlTypes_SqlBoolean_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlBoolean One
    /**
    Represents a one value that can be assigned to the  property of an instance of the  structure.

    */
    public class var One : dotnet.System.Data.SqlTypes.SqlBoolean {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlBoolean(hndl: System_Data_SqlTypes_SqlBoolean_get_One());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlBoolean True
    /**
    Represents a true value that can be assigned to the  property of an instance of the  structure.

    */
    public class var True : dotnet.System.Data.SqlTypes.SqlBoolean {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlBoolean(hndl: System_Data_SqlTypes_SqlBoolean_get_True());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlBoolean Zero
    /**
    Represents a zero value that can be assigned to the  property of an instance of the  structure.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlBoolean {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlBoolean(hndl: System_Data_SqlTypes_SqlBoolean_get_Zero());
            return __return;
        }
    }
    /**
    Gets the value of the  structure as a byte.

    */
    public var ByteValue : Swift.UInt8 {
        get {
            return try! get_ByteValue();
        }
    }
    /**
    Indicates whether the current  is .

    */
    public var IsFalse : Bool {
        get {
            return try! get_IsFalse();
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets a value that indicates whether the current  is .

    */
    public var IsTrue : Bool {
        get {
            return try! get_IsTrue();
        }
    }
    /**
    Gets the  structure's value. This property is read-only.

    */
    public var Value : Bool {
        get {
            return try! get_Value();
        }
    }
    // .ctor(bool)
// docid: M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  structure using the supplied Boolean value.

    - Parameter value: The value for the new  structure; either  or .
    */
    public init(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBoolean_ctor_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)
    /**
    Initializes a new instance of the  structure using the specified integer value.

    - Parameter value: The integer whose value is to be used for the new  structure.
    */
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBoolean_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlBoolean_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlBoolean And(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Computes the bitwise AND operation of two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The result of the logical AND operation.

    */
    public class func And(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__And_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)
    /**
    Compares this  object to the supplied  object and returns an indication of their relative values.

    - Parameter value: A  object to compare, or a null reference ( in Visual Basic).
    - Returns: A signed number that indicates the relative values of the instance and value.  
  
  Value Description A negative integer This instance is less than . Zero This instance is equal to . A positive integer This instance is greater than , or  is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_i32__CompareTo_0__1__SqlBoolean(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)
    /**
    Compares this  structure to a specified object and returns an indication of their relative values.

    - Parameter value: An object to compare, or a null reference ( in Visual Basic).
    - Returns: A signed number that indicates the relative values of the instance and value.  
  
  Value Description A negative integer This instance is less than . Zero This instance is equal to . A positive integer This instance is greater than , or  is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__Equals_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)
    /**
    Compares the supplied object parameter to the .

    - Parameter value: The object to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlBoolean.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is greater than the second instance; otherwise, .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__GreaterThan_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is greater than or equal to the second instance; otherwise, .

    */
    public class func GreaterThanOrEquals(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__GreaterThanOrEquals_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is less than the second instance; otherwise, .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__LessThan_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEquals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is less than or equal to the second instance; otherwise, .

    */
    public class func LessThanOrEquals(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__LessThanOrEquals_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  for equality.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__NotEquals_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean OnesComplement(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)
    /**
    Performs a one's complement operation on the supplied  structures.

    - Parameter x: A  structure.
    - Returns: The one's complement of the supplied .

    */
    public class func OnesComplement(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__OnesComplement_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Computes the bitwise AND operation of two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The result of the logical AND operation.

    */
    public class func op_BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_BitwiseAnd_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_BitwiseOr(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Computes the bitwise OR of its operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the logical OR operation.

    */
    public class func op_BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_BitwiseOr_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  for equality.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: 
         if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Equality_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Performs a bitwise exclusive-OR (XOR) operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The result of the logical XOR operation.

    */
    public class func op_ExclusiveOr(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_ExclusiveOr_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_False(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)
    /**
    The false operator can be used to test the  of the  to determine whether it is false.

    - Parameter x: The  structure to be tested.
    - Returns: 
         if the supplied parameter is  is ; otherwise, .

    */
    public class func op_False(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__op_False_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two  structures to determine whether the first is greater than the second.

    - Parameter x: A  object.
    - Parameter y: A  object.
    - Returns: 
         if the first instance is greater than the second instance; otherwise, .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_GreaterThan_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is greater than or equal to the second instance; otherwise, .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Implicit(bool)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)
    public class func op_Implicit(x : Bool) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Implicit_0__1__bool(&__thrown, Swift.Int32(x ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether they are not equal.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: 
         if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_Inequality_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is less than the second instance; otherwise, .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_LessThan_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the first instance is less than or equal to the second instance; otherwise, .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_LessThanOrEqual_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LogicalNot(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)
    /**
    Performs a NOT operation on a .

    - Parameter x: The  on which the NOT operation will be performed.
    - Returns: A  with the  if argument was true,  if argument was null, and  otherwise.

    */
    public class func op_LogicalNot(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_LogicalNot_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_OnesComplement(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)
    /**
    Performs a one's complement operation on the supplied  structures.

    - Parameter x: A  structure.
    - Returns: The one's complement of the supplied .

    */
    public class func op_OnesComplement(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__op_OnesComplement_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_True(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)
    /**
    The true operator can be used to test the  of the  to determine whether it is true.

    - Parameter x: The  structure to be tested.
    - Returns: 
         if the supplied parameter is  is ; otherwise, .

    */
    public class func op_True(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__op_True_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Data.SqlTypes.SqlBoolean Or(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Performs a bitwise OR operation on the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose Value is the result of the bitwise OR operation.

    */
    public class func Or(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__Or_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)
    /**
    Converts the specified  representation of a logical value to its  equivalent.

    - Parameter s: The  to be converted.
    - Returns: A  structure that contains the parsed value.

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals , the new  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals  then the new  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals  then the new  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals  then the new  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals , the new  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals , the new  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals , the new  value is 1. If the  structure's value equals , the new  value is 0. If  structure's value is neither 1 nor 0, the new  value is .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0.  
  
 If the  structure's value equals true, the new  structure's value is 1; otherwise the new  structure's value is 0.

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A new  structure whose value is 1 or 0. If the  structure's value equals  then  structure's value is 1. Otherwise, the new  structure's value is 0.

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlBoolean.ToString
    /**
    Converts this  structure to a string.

    - Returns: A string that contains the value of the . If the value is null, the string will contain "null".

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Xor(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The result of the logical XOR operation.

    */
    public class func Xor(x : dotnet.System.Data.SqlTypes.SqlBoolean, y : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_SqlBoolean__Xor_0__2__SqlBoolean_SqlBoolean(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_ByteValue()
// docid: M:System.Data.SqlTypes.SqlBoolean.get_ByteValue
    public func get_ByteValue() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_u8__get_ByteValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFalse()
// docid: M:System.Data.SqlTypes.SqlBoolean.get_IsFalse
    public func get_IsFalse() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__get_IsFalse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlBoolean.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsTrue()
// docid: M:System.Data.SqlTypes.SqlBoolean.get_IsTrue
    public func get_IsTrue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__get_IsTrue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Value()
// docid: M:System.Data.SqlTypes.SqlBoolean.get_Value
    public func get_Value() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBoolean_bool__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // SqlBoolean


// type: System.Data.SqlTypes.SqlByte
// boxed value type
    /**
    Represents an 8-bit unsigned integer, in the range of 0 through 255, to be stored in or retrieved from a database.

    */
public final class SqlByte
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlByte_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlByte MaxValue
    /**
    A constant representing the largest possible value of a .

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlByte {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlByte(hndl: System_Data_SqlTypes_SqlByte_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlByte MinValue
    /**
    A constant representing the smallest possible value of a .

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlByte {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlByte(hndl: System_Data_SqlTypes_SqlByte_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlByte Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlByte {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlByte(hndl: System_Data_SqlTypes_SqlByte_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlByte Zero
    /**
    Represents a zero value that can be assigned to the  property of an instance of the  structure.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlByte {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlByte(hndl: System_Data_SqlTypes_SqlByte_get_Zero());
            return __return;
        }
    }
    /**
    Gets a Boolean value that indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of the  structure. This property is read-only.

    */
    public var Value : Swift.UInt8 {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Byte)
// docid: M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)
    /**
    Initializes a new instance of the  structure using the specified byte value.

    - Parameter value: A byte value to be stored in the  property of the new  structure.
    */
    public init(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlByte_ctor_0__1__u8(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlByte_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlByte Add(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the sum of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the addition.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Add_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte BitwiseAnd(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the bitwise AND operation.

    */
    public class func BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__BitwiseAnd_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte BitwiseOr(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the bitwise OR of its two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the bitwise OR operation.

    */
    public class func BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__BitwiseOr_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)
    /**
    Compares this instance to the supplied  object and returns an indication of their relative values.

    - Parameter value: The  object to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlByte) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_i32__CompareTo_0__1__SqlByte(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)
    /**
    Compares this instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlByte Divide(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Divides its first  operand by its second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the results of the division.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Divide_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__Equals_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlByte.Equals(System.Object)
    /**
    Compares the supplied  parameter to the  property of the  object.

    - Parameter value: The  to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlByte.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__GreaterThan_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__GreaterThanOrEqual_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__LessThan_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__LessThanOrEqual_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte Mod(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the remainder after dividing its first  operand by its second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the remainder.

    */
    public class func Mod(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Mod_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte Modulus(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Divides two  values and returns the remainder.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: The remainder left after division is performed on  and .

    */
    public class func Modulus(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Modulus_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte Multiply(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the product of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the product of the multiplication.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Multiply_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__NotEquals_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte OnesComplement(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)
    /**
    The ones complement operator performs a bitwise one's complement operation on its  operand.

    - Parameter x: A  structure.
    - Returns: A  structure whose  property contains the ones complement of the  parameter.

    */
    public class func OnesComplement(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__OnesComplement_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Addition(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the sum of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  whose  property contains the sum of the two operands.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Addition_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_BitwiseAnd(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the bitwise AND operation.

    */
    public class func op_BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_BitwiseAnd_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_BitwiseOr(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the bitwise OR of its two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the bitwise OR operation.

    */
    public class func op_BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_BitwiseOr_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Division(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Divides its first  operand by its second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the results of the division.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Division_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__op_Equality_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_ExclusiveOr(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the bitwise XOR operation.

    */
    public class func op_ExclusiveOr(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_ExclusiveOr_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte op_Explicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_u8__op_Explicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__op_GreaterThan_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Implicit(System.Byte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)
    public class func op_Implicit(x : Swift.UInt8) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Implicit_0__1__u8(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__op_Inequality_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__op_LessThan_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__op_LessThanOrEqual_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Modulus(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the remainder after dividing its first  operand by its second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the remainder.

    */
    public class func op_Modulus(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Modulus_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Multiply(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Computes the product of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the product of the multiplication.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Multiply_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_OnesComplement(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)
    /**
    The ones complement operator performs a bitwise one's complement operation on its  operand.

    - Parameter x: A  structure.
    - Returns: A  structure whose  property contains the ones complement of the  parameter.

    */
    public class func op_OnesComplement(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_OnesComplement_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlByte op_Subtraction(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Subtracts the second  operand from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of subtracting the second  operand from the first.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__op_Subtraction_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlByte.Parse(System.String)
    /**
    Converts the  representation of a number to its 8-bit unsigned integer equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A  structure that contains the 8-bit number represented by the  parameter.

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte Subtract(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Subtracts the second  operand from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of subtracting the second  operand from the first.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Subtract_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure.

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlInt32
    /**
    Converts this  to .

    - Returns: A  structure with the same value as this .

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A  structure who  equals the  of this .

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure.

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A  structure that has the same  as this  structure.

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlByte.ToSqlString
    /**
    Converts this instance of  to .

    - Returns: A  that contains the string representation of the  structure's .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlByte.ToString
    /**
    Converts this  structure to a .

    - Returns: A string that contains the  of the . If the  is null, the  will be a null string.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte Xor(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the XOR operation.

    */
    public class func Xor(x : dotnet.System.Data.SqlTypes.SqlByte, y : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_SqlByte__Xor_0__2__SqlByte_SqlByte(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlByte.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Byte get_Value()
// docid: M:System.Data.SqlTypes.SqlByte.get_Value
    public func get_Value() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlByte_u8__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlByte


// type: System.Data.SqlTypes.SqlBytes
    /**
    Represents a mutable reference type that wraps either a  or a .

    */
public final class SqlBytes
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_Runtime_Serialization_ISerializable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlBytes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlBytes.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBytes_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  class based on the specified byte array.

    - Parameter buffer: The array of unsigned bytes.
    */
    public init(buffer : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBytes_ctor_0__1__u8Array(&__thrown, (buffer?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)
    /**
    Initializes a new instance of the  class based on the specified  value.

    - Parameter value: A  value.
    */
    public init(value : dotnet.System.Data.SqlTypes.SqlBinary) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBytes_ctor_0__1__SqlBinary(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream)
// docid: M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of the  class based on the specified  value.

    - Parameter s: A .
    */
    public init(s : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlBytes_ctor_0__1__Stream(&__thrown, s?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBytes op_Explicit(System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)
    public class func op_Explicit(value : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlBytes {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_SqlBytes__op_Explicit_0__1__SqlBinary(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBytes(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBinary op_Explicit(System.Data.SqlTypes.SqlBytes)
// docid: M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)
    public class func op_Explicit(value : dotnet.System.Data.SqlTypes.SqlBytes) throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_SqlBinary__op_Explicit_0__1__SqlBytes(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // System.Int64 Read(System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    Copies bytes from this  instance to the passed-in buffer and returns the number of copied bytes.

    - Parameter offset: An  long value offset into the value that is contained in the  instance.
    - Parameter buffer: The byte array buffer to copy into.
    - Parameter offsetInBuffer: An  integer offset into the buffer to start copying into.
    - Parameter count: An  integer representing the number of bytes to copy.
    - Returns: An  long value representing the number of copied bytes.

    */
    public func Read(offset : Swift.Int64, buffer : dotnet.System_Arr<Swift.UInt8>, offsetInBuffer : Swift.Int32, count : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_i64__Read_0__4__i64_u8Array_i32_i32(&__thrown, self.get_handle(), offset, buffer.get_handle(), offsetInBuffer, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void SetLength(System.Int64)
// docid: M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)
    /**
    Sets the length of this  instance.

    - Parameter value: The  long value representing the length.
    */
    public func SetLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlBytes_void__SetLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetNull()
// docid: M:System.Data.SqlTypes.SqlBytes.SetNull
    /**
    Sets this  instance to null.

    */
    public func SetNull() throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlBytes_void__SetNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.SqlTypes.SqlBinary ToSqlBinary()
// docid: M:System.Data.SqlTypes.SqlBytes.ToSqlBinary
    /**
    Constructs and returns a  from this  instance.

    - Returns: A  from this instance.

    */
    public func ToSqlBinary() throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_SqlBinary__ToSqlBinary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // void Write(System.Int64, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
    /**
    Copies bytes from the passed-in buffer to this  instance.

    - Parameter offset: An  long value offset into the value that is contained in the  instance.
    - Parameter buffer: The byte array buffer to copy into.
    - Parameter offsetInBuffer: An  integer offset into the buffer to start copying into.
    - Parameter count: An  integer representing the number of bytes to copy.
    */
    public func Write(offset : Swift.Int64, buffer : dotnet.System_Arr<Swift.UInt8>, offsetInBuffer : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlBytes_void__Write_0__4__i64_u8Array_i32_i32(&__thrown, self.get_handle(), offset, buffer.get_handle(), offsetInBuffer, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_Buffer()
// docid: M:System.Data.SqlTypes.SqlBytes.get_Buffer
    public func get_Buffer() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_u8Array__get_Buffer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlBytes.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:System.Data.SqlTypes.SqlBytes.get_Length
    public func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxLength()
// docid: M:System.Data.SqlTypes.SqlBytes.get_MaxLength
    public func get_MaxLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_i64__get_MaxLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBytes get_Null()
// docid: M:System.Data.SqlTypes.SqlBytes.get_Null
    public class func get_Null() throws -> dotnet.System.Data.SqlTypes.SqlBytes {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_SqlBytes__get_Null_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBytes(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.StorageState get_Storage()
// docid: M:System.Data.SqlTypes.SqlBytes.get_Storage
    public func get_Storage() throws -> dotnet.System.Data.SqlTypes.StorageState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_StorageState__get_Storage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.StorageState(val: __return);
        }
    }
    // [IsSpecialName] System.IO.Stream get_Stream()
// docid: M:System.Data.SqlTypes.SqlBytes.get_Stream
    public func get_Stream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_Stream__get_Stream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Stream(System.IO.Stream)
// docid: M:System.Data.SqlTypes.SqlBytes.set_Stream(System.IO.Stream)
    public func set_Stream(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlBytes_void__set_Stream_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_Value()
// docid: M:System.Data.SqlTypes.SqlBytes.get_Value
    public func get_Value() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_u8Array__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_Item(System.Int64)
// docid: M:System.Data.SqlTypes.SqlBytes.get_Item(System.Int64)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(offset : Swift.Int64) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlBytes_u8__get_Item_0__1__i64(&__thrown, self.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Item(System.Int64, System.Byte)
// docid: M:System.Data.SqlTypes.SqlBytes.set_Item(System.Int64,System.Byte)
    public func set_Item(offset : Swift.Int64, value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlBytes_void__set_Item_0__2__i64_u8(&__thrown, self.get_handle(), offset, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Returns a reference to the internal buffer.

    */
    public var Buffer : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_Buffer();
        }
    }
    /**
    Gets a Boolean value that indicates whether this  is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the length of the value that is contained in the  instance.

    */
    public var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets the maximum length of the value of the internal buffer of this .

    */
    public var MaxLength : Swift.Int64 {
        get {
            return try! get_MaxLength();
        }
    }
    /**
    Gets a null instance of this .

    */
    public static var Null : dotnet.System.Data.SqlTypes.SqlBytes {
        get {
            return try! get_Null();
        }
    }
    /**
    Returns information about the storage state of this  instance.

    */
    public var Storage : dotnet.System.Data.SqlTypes.StorageState {
        get {
            return try! get_Storage();
        }
    }
    /**
    Gets or sets the data of this  as a stream.

    */
    public var Stream : dotnet.System.IO.Stream {
        get {
            return try! get_Stream();
        }
        set(v) {
            return try! set_Stream(value: v);
        }
    }
    /**
    Returns a managed copy of the value held by this .

    */
    public var Value : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Value();
        }
    }
} // SqlBytes


// type: System.Data.SqlTypes.SqlChars
    /**
    
         is a mutable reference type that wraps a  array or a  instance.

    */
public final class SqlChars
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_Runtime_Serialization_ISerializable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlChars_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlChars.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlChars_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Char[])
// docid: M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])
    /**
    Initializes a new instance of the  class based on the specified character array.

    - Parameter buffer: A  array.
    */
    public init(buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlChars_ctor_0__1__CharArray(&__thrown, (buffer?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)
    /**
    Initializes a new instance of the  class based on the specified  value.

    - Parameter value: A .
    */
    public init(value : dotnet.System.Data.SqlTypes.SqlString) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlChars_ctor_0__1__SqlString(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlChars)
// docid: M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)
    public class func op_Explicit(value : dotnet.System.Data.SqlTypes.SqlChars) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_SqlString__op_Explicit_0__1__SqlChars(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlChars op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(value : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlChars {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_SqlChars__op_Explicit_0__1__SqlString(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlChars(hndl : __return);
        }
    }
    // System.Int64 Read(System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    Copies characters from this  instance to the passed-in buffer and returns the number of copied characters.

    - Parameter offset: An  value offset into the value that is contained in the  instance.
    - Parameter buffer: The character array buffer to copy into.
    - Parameter offsetInBuffer: An  integer offset into the buffer to start copying into.
    - Parameter count: An  integer value representing the number of characters to copy.
    - Returns: An  value representing the number of copied bytes.

    */
    public func Read(offset : Swift.Int64, buffer : dotnet.System_Arr<dotnet.System.Char>, offsetInBuffer : Swift.Int32, count : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_i64__Read_0__4__i64_CharArray_i32_i32(&__thrown, self.get_handle(), offset, buffer.get_handle(), offsetInBuffer, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void SetLength(System.Int64)
// docid: M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)
    /**
    Sets the length of this  instance.

    - Parameter value: The  value representing the length.
    */
    public func SetLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlChars_void__SetLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetNull()
// docid: M:System.Data.SqlTypes.SqlChars.SetNull
    /**
    Sets this  instance to null.

    */
    public func SetNull() throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlChars_void__SetNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlChars.ToSqlString
    /**
    Converts this  instance to its equivalent  representation.

    - Returns: A  representation of this type.

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // void Write(System.Int64, System.Char[], System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)
    /**
    Copies characters from the passed-in buffer to this  instance.

    - Parameter offset: A  value offset into the value that is contained in the  instance.
    - Parameter buffer: The character array buffer to copy into.
    - Parameter offsetInBuffer: An  integer offset into the buffer to start copying into.
    - Parameter count: An  integer representing the number of characters to copy.
    */
    public func Write(offset : Swift.Int64, buffer : dotnet.System_Arr<dotnet.System.Char>, offsetInBuffer : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlChars_void__Write_0__4__i64_CharArray_i32_i32(&__thrown, self.get_handle(), offset, buffer.get_handle(), offsetInBuffer, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Char[] get_Buffer()
// docid: M:System.Data.SqlTypes.SqlChars.get_Buffer
    public func get_Buffer() throws -> Optional<dotnet.System_Arr<dotnet.System.Char>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_CharArray__get_Buffer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Char>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlChars.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:System.Data.SqlTypes.SqlChars.get_Length
    public func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxLength()
// docid: M:System.Data.SqlTypes.SqlChars.get_MaxLength
    public func get_MaxLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_i64__get_MaxLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlChars get_Null()
// docid: M:System.Data.SqlTypes.SqlChars.get_Null
    public class func get_Null() throws -> dotnet.System.Data.SqlTypes.SqlChars {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_SqlChars__get_Null_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlChars(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.StorageState get_Storage()
// docid: M:System.Data.SqlTypes.SqlChars.get_Storage
    public func get_Storage() throws -> dotnet.System.Data.SqlTypes.StorageState {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_StorageState__get_Storage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.StorageState(val: __return);
        }
    }
    // [IsSpecialName] System.Char[] get_Value()
// docid: M:System.Data.SqlTypes.SqlChars.get_Value
    public func get_Value() throws -> dotnet.System_Arr<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_CharArray__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Char>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Char get_Item(System.Int64)
// docid: M:System.Data.SqlTypes.SqlChars.get_Item(System.Int64)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(offset : Swift.Int64) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlChars_Char__get_Item_0__1__i64(&__thrown, self.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int64, System.Char)
// docid: M:System.Data.SqlTypes.SqlChars.set_Item(System.Int64,System.Char)
    public func set_Item(offset : Swift.Int64, value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Data_SqlTypes_SqlChars_void__set_Item_0__2__i64_Char(&__thrown, self.get_handle(), offset, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Returns a reference to the internal buffer.

    */
    public var Buffer : Optional<dotnet.System_Arr<dotnet.System.Char>> {
        get {
            return try! get_Buffer();
        }
    }
    /**
    Gets a Boolean value that indicates whether this  is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the length of the value that is contained in the  instance.

    */
    public var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets the maximum length in two-byte characters of the value the internal buffer can hold.

    */
    public var MaxLength : Swift.Int64 {
        get {
            return try! get_MaxLength();
        }
    }
    /**
    Returns a null instance of this .

    */
    public static var Null : dotnet.System.Data.SqlTypes.SqlChars {
        get {
            return try! get_Null();
        }
    }
    /**
    Returns information about the storage state of this  instance.

    */
    public var Storage : dotnet.System.Data.SqlTypes.StorageState {
        get {
            return try! get_Storage();
        }
    }
    /**
    Returns a managed copy of the value held by this .

    */
    public var Value : dotnet.System_Arr<dotnet.System.Char> {
        get {
            return try! get_Value();
        }
    }
} // SqlChars


// type: System.Data.SqlTypes.SqlCompareOptions
    /**
    Specifies the compare option values for a  structure.

    */
public struct SqlCompareOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlCompareOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.SqlTypes.SqlCompareOptions None
    /**
    Specifies the default option settings for  comparisons.

    */
    public static var None : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_None());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlCompareOptions IgnoreCase
    /**
    Specifies that  comparisons must ignore case.

    */
    public static var IgnoreCase : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_IgnoreCase());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlCompareOptions IgnoreNonSpace
    /**
    Specifies that  comparisons must ignore nonspace combining characters, such as diacritics. The Unicode Standard defines combining characters as characters that are combined with base characters to produce a new character. Non-space combining characters do not use character space by themselves when rendered. For more information about non-space combining characters, see the Unicode Standard at https://www.unicode.org.

    */
    public static var IgnoreNonSpace : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_IgnoreNonSpace());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlCompareOptions IgnoreKanaType
    /**
    Specifies that  comparisons must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters that represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as "computer" or "Internet". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.

    */
    public static var IgnoreKanaType : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_IgnoreKanaType());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlCompareOptions IgnoreWidth
    /**
    Specifies that  comparisons must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width and, if this value is selected, the katakana characters written as full-width are considered equal to the same characters written in half-width.

    */
    public static var IgnoreWidth : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_IgnoreWidth());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlCompareOptions BinarySort2
    /**
    Performs a binary sort.

    */
    public static var BinarySort2 : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_BinarySort2());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlCompareOptions BinarySort
    /**
    Specifies that sorts should be based on a characters numeric value instead of its alphabetical value.

    */
    public static var BinarySort : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlCompareOptions(val: System_Data_SqlTypes_SqlCompareOptions_get_BinarySort());
            return __return;
        }
    }
} // SqlCompareOptions


// type: System.Data.SqlTypes.SqlDateTime
// boxed value type
    /**
    Represents the date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds to be stored in or retrieved from a database. The  structure has a different underlying data structure from its corresponding .NET Framework type, , which can represent any time between 12:00:00 AM 1/1/0001 and 11:59:59 PM 12/31/9999, to the accuracy of 100 nanoseconds.  actually stores the relative difference to 00:00:00 AM 1/1/1900. Therefore, a conversion from "00:00:00 AM 1/1/1900" to an integer will return 0.

    */
public final class SqlDateTime
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlDateTime_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlDateTime MaxValue
    /**
    Represents the maximum valid date value for a  structure.

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlDateTime {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDateTime(hndl: System_Data_SqlTypes_SqlDateTime_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDateTime MinValue
    /**
    Represents the minimum valid date value for a  structure.

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlDateTime {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDateTime(hndl: System_Data_SqlTypes_SqlDateTime_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDateTime Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlDateTime {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDateTime(hndl: System_Data_SqlTypes_SqlDateTime_get_Null());
            return __return;
        }
    }
    // static field: System.Int32 SQLTicksPerHour
    /**
    A constant whose value is the number of ticks equivalent to one hour.

    */
    public class var SQLTicksPerHour : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlDateTime_get_SQLTicksPerHour();
            return __return;
        }
    }
    // static field: System.Int32 SQLTicksPerMinute
    /**
    A constant whose value is the number of ticks equivalent to one minute.

    */
    public class var SQLTicksPerMinute : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlDateTime_get_SQLTicksPerMinute();
            return __return;
        }
    }
    // static field: System.Int32 SQLTicksPerSecond
    /**
    A constant whose value is the number of ticks equivalent to one second.

    */
    public class var SQLTicksPerSecond : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlDateTime_get_SQLTicksPerSecond();
            return __return;
        }
    }
    /**
    Gets the number of ticks representing the date of this  structure.

    */
    public var DayTicks : Swift.Int32 {
        get {
            return try! get_DayTicks();
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the number of ticks representing the time of this  structure.

    */
    public var TimeTicks : Swift.Int32 {
        get {
            return try! get_TimeTicks();
        }
    }
    /**
    Gets the value of the  structure. This property is read-only.

    */
    public var Value : dotnet.System.DateTime {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.DateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)
    /**
    Initializes a new instance of the  structure using the specified  value.

    - Parameter value: A  structure.
    */
    public init(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDateTime_ctor_0__1__DateTime(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied parameters.

    - Parameter dayTicks: An integer value that represents the date as ticks.
    - Parameter timeTicks: An integer value that represents the time as ticks.
    */
    public init(dayTicks : Swift.Int32, timeTicks : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDateTime_ctor_0__2__i32_i32(&__thrown, dayTicks, timeTicks);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied parameters to initialize the year, month, day.

    - Parameter year: An integer representing the year of the of the new  structure.
    - Parameter month: An integer value representing the month of the new  structure.
    - Parameter day: An integer value representing the day number of the new  structure.
    */
    public init(year : Swift.Int32, month : Swift.Int32, day : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDateTime_ctor_0__3__i32_i32_i32(&__thrown, year, month, day);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied parameters to initialize the year, month, day, hour, minute, and second of the new structure.

    - Parameter year: An integer value representing the year of the new  structure.
    - Parameter month: An integer value representing the month of the new  structure.
    - Parameter day: An integer value representing the day of the month of the new  structure.
    - Parameter hour: An integer value representing the hour of the new  structure.
    - Parameter minute: An integer value representing the minute of the new  structure.
    - Parameter second: An integer value representing the second of the new  structure.
    */
    public init(year : Swift.Int32, month : Swift.Int32, day : Swift.Int32, hour : Swift.Int32, minute : Swift.Int32, second : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDateTime_ctor_0__6__i32_i32_i32_i32_i32_i32(&__thrown, year, month, day, hour, minute, second);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Double)
// docid: M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)
    /**
    Initializes a new instance of the  structure using the supplied parameters to initialize the year, month, day, hour, minute, second, and millisecond of the new structure.

    - Parameter year: An integer value representing the year of the new  structure.
    - Parameter month: An integer value representing the month of the new  structure.
    - Parameter day: An integer value representing the day of the month of the new  structure.
    - Parameter hour: An integer value representing the hour of the new  structure.
    - Parameter minute: An integer value representing the minute of the new  structure.
    - Parameter second: An integer value representing the second of the new  structure.
    - Parameter millisecond: An double value representing the millisecond of the new  structure.
    */
    public init(year : Swift.Int32, month : Swift.Int32, day : Swift.Int32, hour : Swift.Int32, minute : Swift.Int32, second : Swift.Int32, millisecond : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDateTime_ctor_0__7__i32_i32_i32_i32_i32_i32_f64(&__thrown, year, month, day, hour, minute, second, millisecond);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied parameters to initialize the year, month, day, hour, minute, second, and microsecond of the new structure.

    - Parameter year: An integer value representing the year of the new  structure.
    - Parameter month: An integer value representing the month of the new  structure.
    - Parameter day: An integer value representing the day of the new  structure.
    - Parameter hour: An integer value representing the hour of the new  structure.
    - Parameter minute: An integer value representing the minute of the new  structure.
    - Parameter second: An integer value representing the second of the new  structure.
    - Parameter bilisecond: An integer value representing the microsecond (thousandths of a millisecond) of the new  structure.
    */
    public init(year : Swift.Int32, month : Swift.Int32, day : Swift.Int32, hour : Swift.Int32, minute : Swift.Int32, second : Swift.Int32, bilisecond : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDateTime_ctor_0__7__i32_i32_i32_i32_i32_i32_i32(&__thrown, year, month, day, hour, minute, second, bilisecond);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlDateTime_implicit_ctor();
            super.init(hndl: h);
    }
// TODO COPE (write_all_methods) (span) System.Data.SqlTypes.SqlDateTime Add(System.Data.SqlTypes.SqlDateTime, System.TimeSpan)
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)
    /**
    Compares this  structure to the supplied  structure and returns an indication of their relative values.

    - Parameter value: The  structure to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than . Zero This instance is the same as . Greater than zero This instance is greater than   
  
 -or-  
  
  is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_i32__CompareTo_0__1__SqlDateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)
    /**
    Compares this  structure to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( as Visual Basic).

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, .

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__Equals_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if the object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlDateTime.GetHashCode
    /**
    Gets the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__GreaterThan_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__GreaterThanOrEqual_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__LessThan_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__LessThanOrEqual_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Performs a logical comparison of two instances of  to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__NotEquals_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] System.Data.SqlTypes.SqlDateTime op_Addition(System.Data.SqlTypes.SqlDateTime, System.TimeSpan)
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__op_Equality_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime op_Explicit(System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_DateTime__op_Explicit_0__1__SqlDateTime(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDateTime op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlDateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlDateTime__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__op_GreaterThan_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDateTime op_Implicit(System.DateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)
    public class func op_Implicit(value : dotnet.System.DateTime) throws -> dotnet.System.Data.SqlTypes.SqlDateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlDateTime__op_Implicit_0__1__DateTime(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Performs a logical comparison of two instances of  to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__op_Inequality_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__op_LessThan_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime, System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDateTime, y : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlBoolean__op_LessThanOrEqual_0__2__SqlDateTime_SqlDateTime(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] System.Data.SqlTypes.SqlDateTime op_Subtraction(System.Data.SqlTypes.SqlDateTime, System.TimeSpan)
    // System.Data.SqlTypes.SqlDateTime Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)
    /**
    Converts the specified  representation of a date and time to its  equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A  structure equal to the date and time represented by the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlDateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlDateTime__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDateTime(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Data.SqlTypes.SqlDateTime Subtract(System.Data.SqlTypes.SqlDateTime, System.TimeSpan)
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlDateTime.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  structure whose value is a string representing the date and time that is contained in this  structure.

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlDateTime.ToString
    /**
    Converts this  structure to a .

    - Returns: A  representing the  property of this  structure.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_DayTicks()
// docid: M:System.Data.SqlTypes.SqlDateTime.get_DayTicks
    public func get_DayTicks() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_i32__get_DayTicks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlDateTime.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_TimeTicks()
// docid: M:System.Data.SqlTypes.SqlDateTime.get_TimeTicks
    public func get_TimeTicks() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_i32__get_TimeTicks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.DateTime get_Value()
// docid: M:System.Data.SqlTypes.SqlDateTime.get_Value
    public func get_Value() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDateTime_DateTime__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
} // SqlDateTime


// type: System.Data.SqlTypes.SqlDecimal
// boxed value type
    /**
    Represents a numeric value between - 10^38 +1 and 10^38 - 1, with fixed precision and scale.

    */
public final class SqlDecimal
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlDecimal_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Byte MaxPrecision
    /**
    A constant representing the largest possible value for the  property.

    */
    public class var MaxPrecision : Swift.UInt8 {
        get {
        let __return = System_Data_SqlTypes_SqlDecimal_get_MaxPrecision();
            return __return;
        }
    }
    // static field: System.Byte MaxScale
    /**
    A constant representing the maximum value for the  property.

    */
    public class var MaxScale : Swift.UInt8 {
        get {
        let __return = System_Data_SqlTypes_SqlDecimal_get_MaxScale();
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDecimal MaxValue
    /**
    A constant representing the maximum value of a  structure.

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlDecimal {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDecimal(hndl: System_Data_SqlTypes_SqlDecimal_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDecimal MinValue
    /**
    A constant representing the minimum value for a  structure.

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlDecimal {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDecimal(hndl: System_Data_SqlTypes_SqlDecimal_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDecimal Null
    /**
    Represents a  that can be assigned to this instance of the  class.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlDecimal {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDecimal(hndl: System_Data_SqlTypes_SqlDecimal_get_Null());
            return __return;
        }
    }
    /**
    Gets the binary representation of the value of this  structure as an array of bytes.

    */
    public var BinData : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_BinData();
        }
    }
    /**
    Gets the binary representation of this  structure as an array of integers.

    */
    public var Data : dotnet.System_Arr<Swift.Int32> {
        get {
            return try! get_Data();
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Indicates whether the  of this  structure is greater than zero.

    */
    public var IsPositive : Bool {
        get {
            return try! get_IsPositive();
        }
    }
    /**
    Gets the maximum number of digits used to represent the  property.

    */
    public var Precision : Swift.UInt8 {
        get {
            return try! get_Precision();
        }
    }
    /**
    Gets the number of decimal places to which  is resolved.

    */
    public var Scale : Swift.UInt8 {
        get {
            return try! get_Scale();
        }
    }
    /**
    Gets the value of the  structure. This property is read-only.

    */
    public var Value : dotnet.System.Decimal {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Byte, System.Byte, bool, System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied parameters.

    - Parameter bPrecision: The maximum number of digits that can be used to represent the  property of the new  structure.
    - Parameter bScale: The number of decimal places to which the  property will be resolved for the new  structure.
    - Parameter fPositive: A Boolean value that indicates whether the new  structure represents a positive or negative number.
    - Parameter data1: An 32-bit unsigned integer which will be combined with data2, data3, and data4 to make up the 128-bit unsigned integer that represents the new  structures value.
    - Parameter data2: An 32-bit unsigned integer which will be combined with data1, data3, and data4 to make up the 128-bit unsigned integer that represents the new  structures value.
    - Parameter data3: An 32-bit unsigned integer which will be combined with data1, data2, and data4 to make up the 128-bit unsigned integer that represents the new  structures value.
    - Parameter data4: An 32-bit unsigned integer which will be combined with data1, data2, and data3 to make up the 128-bit unsigned integer that represents the new  structures value.
    */
    public init(bPrecision : Swift.UInt8, bScale : Swift.UInt8, fPositive : Bool, data1 : Swift.Int32, data2 : Swift.Int32, data3 : Swift.Int32, data4 : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDecimal_ctor_0__7__u8_u8_bool_i32_i32_i32_i32(&__thrown, bPrecision, bScale, Swift.Int32(fPositive ? 1 : 0), data1, data2, data3, data4);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte, System.Byte, bool, System.Int32[])
// docid: M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])
    /**
    Initializes a new instance of the  structure using the supplied parameters.

    - Parameter bPrecision: The maximum number of digits that can be used to represent the  property of the new  structure.
    - Parameter bScale: The number of decimal places to which the  property will be resolved for the new  structure.
    - Parameter fPositive: A Boolean value that indicates whether the new  structure represents a positive or negative number.
    - Parameter bits: The 128-bit unsigned integer that provides the value of the new .
    */
    public init(bPrecision : Swift.UInt8, bScale : Swift.UInt8, fPositive : Bool, bits : dotnet.System_Arr<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDecimal_ctor_0__4__u8_u8_bool_i32Array(&__thrown, bPrecision, bScale, Swift.Int32(fPositive ? 1 : 0), bits.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Decimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)
    /**
    Initializes a new instance of the  structure using the supplied  value.

    - Parameter value: The  value to be stored as a  structure.
    */
    public init(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDecimal_ctor_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Double)
// docid: M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)
    /**
    Initializes a new instance of the  structure using the supplied double parameter.

    - Parameter dVal: A double, representing the value for the new  structure.
    */
    public init(dVal : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDecimal_ctor_0__1__f64(&__thrown, dVal);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied integer value.

    - Parameter value: The supplied integer value which will the used as the value of the new  structure.
    */
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDecimal_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64)
// docid: M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)
    /**
    Initializes a new instance of the  structure using the supplied long integer value.

    - Parameter value: The supplied long integer value which will the used as the value of the new  structure.
    */
    public init(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDecimal_ctor_0__1__i64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlDecimal_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlDecimal Abs(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)
    /**
    The Abs method gets the absolute value of the  parameter.

    - Parameter n: A  structure.
    - Returns: A  structure whose  property contains the unsigned number representing the absolute value of the  parameter.

    */
    public class func Abs(n : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Abs_0__1__SqlDecimal(&__thrown, n.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Add(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Calculates the sum of the two  operators.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the sum.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Add_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal AdjustScale(System.Data.SqlTypes.SqlDecimal, System.Int32, bool)
// docid: M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)
    /**
    The scale of the  operand will be adjusted to the number of digits indicated by the digits parameter. Depending on the value of the fRound parameter, the value will either be rounded to the appropriate number of digits or truncated.

    - Parameter n: The  structure to be adjusted.
    - Parameter digits: The number of digits in the adjusted structure.
    - Parameter fRound: If this parameter is , the new Value will be rounded, if , the value will be truncated.
    - Returns: A new  structure whose  property contains the adjusted number.

    */
    public class func AdjustScale(n : dotnet.System.Data.SqlTypes.SqlDecimal, digits : Swift.Int32, fRound : Bool) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__AdjustScale_0__3__SqlDecimal_i32_bool(&__thrown, n.get_handle(), digits, Swift.Int32(fRound ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Ceiling(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)
    /**
    Returns the smallest whole number greater than or equal to the specified  structure.

    - Parameter n: The  structure for which the ceiling value is to be calculated.
    - Returns: A  representing the smallest whole number greater than or equal to the specified  structure.

    */
    public class func Ceiling(n : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Ceiling_0__1__SqlDecimal(&__thrown, n.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)
    /**
    Compares this  instance to the supplied  object and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_i32__CompareTo_0__1__SqlDecimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlDecimal ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal, System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)
    /**
    Adjusts the value of the  operand to the indicated precision and scale.

    - Parameter n: The  structure whose value is to be adjusted.
    - Parameter precision: The precision for the new  structure.
    - Parameter scale: The scale for the new  structure.
    - Returns: A new  structure whose Value has been adjusted to the precision and scale indicated in the parameters.

    */
    public class func ConvertToPrecScale(n : dotnet.System.Data.SqlTypes.SqlDecimal, precision : Swift.Int32, scale : Swift.Int32) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__ConvertToPrecScale_0__3__SqlDecimal_i32_i32(&__thrown, n.get_handle(), precision, scale);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Divide(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    The division operator calculates the results of dividing the first  operand by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the results of the division.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Divide_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  operands to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, the value of the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__Equals_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)
    /**
    Compares the supplied  parameter to the  property of the  instance.

    - Parameter value: The  to be compared.
    - Returns: 
         if object is an instance of  and the two are equal. Otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Data.SqlTypes.SqlDecimal Floor(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)
    /**
    Rounds a specified  number to the next lower whole number.

    - Parameter n: The  structure for which the floor value is to be calculated.
    - Returns: A  structure that contains the whole number part of this  structure.

    */
    public class func Floor(n : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Floor_0__1__SqlDecimal(&__thrown, n.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlDecimal.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of two  structures to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__GreaterThan_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__GreaterThanOrEqual_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of two  structures to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__LessThan_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__LessThanOrEqual_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Multiply(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    The multiplication operator computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the product of the multiplication.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Multiply_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__NotEquals_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Addition(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Calculates the sum of the two  operators.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the sum.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Addition_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Division(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    The division operator calculates the results of dividing the first  operand by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the results of the division.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Division_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  operands to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__op_Equality_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_Decimal__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Explicit(System.Double)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)
    public class func op_Explicit(x : Swift.Double) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Explicit_0__1__f64(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of two  structures to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__op_GreaterThan_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Decimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)
    public class func op_Implicit(x : dotnet.System.Decimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__Decimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Implicit(System.Int64)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)
    public class func op_Implicit(x : Swift.Int64) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Implicit_0__1__i64(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__op_Inequality_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of two  structures to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__op_LessThan_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__op_LessThanOrEqual_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Multiply(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    The multiplication operator computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the product of the multiplication.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Multiply_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_Subtraction(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Calculates the results of subtracting the second  operand from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose Value property contains the results of the subtraction.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_Subtraction_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDecimal op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)
    /**
    The unary minus operator negates the  parameter.

    - Parameter x: The  structure to be negated.
    - Returns: A new  structure whose value contains the results of the negation.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__op_UnaryNegation_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)
    /**
    Converts the  representation of a number to its  equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A  equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Power(System.Data.SqlTypes.SqlDecimal, System.Double)
// docid: M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)
    /**
    Raises the value of the specified  structure to the specified exponential power.

    - Parameter n: The  structure to be raised to a power.
    - Parameter exp: A double value that indicates the power to which the number should be raised.
    - Returns: A  structure that contains the results.

    */
    public class func Power(n : dotnet.System.Data.SqlTypes.SqlDecimal, exp : Swift.Double) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Power_0__2__SqlDecimal_f64(&__thrown, n.get_handle(), exp);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Round(System.Data.SqlTypes.SqlDecimal, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)
    /**
    Gets the number nearest the specified  structure's value with the specified precision.

    - Parameter n: The  structure to be rounded.
    - Parameter position: The number of significant fractional digits (precision) in the return value.
    - Returns: A  structure that contains the results of the rounding operation.

    */
    public class func Round(n : dotnet.System.Data.SqlTypes.SqlDecimal, position : Swift.Int32) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Round_0__2__SqlDecimal_i32(&__thrown, n.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Sign(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)
    /**
    Gets a value that indicates the sign of a  structure's  property.

    - Parameter n: The  structure whose sign is to be evaluated.
    - Returns: A number that indicates the sign of the  structure.

    */
    public class func Sign(n : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlInt32__Sign_0__1__SqlDecimal(&__thrown, n.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Subtract(System.Data.SqlTypes.SqlDecimal, System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)
    /**
    Calculates the results of subtracting the second  operand from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose Value property contains the results of the subtraction.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlDecimal, y : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Subtract_0__2__SqlDecimal_SqlDecimal(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Double ToDouble()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToDouble
    /**
    Returns the a double equal to the contents of the  property of this instance.

    - Returns: The decimal representation of the  property.

    */
    public func ToDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_f64__ToDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure. If the  structure's Value is , the  structure's  will be 1. Otherwise, the  structure's  will be 0.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this instance of .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this instance of .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this instance of .

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this instance of .

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this instance of .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A  structure with the same value as this instance of .

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  structure whose value is a string representing the value contained in this  structure.

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlDecimal.ToString
    /**
    Converts this  structure to .

    - Returns: A new  object that contains the string representation of the  structure's  property.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal Truncate(System.Data.SqlTypes.SqlDecimal, System.Int32)
// docid: M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)
    /**
    Truncates the specified  structure's value to the that you want position.

    - Parameter n: The  structure to be truncated.
    - Parameter position: The decimal position to which the number will be truncated.
    - Returns: Supply a negative value for the  parameter in order to truncate the value to the corresponding position to the left of the decimal point.

    */
    public class func Truncate(n : dotnet.System.Data.SqlTypes.SqlDecimal, position : Swift.Int32) throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_SqlDecimal__Truncate_0__2__SqlDecimal_i32(&__thrown, n.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte[] get_BinData()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_BinData
    public func get_BinData() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_u8Array__get_BinData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32[] get_Data()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_Data
    public func get_Data() throws -> dotnet.System_Arr<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_i32Array__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int32>(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsPositive()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_IsPositive
    public func get_IsPositive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_bool__get_IsPositive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Byte get_Precision()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_Precision
    public func get_Precision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_u8__get_Precision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Byte get_Scale()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_Scale
    public func get_Scale() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_u8__get_Scale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Decimal get_Value()
// docid: M:System.Data.SqlTypes.SqlDecimal.get_Value
    public func get_Value() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDecimal_Decimal__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
} // SqlDecimal


// type: System.Data.SqlTypes.SqlDouble
// boxed value type
    /**
    Represents a floating-point number within the range of -1.79E +308 through 1.79E +308 to be stored in or retrieved from a database.

    */
public final class SqlDouble
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlDouble_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlDouble MaxValue
    /**
    A constant representing the maximum value for a  structure.

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlDouble {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDouble(hndl: System_Data_SqlTypes_SqlDouble_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDouble MinValue
    /**
    A constant representing the minimum possible value of .

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlDouble {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDouble(hndl: System_Data_SqlTypes_SqlDouble_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDouble Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlDouble {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDouble(hndl: System_Data_SqlTypes_SqlDouble_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlDouble Zero
    /**
    Represents a zero value that can be assigned to the  property of an instance of the  structure.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlDouble {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlDouble(hndl: System_Data_SqlTypes_SqlDouble_get_Zero());
            return __return;
        }
    }
    /**
    Returns a Boolean value that indicates whether this  instance is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of the  structure. This property is read-only.

    */
    public var Value : Swift.Double {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Double)
// docid: M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)
    /**
    Initializes a new instance of the  structure using the supplied double parameter to set the new  structure's  property.

    - Parameter value: A double whose value will be used for the new .
    */
    public init(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlDouble_ctor_0__1__f64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlDouble_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlDouble Add(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The addition operator computes the sum of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The sum of the two  operands.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__Add_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlDouble) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_i32__CompareTo_0__1__SqlDouble(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to compare.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlDouble Divide(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The division operator divides the first  operand by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the division operation.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__Divide_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Performs a logical comparison on two instances of  to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, .

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__Equals_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if the two values are equal. Otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlDouble.GetHashCode
    /**
    Returns the hash code for this  structure.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__GreaterThan_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__GreaterThanOrEqual_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__LessThan_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__LessThanOrEqual_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble Multiply(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The multiplication operator computes the product of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The product of the two  operands.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__Multiply_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether they are notequal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__NotEquals_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Addition(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The addition operator computes the sum of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The sum of the two  operands.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Addition_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Division(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The division operator divides the first  operand by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the division operation.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Division_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Performs a logical comparison on two instances of  to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__op_Equality_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_f64__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__op_GreaterThan_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Implicit(System.Double)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)
    public class func op_Implicit(x : Swift.Double) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Implicit_0__1__f64(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__op_Inequality_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__op_LessThan_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__op_LessThanOrEqual_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Multiply(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The multiplication operator computes the product of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The product of the two  operands.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Multiply_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_Subtraction(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The subtraction operator the second  operand from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the subtraction operation.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_Subtraction_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlDouble op_UnaryNegation(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)
    /**
    Returns the negated value of the specified  structure.

    - Parameter x: A  structure.
    - Returns: A  structure that contains the negated value.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__op_UnaryNegation_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlDouble.Parse(System.String)
    /**
    Converts the  representation of a number to its double-precision floating point number equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A  that contains the value represented by the .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble Subtract(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
    /**
    The subtraction operator the second  operand from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: The results of the subtraction operation.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlDouble, y : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDouble__Subtract_0__2__SqlDouble_SqlDouble(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: A  structure whose  will be  if the  structure's  is non-zero,  if the  is zero and  if the  structure is .

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  structure whose converted value equals the rounded value of this .

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the integer part of the  structure's value.

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the integer part of the  structure's value.

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the integer part of the  structure's value.

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  is equal to the value of this .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  is equal to the  of this .

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlDouble.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  representing the  of this .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlDouble.ToString
    /**
    Converts this  structure to a string.

    - Returns: A string representing the  of this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlDouble.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Double get_Value()
// docid: M:System.Data.SqlTypes.SqlDouble.get_Value
    public func get_Value() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlDouble_f64__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlDouble


// type: System.Data.SqlTypes.SqlGuid
// boxed value type
    /**
    Represents a GUID to be stored in or retrieved from a database.

    */
public final class SqlGuid
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlGuid_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlGuid Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlGuid {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlGuid(hndl: System_Data_SqlTypes_SqlGuid_get_Null());
            return __return;
        }
    }
    /**
    Gets a Boolean value that indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of the  structure. This property is read-only.

    */
    public var Value : dotnet.System.Guid {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  structure using the supplied byte array parameter.

    - Parameter value: A byte array.
    */
    public init(value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlGuid_ctor_0__1__u8Array(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Guid)
// docid: M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)
    /**
    Initializes a new instance of the  structure using the specified  parameter.

    - Parameter g: A 
    */
    public init(g : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlGuid_ctor_0__1__Guid(&__thrown, g.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int16, System.Int16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)
// docid: M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
    /**
    Initializes a new instance of the  structure using the specified values.

    - Parameter a: The first four bytes of the .
    - Parameter b: The next two bytes of the .
    - Parameter c: The next two bytes of the .
    - Parameter d: The next byte of the .
    - Parameter e: The next byte of the .
    - Parameter f: The next byte of the .
    - Parameter g: The next byte of the .
    - Parameter h: The next byte of the .
    - Parameter i: The next byte of the .
    - Parameter j: The next byte of the .
    - Parameter k: The next byte of the .
    */
    public init(a : Swift.Int32, b : Swift.Int16, c : Swift.Int16, d : Swift.UInt8, e : Swift.UInt8, f : Swift.UInt8, g : Swift.UInt8, h : Swift.UInt8, i : Swift.UInt8, j : Swift.UInt8, k : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlGuid_ctor_0__11__i32_i16_i16_u8_u8_u8_u8_u8_u8_u8_u8(&__thrown, a, b, c, d, e, f, g, h, i, j, k);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)
    /**
    Initializes a new instance of the  structure using the specified  parameter.

    - Parameter s: A  object.
    */
    public init(s : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlGuid_ctor_0__1__String(&__thrown, s.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlGuid_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)
    /**
    Compares this  structure to the supplied  and returns an indication of their relative values. Compares more than the last 6 bytes, but treats the last 6 bytes as the most significant ones in comparisons.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than object. Zero This instance is the same as object. Greater than zero This instance is greater than object  
  
 -or-  
  
 object is a null reference ().

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlGuid) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_i32__CompareTo_0__1__SqlGuid(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)
    /**
    Compares this  structure to the supplied object and returns an indication of their relative values. Compares more than the last 6 bytes, but treats the last 6 bytes as the most significant ones in comparisons.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than object. Zero This instance is the same as object. Greater than zero This instance is greater than object  
  
 -or-  
  
 object is a null reference ()

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__Equals_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlGuid.GetHashCode
    /**
    Returns the hash code of this  structure.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__GreaterThan_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__GreaterThanOrEqual_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__LessThan_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__LessThanOrEqual_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Performs a logical comparison on two  structures to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__NotEquals_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__op_Equality_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlGuid op_Explicit(System.Data.SqlTypes.SqlBinary)
// docid: M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBinary) throws -> dotnet.System.Data.SqlTypes.SqlGuid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlGuid__op_Explicit_0__1__SqlBinary(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlGuid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Guid op_Explicit(System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_Guid__op_Explicit_0__1__SqlGuid(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlGuid op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlGuid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlGuid__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlGuid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__op_GreaterThan_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlGuid op_Implicit(System.Guid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)
    public class func op_Implicit(x : dotnet.System.Guid) throws -> dotnet.System.Data.SqlTypes.SqlGuid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlGuid__op_Implicit_0__1__Guid(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlGuid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Performs a logical comparison on two  structures to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__op_Inequality_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__op_LessThan_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid, System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)
    /**
    Compares two instances of  to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlGuid, y : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBoolean__op_LessThanOrEqual_0__2__SqlGuid_SqlGuid(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlGuid Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlGuid.Parse(System.String)
    /**
    Converts the specified  structure to .

    - Parameter s: The  to be parsed.
    - Returns: A  equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlGuid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlGuid__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlGuid(hndl : __return);
        }
    }
    // System.Byte[] ToByteArray()
// docid: M:System.Data.SqlTypes.SqlGuid.ToByteArray
    /**
    Converts this  structure to a byte array.

    - Returns: An array of bytes representing the  of this  structure.

    */
    public func ToByteArray() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_u8Array__ToByteArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Data.SqlTypes.SqlBinary ToSqlBinary()
// docid: M:System.Data.SqlTypes.SqlGuid.ToSqlBinary
    /**
    Converts this  structure to .

    - Returns: A  structure that contains the bytes in the  structure.

    */
    public func ToSqlBinary() throws -> dotnet.System.Data.SqlTypes.SqlBinary {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlBinary__ToSqlBinary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBinary(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlGuid.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  structure that contains the string representation of the  structure.

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlGuid.ToString
    /**
    Converts this  structure to a .

    - Returns: A  that contains the string representation of the  structure.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlGuid.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Guid get_Value()
// docid: M:System.Data.SqlTypes.SqlGuid.get_Value
    public func get_Value() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlGuid_Guid__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
} // SqlGuid


// type: System.Data.SqlTypes.SqlInt16
// boxed value type
    /**
    Represents a 16-bit signed integer to be stored in or retrieved from a database.

    */
public final class SqlInt16
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlInt16_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlInt16 MaxValue
    /**
    A constant representing the largest possible value of a .

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlInt16 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt16(hndl: System_Data_SqlTypes_SqlInt16_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt16 MinValue
    /**
    A constant representing the smallest possible value of a .

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlInt16 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt16(hndl: System_Data_SqlTypes_SqlInt16_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt16 Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlInt16 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt16(hndl: System_Data_SqlTypes_SqlInt16_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt16 Zero
    /**
    Represents a zero value that can be assigned to the  property of an instance of the  structure.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlInt16 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt16(hndl: System_Data_SqlTypes_SqlInt16_get_Zero());
            return __return;
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of this instance of  structure. This property is read-only.

    */
    public var Value : Swift.Int16 {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Int16)
// docid: M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)
    /**
    Initializes a new instance of the  structure using the supplied short integer parameter.

    - Parameter value: A short integer.
    */
    public init(value : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlInt16_ctor_0__1__i16(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlInt16_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlInt16 Add(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the sum of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the sum of the two  operands.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Add_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 BitwiseAnd(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the bitwise AND.

    */
    public class func BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__BitwiseAnd_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 BitwiseOr(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the bitwise OR of its two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the bitwise OR.

    */
    public class func BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__BitwiseOr_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object, or the object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlInt16) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_i32__CompareTo_0__1__SqlInt16(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlInt16 Divide(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Divides the first  operand by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  whose  property contains the results of the division.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Divide_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__Equals_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)
    /**
    Compares the specified object to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlInt16.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__GreaterThan_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__GreaterThanOrEqual_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__LessThan_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two  structures to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__LessThanOrEqual_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 Mod(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the remainder after dividing its first  operand by its second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the remainder.

    */
    public class func Mod(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Mod_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 Modulus(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Divides two  values and returns the remainder.

    - Parameter x: A  value.
    - Parameter y: A  value.
    - Returns: The remainder left after division is performed on  and .

    */
    public class func Modulus(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Modulus_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 Multiply(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the product of the two parameters.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Multiply_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Performs a logical comparison of two  structures to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__NotEquals_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 OnesComplement(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)
    /**
    The ~ operator performs a bitwise one's complement operation on its  operand.

    - Parameter x: A  structure.
    - Returns: A  structure whose  property contains the complement of the specified  structure.

    */
    public class func OnesComplement(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__OnesComplement_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Addition(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the sum of the two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the sum of the two  operands.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Addition_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_BitwiseAnd(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the bitwise AND.

    */
    public class func op_BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_BitwiseAnd_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_BitwiseOr(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the bitwise OR of its two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the bitwise OR.

    */
    public class func op_BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_BitwiseOr_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Division(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Divides the first  operand by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  whose  property contains the results of the division.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Division_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Performs a logical comparison of two  structures to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__op_Equality_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_ExclusiveOr(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the bitwise XOR.

    */
    public class func op_ExclusiveOr(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_ExclusiveOr_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int16 op_Explicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_i16__op_Explicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two instances of  to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__op_GreaterThan_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Implicit(System.Int16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)
    public class func op_Implicit(x : Swift.Int16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Implicit_0__1__i16(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Performs a logical comparison of two  structures to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__op_Inequality_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two instances of  to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__op_LessThan_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Compares two  structures to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__op_LessThanOrEqual_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Modulus(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the remainder after dividing its first  operand by its second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the remainder.

    */
    public class func op_Modulus(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Modulus_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Multiply(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the product of the two parameters.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Multiply_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_OnesComplement(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)
    /**
    The ~ operator performs a bitwise one's complement operation on its  operand.

    - Parameter x: A  structure.
    - Returns: A  structure whose  property contains the complement of the specified  structure.

    */
    public class func op_OnesComplement(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_OnesComplement_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_Subtraction(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the subtraction.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_Subtraction_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt16 op_UnaryNegation(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)
    /**
    The unary minus operator negates the  of the  operand.

    - Parameter x: A  structure.
    - Returns: A  structure that contains the negated value.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__op_UnaryNegation_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlInt16.Parse(System.String)
    /**
    Converts the  representation of a number to its 16-bit signed integer equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A 16-bit signed integer equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 Subtract(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the subtraction.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Subtract_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure. If the value of the  is less than 0 or greater than 255, an  occurs.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the value of this  structure.

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the value of this  structure.

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the value of this  structure.

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the value of this  structure.

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the value of this  structure.

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the value of this  structure.

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlInt16.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  representing the  of this instance of .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlInt16.ToString
    /**
    Converts a  structure to .

    - Returns: A  object representing the  of this instance of .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 Xor(System.Data.SqlTypes.SqlInt16, System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the XOR operation.

    */
    public class func Xor(x : dotnet.System.Data.SqlTypes.SqlInt16, y : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_SqlInt16__Xor_0__2__SqlInt16_SqlInt16(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlInt16.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int16 get_Value()
// docid: M:System.Data.SqlTypes.SqlInt16.get_Value
    public func get_Value() throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt16_i16__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlInt16


// type: System.Data.SqlTypes.SqlInt32
// boxed value type
    /**
    Represents a 32-bit signed integer to be stored in or retrieved from a database.

    */
public final class SqlInt32
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlInt32_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlInt32 MaxValue
    /**
    A constant representing the largest possible value of a .

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlInt32 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt32(hndl: System_Data_SqlTypes_SqlInt32_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt32 MinValue
    /**
    A constant representing the smallest possible value of a .

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlInt32 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt32(hndl: System_Data_SqlTypes_SqlInt32_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt32 Null
    /**
    Represents a  that can be assigned to this instance of the  class.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlInt32 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt32(hndl: System_Data_SqlTypes_SqlInt32_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt32 Zero
    /**
    Represents a zero value that can be assigned to the  property of an instance of the  structure.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlInt32 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt32(hndl: System_Data_SqlTypes_SqlInt32_get_Zero());
            return __return;
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of this  structure. This property is read-only.

    */
    public var Value : Swift.Int32 {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)
    /**
    Initializes a new instance of the  structure using the supplied integer value.

    - Parameter value: The integer to be converted.
    */
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlInt32_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlInt32_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlInt32 Add(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the sum of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the sum of the specified  structures.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Add_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 BitwiseAnd(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise AND operation.

    */
    public class func BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__BitwiseAnd_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 BitwiseOr(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the bitwise OR of the specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise OR operation.

    */
    public class func BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__BitwiseOr_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlInt32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_i32__CompareTo_0__1__SqlInt32(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlInt32 Divide(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Divides the first  parameter from the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  whose  property contains the results of the division.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Divide_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__Equals_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlInt32.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__GreaterThan_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__GreaterThanOrEqual_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__LessThan_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__LessThanOrEqual_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Mod(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the remainder after dividing the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the remainder.

    */
    public class func Mod(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Mod_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Modulus(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Divides two  values and returns the remainder.

    - Parameter x: A  value.
    - Parameter y: A  value.
    - Returns: The remainder left after division is performed on  and .

    */
    public class func Modulus(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Modulus_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Multiply(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the product of the two parameters.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Multiply_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__NotEquals_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 OnesComplement(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)
    /**
    Performs a bitwise one's complement operation on the specified  structure.

    - Parameter x: A  structure.
    - Returns: A  structure that contains the results of the one's complement operation.

    */
    public class func OnesComplement(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__OnesComplement_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Addition(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the sum of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the sum of the specified  structures.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Addition_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_BitwiseAnd(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise AND operation.

    */
    public class func op_BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_BitwiseAnd_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_BitwiseOr(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the bitwise OR of the specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise OR operation.

    */
    public class func op_BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_BitwiseOr_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Division(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Divides the first  parameter from the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  whose  property contains the results of the division.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Division_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__op_Equality_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_ExclusiveOr(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Performs a bitwise exclusive-OR operation on the specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise XOR operation.

    */
    public class func op_ExclusiveOr(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_ExclusiveOr_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 op_Explicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_i32__op_Explicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__op_GreaterThan_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Implicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Implicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Implicit(System.Int32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)
    public class func op_Implicit(x : Swift.Int32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Implicit_0__1__i32(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__op_Inequality_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__op_LessThan_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Compares the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__op_LessThanOrEqual_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Modulus(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the remainder after dividing the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the remainder.

    */
    public class func op_Modulus(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Modulus_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Multiply(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  contains the product of the two parameters.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Multiply_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_OnesComplement(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)
    /**
    Performs a bitwise one's complement operation on the specified  structure.

    - Parameter x: A  structure.
    - Returns: A  structure that contains the results of the one's complement operation.

    */
    public class func op_OnesComplement(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_OnesComplement_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_Subtraction(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the subtraction.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_Subtraction_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt32 op_UnaryNegation(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)
    /**
    Negates the  of the  operand.

    - Parameter x: A  structure.
    - Returns: A  structure that contains the negated value.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__op_UnaryNegation_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlInt32.Parse(System.String)
    /**
    Converts the  representation of a number to its 32-bit signed integer equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A 32-bit signed integer equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Subtract(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure whose  property contains the results of the subtraction.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Subtract_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure. If the value of the  is less than 0 or greater than 255, an  occurs.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlInt32.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A new  structure equal to the value of this .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlInt32.ToString
    /**
    Converts a  structure to a .

    - Returns: A  structure equal to the value of this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 Xor(System.Data.SqlTypes.SqlInt32, System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)
    /**
    Performs a bitwise exclusive-OR operation on the specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise XOR operation.

    */
    public class func Xor(x : dotnet.System.Data.SqlTypes.SqlInt32, y : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_SqlInt32__Xor_0__2__SqlInt32_SqlInt32(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlInt32.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Value()
// docid: M:System.Data.SqlTypes.SqlInt32.get_Value
    public func get_Value() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt32_i32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlInt32


// type: System.Data.SqlTypes.SqlInt64
// boxed value type
    /**
    Represents a 64-bit signed integer to be stored in or retrieved from a database.

    */
public final class SqlInt64
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlInt64_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlInt64 MaxValue
    /**
    A constant representing the largest possible value for a  structure.

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlInt64 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt64(hndl: System_Data_SqlTypes_SqlInt64_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt64 MinValue
    /**
    A constant representing the smallest possible value for a  structure.

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlInt64 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt64(hndl: System_Data_SqlTypes_SqlInt64_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt64 Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlInt64 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt64(hndl: System_Data_SqlTypes_SqlInt64_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlInt64 Zero
    /**
    Represents a zero value that can be assigned to the  property of an instance of the  structure.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlInt64 {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlInt64(hndl: System_Data_SqlTypes_SqlInt64_get_Zero());
            return __return;
        }
    }
    /**
    Gets a Boolean value that indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of this  structure. This property is read-only.

    */
    public var Value : Swift.Int64 {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Int64)
// docid: M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)
    /**
    Initializes a new instance of the  structure using the supplied long integer.

    - Parameter value: A long integer.
    */
    public init(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlInt64_ctor_0__1__i64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlInt64_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlInt64 Add(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the sum of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  is equal to the sum of the two  parameters.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Add_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 BitwiseAnd(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise AND operation.

    */
    public class func BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__BitwiseAnd_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 BitwiseOr(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the bitwise OR of its two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise OR operation.

    */
    public class func BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__BitwiseOr_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlInt64) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_i32__CompareTo_0__1__SqlInt64(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlInt64 Divide(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Divides the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the results of the division operation.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Divide_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__Equals_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if object is an instance of  and the two are equal; otherwise .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlInt64.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A  that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__GreaterThan_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__GreaterThanOrEqual_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison on the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__LessThan_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison on the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__LessThanOrEqual_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 Mod(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the remainder after dividing the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the remainder.

    */
    public class func Mod(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Mod_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 Modulus(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Divides two  values and returns the remainder.

    - Parameter x: A  value.
    - Parameter y: A  value.
    - Returns: The remainder left after division is performed on  and .

    */
    public class func Modulus(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Modulus_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 Multiply(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  is equal to the product of the two  parameters.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Multiply_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison on the two SqlInt64 parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__NotEquals_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 OnesComplement(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)
    /**
    Performs a bitwise one's complement operation on its  operand.

    - Parameter x: A  structure.
    - Returns: A new  structure whose  is equal to the ones complement of the  parameter.

    */
    public class func OnesComplement(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__OnesComplement_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Addition(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the sum of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  is equal to the sum of the two  parameters.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Addition_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_BitwiseAnd(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the bitwise AND of its  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise AND operation.

    */
    public class func op_BitwiseAnd(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_BitwiseAnd_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_BitwiseOr(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the bitwise OR of its two  operands.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise OR operation.

    */
    public class func op_BitwiseOr(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_BitwiseOr_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Division(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Divides the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the results of the division operation.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Division_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__op_Equality_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_ExclusiveOr(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise XOR operation.

    */
    public class func op_ExclusiveOr(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_ExclusiveOr_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 op_Explicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_i64__op_Explicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__op_GreaterThan_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Implicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Implicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Implicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Implicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Implicit(System.Int64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)
    public class func op_Implicit(x : Swift.Int64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Implicit_0__1__i64(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison on the two SqlInt64 parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__op_Inequality_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison on the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__op_LessThan_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a logical comparison on the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__op_LessThanOrEqual_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Modulus(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the remainder after dividing the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property contains the remainder.

    */
    public class func op_Modulus(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Modulus_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Multiply(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Computes the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  is equal to the product of the two  parameters.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Multiply_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_OnesComplement(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)
    /**
    Performs a bitwise one's complement operation on its  operand.

    - Parameter x: A  structure.
    - Returns: A new  structure whose  is equal to the ones complement of the  parameter.

    */
    public class func op_OnesComplement(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_OnesComplement_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_Subtraction(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property equals the results of the subtraction operation.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_Subtraction_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlInt64 op_UnaryNegation(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)
    /**
    The unary minus operator negates the  of the  operand.

    - Parameter x: A  structure.
    - Returns: A  structure whose  is equal to the negated  of the  parameter.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__op_UnaryNegation_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlInt64.Parse(System.String)
    /**
    Converts the  representation of a number to its 64-bit signed integer equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A 64-bit signed integer equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 Subtract(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  property equals the results of the subtraction operation.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Subtract_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlInt64.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  representing the value of this .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlInt64.ToString
    /**
    Converts this instance of  to .

    - Returns: A  representing the value of this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 Xor(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)
    /**
    Performs a bitwise exclusive-OR operation on the supplied parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the bitwise XOR operation.

    */
    public class func Xor(x : dotnet.System.Data.SqlTypes.SqlInt64, y : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_SqlInt64__Xor_0__2__SqlInt64_SqlInt64(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlInt64.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Value()
// docid: M:System.Data.SqlTypes.SqlInt64.get_Value
    public func get_Value() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlInt64_i64__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlInt64


// type: System.Data.SqlTypes.SqlMoney
// boxed value type
    /**
    Represents a currency value ranging from -2 63 (or -922,337,203,685,477.5808) to 2 63 -1 (or +922,337,203,685,477.5807) with an accuracy to a ten-thousandth of currency unit to be stored in or retrieved from a database.

    */
public final class SqlMoney
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlMoney_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlMoney MaxValue
    /**
    Represents the maximum value that can be assigned to the  property of an instance of the  class.

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlMoney {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlMoney(hndl: System_Data_SqlTypes_SqlMoney_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlMoney MinValue
    /**
    Represents the minimum value that can be assigned to  property of an instance of the  class.

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlMoney {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlMoney(hndl: System_Data_SqlTypes_SqlMoney_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlMoney Null
    /**
    Represents a  that can be assigned to this instance of the  class.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlMoney {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlMoney(hndl: System_Data_SqlTypes_SqlMoney_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlMoney Zero
    /**
    Represents the zero value that can be assigned to the  property of an instance of the  class.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlMoney {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlMoney(hndl: System_Data_SqlTypes_SqlMoney_get_Zero());
            return __return;
        }
    }
    /**
    Returns a Boolean value that indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the monetary value of an instance of the  structure. This property is read-only.

    */
    public var Value : dotnet.System.Decimal {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Decimal)
// docid: M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter value: The monetary value to initialize.
    */
    public init(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlMoney_ctor_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Double)
// docid: M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)
    /**
    Initializes a new instance of the  class with specified double value.

    - Parameter value: The monetary value to initialize.
    */
    public init(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlMoney_ctor_0__1__f64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the specified integer value.

    - Parameter value: The monetary value to initialize.
    */
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlMoney_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64)
// docid: M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)
    /**
    Initializes a new instance of the  class with the specified long integer value.

    - Parameter value: The monetary value to initialize.
    */
    public init(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlMoney_ctor_0__1__i64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlMoney_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlMoney Add(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Calculates the sum of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  contains the sum of the two  parameters.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__Add_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlMoney) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_i32__CompareTo_0__1__SqlMoney(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlMoney Divide(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    The division operator divides the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  contains the results of the division.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__Divide_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__Equals_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if the object is an instance of  and the two are equal; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlMoney.GetHashCode
    /**
    Gets the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A  that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__GreaterThan_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__GreaterThanOrEqual_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__LessThan_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__LessThanOrEqual_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney Multiply(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    The multiplication operator calculates the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  contains the product of the multiplication.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__Multiply_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__NotEquals_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Addition(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Calculates the sum of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  contains the sum of the two  parameters.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Addition_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Division(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    The division operator divides the first  parameter by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  contains the results of the division.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Division_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__op_Equality_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_Decimal__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Explicit(System.Double)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)
    public class func op_Explicit(x : Swift.Double) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Explicit_0__1__f64(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__op_GreaterThan_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Implicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Implicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Implicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Implicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Implicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Implicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Implicit(System.Decimal)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)
    public class func op_Implicit(x : dotnet.System.Decimal) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Implicit_0__1__Decimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Implicit(System.Int64)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)
    public class func op_Implicit(x : Swift.Int64) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Implicit_0__1__i64(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__op_Inequality_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__op_LessThan_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__op_LessThanOrEqual_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Multiply(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    The multiplication operator calculates the product of the two  parameters.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure whose  contains the product of the multiplication.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Multiply_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_Subtraction(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    The subtraction operator subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure that contains the results of the subtraction.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_Subtraction_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlMoney op_UnaryNegation(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)
    /**
    The unary minus operator negates the  parameter.

    - Parameter x: The  structure to be negated.
    - Returns: A  structure whose  contains the results of the negation.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__op_UnaryNegation_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlMoney.Parse(System.String)
    /**
    Converts the  representation of a number to its  equivalent.

    - Parameter s: The  to be parsed.
    - Returns: A  equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney Subtract(System.Data.SqlTypes.SqlMoney, System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)
    /**
    The subtraction operator subtracts the second  parameter from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A new  structure that contains the results of the subtraction.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlMoney, y : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlMoney__Subtract_0__2__SqlMoney_SqlMoney(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Decimal ToDecimal()
// docid: M:System.Data.SqlTypes.SqlMoney.ToDecimal
    /**
    Converts the Value of this instance of  as a  structure.

    - Returns: A  structure whose value equals the  property of this  structure.

    */
    public func ToDecimal() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_Decimal__ToDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ToDouble()
// docid: M:System.Data.SqlTypes.SqlMoney.ToDouble
    /**
    Converts this  structure to a .

    - Returns: A double with a value equal to this  structure.

    */
    public func ToDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_f64__ToDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ToInt32()
// docid: M:System.Data.SqlTypes.SqlMoney.ToInt32
    /**
    Converts this  structure to an .

    - Returns: A 32-bit integer whose value equals the integer part of this  structure.

    */
    public func ToInt32() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_i32__ToInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ToInt64()
// docid: M:System.Data.SqlTypes.SqlMoney.ToInt64
    /**
    Converts the Value of this  structure to an .

    - Returns: A 64-bit integer whose value equals the integer part of this  structure.

    */
    public func ToInt64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_i64__ToInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: A  structure. If the value of the  structure is zero, the  structure's value will be . Otherwise, .

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  equal to the value of this .

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlMoney.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  structure whose value is a string representing the value of this .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlMoney.ToString
    /**
    Converts this instance of  to string.

    - Returns: A string whose value is the string representation of the value of this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlMoney.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Decimal get_Value()
// docid: M:System.Data.SqlTypes.SqlMoney.get_Value
    public func get_Value() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlMoney_Decimal__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
} // SqlMoney


// type: System.Data.SqlTypes.SqlNotFilledException
    /**
    The  class is not intended for use as a stand-alone component, but as a class from which other classes derive standard functionality.

    */
public final class SqlNotFilledException
    :
    dotnet.System.Data.SqlTypes.SqlTypeException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlNotFilledException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlNotFilledException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlNotFilledException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The string to display when the exception is thrown.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlNotFilledException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The string to display when the exception is thrown.
    - Parameter e: A reference to an inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, e : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlNotFilledException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SqlNotFilledException


// type: System.Data.SqlTypes.SqlNullValueException
    /**
    The exception that is thrown when the  property of a  structure is set to null.

    */
public final class SqlNullValueException
    :
    dotnet.System.Data.SqlTypes.SqlTypeException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlNullValueException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlNullValueException.#ctor
    /**
    Initializes a new instance of the  class with a system-supplied message that describes the error.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlNullValueException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified message that describes the error.

    - Parameter message: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlNullValueException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    - Parameter e: The exception that is the cause of the current exception. If the innerException parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, e : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlNullValueException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SqlNullValueException


// type: System.Data.SqlTypes.SqlSingle
// boxed value type
    /**
    Represents a floating point number within the range of -3.40E +38 through 3.40E +38 to be stored in or retrieved from a database.

    */
public final class SqlSingle
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlSingle_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Data.SqlTypes.SqlSingle MaxValue
    /**
    Represents the maximum value that can be assigned to the  property of an instance of the  class.

    */
    public class var MaxValue : dotnet.System.Data.SqlTypes.SqlSingle {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlSingle(hndl: System_Data_SqlTypes_SqlSingle_get_MaxValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlSingle MinValue
    /**
    Represents the minimum value that can be assigned to  property of an instance of the  class.

    */
    public class var MinValue : dotnet.System.Data.SqlTypes.SqlSingle {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlSingle(hndl: System_Data_SqlTypes_SqlSingle_get_MinValue());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlSingle Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlSingle {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlSingle(hndl: System_Data_SqlTypes_SqlSingle_get_Null());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlSingle Zero
    /**
    Represents the zero value that can be assigned to the  property of an instance of the  class.

    */
    public class var Zero : dotnet.System.Data.SqlTypes.SqlSingle {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlSingle(hndl: System_Data_SqlTypes_SqlSingle_get_Zero());
            return __return;
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Gets the value of this  structure. This property is read-only.

    */
    public var Value : Swift.Float {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Double)
// docid: M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)
    /**
    Initializes a new instance of the  structure using the supplied double parameter.

    - Parameter value: A double value which will be used as the  of the new  structure.
    */
    public init(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlSingle_ctor_0__1__f64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single)
// docid: M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)
    /**
    Initializes a new instance of the  structure.

    - Parameter value: A floating point number which will be used as the  of the new  structure.
    */
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlSingle_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlSingle_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlSingle Add(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Computes the sum of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the sum of the two specified  structures.

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__Add_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlSingle) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_i32__CompareTo_0__1__SqlSingle(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlSingle Divide(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Divides the first  structure by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the division.

    */
    public class func Divide(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__Divide_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__Equals_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if the object is an instance of  and the two are equal. Otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlSingle.GetHashCode
    /**
    Gets the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__GreaterThan_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__GreaterThanOrEqual_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__LessThan_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__LessThanOrEqual_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle Multiply(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Computes the product of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the product of the multiplication.

    */
    public class func Multiply(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__Multiply_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__NotEquals_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Addition(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Computes the sum of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the sum of the two specified  structures.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Addition_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Division(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Divides the first  structure by the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the division.

    */
    public class func op_Division(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Division_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two SqlSingle parameters to determine whether they are equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__op_Equality_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Single op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_f32__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is greater than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__op_GreaterThan_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of two  structures to determine whether the first is greater than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Implicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Implicit(System.Single)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)
    public class func op_Implicit(x : Swift.Float) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Implicit_0__1__f32(&__thrown, x);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether they are not equal.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__op_Inequality_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__op_LessThan_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Performs a logical comparison of the two  parameters to determine whether the first is less than or equal to the second.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__op_LessThanOrEqual_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Multiply(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Computes the product of the two specified  structures.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the product of the multiplication.

    */
    public class func op_Multiply(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Multiply_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_Subtraction(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Subtracts the second  structure from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the subtraction.

    */
    public class func op_Subtraction(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_Subtraction_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlSingle op_UnaryNegation(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)
    /**
    Negates the  of the specified  structure.

    - Parameter x: A  structure.
    - Returns: A  structure that contains the negated value.

    */
    public class func op_UnaryNegation(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__op_UnaryNegation_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle Parse(System.String)
// docid: M:System.Data.SqlTypes.SqlSingle.Parse(System.String)
    /**
    Converts the specified  to a  structure.

    - Parameter s: The  to be parsed.
    - Returns: A  equivalent to the value that is contained in the specified .

    */
    public class func Parse(s : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__Parse_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle Subtract(System.Data.SqlTypes.SqlSingle, System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)
    /**
    Subtracts the second  structure from the first.

    - Parameter x: A  structure.
    - Parameter y: A  structure.
    - Returns: A  structure that contains the results of the subtraction.

    */
    public class func Subtract(x : dotnet.System.Data.SqlTypes.SqlSingle, y : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlSingle__Subtract_0__2__SqlSingle_SqlSingle(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A  structure whose  equals the  of this  structure. If the  structure's Value is , the  structure's  will be 1. Otherwise, the  structure's  will be 0.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  equal to the value of this .

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A  equal to the value of this .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString ToSqlString()
// docid: M:System.Data.SqlTypes.SqlSingle.ToSqlString
    /**
    Converts this  structure to .

    - Returns: A  representing the value of this .

    */
    public func ToSqlString() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_SqlString__ToSqlString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlSingle.ToString
    /**
    Converts this  structure to .

    - Returns: A  object representing the value of this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlSingle.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Single get_Value()
// docid: M:System.Data.SqlTypes.SqlSingle.get_Value
    public func get_Value() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlSingle_f32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // SqlSingle


// type: System.Data.SqlTypes.SqlString
// boxed value type
    /**
    Represents a variable-length stream of characters to be stored in or retrieved from the database.  has a different underlying data structure from its corresponding .NET Framework  data type.

    */
public final class SqlString
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_IComparable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlString_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 BinarySort
    /**
    Specifies that sorts should be based on a characters numeric value instead of its alphabetical value.

    */
    public class var BinarySort : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlString_get_BinarySort();
            return __return;
        }
    }
    // static field: System.Int32 BinarySort2
    /**
    Specifies that sorts should be based on a character's numeric value instead of its alphabetical value.

    */
    public class var BinarySort2 : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlString_get_BinarySort2();
            return __return;
        }
    }
    // static field: System.Int32 IgnoreCase
    /**
    Specifies that  comparisons should ignore case.

    */
    public class var IgnoreCase : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlString_get_IgnoreCase();
            return __return;
        }
    }
    // static field: System.Int32 IgnoreKanaType
    /**
    Specifies that the string comparison must ignore the Kana type.

    */
    public class var IgnoreKanaType : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlString_get_IgnoreKanaType();
            return __return;
        }
    }
    // static field: System.Int32 IgnoreNonSpace
    /**
    Specifies that the string comparison must ignore non-space combining characters, such as diacritics.

    */
    public class var IgnoreNonSpace : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlString_get_IgnoreNonSpace();
            return __return;
        }
    }
    // static field: System.Int32 IgnoreWidth
    /**
    Specifies that the string comparison must ignore the character width.

    */
    public class var IgnoreWidth : Swift.Int32 {
        get {
        let __return = System_Data_SqlTypes_SqlString_get_IgnoreWidth();
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.SqlString Null
    /**
    Represents a  that can be assigned to this instance of the  structure.

    */
    public class var Null : dotnet.System.Data.SqlTypes.SqlString {
        get {
        let __return = dotnet.System.Data.SqlTypes.SqlString(hndl: System_Data_SqlTypes_SqlString_get_Null());
            return __return;
        }
    }
    /**
    Gets the  object that defines how string comparisons should be performed for this  structure.

    */
    public var CompareInfo : dotnet.System.Globalization.CompareInfo {
        get {
            return try! get_CompareInfo();
        }
    }
    /**
    Gets the  structure that represents information about the culture of this  object.

    */
    public var CultureInfo : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_CultureInfo();
        }
    }
    /**
    Indicates whether this  structure is null.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Specifies the geographical locale and language for the  structure.

    */
    public var LCID : Swift.Int32 {
        get {
            return try! get_LCID();
        }
    }
    /**
    A combination of one or more of the  enumeration values that represent the way in which this  should be compared to other  structures.

    */
    public var SqlCompareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions {
        get {
            return try! get_SqlCompareOptions();
        }
    }
    /**
    Gets the string that is stored in this  structure. This property is read-only.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[])
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])
    /**
    Initializes a new instance of the  structure using the specified locale id, compare options, and data.

    - Parameter lcid: Specifies the geographical locale and language for the new  structure.
    - Parameter compareOptions: Specifies the compare options for the new  structure.
    - Parameter data: The data array to store.
    */
    public init(lcid : Swift.Int32, compareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions, data : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__3__i32_SqlCompareOptions_u8Array(&__thrown, lcid, compareOptions.get_value(), data.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[], bool)
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter lcid: Specifies the geographical locale and language for the new  structure.
    - Parameter compareOptions: Specifies the compare options for the new  structure.
    - Parameter data: The data array to store.
    - Parameter fUnicode: 
         if Unicode encoded. Otherwise, .
    */
    public init(lcid : Swift.Int32, compareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions, data : dotnet.System_Arr<Swift.UInt8>, fUnicode : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__4__i32_SqlCompareOptions_u8Array_bool(&__thrown, lcid, compareOptions.get_value(), data.get_handle(), Swift.Int32(fUnicode ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class.

    - Parameter lcid: Specifies the geographical locale and language for the new  structure.
    - Parameter compareOptions: Specifies the compare options for the new  structure.
    - Parameter data: The data array to store.
    - Parameter index: The starting index within the array.
    - Parameter count: The number of characters from index to copy.
    */
    public init(lcid : Swift.Int32, compareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions, data : Optional<dotnet.System_Arr<Swift.UInt8>>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__5__i32_SqlCompareOptions_u8Array_i32_i32(&__thrown, lcid, compareOptions.get_value(), (data?.get_handle()), index, count);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[], System.Int32, System.Int32, bool)
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter lcid: Specifies the geographical locale and language for the new  structure.
    - Parameter compareOptions: Specifies the compare options for the new  structure.
    - Parameter data: The data array to store.
    - Parameter index: The starting index within the array.
    - Parameter count: The number of characters from index to copy.
    - Parameter fUnicode: 
         if Unicode encoded. Otherwise, .
    */
    public init(lcid : Swift.Int32, compareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions, data : Optional<dotnet.System_Arr<Swift.UInt8>>, index : Swift.Int32, count : Swift.Int32, fUnicode : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__6__i32_SqlCompareOptions_u8Array_i32_i32_bool(&__thrown, lcid, compareOptions.get_value(), (data?.get_handle()), index, count, Swift.Int32(fUnicode ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.String)
    /**
    Initializes a new instance of the  structure using the specified string.

    - Parameter data: The string to store.
    */
    public init(data : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__1__String(&__thrown, data?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32)
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)
    /**
    Initializes a new instance of the  structure using the specified string and locale id values.

    - Parameter data: The string to store.
    - Parameter lcid: Specifies the geographical locale and language for the new  structure.
    */
    public init(data : Optional<dotnet.System.String>, lcid : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__2__String_i32(&__thrown, data?.get_handle() ?? nil, lcid);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32, System.Data.SqlTypes.SqlCompareOptions)
// docid: M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)
    /**
    Initializes a new instance of the  structure using the specified string, locale id, and compare option values.

    - Parameter data: The string to store.
    - Parameter lcid: Specifies the geographical locale and language for the new  structure.
    - Parameter compareOptions: Specifies the compare options for the new  structure.
    */
    public init(data : Optional<dotnet.System.String>, lcid : Swift.Int32, compareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlString_ctor_0__3__String_i32_SqlCompareOptions(&__thrown, data?.get_handle() ?? nil, lcid, compareOptions.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Data_SqlTypes_SqlString_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Data.SqlTypes.SqlString Add(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Concatenates two specified  values to create a new  structure.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is the concatenated value of  and .

    */
    public class func Add(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__Add_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlString Clone()
// docid: M:System.Data.SqlTypes.SqlString.Clone
    /**
    Creates a copy of this  object.

    - Returns: A new  object in which all property values are the same as the original.

    */
    public func Clone() throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.Globalization.CompareOptions CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)
// docid: M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)
    /**
    Gets the  enumeration equivalent of the specified  value.

    - Parameter compareOptions: A  value that describes the comparison options for this  structure.
    - Returns: A  value that corresponds to the  for this  structure.

    */
    public class func CompareOptionsFromSqlCompareOptions(compareOptions : dotnet.System.Data.SqlTypes.SqlCompareOptions) throws -> dotnet.System.Globalization.CompareOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_CompareOptions__CompareOptionsFromSqlCompareOptions_0__1__SqlCompareOptions(&__thrown, compareOptions.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CompareOptions(val: __return);
        }
    }
    // System.Int32 CompareTo(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)
    /**
    Compares this  instance to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic).

    */
    public func CompareTo(value : dotnet.System.Data.SqlTypes.SqlString) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_i32__CompareTo_0__1__SqlString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)
    /**
    Compares this  object to the supplied  and returns an indication of their relative values.

    - Parameter value: The  to be compared.
    - Returns: A signed number that indicates the relative values of the instance and the object.  
  
  Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object  
  
 -or-  
  
 The object is a null reference ( in Visual Basic)

    */
    public func CompareTo(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Data.SqlTypes.SqlString Concat(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Concatenates the two specified  structures.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that contains the newly concatenated value representing the contents of the two  parameters.

    */
    public class func Concat(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__Concat_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether they are equal.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: 
         if the two values are equal. Otherwise, . If either instance is null, then the  will be null.

    */
    public class func Equals(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__Equals_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Data.SqlTypes.SqlString.Equals(System.Object)
    /**
    Compares the supplied object parameter to the  property of the  object.

    - Parameter value: The object to be compared.
    - Returns: 
         if the object is an instance of  and the two are equal; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Data.SqlTypes.SqlString.GetHashCode
    /**
    Gets the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] GetNonUnicodeBytes()
// docid: M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes
    /**
    Gets an array of bytes, that contains the contents of the  in ANSI format.

    - Returns: An byte array, that contains the contents of the  in ANSI format.

    */
    public func GetNonUnicodeBytes() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_u8Array__GetNonUnicodeBytes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] GetUnicodeBytes()
// docid: M:System.Data.SqlTypes.SqlString.GetUnicodeBytes
    /**
    Gets an array of bytes, that contains the contents of the  in Unicode format.

    - Returns: An byte array, that contains the contents of the  in Unicode format.

    */
    public func GetUnicodeBytes() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_u8Array__GetUnicodeBytes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: A .
    - Returns: A  value that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is greater than the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThan(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__GreaterThan_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is greater than or equal to the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__GreaterThanOrEqual_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is less than the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThan(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__LessThan_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is less than or equal to the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__LessThanOrEqual_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether they are not equal.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func NotEquals(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__NotEquals_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Addition(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Concatenates the two specified  structures.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that contains the newly concatenated value representing the contents of the two  parameters.

    */
    public class func op_Addition(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Addition_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether they are equal.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the two instances are equal or  if the two instances are not equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Equality(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__op_Equality_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlBoolean)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlBoolean) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlBoolean(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlByte)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlByte) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlByte(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlDateTime)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDateTime) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlDateTime(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlDecimal)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDecimal) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlDecimal(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlDouble)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlDouble) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlDouble(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlGuid)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlGuid) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlGuid(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlInt16)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt16) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlInt16(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlInt32)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt32) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlInt32(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlInt64)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlInt64) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlInt64(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlMoney)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlMoney) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlMoney(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Explicit(System.Data.SqlTypes.SqlSingle)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlSingle) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Explicit_0__1__SqlSingle(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.String op_Explicit(System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)
    public class func op_Explicit(x : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_String__op_Explicit_0__1__SqlString(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is greater than the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is greater than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThan(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__op_GreaterThan_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is greater than or equal to the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is greater than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_GreaterThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__op_GreaterThanOrEqual_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlString op_Implicit(System.String)
// docid: M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)
    public class func op_Implicit(x : dotnet.System.String) throws -> dotnet.System.Data.SqlTypes.SqlString {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlString__op_Implicit_0__1__String(&__thrown, x.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_Inequality(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether they are not equal.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the two instances are not equal or  if the two instances are equal. If either instance of  is null, the  of the  will be .

    */
    public class func op_Inequality(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__op_Inequality_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is less than the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is less than the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThan(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__op_LessThan_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlBoolean op_LessThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)
// docid: M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)
    /**
    Performs a logical comparison of the two  operands to determine whether the first is less than or equal to the second.

    - Parameter x: A .
    - Parameter y: A .
    - Returns: A  that is  if the first instance is less than or equal to the second instance. Otherwise, . If either instance of  is null, the  of the  will be .

    */
    public class func op_LessThanOrEqual(x : dotnet.System.Data.SqlTypes.SqlString, y : dotnet.System.Data.SqlTypes.SqlString) throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__op_LessThanOrEqual_0__2__SqlString_SqlString(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlBoolean ToSqlBoolean()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlBoolean
    /**
    Converts this  structure to .

    - Returns: 
         if the  is non-zero;  if zero; otherwise Null.

    */
    public func ToSqlBoolean() throws -> dotnet.System.Data.SqlTypes.SqlBoolean {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlBoolean__ToSqlBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlBoolean(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlByte ToSqlByte()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlByte
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  equals the number represented by this  structure.

    */
    public func ToSqlByte() throws -> dotnet.System.Data.SqlTypes.SqlByte {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlByte__ToSqlByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlByte(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDateTime ToSqlDateTime()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlDateTime
    /**
    Converts this  structure to .

    - Returns: A new  structure that contains the date value represented by this .

    */
    public func ToSqlDateTime() throws -> dotnet.System.Data.SqlTypes.SqlDateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlDateTime__ToSqlDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDateTime(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDecimal ToSqlDecimal()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlDecimal
    /**
    Converts this  structure to .

    - Returns: A new  that contains the value of this .

    */
    public func ToSqlDecimal() throws -> dotnet.System.Data.SqlTypes.SqlDecimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlDecimal__ToSqlDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDecimal(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlDouble ToSqlDouble()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlDouble
    /**
    Converts this  structure to .

    - Returns: A new  that is equal to the numeric value of this .

    */
    public func ToSqlDouble() throws -> dotnet.System.Data.SqlTypes.SqlDouble {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlDouble__ToSqlDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlDouble(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlGuid ToSqlGuid()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlGuid
    /**
    Converts this  structure to .

    - Returns: A new  structure whose  is the  represented by this  structure.

    */
    public func ToSqlGuid() throws -> dotnet.System.Data.SqlTypes.SqlGuid {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlGuid__ToSqlGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlGuid(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt16 ToSqlInt16()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlInt16
    /**
    Converts this  structure to .

    - Returns: A new  that is equal to the numeric value of this .

    */
    public func ToSqlInt16() throws -> dotnet.System.Data.SqlTypes.SqlInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlInt16__ToSqlInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt16(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt32 ToSqlInt32()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlInt32
    /**
    Converts this  structure to .

    - Returns: A new  that is equal to the numeric value of this .

    */
    public func ToSqlInt32() throws -> dotnet.System.Data.SqlTypes.SqlInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlInt32__ToSqlInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt32(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlInt64 ToSqlInt64()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlInt64
    /**
    Converts this  structure to .

    - Returns: A new  that is equal to the numeric value of this .

    */
    public func ToSqlInt64() throws -> dotnet.System.Data.SqlTypes.SqlInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlInt64__ToSqlInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlInt64(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlMoney ToSqlMoney()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlMoney
    /**
    Converts this  structure to .

    - Returns: A new  that is equal to the numeric value of this .

    */
    public func ToSqlMoney() throws -> dotnet.System.Data.SqlTypes.SqlMoney {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlMoney__ToSqlMoney_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlMoney(hndl : __return);
        }
    }
    // System.Data.SqlTypes.SqlSingle ToSqlSingle()
// docid: M:System.Data.SqlTypes.SqlString.ToSqlSingle
    /**
    Converts this  structure to .

    - Returns: A new  that is equal to the numeric value of this .

    */
    public func ToSqlSingle() throws -> dotnet.System.Data.SqlTypes.SqlSingle {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlSingle__ToSqlSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlSingle(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Data.SqlTypes.SqlString.ToString
    /**
    Converts a  object to a .

    - Returns: A  with the same value as this  structure.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Globalization.CompareInfo get_CompareInfo()
// docid: M:System.Data.SqlTypes.SqlString.get_CompareInfo
    public func get_CompareInfo() throws -> dotnet.System.Globalization.CompareInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_CompareInfo__get_CompareInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CompareInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_CultureInfo()
// docid: M:System.Data.SqlTypes.SqlString.get_CultureInfo
    public func get_CultureInfo() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_CultureInfo__get_CultureInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlString.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LCID()
// docid: M:System.Data.SqlTypes.SqlString.get_LCID
    public func get_LCID() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_i32__get_LCID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlCompareOptions get_SqlCompareOptions()
// docid: M:System.Data.SqlTypes.SqlString.get_SqlCompareOptions
    public func get_SqlCompareOptions() throws -> dotnet.System.Data.SqlTypes.SqlCompareOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_SqlCompareOptions__get_SqlCompareOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlCompareOptions(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Data.SqlTypes.SqlString.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // SqlString


// type: System.Data.SqlTypes.SqlTruncateException
    /**
    The exception that is thrown when you set a value into a  structure would truncate that value.

    */
public final class SqlTruncateException
    :
    dotnet.System.Data.SqlTypes.SqlTypeException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlTruncateException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlTruncateException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlTruncateException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlTruncateException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the .

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter e: A reference to an inner .
    */
    public override init(message : Optional<dotnet.System.String>, e : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlTruncateException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SqlTruncateException


// type: System.Data.SqlTypes.SqlTypeException
    /**
    The base exception class for the .

    */
open class SqlTypeException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlTypeException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlTypeException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlTypeException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlTypeException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    - Parameter e: The exception that is the cause of the current exception. If the innerException parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, e : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlTypeException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SqlTypeException


// type: System.Data.SqlTypes.SqlXml
    /**
    Represents XML data stored in or retrieved from a server.

    */
public final class SqlXml
    :
    dotnet.System.Object,
    System_Data_SqlTypes_INullable,
    System_Xml_Serialization_IXmlSerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_SqlXml_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Data.SqlTypes.SqlXml.#ctor
    /**
    Creates a new  instance.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlXml_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream)
// docid: M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)
    /**
    Creates a new  instance, supplying the XML value from the supplied -derived instance.

    - Parameter value: A -derived instance (such as ) from which to load the  instance's Xml content.
    */
    public init(value : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlXml_ctor_0__1__Stream(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlReader)
// docid: M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)
    /**
    Creates a new  instance and associates it with the content of the supplied .

    - Parameter value: An -derived class instance to be used as the value of the new  instance.
    */
    public init(value : Optional<dotnet.System.Xml.XmlReader>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Data_SqlTypes_SqlXml_ctor_0__1__XmlReader(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlReader CreateReader()
// docid: M:System.Data.SqlTypes.SqlXml.CreateReader
    /**
    Gets the value of the XML content of this  as a .

    - Returns: A -derived instance that contains the XML content. The actual type may vary (for example, the return value might be ) depending on how the information is represented internally, on the server.

    */
    public func CreateReader() throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlXml_XmlReader__CreateReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)
    /**
    Returns the XML Schema definition language (XSD) of the specified .

    - Parameter schemaSet: An .
    - Returns: A string that indicates the XSD of the specified .

    */
    public class func GetXsdType(schemaSet : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlXml_XmlQualifiedName__GetXsdType_0__1__XmlSchemaSet(&__thrown, schemaSet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNull()
// docid: M:System.Data.SqlTypes.SqlXml.get_IsNull
    public func get_IsNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlXml_bool__get_IsNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Data.SqlTypes.SqlXml get_Null()
// docid: M:System.Data.SqlTypes.SqlXml.get_Null
    public class func get_Null() throws -> dotnet.System.Data.SqlTypes.SqlXml {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlXml_SqlXml__get_Null_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.SqlTypes.SqlXml(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Data.SqlTypes.SqlXml.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Data_SqlTypes_SqlXml_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Indicates whether this instance represents a null  value.

    */
    public var IsNull : Bool {
        get {
            return try! get_IsNull();
        }
    }
    /**
    Represents a null instance of the  type.

    */
    public static var Null : dotnet.System.Data.SqlTypes.SqlXml {
        get {
            return try! get_Null();
        }
    }
    /**
    Gets the string representation of the XML content of this  instance.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // SqlXml


// type: System.Data.SqlTypes.StorageState
    /**
    The  enumeration is not intended for use as a stand-alone component, but as an enumeration from which other classes derive standard functionality.

    */
public struct StorageState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Data_SqlTypes_StorageState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Data.SqlTypes.StorageState Buffer
    /**
    Buffer size.

    */
    public static var Buffer : dotnet.System.Data.SqlTypes.StorageState {
        get {
        let __return = dotnet.System.Data.SqlTypes.StorageState(val: System_Data_SqlTypes_StorageState_get_Buffer());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.StorageState Stream
    /**
    Stream.

    */
    public static var Stream : dotnet.System.Data.SqlTypes.StorageState {
        get {
        let __return = dotnet.System.Data.SqlTypes.StorageState(val: System_Data_SqlTypes_StorageState_get_Stream());
            return __return;
        }
    }
    // static field: System.Data.SqlTypes.StorageState UnmanagedBuffer
    /**
    Unmanaged buffer.

    */
    public static var UnmanagedBuffer : dotnet.System.Data.SqlTypes.StorageState {
        get {
        let __return = dotnet.System.Data.SqlTypes.StorageState(val: System_Data_SqlTypes_StorageState_get_UnmanagedBuffer());
            return __return;
        }
    }
} // StorageState


}


// System.Xml
extension System.Xml {
// type: System.Xml.XmlDataDocument
    /**
    Allows structured data to be stored, retrieved, and manipulated through a relational .

    */
open class XmlDataDocument
    :
    dotnet.System.Xml.XmlDocument
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDataDocument_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlDataDocument.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDataDocument_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Data.DataSet)
// docid: M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter dataset: The  to load into .
    */
    public init(dataset : dotnet.System.Data.DataSet) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDataDocument_ctor_0__1__DataSet(&__thrown, dataset.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)
    /**
    Creates a duplicate of the current node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlElement CreateElement(System.String, System.String, System.String)
// docid: M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
    /**
    Creates an element with the specified ,  , and .

    - Parameter prefix: The prefix of the new element. If String.Empty or , there is no prefix.
    - Parameter localName: The local name of the new element.
    - Parameter namespaceURI: The namespace Uniform Resource Identifier (URI) of the new element. If String.Empty or , there is no namespaceURI.
    - Returns: A new .

    */
    open override func CreateElement(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_XmlElement__CreateElement_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlElement(hndl : __return);
        }
    }
    // System.Xml.XmlEntityReference CreateEntityReference(System.String)
// docid: M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)
    /**
    Creates an  with the specified name.

    - Parameter name: The name of the entity reference.
    - Returns: An  with the specified name.

    */
    open override func CreateEntityReference(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlEntityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_XmlEntityReference__CreateEntityReference_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlEntityReference(hndl : __return);
        }
    }
    // System.Xml.XmlElement GetElementById(System.String)
// docid: M:System.Xml.XmlDataDocument.GetElementById(System.String)
    /**
    Gets the  with the specified ID. This method is not supported by the  class. Calling this method throws an exception.

    - Parameter elemId: The attribute ID to match.
    - Returns: An  with the specified ID.

    */
    open func GetElementById(elemId : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_XmlElement__GetElementById_0__1__String(&__thrown, self.get_handle(), elemId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlElement GetElementFromRow(System.Data.DataRow)
// docid: M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
    /**
    Retrieves the  associated with the specified .

    - Parameter r: The  whose associated  you want to retrieve.
    - Returns: The  containing a representation of the specified .

    */
    open func GetElementFromRow(r : dotnet.System.Data.DataRow) throws -> dotnet.System.Xml.XmlElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_XmlElement__GetElementFromRow_0__1__DataRow(&__thrown, self.get_handle(), r.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlElement(hndl : __return);
        }
    }
    // System.Xml.XmlNodeList GetElementsByTagName(System.String)
// docid: M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
    /**
    Returns an  containing a list of all descendant elements that match the specified .

    - Parameter name: The qualified name to match. It is matched against the  property of the matching node. The special value "(ASTERISK)" matches all tags.
    - Returns: An  containing a list of all matching nodes.

    */
    open override func GetElementsByTagName(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlNodeList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_XmlNodeList__GetElementsByTagName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeList(hndl : __return);
        }
    }
    // System.Data.DataRow GetRowFromElement(System.Xml.XmlElement)
// docid: M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
    /**
    Retrieves the  associated with the specified .

    - Parameter e: The  whose associated  you want to retrieve.
    - Returns: The  containing a representation of the ;  if there is no  associated with the .

    */
    open func GetRowFromElement(e : Optional<dotnet.System.Xml.XmlElement>) throws -> Optional<dotnet.System.Data.DataRow> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_DataRow__GetRowFromElement_0__1__XmlElement(&__thrown, self.get_handle(), e?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Data.DataRow(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Load(System.IO.Stream)
// docid: M:System.Xml.XmlDataDocument.Load(System.IO.Stream)
    /**
    Loads the  from the specified stream.

    - Parameter inStream: The stream containing the XML document to load.
    */
    open override func Load(inStream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDataDocument_void__Load_0__1__Stream(&__thrown, self.get_handle(), inStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.IO.TextReader)
// docid: M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)
    /**
    Loads the  from the specified .

    - Parameter txtReader: The  used to feed the XML data into the document.
    */
    open override func Load(txtReader : dotnet.System.IO.TextReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDataDocument_void__Load_0__1__TextReader(&__thrown, self.get_handle(), txtReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.String)
// docid: M:System.Xml.XmlDataDocument.Load(System.String)
    /**
    Loads the  using the specified URL.

    - Parameter filename: The URL of the file containing the XML document to load.
    */
    open override func Load(filename : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDataDocument_void__Load_0__1__String(&__thrown, self.get_handle(), filename.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XmlReader)
// docid: M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
    /**
    Loads the  from the specified .

    - Parameter reader: The  containing the XML document to load.
    */
    open override func Load(reader : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDataDocument_void__Load_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Data.DataSet get_DataSet()
// docid: M:System.Xml.XmlDataDocument.get_DataSet
    open func get_DataSet() throws -> dotnet.System.Data.DataSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDataDocument_DataSet__get_DataSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Data.DataSet(hndl : __return);
        }
    }
    /**
    Gets a  that provides a relational representation of the data in the .

    */
    open var DataSet : dotnet.System.Data.DataSet {
        get {
            return try! get_DataSet();
        }
    }
} // XmlDataDocument


}


public protocol System_Data_Common_IDbColumnSchemaGenerator
    :
    SGBridgeGetHandle
{
}

public protocol System_Data_IColumnMapping
    :
    SGBridgeGetHandle
{
}

public protocol System_Data_IColumnMappingCollection
    :
    System_Collections_IList
{
}

public protocol System_Data_IDataAdapter
    :
    SGBridgeGetHandle
{
}

public protocol System_Data_IDataParameter
    :
    SGBridgeGetHandle
{
}

public protocol System_Data_IDataParameterCollection
    :
    System_Collections_IList
{
}

public protocol System_Data_IDataReader
    :
    System_Data_IDataRecord,
    System_IDisposable
{
}

public protocol System_Data_IDataRecord
    :
    SGBridgeGetHandle
{
}

public protocol System_Data_IDbCommand
    :
    System_IDisposable
{
}

public protocol System_Data_IDbConnection
    :
    System_IDisposable
{
}

public protocol System_Data_IDbDataAdapter
    :
    System_Data_IDataAdapter
{
}

public protocol System_Data_IDbDataParameter
    :
    System_Data_IDataParameter
{
}

public protocol System_Data_IDbTransaction
    :
    System_IDisposable
{
}

public protocol System_Data_ITableMapping
    :
    SGBridgeGetHandle
{
}

public protocol System_Data_ITableMappingCollection
    :
    System_Collections_IList
{
}

public protocol System_Data_SqlTypes_INullable
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD bool CanGetColumnSchema(System.Data.Common.DbDataReader)
extension dotnet.System.Data.Common.DbDataReader {
    public func CanGetColumnSchema() throws -> Bool {
        return try dotnet.System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(reader: self);
    }
}

// EXTENSION METHOD System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn> GetColumnSchema(System.Data.Common.DbDataReader)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetColumnSchema() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Data.Common.DbColumn> {
        return try dotnet.System.Data.Common.DbDataReaderExtensions.GetColumnSchema(reader: self);
    }
}

// EXTENSION METHOD bool GetBoolean(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetBoolean(name : dotnet.System.String) throws -> Bool {
        return try dotnet.System.Data.DataReaderExtensions.GetBoolean(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Byte GetByte(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetByte(name : dotnet.System.String) throws -> Swift.UInt8 {
        return try dotnet.System.Data.DataReaderExtensions.GetByte(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Int64 GetBytes(System.Data.Common.DbDataReader, System.String, System.Int64, System.Byte[], System.Int32, System.Int32)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetBytes(name : dotnet.System.String, dataOffset : Swift.Int64, buffer : dotnet.System_Arr<Swift.UInt8>, bufferOffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        return try dotnet.System.Data.DataReaderExtensions.GetBytes(reader: self, name: name, dataOffset: dataOffset, buffer: buffer, bufferOffset: bufferOffset, length: length);
    }
}

// EXTENSION METHOD System.Char GetChar(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetChar(name : dotnet.System.String) throws -> dotnet.System.Char {
        return try dotnet.System.Data.DataReaderExtensions.GetChar(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Int64 GetChars(System.Data.Common.DbDataReader, System.String, System.Int64, System.Char[], System.Int32, System.Int32)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetChars(name : dotnet.System.String, dataOffset : Swift.Int64, buffer : dotnet.System_Arr<dotnet.System.Char>, bufferOffset : Swift.Int32, length : Swift.Int32) throws -> Swift.Int64 {
        return try dotnet.System.Data.DataReaderExtensions.GetChars(reader: self, name: name, dataOffset: dataOffset, buffer: buffer, bufferOffset: bufferOffset, length: length);
    }
}

// EXTENSION METHOD System.Data.Common.DbDataReader GetData(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetData(name : dotnet.System.String) throws -> dotnet.System.Data.Common.DbDataReader {
        return try dotnet.System.Data.DataReaderExtensions.GetData(reader: self, name: name);
    }
}

// EXTENSION METHOD System.String GetDataTypeName(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetDataTypeName(name : dotnet.System.String) throws -> dotnet.System.String {
        return try dotnet.System.Data.DataReaderExtensions.GetDataTypeName(reader: self, name: name);
    }
}

// EXTENSION METHOD System.DateTime GetDateTime(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetDateTime(name : dotnet.System.String) throws -> dotnet.System.DateTime {
        return try dotnet.System.Data.DataReaderExtensions.GetDateTime(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Decimal GetDecimal(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetDecimal(name : dotnet.System.String) throws -> dotnet.System.Decimal {
        return try dotnet.System.Data.DataReaderExtensions.GetDecimal(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Double GetDouble(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetDouble(name : dotnet.System.String) throws -> Swift.Double {
        return try dotnet.System.Data.DataReaderExtensions.GetDouble(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Type GetFieldType(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetFieldType(name : dotnet.System.String) throws -> dotnet.System.Type_ {
        return try dotnet.System.Data.DataReaderExtensions.GetFieldType(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(System.Data.Common.DbDataReader, System.String, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(System.Data.Common.DbDataReader, System.String, System.Threading.CancellationToken)

// EXTENSION METHOD T GetFieldValue<T>(System.Data.Common.DbDataReader, System.String)
// TODO COPE extension method (unused generic param) T GetFieldValue<T>(System.Data.Common.DbDataReader, System.String)

// EXTENSION METHOD System.Single GetFloat(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetFloat(name : dotnet.System.String) throws -> Swift.Float {
        return try dotnet.System.Data.DataReaderExtensions.GetFloat(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Guid GetGuid(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetGuid(name : dotnet.System.String) throws -> dotnet.System.Guid {
        return try dotnet.System.Data.DataReaderExtensions.GetGuid(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Int16 GetInt16(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetInt16(name : dotnet.System.String) throws -> Swift.Int16 {
        return try dotnet.System.Data.DataReaderExtensions.GetInt16(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Int32 GetInt32(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetInt32(name : dotnet.System.String) throws -> Swift.Int32 {
        return try dotnet.System.Data.DataReaderExtensions.GetInt32(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Int64 GetInt64(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetInt64(name : dotnet.System.String) throws -> Swift.Int64 {
        return try dotnet.System.Data.DataReaderExtensions.GetInt64(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Type GetProviderSpecificFieldType(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetProviderSpecificFieldType(name : dotnet.System.String) throws -> dotnet.System.Type_ {
        return try dotnet.System.Data.DataReaderExtensions.GetProviderSpecificFieldType(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Object GetProviderSpecificValue(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetProviderSpecificValue(name : dotnet.System.String) throws -> dotnet.System.Object {
        return try dotnet.System.Data.DataReaderExtensions.GetProviderSpecificValue(reader: self, name: name);
    }
}

// EXTENSION METHOD System.IO.Stream GetStream(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetStream(name : dotnet.System.String) throws -> dotnet.System.IO.Stream {
        return try dotnet.System.Data.DataReaderExtensions.GetStream(reader: self, name: name);
    }
}

// EXTENSION METHOD System.String GetString(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetString(name : dotnet.System.String) throws -> dotnet.System.String {
        return try dotnet.System.Data.DataReaderExtensions.GetString(reader: self, name: name);
    }
}

// EXTENSION METHOD System.IO.TextReader GetTextReader(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetTextReader(name : dotnet.System.String) throws -> dotnet.System.IO.TextReader {
        return try dotnet.System.Data.DataReaderExtensions.GetTextReader(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Object GetValue(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func GetValue(name : dotnet.System.String) throws -> dotnet.System.Object {
        return try dotnet.System.Data.DataReaderExtensions.GetValue(reader: self, name: name);
    }
}

// EXTENSION METHOD bool IsDBNull(System.Data.Common.DbDataReader, System.String)
extension dotnet.System.Data.Common.DbDataReader {
    public func IsDBNull(name : dotnet.System.String) throws -> Bool {
        return try dotnet.System.Data.DataReaderExtensions.IsDBNull(reader: self, name: name);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<bool> IsDBNullAsync(System.Data.Common.DbDataReader, System.String, System.Threading.CancellationToken)
extension dotnet.System.Data.Common.DbDataReader {
    public func IsDBNullAsync(name : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        return try dotnet.System.Data.DataReaderExtensions.IsDBNullAsync(reader: self, name: name, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD T Field<T>(System.Data.DataRow, System.Data.DataColumn)
// TODO COPE extension method (unused generic param) T Field<T>(System.Data.DataRow, System.Data.DataColumn)

// EXTENSION METHOD T Field<T>(System.Data.DataRow, System.Data.DataColumn, System.Data.DataRowVersion)
// TODO COPE extension method (unused generic param) T Field<T>(System.Data.DataRow, System.Data.DataColumn, System.Data.DataRowVersion)

// EXTENSION METHOD T Field<T>(System.Data.DataRow, System.Int32)
// TODO COPE extension method (unused generic param) T Field<T>(System.Data.DataRow, System.Int32)

// EXTENSION METHOD T Field<T>(System.Data.DataRow, System.Int32, System.Data.DataRowVersion)
// TODO COPE extension method (unused generic param) T Field<T>(System.Data.DataRow, System.Int32, System.Data.DataRowVersion)

// EXTENSION METHOD T Field<T>(System.Data.DataRow, System.String)
// TODO COPE extension method (unused generic param) T Field<T>(System.Data.DataRow, System.String)

// EXTENSION METHOD T Field<T>(System.Data.DataRow, System.String, System.Data.DataRowVersion)
// TODO COPE extension method (unused generic param) T Field<T>(System.Data.DataRow, System.String, System.Data.DataRowVersion)

// EXTENSION METHOD void SetField<T>(System.Data.DataRow, System.Data.DataColumn, T)
extension dotnet.System.Data.DataRow {
    public func SetField<UT : SGBridgeGenericValue>(column : dotnet.System.Data.DataColumn, value : UT) throws {
        try dotnet.System.Data.DataRowExtensions.SetField(row: self, column: column, value: value);
    }
}

// EXTENSION METHOD void SetField<T>(System.Data.DataRow, System.Int32, T)
extension dotnet.System.Data.DataRow {
    public func SetField<UT : SGBridgeGenericValue>(columnIndex : Swift.Int32, value : UT) throws {
        try dotnet.System.Data.DataRowExtensions.SetField(row: self, columnIndex: columnIndex, value: value);
    }
}

// EXTENSION METHOD void SetField<T>(System.Data.DataRow, System.String, T)
extension dotnet.System.Data.DataRow {
    public func SetField<UT : SGBridgeGenericValue>(columnName : dotnet.System.String, value : UT) throws {
        try dotnet.System.Data.DataRowExtensions.SetField(row: self, columnName: columnName, value: value);
    }
}

// EXTENSION METHOD System.Data.DataView AsDataView(System.Data.DataTable)
extension dotnet.System.Data.DataTable {
    public func AsDataView() throws -> dotnet.System.Data.DataView {
        return try dotnet.System.Data.DataTableExtensions.AsDataView(table: self);
    }
}

// EXTENSION METHOD System.Data.DataView AsDataView<T>(System.Data.EnumerableRowCollection<T>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func AsDataView() throws -> dotnet.System.Data.DataView {
        return try dotnet.System.Data.DataTableExtensions.AsDataView(source: self);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<System.Data.DataRow> AsEnumerable(System.Data.DataTable)
extension dotnet.System.Data.DataTable {
    public func AsEnumerable() throws -> dotnet.System.Data.EnumerableRowCollection_1<dotnet.System.Data.DataRow> {
        return try dotnet.System.Data.DataTableExtensions.AsEnumerable(source: self);
    }
}

// EXTENSION METHOD System.Data.DataTable CopyToDataTable<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func CopyToDataTable() throws -> dotnet.System.Data.DataTable {
        return try dotnet.System.Data.DataTableExtensions.CopyToDataTable(source: self);
    }
}

// EXTENSION METHOD void CopyToDataTable<T>(System.Collections.Generic.IEnumerable<T>, System.Data.DataTable, System.Data.LoadOption)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func CopyToDataTable(table : dotnet.System.Data.DataTable, options : dotnet.System.Data.LoadOption) throws {
        try dotnet.System.Data.DataTableExtensions.CopyToDataTable(source: self, table: table, options: options);
    }
}

// EXTENSION METHOD void CopyToDataTable<T>(System.Collections.Generic.IEnumerable<T>, System.Data.DataTable, System.Data.LoadOption, System.Data.FillErrorEventHandler)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func CopyToDataTable(table : dotnet.System.Data.DataTable, options : dotnet.System.Data.LoadOption, errorHandler : Optional<dotnet.System.Data.FillErrorEventHandler>) throws {
        try dotnet.System.Data.DataTableExtensions.CopyToDataTable(source: self, table: table, options: options, errorHandler: errorHandler);
    }
    // delegate closure overload
    public func CopyToDataTable(table : dotnet.System.Data.DataTable, options : dotnet.System.Data.LoadOption, errorHandler : @escaping (dotnet.System.Object, dotnet.System.Data.FillErrorEventArgs) throws -> Void) throws {
        let del_errorHandler = try dotnet.System.Data.FillErrorEventHandler(errorHandler);
        try dotnet.System.Data.DataTableExtensions.CopyToDataTable(source: self, table: table, options: options, errorHandler: del_errorHandler);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<TResult> Cast<TResult>(System.Data.EnumerableRowCollection)
// TODO COPE extension method (unused generic param) System.Data.EnumerableRowCollection<TResult> Cast<TResult>(System.Data.EnumerableRowCollection)

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.OrderBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<S> Select<TRow, S>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,S>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func Select<US : SGBridgeGenericValue>(selector : dotnet.System.Func_2<TRow,US>) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.Select(source: self, selector: selector);
    }
    // delegate closure overload
    public func Select<US : SGBridgeGenericValue>(selector : @escaping (TRow) throws -> US) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        let del_selector = try dotnet.System.Func_2<TRow,US>(selector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.Select(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> ThenByDescending<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
extension dotnet.System.Data.OrderedEnumerableRowCollection_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> ThenByDescending<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Data.OrderedEnumerableRowCollection_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> ThenBy<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>)
extension dotnet.System.Data.OrderedEnumerableRowCollection_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> ThenBy<TRow, TKey>(System.Data.OrderedEnumerableRowCollection<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Data.OrderedEnumerableRowCollection_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TRow,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TRow) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<TRow> {
        let del_keySelector = try dotnet.System.Func_2<TRow,UTKey>(keySelector);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.ThenBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<TRow> Where<TRow>(System.Data.EnumerableRowCollection<TRow>, System.Func<TRow,bool>)
extension dotnet.System.Data.EnumerableRowCollection_1 {
    public func Where(predicate : dotnet.System.Func_2<TRow,Bool>) throws -> dotnet.System.Data.EnumerableRowCollection_1<TRow> {
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.Where(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (TRow) throws -> Bool) throws -> dotnet.System.Data.EnumerableRowCollection_1<TRow> {
        let del_predicate = try dotnet.System.Func_2<TRow,Swift.Bool>(predicate);
        return try dotnet.System.Data.EnumerableRowCollectionExtensions.Where(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<TRow> AsEnumerable<TRow>(System.Data.TypedTableBase<TRow>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func AsEnumerable() throws -> dotnet.System.Data.EnumerableRowCollection_1<T> {
        return try dotnet.System.Data.TypedTableBaseExtensions.AsEnumerable(source: self);
    }
}

// EXTENSION METHOD TRow ElementAtOrDefault<TRow>(System.Data.TypedTableBase<TRow>, System.Int32)
extension dotnet.System.Data.TypedTableBase_1 {
    public func ElementAtOrDefault(index : Swift.Int32) throws -> T {
        return try dotnet.System.Data.TypedTableBaseExtensions.ElementAtOrDefault(source: self, index: index);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow, TKey>(System.Data.TypedTableBase<TRow>, System.Func<TRow,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Data.OrderedEnumerableRowCollection_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Data.TypedTableBaseExtensions.OrderBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<S> Select<TRow, S>(System.Data.TypedTableBase<TRow>, System.Func<TRow,S>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func Select<US : SGBridgeGenericValue>(selector : dotnet.System.Func_2<T,US>) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        return try dotnet.System.Data.TypedTableBaseExtensions.Select(source: self, selector: selector);
    }
    // delegate closure overload
    public func Select<US : SGBridgeGenericValue>(selector : @escaping (T) throws -> US) throws -> dotnet.System.Data.EnumerableRowCollection_1<US> {
        let del_selector = try dotnet.System.Func_2<T,US>(selector);
        return try dotnet.System.Data.TypedTableBaseExtensions.Select(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Data.EnumerableRowCollection<TRow> Where<TRow>(System.Data.TypedTableBase<TRow>, System.Func<TRow,bool>)
extension dotnet.System.Data.TypedTableBase_1 {
    public func Where(predicate : dotnet.System.Func_2<T,Bool>) throws -> dotnet.System.Data.EnumerableRowCollection_1<T> {
        return try dotnet.System.Data.TypedTableBaseExtensions.Where(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (T) throws -> Bool) throws -> dotnet.System.Data.EnumerableRowCollection_1<T> {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Data.TypedTableBaseExtensions.Where(source: self, predicate: del_predicate);
    }
}

