// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.IO
extension System.IO {
// type: System.IO.FileSystemAclExtensions
public struct FileSystemAclExtensions {
    // void Create(System.IO.DirectoryInfo, System.Security.AccessControl.DirectorySecurity)
// docid: M:System.IO.FileSystemAclExtensions.Create(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)
    /**
    Creates a new directory, ensuring it is created with the specified directory security. If the directory already exists, nothing is done.

    - Parameter directoryInfo: A directory that does not exist yet that will be created by the method.
    - Parameter directorySecurity: The access control and audit security for the directory.
    */
    public static func Create(directoryInfo : dotnet.System.IO.DirectoryInfo, directorySecurity : dotnet.System.Security.AccessControl.DirectorySecurity) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemAclExtensions_void__Create_0__2__DirectoryInfo_DirectorySecurity(&__thrown, directoryInfo.get_handle(), directorySecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.FileStream Create(System.IO.FileInfo, System.IO.FileMode, System.Security.AccessControl.FileSystemRights, System.IO.FileShare, System.Int32, System.IO.FileOptions, System.Security.AccessControl.FileSecurity)
// docid: M:System.IO.FileSystemAclExtensions.Create(System.IO.FileInfo,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
    /**
    Creates a new file stream, ensuring it is created with the specified properties and security settings.

    - Parameter fileInfo: A file that does not exist yet that will be created by the method.
    - Parameter mode: One of the enumeration values that specifies how the operating system should open a file.
    - Parameter rights: One of the enumeration values that defines the access rights to use when creating access and audit rules.
    - Parameter share: One of the enumeration values for controlling the kind of access other file stream objects can have to the same file.
    - Parameter bufferSize: The number of bytes buffered for reads and writes to the file.
    - Parameter options: One of the enumeration values that describes how to create or overwrite the file.
    - Parameter fileSecurity: An object that determines the access control and audit security for the file.
    - Returns: A file stream for the newly created file.

    */
    public static func Create(fileInfo : dotnet.System.IO.FileInfo, mode : dotnet.System.IO.FileMode, rights : dotnet.System.Security.AccessControl.FileSystemRights, share : dotnet.System.IO.FileShare, bufferSize : Swift.Int32, options : dotnet.System.IO.FileOptions, fileSecurity : dotnet.System.Security.AccessControl.FileSecurity) throws -> dotnet.System.IO.FileStream {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_FileStream__Create_0__7__FileInfo_FileMode_FileSystemRights_FileShare_i32_FileOptions_FileSecurity(&__thrown, fileInfo.get_handle(), mode.get_value(), rights.get_value(), share.get_value(), bufferSize, options.get_value(), fileSecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.FileStream(hndl : __return);
        }
    }
    // System.IO.DirectoryInfo CreateDirectory(System.Security.AccessControl.DirectorySecurity, System.String)
// docid: M:System.IO.FileSystemAclExtensions.CreateDirectory(System.Security.AccessControl.DirectorySecurity,System.String)
    /**
    Creates a directory and returns it, ensuring it is created with the specified directory security. If the directory already exists, the existing directory is returned.

    - Parameter directorySecurity: An object that determines the access control and audit security for the directory.
    - Parameter path: The path of the directory to create.
    - Returns: A directory information object representing either a created directory with the provided security properties, or the existing directory.

    */
    public static func CreateDirectory(directorySecurity : dotnet.System.Security.AccessControl.DirectorySecurity, path : dotnet.System.String) throws -> dotnet.System.IO.DirectoryInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_DirectoryInfo__CreateDirectory_0__2__DirectorySecurity_String(&__thrown, directorySecurity.get_handle(), path.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.DirectoryInfo(hndl : __return);
        }
    }
    // System.Security.AccessControl.DirectorySecurity GetAccessControl(System.IO.DirectoryInfo)
// docid: M:System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.DirectoryInfo)
    /**
    Returns the security information of a directory.

    - Parameter directoryInfo: The existing directory from which to obtain the security information.
    - Returns: The security descriptors of all the access control sections of the directory.

    */
    public static func GetAccessControl(directoryInfo : dotnet.System.IO.DirectoryInfo) throws -> dotnet.System.Security.AccessControl.DirectorySecurity {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_DirectorySecurity__GetAccessControl_0__1__DirectoryInfo(&__thrown, directoryInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.DirectorySecurity(hndl : __return);
        }
    }
    // System.Security.AccessControl.DirectorySecurity GetAccessControl(System.IO.DirectoryInfo, System.Security.AccessControl.AccessControlSections)
// docid: M:System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.DirectoryInfo,System.Security.AccessControl.AccessControlSections)
    /**
    Returns the security information of a directory.

    - Parameter directoryInfo: An existing directory from which to obtain the security information.
    - Parameter includeSections: The desired access control sections to retrieve.
    - Returns: The security descriptors of the specified access control sections of the directory.

    */
    public static func GetAccessControl(directoryInfo : dotnet.System.IO.DirectoryInfo, includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.Security.AccessControl.DirectorySecurity {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_DirectorySecurity__GetAccessControl_0__2__DirectoryInfo_AccessControlSections(&__thrown, directoryInfo.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.DirectorySecurity(hndl : __return);
        }
    }
    // System.Security.AccessControl.FileSecurity GetAccessControl(System.IO.FileInfo)
// docid: M:System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.FileInfo)
    /**
    Returns the security information of a file.

    - Parameter fileInfo: The file from which to obtain the security information.
    - Returns: The security descriptors of all the access control sections of the file.

    */
    public static func GetAccessControl(fileInfo : dotnet.System.IO.FileInfo) throws -> dotnet.System.Security.AccessControl.FileSecurity {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_FileSecurity__GetAccessControl_0__1__FileInfo(&__thrown, fileInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.FileSecurity(hndl : __return);
        }
    }
    // System.Security.AccessControl.FileSecurity GetAccessControl(System.IO.FileInfo, System.Security.AccessControl.AccessControlSections)
// docid: M:System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.FileInfo,System.Security.AccessControl.AccessControlSections)
    /**
    Returns the security information of a file.

    - Parameter fileInfo: An existing file from which to obtain the security information.
    - Parameter includeSections: The desired access control sections to retrieve from the file.
    - Returns: The security descriptors of the specified access control sections of the file.

    */
    public static func GetAccessControl(fileInfo : dotnet.System.IO.FileInfo, includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.Security.AccessControl.FileSecurity {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_FileSecurity__GetAccessControl_0__2__FileInfo_AccessControlSections(&__thrown, fileInfo.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.FileSecurity(hndl : __return);
        }
    }
    // System.Security.AccessControl.FileSecurity GetAccessControl(System.IO.FileStream)
// docid: M:System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.FileStream)
    /**
    Returns the security information of a file.

    - Parameter fileStream: An existing file from which to obtain the security information.
    - Returns: The security descriptors of all the access control sections of the file.

    */
    public static func GetAccessControl(fileStream : dotnet.System.IO.FileStream) throws -> dotnet.System.Security.AccessControl.FileSecurity {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemAclExtensions_FileSecurity__GetAccessControl_0__1__FileStream(&__thrown, fileStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.FileSecurity(hndl : __return);
        }
    }
    // void SetAccessControl(System.IO.DirectoryInfo, System.Security.AccessControl.DirectorySecurity)
// docid: M:System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)
    /**
    Changes the security attributes of an existing directory.

    - Parameter directoryInfo: An existing directory.
    - Parameter directorySecurity: The security information to apply to the directory.
    */
    public static func SetAccessControl(directoryInfo : dotnet.System.IO.DirectoryInfo, directorySecurity : dotnet.System.Security.AccessControl.DirectorySecurity) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemAclExtensions_void__SetAccessControl_0__2__DirectoryInfo_DirectorySecurity(&__thrown, directoryInfo.get_handle(), directorySecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessControl(System.IO.FileInfo, System.Security.AccessControl.FileSecurity)
// docid: M:System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.FileInfo,System.Security.AccessControl.FileSecurity)
    /**
    Changes the security attributes of an existing file.

    - Parameter fileInfo: An existing file.
    - Parameter fileSecurity: The security information to apply to the file.
    */
    public static func SetAccessControl(fileInfo : dotnet.System.IO.FileInfo, fileSecurity : dotnet.System.Security.AccessControl.FileSecurity) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemAclExtensions_void__SetAccessControl_0__2__FileInfo_FileSecurity(&__thrown, fileInfo.get_handle(), fileSecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessControl(System.IO.FileStream, System.Security.AccessControl.FileSecurity)
// docid: M:System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.FileStream,System.Security.AccessControl.FileSecurity)
    /**
    Changes the security attributes of an existing file.

    - Parameter fileStream: An existing file.
    - Parameter fileSecurity: The security information to apply to the file.
    */
    public static func SetAccessControl(fileStream : dotnet.System.IO.FileStream, fileSecurity : dotnet.System.Security.AccessControl.FileSecurity) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemAclExtensions_void__SetAccessControl_0__2__FileStream_FileSecurity(&__thrown, fileStream.get_handle(), fileSecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // FileSystemAclExtensions


}

// System.Security
// System.Security.AccessControl
extension System.Security.AccessControl {
// type: System.Security.AccessControl.DirectoryObjectSecurity
    /**
    Provides the ability to control access to directory objects without direct manipulation of Access Control Lists (ACLs).

    */
open class DirectoryObjectSecurity
    :
    dotnet.System.Security.AccessControl.ObjectSecurity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_DirectoryObjectSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.DirectoryObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType,System.Guid,System.Guid)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter identityReference: The identity to which the access rule applies.  It must be an object that can be cast as a .
    - Parameter accessMask: The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.
    - Parameter isInherited: true if this rule is inherited from a parent container.
    - Parameter inheritanceFlags: Specifies the inheritance properties of the access rule.
    - Parameter propagationFlags: Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter type: Specifies the valid access control type.
    - Parameter objectType: The identity of the class of objects to which the new access rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the new access rule.
    - Returns: The  object that this method creates.

    */
    open func AccessRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws -> dotnet.System.Security.AccessControl.AccessRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DirectoryObjectSecurity_AccessRule__AccessRuleFactory_0__8__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AccessControlType_Guid_Guid(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessRule(hndl : __return);
        }
    }
    // System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.DirectoryObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags,System.Guid,System.Guid)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter identityReference: The identity to which the audit rule applies.  It must be an object that can be cast as a .
    - Parameter accessMask: The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.
    - Parameter isInherited: 
         if this rule is inherited from a parent container.
    - Parameter inheritanceFlags: Specifies the inheritance properties of the audit rule.
    - Parameter propagationFlags: Specifies whether inherited audit rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter flags: Specifies the conditions for which the rule is audited.
    - Parameter objectType: The identity of the class of objects to which the new audit rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the new audit rule.
    - Returns: The  object that this method creates.

    */
    open func AuditRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws -> dotnet.System.Security.AccessControl.AuditRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DirectoryObjectSecurity_AuditRule__AuditRuleFactory_0__8__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AuditFlags_Guid_Guid(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditRule(hndl : __return);
        }
    }
    // System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool, bool, System.Type)
// docid: M:System.Security.AccessControl.DirectoryObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
    /**
    Gets a collection of the access rules associated with the specified security identifier.

    - Parameter includeExplicit: 
         to include access rules explicitly set for the object.
    - Parameter includeInherited: 
         to include inherited access rules.
    - Parameter targetType: The security identifier for which to retrieve access rules. This must be an object that can be cast as a  object.
    - Returns: The collection of access rules associated with the specified  object.

    */
    open func GetAccessRules(includeExplicit : Bool, includeInherited : Bool, targetType : dotnet.System.Type_) throws -> dotnet.System.Security.AccessControl.AuthorizationRuleCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DirectoryObjectSecurity_AuthorizationRuleCollection__GetAccessRules_0__3__bool_bool_Type(&__thrown, self.get_handle(), Swift.Int32(includeExplicit ? 1 : 0), Swift.Int32(includeInherited ? 1 : 0), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuthorizationRuleCollection(hndl : __return);
        }
    }
    // System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool, bool, System.Type)
// docid: M:System.Security.AccessControl.DirectoryObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
    /**
    Gets a collection of the audit rules associated with the specified security identifier.

    - Parameter includeExplicit: 
         to include audit rules explicitly set for the object.
    - Parameter includeInherited: 
         to include inherited audit rules.
    - Parameter targetType: The security identifier for which to retrieve audit rules. This must be an object that can be cast as a  object.
    - Returns: The collection of audit rules associated with the specified  object.

    */
    open func GetAuditRules(includeExplicit : Bool, includeInherited : Bool, targetType : dotnet.System.Type_) throws -> dotnet.System.Security.AccessControl.AuthorizationRuleCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DirectoryObjectSecurity_AuthorizationRuleCollection__GetAuditRules_0__3__bool_bool_Type(&__thrown, self.get_handle(), Swift.Int32(includeExplicit ? 1 : 0), Swift.Int32(includeInherited ? 1 : 0), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuthorizationRuleCollection(hndl : __return);
        }
    }
} // DirectoryObjectSecurity


// type: System.Security.AccessControl.DirectorySecurity
    /**
    Represents the access control and audit security for a directory. This class cannot be inherited.

    */
public final class DirectorySecurity
    :
    dotnet.System.Security.AccessControl.FileSystemSecurity
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_DirectorySecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.AccessControl.DirectorySecurity.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_DirectorySecurity_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.AccessControlSections)
// docid: M:System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
    /**
    Initializes a new instance of the  class from a specified directory using the specified values of the  enumeration.

    - Parameter name: The location of a directory to create a  object from.
    - Parameter includeSections: One of the  values that specifies the type of access control list (ACL) information to retrieve.
    */
    public init(name : dotnet.System.String, includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_DirectorySecurity_ctor_0__2__String_AccessControlSections(&__thrown, name.get_handle(), includeSections.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DirectorySecurity


// type: System.Security.AccessControl.FileSecurity
    /**
    Represents the access control and audit security for a file. This class cannot be inherited.

    */
public final class FileSecurity
    :
    dotnet.System.Security.AccessControl.FileSystemSecurity
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_FileSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.AccessControl.FileSecurity.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSecurity_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.AccessControlSections)
// docid: M:System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
    /**
    Initializes a new instance of the  class from a specified file using the specified values of the  enumeration.

    - Parameter fileName: The location of a file to create a  object from.
    - Parameter includeSections: One of the  values that specifies the type of access control list (ACL) information to retrieve.
    */
    public init(fileName : dotnet.System.String, includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSecurity_ctor_0__2__String_AccessControlSections(&__thrown, fileName.get_handle(), includeSections.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // FileSecurity


// type: System.Security.AccessControl.FileSystemAccessRule
    /**
    Represents an abstraction of an access control entry (ACE) that defines an access rule for a file or directory. This class cannot be inherited.

    */
public final class FileSystemAccessRule
    :
    dotnet.System.Security.AccessControl.AccessRule
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_FileSystemAccessRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.FileSystemAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class using a reference to a user account, a value that specifies the type of operation associated with the access rule, and a value that specifies whether to allow or deny the operation.

    - Parameter identity: An  object that encapsulates a reference to a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter type: One of the  values that specifies whether to allow or deny the operation.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAccessRule_ctor_0__3__IdentityReference_FileSystemRights_AccessControlType(&__thrown, identity.get_handle(), fileSystemRights.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.FileSystemAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class using a reference to a user account, a value that specifies the type of operation associated with the access rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies whether to allow or deny the operation.

    - Parameter identity: An  object that encapsulates a reference to a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter inheritanceFlags: One of the  values that specifies how access masks are propagated to child objects.
    - Parameter propagationFlags: One of the  values that specifies how Access Control Entries (ACEs) are propagated to child objects.
    - Parameter type: One of the  values that specifies whether to allow or deny the operation.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAccessRule_ctor_0__5__IdentityReference_FileSystemRights_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, identity.get_handle(), fileSystemRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.FileSystemAccessRule.#ctor(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class using the name of a user account, a value that specifies the type of operation associated with the access rule, and a value that describes whether to allow or deny the operation.

    - Parameter identity: The name of a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter type: One of the  values that specifies whether to allow or deny the operation.
    */
    public init(identity : dotnet.System.String, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAccessRule_ctor_0__3__String_FileSystemRights_AccessControlType(&__thrown, identity.get_handle(), fileSystemRights.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.FileSystemAccessRule.#ctor(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class using the name of a user account, a value that specifies the type of operation associated with the access rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies whether to allow or deny the operation.

    - Parameter identity: The name of a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter inheritanceFlags: One of the  values that specifies how access masks are propagated to child objects.
    - Parameter propagationFlags: One of the  values that specifies how Access Control Entries (ACEs) are propagated to child objects.
    - Parameter type: One of the  values that specifies whether to allow or deny the operation.
    */
    public init(identity : dotnet.System.String, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAccessRule_ctor_0__5__String_FileSystemRights_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, identity.get_handle(), fileSystemRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.FileSystemRights get_FileSystemRights()
// docid: M:System.Security.AccessControl.FileSystemAccessRule.get_FileSystemRights
    public func get_FileSystemRights() throws -> dotnet.System.Security.AccessControl.FileSystemRights {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemAccessRule_FileSystemRights__get_FileSystemRights_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.FileSystemRights(val: __return);
        }
    }
    /**
    Gets the  flags associated with the current  object.

    */
    public var FileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
            return try! get_FileSystemRights();
        }
    }
} // FileSystemAccessRule


// type: System.Security.AccessControl.FileSystemAuditRule
    /**
    Represents an abstraction of an access control entry (ACE) that defines an audit rule for a file or directory. This class cannot be inherited.

    */
public final class FileSystemAuditRule
    :
    dotnet.System.Security.AccessControl.AuditRule
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_FileSystemAuditRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.FileSystemAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class using a reference to a user account, a value that specifies the type of operation associated with the audit rule, and a value that specifies when to perform auditing.

    - Parameter identity: An  object that encapsulates a reference to a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the audit rule.
    - Parameter flags: One of the  values that specifies when to perform auditing.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAuditRule_ctor_0__3__IdentityReference_FileSystemRights_AuditFlags(&__thrown, identity.get_handle(), fileSystemRights.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.FileSystemAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class using the name of a reference to a user account, a value that specifies the type of operation associated with the audit rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies when to perform auditing.

    - Parameter identity: An  object that encapsulates a reference to a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the audit rule.
    - Parameter inheritanceFlags: One of the  values that specifies how access masks are propagated to child objects.
    - Parameter propagationFlags: One of the  values that specifies how Access Control Entries (ACEs) are propagated to child objects.
    - Parameter flags: One of the  values that specifies when to perform auditing.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAuditRule_ctor_0__5__IdentityReference_FileSystemRights_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, identity.get_handle(), fileSystemRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.FileSystemAuditRule.#ctor(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class using a user account name, a value that specifies the type of operation associated with the audit rule, and a value that specifies when to perform auditing.

    - Parameter identity: The name of a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the audit rule.
    - Parameter flags: One of the  values that specifies when to perform auditing.
    */
    public init(identity : dotnet.System.String, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAuditRule_ctor_0__3__String_FileSystemRights_AuditFlags(&__thrown, identity.get_handle(), fileSystemRights.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.FileSystemRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.FileSystemAuditRule.#ctor(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class using the name of a user account, a value that specifies the type of operation associated with the audit rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies when to perform auditing.

    - Parameter identity: The name of a user account.
    - Parameter fileSystemRights: One of the  values that specifies the type of operation associated with the audit rule.
    - Parameter inheritanceFlags: One of the  values that specifies how access masks are propagated to child objects.
    - Parameter propagationFlags: One of the  values that specifies how Access Control Entries (ACEs) are propagated to child objects.
    - Parameter flags: One of the  values that specifies when to perform auditing.
    */
    public init(identity : dotnet.System.String, fileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_FileSystemAuditRule_ctor_0__5__String_FileSystemRights_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, identity.get_handle(), fileSystemRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.FileSystemRights get_FileSystemRights()
// docid: M:System.Security.AccessControl.FileSystemAuditRule.get_FileSystemRights
    public func get_FileSystemRights() throws -> dotnet.System.Security.AccessControl.FileSystemRights {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemAuditRule_FileSystemRights__get_FileSystemRights_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.FileSystemRights(val: __return);
        }
    }
    /**
    Gets the  flags associated with the current  object.

    */
    public var FileSystemRights : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
            return try! get_FileSystemRights();
        }
    }
} // FileSystemAuditRule


// type: System.Security.AccessControl.FileSystemRights
    /**
    Defines the access rights to use when creating access and audit rules.

    */
public struct FileSystemRights : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_FileSystemRights_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.FileSystemRights ListDirectory
    /**
    Specifies the right to read the contents of a directory.

    */
    public static var ListDirectory : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ListDirectory());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ReadData
    /**
    Specifies the right to open and copy a file or folder.  This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.

    */
    public static var ReadData : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ReadData());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights CreateFiles
    /**
    Specifies the right to create a file. This right requires the Synchronize value.

    */
    public static var CreateFiles : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_CreateFiles());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights WriteData
    /**
    Specifies the right to open and write to a file or folder.  This does not include the right to open and write file system attributes, extended file system attributes, or access and audit rules.

    */
    public static var WriteData : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_WriteData());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights AppendData
    /**
    Specifies the right to append data to the end of a file.

    */
    public static var AppendData : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_AppendData());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights CreateDirectories
    /**
    Specifies the right to create a folder This right requires the Synchronize value.

    */
    public static var CreateDirectories : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_CreateDirectories());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ReadExtendedAttributes
    /**
    Specifies the right to open and copy extended file system attributes from a folder or file.  For example, this value specifies the right to view author and content information.  This does not include the right to read data, file system attributes, or access and audit rules.

    */
    public static var ReadExtendedAttributes : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ReadExtendedAttributes());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights WriteExtendedAttributes
    /**
    Specifies the right to open and write extended file system attributes to a folder or file.  This does not include the ability to write data, attributes, or access and audit rules.

    */
    public static var WriteExtendedAttributes : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_WriteExtendedAttributes());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ExecuteFile
    /**
    Specifies the right to run an application file.

    */
    public static var ExecuteFile : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ExecuteFile());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights Traverse
    /**
    Specifies the right to list the contents of a folder and to run applications contained within that folder.

    */
    public static var Traverse : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_Traverse());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights DeleteSubdirectoriesAndFiles
    /**
    Specifies the right to delete a folder and any files contained within that folder.

    */
    public static var DeleteSubdirectoriesAndFiles : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_DeleteSubdirectoriesAndFiles());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ReadAttributes
    /**
    Specifies the right to open and copy file system attributes from a folder or file.  For example, this value specifies the right to view the file creation or modified date.  This does not include the right to read data, extended file system attributes, or access and audit rules.

    */
    public static var ReadAttributes : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ReadAttributes());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights WriteAttributes
    /**
    Specifies the right to open and write file system attributes to a folder or file. This does not include the ability to write data, extended attributes, or access and audit rules.

    */
    public static var WriteAttributes : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_WriteAttributes());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights Write
    /**
    Specifies the right to create folders and files, and to add or remove data from files.  This right includes the  right,  right,  right, and  right.

    */
    public static var Write : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_Write());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights Delete
    /**
    Specifies the right to delete a folder or file.

    */
    public static var Delete : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_Delete());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ReadPermissions
    /**
    Specifies the right to open and copy access and audit rules from a folder or file.  This does not include the right to read data, file system attributes, and extended file system attributes.

    */
    public static var ReadPermissions : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ReadPermissions());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights Read
    /**
    Specifies the right to open and copy folders or files as read-only.  This right includes the  right,  right,  right, and  right.

    */
    public static var Read : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_Read());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ReadAndExecute
    /**
    Specifies the right to open and copy folders or files as read-only, and to run application files.  This right includes the  right and the  right.

    */
    public static var ReadAndExecute : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ReadAndExecute());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights Modify
    /**
    Specifies the right to read, write, list folder contents, delete folders and files, and run application files.  This right includes the  right, the  right, and the  right.

    */
    public static var Modify : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_Modify());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights ChangePermissions
    /**
    Specifies the right to change the security and audit rules associated with a file or folder.

    */
    public static var ChangePermissions : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_ChangePermissions());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights TakeOwnership
    /**
    Specifies the right to change the owner of a folder or file.  Note that owners of a resource have full access to that resource.

    */
    public static var TakeOwnership : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_TakeOwnership());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights Synchronize
    /**
    Specifies whether the application can wait for a file handle to synchronize with the completion of an I/O operation. This value is automatically set when allowing access and automatically excluded when denying access.

    */
    public static var Synchronize : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_Synchronize());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.FileSystemRights FullControl
    /**
    Specifies the right to exert full control over a folder or file, and to modify access control and audit rules.  This value represents the right to do anything with a file and is the combination of all rights in this enumeration.

    */
    public static var FullControl : dotnet.System.Security.AccessControl.FileSystemRights {
        get {
        let __return = dotnet.System.Security.AccessControl.FileSystemRights(val: System_Security_AccessControl_FileSystemRights_get_FullControl());
            return __return;
        }
    }
} // FileSystemRights


// type: System.Security.AccessControl.FileSystemSecurity
    /**
    Represents the access control and audit security for a file or directory.

    */
open class FileSystemSecurity
    :
    dotnet.System.Security.AccessControl.NativeObjectSecurity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_FileSystemSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class that represents a new access control rule for the specified user, with the specified access rights, access control, and flags.

    - Parameter identityReference: An  object that represents a user account.
    - Parameter accessMask: An integer that specifies an access type.
    - Parameter isInherited: 
         if the access rule is inherited; otherwise, .
    - Parameter inheritanceFlags: One of the  values that specifies how to propagate access masks to child objects.
    - Parameter propagationFlags: One of the  values that specifies how to propagate Access Control Entries (ACEs) to child objects.
    - Parameter type: One of the  values that specifies whether access is allowed or denied.
    - Returns: A new  object that represents a new access control rule for the specified user, with the specified access rights, access control, and flags.

    */
    open /* method final */ override func AccessRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws -> dotnet.System.Security.AccessControl.AccessRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_AccessRule__AccessRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessRule(hndl : __return);
        }
    }
    // void AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
    /**
    Adds the specified access control list (ACL) permission to the current file or directory.

    - Parameter rule: A  object that represents an access control list (ACL) permission to add to a file or directory.
    */
    open func AddAccessRule(rule : dotnet.System.Security.AccessControl.FileSystemAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__AddAccessRule_0__1__FileSystemAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
    /**
    Adds the specified audit rule to the current file or directory.

    - Parameter rule: A  object that represents an audit rule to add to a file or directory.
    */
    open func AddAuditRule(rule : dotnet.System.Security.AccessControl.FileSystemAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__AddAuditRule_0__1__FileSystemAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class representing the specified audit rule for the specified user.

    - Parameter identityReference: An  object that represents a user account.
    - Parameter accessMask: An integer that specifies an access type.
    - Parameter isInherited: 
         if the access rule is inherited; otherwise, .
    - Parameter inheritanceFlags: One of the  values that specifies how to propagate access masks to child objects.
    - Parameter propagationFlags: One of the  values that specifies how to propagate Access Control Entries (ACEs) to child objects.
    - Parameter flags: One of the  values that specifies the type of auditing to perform.
    - Returns: A new  object representing the specified audit rule for the specified user.

    */
    open /* method final */ override func AuditRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws -> dotnet.System.Security.AccessControl.AuditRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_AuditRule__AuditRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditRule(hndl : __return);
        }
    }
    // bool RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
    /**
    Removes all matching allow or deny access control list (ACL) permissions from the current file or directory.

    - Parameter rule: A  object that represents an access control list (ACL) permission to remove from a file or directory.
    - Returns: 
         if the access rule was removed; otherwise, .

    */
    open func RemoveAccessRule(rule : dotnet.System.Security.AccessControl.FileSystemAccessRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_bool__RemoveAccessRule_0__1__FileSystemAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
    /**
    Removes all access control list (ACL) permissions for the specified user from the current file or directory.

    - Parameter rule: A  object that specifies a user whose access control list (ACL) permissions should be removed from a file or directory.
    */
    open func RemoveAccessRuleAll(rule : dotnet.System.Security.AccessControl.FileSystemAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__RemoveAccessRuleAll_0__1__FileSystemAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
    /**
    Removes a single matching allow or deny access control list (ACL) permission from the current file or directory.

    - Parameter rule: A  object that specifies a user whose access control list (ACL) permissions should be removed from a file or directory.
    */
    open func RemoveAccessRuleSpecific(rule : dotnet.System.Security.AccessControl.FileSystemAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__RemoveAccessRuleSpecific_0__1__FileSystemAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
    /**
    Removes all matching allow or deny audit rules from the current file or directory.

    - Parameter rule: A  object that represents an audit rule to remove from a file or directory.
    - Returns: 
         if the audit rule was removed; otherwise, 

    */
    open func RemoveAuditRule(rule : dotnet.System.Security.AccessControl.FileSystemAuditRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_bool__RemoveAuditRule_0__1__FileSystemAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
    /**
    Removes all audit rules for the specified user from the current file or directory.

    - Parameter rule: A  object that specifies a user whose audit rules should be removed from a file or directory.
    */
    open func RemoveAuditRuleAll(rule : dotnet.System.Security.AccessControl.FileSystemAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__RemoveAuditRuleAll_0__1__FileSystemAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
    /**
    Removes a single matching allow or deny audit rule from the current file or directory.

    - Parameter rule: A  object that represents an audit rule to remove from a file or directory.
    */
    open func RemoveAuditRuleSpecific(rule : dotnet.System.Security.AccessControl.FileSystemAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__RemoveAuditRuleSpecific_0__1__FileSystemAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
    /**
    Adds the specified access control list (ACL) permission to the current file or directory and removes all matching ACL permissions.

    - Parameter rule: A  object that represents an access control list (ACL) permission to add to a file or directory.
    */
    open func ResetAccessRule(rule : dotnet.System.Security.AccessControl.FileSystemAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__ResetAccessRule_0__1__FileSystemAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
    /**
    Sets the specified access control list (ACL) permission for the current file or directory.

    - Parameter rule: A  object that represents an access control list (ACL) permission to set for a file or directory.
    */
    open func SetAccessRule(rule : dotnet.System.Security.AccessControl.FileSystemAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__SetAccessRule_0__1__FileSystemAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
// docid: M:System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
    /**
    Sets the specified audit rule for the current file or directory.

    - Parameter rule: A  object that represents an audit rule to set for a file or directory.
    */
    open func SetAuditRule(rule : dotnet.System.Security.AccessControl.FileSystemAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_FileSystemSecurity_void__SetAuditRule_0__1__FileSystemAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_AccessRightType()
// docid: M:System.Security.AccessControl.FileSystemSecurity.get_AccessRightType
    open override func get_AccessRightType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_Type__get_AccessRightType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AccessRuleType()
// docid: M:System.Security.AccessControl.FileSystemSecurity.get_AccessRuleType
    open override func get_AccessRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_Type__get_AccessRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AuditRuleType()
// docid: M:System.Security.AccessControl.FileSystemSecurity.get_AuditRuleType
    open override func get_AuditRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_FileSystemSecurity_Type__get_AuditRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the enumeration that the  class uses to represent access rights.

    */
    open override var AccessRightType : dotnet.System.Type_ {
        get {
            return try! get_AccessRightType();
        }
    }
    /**
    Gets the enumeration that the  class uses to represent access rules.

    */
    open override var AccessRuleType : dotnet.System.Type_ {
        get {
            return try! get_AccessRuleType();
        }
    }
    /**
    Gets the type that the  class uses to represent audit rules.

    */
    open override var AuditRuleType : dotnet.System.Type_ {
        get {
            return try! get_AuditRuleType();
        }
    }
} // FileSystemSecurity


}



// EXTENSION METHOD void Create(System.IO.DirectoryInfo, System.Security.AccessControl.DirectorySecurity)
extension dotnet.System.IO.DirectoryInfo {
    public func Create(directorySecurity : dotnet.System.Security.AccessControl.DirectorySecurity) throws {
        try dotnet.System.IO.FileSystemAclExtensions.Create(directoryInfo: self, directorySecurity: directorySecurity);
    }
}

// EXTENSION METHOD System.IO.FileStream Create(System.IO.FileInfo, System.IO.FileMode, System.Security.AccessControl.FileSystemRights, System.IO.FileShare, System.Int32, System.IO.FileOptions, System.Security.AccessControl.FileSecurity)
extension dotnet.System.IO.FileInfo {
    public func Create(mode : dotnet.System.IO.FileMode, rights : dotnet.System.Security.AccessControl.FileSystemRights, share : dotnet.System.IO.FileShare, bufferSize : Swift.Int32, options : dotnet.System.IO.FileOptions, fileSecurity : dotnet.System.Security.AccessControl.FileSecurity) throws -> dotnet.System.IO.FileStream {
        return try dotnet.System.IO.FileSystemAclExtensions.Create(fileInfo: self, mode: mode, rights: rights, share: share, bufferSize: bufferSize, options: options, fileSecurity: fileSecurity);
    }
}

// EXTENSION METHOD System.IO.DirectoryInfo CreateDirectory(System.Security.AccessControl.DirectorySecurity, System.String)
extension dotnet.System.Security.AccessControl.DirectorySecurity {
    public func CreateDirectory(path : dotnet.System.String) throws -> dotnet.System.IO.DirectoryInfo {
        return try dotnet.System.IO.FileSystemAclExtensions.CreateDirectory(directorySecurity: self, path: path);
    }
}

// EXTENSION METHOD System.Security.AccessControl.DirectorySecurity GetAccessControl(System.IO.DirectoryInfo)
extension dotnet.System.IO.DirectoryInfo {
    public func GetAccessControl() throws -> dotnet.System.Security.AccessControl.DirectorySecurity {
        return try dotnet.System.IO.FileSystemAclExtensions.GetAccessControl(directoryInfo: self);
    }
}

// EXTENSION METHOD System.Security.AccessControl.DirectorySecurity GetAccessControl(System.IO.DirectoryInfo, System.Security.AccessControl.AccessControlSections)
extension dotnet.System.IO.DirectoryInfo {
    public func GetAccessControl(includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.Security.AccessControl.DirectorySecurity {
        return try dotnet.System.IO.FileSystemAclExtensions.GetAccessControl(directoryInfo: self, includeSections: includeSections);
    }
}

// EXTENSION METHOD System.Security.AccessControl.FileSecurity GetAccessControl(System.IO.FileInfo)
extension dotnet.System.IO.FileInfo {
    public func GetAccessControl() throws -> dotnet.System.Security.AccessControl.FileSecurity {
        return try dotnet.System.IO.FileSystemAclExtensions.GetAccessControl(fileInfo: self);
    }
}

// EXTENSION METHOD System.Security.AccessControl.FileSecurity GetAccessControl(System.IO.FileInfo, System.Security.AccessControl.AccessControlSections)
extension dotnet.System.IO.FileInfo {
    public func GetAccessControl(includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.Security.AccessControl.FileSecurity {
        return try dotnet.System.IO.FileSystemAclExtensions.GetAccessControl(fileInfo: self, includeSections: includeSections);
    }
}

// EXTENSION METHOD System.Security.AccessControl.FileSecurity GetAccessControl(System.IO.FileStream)
extension dotnet.System.IO.FileStream {
    public func GetAccessControl() throws -> dotnet.System.Security.AccessControl.FileSecurity {
        return try dotnet.System.IO.FileSystemAclExtensions.GetAccessControl(fileStream: self);
    }
}

// EXTENSION METHOD void SetAccessControl(System.IO.DirectoryInfo, System.Security.AccessControl.DirectorySecurity)
extension dotnet.System.IO.DirectoryInfo {
    public func SetAccessControl(directorySecurity : dotnet.System.Security.AccessControl.DirectorySecurity) throws {
        try dotnet.System.IO.FileSystemAclExtensions.SetAccessControl(directoryInfo: self, directorySecurity: directorySecurity);
    }
}

// EXTENSION METHOD void SetAccessControl(System.IO.FileInfo, System.Security.AccessControl.FileSecurity)
extension dotnet.System.IO.FileInfo {
    public func SetAccessControl(fileSecurity : dotnet.System.Security.AccessControl.FileSecurity) throws {
        try dotnet.System.IO.FileSystemAclExtensions.SetAccessControl(fileInfo: self, fileSecurity: fileSecurity);
    }
}

// EXTENSION METHOD void SetAccessControl(System.IO.FileStream, System.Security.AccessControl.FileSecurity)
extension dotnet.System.IO.FileStream {
    public func SetAccessControl(fileSecurity : dotnet.System.Security.AccessControl.FileSecurity) throws {
        try dotnet.System.IO.FileSystemAclExtensions.SetAccessControl(fileStream: self, fileSecurity: fileSecurity);
    }
}

