// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Dynamic
extension System.Dynamic {
// type: System.Dynamic.BinaryOperationBinder
    /**
    Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.

    */
open class BinaryOperationBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_BinaryOperationBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic binary operation.

    - Parameter target: The target of the dynamic operation.
    - Parameter args: An array of arguments of the dynamic operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BinaryOperationBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackBinaryOperation(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic binary operation.
    - Parameter arg: The right hand side operand of the dynamic binary operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackBinaryOperation(target : dotnet.System.Dynamic.DynamicMetaObject, arg : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BinaryOperationBinder_DynamicMetaObject__FallbackBinaryOperation_0__2__DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), arg.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackBinaryOperation(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic binary operation.
    - Parameter arg: The right hand side operand of the dynamic binary operation.
    - Parameter errorSuggestion: The binding result if the binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackBinaryOperation(target : dotnet.System.Dynamic.DynamicMetaObject, arg : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BinaryOperationBinder_DynamicMetaObject__FallbackBinaryOperation_0__3__DynamicMetaObject_DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), arg.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_Operation()
// docid: M:System.Dynamic.BinaryOperationBinder.get_Operation
    open func get_Operation() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BinaryOperationBinder_ExpressionType__get_Operation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.BinaryOperationBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BinaryOperationBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    The binary operation kind.

    */
    open var Operation : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_Operation();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // BinaryOperationBinder


// type: System.Dynamic.BindingRestrictions
    /**
    Represents a set of binding restrictions on the  under which the dynamic binding is valid.

    */
open class BindingRestrictions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_BindingRestrictions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Dynamic.BindingRestrictions Empty
    /**
    Represents an empty set of binding restrictions. This field is read only.

    */
    open class var Empty : dotnet.System.Dynamic.BindingRestrictions {
        get {
        let __return = dotnet.System.Dynamic.BindingRestrictions(hndl: System_Dynamic_BindingRestrictions_get_Empty());
            return __return;
        }
    }
    // System.Dynamic.BindingRestrictions Combine(System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject>)
// docid: M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})
    /**
    Combines binding restrictions from the list of  instances into one set of restrictions.

    - Parameter contributingObjects: The list of  instances from which to combine restrictions.
    - Returns: The new set of binding restrictions.

    */
    open class func Combine(contributingObjects : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Dynamic.DynamicMetaObject>>) throws -> dotnet.System.Dynamic.BindingRestrictions {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BindingRestrictions_BindingRestrictions__Combine_0__1__System_Collections_Generic_IList_System_Dynamic_DynamicMetaObject_(&__thrown, (contributingObjects?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.BindingRestrictions(hndl : __return);
        }
    }
    // System.Dynamic.BindingRestrictions GetExpressionRestriction(System.Linq.Expressions.Expression)
// docid: M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)
    /**
    Creates the binding restriction that checks the expression for arbitrary immutable properties.

    - Parameter expression: The expression representing the restrictions.
    - Returns: The new binding restrictions.

    */
    open class func GetExpressionRestriction(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Dynamic.BindingRestrictions {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BindingRestrictions_BindingRestrictions__GetExpressionRestriction_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.BindingRestrictions(hndl : __return);
        }
    }
    // System.Dynamic.BindingRestrictions GetInstanceRestriction(System.Linq.Expressions.Expression, System.Object)
// docid: M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)
    /**
    Creates the binding restriction that checks the expression for object instance identity.

    - Parameter expression: The expression to test.
    - Parameter instance: The exact object instance to test.
    - Returns: The new binding restrictions.

    */
    open class func GetInstanceRestriction(expression : dotnet.System.Linq.Expressions.Expression, instance : Optional<dotnet.System.Object>) throws -> dotnet.System.Dynamic.BindingRestrictions {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BindingRestrictions_BindingRestrictions__GetInstanceRestriction_0__2__Expression_Object(&__thrown, expression.get_handle(), instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.BindingRestrictions(hndl : __return);
        }
    }
    // System.Dynamic.BindingRestrictions GetTypeRestriction(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates the binding restriction that check the expression for runtime type identity.

    - Parameter expression: The expression to test.
    - Parameter type: The exact type to test.
    - Returns: The new binding restrictions.

    */
    open class func GetTypeRestriction(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Dynamic.BindingRestrictions {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BindingRestrictions_BindingRestrictions__GetTypeRestriction_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.BindingRestrictions(hndl : __return);
        }
    }
    // System.Dynamic.BindingRestrictions Merge(System.Dynamic.BindingRestrictions)
// docid: M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)
    /**
    Merges the set of binding restrictions with the current binding restrictions.

    - Parameter restrictions: The set of restrictions with which to merge the current binding restrictions.
    - Returns: The new set of binding restrictions.

    */
    open func Merge(restrictions : dotnet.System.Dynamic.BindingRestrictions) throws -> dotnet.System.Dynamic.BindingRestrictions {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BindingRestrictions_BindingRestrictions__Merge_0__1__BindingRestrictions(&__thrown, self.get_handle(), restrictions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.BindingRestrictions(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression ToExpression()
// docid: M:System.Dynamic.BindingRestrictions.ToExpression
    /**
    Creates the  representing the binding restrictions.

    - Returns: The expression tree representing the restrictions.

    */
    open func ToExpression() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_BindingRestrictions_Expression__ToExpression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
} // BindingRestrictions


// type: System.Dynamic.CallInfo
    /**
    Describes arguments in the dynamic binding process.

    */
public final class CallInfo
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_CallInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})
    /**
    Creates a new CallInfo that represents arguments in the dynamic binding process.

    - Parameter argCount: The number of arguments.
    - Parameter argNames: The argument names.
    */
    public init(argCount : Swift.Int32, argNames : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Dynamic_CallInfo_ctor_0__2__i32_System_Collections_Generic_IEnumerable_string_(&__thrown, argCount, argNames.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.String[])
// docid: M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])
    /**
    Creates a new PositionalArgumentInfo.

    - Parameter argCount: The number of arguments.
    - Parameter argNames: The argument names.
    */
    public init(argCount : Swift.Int32, argNames : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Dynamic_CallInfo_ctor_0__2__i32_StringArray(&__thrown, argCount, argNames.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Dynamic.CallInfo.Equals(System.Object)
    /**
    Determines whether the specified CallInfo instance is considered equal to the current.

    - Parameter obj: The instance of  to compare with the current instance.
    - Returns: 
         if the specified instance is equal to the current one otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CallInfo_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Dynamic.CallInfo.GetHashCode
    /**
    Serves as a hash function for the current .

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CallInfo_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ArgumentCount()
// docid: M:System.Dynamic.CallInfo.get_ArgumentCount
    public func get_ArgumentCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CallInfo_i32__get_ArgumentCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.String> get_ArgumentNames()
// docid: M:System.Dynamic.CallInfo.get_ArgumentNames
    public func get_ArgumentNames() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CallInfo_System_Collections_ObjectModel_ReadOnlyCollection_string___get_ArgumentNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    The number of arguments.

    */
    public var ArgumentCount : Swift.Int32 {
        get {
            return try! get_ArgumentCount();
        }
    }
    /**
    The argument names.

    */
    public var ArgumentNames : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.String> {
        get {
            return try! get_ArgumentNames();
        }
    }
} // CallInfo


// type: System.Dynamic.ConvertBinder
    /**
    Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.

    */
open class ConvertBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_ConvertBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic convert operation.

    - Parameter target: The target of the dynamic convert operation.
    - Parameter args: An array of arguments of the dynamic convert operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : Optional<dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_ConvertBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackConvert(System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic convert operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackConvert(target : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_ConvertBinder_DynamicMetaObject__FallbackConvert_0__1__DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackConvert(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic convert operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackConvert(target : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_ConvertBinder_DynamicMetaObject__FallbackConvert_0__2__DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Explicit()
// docid: M:System.Dynamic.ConvertBinder.get_Explicit
    open func get_Explicit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_ConvertBinder_bool__get_Explicit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.ConvertBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_ConvertBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Dynamic.ConvertBinder.get_Type
    open func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_ConvertBinder_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the value indicating if the conversion should consider explicit conversions.

    */
    open var Explicit : Bool {
        get {
            return try! get_Explicit();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
    /**
    The type to convert to.

    */
    open var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // ConvertBinder


// type: System.Dynamic.CreateInstanceBinder
    /**
    Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.

    */
open class CreateInstanceBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_CreateInstanceBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic create operation.

    - Parameter target: The target of the dynamic create operation.
    - Parameter args: An array of arguments of the dynamic create operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CreateInstanceBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackCreateInstance(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic create operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic create operation.
    - Parameter args: The arguments of the dynamic create operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackCreateInstance(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CreateInstanceBinder_DynamicMetaObject__FallbackCreateInstance_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackCreateInstance(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic create operation.
    - Parameter args: The arguments of the dynamic create operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackCreateInstance(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CreateInstanceBinder_DynamicMetaObject__FallbackCreateInstance_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), args.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.CallInfo get_CallInfo()
// docid: M:System.Dynamic.CreateInstanceBinder.get_CallInfo
    open func get_CallInfo() throws -> dotnet.System.Dynamic.CallInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CreateInstanceBinder_CallInfo__get_CallInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.CallInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.CreateInstanceBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_CreateInstanceBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the signature of the arguments at the call site.

    */
    open var CallInfo : dotnet.System.Dynamic.CallInfo {
        get {
            return try! get_CallInfo();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // CreateInstanceBinder


// type: System.Dynamic.DeleteIndexBinder
    /**
    Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.

    */
open class DeleteIndexBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_DeleteIndexBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic delete index operation.

    - Parameter target: The target of the dynamic delete index operation.
    - Parameter args: An array of arguments of the dynamic delete index operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteIndexBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackDeleteIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic delete index operation.
    - Parameter indexes: The arguments of the dynamic delete index operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackDeleteIndex(target : dotnet.System.Dynamic.DynamicMetaObject, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteIndexBinder_DynamicMetaObject__FallbackDeleteIndex_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackDeleteIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic delete index operation.
    - Parameter indexes: The arguments of the dynamic delete index operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackDeleteIndex(target : dotnet.System.Dynamic.DynamicMetaObject, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteIndexBinder_DynamicMetaObject__FallbackDeleteIndex_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), indexes.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.CallInfo get_CallInfo()
// docid: M:System.Dynamic.DeleteIndexBinder.get_CallInfo
    open func get_CallInfo() throws -> dotnet.System.Dynamic.CallInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteIndexBinder_CallInfo__get_CallInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.CallInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.DeleteIndexBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteIndexBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the signature of the arguments at the call site.

    */
    open var CallInfo : dotnet.System.Dynamic.CallInfo {
        get {
            return try! get_CallInfo();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // DeleteIndexBinder


// type: System.Dynamic.DeleteMemberBinder
    /**
    Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.

    */
open class DeleteMemberBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_DeleteMemberBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic delete member operation.

    - Parameter target: The target of the dynamic delete member operation.
    - Parameter args: An array of arguments of the dynamic delete member operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : Optional<dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteMemberBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackDeleteMember(System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic delete member operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackDeleteMember(target : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteMemberBinder_DynamicMetaObject__FallbackDeleteMember_0__1__DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackDeleteMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic delete member operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackDeleteMember(target : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteMemberBinder_DynamicMetaObject__FallbackDeleteMember_0__2__DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IgnoreCase()
// docid: M:System.Dynamic.DeleteMemberBinder.get_IgnoreCase
    open func get_IgnoreCase() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteMemberBinder_bool__get_IgnoreCase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Dynamic.DeleteMemberBinder.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteMemberBinder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.DeleteMemberBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DeleteMemberBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the value indicating if the string comparison should ignore the case of the member name.

    */
    open var IgnoreCase : Bool {
        get {
            return try! get_IgnoreCase();
        }
    }
    /**
    Gets the name of the member to delete.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // DeleteMemberBinder


// type: System.Dynamic.DynamicMetaObject
    /**
    Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.

    */
open class DynamicMetaObject
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_DynamicMetaObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions)
// docid: M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)
    /**
    Initializes a new instance of the  class.

    - Parameter expression: The expression representing this  during the dynamic binding process.
    - Parameter restrictions: The set of binding restrictions under which the binding is valid.
    */
    public init(expression : dotnet.System.Linq.Expressions.Expression, restrictions : dotnet.System.Dynamic.BindingRestrictions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Dynamic_DynamicMetaObject_ctor_0__2__Expression_BindingRestrictions(&__thrown, expression.get_handle(), restrictions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions, System.Object)
// docid: M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter expression: The expression representing this  during the dynamic binding process.
    - Parameter restrictions: The set of binding restrictions under which the binding is valid.
    - Parameter value: The runtime value represented by the .
    */
    public init(expression : dotnet.System.Linq.Expressions.Expression, restrictions : dotnet.System.Dynamic.BindingRestrictions, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Dynamic_DynamicMetaObject_ctor_0__3__Expression_BindingRestrictions_Object(&__thrown, expression.get_handle(), restrictions.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Dynamic.DynamicMetaObject BindBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic binary operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter arg: An instance of the  representing the right hand side of the binary operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindBinaryOperation(binder : dotnet.System.Dynamic.BinaryOperationBinder, arg : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindBinaryOperation_0__2__BinaryOperationBinder_DynamicMetaObject(&__thrown, self.get_handle(), binder.get_handle(), arg.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindConvert(System.Dynamic.ConvertBinder)
// docid: M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)
    /**
    Performs the binding of the dynamic conversion operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindConvert(binder : dotnet.System.Dynamic.ConvertBinder) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindConvert_0__1__ConvertBinder(&__thrown, self.get_handle(), binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindCreateInstance(System.Dynamic.CreateInstanceBinder, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic create instance operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter args: An array of  instances - arguments to the create instance operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindCreateInstance(binder : dotnet.System.Dynamic.CreateInstanceBinder, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindCreateInstance_0__2__CreateInstanceBinder_DynamicMetaObjectArray(&__thrown, self.get_handle(), binder.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic delete index operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter indexes: An array of  instances - indexes for the delete index operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindDeleteIndex(binder : dotnet.System.Dynamic.DeleteIndexBinder, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindDeleteIndex_0__2__DeleteIndexBinder_DynamicMetaObjectArray(&__thrown, self.get_handle(), binder.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindDeleteMember(System.Dynamic.DeleteMemberBinder)
// docid: M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)
    /**
    Performs the binding of the dynamic delete member operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindDeleteMember(binder : dotnet.System.Dynamic.DeleteMemberBinder) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindDeleteMember_0__1__DeleteMemberBinder(&__thrown, self.get_handle(), binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindGetIndex(System.Dynamic.GetIndexBinder, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic get index operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter indexes: An array of  instances - indexes for the get index operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindGetIndex(binder : dotnet.System.Dynamic.GetIndexBinder, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindGetIndex_0__2__GetIndexBinder_DynamicMetaObjectArray(&__thrown, self.get_handle(), binder.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindGetMember(System.Dynamic.GetMemberBinder)
// docid: M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)
    /**
    Performs the binding of the dynamic get member operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindGetMember(binder : dotnet.System.Dynamic.GetMemberBinder) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindGetMember_0__1__GetMemberBinder(&__thrown, self.get_handle(), binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindInvoke(System.Dynamic.InvokeBinder, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic invoke operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter args: An array of  instances - arguments to the invoke operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindInvoke(binder : dotnet.System.Dynamic.InvokeBinder, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindInvoke_0__2__InvokeBinder_DynamicMetaObjectArray(&__thrown, self.get_handle(), binder.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindInvokeMember(System.Dynamic.InvokeMemberBinder, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic invoke member operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter args: An array of  instances - arguments to the invoke member operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindInvokeMember(binder : dotnet.System.Dynamic.InvokeMemberBinder, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindInvokeMember_0__2__InvokeMemberBinder_DynamicMetaObjectArray(&__thrown, self.get_handle(), binder.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindSetIndex(System.Dynamic.SetIndexBinder, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic set index operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter indexes: An array of  instances - indexes for the set index operation.
    - Parameter value: The  representing the value for the set index operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindSetIndex(binder : dotnet.System.Dynamic.SetIndexBinder, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, value : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindSetIndex_0__3__SetIndexBinder_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), binder.get_handle(), indexes.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindSetMember(System.Dynamic.SetMemberBinder, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic set member operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Parameter value: The  representing the value for the set member operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindSetMember(binder : dotnet.System.Dynamic.SetMemberBinder, value : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindSetMember_0__2__SetMemberBinder_DynamicMetaObject(&__thrown, self.get_handle(), binder.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject BindUnaryOperation(System.Dynamic.UnaryOperationBinder)
// docid: M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)
    /**
    Performs the binding of the dynamic unary operation.

    - Parameter binder: An instance of the  that represents the details of the dynamic operation.
    - Returns: The new  representing the result of the binding.

    */
    open func BindUnaryOperation(binder : dotnet.System.Dynamic.UnaryOperationBinder) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__BindUnaryOperation_0__1__UnaryOperationBinder(&__thrown, self.get_handle(), binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject Create(System.Object, System.Linq.Expressions.Expression)
// docid: M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)
    /**
    Creates a meta-object for the specified object.

    - Parameter value: The object to get a meta-object for.
    - Parameter expression: The expression representing this  during the dynamic binding process.
    - Returns: If the given object implements  and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by . Otherwise a plain new meta-object with no restrictions is created and returned.

    */
    open class func Create(value : dotnet.System.Object, expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_DynamicMetaObject__Create_0__2__Object_Expression(&__thrown, value.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetDynamicMemberNames()
// docid: M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames
    /**
    Returns the enumeration of all dynamic member names.

    - Returns: The list of dynamic member names.

    */
    open func GetDynamicMemberNames() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_System_Collections_Generic_IEnumerable_string___GetDynamicMemberNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Expression()
// docid: M:System.Dynamic.DynamicMetaObject.get_Expression
    open func get_Expression() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_Expression__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:System.Dynamic.DynamicMetaObject.get_HasValue
    open func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_LimitType()
// docid: M:System.Dynamic.DynamicMetaObject.get_LimitType
    open func get_LimitType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_Type__get_LimitType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.BindingRestrictions get_Restrictions()
// docid: M:System.Dynamic.DynamicMetaObject.get_Restrictions
    open func get_Restrictions() throws -> dotnet.System.Dynamic.BindingRestrictions {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_BindingRestrictions__get_Restrictions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.BindingRestrictions(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_RuntimeType()
// docid: M:System.Dynamic.DynamicMetaObject.get_RuntimeType
    open func get_RuntimeType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_Type__get_RuntimeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Dynamic.DynamicMetaObject.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObject_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    The expression representing the  during the dynamic binding process.

    */
    open var Expression : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Expression();
        }
    }
    /**
    Gets a value indicating whether the  has the runtime value.

    */
    open var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    Gets the limit type of the .

    */
    open var LimitType : dotnet.System.Type_ {
        get {
            return try! get_LimitType();
        }
    }
    /**
    The set of binding restrictions under which the binding is valid.

    */
    open var Restrictions : dotnet.System.Dynamic.BindingRestrictions {
        get {
            return try! get_Restrictions();
        }
    }
    /**
    Gets the  of the runtime value or null if the  has no value associated with it.

    */
    open var RuntimeType : Optional<dotnet.System.Type_> {
        get {
            return try! get_RuntimeType();
        }
    }
    /**
    The runtime value represented by this .

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // DynamicMetaObject


// type: System.Dynamic.DynamicMetaObjectBinder
    /**
    The dynamic call site binder that participates in the  binding protocol.

    */
open class DynamicMetaObjectBinder
    :
    dotnet.System.Runtime.CompilerServices.CallSiteBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_DynamicMetaObjectBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    When overridden in the derived class, performs the binding of the dynamic operation.

    - Parameter target: The target of the dynamic operation.
    - Parameter args: An array of arguments of the dynamic operation.
    - Returns: The  representing the result of the binding.

    */
    open func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObjectBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression Bind(System.Object[], System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.LabelTarget)
// docid: M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)
    /**
    Performs the runtime binding of the dynamic operation on a set of arguments.

    - Parameter args: An array of arguments to the dynamic operation.
    - Parameter parameters: The array of  instances that represent the parameters of the call site in the binding process.
    - Parameter returnLabel: A LabelTarget used to return the result of the dynamic binding.
    - Returns: An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new  for the new argument types.

    */
    open /* method final */ override func Bind(args : dotnet.System_Arr<dotnet.System.Object>, parameters : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression>, returnLabel : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObjectBinder_Expression__Bind_0__3__ObjectArray_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ParameterExpression__LabelTarget(&__thrown, self.get_handle(), args.get_handle(), parameters.get_handle(), returnLabel.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject Defer(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.

    - Parameter target: The target of the dynamic operation.
    - Parameter args: An array of arguments of the dynamic operation.
    - Returns: The  representing the result of the binding.

    */
    open func Defer(target : dotnet.System.Dynamic.DynamicMetaObject, args : Optional<dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObjectBinder_DynamicMetaObject__Defer_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject Defer(System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])
    /**
    Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.

    - Parameter args: An array of arguments of the dynamic operation.
    - Returns: The  representing the result of the binding.

    */
    open func Defer(args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObjectBinder_DynamicMetaObject__Defer_0__1__DynamicMetaObjectArray(&__thrown, self.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression GetUpdateExpression(System.Type)
// docid: M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)
    /**
    Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.

    - Parameter type: The  property of the resulting expression; any type is allowed.
    - Returns: The update expression.

    */
    open func GetUpdateExpression(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObjectBinder_Expression__GetUpdateExpression_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.DynamicMetaObjectBinder.get_ReturnType
    open func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicMetaObjectBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    The result type of the operation.

    */
    open var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // DynamicMetaObjectBinder


// type: System.Dynamic.DynamicObject
    /**
    Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.

    */
open class DynamicObject
    :
    dotnet.System.Object,
    System_Dynamic_IDynamicMetaObjectProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_DynamicObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<System.String> GetDynamicMemberNames()
// docid: M:System.Dynamic.DynamicObject.GetDynamicMemberNames
    /**
    Returns the enumeration of all dynamic member names.

    - Returns: A sequence that contains dynamic member names.

    */
    open func GetDynamicMemberNames() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicObject_System_Collections_Generic_IEnumerable_string___GetDynamicMemberNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression)
// docid: M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
    /**
    Provides a  that dispatches to the dynamic virtual methods. The object can be encapsulated inside another  to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.

    - Parameter parameter: The expression that represents  to dispatch to the dynamic virtual methods.
    - Returns: An object of the  type.

    */
    open func GetMetaObject(parameter : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicObject_DynamicMetaObject__GetMetaObject_0__1__Expression(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // bool TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
    /**
    Provides implementation for binary operations. Classes derived from the  class can override this method to specify dynamic behavior for operations such as addition and multiplication.

    - Parameter binder: Provides information about the binary operation. The binder.Operation property returns an  object. For example, for the sum = first + second statement, where first and second are derived from the  class, binder.Operation returns ExpressionType.Add.
    - Parameter arg: The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the  class,  is equal to second.
    - Parameter result: The result of the binary operation.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryBinaryOperation(binder : dotnet.System.Dynamic.BinaryOperationBinder, arg : dotnet.System.Object, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryBinaryOperation_0__3__BinaryOperationBinder_Object_outObject(&__thrown, self.get_handle(), binder.get_handle(), arg.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryConvert(System.Dynamic.ConvertBinder, ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
    /**
    Provides implementation for type conversion operations. Classes derived from the  class can override this method to specify dynamic behavior for operations that convert an object from one type to another.

    - Parameter binder: Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the  class, binder.Type returns the  type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns  for explicit conversion and  for implicit conversion.
    - Parameter result: The result of the type conversion operation.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryConvert(binder : dotnet.System.Dynamic.ConvertBinder, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryConvert_0__2__ConvertBinder_outObject(&__thrown, self.get_handle(), binder.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
    /**
    Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.

    - Parameter binder: Provides information about the initialization operation.
    - Parameter args: The arguments that are passed to the object during initialization. For example, for the new SampleType(100) operation, where SampleType is the type derived from the  class, args[0] is equal to 100.
    - Parameter result: The result of the initialization.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryCreateInstance(binder : dotnet.System.Dynamic.CreateInstanceBinder, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryCreateInstance_0__3__CreateInstanceBinder_ObjectArray_outObject(&__thrown, self.get_handle(), binder.get_handle(), (args?.get_handle()), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[])
// docid: M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
    /**
    Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.

    - Parameter binder: Provides information about the deletion.
    - Parameter indexes: The indexes to be deleted.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryDeleteIndex(binder : dotnet.System.Dynamic.DeleteIndexBinder, indexes : dotnet.System_Arr<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicObject_bool__TryDeleteIndex_0__2__DeleteIndexBinder_ObjectArray(&__thrown, self.get_handle(), binder.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryDeleteMember(System.Dynamic.DeleteMemberBinder)
// docid: M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
    /**
    Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.

    - Parameter binder: Provides information about the deletion.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryDeleteMember(binder : dotnet.System.Dynamic.DeleteMemberBinder) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicObject_bool__TryDeleteMember_0__1__DeleteMemberBinder(&__thrown, self.get_handle(), binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
    /**
    Provides the implementation for operations that get a value by index. Classes derived from the  class can override this method to specify dynamic behavior for indexing operations.

    - Parameter binder: Provides information about the operation.
    - Parameter indexes: The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the  class, indexes[0] is equal to 3.
    - Parameter result: The result of the index operation.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)

    */
    open func TryGetIndex(binder : dotnet.System.Dynamic.GetIndexBinder, indexes : dotnet.System_Arr<dotnet.System.Object>, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryGetIndex_0__3__GetIndexBinder_ObjectArray_outObject(&__thrown, self.get_handle(), binder.get_handle(), indexes.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetMember(System.Dynamic.GetMemberBinder, ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
    /**
    Provides the implementation for operations that get member values. Classes derived from the  class can override this method to specify dynamic behavior for operations such as getting a value for a property.

    - Parameter binder: Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the  class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
    - Parameter result: The result of the get operation. For example, if the method is called for a property, you can assign the property value to .
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)

    */
    open func TryGetMember(binder : dotnet.System.Dynamic.GetMemberBinder, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryGetMember_0__2__GetMemberBinder_outObject(&__thrown, self.get_handle(), binder.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryInvoke(System.Dynamic.InvokeBinder, System.Object[], ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
    /**
    Provides the implementation for operations that invoke an object. Classes derived from the  class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.

    - Parameter binder: Provides information about the invoke operation.
    - Parameter args: The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the  class, args[0] is equal to 100.
    - Parameter result: The result of the object invocation.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.

    */
    open func TryInvoke(binder : dotnet.System.Dynamic.InvokeBinder, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryInvoke_0__3__InvokeBinder_ObjectArray_outObject(&__thrown, self.get_handle(), binder.get_handle(), (args?.get_handle()), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
    /**
    Provides the implementation for operations that invoke a member. Classes derived from the  class can override this method to specify dynamic behavior for operations such as calling a method.

    - Parameter binder: Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the  class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
    - Parameter args: The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the  class, args[0] is equal to 100.
    - Parameter result: The result of the member invocation.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryInvokeMember(binder : dotnet.System.Dynamic.InvokeMemberBinder, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryInvokeMember_0__3__InvokeMemberBinder_ObjectArray_outObject(&__thrown, self.get_handle(), binder.get_handle(), (args?.get_handle()), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object)
// docid: M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
    /**
    Provides the implementation for operations that set a value by index. Classes derived from the  class can override this method to specify dynamic behavior for operations that access objects by a specified index.

    - Parameter binder: Provides information about the operation.
    - Parameter indexes: The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the  class, indexes[0] is equal to 3.
    - Parameter value: The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the  class,  is equal to 10.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.

    */
    open func TrySetIndex(binder : dotnet.System.Dynamic.SetIndexBinder, indexes : dotnet.System_Arr<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicObject_bool__TrySetIndex_0__3__SetIndexBinder_ObjectArray_Object(&__thrown, self.get_handle(), binder.get_handle(), indexes.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TrySetMember(System.Dynamic.SetMemberBinder, System.Object)
// docid: M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
    /**
    Provides the implementation for operations that set member values. Classes derived from the  class can override this method to specify dynamic behavior for operations such as setting a value for a property.

    - Parameter binder: Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the  class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
    - Parameter value: The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the  class, the  is "Test".
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TrySetMember(binder : dotnet.System.Dynamic.SetMemberBinder, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_DynamicObject_bool__TrySetMember_0__2__SetMemberBinder_Object(&__thrown, self.get_handle(), binder.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryUnaryOperation(System.Dynamic.UnaryOperationBinder, ref System.Object)
// docid: M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
    /**
    Provides implementation for unary operations. Classes derived from the  class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.

    - Parameter binder: Provides information about the unary operation. The binder.Operation property returns an  object. For example, for the negativeNumber = -number statement, where number is derived from the  class, binder.Operation returns "Negate".
    - Parameter result: The result of the unary operation.
    - Returns: 
         if the operation is successful; otherwise, . If this method returns , the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)

    */
    open func TryUnaryOperation(binder : dotnet.System.Dynamic.UnaryOperationBinder, result : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Dynamic_DynamicObject_bool__TryUnaryOperation_0__2__UnaryOperationBinder_outObject(&__thrown, self.get_handle(), binder.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Object(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DynamicObject


// type: System.Dynamic.ExpandoObject
    /**
    Represents an object whose members can be dynamically added and removed at run time.

    */
public final class ExpandoObject
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_ComponentModel_INotifyPropertyChanged,
    System_Dynamic_IDynamicMetaObjectProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_ExpandoObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Dynamic.ExpandoObject.#ctor
    /**
    Initializes a new  that does not have members.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Dynamic_ExpandoObject_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ExpandoObject


// type: System.Dynamic.GetIndexBinder
    /**
    Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.

    */
open class GetIndexBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_GetIndexBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic get index operation.

    - Parameter target: The target of the dynamic get index operation.
    - Parameter args: An array of arguments of the dynamic get index operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetIndexBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackGetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic get index operation.
    - Parameter indexes: The arguments of the dynamic get index operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackGetIndex(target : dotnet.System.Dynamic.DynamicMetaObject, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetIndexBinder_DynamicMetaObject__FallbackGetIndex_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackGetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic get index operation.
    - Parameter indexes: The arguments of the dynamic get index operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackGetIndex(target : dotnet.System.Dynamic.DynamicMetaObject, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetIndexBinder_DynamicMetaObject__FallbackGetIndex_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), indexes.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.CallInfo get_CallInfo()
// docid: M:System.Dynamic.GetIndexBinder.get_CallInfo
    open func get_CallInfo() throws -> dotnet.System.Dynamic.CallInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetIndexBinder_CallInfo__get_CallInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.CallInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.GetIndexBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetIndexBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the signature of the arguments at the call site.

    */
    open var CallInfo : dotnet.System.Dynamic.CallInfo {
        get {
            return try! get_CallInfo();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // GetIndexBinder


// type: System.Dynamic.GetMemberBinder
    /**
    Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.

    */
open class GetMemberBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_GetMemberBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic get member operation.

    - Parameter target: The target of the dynamic get member operation.
    - Parameter args: An array of arguments of the dynamic get member operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : Optional<dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetMemberBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackGetMember(System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic get member operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackGetMember(target : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetMemberBinder_DynamicMetaObject__FallbackGetMember_0__1__DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackGetMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic get member operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackGetMember(target : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetMemberBinder_DynamicMetaObject__FallbackGetMember_0__2__DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IgnoreCase()
// docid: M:System.Dynamic.GetMemberBinder.get_IgnoreCase
    open func get_IgnoreCase() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetMemberBinder_bool__get_IgnoreCase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Dynamic.GetMemberBinder.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetMemberBinder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.GetMemberBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_GetMemberBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the value indicating if the string comparison should ignore the case of the member name.

    */
    open var IgnoreCase : Bool {
        get {
            return try! get_IgnoreCase();
        }
    }
    /**
    Gets the name of the member to obtain.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // GetMemberBinder


// type: System.Dynamic.IDynamicMetaObjectProvider
    /**
    Represents a dynamic object, that can have its operations bound at runtime.

    */
open class IDynamicMetaObjectProvider
    :
    SGBridgeGenericValue,
    System_Dynamic_IDynamicMetaObjectProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Dynamic_IDynamicMetaObjectProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression)
// docid: M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    /**
    Returns the  responsible for binding operations performed on this object.

    - Parameter parameter: The expression tree representation of the runtime value.
    - Returns: The  to bind this object.

    */
    open func GetMetaObject(parameter : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_IDynamicMetaObjectProvider_DynamicMetaObject__GetMetaObject_0__1__Expression(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
} // IDynamicMetaObjectProvider


// type: System.Dynamic.IInvokeOnGetBinder
    /**
    Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.

    */
open class IInvokeOnGetBinder
    :
    SGBridgeGenericValue,
    System_Dynamic_IInvokeOnGetBinder
{
    open class func get_type_handle() -> TypeHandle {
        return System_Dynamic_IInvokeOnGetBinder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_InvokeOnGet()
// docid: M:System.Dynamic.IInvokeOnGetBinder.get_InvokeOnGet
    open func get_InvokeOnGet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_IInvokeOnGetBinder_bool__get_InvokeOnGet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IInvokeOnGetBinder


// type: System.Dynamic.InvokeBinder
    /**
    Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.

    */
open class InvokeBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_InvokeBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic invoke operation.

    - Parameter target: The target of the dynamic invoke operation.
    - Parameter args: An array of arguments of the dynamic invoke operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic invoke operation.
    - Parameter args: The arguments of the dynamic invoke operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackInvoke(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeBinder_DynamicMetaObject__FallbackInvoke_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic invoke operation.
    - Parameter args: The arguments of the dynamic invoke operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackInvoke(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeBinder_DynamicMetaObject__FallbackInvoke_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), args.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.CallInfo get_CallInfo()
// docid: M:System.Dynamic.InvokeBinder.get_CallInfo
    open func get_CallInfo() throws -> dotnet.System.Dynamic.CallInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeBinder_CallInfo__get_CallInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.CallInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.InvokeBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the signature of the arguments at the call site.

    */
    open var CallInfo : dotnet.System.Dynamic.CallInfo {
        get {
            return try! get_CallInfo();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // InvokeBinder


// type: System.Dynamic.InvokeMemberBinder
    /**
    Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.

    */
open class InvokeMemberBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_InvokeMemberBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic invoke member operation.

    - Parameter target: The target of the dynamic invoke member operation.
    - Parameter args: An array of arguments of the dynamic invoke member operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic invoke operation.
    - Parameter args: The arguments of the dynamic invoke operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackInvoke(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_DynamicMetaObject__FallbackInvoke_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), args.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackInvokeMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic invoke member operation.
    - Parameter args: The arguments of the dynamic invoke member operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackInvokeMember(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_DynamicMetaObject__FallbackInvokeMember_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackInvokeMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic invoke member operation.
    - Parameter args: The arguments of the dynamic invoke member operation.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackInvokeMember(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_DynamicMetaObject__FallbackInvokeMember_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), args.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.CallInfo get_CallInfo()
// docid: M:System.Dynamic.InvokeMemberBinder.get_CallInfo
    open func get_CallInfo() throws -> dotnet.System.Dynamic.CallInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_CallInfo__get_CallInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.CallInfo(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IgnoreCase()
// docid: M:System.Dynamic.InvokeMemberBinder.get_IgnoreCase
    open func get_IgnoreCase() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_bool__get_IgnoreCase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Dynamic.InvokeMemberBinder.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.InvokeMemberBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_InvokeMemberBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the signature of the arguments at the call site.

    */
    open var CallInfo : dotnet.System.Dynamic.CallInfo {
        get {
            return try! get_CallInfo();
        }
    }
    /**
    Gets the value indicating if the string comparison should ignore the case of the member name.

    */
    open var IgnoreCase : Bool {
        get {
            return try! get_IgnoreCase();
        }
    }
    /**
    Gets the name of the member to invoke.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // InvokeMemberBinder


// type: System.Dynamic.SetIndexBinder
    /**
    Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.

    */
open class SetIndexBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_SetIndexBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic set index operation.

    - Parameter target: The target of the dynamic set index operation.
    - Parameter args: An array of arguments of the dynamic set index operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetIndexBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackSetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic set index operation.
    - Parameter indexes: The arguments of the dynamic set index operation.
    - Parameter value: The value to set to the collection.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackSetIndex(target : dotnet.System.Dynamic.DynamicMetaObject, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, value : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetIndexBinder_DynamicMetaObject__FallbackSetIndex_0__3__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), indexes.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackSetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic set index operation.
    - Parameter indexes: The arguments of the dynamic set index operation.
    - Parameter value: The value to set to the collection.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackSetIndex(target : dotnet.System.Dynamic.DynamicMetaObject, indexes : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>, value : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetIndexBinder_DynamicMetaObject__FallbackSetIndex_0__4__DynamicMetaObject_DynamicMetaObjectArray_DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), indexes.get_handle(), value.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Dynamic.CallInfo get_CallInfo()
// docid: M:System.Dynamic.SetIndexBinder.get_CallInfo
    open func get_CallInfo() throws -> dotnet.System.Dynamic.CallInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetIndexBinder_CallInfo__get_CallInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.CallInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.SetIndexBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetIndexBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the signature of the arguments at the call site.

    */
    open var CallInfo : dotnet.System.Dynamic.CallInfo {
        get {
            return try! get_CallInfo();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // SetIndexBinder


// type: System.Dynamic.SetMemberBinder
    /**
    Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.

    */
open class SetMemberBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_SetMemberBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic set member operation.

    - Parameter target: The target of the dynamic set member operation.
    - Parameter args: An array of arguments of the dynamic set member operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetMemberBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackSetMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic set member operation.
    - Parameter value: The value to set to the member.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackSetMember(target : dotnet.System.Dynamic.DynamicMetaObject, value : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetMemberBinder_DynamicMetaObject__FallbackSetMember_0__2__DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackSetMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic set member operation.
    - Parameter value: The value to set to the member.
    - Parameter errorSuggestion: The binding result to use if binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackSetMember(target : dotnet.System.Dynamic.DynamicMetaObject, value : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetMemberBinder_DynamicMetaObject__FallbackSetMember_0__3__DynamicMetaObject_DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), value.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IgnoreCase()
// docid: M:System.Dynamic.SetMemberBinder.get_IgnoreCase
    open func get_IgnoreCase() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetMemberBinder_bool__get_IgnoreCase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Dynamic.SetMemberBinder.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetMemberBinder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.SetMemberBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_SetMemberBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the value indicating if the string comparison should ignore the case of the member name.

    */
    open var IgnoreCase : Bool {
        get {
            return try! get_IgnoreCase();
        }
    }
    /**
    Gets the name of the member to obtain.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // SetMemberBinder


// type: System.Dynamic.UnaryOperationBinder
    /**
    Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.

    */
open class UnaryOperationBinder
    :
    dotnet.System.Dynamic.DynamicMetaObjectBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Dynamic_UnaryOperationBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])
// docid: M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])
    /**
    Performs the binding of the dynamic unary operation.

    - Parameter target: The target of the dynamic operation.
    - Parameter args: An array of arguments of the dynamic operation.
    - Returns: The  representing the result of the binding.

    */
    open /* method final */ override func Bind(target : dotnet.System.Dynamic.DynamicMetaObject, args : Optional<dotnet.System_Arr<dotnet.System.Dynamic.DynamicMetaObject>>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_UnaryOperationBinder_DynamicMetaObject__Bind_0__2__DynamicMetaObject_DynamicMetaObjectArray(&__thrown, self.get_handle(), target.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic unary operation.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackUnaryOperation(target : dotnet.System.Dynamic.DynamicMetaObject) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_UnaryOperationBinder_DynamicMetaObject__FallbackUnaryOperation_0__1__DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // System.Dynamic.DynamicMetaObject FallbackUnaryOperation(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)
// docid: M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)
    /**
    Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.

    - Parameter target: The target of the dynamic unary operation.
    - Parameter errorSuggestion: The binding result in case the binding fails, or null.
    - Returns: The  representing the result of the binding.

    */
    open func FallbackUnaryOperation(target : dotnet.System.Dynamic.DynamicMetaObject, errorSuggestion : Optional<dotnet.System.Dynamic.DynamicMetaObject>) throws -> dotnet.System.Dynamic.DynamicMetaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_UnaryOperationBinder_DynamicMetaObject__FallbackUnaryOperation_0__2__DynamicMetaObject_DynamicMetaObject(&__thrown, self.get_handle(), target.get_handle(), errorSuggestion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Dynamic.DynamicMetaObject(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_Operation()
// docid: M:System.Dynamic.UnaryOperationBinder.get_Operation
    open func get_Operation() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_UnaryOperationBinder_ExpressionType__get_Operation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Dynamic.UnaryOperationBinder.get_ReturnType
    open /* method final */ override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Dynamic_UnaryOperationBinder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    The unary operation kind.

    */
    open var Operation : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_Operation();
        }
    }
    /**
    The result type of the operation.

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
} // UnaryOperationBinder


}

// System.Linq
extension System.Linq {
// type: System.Linq.IOrderedQueryable
    /**
    Represents the result of a sorting operation.

    */
open class IOrderedQueryable
    :
    SGBridgeGenericValue,
    System_Linq_IOrderedQueryable,
    System_Linq_IQueryable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IOrderedQueryable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IOrderedQueryable


// type: System.Linq.IOrderedQueryable`1
    /**
    Represents the result of a sorting operation.

    */
open class IOrderedQueryable_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Linq_IOrderedQueryable_1,
    System_Linq_IOrderedQueryable
{
    public typealias T_IOrderedQueryable_1 = T;
    public typealias T_IEnumerable_1 = T;
    public typealias T_IQueryable_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IOrderedQueryable_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IOrderedQueryable_1


// type: System.Linq.IQueryProvider
    /**
    Defines methods to create and execute queries that are described by an  object.

    */
open class IQueryProvider
    :
    SGBridgeGenericValue,
    System_Linq_IQueryProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IQueryProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Linq.IQueryable CreateQuery(System.Linq.Expressions.Expression)
// docid: M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
    /**
    Constructs an  object that can evaluate the query represented by a specified expression tree.

    - Parameter expression: An expression tree that represents a LINQ query.
    - Returns: An  that can evaluate the query represented by the specified expression tree.

    */
    open func CreateQuery(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.IQueryable {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IQueryProvider_IQueryable__CreateQuery_0__1__Expression(&__thrown, self.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression)
    // System.Object Execute(System.Linq.Expressions.Expression)
// docid: M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
    /**
    Executes the query represented by a specified expression tree.

    - Parameter expression: An expression tree that represents a LINQ query.
    - Returns: The value that results from executing the specified query.

    */
    open func Execute(expression : dotnet.System.Linq.Expressions.Expression) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IQueryProvider_Object__Execute_0__1__Expression(&__thrown, self.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TResult Execute<TResult>(System.Linq.Expressions.Expression)
} // IQueryProvider


// type: System.Linq.IQueryable
    /**
    Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.

    */
open class IQueryable
    :
    SGBridgeGenericValue,
    System_Linq_IQueryable,
    System_Collections_IEnumerable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IQueryable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Type get_ElementType()
// docid: M:System.Linq.IQueryable.get_ElementType
    open func get_ElementType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IQueryable_Type__get_ElementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Expression()
// docid: M:System.Linq.IQueryable.get_Expression
    open func get_Expression() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IQueryable_Expression__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.IQueryProvider get_Provider()
// docid: M:System.Linq.IQueryable.get_Provider
    open func get_Provider() throws -> dotnet.System.Linq.IQueryProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IQueryable_IQueryProvider__get_Provider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryProvider(hndl : __return);
        }
    }
} // IQueryable


// type: System.Linq.IQueryable`1
    /**
    Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.

    */
open class IQueryable_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Linq_IQueryable_1,
    System_Linq_IQueryable
{
    public typealias T_IQueryable_1 = T;
    public typealias T_IEnumerable_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IQueryable_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IQueryable_1


}
// System.Linq.Expressions
extension System.Linq.Expressions {
// type: System.Linq.Expressions.BinaryExpression
    /**
    Represents an expression that has a binary operator.

    */
open class BinaryExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_BinaryExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.Expression Reduce()
// docid: M:System.Linq.Expressions.BinaryExpression.Reduce
    /**
    Reduces the binary expression node to a simpler expression.

    - Returns: The reduced expression.

    */
    open override func Reduce() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_Expression__Reduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Update(System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter left: The  property of the result.
    - Parameter conversion: The  property of the result.
    - Parameter right: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    open func Update(left : dotnet.System.Linq.Expressions.Expression, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_BinaryExpression__Update_0__3__Expression_LambdaExpression_Expression(&__thrown, self.get_handle(), left.get_handle(), conversion?.get_handle() ?? nil, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReduce()
// docid: M:System.Linq.Expressions.BinaryExpression.get_CanReduce
    open override func get_CanReduce() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_bool__get_CanReduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.LambdaExpression get_Conversion()
// docid: M:System.Linq.Expressions.BinaryExpression.get_Conversion
    open func get_Conversion() throws -> Optional<dotnet.System.Linq.Expressions.LambdaExpression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_LambdaExpression__get_Conversion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsLifted()
// docid: M:System.Linq.Expressions.BinaryExpression.get_IsLifted
    open func get_IsLifted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_bool__get_IsLifted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLiftedToNull()
// docid: M:System.Linq.Expressions.BinaryExpression.get_IsLiftedToNull
    open func get_IsLiftedToNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_bool__get_IsLiftedToNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Left()
// docid: M:System.Linq.Expressions.BinaryExpression.get_Left
    open func get_Left() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_Expression__get_Left_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_Method()
// docid: M:System.Linq.Expressions.BinaryExpression.get_Method
    open func get_Method() throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_MethodInfo__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Right()
// docid: M:System.Linq.Expressions.BinaryExpression.get_Right
    open func get_Right() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BinaryExpression_Expression__get_Right_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    /**
    Gets a value that indicates whether the expression tree node can be reduced.

    */
    open override var CanReduce : Bool {
        get {
            return try! get_CanReduce();
        }
    }
    /**
    Gets the type conversion function that is used by a coalescing or compound assignment operation.

    */
    open var Conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression> {
        get {
            return try! get_Conversion();
        }
    }
    /**
    Gets a value that indicates whether the expression tree node represents a lifted call to an operator.

    */
    open var IsLifted : Bool {
        get {
            return try! get_IsLifted();
        }
    }
    /**
    Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.

    */
    open var IsLiftedToNull : Bool {
        get {
            return try! get_IsLiftedToNull();
        }
    }
    /**
    Gets the left operand of the binary operation.

    */
    open var Left : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Left();
        }
    }
    /**
    Gets the implementing method for the binary operation.

    */
    open var Method : Optional<dotnet.System.Reflection.MethodInfo> {
        get {
            return try! get_Method();
        }
    }
    /**
    Gets the right operand of the binary operation.

    */
    open var Right : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Right();
        }
    }
} // BinaryExpression


// type: System.Linq.Expressions.BlockExpression
    /**
    Represents a block that contains a sequence of expressions where variables can be defined.

    */
open class BlockExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_BlockExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.BlockExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter variables: The  property of the result.
    - Parameter expressions: The  property of the result.
    - Returns: This expression if no children changed, or an expression with the updated children.

    */
    open func Update(variables : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>, expressions : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BlockExpression_BlockExpression__Update_0__2__System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), (variables?.get_handle()), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Expressions()
// docid: M:System.Linq.Expressions.BlockExpression.get_Expressions
    open func get_Expressions() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BlockExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Expressions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.BlockExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BlockExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Result()
// docid: M:System.Linq.Expressions.BlockExpression.get_Result
    open func get_Result() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BlockExpression_Expression__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.BlockExpression.get_Type
    open override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BlockExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> get_Variables()
// docid: M:System.Linq.Expressions.BlockExpression.get_Variables
    open func get_Variables() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_BlockExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ParameterExpression___get_Variables_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    Gets the expressions in this block.

    */
    open var Expressions : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Expressions();
        }
    }
    /**
    Returns the node type of this expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the last expression in this block.

    */
    open var Result : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Result();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
    /**
    Gets the variables defined in this block.

    */
    open var Variables : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression> {
        get {
            return try! get_Variables();
        }
    }
} // BlockExpression


// type: System.Linq.Expressions.CatchBlock
    /**
    Represents a catch statement in a try block.

    */
public final class CatchBlock
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_CatchBlock_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Linq.Expressions.CatchBlock.ToString
    /**
    Returns a  that represents the current .

    - Returns: A  that represents the current .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_CatchBlock_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Linq.Expressions.CatchBlock Update(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter variable: The  property of the result.
    - Parameter filter: The  property of the result.
    - Parameter body: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(variable : Optional<dotnet.System.Linq.Expressions.ParameterExpression>, filter : Optional<dotnet.System.Linq.Expressions.Expression>, body : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.CatchBlock {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_CatchBlock_CatchBlock__Update_0__3__ParameterExpression_Expression_Expression(&__thrown, self.get_handle(), variable?.get_handle() ?? nil, filter?.get_handle() ?? nil, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.CatchBlock(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Body()
// docid: M:System.Linq.Expressions.CatchBlock.get_Body
    public func get_Body() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_CatchBlock_Expression__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Filter()
// docid: M:System.Linq.Expressions.CatchBlock.get_Filter
    public func get_Filter() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_CatchBlock_Expression__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Test()
// docid: M:System.Linq.Expressions.CatchBlock.get_Test
    public func get_Test() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_CatchBlock_Type__get_Test_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ParameterExpression get_Variable()
// docid: M:System.Linq.Expressions.CatchBlock.get_Variable
    public func get_Variable() throws -> Optional<dotnet.System.Linq.Expressions.ParameterExpression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_CatchBlock_ParameterExpression__get_Variable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.ParameterExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the body of the catch block.

    */
    public var Body : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Body();
        }
    }
    /**
    Gets the body of the  filter.

    */
    public var Filter : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Filter();
        }
    }
    /**
    Gets the type of  this handler catches.

    */
    public var Test : dotnet.System.Type_ {
        get {
            return try! get_Test();
        }
    }
    /**
    Gets a reference to the  object caught by this handler.

    */
    public var Variable : Optional<dotnet.System.Linq.Expressions.ParameterExpression> {
        get {
            return try! get_Variable();
        }
    }
} // CatchBlock


// type: System.Linq.Expressions.ConditionalExpression
    /**
    Represents an expression that has a conditional operator.

    */
open class ConditionalExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ConditionalExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.ConditionalExpression Update(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter test: The  property of the result.
    - Parameter ifTrue: The  property of the result.
    - Parameter ifFalse: The  property of the result.
    - Returns: This expression if no children changed, or an expression with the updated children.

    */
    open func Update(test : dotnet.System.Linq.Expressions.Expression, ifTrue : dotnet.System.Linq.Expressions.Expression, ifFalse : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.ConditionalExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConditionalExpression_ConditionalExpression__Update_0__3__Expression_Expression_Expression(&__thrown, self.get_handle(), test.get_handle(), ifTrue.get_handle(), ifFalse.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConditionalExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_IfFalse()
// docid: M:System.Linq.Expressions.ConditionalExpression.get_IfFalse
    open func get_IfFalse() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConditionalExpression_Expression__get_IfFalse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_IfTrue()
// docid: M:System.Linq.Expressions.ConditionalExpression.get_IfTrue
    open func get_IfTrue() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConditionalExpression_Expression__get_IfTrue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.ConditionalExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConditionalExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Test()
// docid: M:System.Linq.Expressions.ConditionalExpression.get_Test
    open func get_Test() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConditionalExpression_Expression__get_Test_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.ConditionalExpression.get_Type
    open override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConditionalExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the expression to execute if the test evaluates to .

    */
    open var IfFalse : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_IfFalse();
        }
    }
    /**
    Gets the expression to execute if the test evaluates to .

    */
    open var IfTrue : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_IfTrue();
        }
    }
    /**
    Returns the node type of this expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the test of the conditional operation.

    */
    open var Test : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Test();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // ConditionalExpression


// type: System.Linq.Expressions.ConstantExpression
    /**
    Represents an expression that has a constant value.

    */
open class ConstantExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ConstantExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.ConstantExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConstantExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.ConstantExpression.get_Type
    open override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConstantExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Linq.Expressions.ConstantExpression.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ConstantExpression_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Returns the node type of this Expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
    /**
    Gets the value of the constant expression.

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // ConstantExpression


// type: System.Linq.Expressions.DebugInfoExpression
    /**
    Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.

    */
open class DebugInfoExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_DebugInfoExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Linq.Expressions.SymbolDocumentInfo get_Document()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_Document
    open func get_Document() throws -> dotnet.System.Linq.Expressions.SymbolDocumentInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_SymbolDocumentInfo__get_Document_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SymbolDocumentInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_EndColumn()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_EndColumn
    open func get_EndColumn() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_i32__get_EndColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_EndLine()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_EndLine
    open func get_EndLine() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_i32__get_EndLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsClear()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_IsClear
    open func get_IsClear() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_bool__get_IsClear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_StartColumn()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_StartColumn
    open func get_StartColumn() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_i32__get_StartColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_StartLine()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_StartLine
    open func get_StartLine() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_i32__get_StartLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.DebugInfoExpression.get_Type
    open /* method final */ override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DebugInfoExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the  that represents the source file.

    */
    open var Document : dotnet.System.Linq.Expressions.SymbolDocumentInfo {
        get {
            return try! get_Document();
        }
    }
    /**
    Gets the end column of this .

    */
    open var EndColumn : Swift.Int32 {
        get {
            return try! get_EndColumn();
        }
    }
    /**
    Gets the end line of this .

    */
    open var EndLine : Swift.Int32 {
        get {
            return try! get_EndLine();
        }
    }
    /**
    Gets the value to indicate if the  is for clearing a sequence point.

    */
    open var IsClear : Bool {
        get {
            return try! get_IsClear();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the start column of this .

    */
    open var StartColumn : Swift.Int32 {
        get {
            return try! get_StartColumn();
        }
    }
    /**
    Gets the start line of this .

    */
    open var StartLine : Swift.Int32 {
        get {
            return try! get_StartLine();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // DebugInfoExpression


// type: System.Linq.Expressions.DefaultExpression
    /**
    Represents the default value of a type or an empty expression.

    */
public final class DefaultExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_DefaultExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.DefaultExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DefaultExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.DefaultExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DefaultExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Returns the node type of this expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // DefaultExpression


// type: System.Linq.Expressions.DynamicExpression
    /**
    Represents a dynamic operation.

    */
open class DynamicExpression
    :
    dotnet.System.Linq.Expressions.Expression,
    System_Linq_Expressions_IArgumentProvider,
    System_Linq_Expressions_IDynamicExpression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_DynamicExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to ,  and has the  and  set to the specified values.

    */
    open class override func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arguments : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Dynamic_0__3__CallSiteBinder_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, binder.get_handle(), returnType.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Returns: A  that has  equal to ,  and has the  and  set to the specified values.

    */
    open class override func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Dynamic_0__3__CallSiteBinder_Type_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the  and  set to the specified values.

    */
    open class override func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Dynamic_0__4__CallSiteBinder_Type_Expression_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the  and  set to the specified values.

    */
    open class override func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Dynamic_0__5__CallSiteBinder_Type_Expression_Expression_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Parameter arg3: The fourth argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the  and  set to the specified values.

    */
    open class override func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Dynamic_0__6__CallSiteBinder_Type_Expression_Expression_Expression_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to , and has the  and  set to the specified values.

    */
    open class override func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arguments : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Dynamic_0__3__CallSiteBinder_Type_ExpressionArray(&__thrown, binder.get_handle(), returnType.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to , and has the , , and  set to the specified values.

    */
    open class override func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__MakeDynamic_0__3__Type_CallSiteBinder_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, delegateType.get_handle(), binder.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and one argument.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the , , and  set to the specified values.

    */
    open class override func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__MakeDynamic_0__3__Type_CallSiteBinder_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and two arguments.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the , , and  set to the specified values.

    */
    open class override func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__MakeDynamic_0__4__Type_CallSiteBinder_Expression_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and three arguments.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the , , and  set to the specified values.

    */
    open class override func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__MakeDynamic_0__5__Type_CallSiteBinder_Expression_Expression_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and four arguments.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Parameter arg3: The fourth argument to the dynamic operation.
    - Returns: A  that has  equal to , and has the , , and  set to the specified values.

    */
    open class override func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__MakeDynamic_0__6__Type_CallSiteBinder_Expression_Expression_Expression_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to , and has the , , and  set to the specified values.

    */
    open class override func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__MakeDynamic_0__3__Type_CallSiteBinder_ExpressionArray(&__thrown, delegateType.get_handle(), binder.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Compares the value sent to the parameter, , to the  property of the current instance of . If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new  instance is returned that is identical to the current instance except that the  property is set to the value of parameter .

    - Parameter arguments: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    open func Update(arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_DynamicExpression__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Arguments()
// docid: M:System.Linq.Expressions.DynamicExpression.get_Arguments
    open func get_Arguments() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Runtime.CompilerServices.CallSiteBinder get_Binder()
// docid: M:System.Linq.Expressions.DynamicExpression.get_Binder
    open func get_Binder() throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_CallSiteBinder__get_Binder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_DelegateType()
// docid: M:System.Linq.Expressions.DynamicExpression.get_DelegateType
    open /* method final */ func get_DelegateType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_Type__get_DelegateType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.DynamicExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.DynamicExpression.get_Type
    open override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_DynamicExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the arguments to the dynamic operation.

    */
    open var Arguments : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets the , which determines the run-time behavior of the dynamic site.

    */
    open var Binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        get {
            return try! get_Binder();
        }
    }
    /**
    Gets the type of the delegate used by the .

    */
    public var DelegateType : dotnet.System.Type_ {
        get {
            return try! get_DelegateType();
        }
    }
    /**
    Returns the node type of this expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // DynamicExpression


// type: System.Linq.Expressions.DynamicExpressionVisitor
    /**
    Represents a visitor or rewriter for dynamic expression trees.

    */
open class DynamicExpressionVisitor
    :
    dotnet.System.Linq.Expressions.ExpressionVisitor
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_DynamicExpressionVisitor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // DynamicExpressionVisitor


// type: System.Linq.Expressions.ElementInit
    /**
    Represents an initializer for a single element of an  collection.

    */
public final class ElementInit
    :
    dotnet.System.Object,
    System_Linq_Expressions_IArgumentProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ElementInit_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Linq.Expressions.ElementInit.ToString
    /**
    Returns a textual representation of an  object.

    - Returns: A textual representation of the  object.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ElementInit_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Linq.Expressions.ElementInit Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter arguments: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(arguments : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ElementInit {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ElementInit_ElementInit__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ElementInit(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_AddMethod()
// docid: M:System.Linq.Expressions.ElementInit.get_AddMethod
    public func get_AddMethod() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ElementInit_MethodInfo__get_AddMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Arguments()
// docid: M:System.Linq.Expressions.ElementInit.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ElementInit_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    Gets the instance method that is used to add an element to an  collection.

    */
    public var AddMethod : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_AddMethod();
        }
    }
    /**
    Gets the collection of arguments that are passed to a method that adds an element to an  collection.

    */
    public var Arguments : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Arguments();
        }
    }
} // ElementInit


// type: System.Linq.Expressions.Expression
    /**
    Provides the base class from which the classes that represent expression tree nodes are derived. It also contains  ( in Visual Basic) factory methods to create the various node types. This is an  class.

    */
open class Expression
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_Expression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.BinaryExpression Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic addition operation that does not have overflow checking.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Add(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Add_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the ,  and  properties set to the specified values.

    */
    open class func Add(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Add_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an addition assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func AddAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an addition assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func AddAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents an addition assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func AddAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an addition assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func AddAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddAssignChecked_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an addition assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func AddAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddAssignChecked_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents an addition assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func AddAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddAssignChecked_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic addition operation that has overflow checking.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func AddChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddChecked_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the ,  and  properties set to the specified values.

    */
    open class func AddChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AddChecked_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise  operation.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func And(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__And_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise  operation. The implementing method can be specified.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func And(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__And_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a conditional  operation that evaluates the second operand only if the first operand evaluates to .

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func AndAlso(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AndAlso_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a conditional  operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func AndAlso(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AndAlso_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise AND assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func AndAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AndAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise AND assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func AndAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AndAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a bitwise AND assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func AndAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__AndAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.IndexExpression ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates an  to access a multidimensional array.

    - Parameter array: An expression that represents the multidimensional array.
    - Parameter indexes: An  containing expressions used to index the array.
    - Returns: The created .

    */
    open class func ArrayAccess(array : dotnet.System.Linq.Expressions.Expression, indexes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_IndexExpression__ArrayAccess_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, array.get_handle(), (indexes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.IndexExpression ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
    /**
    Creates an  to access an array.

    - Parameter array: An expression representing the array to index.
    - Parameter indexes: An array that contains expressions used to index the array.
    - Returns: The created .

    */
    open class func ArrayAccess(array : dotnet.System.Linq.Expressions.Expression, indexes : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_IndexExpression__ArrayAccess_0__2__Expression_ExpressionArray(&__thrown, array.get_handle(), (indexes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents applying an array index operator to an array of rank more than one.

    - Parameter array: An  to set the  property equal to.
    - Parameter indexes: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ArrayIndex(array : dotnet.System.Linq.Expressions.Expression, indexes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__ArrayIndex_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, array.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents applying an array index operator to an array of rank one.

    - Parameter array: A  to set the  property equal to.
    - Parameter index: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ArrayIndex(array : dotnet.System.Linq.Expressions.Expression, index : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ArrayIndex_0__2__Expression_Expression(&__thrown, array.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents applying an array index operator to a multidimensional array.

    - Parameter array: An array of  instances - indexes for the array index operation.
    - Parameter indexes: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ArrayIndex(array : dotnet.System.Linq.Expressions.Expression, indexes : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__ArrayIndex_0__2__Expression_ExpressionArray(&__thrown, array.get_handle(), indexes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression ArrayLength(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an expression for obtaining the length of a one-dimensional array.

    - Parameter array: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property equal to .

    */
    open class func ArrayLength(array : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__ArrayLength_0__1__Expression(&__thrown, array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Assign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Assign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberAssignment Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents the initialization of a field or property.

    - Parameter member: A  to set the  property equal to.
    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has  equal to  and the  and  properties set to the specified values.

    */
    open class func Bind(member : dotnet.System.Reflection.MemberInfo, expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MemberAssignment {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberAssignment__Bind_0__2__MemberInfo_Expression(&__thrown, member.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberAssignment(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberAssignment Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents the initialization of a member by using a property accessor method.

    - Parameter propertyAccessor: A  that represents a property accessor method.
    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has the  property equal to , the  property set to the  that represents the property accessed in , and the  property set to .

    */
    open class func Bind(propertyAccessor : dotnet.System.Reflection.MethodInfo, expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MemberAssignment {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberAssignment__Bind_0__2__MethodInfo_Expression(&__thrown, propertyAccessor.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberAssignment(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that contains the given expressions and has no variables.

    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(expressions : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that contains the given variables and expressions.

    - Parameter variables: The variables in the block.
    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(variables : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>, expressions : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__2__System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, (variables?.get_handle()), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
    /**
    Creates a  that contains the given variables and expressions.

    - Parameter variables: The variables in the block.
    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(variables : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>, expressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__2__System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__ExpressionArray(&__thrown, (variables?.get_handle()), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that contains two expressions and has no variables.

    - Parameter arg0: The first expression in the block.
    - Parameter arg1: The second expression in the block.
    - Returns: The created .

    */
    open class func Block(arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__2__Expression_Expression(&__thrown, arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that contains three expressions and has no variables.

    - Parameter arg0: The first expression in the block.
    - Parameter arg1: The second expression in the block.
    - Parameter arg2: The third expression in the block.
    - Returns: The created .

    */
    open class func Block(arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__3__Expression_Expression_Expression(&__thrown, arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that contains four expressions and has no variables.

    - Parameter arg0: The first expression in the block.
    - Parameter arg1: The second expression in the block.
    - Parameter arg2: The third expression in the block.
    - Parameter arg3: The fourth expression in the block.
    - Returns: The created .

    */
    open class func Block(arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__4__Expression_Expression_Expression_Expression(&__thrown, arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that contains five expressions and has no variables.

    - Parameter arg0: The first expression in the block.
    - Parameter arg1: The second expression in the block.
    - Parameter arg2: The third expression in the block.
    - Parameter arg3: The fourth expression in the block.
    - Parameter arg4: The fifth expression in the block.
    - Returns: The created .

    */
    open class func Block(arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression, arg4 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__5__Expression_Expression_Expression_Expression_Expression(&__thrown, arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle(), arg4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
    /**
    Creates a  that contains the given expressions and has no variables.

    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(expressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__1__ExpressionArray(&__thrown, expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that contains the given expressions, has no variables and has specific result type.

    - Parameter type: The result type of the block.
    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(type : dotnet.System.Type_, expressions : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__2__Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, type.get_handle(), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that contains the given variables and expressions.

    - Parameter type: The result type of the block.
    - Parameter variables: The variables in the block.
    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(type : dotnet.System.Type_, variables : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>, expressions : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__3__Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, type.get_handle(), (variables?.get_handle()), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
    /**
    Creates a  that contains the given variables and expressions.

    - Parameter type: The result type of the block.
    - Parameter variables: The variables in the block.
    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(type : dotnet.System.Type_, variables : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>, expressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__3__Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__ExpressionArray(&__thrown, type.get_handle(), (variables?.get_handle()), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BlockExpression Block(System.Type, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
    /**
    Creates a  that contains the given expressions, has no variables and has specific result type.

    - Parameter type: The result type of the block.
    - Parameter expressions: The expressions in the block.
    - Returns: The created .

    */
    open class func Block(type : dotnet.System.Type_, expressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.BlockExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BlockExpression__Block_0__2__Type_ExpressionArray(&__thrown, type.get_handle(), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BlockExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
    /**
    Creates a  representing a break statement.

    - Parameter target: The  that the  will jump to.
    - Returns: A  with  equal to Break, the  property set to , and a null value to be passed to the target label upon jumping.

    */
    open class func Break(target : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Break_0__1__LabelTarget(&__thrown, target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a break statement. The value passed to the label upon jumping can be specified.

    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Returns: A  with  equal to Break, the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func Break(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Break_0__2__LabelTarget_Expression(&__thrown, target.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  representing a break statement with the specified type. The value passed to the label upon jumping can be specified.

    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Break, the  property set to , the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func Break(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Break_0__3__LabelTarget_Expression_Type(&__thrown, target.get_handle(), value?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget, System.Type)
// docid: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
    /**
    Creates a  representing a break statement with the specified type.

    - Parameter target: The  that the  will jump to.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Break, the  property set to , and the  property set to .

    */
    open class func Break(target : dotnet.System.Linq.Expressions.LabelTarget, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Break_0__2__LabelTarget_Type(&__thrown, target.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a call to a method that takes no arguments.

    - Parameter instance: An  that specifies the instance for an instance method call (pass  for a  ( in Visual Basic) method).
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(instance : Optional<dotnet.System.Linq.Expressions.Expression>, method : dotnet.System.Reflection.MethodInfo) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__2__Expression_MethodInfo(&__thrown, instance?.get_handle() ?? nil, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents a call to a method that takes arguments.

    - Parameter instance: An  to set the  property equal to (pass  for a  ( in Visual Basic) method).
    - Parameter method: A  to set the  property equal to.
    - Parameter arguments: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Call(instance : Optional<dotnet.System.Linq.Expressions.Expression>, method : dotnet.System.Reflection.MethodInfo, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__3__Expression_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, instance?.get_handle() ?? nil, method.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a method that takes two arguments.

    - Parameter instance: An  that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - Parameter method: The  that represents the target method.
    - Parameter arg0: The  that represents the first argument.
    - Parameter arg1: The  that represents the second argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(instance : Optional<dotnet.System.Linq.Expressions.Expression>, method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__4__Expression_MethodInfo_Expression_Expression(&__thrown, instance?.get_handle() ?? nil, method.get_handle(), arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a method that takes three arguments.

    - Parameter instance: An  that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - Parameter method: The  that represents the target method.
    - Parameter arg0: The  that represents the first argument.
    - Parameter arg1: The  that represents the second argument.
    - Parameter arg2: The  that represents the third argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(instance : Optional<dotnet.System.Linq.Expressions.Expression>, method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__5__Expression_MethodInfo_Expression_Expression_Expression(&__thrown, instance?.get_handle() ?? nil, method.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a call to a method that takes arguments.

    - Parameter instance: An  that specifies the instance for an instance method call (pass  for a  ( in Visual Basic) method).
    - Parameter method: A  to set the  property equal to.
    - Parameter arguments: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Call(instance : Optional<dotnet.System.Linq.Expressions.Expression>, method : dotnet.System.Reflection.MethodInfo, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__3__Expression_MethodInfo_ExpressionArray(&__thrown, instance?.get_handle() ?? nil, method.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a call to a method by calling the appropriate factory method.

    - Parameter instance: An  whose  property value will be searched for a specific method.
    - Parameter methodName: The name of the method.
    - Parameter typeArguments: An array of  objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - Parameter arguments: An array of  objects that represents the arguments to the method.
    - Returns: A  that has the  property equal to , the  property equal to ,  set to the  that represents the specified instance method, and  set to the specified arguments.

    */
    open class func Call(instance : dotnet.System.Linq.Expressions.Expression, methodName : dotnet.System.String, typeArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__4__Expression_String_TypeArray_ExpressionArray(&__thrown, instance.get_handle(), methodName.get_handle(), (typeArguments?.get_handle()), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents a call to a static (Shared in Visual Basic) method.

    - Parameter method: The  that represents the target method.
    - Parameter arguments: A collection of  that represents the call arguments.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__2__MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, method.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a  ( in Visual Basic) method that takes one argument.

    - Parameter method: A  to set the  property equal to.
    - Parameter arg0: The  that represents the first argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__2__MethodInfo_Expression(&__thrown, method.get_handle(), arg0.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a static method that takes two arguments.

    - Parameter method: A  to set the  property equal to.
    - Parameter arg0: The  that represents the first argument.
    - Parameter arg1: The  that represents the second argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__3__MethodInfo_Expression_Expression(&__thrown, method.get_handle(), arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a static method that takes three arguments.

    - Parameter method: A  to set the  property equal to.
    - Parameter arg0: The  that represents the first argument.
    - Parameter arg1: The  that represents the second argument.
    - Parameter arg2: The  that represents the third argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__4__MethodInfo_Expression_Expression_Expression(&__thrown, method.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a static method that takes four arguments.

    - Parameter method: A  to set the  property equal to.
    - Parameter arg0: The  that represents the first argument.
    - Parameter arg1: The  that represents the second argument.
    - Parameter arg2: The  that represents the third argument.
    - Parameter arg3: The  that represents the fourth argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__5__MethodInfo_Expression_Expression_Expression_Expression(&__thrown, method.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a call to a static method that takes five arguments.

    - Parameter method: A  to set the  property equal to.
    - Parameter arg0: The  that represents the first argument.
    - Parameter arg1: The  that represents the second argument.
    - Parameter arg2: The  that represents the third argument.
    - Parameter arg3: The  that represents the fourth argument.
    - Parameter arg4: The  that represents the fifth argument.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression, arg4 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__6__MethodInfo_Expression_Expression_Expression_Expression_Expression(&__thrown, method.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle(), arg4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a call to a  ( in Visual Basic) method that has arguments.

    - Parameter method: A  that represents a  ( in Visual Basic) method to set the  property equal to.
    - Parameter arguments: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Call(method : dotnet.System.Reflection.MethodInfo, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__2__MethodInfo_ExpressionArray(&__thrown, method.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MethodCallExpression Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a call to a  ( in Visual Basic) method by calling the appropriate factory method.

    - Parameter type: The type that contains the specified  ( in Visual Basic) method.
    - Parameter methodName: The name of the method.
    - Parameter typeArguments: An array of  objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - Parameter arguments: An array of  objects that represent the arguments to the method.
    - Returns: A  that has the  property equal to , the  property set to the  that represents the specified  ( in Visual Basic) method, and the  property set to the specified arguments.

    */
    open class func Call(type : dotnet.System.Type_, methodName : dotnet.System.String, typeArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MethodCallExpression__Call_0__4__Type_String_TypeArray_ExpressionArray(&__thrown, type.get_handle(), methodName.get_handle(), (typeArguments?.get_handle()), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.CatchBlock Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a catch statement with a reference to the caught  object for use in the handler body.

    - Parameter variable: A  representing a reference to the  object caught by this handler.
    - Parameter body: The body of the catch statement.
    - Returns: The created .

    */
    open class func Catch(variable : dotnet.System.Linq.Expressions.ParameterExpression, body : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.CatchBlock {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_CatchBlock__Catch_0__2__ParameterExpression_Expression(&__thrown, variable.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.CatchBlock(hndl : __return);
        }
    }
    // System.Linq.Expressions.CatchBlock Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a catch statement with an  filter and a reference to the caught  object.

    - Parameter variable: A  representing a reference to the  object caught by this handler.
    - Parameter body: The body of the catch statement.
    - Parameter filter: The body of the  filter.
    - Returns: The created .

    */
    open class func Catch(variable : dotnet.System.Linq.Expressions.ParameterExpression, body : dotnet.System.Linq.Expressions.Expression, filter : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.CatchBlock {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_CatchBlock__Catch_0__3__ParameterExpression_Expression_Expression(&__thrown, variable.get_handle(), body.get_handle(), filter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.CatchBlock(hndl : __return);
        }
    }
    // System.Linq.Expressions.CatchBlock Catch(System.Type, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a catch statement.

    - Parameter type: The  of  this  will handle.
    - Parameter body: The body of the catch statement.
    - Returns: The created .

    */
    open class func Catch(type : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.CatchBlock {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_CatchBlock__Catch_0__2__Type_Expression(&__thrown, type.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.CatchBlock(hndl : __return);
        }
    }
    // System.Linq.Expressions.CatchBlock Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a catch statement with an  filter but no reference to the caught  object.

    - Parameter type: The  of  this  will handle.
    - Parameter body: The body of the catch statement.
    - Parameter filter: The body of the  filter.
    - Returns: The created .

    */
    open class func Catch(type : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, filter : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.CatchBlock {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_CatchBlock__Catch_0__3__Type_Expression_Expression(&__thrown, type.get_handle(), body.get_handle(), filter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.CatchBlock(hndl : __return);
        }
    }
    // System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
// docid: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
    /**
    Creates a  for clearing a sequence point.

    - Parameter document: The  that represents the source file.
    - Returns: An instance of  for clearing a sequence point.

    */
    open class func ClearDebugInfo(document : dotnet.System.Linq.Expressions.SymbolDocumentInfo) throws -> dotnet.System.Linq.Expressions.DebugInfoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DebugInfoExpression__ClearDebugInfo_0__1__SymbolDocumentInfo(&__thrown, document.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DebugInfoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a coalescing operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Coalesce(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Coalesce_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a coalescing operation, given a conversion function.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the ,  and  properties set to the specified values.

    */
    open class func Coalesce(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Coalesce_0__3__Expression_Expression_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ConditionalExpression Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a conditional statement.

    - Parameter test: An  to set the  property equal to.
    - Parameter ifTrue: An  to set the  property equal to.
    - Parameter ifFalse: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Condition(test : dotnet.System.Linq.Expressions.Expression, ifTrue : dotnet.System.Linq.Expressions.Expression, ifFalse : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.ConditionalExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ConditionalExpression__Condition_0__3__Expression_Expression_Expression(&__thrown, test.get_handle(), ifTrue.get_handle(), ifFalse.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConditionalExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ConditionalExpression Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that represents a conditional statement.

    - Parameter test: An  to set the  property equal to.
    - Parameter ifTrue: An  to set the  property equal to.
    - Parameter ifFalse: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Condition(test : dotnet.System.Linq.Expressions.Expression, ifTrue : dotnet.System.Linq.Expressions.Expression, ifFalse : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.ConditionalExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ConditionalExpression__Condition_0__4__Expression_Expression_Expression_Type(&__thrown, test.get_handle(), ifTrue.get_handle(), ifFalse.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConditionalExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ConstantExpression Constant(System.Object)
// docid: M:System.Linq.Expressions.Expression.Constant(System.Object)
    /**
    Creates a  that has the  property set to the specified value.

    - Parameter value: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func Constant(value : Optional<dotnet.System.Object>) throws -> dotnet.System.Linq.Expressions.ConstantExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ConstantExpression__Constant_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConstantExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ConstantExpression Constant(System.Object, System.Type)
// docid: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
    /**
    Creates a  that has the  and  properties set to the specified values.

    - Parameter value: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Constant(value : Optional<dotnet.System.Object>, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.ConstantExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ConstantExpression__Constant_0__2__Object_Type(&__thrown, value?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConstantExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Continue(System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
    /**
    Creates a  representing a continue statement.

    - Parameter target: The  that the  will jump to.
    - Returns: A  with  equal to Continue, the  property set to , and a null value to be passed to the target label upon jumping.

    */
    open class func Continue(target : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Continue_0__1__LabelTarget(&__thrown, target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Continue(System.Linq.Expressions.LabelTarget, System.Type)
// docid: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
    /**
    Creates a  representing a continue statement with the specified type.

    - Parameter target: The  that the  will jump to.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Continue, the  property set to , the  property set to , and a null value to be passed to the target label upon jumping.

    */
    open class func Continue(target : dotnet.System.Linq.Expressions.LabelTarget, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Continue_0__2__LabelTarget_Type(&__thrown, target.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Convert(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that represents a type conversion operation.

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Convert(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Convert_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a conversion operation for which the implementing method is specified.

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Convert(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Convert_0__3__Expression_Type_MethodInfo(&__thrown, expression.get_handle(), type.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression ConvertChecked(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that represents a conversion operation that throws an exception if the target type is overflowed.

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ConvertChecked(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__ConvertChecked_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func ConvertChecked(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__ConvertChecked_0__3__Expression_Type_MethodInfo(&__thrown, expression.get_handle(), type.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DebugInfoExpression DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Creates a  with the specified span.

    - Parameter document: The  that represents the source file.
    - Parameter startLine: The start line of this . Must be greater than 0.
    - Parameter startColumn: The start column of this . Must be greater than 0.
    - Parameter endLine: The end line of this . Must be greater or equal than the start line.
    - Parameter endColumn: The end column of this . If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.
    - Returns: An instance of .

    */
    open class func DebugInfo(document : dotnet.System.Linq.Expressions.SymbolDocumentInfo, startLine : Swift.Int32, startColumn : Swift.Int32, endLine : Swift.Int32, endColumn : Swift.Int32) throws -> dotnet.System.Linq.Expressions.DebugInfoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DebugInfoExpression__DebugInfo_0__5__SymbolDocumentInfo_i32_i32_i32_i32(&__thrown, document.get_handle(), startLine, startColumn, endLine, endColumn);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DebugInfoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Decrement(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents the decrementing of the expression by 1.

    - Parameter expression: An  to decrement.
    - Returns: A  that represents the decremented expression.

    */
    open class func Decrement(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Decrement_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents the decrementing of the expression by 1.

    - Parameter expression: An  to decrement.
    - Parameter method: A  that represents the implementing method.
    - Returns: A  that represents the decremented expression.

    */
    open class func Decrement(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Decrement_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DefaultExpression Default(System.Type)
// docid: M:System.Linq.Expressions.Expression.Default(System.Type)
    /**
    Creates a  that has the  property set to the specified type.

    - Parameter type: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified type.

    */
    open class func Default(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.DefaultExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DefaultExpression__Default_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DefaultExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic division operation.

    - Parameter left: An  to set the  property to.
    - Parameter right: An  to set the  property to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Divide(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Divide_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic division operation. The implementing method can be specified.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Divide(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Divide_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a division assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func DivideAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__DivideAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a division assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func DivideAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__DivideAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a division assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func DivideAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__DivideAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to  and has the  and  set to the specified values.

    */
    open class func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arguments : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__Dynamic_0__3__CallSiteBinder_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, binder.get_handle(), returnType.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the  and  set to the specified values.

    */
    open class func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__Dynamic_0__3__CallSiteBinder_Type_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the  and  set to the specified values.

    */
    open class func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__Dynamic_0__4__CallSiteBinder_Type_Expression_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the  and  set to the specified values.

    */
    open class func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__Dynamic_0__5__CallSiteBinder_Type_Expression_Expression_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Parameter arg3: The fourth argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the  and  set to the specified values.

    */
    open class func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__Dynamic_0__6__CallSiteBinder_Type_Expression_Expression_Expression_Expression(&__thrown, binder.get_handle(), returnType.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter returnType: The result type of the dynamic expression.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to  and has the  and  set to the specified values.

    */
    open class func Dynamic(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, returnType : dotnet.System.Type_, arguments : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__Dynamic_0__3__CallSiteBinder_Type_ExpressionArray(&__thrown, binder.get_handle(), returnType.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ElementInit ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates an , given an  as the second argument.

    - Parameter addMethod: A  to set the  property equal to.
    - Parameter arguments: An  that contains  objects to set the  property equal to.
    - Returns: An  that has the  and  properties set to the specified values.

    */
    open class func ElementInit(addMethod : dotnet.System.Reflection.MethodInfo, arguments : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ElementInit {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ElementInit__ElementInit_0__2__MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, addMethod.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ElementInit(hndl : __return);
        }
    }
    // System.Linq.Expressions.ElementInit ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
    /**
    Creates an , given an array of values as the second argument.

    - Parameter addMethod: A  to set the  property equal to.
    - Parameter arguments: An array of  objects to set the  property equal to.
    - Returns: An  that has the  and  properties set to the specified values.

    */
    open class func ElementInit(addMethod : dotnet.System.Reflection.MethodInfo, arguments : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ElementInit {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ElementInit__ElementInit_0__2__MethodInfo_ExpressionArray(&__thrown, addMethod.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ElementInit(hndl : __return);
        }
    }
    // System.Linq.Expressions.DefaultExpression Empty()
// docid: M:System.Linq.Expressions.Expression.Empty
    /**
    Creates an empty expression that has  type.

    - Returns: A  that has the  property equal to  and the  property set to .

    */
    open class func Empty() throws -> dotnet.System.Linq.Expressions.DefaultExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DefaultExpression__Empty_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DefaultExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an equality comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Equal(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Equal_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an equality comparison. The implementing method can be specified.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func Equal(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Equal_0__4__Expression_Expression_bool_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise  operation, using op_ExclusiveOr for user-defined types.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ExclusiveOr(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ExclusiveOr_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise  operation, using op_ExclusiveOr for user-defined types. The implementing method can be specified.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func ExclusiveOr(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ExclusiveOr_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ExclusiveOrAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ExclusiveOrAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func ExclusiveOrAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ExclusiveOrAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func ExclusiveOrAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ExclusiveOrAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)
// docid: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
    /**
    Creates a  that represents accessing a field.

    - Parameter expression: An  to set the  property equal to. For  ( in Visual Basic),  must be .
    - Parameter field: The  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Field(expression : Optional<dotnet.System.Linq.Expressions.Expression>, field : dotnet.System.Reflection.FieldInfo) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Field_0__2__Expression_FieldInfo(&__thrown, expression?.get_handle() ?? nil, field.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression, System.String)
// docid: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
    /**
    Creates a  that represents accessing a field given the name of the field.

    - Parameter expression: An  whose  contains a field named . This can be null for static fields.
    - Parameter fieldName: The name of a field to be accessed.
    - Returns: A  that has the  property equal to , the  property set to , and the  property set to the  that represents the field denoted by .

    */
    open class func Field(expression : dotnet.System.Linq.Expressions.Expression, fieldName : dotnet.System.String) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Field_0__2__Expression_String(&__thrown, expression.get_handle(), fieldName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression, System.Type, System.String)
// docid: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
    /**
    Creates a  that represents accessing a field.

    - Parameter expression: The containing object of the field. This can be null for static fields.
    - Parameter type: The  that contains the field.
    - Parameter fieldName: The field to be accessed.
    - Returns: The created .

    */
    open class func Field(expression : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_, fieldName : dotnet.System.String) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Field_0__3__Expression_Type_String(&__thrown, expression?.get_handle() ?? nil, type.get_handle(), fieldName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Type GetActionType(System.Type[])
// docid: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])
    /**
    Creates a  object that represents a generic System.Action delegate type that has specific type arguments.

    - Parameter typeArgs: An array of up to sixteen  objects that specify the type arguments for the  delegate type.
    - Returns: The type of a System.Action delegate that has the specified type arguments.

    */
    open class func GetActionType(typeArgs : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Type__GetActionType_0__1__TypeArray(&__thrown, (typeArgs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetDelegateType(System.Type[])
// docid: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
    /**
    Gets a  object that represents a generic System.Func or System.Action delegate type that has specific type arguments.

    - Parameter typeArgs: The type arguments of the delegate.
    - Returns: The delegate type.

    */
    open class func GetDelegateType(typeArgs : dotnet.System_Arr<dotnet.System.Type_>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Type__GetDelegateType_0__1__TypeArray(&__thrown, typeArgs.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetFuncType(System.Type[])
// docid: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])
    /**
    Creates a  object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.

    - Parameter typeArgs: An array of one to seventeen  objects that specify the type arguments for the  delegate type.
    - Returns: The type of a System.Func delegate that has the specified type arguments.

    */
    open class func GetFuncType(typeArgs : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Type__GetFuncType_0__1__TypeArray(&__thrown, (typeArgs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
    /**
    Creates a  representing a "go to" statement.

    - Parameter target: The  that the  will jump to.
    - Returns: A  with  equal to Goto, the  property set to the specified value, and a null value to be passed to the target label upon jumping.

    */
    open class func Goto(target : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Goto_0__1__LabelTarget(&__thrown, target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a "go to" statement. The value passed to the label upon jumping can be specified.

    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Returns: A  with  equal to Goto, the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func Goto(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Goto_0__2__LabelTarget_Expression(&__thrown, target.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.

    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Goto, the  property set to , the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func Goto(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Goto_0__3__LabelTarget_Expression_Type(&__thrown, target.get_handle(), value?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget, System.Type)
// docid: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
    /**
    Creates a  representing a "go to" statement with the specified type.

    - Parameter target: The  that the  will jump to.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Goto, the  property set to the specified value, the  property set to , and a null value to be passed to the target label upon jumping.

    */
    open class func Goto(target : dotnet.System.Linq.Expressions.LabelTarget, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Goto_0__2__LabelTarget_Type(&__thrown, target.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a "greater than" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func GreaterThan(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__GreaterThan_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a "greater than" numeric comparison. The implementing method can be specified.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func GreaterThan(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__GreaterThan_0__4__Expression_Expression_bool_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a "greater than or equal" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func GreaterThanOrEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__GreaterThanOrEqual_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a "greater than or equal" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func GreaterThanOrEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__GreaterThanOrEqual_0__4__Expression_Expression_bool_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ConditionalExpression IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a conditional block with an  statement.

    - Parameter test: An  to set the  property equal to.
    - Parameter ifTrue: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , properties set to the specified values. The  property is set to default expression and the type of the resulting  returned by this method is .

    */
    open class func IfThen(test : dotnet.System.Linq.Expressions.Expression, ifTrue : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.ConditionalExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ConditionalExpression__IfThen_0__2__Expression_Expression(&__thrown, test.get_handle(), ifTrue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConditionalExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ConditionalExpression IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a conditional block with  and  statements.

    - Parameter test: An  to set the  property equal to.
    - Parameter ifTrue: An  to set the  property equal to.
    - Parameter ifFalse: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values. The type of the resulting  returned by this method is .

    */
    open class func IfThenElse(test : dotnet.System.Linq.Expressions.Expression, ifTrue : dotnet.System.Linq.Expressions.Expression, ifFalse : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.ConditionalExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ConditionalExpression__IfThenElse_0__3__Expression_Expression_Expression(&__thrown, test.get_handle(), ifTrue.get_handle(), ifFalse.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ConditionalExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Increment(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents the incrementing of the expression value by 1.

    - Parameter expression: An  to increment.
    - Returns: A  that represents the incremented expression.

    */
    open class func Increment(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Increment_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents the incrementing of the expression by 1.

    - Parameter expression: An  to increment.
    - Parameter method: A  that represents the implementing method.
    - Returns: A  that represents the incremented expression.

    */
    open class func Increment(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Increment_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.InvocationExpression Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates an  that applies a delegate or lambda expression to a list of argument expressions.

    - Parameter expression: An  that represents the delegate or lambda expression to be applied to.
    - Parameter arguments: An  that contains  objects that represent the arguments that the delegate or lambda expression is applied to.
    - Returns: An  that applies the specified delegate or lambda expression to the provided arguments.

    */
    open class func Invoke(expression : dotnet.System.Linq.Expressions.Expression, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.InvocationExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_InvocationExpression__Invoke_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, expression.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.InvocationExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.InvocationExpression Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
    /**
    Creates an  that applies a delegate or lambda expression to a list of argument expressions.

    - Parameter expression: An  that represents the delegate or lambda expression to be applied.
    - Parameter arguments: An array of  objects that represent the arguments that the delegate or lambda expression is applied to.
    - Returns: An  that applies the specified delegate or lambda expression to the provided arguments.

    */
    open class func Invoke(expression : dotnet.System.Linq.Expressions.Expression, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.InvocationExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_InvocationExpression__Invoke_0__2__Expression_ExpressionArray(&__thrown, expression.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.InvocationExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression IsFalse(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
    /**
    Returns whether the expression evaluates to false.

    - Parameter expression: An  to evaluate.
    - Returns: An instance of .

    */
    open class func IsFalse(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__IsFalse_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Returns whether the expression evaluates to false.

    - Parameter expression: An  to evaluate.
    - Parameter method: A  that represents the implementing method.
    - Returns: An instance of .

    */
    open class func IsFalse(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__IsFalse_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression IsTrue(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
    /**
    Returns whether the expression evaluates to true.

    - Parameter expression: An  to evaluate.
    - Returns: An instance of .

    */
    open class func IsTrue(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__IsTrue_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Returns whether the expression evaluates to true.

    - Parameter expression: An  to evaluate.
    - Parameter method: A  that represents the implementing method.
    - Returns: An instance of .

    */
    open class func IsTrue(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__IsTrue_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LabelTarget Label()
// docid: M:System.Linq.Expressions.Expression.Label
    /**
    Creates a  representing a label with void type and no name.

    - Returns: The new .

    */
    open class func Label() throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LabelTarget__Label_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    // System.Linq.Expressions.LabelExpression Label(System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
    /**
    Creates a  representing a label without a default value.

    - Parameter target: The  which this  will be associated with.
    - Returns: A  without a default value.

    */
    open class func Label(target : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.LabelExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LabelExpression__Label_0__1__LabelTarget(&__thrown, target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LabelExpression Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a label with the given default value.

    - Parameter target: The  which this  will be associated with.
    - Parameter defaultValue: The value of this  when the label is reached through regular control flow.
    - Returns: A  with the given default value.

    */
    open class func Label(target : dotnet.System.Linq.Expressions.LabelTarget, defaultValue : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.LabelExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LabelExpression__Label_0__2__LabelTarget_Expression(&__thrown, target.get_handle(), defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LabelTarget Label(System.String)
// docid: M:System.Linq.Expressions.Expression.Label(System.String)
    /**
    Creates a  representing a label with void type and the given name.

    - Parameter name: The name of the label.
    - Returns: The new .

    */
    open class func Label(name : Optional<dotnet.System.String>) throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LabelTarget__Label_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    // System.Linq.Expressions.LabelTarget Label(System.Type)
// docid: M:System.Linq.Expressions.Expression.Label(System.Type)
    /**
    Creates a  representing a label with the given type.

    - Parameter type: The type of value that is passed when jumping to the label.
    - Returns: The new .

    */
    open class func Label(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LabelTarget__Label_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    // System.Linq.Expressions.LabelTarget Label(System.Type, System.String)
// docid: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)
    /**
    Creates a  representing a label with the given type and name.

    - Parameter type: The type of value that is passed when jumping to the label.
    - Parameter name: The name of the label.
    - Returns: The new .

    */
    open class func Label(type : dotnet.System.Type_, name : Optional<dotnet.System.String>) throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LabelTarget__Label_0__2__Type_String(&__thrown, type.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.

    - Parameter body: An  to set the  property equal to.
    - Parameter tailCall: A  that indicates if tail call optimization will be applied when compiling the created expression.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(body : dotnet.System.Linq.Expressions.Expression, tailCall : Bool, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__3__Expression_bool_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, body.get_handle(), Swift.Int32(tailCall ? 1 : 0), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression, bool, System.Linq.Expressions.ParameterExpression[])
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
    /**
    Creates a  by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.

    - Parameter body: An  to set the  property equal to.
    - Parameter tailCall: A  that indicates if tail call optimization will be applied when compiling the created expression.
    - Parameter parameters: An array that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(body : dotnet.System.Linq.Expressions.Expression, tailCall : Bool, parameters : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__3__Expression_bool_ParameterExpressionArray(&__thrown, body.get_handle(), Swift.Int32(tailCall ? 1 : 0), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  by first constructing a delegate type from the expression body, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.

    - Parameter body: An  to set the  property equal to.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(body : dotnet.System.Linq.Expressions.Expression, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, body.get_handle(), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
    /**
    Creates a  by first constructing a delegate type from the expression body, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.

    - Parameter body: An  to set the  property equal to.
    - Parameter parameters: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Lambda(body : dotnet.System.Linq.Expressions.Expression, parameters : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__2__Expression_ParameterExpressionArray(&__thrown, body.get_handle(), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression, System.String, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  by first constructing a delegate type from the expression body, the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.

    - Parameter body: An  to set the  property equal to.
    - Parameter name: The name for the lambda. Used for emitting debug information.
    - Parameter tailCall: A  that indicates if tail call optimization will be applied when compiling the created expression.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(body : dotnet.System.Linq.Expressions.Expression, name : Optional<dotnet.System.String>, tailCall : Bool, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__4__Expression_String_bool_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, body.get_handle(), name?.get_handle() ?? nil, Swift.Int32(tailCall ? 1 : 0), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  by first constructing a delegate type from the expression body, the name for the lambda, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.

    - Parameter body: An  to set the  property equal to.
    - Parameter name: The name for the lambda. Used for emitting debug information.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(body : dotnet.System.Linq.Expressions.Expression, name : Optional<dotnet.System.String>, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__3__Expression_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, body.get_handle(), name?.get_handle() ?? nil, (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Type, System.Linq.Expressions.Expression, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.

    - Parameter delegateType: A  representing the delegate signature for the lambda.
    - Parameter body: An  to set the  property equal to.
    - Parameter tailCall: A  that indicates if tail call optimization will be applied when compiling the created expression.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(delegateType : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, tailCall : Bool, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__4__Type_Expression_bool_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, delegateType.get_handle(), body.get_handle(), Swift.Int32(tailCall ? 1 : 0), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Type, System.Linq.Expressions.Expression, bool, System.Linq.Expressions.ParameterExpression[])
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
    /**
    Creates a  where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.

    - Parameter delegateType: A  representing the delegate signature for the lambda.
    - Parameter body: An  to set the  property equal to.
    - Parameter tailCall: A  that indicates if tail call optimization will be applied when compiling the created expression.
    - Parameter parameters: An array that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(delegateType : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, tailCall : Bool, parameters : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__4__Type_Expression_bool_ParameterExpressionArray(&__thrown, delegateType.get_handle(), body.get_handle(), Swift.Int32(tailCall ? 1 : 0), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  where the delegate type is known at compile time, with an enumerable collection of parameter expressions.

    - Parameter delegateType: A  that represents a delegate signature for the lambda.
    - Parameter body: An  to set the  property equal to.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: An object that represents a lambda expression which has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Lambda(delegateType : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__3__Type_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, delegateType.get_handle(), body.get_handle(), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
    /**
    Creates a  where the delegate type is known at compile time, with an array of parameter expressions.

    - Parameter delegateType: A  that represents a delegate signature for the lambda.
    - Parameter body: An  to set the  property equal to.
    - Parameter parameters: An array of  objects to use to populate the  collection.
    - Returns: An object that represents a lambda expression which has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Lambda(delegateType : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, parameters : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__3__Type_Expression_ParameterExpressionArray(&__thrown, delegateType.get_handle(), body.get_handle(), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Type, System.Linq.Expressions.Expression, System.String, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.

    - Parameter delegateType: A  representing the delegate signature for the lambda.
    - Parameter body: An  to set the  property equal to.
    - Parameter name: The name for the lambda. Used for emitting debug information.
    - Parameter tailCall: A  that indicates if tail call optimization will be applied when compiling the created expression.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(delegateType : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, name : Optional<dotnet.System.String>, tailCall : Bool, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__5__Type_Expression_String_bool_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, delegateType.get_handle(), body.get_handle(), name?.get_handle() ?? nil, Swift.Int32(tailCall ? 1 : 0), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LambdaExpression Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a  where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.

    - Parameter delegateType: A  representing the delegate signature for the lambda.
    - Parameter body: An  to set the  property equal to.
    - Parameter name: The name for the lambda. Used for emitting debug information.
    - Parameter parameters: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to Lambda and the  and  properties set to the specified values.

    */
    open class func Lambda(delegateType : dotnet.System.Type_, body : dotnet.System.Linq.Expressions.Expression, name : Optional<dotnet.System.String>, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.LambdaExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LambdaExpression__Lambda_0__4__Type_Expression_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, delegateType.get_handle(), body.get_handle(), name?.get_handle() ?? nil, (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LambdaExpression(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// TODO COPE (write_all_methods) (unused generic param) System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression, bool, System.Linq.Expressions.ParameterExpression[])
// TODO COPE (write_all_methods) (unused generic param) System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// TODO COPE (write_all_methods) (unused generic param) System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
// TODO COPE (write_all_methods) (unused generic param) System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, bool, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// TODO COPE (write_all_methods) (unused generic param) System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
    // System.Linq.Expressions.BinaryExpression LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise left-shift operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func LeftShift(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LeftShift_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise left-shift operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func LeftShift(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LeftShift_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise left-shift assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func LeftShiftAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LeftShiftAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise left-shift assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func LeftShiftAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LeftShiftAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a bitwise left-shift assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func LeftShiftAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LeftShiftAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a "less than" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func LessThan(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LessThan_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a "less than" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func LessThan(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LessThan_0__4__Expression_Expression_bool_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a " less than or equal" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func LessThanOrEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LessThanOrEqual_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a "less than or equal" numeric comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func LessThanOrEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__LessThanOrEqual_0__4__Expression_Expression_bool_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
// docid: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
    /**
    Creates a  where the member is a field or property.

    - Parameter member: A  that represents a field or property to set the  property equal to.
    - Parameter initializers: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ListBind(member : dotnet.System.Reflection.MemberInfo, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.MemberListBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberListBinding__ListBind_0__2__MemberInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit_(&__thrown, member.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberListBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])
// docid: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
    /**
    Creates a  where the member is a field or property.

    - Parameter member: A  that represents a field or property to set the  property equal to.
    - Parameter initializers: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ListBind(member : dotnet.System.Reflection.MemberInfo, initializers : dotnet.System_Arr<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.MemberListBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberListBinding__ListBind_0__2__MemberInfo_ElementInitArray(&__thrown, member.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberListBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
// docid: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
    /**
    Creates a  based on a specified property accessor method.

    - Parameter propertyAccessor: A  that represents a property accessor method.
    - Parameter initializers: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to , the  property set to the  that represents the property accessed in , and  populated with the elements of .

    */
    open class func ListBind(propertyAccessor : dotnet.System.Reflection.MethodInfo, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.MemberListBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberListBinding__ListBind_0__2__MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit_(&__thrown, propertyAccessor.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberListBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])
// docid: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
    /**
    Creates a  object based on a specified property accessor method.

    - Parameter propertyAccessor: A  that represents a property accessor method.
    - Parameter initializers: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to , the  property set to the  that represents the property accessed in , and  populated with the elements of .

    */
    open class func ListBind(propertyAccessor : dotnet.System.Reflection.MethodInfo, initializers : dotnet.System_Arr<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.MemberListBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberListBinding__ListBind_0__2__MethodInfo_ElementInitArray(&__thrown, propertyAccessor.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberListBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
// docid: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
    /**
    Creates a  that uses specified  objects to initialize a collection.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter initializers: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ListInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ListInitExpression__ListInit_0__2__NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit_(&__thrown, newExpression.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that uses a method named "Add" to add elements to a collection.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter initializers: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func ListInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ListInitExpression__ListInit_0__2__NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, newExpression.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])
// docid: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
    /**
    Creates a  that uses specified  objects to initialize a collection.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter initializers: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ListInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, initializers : dotnet.System_Arr<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ListInitExpression__ListInit_0__2__NewExpression_ElementInitArray(&__thrown, newExpression.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
    /**
    Creates a  that uses a method named "Add" to add elements to a collection.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter initializers: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func ListInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, initializers : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ListInitExpression__ListInit_0__2__NewExpression_ExpressionArray(&__thrown, newExpression.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that uses a specified method to add elements to a collection.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter addMethod: A  that represents an instance method named "Add" (case insensitive), that adds an element to a collection.
    - Parameter initializers: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func ListInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, addMethod : Optional<dotnet.System.Reflection.MethodInfo>, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ListInitExpression__ListInit_0__3__NewExpression_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, newExpression.get_handle(), addMethod?.get_handle() ?? nil, initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
    /**
    Creates a  that uses a specified method to add elements to a collection.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter addMethod: A  that represents an instance method that takes one argument, that adds an element to a collection.
    - Parameter initializers: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func ListInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, addMethod : Optional<dotnet.System.Reflection.MethodInfo>, initializers : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ListInitExpression__ListInit_0__3__NewExpression_MethodInfo_ExpressionArray(&__thrown, newExpression.get_handle(), addMethod?.get_handle() ?? nil, initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
    /**
    Creates a  with the given body.

    - Parameter body: The body of the loop.
    - Returns: The created .

    */
    open class func Loop(body : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.LoopExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LoopExpression__Loop_0__1__Expression(&__thrown, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LoopExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
    /**
    Creates a  with the given body and break target.

    - Parameter body: The body of the loop.
    - Parameter break: The break target used by the loop body.
    - Returns: The created .

    */
    open class func Loop(body : dotnet.System.Linq.Expressions.Expression, break_ : Optional<dotnet.System.Linq.Expressions.LabelTarget>) throws -> dotnet.System.Linq.Expressions.LoopExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LoopExpression__Loop_0__2__Expression_LabelTarget(&__thrown, body.get_handle(), break_?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LoopExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
    /**
    Creates a  with the given body.

    - Parameter body: The body of the loop.
    - Parameter break: The break target used by the loop body.
    - Parameter continue: The continue target used by the loop body.
    - Returns: The created .

    */
    open class func Loop(body : dotnet.System.Linq.Expressions.Expression, break_ : Optional<dotnet.System.Linq.Expressions.LabelTarget>, continue_ : Optional<dotnet.System.Linq.Expressions.LabelTarget>) throws -> dotnet.System.Linq.Expressions.LoopExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_LoopExpression__Loop_0__3__Expression_LabelTarget_LabelTarget(&__thrown, body.get_handle(), break_?.get_handle() ?? nil, continue_?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LoopExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a , given the left and right operands, by calling an appropriate factory method.

    - Parameter binaryType: The  that specifies the type of binary operation.
    - Parameter left: An  that represents the left operand.
    - Parameter right: An  that represents the right operand.
    - Returns: The  that results from calling the appropriate factory method.

    */
    open class func MakeBinary(binaryType : dotnet.System.Linq.Expressions.ExpressionType, left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MakeBinary_0__3__ExpressionType_Expression_Expression(&__thrown, binaryType.get_value(), left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a , given the left operand, right operand and implementing method, by calling the appropriate factory method.

    - Parameter binaryType: The  that specifies the type of binary operation.
    - Parameter left: An  that represents the left operand.
    - Parameter right: An  that represents the right operand.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  that specifies the implementing method.
    - Returns: The  that results from calling the appropriate factory method.

    */
    open class func MakeBinary(binaryType : dotnet.System.Linq.Expressions.ExpressionType, left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MakeBinary_0__5__ExpressionType_Expression_Expression_bool_MethodInfo(&__thrown, binaryType.get_value(), left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a , given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.

    - Parameter binaryType: The  that specifies the type of binary operation.
    - Parameter left: An  that represents the left operand.
    - Parameter right: An  that represents the right operand.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  that specifies the implementing method.
    - Parameter conversion: A  that represents a type conversion function. This parameter is used only if  is  or compound assignment.
    - Returns: The  that results from calling the appropriate factory method.

    */
    open class func MakeBinary(binaryType : dotnet.System.Linq.Expressions.ExpressionType, left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MakeBinary_0__6__ExpressionType_Expression_Expression_bool_MethodInfo_LambdaExpression(&__thrown, binaryType.get_value(), left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.CatchBlock MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a catch statement with the specified elements.

    - Parameter type: The  of  this  will handle.
    - Parameter variable: A  representing a reference to the  object caught by this handler.
    - Parameter body: The body of the catch statement.
    - Parameter filter: The body of the  filter.
    - Returns: The created .

    */
    open class func MakeCatchBlock(type : dotnet.System.Type_, variable : Optional<dotnet.System.Linq.Expressions.ParameterExpression>, body : dotnet.System.Linq.Expressions.Expression, filter : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.CatchBlock {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_CatchBlock__MakeCatchBlock_0__4__Type_ParameterExpression_Expression_Expression(&__thrown, type.get_handle(), variable?.get_handle() ?? nil, body.get_handle(), filter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.CatchBlock(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to  and has the , , and  set to the specified values.

    */
    open class func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__MakeDynamic_0__3__Type_CallSiteBinder_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, delegateType.get_handle(), binder.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and one argument.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the , , and  set to the specified values.

    */
    open class func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__MakeDynamic_0__3__Type_CallSiteBinder_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and two arguments.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the , , and  set to the specified values.

    */
    open class func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__MakeDynamic_0__4__Type_CallSiteBinder_Expression_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle(), arg1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and three arguments.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the , , and  set to the specified values.

    */
    open class func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__MakeDynamic_0__5__Type_CallSiteBinder_Expression_Expression_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a dynamic operation bound by the provided  and four arguments.

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arg0: The first argument to the dynamic operation.
    - Parameter arg1: The second argument to the dynamic operation.
    - Parameter arg2: The third argument to the dynamic operation.
    - Parameter arg3: The fourth argument to the dynamic operation.
    - Returns: A  that has  equal to  and has the , , and  set to the specified values.

    */
    open class func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arg0 : dotnet.System.Linq.Expressions.Expression, arg1 : dotnet.System.Linq.Expressions.Expression, arg2 : dotnet.System.Linq.Expressions.Expression, arg3 : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__MakeDynamic_0__6__Type_CallSiteBinder_Expression_Expression_Expression_Expression(&__thrown, delegateType.get_handle(), binder.get_handle(), arg0.get_handle(), arg1.get_handle(), arg2.get_handle(), arg3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents a dynamic operation bound by the provided .

    - Parameter delegateType: The type of the delegate used by the .
    - Parameter binder: The runtime binder for the dynamic operation.
    - Parameter arguments: The arguments to the dynamic operation.
    - Returns: A  that has  equal to  and has the , , and  set to the specified values.

    */
    open class func MakeDynamic(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.DynamicExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_DynamicExpression__MakeDynamic_0__3__Type_CallSiteBinder_ExpressionArray(&__thrown, delegateType.get_handle(), binder.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.DynamicExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  representing a jump of the specified . The value passed to the label upon jumping can also be specified.

    - Parameter kind: The  of the .
    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to , the  property set to , the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func MakeGoto(kind : dotnet.System.Linq.Expressions.GotoExpressionKind, target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__MakeGoto_0__4__GotoExpressionKind_LabelTarget_Expression_Type(&__thrown, kind.get_value(), target.get_handle(), value?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.IndexExpression MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates an  that represents accessing an indexed property in an object.

    - Parameter instance: The object to which the property belongs. It should be null if the property is  ( in Visual Basic).
    - Parameter indexer: An  representing the property to index.
    - Parameter arguments: An IEnumerable<Expression> (IEnumerable (Of Expression) in Visual Basic) that contains the arguments that will be used to index the property.
    - Returns: The created .

    */
    open class func MakeIndex(instance : dotnet.System.Linq.Expressions.Expression, indexer : Optional<dotnet.System.Reflection.PropertyInfo>, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_IndexExpression__MakeIndex_0__3__Expression_PropertyInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, instance.get_handle(), indexer?.get_handle() ?? nil, (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)
// docid: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
    /**
    Creates a  that represents accessing either a field or a property.

    - Parameter expression: An  that represents the object that the member belongs to. This can be null for static members.
    - Parameter member: The  that describes the field or property to be accessed.
    - Returns: The  that results from calling the appropriate factory method.

    */
    open class func MakeMemberAccess(expression : Optional<dotnet.System.Linq.Expressions.Expression>, member : dotnet.System.Reflection.MemberInfo) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__MakeMemberAccess_0__2__Expression_MemberInfo(&__thrown, expression?.get_handle() ?? nil, member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.TryExpression MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)
// docid: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
    /**
    Creates a  representing a try block with the specified elements.

    - Parameter type: The result type of the try expression. If null, body and all handlers must have identical type.
    - Parameter body: The body of the try block.
    - Parameter finally: The body of the finally block. Pass null if the try block has no finally block associated with it.
    - Parameter fault: The body of the fault block. Pass null if the try block has no fault block associated with it.
    - Parameter handlers: A collection of s representing the catch statements to be associated with the try block.
    - Returns: The created .

    */
    open class func MakeTry(type : Optional<dotnet.System.Type_>, body : dotnet.System.Linq.Expressions.Expression, finally : Optional<dotnet.System.Linq.Expressions.Expression>, fault : Optional<dotnet.System.Linq.Expressions.Expression>, handlers : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.CatchBlock>>) throws -> dotnet.System.Linq.Expressions.TryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TryExpression__MakeTry_0__5__Type_Expression_Expression_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_CatchBlock_(&__thrown, type?.get_handle() ?? nil, body.get_handle(), finally?.get_handle() ?? nil, fault?.get_handle() ?? nil, (handlers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a , given an operand, by calling the appropriate factory method.

    - Parameter unaryType: The  that specifies the type of unary operation.
    - Parameter operand: An  that represents the operand.
    - Parameter type: The  that specifies the type to be converted to (pass  if not applicable).
    - Returns: The  that results from calling the appropriate factory method.

    */
    open class func MakeUnary(unaryType : dotnet.System.Linq.Expressions.ExpressionType, operand : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__MakeUnary_0__3__ExpressionType_Expression_Type(&__thrown, unaryType.get_value(), operand.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
    /**
    Creates a , given an operand and implementing method, by calling the appropriate factory method.

    - Parameter unaryType: The  that specifies the type of unary operation.
    - Parameter operand: An  that represents the operand.
    - Parameter type: The  that specifies the type to be converted to (pass  if not applicable).
    - Parameter method: The  that represents the implementing method.
    - Returns: The  that results from calling the appropriate factory method.

    */
    open class func MakeUnary(unaryType : dotnet.System.Linq.Expressions.ExpressionType, operand : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__MakeUnary_0__4__ExpressionType_Expression_Type_MethodInfo(&__thrown, unaryType.get_value(), operand.get_handle(), type.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
// docid: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
    /**
    Creates a  that represents the recursive initialization of members of a field or property.

    - Parameter member: The  to set the  property equal to.
    - Parameter bindings: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MemberBind(member : dotnet.System.Reflection.MemberInfo, bindings : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberMemberBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberMemberBinding__MemberBind_0__2__MemberInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding_(&__thrown, member.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberMemberBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])
// docid: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
    /**
    Creates a  that represents the recursive initialization of members of a field or property.

    - Parameter member: The  to set the  property equal to.
    - Parameter bindings: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MemberBind(member : dotnet.System.Reflection.MemberInfo, bindings : dotnet.System_Arr<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberMemberBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberMemberBinding__MemberBind_0__2__MemberInfo_MemberBindingArray(&__thrown, member.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberMemberBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
// docid: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
    /**
    Creates a  that represents the recursive initialization of members of a member that is accessed by using a property accessor method.

    - Parameter propertyAccessor: The  that represents a property accessor method.
    - Parameter bindings: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to , the  property set to the  that represents the property accessed in , and  properties set to the specified values.

    */
    open class func MemberBind(propertyAccessor : dotnet.System.Reflection.MethodInfo, bindings : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberMemberBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberMemberBinding__MemberBind_0__2__MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding_(&__thrown, propertyAccessor.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberMemberBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])
// docid: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
    /**
    Creates a  that represents the recursive initialization of members of a member that is accessed by using a property accessor method.

    - Parameter propertyAccessor: The  that represents a property accessor method.
    - Parameter bindings: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to , the  property set to the  that represents the property accessed in , and  properties set to the specified values.

    */
    open class func MemberBind(propertyAccessor : dotnet.System.Reflection.MethodInfo, bindings : dotnet.System_Arr<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberMemberBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberMemberBinding__MemberBind_0__2__MethodInfo_MemberBindingArray(&__thrown, propertyAccessor.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberMemberBinding(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberInitExpression MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
// docid: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
    /**
    Represents an expression that creates a new object and initializes a property of the object.

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter bindings: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MemberInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, bindings : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberInitExpression__MemberInit_0__2__NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding_(&__thrown, newExpression.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberInitExpression MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])
// docid: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
    /**
    Creates a .

    - Parameter newExpression: A  to set the  property equal to.
    - Parameter bindings: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MemberInit(newExpression : dotnet.System.Linq.Expressions.NewExpression, bindings : dotnet.System_Arr<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberInitExpression__MemberInit_0__2__NewExpression_MemberBindingArray(&__thrown, newExpression.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberInitExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic remainder operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Modulo(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Modulo_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic remainder operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Modulo(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Modulo_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a remainder assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ModuloAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ModuloAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a remainder assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func ModuloAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ModuloAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a remainder assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func ModuloAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ModuloAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic multiplication operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Multiply(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Multiply_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic multiplication operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Multiply(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Multiply_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a multiplication assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MultiplyAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a multiplication assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func MultiplyAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a multiplication assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func MultiplyAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a multiplication assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MultiplyAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyAssignChecked_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a multiplication assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func MultiplyAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyAssignChecked_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a multiplication assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func MultiplyAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyAssignChecked_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic multiplication operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func MultiplyChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyChecked_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic multiplication operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func MultiplyChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__MultiplyChecked_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Negate(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic negation operation.

    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func Negate(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Negate_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic negation operation.

    - Parameter expression: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Negate(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Negate_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression NegateChecked(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic negation operation that has overflow checking.

    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func NegateChecked(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__NegateChecked_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.

    - Parameter expression: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func NegateChecked(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__NegateChecked_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo)
// docid: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
    /**
    Creates a  that represents calling the specified constructor that takes no arguments.

    - Parameter constructor: The  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func New(constructor : dotnet.System.Reflection.ConstructorInfo) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewExpression__New_0__1__ConstructorInfo(&__thrown, constructor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents calling the specified constructor with the specified arguments.

    - Parameter constructor: The  to set the  property equal to.
    - Parameter arguments: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func New(constructor : dotnet.System.Reflection.ConstructorInfo, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewExpression__New_0__2__ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, constructor.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)
// docid: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
    /**
    Creates a  that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.

    - Parameter constructor: The  to set the  property equal to.
    - Parameter arguments: An  that contains  objects to use to populate the  collection.
    - Parameter members: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the ,  and  properties set to the specified values.

    */
    open class func New(constructor : dotnet.System.Reflection.ConstructorInfo, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>, members : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.MemberInfo>>) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewExpression__New_0__3__ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__System_Collections_Generic_IEnumerable_System_Reflection_MemberInfo_(&__thrown, constructor.get_handle(), (arguments?.get_handle()), (members?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[])
// docid: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
    /**
    Creates a  that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.

    - Parameter constructor: The  to set the  property equal to.
    - Parameter arguments: An  that contains  objects to use to populate the  collection.
    - Parameter members: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the ,  and  properties set to the specified values.

    */
    open class func New(constructor : dotnet.System.Reflection.ConstructorInfo, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>, members : Optional<dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>>) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewExpression__New_0__3__ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__MemberInfoArray(&__thrown, constructor.get_handle(), (arguments?.get_handle()), (members?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents calling the specified constructor with the specified arguments.

    - Parameter constructor: The  to set the  property equal to.
    - Parameter arguments: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func New(constructor : dotnet.System.Reflection.ConstructorInfo, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewExpression__New_0__2__ConstructorInfo_ExpressionArray(&__thrown, constructor.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewExpression New(System.Type)
// docid: M:System.Linq.Expressions.Expression.New(System.Type)
    /**
    Creates a  that represents calling the parameterless constructor of the specified type.

    - Parameter type: A  that has a constructor that takes no arguments.
    - Returns: A  that has the  property equal to  and the  property set to the  that represents the constructor without parameters for the specified type.

    */
    open class func New(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewExpression__New_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewArrayExpression NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents creating an array that has a specified rank.

    - Parameter type: A  that represents the element type of the array.
    - Parameter bounds: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func NewArrayBounds(type : dotnet.System.Type_, bounds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.NewArrayExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewArrayExpression__NewArrayBounds_0__2__Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, type.get_handle(), bounds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewArrayExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewArrayExpression NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents creating an array that has a specified rank.

    - Parameter type: A  that represents the element type of the array.
    - Parameter bounds: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func NewArrayBounds(type : dotnet.System.Type_, bounds : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.NewArrayExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewArrayExpression__NewArrayBounds_0__2__Type_ExpressionArray(&__thrown, type.get_handle(), bounds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewArrayExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewArrayExpression NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  that represents creating a one-dimensional array and initializing it from a list of elements.

    - Parameter type: A  that represents the element type of the array.
    - Parameter initializers: An  that contains  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func NewArrayInit(type : dotnet.System.Type_, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.NewArrayExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewArrayExpression__NewArrayInit_0__2__Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, type.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewArrayExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.NewArrayExpression NewArrayInit(System.Type, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
    /**
    Creates a  that represents creating a one-dimensional array and initializing it from a list of elements.

    - Parameter type: A  that represents the element type of the array.
    - Parameter initializers: An array of  objects to use to populate the  collection.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func NewArrayInit(type : dotnet.System.Type_, initializers : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.NewArrayExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_NewArrayExpression__NewArrayInit_0__2__Type_ExpressionArray(&__thrown, type.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewArrayExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Not(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise complement operation.

    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func Not(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Not_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise complement operation. The implementing method can be specified.

    - Parameter expression: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Not(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Not_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an inequality comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func NotEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__NotEqual_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, bool, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an inequality comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter liftToNull: 
         to set  to ;  to set  to .
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func NotEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, liftToNull : Bool, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__NotEqual_0__4__Expression_Expression_bool_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), Swift.Int32(liftToNull ? 1 : 0), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression OnesComplement(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
    /**
    Returns the expression representing the ones complement.

    - Parameter expression: An .
    - Returns: An instance of .

    */
    open class func OnesComplement(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__OnesComplement_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Returns the expression representing the ones complement.

    - Parameter expression: An .
    - Parameter method: A  that represents the implementing method.
    - Returns: An instance of .

    */
    open class func OnesComplement(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__OnesComplement_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise  operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Or(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Or_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise  operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Or(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Or_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise OR assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func OrAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__OrAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise OR assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func OrAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__OrAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a bitwise OR assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func OrAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__OrAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a conditional  operation that evaluates the second operand only if the first operand evaluates to .

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func OrElse(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__OrElse_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a conditional  operation that evaluates the second operand only if the first operand evaluates to .

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func OrElse(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__OrElse_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ParameterExpression Parameter(System.Type)
// docid: M:System.Linq.Expressions.Expression.Parameter(System.Type)
    /**
    Creates a  node that can be used to identify a parameter or a variable in an expression tree.

    - Parameter type: The type of the parameter or variable.
    - Returns: A  node with the specified name and type.

    */
    open class func Parameter(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.ParameterExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ParameterExpression__Parameter_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ParameterExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ParameterExpression Parameter(System.Type, System.String)
// docid: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
    /**
    Creates a  node that can be used to identify a parameter or a variable in an expression tree.

    - Parameter type: The type of the parameter or variable.
    - Parameter name: The name of the parameter or variable, used for debugging or printing purpose only.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Parameter(type : dotnet.System.Type_, name : Optional<dotnet.System.String>) throws -> dotnet.System.Linq.Expressions.ParameterExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ParameterExpression__Parameter_0__2__Type_String(&__thrown, type.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ParameterExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PostDecrementAssign(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.

    - Parameter expression: An  to apply the operations on.
    - Returns: A  that represents the resultant expression.

    */
    open class func PostDecrementAssign(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PostDecrementAssign_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.

    - Parameter expression: An  to apply the operations on.
    - Parameter method: A  that represents the implementing method.
    - Returns: A  that represents the resultant expression.

    */
    open class func PostDecrementAssign(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PostDecrementAssign_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PostIncrementAssign(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.

    - Parameter expression: An  to apply the operations on.
    - Returns: A  that represents the resultant expression.

    */
    open class func PostIncrementAssign(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PostIncrementAssign_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.

    - Parameter expression: An  to apply the operations on.
    - Parameter method: A  that represents the implementing method.
    - Returns: A  that represents the resultant expression.

    */
    open class func PostIncrementAssign(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PostIncrementAssign_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents raising a number to a power.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Power(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Power_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents raising a number to a power.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Power(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Power_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents raising an expression to a power and assigning the result back to the expression.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func PowerAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__PowerAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents raising an expression to a power and assigning the result back to the expression.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func PowerAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__PowerAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents raising an expression to a power and assigning the result back to the expression.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func PowerAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__PowerAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PreDecrementAssign(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
    /**
    Creates a  that decrements the expression by 1 and assigns the result back to the expression.

    - Parameter expression: An  to apply the operations on.
    - Returns: A  that represents the resultant expression.

    */
    open class func PreDecrementAssign(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PreDecrementAssign_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that decrements the expression by 1 and assigns the result back to the expression.

    - Parameter expression: An  to apply the operations on.
    - Parameter method: A  that represents the implementing method.
    - Returns: A  that represents the resultant expression.

    */
    open class func PreDecrementAssign(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PreDecrementAssign_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PreIncrementAssign(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
    /**
    Creates a  that increments the expression by 1 and assigns the result back to the expression.

    - Parameter expression: An  to apply the operations on.
    - Returns: A  that represents the resultant expression.

    */
    open class func PreIncrementAssign(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PreIncrementAssign_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that increments the expression by 1 and assigns the result back to the expression.

    - Parameter expression: An  to apply the operations on.
    - Parameter method: A  that represents the implementing method.
    - Returns: A  that represents the resultant expression.

    */
    open class func PreIncrementAssign(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__PreIncrementAssign_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents accessing a property by using a property accessor method.

    - Parameter expression: An  to set the  property equal to. This can be null for static properties.
    - Parameter propertyAccessor: The  that represents a property accessor method.
    - Returns: A  that has the  property equal to , the  property set to  and the  property set to the  that represents the property accessed in .

    */
    open class func Property(expression : Optional<dotnet.System.Linq.Expressions.Expression>, propertyAccessor : dotnet.System.Reflection.MethodInfo) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Property_0__2__Expression_MethodInfo(&__thrown, expression?.get_handle() ?? nil, propertyAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
    /**
    Creates a  that represents accessing a property.

    - Parameter expression: An  to set the  property equal to. This can be null for static properties.
    - Parameter property: The  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Property(expression : Optional<dotnet.System.Linq.Expressions.Expression>, property : dotnet.System.Reflection.PropertyInfo) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Property_0__2__Expression_PropertyInfo(&__thrown, expression?.get_handle() ?? nil, property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates an  representing the access to an indexed property.

    - Parameter instance: The object to which the property belongs. If the property is static/shared, it must be null.
    - Parameter indexer: The  that represents the property to index.
    - Parameter arguments: An  of  objects that are used to index the property.
    - Returns: The created .

    */
    open class func Property(instance : Optional<dotnet.System.Linq.Expressions.Expression>, indexer : dotnet.System.Reflection.PropertyInfo, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_IndexExpression__Property_0__3__Expression_PropertyInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, instance?.get_handle() ?? nil, indexer.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
    /**
    Creates an  representing the access to an indexed property.

    - Parameter instance: The object to which the property belongs. If the property is static/shared, it must be null.
    - Parameter indexer: The  that represents the property to index.
    - Parameter arguments: An array of  objects that are used to index the property.
    - Returns: The created .

    */
    open class func Property(instance : Optional<dotnet.System.Linq.Expressions.Expression>, indexer : dotnet.System.Reflection.PropertyInfo, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_IndexExpression__Property_0__3__Expression_PropertyInfo_ExpressionArray(&__thrown, instance?.get_handle() ?? nil, indexer.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression, System.String)
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
    /**
    Creates a  that represents accessing a property.

    - Parameter expression: An  whose  contains a property named . This can be  for static properties.
    - Parameter propertyName: The name of a property to be accessed.
    - Returns: A  that has the  property equal to , the  property set to , and the  property set to the  that represents the property denoted by .

    */
    open class func Property(expression : dotnet.System.Linq.Expressions.Expression, propertyName : dotnet.System.String) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Property_0__2__Expression_String(&__thrown, expression.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
    /**
    Creates an  representing the access to an indexed property.

    - Parameter instance: The object to which the property belongs. If the property is static/shared, it must be null.
    - Parameter propertyName: The name of the indexer.
    - Parameter arguments: An array of  objects that are used to index the property.
    - Returns: The created .

    */
    open class func Property(instance : dotnet.System.Linq.Expressions.Expression, propertyName : dotnet.System.String, arguments : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_IndexExpression__Property_0__3__Expression_String_ExpressionArray(&__thrown, instance.get_handle(), propertyName.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression, System.Type, System.String)
// docid: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
    /**
    Creates a  accessing a property.

    - Parameter expression: The containing object of the property. This can be null for static properties.
    - Parameter type: The  that contains the property.
    - Parameter propertyName: The property to be accessed.
    - Returns: The created .

    */
    open class func Property(expression : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_, propertyName : dotnet.System.String) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__Property_0__3__Expression_Type_String(&__thrown, expression?.get_handle() ?? nil, type.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberExpression PropertyOrField(System.Linq.Expressions.Expression, System.String)
// docid: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
    /**
    Creates a  that represents accessing a property or field.

    - Parameter expression: An  whose  contains a property or field named . This can be null for static members.
    - Parameter propertyOrFieldName: The name of a property or field to be accessed.
    - Returns: A  that has the  property equal to , the  property set to , and the  property set to the  or  that represents the property or field denoted by .

    */
    open class func PropertyOrField(expression : dotnet.System.Linq.Expressions.Expression, propertyOrFieldName : dotnet.System.String) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_MemberExpression__PropertyOrField_0__2__Expression_String(&__thrown, expression.get_handle(), propertyOrFieldName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Quote(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an expression that has a constant value of type .

    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func Quote(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Quote_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression Reduce()
// docid: M:System.Linq.Expressions.Expression.Reduce
    /**
    Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.

    - Returns: The reduced expression.

    */
    open func Reduce() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Expression__Reduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression ReduceAndCheck()
// docid: M:System.Linq.Expressions.Expression.ReduceAndCheck
    /**
    Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.

    - Returns: The reduced expression.

    */
    open func ReduceAndCheck() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Expression__ReduceAndCheck_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression ReduceExtensions()
// docid: M:System.Linq.Expressions.Expression.ReduceExtensions
    /**
    Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.

    - Returns: The reduced expression.

    */
    open func ReduceExtensions() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Expression__ReduceExtensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a reference equality comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ReferenceEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ReferenceEqual_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a reference inequality comparison.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func ReferenceNotEqual(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__ReferenceNotEqual_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Rethrow()
// docid: M:System.Linq.Expressions.Expression.Rethrow
    /**
    Creates a  that represents a rethrowing of an exception.

    - Returns: A  that represents a rethrowing of an exception.

    */
    open class func Rethrow() throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Rethrow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Rethrow(System.Type)
// docid: M:System.Linq.Expressions.Expression.Rethrow(System.Type)
    /**
    Creates a  that represents a rethrowing of an exception with a given type.

    - Parameter type: The new  of the expression.
    - Returns: A  that represents a rethrowing of an exception.

    */
    open class func Rethrow(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Rethrow_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget)
// docid: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
    /**
    Creates a  representing a return statement.

    - Parameter target: The  that the  will jump to.
    - Returns: A  with  equal to Return, the  property set to , and a null value to be passed to the target label upon jumping.

    */
    open class func Return(target : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Return_0__1__LabelTarget(&__thrown, target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a return statement. The value passed to the label upon jumping can be specified.

    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Returns: A  with  equal to Continue, the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func Return(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Return_0__2__LabelTarget_Expression(&__thrown, target.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  representing a return statement with the specified type. The value passed to the label upon jumping can be specified.

    - Parameter target: The  that the  will jump to.
    - Parameter value: The value that will be passed to the associated label upon jumping.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Continue, the  property set to , the  property set to , and  to be passed to the target label upon jumping.

    */
    open class func Return(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Return_0__3__LabelTarget_Expression_Type(&__thrown, target.get_handle(), value?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget, System.Type)
// docid: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
    /**
    Creates a  representing a return statement with the specified type.

    - Parameter target: The  that the  will jump to.
    - Parameter type: An  to set the  property equal to.
    - Returns: A  with  equal to Return, the  property set to , the  property set to , and a null value to be passed to the target label upon jumping.

    */
    open class func Return(target : dotnet.System.Linq.Expressions.LabelTarget, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_GotoExpression__Return_0__2__LabelTarget_Type(&__thrown, target.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise right-shift operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func RightShift(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__RightShift_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise right-shift operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func RightShift(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__RightShift_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a bitwise right-shift assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func RightShiftAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__RightShiftAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a bitwise right-shift assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func RightShiftAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__RightShiftAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a bitwise right-shift assignment operation.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func RightShiftAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__RightShiftAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates an instance of .

    - Parameter variables: A collection of  objects to use to populate the  collection.
    - Returns: An instance of  that has the  property equal to  and the  property set to the specified value.

    */
    open class func RuntimeVariables(variables : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>) throws -> dotnet.System.Linq.Expressions.RuntimeVariablesExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_RuntimeVariablesExpression__RuntimeVariables_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, variables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.RuntimeVariablesExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
// docid: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
    /**
    Creates an instance of .

    - Parameter variables: An array of  objects to use to populate the  collection.
    - Returns: An instance of  that has the  property equal to  and the  property set to the specified value.

    */
    open class func RuntimeVariables(variables : dotnet.System_Arr<dotnet.System.Linq.Expressions.ParameterExpression>) throws -> dotnet.System.Linq.Expressions.RuntimeVariablesExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_RuntimeVariablesExpression__RuntimeVariables_0__1__ParameterExpressionArray(&__thrown, variables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.RuntimeVariablesExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic subtraction operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func Subtract(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Subtract_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic subtraction operation that does not have overflow checking.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func Subtract(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__Subtract_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a subtraction assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func SubtractAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractAssign_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a subtraction assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func SubtractAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractAssign_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a subtraction assignment operation that does not have overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func SubtractAssign(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractAssign_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a subtraction assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func SubtractAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractAssignChecked_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a subtraction assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func SubtractAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractAssignChecked_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
// docid: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
    /**
    Creates a  that represents a subtraction assignment operation that has overflow checking.

    - Parameter left: An  to set the  property equal to.
    - Parameter right: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Parameter conversion: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , , and  properties set to the specified values.

    */
    open class func SubtractAssignChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>, conversion : Optional<dotnet.System.Linq.Expressions.LambdaExpression>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractAssignChecked_0__4__Expression_Expression_MethodInfo_LambdaExpression(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil, conversion?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  that represents an arithmetic subtraction operation that has overflow checking.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func SubtractChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractChecked_0__2__Expression_Expression(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.BinaryExpression SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents an arithmetic subtraction operation that has overflow checking.

    - Parameter left: A  to set the  property equal to.
    - Parameter right: A  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the , , and  properties set to the specified values.

    */
    open class func SubtractChecked(left : dotnet.System.Linq.Expressions.Expression, right : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.BinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_BinaryExpression__SubtractChecked_0__3__Expression_Expression_MethodInfo(&__thrown, left.get_handle(), right.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.BinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
// docid: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
    /**
    Creates a  that represents a  statement that has a default case.

    - Parameter switchValue: The value to be tested against each case.
    - Parameter defaultBody: The result of the switch if  does not match any of the cases.
    - Parameter cases: The set of cases for this switch expression.
    - Returns: The created .

    */
    open class func Switch(switchValue : dotnet.System.Linq.Expressions.Expression, defaultBody : Optional<dotnet.System.Linq.Expressions.Expression>, cases : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.SwitchCase>>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchExpression__Switch_0__3__Expression_Expression_SwitchCaseArray(&__thrown, switchValue.get_handle(), defaultBody?.get_handle() ?? nil, (cases?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
// docid: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
    /**
    Creates a  that represents a  statement that has a default case.

    - Parameter switchValue: The value to be tested against each case.
    - Parameter defaultBody: The result of the switch if  does not match any of the cases.
    - Parameter comparison: The equality comparison method to use.
    - Parameter cases: The set of cases for this switch expression.
    - Returns: The created .

    */
    open class func Switch(switchValue : dotnet.System.Linq.Expressions.Expression, defaultBody : Optional<dotnet.System.Linq.Expressions.Expression>, comparison : Optional<dotnet.System.Reflection.MethodInfo>, cases : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.SwitchCase>>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchExpression__Switch_0__4__Expression_Expression_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase_(&__thrown, switchValue.get_handle(), defaultBody?.get_handle() ?? nil, comparison?.get_handle() ?? nil, (cases?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
// docid: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
    /**
    Creates a  that represents a  statement that has a default case.

    - Parameter switchValue: The value to be tested against each case.
    - Parameter defaultBody: The result of the switch if  does not match any of the cases.
    - Parameter comparison: The equality comparison method to use.
    - Parameter cases: The set of cases for this switch expression.
    - Returns: The created .

    */
    open class func Switch(switchValue : dotnet.System.Linq.Expressions.Expression, defaultBody : Optional<dotnet.System.Linq.Expressions.Expression>, comparison : Optional<dotnet.System.Reflection.MethodInfo>, cases : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.SwitchCase>>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchExpression__Switch_0__4__Expression_Expression_MethodInfo_SwitchCaseArray(&__thrown, switchValue.get_handle(), defaultBody?.get_handle() ?? nil, comparison?.get_handle() ?? nil, (cases?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
// docid: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
    /**
    Creates a  that represents a  statement without a default case.

    - Parameter switchValue: The value to be tested against each case.
    - Parameter cases: The set of cases for this switch expression.
    - Returns: The created .

    */
    open class func Switch(switchValue : dotnet.System.Linq.Expressions.Expression, cases : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.SwitchCase>>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchExpression__Switch_0__2__Expression_SwitchCaseArray(&__thrown, switchValue.get_handle(), (cases?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchExpression Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
// docid: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
    /**
    Creates a  that represents a  statement that has a default case.

    - Parameter type: The result type of the switch.
    - Parameter switchValue: The value to be tested against each case.
    - Parameter defaultBody: The result of the switch if  does not match any of the cases.
    - Parameter comparison: The equality comparison method to use.
    - Parameter cases: The set of cases for this switch expression.
    - Returns: The created .

    */
    open class func Switch(type : Optional<dotnet.System.Type_>, switchValue : dotnet.System.Linq.Expressions.Expression, defaultBody : Optional<dotnet.System.Linq.Expressions.Expression>, comparison : Optional<dotnet.System.Reflection.MethodInfo>, cases : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.SwitchCase>>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchExpression__Switch_0__5__Type_Expression_Expression_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase_(&__thrown, type?.get_handle() ?? nil, switchValue.get_handle(), defaultBody?.get_handle() ?? nil, comparison?.get_handle() ?? nil, (cases?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchExpression Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
// docid: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
    /**
    Creates a  that represents a  statement that has a default case.

    - Parameter type: The result type of the switch.
    - Parameter switchValue: The value to be tested against each case.
    - Parameter defaultBody: The result of the switch if  does not match any of the cases.
    - Parameter comparison: The equality comparison method to use.
    - Parameter cases: The set of cases for this switch expression.
    - Returns: The created .

    */
    open class func Switch(type : Optional<dotnet.System.Type_>, switchValue : dotnet.System.Linq.Expressions.Expression, defaultBody : Optional<dotnet.System.Linq.Expressions.Expression>, comparison : Optional<dotnet.System.Reflection.MethodInfo>, cases : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.SwitchCase>>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchExpression__Switch_0__5__Type_Expression_Expression_MethodInfo_SwitchCaseArray(&__thrown, type?.get_handle() ?? nil, switchValue.get_handle(), defaultBody?.get_handle() ?? nil, comparison?.get_handle() ?? nil, (cases?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchCase SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a  object to be used in a  object.

    - Parameter body: The body of the case.
    - Parameter testValues: The test values of the case.
    - Returns: The created .

    */
    open class func SwitchCase(body : dotnet.System.Linq.Expressions.Expression, testValues : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.SwitchCase {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchCase__SwitchCase_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, body.get_handle(), testValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchCase(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchCase SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
    /**
    Creates a  for use in a .

    - Parameter body: The body of the case.
    - Parameter testValues: The test values of the case.
    - Returns: The created .

    */
    open class func SwitchCase(body : dotnet.System.Linq.Expressions.Expression, testValues : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.SwitchCase {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SwitchCase__SwitchCase_0__2__Expression_ExpressionArray(&__thrown, body.get_handle(), testValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchCase(hndl : __return);
        }
    }
    // System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(System.String)
// docid: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)
    /**
    Creates an instance of .

    - Parameter fileName: A  to set the  equal to.
    - Returns: A  that has the  property set to the specified value.

    */
    open class func SymbolDocument(fileName : dotnet.System.String) throws -> dotnet.System.Linq.Expressions.SymbolDocumentInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SymbolDocumentInfo__SymbolDocument_0__1__String(&__thrown, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SymbolDocumentInfo(hndl : __return);
        }
    }
    // System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(System.String, System.Guid)
// docid: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
    /**
    Creates an instance of .

    - Parameter fileName: A  to set the  equal to.
    - Parameter language: A  to set the  equal to.
    - Returns: A  that has the  and  properties set to the specified value.

    */
    open class func SymbolDocument(fileName : dotnet.System.String, language : dotnet.System.Guid) throws -> dotnet.System.Linq.Expressions.SymbolDocumentInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SymbolDocumentInfo__SymbolDocument_0__2__String_Guid(&__thrown, fileName.get_handle(), language.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SymbolDocumentInfo(hndl : __return);
        }
    }
    // System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(System.String, System.Guid, System.Guid)
// docid: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
    /**
    Creates an instance of .

    - Parameter fileName: A  to set the  equal to.
    - Parameter language: A  to set the  equal to.
    - Parameter languageVendor: A  to set the  equal to.
    - Returns: A  that has the  and  and  properties set to the specified value.

    */
    open class func SymbolDocument(fileName : dotnet.System.String, language : dotnet.System.Guid, languageVendor : dotnet.System.Guid) throws -> dotnet.System.Linq.Expressions.SymbolDocumentInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SymbolDocumentInfo__SymbolDocument_0__3__String_Guid_Guid(&__thrown, fileName.get_handle(), language.get_handle(), languageVendor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SymbolDocumentInfo(hndl : __return);
        }
    }
    // System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)
// docid: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
    /**
    Creates an instance of .

    - Parameter fileName: A  to set the  equal to.
    - Parameter language: A  to set the  equal to.
    - Parameter languageVendor: A  to set the  equal to.
    - Parameter documentType: A  to set the  equal to.
    - Returns: A  that has the  and  and  and  properties set to the specified value.

    */
    open class func SymbolDocument(fileName : dotnet.System.String, language : dotnet.System.Guid, languageVendor : dotnet.System.Guid, documentType : dotnet.System.Guid) throws -> dotnet.System.Linq.Expressions.SymbolDocumentInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_SymbolDocumentInfo__SymbolDocument_0__4__String_Guid_Guid_Guid(&__thrown, fileName.get_handle(), language.get_handle(), languageVendor.get_handle(), documentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SymbolDocumentInfo(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Throw(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a throwing of an exception.

    - Parameter value: An .
    - Returns: A  that represents the exception.

    */
    open class func Throw(value : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Throw_0__1__Expression(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Throw(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that represents a throwing of an exception with a given type.

    - Parameter value: An .
    - Parameter type: The new  of the expression.
    - Returns: A  that represents the exception.

    */
    open class func Throw(value : Optional<dotnet.System.Linq.Expressions.Expression>, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Throw_0__2__Expression_Type(&__thrown, value?.get_handle() ?? nil, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Linq.Expressions.Expression.ToString
    /**
    Returns a textual representation of the .

    - Returns: A textual representation of the .

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Linq.Expressions.TryExpression TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
// docid: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
    /**
    Creates a  representing a try block with any number of catch statements and neither a fault nor finally block.

    - Parameter body: The body of the try block.
    - Parameter handlers: The array of zero or more  expressions representing the catch statements to be associated with the try block.
    - Returns: The created .

    */
    open class func TryCatch(body : dotnet.System.Linq.Expressions.Expression, handlers : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.CatchBlock>>) throws -> dotnet.System.Linq.Expressions.TryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TryExpression__TryCatch_0__2__Expression_CatchBlockArray(&__thrown, body.get_handle(), (handlers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.TryExpression TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
// docid: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
    /**
    Creates a  representing a try block with any number of catch statements and a finally block.

    - Parameter body: The body of the try block.
    - Parameter finally: The body of the finally block.
    - Parameter handlers: The array of zero or more  expressions representing the catch statements to be associated with the try block.
    - Returns: The created .

    */
    open class func TryCatchFinally(body : dotnet.System.Linq.Expressions.Expression, finally : Optional<dotnet.System.Linq.Expressions.Expression>, handlers : Optional<dotnet.System_Arr<dotnet.System.Linq.Expressions.CatchBlock>>) throws -> dotnet.System.Linq.Expressions.TryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TryExpression__TryCatchFinally_0__3__Expression_Expression_CatchBlockArray(&__thrown, body.get_handle(), finally?.get_handle() ?? nil, (handlers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.TryExpression TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a try block with a fault block and no catch statements.

    - Parameter body: The body of the try block.
    - Parameter fault: The body of the fault block.
    - Returns: The created .

    */
    open class func TryFault(body : dotnet.System.Linq.Expressions.Expression, fault : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.TryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TryExpression__TryFault_0__2__Expression_Expression(&__thrown, body.get_handle(), fault?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.TryExpression TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a  representing a try block with a finally block and no catch statements.

    - Parameter body: The body of the try block.
    - Parameter finally: The body of the finally block.
    - Returns: The created .

    */
    open class func TryFinally(body : dotnet.System.Linq.Expressions.Expression, finally : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.TryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TryExpression__TryFinally_0__2__Expression_Expression(&__thrown, body.get_handle(), finally?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TryExpression(hndl : __return);
        }
    }
    // bool TryGetActionType(System.Type[], ref System.Type)
// docid: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
    /**
    Creates a  object that represents a generic System.Action delegate type that has specific type arguments.

    - Parameter typeArgs: An array of Type objects that specify the type arguments for the System.Action delegate type.
    - Parameter actionType: When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the . This parameter is passed uninitialized.
    - Returns: 
         if generic System.Action delegate type was created for specific ; otherwise, .

    */
    open class func TryGetActionType(typeArgs : dotnet.System_Arr<dotnet.System.Type_>, actionType : inout dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actionType = actionType.get_handle();
        let __return = System_Linq_Expressions_Expression_bool__TryGetActionType_0__2__TypeArray_outType(&__thrown, typeArgs.get_handle(), &_tmp_out_actionType);
        let _tmp2_actionType = dotnet.System.Type_(hndl: _tmp_out_actionType);
            actionType = _tmp2_actionType;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetFuncType(System.Type[], ref System.Type)
// docid: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
    /**
    Creates a  object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.

    - Parameter typeArgs: An array of Type objects that specify the type arguments for the System.Func delegate type.
    - Parameter funcType: When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the . This parameter is passed uninitialized.
    - Returns: 
         if generic System.Func delegate type was created for specific ; otherwise, .

    */
    open class func TryGetFuncType(typeArgs : dotnet.System_Arr<dotnet.System.Type_>, funcType : inout dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_funcType = funcType.get_handle();
        let __return = System_Linq_Expressions_Expression_bool__TryGetFuncType_0__2__TypeArray_outType(&__thrown, typeArgs.get_handle(), &_tmp_out_funcType);
        let _tmp2_funcType = dotnet.System.Type_(hndl: _tmp_out_funcType);
            funcType = _tmp2_funcType;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Linq.Expressions.UnaryExpression TypeAs(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that represents an explicit reference or boxing conversion where  is supplied if the conversion fails.

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func TypeAs(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__TypeAs_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.TypeBinaryExpression TypeEqual(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that compares run-time type identity.

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  for which the  property is equal to  and for which the  and  properties are set to the specified values.

    */
    open class func TypeEqual(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.TypeBinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TypeBinaryExpression__TypeEqual_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TypeBinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.TypeBinaryExpression TypeIs(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a .

    - Parameter expression: An  to set the  property equal to.
    - Parameter type: A  to set the  property equal to.
    - Returns: A  for which the  property is equal to  and for which the  and  properties are set to the specified values.

    */
    open class func TypeIs(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.TypeBinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_TypeBinaryExpression__TypeIs_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TypeBinaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression UnaryPlus(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
    /**
    Creates a  that represents a unary plus operation.

    - Parameter expression: An  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  property set to the specified value.

    */
    open class func UnaryPlus(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__UnaryPlus_0__1__Expression(&__thrown, expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
// docid: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
    /**
    Creates a  that represents a unary plus operation.

    - Parameter expression: An  to set the  property equal to.
    - Parameter method: A  to set the  property equal to.
    - Returns: A  that has the  property equal to  and the  and  properties set to the specified values.

    */
    open class func UnaryPlus(expression : dotnet.System.Linq.Expressions.Expression, method : Optional<dotnet.System.Reflection.MethodInfo>) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__UnaryPlus_0__2__Expression_MethodInfo(&__thrown, expression.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Unbox(System.Linq.Expressions.Expression, System.Type)
// docid: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
    /**
    Creates a  that represents an explicit unboxing.

    - Parameter expression: An  to unbox.
    - Parameter type: The new  of the expression.
    - Returns: An instance of .

    */
    open class func Unbox(expression : dotnet.System.Linq.Expressions.Expression, type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_UnaryExpression__Unbox_0__2__Expression_Type(&__thrown, expression.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ParameterExpression Variable(System.Type)
// docid: M:System.Linq.Expressions.Expression.Variable(System.Type)
    /**
    Creates a  node that can be used to identify a parameter or a variable in an expression tree.

    - Parameter type: The type of the parameter or variable.
    - Returns: A  node with the specified name and type

    */
    open class func Variable(type : dotnet.System.Type_) throws -> dotnet.System.Linq.Expressions.ParameterExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ParameterExpression__Variable_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ParameterExpression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ParameterExpression Variable(System.Type, System.String)
// docid: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)
    /**
    Creates a  node that can be used to identify a parameter or a variable in an expression tree.

    - Parameter type: The type of the parameter or variable.
    - Parameter name: The name of the parameter or variable. This name is used for debugging or printing purpose only.
    - Returns: A  node with the specified name and type.

    */
    open class func Variable(type : dotnet.System.Type_, name : Optional<dotnet.System.String>) throws -> dotnet.System.Linq.Expressions.ParameterExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ParameterExpression__Variable_0__2__Type_String(&__thrown, type.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ParameterExpression(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReduce()
// docid: M:System.Linq.Expressions.Expression.get_CanReduce
    open func get_CanReduce() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_bool__get_CanReduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.Expression.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.Expression.get_Type
    open func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.

    */
    open var CanReduce : Bool {
        get {
            return try! get_CanReduce();
        }
    }
    /**
    Gets the node type of this .

    */
    open var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // Expression


// type: System.Linq.Expressions.ExpressionType
    /**
    Describes the node types for the nodes of an expression tree.

    */
public struct ExpressionType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ExpressionType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Linq.Expressions.ExpressionType Add
    /**
    An addition operation, such as a + b, without overflow checking, for numeric operands.

    */
    public static var Add : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Add());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType AddChecked
    /**
    An addition operation, such as (a + b), with overflow checking, for numeric operands.

    */
    public static var AddChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_AddChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType And
    /**
    A bitwise or logical  operation, such as (a & b) in C# and (a And b) in Visual Basic.

    */
    public static var And : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_And());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType AndAlso
    /**
    A conditional  operation that evaluates the second operand only if the first operand evaluates to . It corresponds to (a && b) in C# and (a AndAlso b) in Visual Basic.

    */
    public static var AndAlso : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_AndAlso());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ArrayLength
    /**
    An operation that obtains the length of a one-dimensional array, such as array.Length.

    */
    public static var ArrayLength : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ArrayLength());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ArrayIndex
    /**
    An indexing operation in a one-dimensional array, such as array[index] in C# or array(index) in Visual Basic.

    */
    public static var ArrayIndex : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ArrayIndex());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Call
    /**
    A method call, such as in the obj.sampleMethod() expression.

    */
    public static var Call : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Call());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Coalesce
    /**
    A node that represents a null coalescing operation, such as (a ?? b) in C# or If(a, b) in Visual Basic.

    */
    public static var Coalesce : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Coalesce());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Conditional
    /**
    A conditional operation, such as a > b ? a : b in C# or If(a > b, a, b) in Visual Basic.

    */
    public static var Conditional : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Conditional());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Constant
    /**
    A constant value.

    */
    public static var Constant : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Constant());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Convert
    /**
    A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.

    */
    public static var Convert : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Convert());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ConvertChecked
    /**
    A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.

    */
    public static var ConvertChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ConvertChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Divide
    /**
    A division operation, such as (a / b), for numeric operands.

    */
    public static var Divide : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Divide());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Equal
    /**
    A node that represents an equality comparison, such as (a == b) in C# or (a = b) in Visual Basic.

    */
    public static var Equal : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Equal());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ExclusiveOr
    /**
    A bitwise or logical  operation, such as (a ^ b) in C# or (a Xor b) in Visual Basic.

    */
    public static var ExclusiveOr : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ExclusiveOr());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType GreaterThan
    /**
    A "greater than" comparison, such as (a > b).

    */
    public static var GreaterThan : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_GreaterThan());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType GreaterThanOrEqual
    /**
    A "greater than or equal to" comparison, such as (a >= b).

    */
    public static var GreaterThanOrEqual : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_GreaterThanOrEqual());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Invoke
    /**
    An operation that invokes a delegate or lambda expression, such as sampleDelegate.Invoke().

    */
    public static var Invoke : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Invoke());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Lambda
    /**
    A lambda expression, such as a => a + a in C# or Function(a) a + a in Visual Basic.

    */
    public static var Lambda : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Lambda());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType LeftShift
    /**
    A bitwise left-shift operation, such as (a << b).

    */
    public static var LeftShift : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_LeftShift());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType LessThan
    /**
    A "less than" comparison, such as (a < b).

    */
    public static var LessThan : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_LessThan());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType LessThanOrEqual
    /**
    A "less than or equal to" comparison, such as (a <= b).

    */
    public static var LessThanOrEqual : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_LessThanOrEqual());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ListInit
    /**
    An operation that creates a new  object and initializes it from a list of elements, such as new List<SampleType>(){ a, b, c } in C# or Dim sampleList = { a, b, c } in Visual Basic.

    */
    public static var ListInit : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ListInit());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType MemberAccess
    /**
    An operation that reads from a field or property, such as obj.SampleProperty.

    */
    public static var MemberAccess : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_MemberAccess());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType MemberInit
    /**
    An operation that creates a new object and initializes one or more of its members, such as new Point { X = 1, Y = 2 } in C# or New Point With {.X = 1, .Y = 2} in Visual Basic.

    */
    public static var MemberInit : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_MemberInit());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Modulo
    /**
    An arithmetic remainder operation, such as (a % b) in C# or (a Mod b) in Visual Basic.

    */
    public static var Modulo : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Modulo());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Multiply
    /**
    A multiplication operation, such as (a (ASTERISK) b), without overflow checking, for numeric operands.

    */
    public static var Multiply : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Multiply());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType MultiplyChecked
    /**
    An multiplication operation, such as (a (ASTERISK) b), that has overflow checking, for numeric operands.

    */
    public static var MultiplyChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_MultiplyChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Negate
    /**
    An arithmetic negation operation, such as (-a). The object a should not be modified in place.

    */
    public static var Negate : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Negate());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType UnaryPlus
    /**
    A unary plus operation, such as (+a). The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.

    */
    public static var UnaryPlus : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_UnaryPlus());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType NegateChecked
    /**
    An arithmetic negation operation, such as (-a), that has overflow checking. The object a should not be modified in place.

    */
    public static var NegateChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_NegateChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType New
    /**
    An operation that calls a constructor to create a new object, such as new SampleType().

    */
    public static var New : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_New());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType NewArrayInit
    /**
    An operation that creates a new one-dimensional array and initializes it from a list of elements, such as new SampleType[]{a, b, c} in C# or New SampleType(){a, b, c} in Visual Basic.

    */
    public static var NewArrayInit : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_NewArrayInit());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType NewArrayBounds
    /**
    An operation that creates a new array, in which the bounds for each dimension are specified, such as new SampleType[dim1, dim2] in C# or New SampleType(dim1, dim2) in Visual Basic.

    */
    public static var NewArrayBounds : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_NewArrayBounds());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Not
    /**
    A bitwise complement or logical negation operation. In C#, it is equivalent to (~a) for integral types and to (!a) for Boolean values. In Visual Basic, it is equivalent to (Not a). The object a should not be modified in place.

    */
    public static var Not : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Not());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType NotEqual
    /**
    An inequality comparison, such as (a != b) in C# or (a <> b) in Visual Basic.

    */
    public static var NotEqual : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_NotEqual());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Or
    /**
    A bitwise or logical  operation, such as (a | b) in C# or (a Or b) in Visual Basic.

    */
    public static var Or : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Or());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType OrElse
    /**
    A short-circuiting conditional  operation, such as (a || b) in C# or (a OrElse b) in Visual Basic.

    */
    public static var OrElse : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_OrElse());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Parameter
    /**
    A reference to a parameter or variable that is defined in the context of the expression. For more information, see .

    */
    public static var Parameter : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Parameter());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Power
    /**
    A mathematical operation that raises a number to a power, such as (a ^ b) in Visual Basic.

    */
    public static var Power : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Power());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Quote
    /**
    An expression that has a constant value of type . A  node can contain references to parameters that are defined in the context of the expression it represents.

    */
    public static var Quote : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Quote());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType RightShift
    /**
    A bitwise right-shift operation, such as (a >> b).

    */
    public static var RightShift : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_RightShift());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Subtract
    /**
    A subtraction operation, such as (a - b), without overflow checking, for numeric operands.

    */
    public static var Subtract : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Subtract());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType SubtractChecked
    /**
    An arithmetic subtraction operation, such as (a - b), that has overflow checking, for numeric operands.

    */
    public static var SubtractChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_SubtractChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType TypeAs
    /**
    An explicit reference or boxing conversion in which  is supplied if the conversion fails, such as (obj as SampleType) in C# or TryCast(obj, SampleType) in Visual Basic.

    */
    public static var TypeAs : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_TypeAs());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType TypeIs
    /**
    A type test, such as obj is SampleType in C# or TypeOf obj is SampleType in Visual Basic.

    */
    public static var TypeIs : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_TypeIs());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Assign
    /**
    An assignment operation, such as (a = b).

    */
    public static var Assign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Assign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Block
    /**
    A block of expressions.

    */
    public static var Block : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Block());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType DebugInfo
    /**
    Debugging information.

    */
    public static var DebugInfo : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_DebugInfo());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Decrement
    /**
    A unary decrement operation, such as (a - 1) in C# and Visual Basic. The object a should not be modified in place.

    */
    public static var Decrement : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Decrement());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Dynamic
    /**
    A dynamic operation.

    */
    public static var Dynamic : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Dynamic());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Default
    /**
    A default value.

    */
    public static var Default : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Default());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Extension
    /**
    An extension expression.

    */
    public static var Extension : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Extension());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Goto
    /**
    A "go to" expression, such as goto Label in C# or GoTo Label in Visual Basic.

    */
    public static var Goto : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Goto());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Increment
    /**
    A unary increment operation, such as (a + 1) in C# and Visual Basic. The object a should not be modified in place.

    */
    public static var Increment : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Increment());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Index
    /**
    An index operation or an operation that accesses a property that takes arguments.

    */
    public static var Index : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Index());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Label
    /**
    A label.

    */
    public static var Label : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Label());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType RuntimeVariables
    /**
    A list of run-time variables. For more information, see .

    */
    public static var RuntimeVariables : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_RuntimeVariables());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Loop
    /**
    A loop, such as for or while.

    */
    public static var Loop : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Loop());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Switch
    /**
    A switch operation, such as  in C# or  in Visual Basic.

    */
    public static var Switch : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Switch());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Throw
    /**
    An operation that throws an exception, such as throw new Exception().

    */
    public static var Throw : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Throw());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Try
    /**
    A  expression.

    */
    public static var Try : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Try());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType Unbox
    /**
    An unbox value type operation, such as  and  instructions in MSIL.

    */
    public static var Unbox : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_Unbox());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType AddAssign
    /**
    An addition compound assignment operation, such as (a += b), without overflow checking, for numeric operands.

    */
    public static var AddAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_AddAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType AndAssign
    /**
    A bitwise or logical  compound assignment operation, such as (a &= b) in C#.

    */
    public static var AndAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_AndAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType DivideAssign
    /**
    An division compound assignment operation, such as (a /= b), for numeric operands.

    */
    public static var DivideAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_DivideAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ExclusiveOrAssign
    /**
    A bitwise or logical  compound assignment operation, such as (a ^= b) in C#.

    */
    public static var ExclusiveOrAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ExclusiveOrAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType LeftShiftAssign
    /**
    A bitwise left-shift compound assignment, such as (a <<= b).

    */
    public static var LeftShiftAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_LeftShiftAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType ModuloAssign
    /**
    An arithmetic remainder compound assignment operation, such as (a %= b) in C#.

    */
    public static var ModuloAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_ModuloAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType MultiplyAssign
    /**
    A multiplication compound assignment operation, such as (a (ASTERISK)= b), without overflow checking, for numeric operands.

    */
    public static var MultiplyAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_MultiplyAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType OrAssign
    /**
    A bitwise or logical  compound assignment, such as (a |= b) in C#.

    */
    public static var OrAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_OrAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType PowerAssign
    /**
    A compound assignment operation that raises a number to a power, such as (a ^= b) in Visual Basic.

    */
    public static var PowerAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_PowerAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType RightShiftAssign
    /**
    A bitwise right-shift compound assignment operation, such as (a >>= b).

    */
    public static var RightShiftAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_RightShiftAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType SubtractAssign
    /**
    A subtraction compound assignment operation, such as (a -= b), without overflow checking, for numeric operands.

    */
    public static var SubtractAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_SubtractAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType AddAssignChecked
    /**
    An addition compound assignment operation, such as (a += b), with overflow checking, for numeric operands.

    */
    public static var AddAssignChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_AddAssignChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType MultiplyAssignChecked
    /**
    A multiplication compound assignment operation, such as (a (ASTERISK)= b), that has overflow checking, for numeric operands.

    */
    public static var MultiplyAssignChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_MultiplyAssignChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType SubtractAssignChecked
    /**
    A subtraction compound assignment operation, such as (a -= b), that has overflow checking, for numeric operands.

    */
    public static var SubtractAssignChecked : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_SubtractAssignChecked());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType PreIncrementAssign
    /**
    A unary prefix increment, such as (++a). The object a should be modified in place.

    */
    public static var PreIncrementAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_PreIncrementAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType PreDecrementAssign
    /**
    A unary prefix decrement, such as (--a). The object a should be modified in place.

    */
    public static var PreDecrementAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_PreDecrementAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType PostIncrementAssign
    /**
    A unary postfix increment, such as (a++). The object a should be modified in place.

    */
    public static var PostIncrementAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_PostIncrementAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType PostDecrementAssign
    /**
    A unary postfix decrement, such as (a--). The object a should be modified in place.

    */
    public static var PostDecrementAssign : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_PostDecrementAssign());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType TypeEqual
    /**
    An exact type test.

    */
    public static var TypeEqual : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_TypeEqual());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType OnesComplement
    /**
    A ones complement operation, such as (~a) in C#.

    */
    public static var OnesComplement : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_OnesComplement());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType IsTrue
    /**
    A  condition value.

    */
    public static var IsTrue : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_IsTrue());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.ExpressionType IsFalse
    /**
    A  condition value.

    */
    public static var IsFalse : dotnet.System.Linq.Expressions.ExpressionType {
        get {
        let __return = dotnet.System.Linq.Expressions.ExpressionType(val: System_Linq_Expressions_ExpressionType_get_IsFalse());
            return __return;
        }
    }
} // ExpressionType


// type: System.Linq.Expressions.ExpressionVisitor
    /**
    Represents a visitor or rewriter for expression trees.

    */
open class ExpressionVisitor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ExpressionVisitor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    /**
    Dispatches the list of expressions to one of the more specialized visit methods in this class.

    - Parameter nodes: The expressions to visit.
    - Returns: The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.

    */
    open func Visit(nodes : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ExpressionVisitor_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___Visit_0__1__System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), nodes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression Visit(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    /**
    Dispatches the expression to one of the more specialized visit methods in this class.

    - Parameter node: The expression to visit.
    - Returns: The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.

    */
    open func Visit(node : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ExpressionVisitor_Expression__Visit_0__1__Expression(&__thrown, self.get_handle(), node?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String)
// docid: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    /**
    Visits all expressions in the collection, casting the results back to the original expression type.

    - Parameter nodes: The expressions to visit.
    - Parameter callerName: The name of the calling method; used to report a better error message.
    - Returns: The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.

    */
    open func VisitAndConvert<UT : SGBridgeGenericValue>(nodes : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<UT>, callerName : Optional<dotnet.System.String>) throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ExpressionVisitor_System_Collections_ObjectModel_ReadOnlyCollection_UT___VisitAndConvert_1__2__System_Collections_ObjectModel_ReadOnlyCollection_UT__String(UT.get_type_handle(), &__thrown, self.get_handle(), nodes.get_handle(), callerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // T VisitAndConvert<T>(T, System.String)
// docid: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    /**
    Visits an expression, casting the result back to the original expression type.

    - Parameter node: The expression to visit.
    - Parameter callerName: The name of the calling method; used to report to report a better error message.
    - Returns: The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.

    */
    open func VisitAndConvert<UT : SGBridgeGenericValue>(node : UT, callerName : Optional<dotnet.System.String>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ExpressionVisitor_UT__VisitAndConvert_1__2__UT_String(UT.get_type_handle(), &__thrown, self.get_handle(), node.to_gval(), callerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // System.Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T,T>)
// docid: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    /**
    Visits all nodes in the collection using a specified element visitor.

    - Parameter nodes: The nodes to visit.
    - Parameter elementVisitor: A delegate that visits a single element, optionally replacing it with a new element.
    - Returns: The modified node list, if any of the elements were modified; otherwise, returns the original node list.

    */
    open class func Visit<UT : SGBridgeGenericValue>(nodes : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<UT>, elementVisitor : dotnet.System.Func_2<UT,UT>) throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ExpressionVisitor_System_Collections_ObjectModel_ReadOnlyCollection_UT___Visit_1__2__System_Collections_ObjectModel_ReadOnlyCollection_UT__System_Func_UT_UT_(UT.get_type_handle(), &__thrown, nodes.get_handle(), elementVisitor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // delegate closure overload
    open class func Visit<UT : SGBridgeGenericValue>(nodes : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<UT>, elementVisitor : @escaping (UT) throws -> UT) throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<UT> {
        let del_elementVisitor = try dotnet.System.Func_2<UT,UT>(elementVisitor);
        return try Visit(nodes: nodes, elementVisitor: del_elementVisitor);
    }
} // ExpressionVisitor


// type: System.Linq.Expressions.Expression`1
    /**
    Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.

    */
public final class Expression_1<TDelegate : SGBridgeGenericValue>
    :
    dotnet.System.Linq.Expressions.LambdaExpression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_Expression_1_get_type_handle(TDelegate.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // TDelegate Compile()
// docid: M:System.Linq.Expressions.Expression`1.Compile
    /**
    Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.

    - Returns: A delegate of type  that represents the compiled lambda expression described by the .

    */
    public func Compile() throws -> TDelegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_1_TDelegate__Compile_0__0(TDelegate.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDelegate(gval: __return);
        }
    }
    // TDelegate Compile(bool)
// docid: M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)
    /**
    Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.

    - Parameter preferInterpretation: 
         to indicate that the expression should be compiled to an interpreted form, if it is available;  otherwise.
    - Returns: A delegate that represents the compiled lambda expression described by the .

    */
    public func Compile(preferInterpretation : Bool) throws -> TDelegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_1_TDelegate__Compile_0__1__bool(TDelegate.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(preferInterpretation ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDelegate(gval: __return);
        }
    }
    // TDelegate Compile(System.Runtime.CompilerServices.DebugInfoGenerator)
// docid: M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)
    /**
    Produces a delegate that represents the lambda expression.

    - Parameter debugInfoGenerator: Debugging information generator used by the compiler to mark sequence points and annotate local variables.
    - Returns: A delegate containing the compiled version of the lambda.

    */
    public func Compile(debugInfoGenerator : dotnet.System.Runtime.CompilerServices.DebugInfoGenerator) throws -> TDelegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_1_TDelegate__Compile_0__1__DebugInfoGenerator(TDelegate.get_type_handle(), &__thrown, self.get_handle(), debugInfoGenerator.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDelegate(gval: __return);
        }
    }
    // System.Linq.Expressions.Expression<TDelegate> Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter body: The  property of the result.
    - Parameter parameters: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(body : dotnet.System.Linq.Expressions.Expression, parameters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>>) throws -> dotnet.System.Linq.Expressions.Expression_1<TDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_Expression_1_System_Linq_Expressions_Expression_TDelegate___Update_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(TDelegate.get_type_handle(), &__thrown, self.get_handle(), body.get_handle(), (parameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression_1(hndl : __return);
        }
    }
} // Expression_1


// type: System.Linq.Expressions.GotoExpression
    /**
    Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.

    */
public final class GotoExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_GotoExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.GotoExpression Update(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter target: The  property of the result.
    - Parameter value: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(target : dotnet.System.Linq.Expressions.LabelTarget, value : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.GotoExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_GotoExpression_GotoExpression__Update_0__2__LabelTarget_Expression(&__thrown, self.get_handle(), target.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.GotoExpressionKind get_Kind()
// docid: M:System.Linq.Expressions.GotoExpression.get_Kind
    public func get_Kind() throws -> dotnet.System.Linq.Expressions.GotoExpressionKind {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_GotoExpression_GotoExpressionKind__get_Kind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.GotoExpressionKind(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.GotoExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_GotoExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.LabelTarget get_Target()
// docid: M:System.Linq.Expressions.GotoExpression.get_Target
    public func get_Target() throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_GotoExpression_LabelTarget__get_Target_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.GotoExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_GotoExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Value()
// docid: M:System.Linq.Expressions.GotoExpression.get_Value
    public func get_Value() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_GotoExpression_Expression__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    The kind of the "go to" expression. Serves information purposes only.

    */
    public var Kind : dotnet.System.Linq.Expressions.GotoExpressionKind {
        get {
            return try! get_Kind();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    The target label where this node jumps to.

    */
    public var Target : dotnet.System.Linq.Expressions.LabelTarget {
        get {
            return try! get_Target();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
    /**
    The value passed to the target, or null if the target is of type System.Void.

    */
    public var Value : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Value();
        }
    }
} // GotoExpression


// type: System.Linq.Expressions.GotoExpressionKind
    /**
    Specifies what kind of jump this  represents.

    */
public struct GotoExpressionKind : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_GotoExpressionKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Linq.Expressions.GotoExpressionKind Goto
    /**
    A  that represents a jump to some location.

    */
    public static var Goto : dotnet.System.Linq.Expressions.GotoExpressionKind {
        get {
        let __return = dotnet.System.Linq.Expressions.GotoExpressionKind(val: System_Linq_Expressions_GotoExpressionKind_get_Goto());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.GotoExpressionKind Return
    /**
    A  that represents a return statement.

    */
    public static var Return : dotnet.System.Linq.Expressions.GotoExpressionKind {
        get {
        let __return = dotnet.System.Linq.Expressions.GotoExpressionKind(val: System_Linq_Expressions_GotoExpressionKind_get_Return());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.GotoExpressionKind Break
    /**
    A  that represents a break statement.

    */
    public static var Break : dotnet.System.Linq.Expressions.GotoExpressionKind {
        get {
        let __return = dotnet.System.Linq.Expressions.GotoExpressionKind(val: System_Linq_Expressions_GotoExpressionKind_get_Break());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.GotoExpressionKind Continue
    /**
    A  that represents a continue statement.

    */
    public static var Continue : dotnet.System.Linq.Expressions.GotoExpressionKind {
        get {
        let __return = dotnet.System.Linq.Expressions.GotoExpressionKind(val: System_Linq_Expressions_GotoExpressionKind_get_Continue());
            return __return;
        }
    }
} // GotoExpressionKind


// type: System.Linq.Expressions.IArgumentProvider
    /**
    Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).  This API is for internal use only.

    */
open class IArgumentProvider
    :
    SGBridgeGenericValue,
    System_Linq_Expressions_IArgumentProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_IArgumentProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Linq.Expressions.Expression GetArgument(System.Int32)
// docid: M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)
    /**
    Returns the argument at , throwing if  is out of bounds. This API is for internal use only.

    - Parameter index: The index of the argument.
    - Returns: The argument at index.

    */
    open func GetArgument(index : Swift.Int32) throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IArgumentProvider_Expression__GetArgument_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ArgumentCount()
// docid: M:System.Linq.Expressions.IArgumentProvider.get_ArgumentCount
    open func get_ArgumentCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IArgumentProvider_i32__get_ArgumentCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IArgumentProvider


// type: System.Linq.Expressions.IDynamicExpression
    /**
    Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.

    */
open class IDynamicExpression
    :
    SGBridgeGenericValue,
    System_Linq_Expressions_IDynamicExpression,
    System_Linq_Expressions_IArgumentProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_IDynamicExpression_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object CreateCallSite()
// docid: M:System.Linq.Expressions.IDynamicExpression.CreateCallSite
    /**
    Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.

    - Returns: The CallSite for the DynamicExpression's polymorphic inline cache.

    */
    open func CreateCallSite() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IDynamicExpression_Object__CreateCallSite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Linq.Expressions.Expression Rewrite(System.Linq.Expressions.Expression[])
// docid: M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])
    /**
    Rewrites this node replacing the dynamic expression's arguments with the provided values.  The number of  needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.

    - Parameter args: The arguments used to replace this node.
    - Returns: The rewritten node, but if no changes were made, then returns the same node.

    */
    open func Rewrite(args : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IDynamicExpression_Expression__Rewrite_0__1__ExpressionArray(&__thrown, self.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_DelegateType()
// docid: M:System.Linq.Expressions.IDynamicExpression.get_DelegateType
    open func get_DelegateType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IDynamicExpression_Type__get_DelegateType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
} // IDynamicExpression


// type: System.Linq.Expressions.IndexExpression
    /**
    Represents indexing a property or array.

    */
public final class IndexExpression
    :
    dotnet.System.Linq.Expressions.Expression,
    System_Linq_Expressions_IArgumentProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_IndexExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.IndexExpression Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter object: The  property of the result.
    - Parameter arguments: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(object : dotnet.System.Linq.Expressions.Expression, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.IndexExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IndexExpression_IndexExpression__Update_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), object.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.IndexExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Arguments()
// docid: M:System.Linq.Expressions.IndexExpression.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IndexExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_Indexer()
// docid: M:System.Linq.Expressions.IndexExpression.get_Indexer
    public func get_Indexer() throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IndexExpression_PropertyInfo__get_Indexer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.IndexExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IndexExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Object()
// docid: M:System.Linq.Expressions.IndexExpression.get_Object
    public func get_Object() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IndexExpression_Expression__get_Object_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.IndexExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_IndexExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the arguments that will be used to index the property or array.

    */
    public var Arguments : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets the  for the property if the expression represents an indexed property, returns null otherwise.

    */
    public var Indexer : Optional<dotnet.System.Reflection.PropertyInfo> {
        get {
            return try! get_Indexer();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    An object to index.

    */
    public var Object : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Object();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // IndexExpression


// type: System.Linq.Expressions.InvocationExpression
    /**
    Represents an expression that applies a delegate or lambda expression to a list of argument expressions.

    */
public final class InvocationExpression
    :
    dotnet.System.Linq.Expressions.Expression,
    System_Linq_Expressions_IArgumentProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_InvocationExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.InvocationExpression Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter expression: The  property of the result.
    - Parameter arguments: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(expression : dotnet.System.Linq.Expressions.Expression, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.InvocationExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_InvocationExpression_InvocationExpression__Update_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), expression.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.InvocationExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Arguments()
// docid: M:System.Linq.Expressions.InvocationExpression.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_InvocationExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Expression()
// docid: M:System.Linq.Expressions.InvocationExpression.get_Expression
    public func get_Expression() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_InvocationExpression_Expression__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.InvocationExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_InvocationExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.InvocationExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_InvocationExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the arguments that the delegate or lambda expression is applied to.

    */
    public var Arguments : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets the delegate or lambda expression to be applied.

    */
    public var Expression : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Expression();
        }
    }
    /**
    Returns the node type of this expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // InvocationExpression


// type: System.Linq.Expressions.LabelExpression
    /**
    Represents a label, which can be put in any  context. If it is jumped to, it will get the value provided by the corresponding . Otherwise, it receives the value in . If the  equals System.Void, no value should be provided.

    */
public final class LabelExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_LabelExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.LabelExpression Update(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter target: The  property of the result.
    - Parameter defaultValue: The  property of the result
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(target : dotnet.System.Linq.Expressions.LabelTarget, defaultValue : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.LabelExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelExpression_LabelExpression__Update_0__2__LabelTarget_Expression(&__thrown, self.get_handle(), target.get_handle(), defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_DefaultValue()
// docid: M:System.Linq.Expressions.LabelExpression.get_DefaultValue
    public func get_DefaultValue() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelExpression_Expression__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.LabelExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.LabelTarget get_Target()
// docid: M:System.Linq.Expressions.LabelExpression.get_Target
    public func get_Target() throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelExpression_LabelTarget__get_Target_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.LabelExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    The value of the  when the label is reached through regular control flow (for example, is not jumped to).

    */
    public var DefaultValue : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_DefaultValue();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    The  which this label is associated with.

    */
    public var Target : dotnet.System.Linq.Expressions.LabelTarget {
        get {
            return try! get_Target();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // LabelExpression


// type: System.Linq.Expressions.LabelTarget
    /**
    Used to represent the target of a .

    */
public final class LabelTarget
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_LabelTarget_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Linq.Expressions.LabelTarget.ToString
    /**
    Returns a  that represents the current .

    - Returns: A  that represents the current .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelTarget_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Linq.Expressions.LabelTarget.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelTarget_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.LabelTarget.get_Type
    public func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LabelTarget_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the name of the label.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    The type of value that is passed when jumping to the label (or  if no value should be passed).

    */
    public var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // LabelTarget


// type: System.Linq.Expressions.LambdaExpression
    /**
    Describes a lambda expression. This captures a block of code that is similar to a .NET method body.

    */
open class LambdaExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_LambdaExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Delegate Compile()
// docid: M:System.Linq.Expressions.LambdaExpression.Compile
    /**
    Produces a delegate that represents the lambda expression.

    - Returns: A  that contains the compiled version of the lambda expression.

    */
    open func Compile() throws -> dotnet.System.Delegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_Delegate__Compile_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Delegate(hndl : __return);
        }
    }
    // System.Delegate Compile(bool)
// docid: M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)
    /**
    Produces an interpreted or compiled delegate that represents the lambda expression.

    - Parameter preferInterpretation: 
         to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, .
    - Returns: A delegate that represents the compiled lambda expression described by the  object.

    */
    open func Compile(preferInterpretation : Bool) throws -> dotnet.System.Delegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_Delegate__Compile_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(preferInterpretation ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Delegate(hndl : __return);
        }
    }
    // System.Delegate Compile(System.Runtime.CompilerServices.DebugInfoGenerator)
// docid: M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)
    /**
    Produces a delegate that represents the lambda expression.

    - Parameter debugInfoGenerator: Debugging information generator used by the compiler to mark sequence points and annotate local variables.
    - Returns: A delegate containing the compiled version of the lambda.

    */
    open func Compile(debugInfoGenerator : dotnet.System.Runtime.CompilerServices.DebugInfoGenerator) throws -> dotnet.System.Delegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_Delegate__Compile_0__1__DebugInfoGenerator(&__thrown, self.get_handle(), debugInfoGenerator.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Delegate(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Body()
// docid: M:System.Linq.Expressions.LambdaExpression.get_Body
    open func get_Body() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_Expression__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Linq.Expressions.LambdaExpression.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.LambdaExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> get_Parameters()
// docid: M:System.Linq.Expressions.LambdaExpression.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ParameterExpression___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Linq.Expressions.LambdaExpression.get_ReturnType
    open func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_TailCall()
// docid: M:System.Linq.Expressions.LambdaExpression.get_TailCall
    open func get_TailCall() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_bool__get_TailCall_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.LambdaExpression.get_Type
    open /* method final */ override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LambdaExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the body of the lambda expression.

    */
    open var Body : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Body();
        }
    }
    /**
    Gets the name of the lambda expression.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the parameters of the lambda expression.

    */
    open var Parameters : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    Gets the return type of the lambda expression.

    */
    open var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
    /**
    Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.

    */
    open var TailCall : Bool {
        get {
            return try! get_TailCall();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // LambdaExpression


// type: System.Linq.Expressions.ListInitExpression
    /**
    Represents a constructor call that has a collection initializer.

    */
public final class ListInitExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ListInitExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.Expression Reduce()
// docid: M:System.Linq.Expressions.ListInitExpression.Reduce
    /**
    Reduces the binary expression node to a simpler expression.

    - Returns: The reduced expression.

    */
    public override func Reduce() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_Expression__Reduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.ListInitExpression Update(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
// docid: M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter newExpression: The  property of the result.
    - Parameter initializers: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(newExpression : dotnet.System.Linq.Expressions.NewExpression, initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.ListInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_ListInitExpression__Update_0__2__NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit_(&__thrown, self.get_handle(), newExpression.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ListInitExpression(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReduce()
// docid: M:System.Linq.Expressions.ListInitExpression.get_CanReduce
    public override func get_CanReduce() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_bool__get_CanReduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit> get_Initializers()
// docid: M:System.Linq.Expressions.ListInitExpression.get_Initializers
    public func get_Initializers() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ElementInit> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ElementInit___get_Initializers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.NewExpression get_NewExpression()
// docid: M:System.Linq.Expressions.ListInitExpression.get_NewExpression
    public func get_NewExpression() throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_NewExpression__get_NewExpression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.ListInitExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.ListInitExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ListInitExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets a value that indicates whether the expression tree node can be reduced.

    */
    public override var CanReduce : Bool {
        get {
            return try! get_CanReduce();
        }
    }
    /**
    Gets the element initializers that are used to initialize a collection.

    */
    public var Initializers : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ElementInit> {
        get {
            return try! get_Initializers();
        }
    }
    /**
    Gets the expression that contains a call to the constructor of a collection type.

    */
    public var NewExpression : dotnet.System.Linq.Expressions.NewExpression {
        get {
            return try! get_NewExpression();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // ListInitExpression


// type: System.Linq.Expressions.LoopExpression
    /**
    Represents an infinite loop. It can be exited with "break".

    */
public final class LoopExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_LoopExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.LoopExpression Update(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter breakLabel: The  property of the result.
    - Parameter continueLabel: The  property of the result.
    - Parameter body: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(breakLabel : Optional<dotnet.System.Linq.Expressions.LabelTarget>, continueLabel : Optional<dotnet.System.Linq.Expressions.LabelTarget>, body : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.LoopExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LoopExpression_LoopExpression__Update_0__3__LabelTarget_LabelTarget_Expression(&__thrown, self.get_handle(), breakLabel?.get_handle() ?? nil, continueLabel?.get_handle() ?? nil, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LoopExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Body()
// docid: M:System.Linq.Expressions.LoopExpression.get_Body
    public func get_Body() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LoopExpression_Expression__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.LabelTarget get_BreakLabel()
// docid: M:System.Linq.Expressions.LoopExpression.get_BreakLabel
    public func get_BreakLabel() throws -> Optional<dotnet.System.Linq.Expressions.LabelTarget> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LoopExpression_LabelTarget__get_BreakLabel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.LabelTarget(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.LabelTarget get_ContinueLabel()
// docid: M:System.Linq.Expressions.LoopExpression.get_ContinueLabel
    public func get_ContinueLabel() throws -> Optional<dotnet.System.Linq.Expressions.LabelTarget> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LoopExpression_LabelTarget__get_ContinueLabel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.LabelTarget(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.LoopExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LoopExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.LoopExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_LoopExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the  that is the body of the loop.

    */
    public var Body : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Body();
        }
    }
    /**
    Gets the  that is used by the loop body as a break statement target.

    */
    public var BreakLabel : Optional<dotnet.System.Linq.Expressions.LabelTarget> {
        get {
            return try! get_BreakLabel();
        }
    }
    /**
    Gets the  that is used by the loop body as a continue statement target.

    */
    public var ContinueLabel : Optional<dotnet.System.Linq.Expressions.LabelTarget> {
        get {
            return try! get_ContinueLabel();
        }
    }
    /**
    Returns the node type of this expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // LoopExpression


// type: System.Linq.Expressions.MemberAssignment
    /**
    Represents assignment operation for a field or property of an object.

    */
public final class MemberAssignment
    :
    dotnet.System.Linq.Expressions.MemberBinding
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberAssignment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.MemberAssignment Update(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter expression: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.MemberAssignment {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberAssignment_MemberAssignment__Update_0__1__Expression(&__thrown, self.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberAssignment(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Expression()
// docid: M:System.Linq.Expressions.MemberAssignment.get_Expression
    public func get_Expression() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberAssignment_Expression__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    /**
    Gets the expression to assign to the field or property.

    */
    public var Expression : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Expression();
        }
    }
} // MemberAssignment


// type: System.Linq.Expressions.MemberBinding
    /**
    Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.

    */
open class MemberBinding
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberBinding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Linq.Expressions.MemberBinding.ToString
    /**
    Returns a textual representation of the .

    - Returns: A textual representation of the .

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberBinding_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.MemberBindingType get_BindingType()
// docid: M:System.Linq.Expressions.MemberBinding.get_BindingType
    open func get_BindingType() throws -> dotnet.System.Linq.Expressions.MemberBindingType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberBinding_MemberBindingType__get_BindingType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberBindingType(val: __return);
        }
    }
    // [IsSpecialName] System.Reflection.MemberInfo get_Member()
// docid: M:System.Linq.Expressions.MemberBinding.get_Member
    open func get_Member() throws -> dotnet.System.Reflection.MemberInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberBinding_MemberInfo__get_Member_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MemberInfo(hndl : __return);
        }
    }
    /**
    Gets the type of binding that is represented.

    */
    open var BindingType : dotnet.System.Linq.Expressions.MemberBindingType {
        get {
            return try! get_BindingType();
        }
    }
    /**
    Gets the field or property to be initialized.

    */
    open var Member : dotnet.System.Reflection.MemberInfo {
        get {
            return try! get_Member();
        }
    }
} // MemberBinding


// type: System.Linq.Expressions.MemberBindingType
    /**
    Describes the binding types that are used in  objects.

    */
public struct MemberBindingType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberBindingType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Linq.Expressions.MemberBindingType Assignment
    /**
    A binding that represents initializing a member with the value of an expression.

    */
    public static var Assignment : dotnet.System.Linq.Expressions.MemberBindingType {
        get {
        let __return = dotnet.System.Linq.Expressions.MemberBindingType(val: System_Linq_Expressions_MemberBindingType_get_Assignment());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.MemberBindingType MemberBinding
    /**
    A binding that represents recursively initializing members of a member.

    */
    public static var MemberBinding : dotnet.System.Linq.Expressions.MemberBindingType {
        get {
        let __return = dotnet.System.Linq.Expressions.MemberBindingType(val: System_Linq_Expressions_MemberBindingType_get_MemberBinding());
            return __return;
        }
    }
    // static field: System.Linq.Expressions.MemberBindingType ListBinding
    /**
    A binding that represents initializing a member of type  or  from a list of elements.

    */
    public static var ListBinding : dotnet.System.Linq.Expressions.MemberBindingType {
        get {
        let __return = dotnet.System.Linq.Expressions.MemberBindingType(val: System_Linq_Expressions_MemberBindingType_get_ListBinding());
            return __return;
        }
    }
} // MemberBindingType


// type: System.Linq.Expressions.MemberExpression
    /**
    Represents accessing a field or property.

    */
open class MemberExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.MemberExpression Update(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter expression: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    open func Update(expression : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.MemberExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberExpression_MemberExpression__Update_0__1__Expression(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Expression()
// docid: M:System.Linq.Expressions.MemberExpression.get_Expression
    open func get_Expression() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberExpression_Expression__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.MemberInfo get_Member()
// docid: M:System.Linq.Expressions.MemberExpression.get_Member
    open func get_Member() throws -> dotnet.System.Reflection.MemberInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberExpression_MemberInfo__get_Member_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MemberInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.MemberExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    /**
    Gets the containing object of the field or property.

    */
    open var Expression : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Expression();
        }
    }
    /**
    Gets the field or property to be accessed.

    */
    open var Member : dotnet.System.Reflection.MemberInfo {
        get {
            return try! get_Member();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
} // MemberExpression


// type: System.Linq.Expressions.MemberInitExpression
    /**
    Represents calling a constructor and initializing one or more members of the new object.

    */
public final class MemberInitExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberInitExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.Expression Reduce()
// docid: M:System.Linq.Expressions.MemberInitExpression.Reduce
    /**
    Reduces the  to a simpler expression.

    - Returns: The reduced expression.

    */
    public override func Reduce() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_Expression__Reduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.MemberInitExpression Update(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
// docid: M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter newExpression: The  property of the result.
    - Parameter bindings: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(newExpression : dotnet.System.Linq.Expressions.NewExpression, bindings : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberInitExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_MemberInitExpression__Update_0__2__NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding_(&__thrown, self.get_handle(), newExpression.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberInitExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding> get_Bindings()
// docid: M:System.Linq.Expressions.MemberInitExpression.get_Bindings
    public func get_Bindings() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.MemberBinding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_MemberBinding___get_Bindings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReduce()
// docid: M:System.Linq.Expressions.MemberInitExpression.get_CanReduce
    public override func get_CanReduce() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_bool__get_CanReduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.NewExpression get_NewExpression()
// docid: M:System.Linq.Expressions.MemberInitExpression.get_NewExpression
    public func get_NewExpression() throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_NewExpression__get_NewExpression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.MemberInitExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.MemberInitExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberInitExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the bindings that describe how to initialize the members of the newly created object.

    */
    public var Bindings : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.MemberBinding> {
        get {
            return try! get_Bindings();
        }
    }
    /**
    Gets a value that indicates whether the expression tree node can be reduced.

    */
    public override var CanReduce : Bool {
        get {
            return try! get_CanReduce();
        }
    }
    /**
    Gets the expression that represents the constructor call.

    */
    public var NewExpression : dotnet.System.Linq.Expressions.NewExpression {
        get {
            return try! get_NewExpression();
        }
    }
    /**
    Returns the node type of this Expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // MemberInitExpression


// type: System.Linq.Expressions.MemberListBinding
    /**
    Represents initializing the elements of a collection member of a newly created object.

    */
public final class MemberListBinding
    :
    dotnet.System.Linq.Expressions.MemberBinding
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberListBinding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.MemberListBinding Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
// docid: M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter initializers: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(initializers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ElementInit>) throws -> dotnet.System.Linq.Expressions.MemberListBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberListBinding_MemberListBinding__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit_(&__thrown, self.get_handle(), initializers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberListBinding(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit> get_Initializers()
// docid: M:System.Linq.Expressions.MemberListBinding.get_Initializers
    public func get_Initializers() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ElementInit> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberListBinding_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ElementInit___get_Initializers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    Gets the element initializers for initializing a collection member of a newly created object.

    */
    public var Initializers : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ElementInit> {
        get {
            return try! get_Initializers();
        }
    }
} // MemberListBinding


// type: System.Linq.Expressions.MemberMemberBinding
    /**
    Represents initializing members of a member of a newly created object.

    */
public final class MemberMemberBinding
    :
    dotnet.System.Linq.Expressions.MemberBinding
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MemberMemberBinding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.MemberMemberBinding Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
// docid: M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter bindings: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(bindings : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.MemberBinding>) throws -> dotnet.System.Linq.Expressions.MemberMemberBinding {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberMemberBinding_MemberMemberBinding__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding_(&__thrown, self.get_handle(), bindings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MemberMemberBinding(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding> get_Bindings()
// docid: M:System.Linq.Expressions.MemberMemberBinding.get_Bindings
    public func get_Bindings() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.MemberBinding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MemberMemberBinding_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_MemberBinding___get_Bindings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    Gets the bindings that describe how to initialize the members of a member.

    */
    public var Bindings : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.MemberBinding> {
        get {
            return try! get_Bindings();
        }
    }
} // MemberMemberBinding


// type: System.Linq.Expressions.MethodCallExpression
    /**
    Represents a call to either static or an instance method.

    */
open class MethodCallExpression
    :
    dotnet.System.Linq.Expressions.Expression,
    System_Linq_Expressions_IArgumentProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_MethodCallExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.MethodCallExpression Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter object: The  property of the result.
    - Parameter arguments: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    open func Update(object : Optional<dotnet.System.Linq.Expressions.Expression>, arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.MethodCallExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MethodCallExpression_MethodCallExpression__Update_0__2__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), object?.get_handle() ?? nil, (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.MethodCallExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Arguments()
// docid: M:System.Linq.Expressions.MethodCallExpression.get_Arguments
    open func get_Arguments() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MethodCallExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_Method()
// docid: M:System.Linq.Expressions.MethodCallExpression.get_Method
    open func get_Method() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MethodCallExpression_MethodInfo__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.MethodCallExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MethodCallExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Object()
// docid: M:System.Linq.Expressions.MethodCallExpression.get_Object
    open func get_Object() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MethodCallExpression_Expression__get_Object_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.MethodCallExpression.get_Type
    open /* method final */ override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_MethodCallExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets a collection of expressions that represent arguments of the called method.

    */
    open var Arguments : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets the  for the method to be called.

    */
    open var Method : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_Method();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the  that represents the instance for instance method calls or null for static method calls.

    */
    open var Object : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Object();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // MethodCallExpression


// type: System.Linq.Expressions.NewArrayExpression
    /**
    Represents creating a new array and possibly initializing the elements of the new array.

    */
open class NewArrayExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_NewArrayExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.NewArrayExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter expressions: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    open func Update(expressions : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.NewArrayExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewArrayExpression_NewArrayExpression__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), expressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewArrayExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Expressions()
// docid: M:System.Linq.Expressions.NewArrayExpression.get_Expressions
    open func get_Expressions() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewArrayExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Expressions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.NewArrayExpression.get_Type
    open /* method final */ override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewArrayExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the bounds of the array if the value of the  property is , or the values to initialize the elements of the new array if the value of the  property is .

    */
    open var Expressions : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Expressions();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // NewArrayExpression


// type: System.Linq.Expressions.NewExpression
    /**
    Represents a constructor call.

    */
open class NewExpression
    :
    dotnet.System.Linq.Expressions.Expression,
    System_Linq_Expressions_IArgumentProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_NewExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.NewExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
// docid: M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter arguments: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    open func Update(arguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>>) throws -> dotnet.System.Linq.Expressions.NewExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewExpression_NewExpression__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression_(&__thrown, self.get_handle(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.NewExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_Arguments()
// docid: M:System.Linq.Expressions.NewExpression.get_Arguments
    open func get_Arguments() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.ConstructorInfo get_Constructor()
// docid: M:System.Linq.Expressions.NewExpression.get_Constructor
    open func get_Constructor() throws -> Optional<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewExpression_ConstructorInfo__get_Constructor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.ConstructorInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.MemberInfo> get_Members()
// docid: M:System.Linq.Expressions.NewExpression.get_Members
    open func get_Members() throws -> Optional<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Reflection.MemberInfo>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Reflection_MemberInfo___get_Members_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.NewExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.NewExpression.get_Type
    open override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_NewExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the arguments to the constructor.

    */
    open var Arguments : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets the called constructor.

    */
    open var Constructor : Optional<dotnet.System.Reflection.ConstructorInfo> {
        get {
            return try! get_Constructor();
        }
    }
    /**
    Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.

    */
    open var Members : Optional<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Reflection.MemberInfo>> {
        get {
            return try! get_Members();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // NewExpression


// type: System.Linq.Expressions.ParameterExpression
    /**
    Represents a named parameter expression.

    */
open class ParameterExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_ParameterExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsByRef()
// docid: M:System.Linq.Expressions.ParameterExpression.get_IsByRef
    open func get_IsByRef() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ParameterExpression_bool__get_IsByRef_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Linq.Expressions.ParameterExpression.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ParameterExpression_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.ParameterExpression.get_NodeType
    open /* method final */ override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ParameterExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.ParameterExpression.get_Type
    open override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_ParameterExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Indicates that this ParameterExpression is to be treated as a  parameter.

    */
    open var IsByRef : Bool {
        get {
            return try! get_IsByRef();
        }
    }
    /**
    Gets the name of the parameter or variable.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    open override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // ParameterExpression


// type: System.Linq.Expressions.RuntimeVariablesExpression
    /**
    An expression that provides runtime read/write permission for variables.

    */
public final class RuntimeVariablesExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_RuntimeVariablesExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.RuntimeVariablesExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
// docid: M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter variables: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(variables : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.ParameterExpression>) throws -> dotnet.System.Linq.Expressions.RuntimeVariablesExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_RuntimeVariablesExpression_RuntimeVariablesExpression__Update_0__1__System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression_(&__thrown, self.get_handle(), variables.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.RuntimeVariablesExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.RuntimeVariablesExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_RuntimeVariablesExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.RuntimeVariablesExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_RuntimeVariablesExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> get_Variables()
// docid: M:System.Linq.Expressions.RuntimeVariablesExpression.get_Variables
    public func get_Variables() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_RuntimeVariablesExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ParameterExpression___get_Variables_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    Returns the node type of this Expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
    /**
    The variables or parameters to which to provide runtime access.

    */
    public var Variables : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression> {
        get {
            return try! get_Variables();
        }
    }
} // RuntimeVariablesExpression


// type: System.Linq.Expressions.SwitchCase
    /**
    Represents one case of a .

    */
public final class SwitchCase
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_SwitchCase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Linq.Expressions.SwitchCase.ToString
    /**
    Returns a  that represents the current .

    - Returns: A  that represents the current .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchCase_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Linq.Expressions.SwitchCase Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter testValues: The  property of the result.
    - Parameter body: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(testValues : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression>, body : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.SwitchCase {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchCase_SwitchCase__Update_0__2__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__Expression(&__thrown, self.get_handle(), testValues.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchCase(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Body()
// docid: M:System.Linq.Expressions.SwitchCase.get_Body
    public func get_Body() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchCase_Expression__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> get_TestValues()
// docid: M:System.Linq.Expressions.SwitchCase.get_TestValues
    public func get_TestValues() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchCase_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_Expression___get_TestValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    /**
    Gets the body of this case.

    */
    public var Body : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Body();
        }
    }
    /**
    Gets the values of this case. This case is selected for execution when the  matches any of these values.

    */
    public var TestValues : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_TestValues();
        }
    }
} // SwitchCase


// type: System.Linq.Expressions.SwitchExpression
    /**
    Represents a control expression that handles multiple selections by passing control to .

    */
public final class SwitchExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_SwitchExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.SwitchExpression Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter switchValue: The  property of the result.
    - Parameter cases: The  property of the result.
    - Parameter defaultBody: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(switchValue : dotnet.System.Linq.Expressions.Expression, cases : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.SwitchCase>>, defaultBody : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.SwitchExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_SwitchExpression__Update_0__3__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase__Expression(&__thrown, self.get_handle(), switchValue.get_handle(), (cases?.get_handle()), defaultBody?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.SwitchExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.SwitchCase> get_Cases()
// docid: M:System.Linq.Expressions.SwitchExpression.get_Cases
    public func get_Cases() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.SwitchCase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_SwitchCase___get_Cases_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_Comparison()
// docid: M:System.Linq.Expressions.SwitchExpression.get_Comparison
    public func get_Comparison() throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_MethodInfo__get_Comparison_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_DefaultBody()
// docid: M:System.Linq.Expressions.SwitchExpression.get_DefaultBody
    public func get_DefaultBody() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_Expression__get_DefaultBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.SwitchExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_SwitchValue()
// docid: M:System.Linq.Expressions.SwitchExpression.get_SwitchValue
    public func get_SwitchValue() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_Expression__get_SwitchValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.SwitchExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SwitchExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the collection of  objects for the switch.

    */
    public var Cases : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.SwitchCase> {
        get {
            return try! get_Cases();
        }
    }
    /**
    Gets the equality comparison method, if any.

    */
    public var Comparison : Optional<dotnet.System.Reflection.MethodInfo> {
        get {
            return try! get_Comparison();
        }
    }
    /**
    Gets the test for the switch.

    */
    public var DefaultBody : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_DefaultBody();
        }
    }
    /**
    Returns the node type of this Expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the test for the switch.

    */
    public var SwitchValue : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_SwitchValue();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // SwitchExpression


// type: System.Linq.Expressions.SymbolDocumentInfo
    /**
    Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.

    */
open class SymbolDocumentInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_SymbolDocumentInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Guid get_DocumentType()
// docid: M:System.Linq.Expressions.SymbolDocumentInfo.get_DocumentType
    open func get_DocumentType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SymbolDocumentInfo_Guid__get_DocumentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:System.Linq.Expressions.SymbolDocumentInfo.get_FileName
    open func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SymbolDocumentInfo_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Guid get_Language()
// docid: M:System.Linq.Expressions.SymbolDocumentInfo.get_Language
    open func get_Language() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SymbolDocumentInfo_Guid__get_Language_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Guid get_LanguageVendor()
// docid: M:System.Linq.Expressions.SymbolDocumentInfo.get_LanguageVendor
    open func get_LanguageVendor() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_SymbolDocumentInfo_Guid__get_LanguageVendor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    /**
    Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.

    */
    open var DocumentType : dotnet.System.Guid {
        get {
            return try! get_DocumentType();
        }
    }
    /**
    The source file name.

    */
    open var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
    }
    /**
    Returns the language's unique identifier, if any.

    */
    open var Language : dotnet.System.Guid {
        get {
            return try! get_Language();
        }
    }
    /**
    Returns the language vendor's unique identifier, if any.

    */
    open var LanguageVendor : dotnet.System.Guid {
        get {
            return try! get_LanguageVendor();
        }
    }
} // SymbolDocumentInfo


// type: System.Linq.Expressions.TryExpression
    /**
    Represents a try/catch/finally/fault block.

    */
public final class TryExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_TryExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.TryExpression Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter body: The  property of the result.
    - Parameter handlers: The  property of the result.
    - Parameter finally: The  property of the result.
    - Parameter fault: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(body : dotnet.System.Linq.Expressions.Expression, handlers : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.CatchBlock>>, finally : Optional<dotnet.System.Linq.Expressions.Expression>, fault : Optional<dotnet.System.Linq.Expressions.Expression>) throws -> dotnet.System.Linq.Expressions.TryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_TryExpression__Update_0__4__Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_CatchBlock__Expression_Expression(&__thrown, self.get_handle(), body.get_handle(), (handlers?.get_handle()), finally?.get_handle() ?? nil, fault?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TryExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Body()
// docid: M:System.Linq.Expressions.TryExpression.get_Body
    public func get_Body() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_Expression__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Fault()
// docid: M:System.Linq.Expressions.TryExpression.get_Fault
    public func get_Fault() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_Expression__get_Fault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Finally()
// docid: M:System.Linq.Expressions.TryExpression.get_Finally
    public func get_Finally() throws -> Optional<dotnet.System.Linq.Expressions.Expression> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_Expression__get_Finally_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.CatchBlock> get_Handlers()
// docid: M:System.Linq.Expressions.TryExpression.get_Handlers
    public func get_Handlers() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.CatchBlock> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_CatchBlock___get_Handlers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.TryExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.TryExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TryExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the  representing the body of the try block.

    */
    public var Body : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Body();
        }
    }
    /**
    Gets the  representing the fault block.

    */
    public var Fault : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Fault();
        }
    }
    /**
    Gets the  representing the finally block.

    */
    public var Finally : Optional<dotnet.System.Linq.Expressions.Expression> {
        get {
            return try! get_Finally();
        }
    }
    /**
    Gets the collection of  expressions associated with the try block.

    */
    public var Handlers : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.CatchBlock> {
        get {
            return try! get_Handlers();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // TryExpression


// type: System.Linq.Expressions.TypeBinaryExpression
    /**
    Represents an operation between an expression and a type.

    */
public final class TypeBinaryExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_TypeBinaryExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.TypeBinaryExpression Update(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter expression: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(expression : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.TypeBinaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TypeBinaryExpression_TypeBinaryExpression__Update_0__1__Expression(&__thrown, self.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.TypeBinaryExpression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Expression()
// docid: M:System.Linq.Expressions.TypeBinaryExpression.get_Expression
    public func get_Expression() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TypeBinaryExpression_Expression__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.TypeBinaryExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TypeBinaryExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.TypeBinaryExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TypeBinaryExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_TypeOperand()
// docid: M:System.Linq.Expressions.TypeBinaryExpression.get_TypeOperand
    public func get_TypeOperand() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_TypeBinaryExpression_Type__get_TypeOperand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the expression operand of a type test operation.

    */
    public var Expression : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Expression();
        }
    }
    /**
    Returns the node type of this Expression. Extension nodes should return  when overriding this method.

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
    /**
    Gets the type operand of a type test operation.

    */
    public var TypeOperand : dotnet.System.Type_ {
        get {
            return try! get_TypeOperand();
        }
    }
} // TypeBinaryExpression


// type: System.Linq.Expressions.UnaryExpression
    /**
    Represents an expression that has a unary operator.

    */
public final class UnaryExpression
    :
    dotnet.System.Linq.Expressions.Expression
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Linq_Expressions_UnaryExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.Expression Reduce()
// docid: M:System.Linq.Expressions.UnaryExpression.Reduce
    /**
    Reduces the expression node to a simpler expression.

    - Returns: The reduced expression.

    */
    public override func Reduce() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_Expression__Reduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // System.Linq.Expressions.UnaryExpression Update(System.Linq.Expressions.Expression)
// docid: M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)
    /**
    Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.

    - Parameter operand: The  property of the result.
    - Returns: This expression if no children are changed or an expression with the updated children.

    */
    public func Update(operand : dotnet.System.Linq.Expressions.Expression) throws -> dotnet.System.Linq.Expressions.UnaryExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_UnaryExpression__Update_0__1__Expression(&__thrown, self.get_handle(), operand.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.UnaryExpression(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReduce()
// docid: M:System.Linq.Expressions.UnaryExpression.get_CanReduce
    public override func get_CanReduce() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_bool__get_CanReduce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLifted()
// docid: M:System.Linq.Expressions.UnaryExpression.get_IsLifted
    public func get_IsLifted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_bool__get_IsLifted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLiftedToNull()
// docid: M:System.Linq.Expressions.UnaryExpression.get_IsLiftedToNull
    public func get_IsLiftedToNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_bool__get_IsLiftedToNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_Method()
// docid: M:System.Linq.Expressions.UnaryExpression.get_Method
    public func get_Method() throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_MethodInfo__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Linq.Expressions.ExpressionType get_NodeType()
// docid: M:System.Linq.Expressions.UnaryExpression.get_NodeType
    public override func get_NodeType() throws -> dotnet.System.Linq.Expressions.ExpressionType {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_ExpressionType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.ExpressionType(val: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression get_Operand()
// docid: M:System.Linq.Expressions.UnaryExpression.get_Operand
    public func get_Operand() throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_Expression__get_Operand_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Linq.Expressions.UnaryExpression.get_Type
    public override func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Expressions_UnaryExpression_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets a value that indicates whether the expression tree node can be reduced.

    */
    public override var CanReduce : Bool {
        get {
            return try! get_CanReduce();
        }
    }
    /**
    Gets a value that indicates whether the expression tree node represents a lifted call to an operator.

    */
    public var IsLifted : Bool {
        get {
            return try! get_IsLifted();
        }
    }
    /**
    Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.

    */
    public var IsLiftedToNull : Bool {
        get {
            return try! get_IsLiftedToNull();
        }
    }
    /**
    Gets the implementing method for the unary operation.

    */
    public var Method : Optional<dotnet.System.Reflection.MethodInfo> {
        get {
            return try! get_Method();
        }
    }
    /**
    Returns the node type of this .

    */
    public override var NodeType : dotnet.System.Linq.Expressions.ExpressionType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the operand of the unary operation.

    */
    public var Operand : dotnet.System.Linq.Expressions.Expression {
        get {
            return try! get_Operand();
        }
    }
    /**
    Gets the static type of the expression that this  represents.

    */
    public override var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // UnaryExpression


}


// System.Runtime
// System.Runtime.CompilerServices
extension System.Runtime.CompilerServices {
// type: System.Runtime.CompilerServices.CallSite
    /**
    A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.

    */
open class CallSite
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_CallSite_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Runtime.CompilerServices.CallSite Create(System.Type, System.Runtime.CompilerServices.CallSiteBinder)
// docid: M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)
    /**
    Creates a call site with the given delegate type and binder.

    - Parameter delegateType: The call site delegate type.
    - Parameter binder: The call site binder.
    - Returns: The new call site.

    */
    open class func Create(delegateType : dotnet.System.Type_, binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder) throws -> dotnet.System.Runtime.CompilerServices.CallSite {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSite_CallSite__Create_0__2__Type_CallSiteBinder(&__thrown, delegateType.get_handle(), binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSite(hndl : __return);
        }
    }
    // [IsSpecialName] System.Runtime.CompilerServices.CallSiteBinder get_Binder()
// docid: M:System.Runtime.CompilerServices.CallSite.get_Binder
    open func get_Binder() throws -> Optional<dotnet.System.Runtime.CompilerServices.CallSiteBinder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSite_CallSiteBinder__get_Binder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Class responsible for binding dynamic operations on the dynamic site.

    */
    open var Binder : Optional<dotnet.System.Runtime.CompilerServices.CallSiteBinder> {
        get {
            return try! get_Binder();
        }
    }
} // CallSite


// type: System.Runtime.CompilerServices.CallSiteBinder
    /**
    Class responsible for runtime binding of the dynamic operations on the dynamic call site.

    */
open class CallSiteBinder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_CallSiteBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Linq.Expressions.Expression Bind(System.Object[], System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.LabelTarget)
// docid: M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)
    /**
    Performs the runtime binding of the dynamic operation on a set of arguments.

    - Parameter args: An array of arguments to the dynamic operation.
    - Parameter parameters: The array of  instances that represent the parameters of the call site in the binding process.
    - Parameter returnLabel: A LabelTarget used to return the result of the dynamic binding.
    - Returns: An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new  for the new argument types.

    */
    open func Bind(args : dotnet.System_Arr<dotnet.System.Object>, parameters : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Linq.Expressions.ParameterExpression>, returnLabel : dotnet.System.Linq.Expressions.LabelTarget) throws -> dotnet.System.Linq.Expressions.Expression {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSiteBinder_Expression__Bind_0__3__ObjectArray_System_Collections_ObjectModel_ReadOnlyCollection_System_Linq_Expressions_ParameterExpression__LabelTarget(&__thrown, self.get_handle(), args.get_handle(), parameters.get_handle(), returnLabel.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.Expression(hndl : __return);
        }
    }
    // T BindDelegate<T>(System.Runtime.CompilerServices.CallSite<T>, System.Object[])
// docid: M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])
    /**
    Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.

    - Parameter site: The CallSite the bind is being performed for.
    - Parameter args: The arguments for the binder.
    - Returns: A new delegate which replaces the CallSite Target.

    */
    open func BindDelegate<UT : SGBridgeGenericValue>(site : dotnet.System.Runtime.CompilerServices.CallSite_1<UT>, args : dotnet.System_Arr<dotnet.System.Object>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSiteBinder_UT__BindDelegate_1__2__System_Runtime_CompilerServices_CallSite_UT__ObjectArray(UT.get_type_handle(), &__thrown, self.get_handle(), site.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // [IsSpecialName] System.Linq.Expressions.LabelTarget get_UpdateLabel()
// docid: M:System.Runtime.CompilerServices.CallSiteBinder.get_UpdateLabel
    open class func get_UpdateLabel() throws -> dotnet.System.Linq.Expressions.LabelTarget {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSiteBinder_LabelTarget__get_UpdateLabel_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.Expressions.LabelTarget(hndl : __return);
        }
    }
    /**
    Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.

    */
    public static var UpdateLabel : dotnet.System.Linq.Expressions.LabelTarget {
        get {
            return try! get_UpdateLabel();
        }
    }
} // CallSiteBinder


// type: System.Runtime.CompilerServices.CallSiteHelpers
public struct CallSiteHelpers {
    // bool IsInternalFrame(System.Reflection.MethodBase)
// docid: M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)
    /**
    Checks if a  is internally used by DLR and should not be displayed on the language code's stack.

    - Parameter mb: The input 
    - Returns: 
         if the input  is internally used by DLR and should not be displayed on the language code's stack. Otherwise, .

    */
    public static func IsInternalFrame(mb : dotnet.System.Reflection.MethodBase) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSiteHelpers_bool__IsInternalFrame_0__1__MethodBase(&__thrown, mb.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // CallSiteHelpers


// type: System.Runtime.CompilerServices.CallSite`1
    /**
    Dynamic site type.

    */
open class CallSite_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Runtime.CompilerServices.CallSite
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_CallSite_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Runtime.CompilerServices.CallSite<T> Create(System.Runtime.CompilerServices.CallSiteBinder)
// docid: M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)
    /**
    Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.

    - Parameter binder: The binder responsible for the runtime binding of the dynamic operations at this call site.
    - Returns: The new instance of dynamic call site.

    */
    open class func Create(binder : dotnet.System.Runtime.CompilerServices.CallSiteBinder) throws -> dotnet.System.Runtime.CompilerServices.CallSite_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSite_1_System_Runtime_CompilerServices_CallSite_T___Create_0__1__CallSiteBinder(T.get_type_handle(), &__thrown, binder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSite_1(hndl : __return);
        }
    }
    // [IsSpecialName] T get_Update()
// docid: M:System.Runtime.CompilerServices.CallSite`1.get_Update
    open func get_Update() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_CallSite_1_T__get_Update_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    The update delegate. Called when the dynamic site experiences cache miss.

    */
    open var Update : T {
        get {
            return try! get_Update();
        }
    }
} // CallSite_1


// type: System.Runtime.CompilerServices.DebugInfoGenerator
    /**
    Generates debug information for lambda expressions in an expression tree.

    */
open class DebugInfoGenerator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_DebugInfoGenerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Runtime.CompilerServices.DebugInfoGenerator CreatePdbGenerator()
// docid: M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator
    /**
    Creates a program database (PDB) symbol generator.

    - Returns: A PDB symbol generator.

    */
    open class func CreatePdbGenerator() throws -> dotnet.System.Runtime.CompilerServices.DebugInfoGenerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_DebugInfoGenerator_DebugInfoGenerator__CreatePdbGenerator_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.DebugInfoGenerator(hndl : __return);
        }
    }
    // void MarkSequencePoint(System.Linq.Expressions.LambdaExpression, System.Int32, System.Linq.Expressions.DebugInfoExpression)
// docid: M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)
    /**
    Marks a sequence point in Microsoft intermediate language (MSIL) code.

    - Parameter method: The lambda expression that is generated.
    - Parameter ilOffset: The offset within MSIL code at which to mark the sequence point.
    - Parameter sequencePoint: Debug information that corresponds to the sequence point.
    */
    open func MarkSequencePoint(method : dotnet.System.Linq.Expressions.LambdaExpression, ilOffset : Swift.Int32, sequencePoint : dotnet.System.Linq.Expressions.DebugInfoExpression) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_DebugInfoGenerator_void__MarkSequencePoint_0__3__LambdaExpression_i32_DebugInfoExpression(&__thrown, self.get_handle(), method.get_handle(), ilOffset, sequencePoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DebugInfoGenerator


// type: System.Runtime.CompilerServices.DynamicAttribute
    /**
    Indicates that the use of  on a member is meant to be treated as a dynamically dispatched type.

    */
public final class DynamicAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_DynamicAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.CompilerServices.DynamicAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_DynamicAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool[])
// docid: M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])
    /**
    Initializes a new instance of the  class.

    - Parameter transformFlags: Specifies, in a prefix traversal of a type's construction, which  occurrences are meant to be treated as a dynamically dispatched type.
    */
    public init(transformFlags : dotnet.System_Arr<Bool>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_DynamicAttribute_ctor_0__1__boolArray(&__thrown, transformFlags.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<bool> get_TransformFlags()
// docid: M:System.Runtime.CompilerServices.DynamicAttribute.get_TransformFlags
    public func get_TransformFlags() throws -> dotnet.System.Collections.Generic.IList_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_DynamicAttribute_System_Collections_Generic_IList_bool___get_TransformFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    Specifies, in a prefix traversal of a type's construction, which  occurrences are meant to be treated as a dynamically dispatched type.

    */
    public var TransformFlags : dotnet.System.Collections.Generic.IList_1<Bool> {
        get {
            return try! get_TransformFlags();
        }
    }
} // DynamicAttribute


// type: System.Runtime.CompilerServices.IRuntimeVariables
    /**
    Represents the values of run-time variables.

    */
open class IRuntimeVariables
    :
    SGBridgeGenericValue,
    System_Runtime_CompilerServices_IRuntimeVariables
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_IRuntimeVariables_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Runtime.CompilerServices.IRuntimeVariables.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_IRuntimeVariables_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Runtime.CompilerServices.IRuntimeVariables.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_IRuntimeVariables_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Object)
// docid: M:System.Runtime.CompilerServices.IRuntimeVariables.set_Item(System.Int32,System.Object)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_IRuntimeVariables_void__set_Item_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRuntimeVariables


// type: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1
    /**
    The builder for read only collection.

    */
public final class ReadOnlyCollectionBuilder_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor
    /**
    Constructs a .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Constructs a , copying the contents of the given collection.

    - Parameter collection: Collection to copy elements from.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)
    /**
    Constructs a  with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.

    - Parameter capacity: Initial capacity.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(T)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)
    /**
    Adds an item to the .

    - Parameter item: The object to add to the .
    */
    public func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear
    /**
    Removes all items from the .

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)
    /**
    Determines whether the  contains a specific value.

    - Parameter item: the object to locate in the .
    - Returns: 
         if item is found in the ; otherwise, .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(System.Runtime.CompilerServices.T[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection.

    - Returns: A  that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)
    /**
    Returns the index of the first occurrence of a given value in the builder.

    - Parameter item: An item to search for.
    - Returns: The index of the first occurrence of an item.

    */
    public func IndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, T)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)
    /**
    Inserts an item to the  at the specified index.

    - Parameter index: The zero-based index at which item should be inserted.
    - Parameter item: The object to insert into the .
    */
    public func Insert(index : Swift.Int32, item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(T)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)
    /**
    Removes the first occurrence of a specific object from the .

    - Parameter item: The object to remove from the .
    - Returns: 
         if item was successfully removed from the ; otherwise, false. This method also returns false if item is not found in the original .

    */
    public func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)
    /**
    Removes the  item at the specified index.

    - Parameter index: The zero-based index of the item to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse
    /**
    Reverses the order of the elements in the entire .

    */
    public func Reverse() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse(System.Int32, System.Int32)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)
    /**
    Reverses the order of the elements in the specified range.

    - Parameter index: The zero-based starting index of the range to reverse.
    - Parameter count: The number of elements in the range to reverse.
    */
    public func Reverse(index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__Reverse_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // T[] ToArray()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray
    /**
    Copies the elements of the  to a new array.

    - Returns: An array containing copies of the elements of the .

    */
    public func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // System.Collections.ObjectModel.ReadOnlyCollection<T> ToReadOnlyCollection()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection
    /**
    Creates a  containing all of the elements of the , avoiding copying the elements to the new array if possible. Resets the  after the  has been created.

    - Returns: A new instance of .

    */
    public func ToReadOnlyCollection() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_System_Collections_ObjectModel_ReadOnlyCollection_T___ToReadOnlyCollection_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Capacity()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.get_Capacity
    public func get_Capacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_i32__get_Capacity_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Capacity(System.Int32)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.set_Capacity(System.Int32)
    public func set_Capacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__set_Capacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, T)
// docid: M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.set_Item(System.Int32,`0)
    public func set_Item(index : Swift.Int32, value : T) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_ReadOnlyCollectionBuilder_1_void__set_Item_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the capacity of this .

    */
    public var Capacity : Swift.Int32 {
        get {
            return try! get_Capacity();
        }
        set(v) {
            return try! set_Capacity(value: v);
        }
    }
    /**
    Gets the number of elements in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // ReadOnlyCollectionBuilder_1


// type: System.Runtime.CompilerServices.RuleCache`1
    /**
    Represents a cache of runtime binding rules.

    */
open class RuleCache_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_RuleCache_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // RuleCache_1


}



public protocol System_Dynamic_IDynamicMetaObjectProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_Dynamic_IInvokeOnGetBinder
    :
    SGBridgeGetHandle
{
}

public protocol System_Linq_Expressions_IArgumentProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_Linq_Expressions_IDynamicExpression
    :
    System_Linq_Expressions_IArgumentProvider
{
}

public protocol System_Linq_IOrderedQueryable
    :
    System_Linq_IQueryable
{
}

public protocol System_Linq_IOrderedQueryable_1
    :
    System_Linq_IOrderedQueryable,
    System_Linq_IQueryable_1
    where
        T_IQueryable_1 == T_IOrderedQueryable_1
{
    associatedtype T_IOrderedQueryable_1;
}

public protocol System_Linq_IQueryProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_Linq_IQueryable
    :
    System_Collections_IEnumerable
{
}

public protocol System_Linq_IQueryable_1
    :
    System_Collections_Generic_IEnumerable_1,
    System_Linq_IQueryable
    where
        T_IEnumerable_1 == T_IQueryable_1
{
    associatedtype T_IQueryable_1;
}

public protocol System_Runtime_CompilerServices_IRuntimeVariables
    :
    SGBridgeGetHandle
{
}

