// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Reflection
// System.Reflection.Emit
extension System.Reflection.Emit {
// type: System.Reflection.Emit.FlowControl
    /**
    Describes how an instruction alters the flow of control.

    */
public struct FlowControl : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_FlowControl_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Reflection.Emit.FlowControl Branch
    /**
    Branch instruction.

    */
    public static var Branch : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Branch());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Break
    /**
    Break instruction.

    */
    public static var Break : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Break());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Call
    /**
    Call instruction.

    */
    public static var Call : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Call());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Cond_Branch
    /**
    Conditional branch instruction.

    */
    public static var Cond_Branch : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Cond_Branch());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Meta
    /**
    Provides information about a subsequent instruction. For example, the  instruction of  has  and specifies that the subsequent pointer instruction might be unaligned.

    */
    public static var Meta : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Meta());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Next
    /**
    Normal flow of control.

    */
    public static var Next : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Next());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Phi
    /**
    This enumerator value is reserved and should not be used.

    */
    public static var Phi : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Phi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Return
    /**
    Return instruction.

    */
    public static var Return : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Return());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.FlowControl Throw
    /**
    Exception throw instruction.

    */
    public static var Throw : dotnet.System.Reflection.Emit.FlowControl {
        get {
        let __return = dotnet.System.Reflection.Emit.FlowControl(val: System_Reflection_Emit_FlowControl_get_Throw());
            return __return;
        }
    }
} // FlowControl


// type: System.Reflection.Emit.OpCode
// boxed value type
    /**
    Describes an intermediate language (IL) instruction.

    */
public final class OpCode
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_OpCode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    The flow control characteristics of the intermediate language (IL) instruction.

    */
    public var FlowControl : dotnet.System.Reflection.Emit.FlowControl {
        get {
            return try! get_FlowControl();
        }
    }
    /**
    The name of the intermediate language (IL) instruction.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    The type of intermediate language (IL) instruction.

    */
    public var OpCodeType : dotnet.System.Reflection.Emit.OpCodeType {
        get {
            return try! get_OpCodeType();
        }
    }
    /**
    The operand type of an intermediate language (IL) instruction.

    */
    public var OperandType : dotnet.System.Reflection.Emit.OperandType {
        get {
            return try! get_OperandType();
        }
    }
    /**
    The size of the intermediate language (IL) instruction.

    */
    public var Size : Swift.Int32 {
        get {
            return try! get_Size();
        }
    }
    /**
    How the intermediate language (IL) instruction pops the stack.

    */
    public var StackBehaviourPop : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
            return try! get_StackBehaviourPop();
        }
    }
    /**
    How the intermediate language (IL) instruction pushes operand onto the stack.

    */
    public var StackBehaviourPush : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
            return try! get_StackBehaviourPush();
        }
    }
    /**
    Gets the numeric value of the intermediate language (IL) instruction.

    */
    public var Value : Swift.Int16 {
        get {
            return try! get_Value();
        }
    }
    public override init() {
        let h = System_Reflection_Emit_OpCode_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.OpCode.Equals(System.Object)
    /**
    Tests whether the given object is equal to this .

    - Parameter obj: The object to compare to this object.
    - Returns: 
         if  is an instance of  and is equal to this object; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Reflection.Emit.OpCode)
// docid: M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)
    /**
    Indicates whether the current instance is equal to the specified .

    - Parameter obj: The  to compare to the current instance.
    - Returns: 
         if the value of  is equal to the value of the current instance; otherwise, .

    */
    public func Equals(obj : dotnet.System.Reflection.Emit.OpCode) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_bool__Equals_0__1__OpCode(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.OpCode.GetHashCode
    /**
    Returns the generated hash code for this .

    - Returns: The hash code for this instance.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Reflection.Emit.OpCode, System.Reflection.Emit.OpCode)
// docid: M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
    /**
    Indicates whether two  structures are equal.

    - Parameter a: The  to compare to .
    - Parameter b: The  to compare to .
    - Returns: 
         if  is equal to ; otherwise, .

    */
    public class func op_Equality(a : dotnet.System.Reflection.Emit.OpCode, b : dotnet.System.Reflection.Emit.OpCode) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_bool__op_Equality_0__2__OpCode_OpCode(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Reflection.Emit.OpCode, System.Reflection.Emit.OpCode)
// docid: M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)
    /**
    Indicates whether two  structures are not equal.

    - Parameter a: The  to compare to .
    - Parameter b: The  to compare to .
    - Returns: 
         if  is not equal to ; otherwise, .

    */
    public class func op_Inequality(a : dotnet.System.Reflection.Emit.OpCode, b : dotnet.System.Reflection.Emit.OpCode) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_bool__op_Inequality_0__2__OpCode_OpCode(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Reflection.Emit.OpCode.ToString
    /**
    Returns this  as a .

    - Returns: A string containing the name of this .

    */
    public override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.Emit.FlowControl get_FlowControl()
// docid: M:System.Reflection.Emit.OpCode.get_FlowControl
    public func get_FlowControl() throws -> dotnet.System.Reflection.Emit.FlowControl {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_FlowControl__get_FlowControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FlowControl(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.OpCode.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.Emit.OpCodeType get_OpCodeType()
// docid: M:System.Reflection.Emit.OpCode.get_OpCodeType
    public func get_OpCodeType() throws -> dotnet.System.Reflection.Emit.OpCodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_OpCodeType__get_OpCodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.OpCodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Reflection.Emit.OperandType get_OperandType()
// docid: M:System.Reflection.Emit.OpCode.get_OperandType
    public func get_OperandType() throws -> dotnet.System.Reflection.Emit.OperandType {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_OperandType__get_OperandType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.OperandType(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Size()
// docid: M:System.Reflection.Emit.OpCode.get_Size
    public func get_Size() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_i32__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Reflection.Emit.StackBehaviour get_StackBehaviourPop()
// docid: M:System.Reflection.Emit.OpCode.get_StackBehaviourPop
    public func get_StackBehaviourPop() throws -> dotnet.System.Reflection.Emit.StackBehaviour {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_StackBehaviour__get_StackBehaviourPop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.StackBehaviour(val: __return);
        }
    }
    // [IsSpecialName] System.Reflection.Emit.StackBehaviour get_StackBehaviourPush()
// docid: M:System.Reflection.Emit.OpCode.get_StackBehaviourPush
    public func get_StackBehaviourPush() throws -> dotnet.System.Reflection.Emit.StackBehaviour {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_StackBehaviour__get_StackBehaviourPush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.StackBehaviour(val: __return);
        }
    }
    // [IsSpecialName] System.Int16 get_Value()
// docid: M:System.Reflection.Emit.OpCode.get_Value
    public func get_Value() throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCode_i16__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // OpCode


// type: System.Reflection.Emit.OpCodeType
    /**
    Describes the types of the Microsoft intermediate language (MSIL) instructions.

    */
public struct OpCodeType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_OpCodeType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Reflection.Emit.OpCodeType Annotation
    /**
    This enumerator value is reserved and should not be used.

    */
    public static var Annotation : dotnet.System.Reflection.Emit.OpCodeType {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCodeType(val: System_Reflection_Emit_OpCodeType_get_Annotation());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCodeType Macro
    /**
    These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example,  represents the  instruction with an argument of 0.

    */
    public static var Macro : dotnet.System.Reflection.Emit.OpCodeType {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCodeType(val: System_Reflection_Emit_OpCodeType_get_Macro());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCodeType Nternal
    /**
    Describes a reserved Microsoft intermediate language (MSIL) instruction.

    */
    public static var Nternal : dotnet.System.Reflection.Emit.OpCodeType {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCodeType(val: System_Reflection_Emit_OpCodeType_get_Nternal());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCodeType Objmodel
    /**
    Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.

    */
    public static var Objmodel : dotnet.System.Reflection.Emit.OpCodeType {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCodeType(val: System_Reflection_Emit_OpCodeType_get_Objmodel());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCodeType Prefix
    /**
    Describes a prefix instruction that modifies the behavior of the following instruction.

    */
    public static var Prefix : dotnet.System.Reflection.Emit.OpCodeType {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCodeType(val: System_Reflection_Emit_OpCodeType_get_Prefix());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCodeType Primitive
    /**
    Describes a built-in instruction.

    */
    public static var Primitive : dotnet.System.Reflection.Emit.OpCodeType {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCodeType(val: System_Reflection_Emit_OpCodeType_get_Primitive());
            return __return;
        }
    }
} // OpCodeType


// type: System.Reflection.Emit.OpCodes
    /**
    Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the  class members (such as ).

    */
open class OpCodes
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_OpCodes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Reflection.Emit.OpCode Add
    /**
    Adds two values and pushes the result onto the evaluation stack.

    */
    open class var Add : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Add());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Add_Ovf
    /**
    Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.

    */
    open class var Add_Ovf : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Add_Ovf());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Add_Ovf_Un
    /**
    Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.

    */
    open class var Add_Ovf_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Add_Ovf_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode And
    /**
    Computes the bitwise AND of two values and pushes the result onto the evaluation stack.

    */
    open class var And : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_And());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Arglist
    /**
    Returns an unmanaged pointer to the argument list of the current method.

    */
    open class var Arglist : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Arglist());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Beq
    /**
    Transfers control to a target instruction if two values are equal.

    */
    open class var Beq : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Beq());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Beq_S
    /**
    Transfers control to a target instruction (short form) if two values are equal.

    */
    open class var Beq_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Beq_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bge
    /**
    Transfers control to a target instruction if the first value is greater than or equal to the second value.

    */
    open class var Bge : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bge());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bge_S
    /**
    Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.

    */
    open class var Bge_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bge_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bge_Un
    /**
    Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Bge_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bge_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bge_Un_S
    /**
    Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Bge_Un_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bge_Un_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bgt
    /**
    Transfers control to a target instruction if the first value is greater than the second value.

    */
    open class var Bgt : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bgt());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bgt_S
    /**
    Transfers control to a target instruction (short form) if the first value is greater than the second value.

    */
    open class var Bgt_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bgt_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bgt_Un
    /**
    Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Bgt_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bgt_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bgt_Un_S
    /**
    Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Bgt_Un_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bgt_Un_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ble
    /**
    Transfers control to a target instruction if the first value is less than or equal to the second value.

    */
    open class var Ble : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ble());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ble_S
    /**
    Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.

    */
    open class var Ble_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ble_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ble_Un
    /**
    Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Ble_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ble_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ble_Un_S
    /**
    Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Ble_Un_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ble_Un_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Blt
    /**
    Transfers control to a target instruction if the first value is less than the second value.

    */
    open class var Blt : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Blt());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Blt_S
    /**
    Transfers control to a target instruction (short form) if the first value is less than the second value.

    */
    open class var Blt_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Blt_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Blt_Un
    /**
    Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Blt_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Blt_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Blt_Un_S
    /**
    Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.

    */
    open class var Blt_Un_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Blt_Un_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bne_Un
    /**
    Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.

    */
    open class var Bne_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bne_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Bne_Un_S
    /**
    Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.

    */
    open class var Bne_Un_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Bne_Un_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Box
    /**
    Converts a value type to an object reference (type ).

    */
    open class var Box : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Box());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Br
    /**
    Unconditionally transfers control to a target instruction.

    */
    open class var Br : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Br());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Break
    /**
    Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.

    */
    open class var Break : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Break());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Brfalse
    /**
    Transfers control to a target instruction if  is , a null reference ( in Visual Basic), or zero.

    */
    open class var Brfalse : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Brfalse());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Brfalse_S
    /**
    Transfers control to a target instruction if  is , a null reference, or zero.

    */
    open class var Brfalse_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Brfalse_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Brtrue
    /**
    Transfers control to a target instruction if  is , not null, or non-zero.

    */
    open class var Brtrue : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Brtrue());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Brtrue_S
    /**
    Transfers control to a target instruction (short form) if  is , not null, or non-zero.

    */
    open class var Brtrue_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Brtrue_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Br_S
    /**
    Unconditionally transfers control to a target instruction (short form).

    */
    open class var Br_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Br_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Call
    /**
    Calls the method indicated by the passed method descriptor.

    */
    open class var Call : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Call());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Calli
    /**
    Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.

    */
    open class var Calli : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Calli());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Callvirt
    /**
    Calls a late-bound method on an object, pushing the return value onto the evaluation stack.

    */
    open class var Callvirt : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Callvirt());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Castclass
    /**
    Attempts to cast an object passed by reference to the specified class.

    */
    open class var Castclass : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Castclass());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ceq
    /**
    Compares two values. If they are equal, the integer value 1 ) is pushed onto the evaluation stack; otherwise 0 () is pushed onto the evaluation stack.

    */
    open class var Ceq : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ceq());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Cgt
    /**
    Compares two values. If the first value is greater than the second, the integer value 1 ) is pushed onto the evaluation stack; otherwise 0 () is pushed onto the evaluation stack.

    */
    open class var Cgt : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Cgt());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Cgt_Un
    /**
    Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 ) is pushed onto the evaluation stack; otherwise 0 () is pushed onto the evaluation stack.

    */
    open class var Cgt_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Cgt_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ckfinite
    /**
    Throws  if value is not a finite number.

    */
    open class var Ckfinite : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ckfinite());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Clt
    /**
    Compares two values. If the first value is less than the second, the integer value 1 ) is pushed onto the evaluation stack; otherwise 0 () is pushed onto the evaluation stack.

    */
    open class var Clt : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Clt());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Clt_Un
    /**
    Compares the unsigned or unordered values  and . If  is less than , then the integer value 1 ) is pushed onto the evaluation stack; otherwise 0 () is pushed onto the evaluation stack.

    */
    open class var Clt_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Clt_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Constrained
    /**
    Constrains the type on which a virtual method call is made.

    */
    open class var Constrained : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Constrained());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_I
    /**
    Converts the value on top of the evaluation stack to .

    */
    open class var Conv_I : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_I());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_I1
    /**
    Converts the value on top of the evaluation stack to , then extends (pads) it to .

    */
    open class var Conv_I1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_I1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_I2
    /**
    Converts the value on top of the evaluation stack to , then extends (pads) it to .

    */
    open class var Conv_I2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_I2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_I4
    /**
    Converts the value on top of the evaluation stack to .

    */
    open class var Conv_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_I8
    /**
    Converts the value on top of the evaluation stack to .

    */
    open class var Conv_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I
    /**
    Converts the signed value on top of the evaluation stack to signed , throwing  on overflow.

    */
    open class var Conv_Ovf_I : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I1
    /**
    Converts the signed value on top of the evaluation stack to signed  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_I1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I1_Un
    /**
    Converts the unsigned value on top of the evaluation stack to signed  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_I1_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I1_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I2
    /**
    Converts the signed value on top of the evaluation stack to signed  and extending it to , throwing  on overflow.

    */
    open class var Conv_Ovf_I2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I2_Un
    /**
    Converts the unsigned value on top of the evaluation stack to signed  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_I2_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I2_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I4
    /**
    Converts the signed value on top of the evaluation stack to signed , throwing  on overflow.

    */
    open class var Conv_Ovf_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I4_Un
    /**
    Converts the unsigned value on top of the evaluation stack to signed , throwing  on overflow.

    */
    open class var Conv_Ovf_I4_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I4_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I8
    /**
    Converts the signed value on top of the evaluation stack to signed , throwing  on overflow.

    */
    open class var Conv_Ovf_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I8_Un
    /**
    Converts the unsigned value on top of the evaluation stack to signed , throwing  on overflow.

    */
    open class var Conv_Ovf_I8_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I8_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_I_Un
    /**
    Converts the unsigned value on top of the evaluation stack to signed , throwing  on overflow.

    */
    open class var Conv_Ovf_I_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_I_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U
    /**
    Converts the signed value on top of the evaluation stack to , throwing  on overflow.

    */
    open class var Conv_Ovf_U : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U1
    /**
    Converts the signed value on top of the evaluation stack to  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_U1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U1_Un
    /**
    Converts the unsigned value on top of the evaluation stack to  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_U1_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U1_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U2
    /**
    Converts the signed value on top of the evaluation stack to  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_U2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U2_Un
    /**
    Converts the unsigned value on top of the evaluation stack to  and extends it to , throwing  on overflow.

    */
    open class var Conv_Ovf_U2_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U2_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U4
    /**
    Converts the signed value on top of the evaluation stack to , throwing  on overflow.

    */
    open class var Conv_Ovf_U4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U4_Un
    /**
    Converts the unsigned value on top of the evaluation stack to , throwing  on overflow.

    */
    open class var Conv_Ovf_U4_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U4_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U8
    /**
    Converts the signed value on top of the evaluation stack to , throwing  on overflow.

    */
    open class var Conv_Ovf_U8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U8_Un
    /**
    Converts the unsigned value on top of the evaluation stack to , throwing  on overflow.

    */
    open class var Conv_Ovf_U8_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U8_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_Ovf_U_Un
    /**
    Converts the unsigned value on top of the evaluation stack to , throwing  on overflow.

    */
    open class var Conv_Ovf_U_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_Ovf_U_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_R4
    /**
    Converts the value on top of the evaluation stack to .

    */
    open class var Conv_R4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_R4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_R8
    /**
    Converts the value on top of the evaluation stack to .

    */
    open class var Conv_R8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_R8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_R_Un
    /**
    Converts the unsigned integer value on top of the evaluation stack to .

    */
    open class var Conv_R_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_R_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_U
    /**
    Converts the value on top of the evaluation stack to , and extends it to .

    */
    open class var Conv_U : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_U());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_U1
    /**
    Converts the value on top of the evaluation stack to , and extends it to .

    */
    open class var Conv_U1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_U1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_U2
    /**
    Converts the value on top of the evaluation stack to , and extends it to .

    */
    open class var Conv_U2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_U2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_U4
    /**
    Converts the value on top of the evaluation stack to , and extends it to .

    */
    open class var Conv_U4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_U4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Conv_U8
    /**
    Converts the value on top of the evaluation stack to , and extends it to .

    */
    open class var Conv_U8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Conv_U8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Cpblk
    /**
    Copies a specified number bytes from a source address to a destination address.

    */
    open class var Cpblk : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Cpblk());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Cpobj
    /**
    Copies the value type located at the address of an object (type ,  or ) to the address of the destination object (type ,  or ).

    */
    open class var Cpobj : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Cpobj());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Div
    /**
    Divides two values and pushes the result as a floating-point (type ) or quotient (type ) onto the evaluation stack.

    */
    open class var Div : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Div());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Div_Un
    /**
    Divides two unsigned integer values and pushes the result () onto the evaluation stack.

    */
    open class var Div_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Div_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Dup
    /**
    Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.

    */
    open class var Dup : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Dup());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Endfilter
    /**
    Transfers control from the  clause of an exception back to the Common Language Infrastructure (CLI) exception handler.

    */
    open class var Endfilter : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Endfilter());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Endfinally
    /**
    Transfers control from the  or  clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.

    */
    open class var Endfinally : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Endfinally());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Initblk
    /**
    Initializes a specified block of memory at a specific address to a given size and initial value.

    */
    open class var Initblk : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Initblk());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Initobj
    /**
    Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.

    */
    open class var Initobj : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Initobj());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Isinst
    /**
    Tests whether an object reference (type ) is an instance of a particular class.

    */
    open class var Isinst : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Isinst());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Jmp
    /**
    Exits current method and jumps to specified method.

    */
    open class var Jmp : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Jmp());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarg
    /**
    Loads an argument (referenced by a specified index value) onto the stack.

    */
    open class var Ldarg : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarg());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarga
    /**
    Load an argument address onto the evaluation stack.

    */
    open class var Ldarga : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarga());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarga_S
    /**
    Load an argument address, in short form, onto the evaluation stack.

    */
    open class var Ldarga_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarga_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarg_0
    /**
    Loads the argument at index 0 onto the evaluation stack.

    */
    open class var Ldarg_0 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarg_0());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarg_1
    /**
    Loads the argument at index 1 onto the evaluation stack.

    */
    open class var Ldarg_1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarg_1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarg_2
    /**
    Loads the argument at index 2 onto the evaluation stack.

    */
    open class var Ldarg_2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarg_2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarg_3
    /**
    Loads the argument at index 3 onto the evaluation stack.

    */
    open class var Ldarg_3 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarg_3());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldarg_S
    /**
    Loads the argument (referenced by a specified short form index) onto the evaluation stack.

    */
    open class var Ldarg_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldarg_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4
    /**
    Pushes a supplied value of type  onto the evaluation stack as an .

    */
    open class var Ldc_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_0
    /**
    Pushes the integer value of 0 onto the evaluation stack as an .

    */
    open class var Ldc_I4_0 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_0());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_1
    /**
    Pushes the integer value of 1 onto the evaluation stack as an .

    */
    open class var Ldc_I4_1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_2
    /**
    Pushes the integer value of 2 onto the evaluation stack as an .

    */
    open class var Ldc_I4_2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_3
    /**
    Pushes the integer value of 3 onto the evaluation stack as an .

    */
    open class var Ldc_I4_3 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_3());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_4
    /**
    Pushes the integer value of 4 onto the evaluation stack as an .

    */
    open class var Ldc_I4_4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_5
    /**
    Pushes the integer value of 5 onto the evaluation stack as an .

    */
    open class var Ldc_I4_5 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_5());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_6
    /**
    Pushes the integer value of 6 onto the evaluation stack as an .

    */
    open class var Ldc_I4_6 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_6());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_7
    /**
    Pushes the integer value of 7 onto the evaluation stack as an .

    */
    open class var Ldc_I4_7 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_7());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_8
    /**
    Pushes the integer value of 8 onto the evaluation stack as an .

    */
    open class var Ldc_I4_8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_M1
    /**
    Pushes the integer value of -1 onto the evaluation stack as an .

    */
    open class var Ldc_I4_M1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_M1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I4_S
    /**
    Pushes the supplied  value onto the evaluation stack as an , short form.

    */
    open class var Ldc_I4_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I4_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_I8
    /**
    Pushes a supplied value of type  onto the evaluation stack as an .

    */
    open class var Ldc_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_R4
    /**
    Pushes a supplied value of type  onto the evaluation stack as type  (float).

    */
    open class var Ldc_R4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_R4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldc_R8
    /**
    Pushes a supplied value of type  onto the evaluation stack as type  (float).

    */
    open class var Ldc_R8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldc_R8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem
    /**
    Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.

    */
    open class var Ldelem : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelema
    /**
    Loads the address of the array element at a specified array index onto the top of the evaluation stack as type  (managed pointer).

    */
    open class var Ldelema : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelema());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_I
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as a .

    */
    open class var Ldelem_I : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_I());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_I1
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_I1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_I1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_I2
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_I2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_I2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_I4
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_I8
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_R4
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as type  (float).

    */
    open class var Ldelem_R4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_R4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_R8
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as type  (float).

    */
    open class var Ldelem_R8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_R8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_Ref
    /**
    Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type  (object reference).

    */
    open class var Ldelem_Ref : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_Ref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_U1
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_U1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_U1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_U2
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_U2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_U2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldelem_U4
    /**
    Loads the element with type  at a specified array index onto the top of the evaluation stack as an .

    */
    open class var Ldelem_U4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldelem_U4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldfld
    /**
    Finds the value of a field in the object whose reference is currently on the evaluation stack.

    */
    open class var Ldfld : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldfld());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldflda
    /**
    Finds the address of a field in the object whose reference is currently on the evaluation stack.

    */
    open class var Ldflda : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldflda());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldftn
    /**
    Pushes an unmanaged pointer (type ) to the native code implementing a specific method onto the evaluation stack.

    */
    open class var Ldftn : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldftn());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_I
    /**
    Loads a value of type  as a  onto the evaluation stack indirectly.

    */
    open class var Ldind_I : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_I());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_I1
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_I1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_I1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_I2
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_I2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_I2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_I4
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_I8
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_R4
    /**
    Loads a value of type  as a type  (float) onto the evaluation stack indirectly.

    */
    open class var Ldind_R4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_R4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_R8
    /**
    Loads a value of type  as a type  (float) onto the evaluation stack indirectly.

    */
    open class var Ldind_R8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_R8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_Ref
    /**
    Loads an object reference as a type  (object reference) onto the evaluation stack indirectly.

    */
    open class var Ldind_Ref : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_Ref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_U1
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_U1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_U1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_U2
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_U2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_U2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldind_U4
    /**
    Loads a value of type  as an  onto the evaluation stack indirectly.

    */
    open class var Ldind_U4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldind_U4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldlen
    /**
    Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.

    */
    open class var Ldlen : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldlen());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloc
    /**
    Loads the local variable at a specific index onto the evaluation stack.

    */
    open class var Ldloc : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloc());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloca
    /**
    Loads the address of the local variable at a specific index onto the evaluation stack.

    */
    open class var Ldloca : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloca());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloca_S
    /**
    Loads the address of the local variable at a specific index onto the evaluation stack, short form.

    */
    open class var Ldloca_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloca_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloc_0
    /**
    Loads the local variable at index 0 onto the evaluation stack.

    */
    open class var Ldloc_0 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloc_0());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloc_1
    /**
    Loads the local variable at index 1 onto the evaluation stack.

    */
    open class var Ldloc_1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloc_1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloc_2
    /**
    Loads the local variable at index 2 onto the evaluation stack.

    */
    open class var Ldloc_2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloc_2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloc_3
    /**
    Loads the local variable at index 3 onto the evaluation stack.

    */
    open class var Ldloc_3 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloc_3());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldloc_S
    /**
    Loads the local variable at a specific index onto the evaluation stack, short form.

    */
    open class var Ldloc_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldloc_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldnull
    /**
    Pushes a null reference (type ) onto the evaluation stack.

    */
    open class var Ldnull : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldnull());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldobj
    /**
    Copies the value type object pointed to by an address to the top of the evaluation stack.

    */
    open class var Ldobj : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldobj());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldsfld
    /**
    Pushes the value of a static field onto the evaluation stack.

    */
    open class var Ldsfld : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldsfld());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldsflda
    /**
    Pushes the address of a static field onto the evaluation stack.

    */
    open class var Ldsflda : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldsflda());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldstr
    /**
    Pushes a new object reference to a string literal stored in the metadata.

    */
    open class var Ldstr : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldstr());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldtoken
    /**
    Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.

    */
    open class var Ldtoken : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldtoken());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ldvirtftn
    /**
    Pushes an unmanaged pointer (type ) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.

    */
    open class var Ldvirtftn : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ldvirtftn());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Leave
    /**
    Exits a protected region of code, unconditionally transferring control to a specific target instruction.

    */
    open class var Leave : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Leave());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Leave_S
    /**
    Exits a protected region of code, unconditionally transferring control to a target instruction (short form).

    */
    open class var Leave_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Leave_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Localloc
    /**
    Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type ) of the first allocated byte onto the evaluation stack.

    */
    open class var Localloc : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Localloc());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Mkrefany
    /**
    Pushes a typed reference to an instance of a specific type onto the evaluation stack.

    */
    open class var Mkrefany : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Mkrefany());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Mul
    /**
    Multiplies two values and pushes the result on the evaluation stack.

    */
    open class var Mul : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Mul());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Mul_Ovf
    /**
    Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.

    */
    open class var Mul_Ovf : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Mul_Ovf());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Mul_Ovf_Un
    /**
    Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.

    */
    open class var Mul_Ovf_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Mul_Ovf_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Neg
    /**
    Negates a value and pushes the result onto the evaluation stack.

    */
    open class var Neg : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Neg());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Newarr
    /**
    Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.

    */
    open class var Newarr : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Newarr());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Newobj
    /**
    Creates a new object or a new instance of a value type, pushing an object reference (type ) onto the evaluation stack.

    */
    open class var Newobj : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Newobj());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Nop
    /**
    Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.

    */
    open class var Nop : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Nop());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Not
    /**
    Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.

    */
    open class var Not : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Not());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Or
    /**
    Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.

    */
    open class var Or : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Or());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Pop
    /**
    Removes the value currently on top of the evaluation stack.

    */
    open class var Pop : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Pop());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix1
    /**
    This is a reserved instruction.

    */
    open class var Prefix1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix2
    /**
    This is a reserved instruction.

    */
    open class var Prefix2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix3
    /**
    This is a reserved instruction.

    */
    open class var Prefix3 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix3());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix4
    /**
    This is a reserved instruction.

    */
    open class var Prefix4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix5
    /**
    This is a reserved instruction.

    */
    open class var Prefix5 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix5());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix6
    /**
    This is a reserved instruction.

    */
    open class var Prefix6 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix6());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefix7
    /**
    This is a reserved instruction.

    */
    open class var Prefix7 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefix7());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Prefixref
    /**
    This is a reserved instruction.

    */
    open class var Prefixref : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Prefixref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Readonly
    /**
    Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.

    */
    open class var Readonly : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Readonly());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Refanytype
    /**
    Retrieves the type token embedded in a typed reference.

    */
    open class var Refanytype : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Refanytype());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Refanyval
    /**
    Retrieves the address (type ) embedded in a typed reference.

    */
    open class var Refanyval : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Refanyval());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Rem
    /**
    Divides two values and pushes the remainder onto the evaluation stack.

    */
    open class var Rem : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Rem());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Rem_Un
    /**
    Divides two unsigned values and pushes the remainder onto the evaluation stack.

    */
    open class var Rem_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Rem_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Ret
    /**
    Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.

    */
    open class var Ret : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Ret());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Rethrow
    /**
    Rethrows the current exception.

    */
    open class var Rethrow : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Rethrow());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Shl
    /**
    Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.

    */
    open class var Shl : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Shl());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Shr
    /**
    Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.

    */
    open class var Shr : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Shr());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Shr_Un
    /**
    Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.

    */
    open class var Shr_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Shr_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Sizeof
    /**
    Pushes the size, in bytes, of a supplied value type onto the evaluation stack.

    */
    open class var Sizeof : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Sizeof());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Starg
    /**
    Stores the value on top of the evaluation stack in the argument slot at a specified index.

    */
    open class var Starg : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Starg());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Starg_S
    /**
    Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.

    */
    open class var Starg_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Starg_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem
    /**
    Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.

    */
    open class var Stelem : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_I
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_I : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_I());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_I1
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_I1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_I1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_I2
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_I2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_I2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_I4
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_I8
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_R4
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_R4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_R4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_R8
    /**
    Replaces the array element at a given index with the  value on the evaluation stack.

    */
    open class var Stelem_R8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_R8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stelem_Ref
    /**
    Replaces the array element at a given index with the object ref value (type ) on the evaluation stack.

    */
    open class var Stelem_Ref : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stelem_Ref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stfld
    /**
    Replaces the value stored in the field of an object reference or pointer with a new value.

    */
    open class var Stfld : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stfld());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_I
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_I : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_I());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_I1
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_I1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_I1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_I2
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_I2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_I2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_I4
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_I4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_I4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_I8
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_I8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_I8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_R4
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_R4 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_R4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_R8
    /**
    Stores a value of type  at a supplied address.

    */
    open class var Stind_R8 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_R8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stind_Ref
    /**
    Stores a object reference value at a supplied address.

    */
    open class var Stind_Ref : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stind_Ref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stloc
    /**
    Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.

    */
    open class var Stloc : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stloc());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stloc_0
    /**
    Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.

    */
    open class var Stloc_0 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stloc_0());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stloc_1
    /**
    Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.

    */
    open class var Stloc_1 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stloc_1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stloc_2
    /**
    Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.

    */
    open class var Stloc_2 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stloc_2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stloc_3
    /**
    Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.

    */
    open class var Stloc_3 : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stloc_3());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stloc_S
    /**
    Pops the current value from the top of the evaluation stack and stores it in a the local variable list at  (short form).

    */
    open class var Stloc_S : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stloc_S());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stobj
    /**
    Copies a value of a specified type from the evaluation stack into a supplied memory address.

    */
    open class var Stobj : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stobj());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Stsfld
    /**
    Replaces the value of a static field with a value from the evaluation stack.

    */
    open class var Stsfld : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Stsfld());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Sub
    /**
    Subtracts one value from another and pushes the result onto the evaluation stack.

    */
    open class var Sub : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Sub());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Sub_Ovf
    /**
    Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.

    */
    open class var Sub_Ovf : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Sub_Ovf());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Sub_Ovf_Un
    /**
    Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.

    */
    open class var Sub_Ovf_Un : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Sub_Ovf_Un());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Switch
    /**
    Implements a jump table.

    */
    open class var Switch : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Switch());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Tailcall
    /**
    Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.

    */
    open class var Tailcall : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Tailcall());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Throw
    /**
    Throws the exception object currently on the evaluation stack.

    */
    open class var Throw : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Throw());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Unaligned
    /**
    Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following , , , , , , , or  instruction.

    */
    open class var Unaligned : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Unaligned());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Unbox
    /**
    Converts the boxed representation of a value type to its unboxed form.

    */
    open class var Unbox : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Unbox());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Unbox_Any
    /**
    Converts the boxed representation of a type specified in the instruction to its unboxed form.

    */
    open class var Unbox_Any : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Unbox_Any());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Volatile
    /**
    Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.

    */
    open class var Volatile : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Volatile());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OpCode Xor
    /**
    Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.

    */
    open class var Xor : dotnet.System.Reflection.Emit.OpCode {
        get {
        let __return = dotnet.System.Reflection.Emit.OpCode(hndl: System_Reflection_Emit_OpCodes_get_Xor());
            return __return;
        }
    }
    // bool TakesSingleByteArgument(System.Reflection.Emit.OpCode)
// docid: M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)
    /**
    Returns true or false if the supplied opcode takes a single byte argument.

    - Parameter inst: An instance of an Opcode object.
    - Returns: 
         or .

    */
    open class func TakesSingleByteArgument(inst : dotnet.System.Reflection.Emit.OpCode) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_OpCodes_bool__TakesSingleByteArgument_0__1__OpCode(&__thrown, inst.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // OpCodes


// type: System.Reflection.Emit.OperandType
    /**
    Describes the operand type of Microsoft intermediate language (MSIL) instruction.

    */
public struct OperandType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_OperandType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Reflection.Emit.OperandType InlineBrTarget
    /**
    The operand is a 32-bit integer branch target.

    */
    public static var InlineBrTarget : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineBrTarget());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineField
    /**
    The operand is a 32-bit metadata token.

    */
    public static var InlineField : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineField());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineI
    /**
    The operand is a 32-bit integer.

    */
    public static var InlineI : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineI());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineI8
    /**
    The operand is a 64-bit integer.

    */
    public static var InlineI8 : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineI8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineMethod
    /**
    The operand is a 32-bit metadata token.

    */
    public static var InlineMethod : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineMethod());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineNone
    /**
    No operand.

    */
    public static var InlineNone : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineNone());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlinePhi
    /**
    The operand is reserved and should not be used.

    */
    public static var InlinePhi : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlinePhi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineR
    /**
    The operand is a 64-bit IEEE floating point number.

    */
    public static var InlineR : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineR());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineSig
    /**
    The operand is a 32-bit metadata signature token.

    */
    public static var InlineSig : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineSig());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineString
    /**
    The operand is a 32-bit metadata string token.

    */
    public static var InlineString : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineString());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineSwitch
    /**
    The operand is the 32-bit integer argument to a switch instruction.

    */
    public static var InlineSwitch : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineSwitch());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineTok
    /**
    The operand is a , , or  token.

    */
    public static var InlineTok : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineTok());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineType
    /**
    The operand is a 32-bit metadata token.

    */
    public static var InlineType : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineType());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType InlineVar
    /**
    The operand is 16-bit integer containing the ordinal of a local variable or an argument.

    */
    public static var InlineVar : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_InlineVar());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType ShortInlineBrTarget
    /**
    The operand is an 8-bit integer branch target.

    */
    public static var ShortInlineBrTarget : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_ShortInlineBrTarget());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType ShortInlineI
    /**
    The operand is an 8-bit integer.

    */
    public static var ShortInlineI : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_ShortInlineI());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType ShortInlineR
    /**
    The operand is a 32-bit IEEE floating point number.

    */
    public static var ShortInlineR : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_ShortInlineR());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.OperandType ShortInlineVar
    /**
    The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.

    */
    public static var ShortInlineVar : dotnet.System.Reflection.Emit.OperandType {
        get {
        let __return = dotnet.System.Reflection.Emit.OperandType(val: System_Reflection_Emit_OperandType_get_ShortInlineVar());
            return __return;
        }
    }
} // OperandType


// type: System.Reflection.Emit.PackingSize
    /**
    Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.

    */
public struct PackingSize : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_PackingSize_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Reflection.Emit.PackingSize Unspecified
    /**
    The packing size is not specified.

    */
    public static var Unspecified : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Unspecified());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size1
    /**
    The packing size is 1 byte.

    */
    public static var Size1 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size2
    /**
    The packing size is 2 bytes.

    */
    public static var Size2 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size2());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size4
    /**
    The packing size is 4 bytes.

    */
    public static var Size4 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size8
    /**
    The packing size is 8 bytes.

    */
    public static var Size8 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size16
    /**
    The packing size is 16 bytes.

    */
    public static var Size16 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size16());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size32
    /**
    The packing size is 32 bytes.

    */
    public static var Size32 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size32());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size64
    /**
    The packing size is 64 bytes.

    */
    public static var Size64 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size64());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.PackingSize Size128
    /**
    The packing size is 128 bytes.

    */
    public static var Size128 : dotnet.System.Reflection.Emit.PackingSize {
        get {
        let __return = dotnet.System.Reflection.Emit.PackingSize(val: System_Reflection_Emit_PackingSize_get_Size128());
            return __return;
        }
    }
} // PackingSize


// type: System.Reflection.Emit.StackBehaviour
    /**
    Describes how values are pushed onto a stack or popped off a stack.

    */
public struct StackBehaviour : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_StackBehaviour_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Reflection.Emit.StackBehaviour Pop0
    /**
    No values are popped off the stack.

    */
    public static var Pop0 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pop0());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pop1
    /**
    Pops one value off the stack.

    */
    public static var Pop1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pop1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pop1_pop1
    /**
    Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.

    */
    public static var Pop1_pop1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pop1_pop1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi
    /**
    Pops a 32-bit integer off the stack.

    */
    public static var Popi : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi_pop1
    /**
    Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.

    */
    public static var Popi_pop1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi_pop1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi_popi
    /**
    Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.

    */
    public static var Popi_popi : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi_popi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi_popi8
    /**
    Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.

    */
    public static var Popi_popi8 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi_popi8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi_popi_popi
    /**
    Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.

    */
    public static var Popi_popi_popi : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi_popi_popi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi_popr4
    /**
    Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.

    */
    public static var Popi_popr4 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi_popr4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popi_popr8
    /**
    Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.

    */
    public static var Popi_popr8 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popi_popr8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref
    /**
    Pops a reference off the stack.

    */
    public static var Popref : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_pop1
    /**
    Pops a reference off the stack for the first operand, and a value off the stack for the second operand.

    */
    public static var Popref_pop1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_pop1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi
    /**
    Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.

    */
    public static var Popref_popi : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi_popi
    /**
    Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.

    */
    public static var Popref_popi_popi : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi_popi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi_popi8
    /**
    Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.

    */
    public static var Popref_popi_popi8 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi_popi8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi_popr4
    /**
    Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.

    */
    public static var Popref_popi_popr4 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi_popr4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi_popr8
    /**
    Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.

    */
    public static var Popref_popi_popr8 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi_popr8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi_popref
    /**
    Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.

    */
    public static var Popref_popi_popref : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi_popref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Push0
    /**
    No values are pushed onto the stack.

    */
    public static var Push0 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Push0());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Push1
    /**
    Pushes one value onto the stack.

    */
    public static var Push1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Push1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Push1_push1
    /**
    Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.

    */
    public static var Push1_push1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Push1_push1());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pushi
    /**
    Pushes a 32-bit integer onto the stack.

    */
    public static var Pushi : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pushi());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pushi8
    /**
    Pushes a 64-bit integer onto the stack.

    */
    public static var Pushi8 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pushi8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pushr4
    /**
    Pushes a 32-bit floating point number onto the stack.

    */
    public static var Pushr4 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pushr4());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pushr8
    /**
    Pushes a 64-bit floating point number onto the stack.

    */
    public static var Pushr8 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pushr8());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Pushref
    /**
    Pushes a reference onto the stack.

    */
    public static var Pushref : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Pushref());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Varpop
    /**
    Pops a variable off the stack.

    */
    public static var Varpop : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Varpop());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Varpush
    /**
    Pushes a variable onto the stack.

    */
    public static var Varpush : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Varpush());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.StackBehaviour Popref_popi_pop1
    /**
    Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.

    */
    public static var Popref_popi_pop1 : dotnet.System.Reflection.Emit.StackBehaviour {
        get {
        let __return = dotnet.System.Reflection.Emit.StackBehaviour(val: System_Reflection_Emit_StackBehaviour_get_Popref_popi_pop1());
            return __return;
        }
    }
} // StackBehaviour


}



