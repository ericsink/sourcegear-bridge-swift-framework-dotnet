// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.Dns
public struct Dns {
    // System.IAsyncResult BeginGetHostAddresses(System.String, System.AsyncCallback, System.Object)
// docid: M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
    /**
    Asynchronously returns the Internet Protocol (IP) addresses for the specified host.

    - Parameter hostNameOrAddress: The host name or IP address to resolve.
    - Parameter requestCallback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter state: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation is complete.
    - Returns: An  instance that references the asynchronous request.

    */
    public static func BeginGetHostAddresses(hostNameOrAddress : dotnet.System.String, requestCallback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IAsyncResult__BeginGetHostAddresses_0__3__String_AsyncCallback_Object(&__thrown, hostNameOrAddress.get_handle(), requestCallback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func BeginGetHostAddresses(hostNameOrAddress : dotnet.System.String, requestCallback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_requestCallback = try dotnet.System.AsyncCallback(requestCallback);
        return try BeginGetHostAddresses(hostNameOrAddress: hostNameOrAddress, requestCallback: del_requestCallback, state: state);
    }
    // System.IAsyncResult BeginGetHostByName(System.String, System.AsyncCallback, System.Object)
// docid: M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request for  information about the specified DNS host name.

    - Parameter hostName: The DNS name of the host.
    - Parameter requestCallback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter stateObject: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation is complete.
    - Returns: An  instance that references the asynchronous request.

    */
    public static func BeginGetHostByName(hostName : dotnet.System.String, requestCallback : Optional<dotnet.System.AsyncCallback>, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IAsyncResult__BeginGetHostByName_0__3__String_AsyncCallback_Object(&__thrown, hostName.get_handle(), requestCallback?.get_handle() ?? nil, stateObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func BeginGetHostByName(hostName : dotnet.System.String, requestCallback : @escaping (dotnet.System.IAsyncResult) throws -> Void, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_requestCallback = try dotnet.System.AsyncCallback(requestCallback);
        return try BeginGetHostByName(hostName: hostName, requestCallback: del_requestCallback, stateObject: stateObject);
    }
    // System.IAsyncResult BeginGetHostEntry(System.Net.IPAddress, System.AsyncCallback, System.Object)
// docid: M:System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)
    /**
    Asynchronously resolves an IP address to an  instance.

    - Parameter address: The IP address to resolve.
    - Parameter requestCallback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter stateObject: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation is complete.
    - Returns: An  instance that references the asynchronous request.

    */
    public static func BeginGetHostEntry(address : dotnet.System.Net.IPAddress, requestCallback : Optional<dotnet.System.AsyncCallback>, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IAsyncResult__BeginGetHostEntry_0__3__IPAddress_AsyncCallback_Object(&__thrown, address.get_handle(), requestCallback?.get_handle() ?? nil, stateObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func BeginGetHostEntry(address : dotnet.System.Net.IPAddress, requestCallback : @escaping (dotnet.System.IAsyncResult) throws -> Void, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_requestCallback = try dotnet.System.AsyncCallback(requestCallback);
        return try BeginGetHostEntry(address: address, requestCallback: del_requestCallback, stateObject: stateObject);
    }
    // System.IAsyncResult BeginGetHostEntry(System.String, System.AsyncCallback, System.Object)
// docid: M:System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)
    /**
    Asynchronously resolves a host name or IP address to an  instance.

    - Parameter hostNameOrAddress: The host name or IP address to resolve.
    - Parameter requestCallback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter stateObject: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation is complete.
    - Returns: An  instance that references the asynchronous request.

    */
    public static func BeginGetHostEntry(hostNameOrAddress : dotnet.System.String, requestCallback : Optional<dotnet.System.AsyncCallback>, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IAsyncResult__BeginGetHostEntry_0__3__String_AsyncCallback_Object(&__thrown, hostNameOrAddress.get_handle(), requestCallback?.get_handle() ?? nil, stateObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func BeginGetHostEntry(hostNameOrAddress : dotnet.System.String, requestCallback : @escaping (dotnet.System.IAsyncResult) throws -> Void, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_requestCallback = try dotnet.System.AsyncCallback(requestCallback);
        return try BeginGetHostEntry(hostNameOrAddress: hostNameOrAddress, requestCallback: del_requestCallback, stateObject: stateObject);
    }
    // System.IAsyncResult BeginResolve(System.String, System.AsyncCallback, System.Object)
// docid: M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request to resolve a DNS host name or IP address to an  instance.

    - Parameter hostName: The DNS name of the host.
    - Parameter requestCallback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter stateObject: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation is complete.
    - Returns: An  instance that references the asynchronous request.

    */
    public static func BeginResolve(hostName : dotnet.System.String, requestCallback : Optional<dotnet.System.AsyncCallback>, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IAsyncResult__BeginResolve_0__3__String_AsyncCallback_Object(&__thrown, hostName.get_handle(), requestCallback?.get_handle() ?? nil, stateObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func BeginResolve(hostName : dotnet.System.String, requestCallback : @escaping (dotnet.System.IAsyncResult) throws -> Void, stateObject : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_requestCallback = try dotnet.System.AsyncCallback(requestCallback);
        return try BeginResolve(hostName: hostName, requestCallback: del_requestCallback, stateObject: stateObject);
    }
    // System.Net.IPAddress[] EndGetHostAddresses(System.IAsyncResult)
// docid: M:System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)
    /**
    Ends an asynchronous request for DNS information.

    - Parameter asyncResult: An  instance returned by a call to the  method.
    - Returns: An array of type  that holds the IP addresses for the host specified by the  parameter of .

    */
    public static func EndGetHostAddresses(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System_Arr<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPAddressArray__EndGetHostAddresses_0__1__IAsyncResult(&__thrown, asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.IPAddress>(hndl : __return);
        }
    }
    // System.Net.IPHostEntry EndGetHostByName(System.IAsyncResult)
// docid: M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)
    /**
    Ends an asynchronous request for DNS information.

    - Parameter asyncResult: An  instance that is returned by a call to the  method.
    - Returns: An  object that contains DNS information about a host.

    */
    public static func EndGetHostByName(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__EndGetHostByName_0__1__IAsyncResult(&__thrown, asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry EndGetHostEntry(System.IAsyncResult)
// docid: M:System.Net.Dns.EndGetHostEntry(System.IAsyncResult)
    /**
    Ends an asynchronous request for DNS information.

    - Parameter asyncResult: An  instance returned by a call to an  method.
    - Returns: An  instance that contains address information about the host.

    */
    public static func EndGetHostEntry(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__EndGetHostEntry_0__1__IAsyncResult(&__thrown, asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry EndResolve(System.IAsyncResult)
// docid: M:System.Net.Dns.EndResolve(System.IAsyncResult)
    /**
    Ends an asynchronous request for DNS information.

    - Parameter asyncResult: An  instance that is returned by a call to the  method.
    - Returns: An  object that contains DNS information about a host.

    */
    public static func EndResolve(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__EndResolve_0__1__IAsyncResult(&__thrown, asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPAddress[] GetHostAddresses(System.String)
// docid: M:System.Net.Dns.GetHostAddresses(System.String)
    /**
    Returns the Internet Protocol (IP) addresses for the specified host.

    - Parameter hostNameOrAddress: The host name or IP address to resolve.
    - Returns: An array of type  that holds the IP addresses for the host that is specified by the  parameter.

    */
    public static func GetHostAddresses(hostNameOrAddress : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPAddressArray__GetHostAddresses_0__1__String(&__thrown, hostNameOrAddress.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.IPAddress>(hndl : __return);
        }
    }
    // System.Net.IPAddress[] GetHostAddresses(System.String, System.Net.Sockets.AddressFamily)
// docid: M:System.Net.Dns.GetHostAddresses(System.String,System.Net.Sockets.AddressFamily)
    public static func GetHostAddresses(hostNameOrAddress : dotnet.System.String, family : dotnet.System.Net.Sockets.AddressFamily) throws -> dotnet.System_Arr<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPAddressArray__GetHostAddresses_0__2__String_AddressFamily(&__thrown, hostNameOrAddress.get_handle(), family.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.IPAddress>(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync(System.String)
// docid: M:System.Net.Dns.GetHostAddressesAsync(System.String)
    /**
    Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.

    - Parameter hostNameOrAddress: The host name or IP address to resolve.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns an array of type  that holds the IP addresses for the host that is specified by the  parameter.

    */
    public static func GetHostAddressesAsync(hostNameOrAddress : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<dotnet.System.Net.IPAddress>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPAddressArray___GetHostAddressesAsync_0__1__String(&__thrown, hostNameOrAddress.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync(System.String, System.Net.Sockets.AddressFamily, System.Threading.CancellationToken)
// docid: M:System.Net.Dns.GetHostAddressesAsync(System.String,System.Net.Sockets.AddressFamily,System.Threading.CancellationToken)
    public static func GetHostAddressesAsync(hostNameOrAddress : dotnet.System.String, family : dotnet.System.Net.Sockets.AddressFamily, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<dotnet.System.Net.IPAddress>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPAddressArray___GetHostAddressesAsync_0__3__String_AddressFamily_CancellationToken(&__thrown, hostNameOrAddress.get_handle(), family.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Dns.GetHostAddressesAsync(System.String,System.Threading.CancellationToken)
    public static func GetHostAddressesAsync(hostNameOrAddress : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<dotnet.System.Net.IPAddress>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPAddressArray___GetHostAddressesAsync_0__2__String_CancellationToken(&__thrown, hostNameOrAddress.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Net.IPHostEntry GetHostByAddress(System.Net.IPAddress)
// docid: M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)
    /**
    Creates an  instance from the specified .

    - Parameter address: An .
    - Returns: An  instance.

    */
    public static func GetHostByAddress(address : dotnet.System.Net.IPAddress) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__GetHostByAddress_0__1__IPAddress(&__thrown, address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry GetHostByAddress(System.String)
// docid: M:System.Net.Dns.GetHostByAddress(System.String)
    /**
    Creates an  instance from an IP address.

    - Parameter address: An IP address.
    - Returns: An  instance.

    */
    public static func GetHostByAddress(address : dotnet.System.String) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__GetHostByAddress_0__1__String(&__thrown, address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry GetHostByName(System.String)
// docid: M:System.Net.Dns.GetHostByName(System.String)
    /**
    Gets the DNS information for the specified DNS host name.

    - Parameter hostName: The DNS name of the host.
    - Returns: An  object that contains host information for the address specified in .

    */
    public static func GetHostByName(hostName : dotnet.System.String) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__GetHostByName_0__1__String(&__thrown, hostName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry GetHostEntry(System.Net.IPAddress)
// docid: M:System.Net.Dns.GetHostEntry(System.Net.IPAddress)
    /**
    Resolves an IP address to an  instance.

    - Parameter address: An IP address.
    - Returns: An  instance that contains address information about the host specified in .

    */
    public static func GetHostEntry(address : dotnet.System.Net.IPAddress) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__GetHostEntry_0__1__IPAddress(&__thrown, address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry GetHostEntry(System.String)
// docid: M:System.Net.Dns.GetHostEntry(System.String)
    /**
    Resolves a host name or IP address to an  instance.

    - Parameter hostNameOrAddress: The host name or IP address to resolve.
    - Returns: An  instance that contains address information about the host specified in .

    */
    public static func GetHostEntry(hostNameOrAddress : dotnet.System.String) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__GetHostEntry_0__1__String(&__thrown, hostNameOrAddress.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Net.IPHostEntry GetHostEntry(System.String, System.Net.Sockets.AddressFamily)
// docid: M:System.Net.Dns.GetHostEntry(System.String,System.Net.Sockets.AddressFamily)
    public static func GetHostEntry(hostNameOrAddress : dotnet.System.String, family : dotnet.System.Net.Sockets.AddressFamily) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__GetHostEntry_0__2__String_AddressFamily(&__thrown, hostNameOrAddress.get_handle(), family.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync(System.Net.IPAddress)
// docid: M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
    /**
    Resolves an IP address to an  instance as an asynchronous operation.

    - Parameter address: An IP address.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns an  instance that contains address information about the host specified in .

    */
    public static func GetHostEntryAsync(address : dotnet.System.Net.IPAddress) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.IPHostEntry> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPHostEntry___GetHostEntryAsync_0__1__IPAddress(&__thrown, address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync(System.String)
// docid: M:System.Net.Dns.GetHostEntryAsync(System.String)
    /**
    Resolves a host name or IP address to an  instance as an asynchronous operation.

    - Parameter hostNameOrAddress: The host name or IP address to resolve.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns an  instance that contains address information about the host specified in .

    */
    public static func GetHostEntryAsync(hostNameOrAddress : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.IPHostEntry> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPHostEntry___GetHostEntryAsync_0__1__String(&__thrown, hostNameOrAddress.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync(System.String, System.Net.Sockets.AddressFamily, System.Threading.CancellationToken)
// docid: M:System.Net.Dns.GetHostEntryAsync(System.String,System.Net.Sockets.AddressFamily,System.Threading.CancellationToken)
    public static func GetHostEntryAsync(hostNameOrAddress : dotnet.System.String, family : dotnet.System.Net.Sockets.AddressFamily, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.IPHostEntry> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPHostEntry___GetHostEntryAsync_0__3__String_AddressFamily_CancellationToken(&__thrown, hostNameOrAddress.get_handle(), family.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Dns.GetHostEntryAsync(System.String,System.Threading.CancellationToken)
    public static func GetHostEntryAsync(hostNameOrAddress : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.IPHostEntry> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_System_Threading_Tasks_Task_System_Net_IPHostEntry___GetHostEntryAsync_0__2__String_CancellationToken(&__thrown, hostNameOrAddress.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String GetHostName()
// docid: M:System.Net.Dns.GetHostName
    /**
    Gets the host name of the local computer.

    - Returns: A string that contains the DNS host name of the local computer.

    */
    public static func GetHostName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_String__GetHostName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Net.IPHostEntry Resolve(System.String)
// docid: M:System.Net.Dns.Resolve(System.String)
    /**
    Resolves a DNS host name or IP address to an  instance.

    - Parameter hostName: A DNS-style host name or IP address.
    - Returns: An  instance that contains address information about the host specified in .

    */
    public static func Resolve(hostName : dotnet.System.String) throws -> dotnet.System.Net.IPHostEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Dns_IPHostEntry__Resolve_0__1__String(&__thrown, hostName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPHostEntry(hndl : __return);
        }
    }
} // Dns


// type: System.Net.IPHostEntry
    /**
    Provides a container class for Internet host address information.

    */
open class IPHostEntry
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_IPHostEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.IPHostEntry.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_IPHostEntry_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Net.IPAddress[] get_AddressList()
// docid: M:System.Net.IPHostEntry.get_AddressList
    open func get_AddressList() throws -> dotnet.System_Arr<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IPHostEntry_IPAddressArray__get_AddressList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.IPAddress>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AddressList(System.Net.IPAddress[])
// docid: M:System.Net.IPHostEntry.set_AddressList(System.Net.IPAddress[])
    open func set_AddressList(value : dotnet.System_Arr<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_IPHostEntry_void__set_AddressList_0__1__IPAddressArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_Aliases()
// docid: M:System.Net.IPHostEntry.get_Aliases
    open func get_Aliases() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IPHostEntry_StringArray__get_Aliases_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Aliases(System.String[])
// docid: M:System.Net.IPHostEntry.set_Aliases(System.String[])
    open func set_Aliases(value : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_IPHostEntry_void__set_Aliases_0__1__StringArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HostName()
// docid: M:System.Net.IPHostEntry.get_HostName
    open func get_HostName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IPHostEntry_String__get_HostName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HostName(System.String)
// docid: M:System.Net.IPHostEntry.set_HostName(System.String)
    open func set_HostName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_IPHostEntry_void__set_HostName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a list of IP addresses that are associated with a host.

    */
    open var AddressList : dotnet.System_Arr<dotnet.System.Net.IPAddress> {
        get {
            return try! get_AddressList();
        }
        set(v) {
            return try! set_AddressList(value: v);
        }
    }
    /**
    Gets or sets a list of aliases that are associated with a host.

    */
    open var Aliases : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_Aliases();
        }
        set(v) {
            return try! set_Aliases(value: v);
        }
    }
    /**
    Gets or sets the DNS name of the host.

    */
    open var HostName : dotnet.System.String {
        get {
            return try! get_HostName();
        }
        set(v) {
            return try! set_HostName(value: v);
        }
    }
} // IPHostEntry


}


