// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

public final class System_Arr<T : SGBridgeGenericValue> : SGBridgeGenericValue, ExpressibleByArrayLiteral {
    public static func get_type_handle() -> TypeHandle {
        return System_Array_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public func get_item(_ _index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Arr_get_item(&__thrown, T.get_type_handle(), self.get_handle(), _index);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }

    public var Length : Swift.Int32 {
        get {
            var __thrown : NullableHandle = nil;
            let __return = System_Array_i32__get_Length_0__0(&__thrown, self.get_handle());
            if __thrown != nil {
                return -1;
            } else {
                return __return;
            }
        }
    }

    public convenience init(arrayLiteral elements: T...) {
        var __thrown : NullableHandle = nil;
        let n = elements.count;
        let __return = System_Arr_create(&__thrown, T.get_type_handle(), Swift.Int32(n));
        // TODO check thrown
        var i : Swift.Int32 = 0;
        for v in elements {
            System_Arr_set_item(&__thrown, T.get_type_handle(), __return, i, v.to_gval()); // TODO need dup_gval here?
            // TODO check thrown
            i = i + 1;
        }
        self.init(hndl: __return);
    }

    public func set_item(_index : Swift.Int32, v : T) throws {
        var __thrown : NullableHandle = nil;
        System_Arr_set_item(&__thrown, T.get_type_handle(), self.get_handle(), _index, v.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }

    public convenience init(n: Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let __return = System_Arr_create(&__thrown, T.get_type_handle(), n);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: __return);
        }
    }

}

