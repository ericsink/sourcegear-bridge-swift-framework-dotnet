// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Linq
extension System.Linq {
// type: System.Linq.OrderedParallelQuery`1
    /**
    Represents a sorted, parallel sequence.

    */
open class OrderedParallelQuery_1<TSource : SGBridgeGenericValue>
    :
    dotnet.System.Linq.ParallelQuery_1<TSource>
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_OrderedParallelQuery_1_get_type_handle(TSource.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerator<TSource> GetEnumerator()
// docid: M:System.Linq.OrderedParallelQuery`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the sequence.

    - Returns: An enumerator that iterates through the sequence.

    */
    open override func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<TSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_OrderedParallelQuery_1_System_Collections_Generic_IEnumerator_TSource___GetEnumerator_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // OrderedParallelQuery_1


// type: System.Linq.ParallelEnumerable
public struct ParallelEnumerable {
    // TSource Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TSource,TSource>)
// docid: M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
    /**
    Applies in parallel an accumulator function over a sequence.

    - Parameter source: A sequence to aggregate over.
    - Parameter func: An accumulator function to be invoked on each element.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, func_ : dotnet.System.Func_3<UTSource,UTSource,UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Aggregate_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTSource_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, func_ : @escaping (UTSource, UTSource) throws -> UTSource) throws -> UTSource {
        let del_func_ = try dotnet.System.Func_3<UTSource,UTSource,UTSource>(func_);
        return try Aggregate(source: source, func_: del_func_);
    }
    // TAccumulate Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>)
// docid: M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
    /**
    Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.

    - Parameter source: A sequence to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter func: An accumulator function to be invoked on each element.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>) throws -> UTAccumulate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTAccumulate__Aggregate_2__3__System_Linq_ParallelQuery_UTSource__UTAccumulate_System_Func_UTAccumulate_UTSource_UTAccumulate_(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTAccumulate(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seed : UTAccumulate, func_ : @escaping (UTAccumulate, UTSource) throws -> UTAccumulate) throws -> UTAccumulate {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>(func_);
        return try Aggregate(source: source, seed: seed, func_: del_func_);
    }
    // TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TAccumulate,TAccumulate>, System.Func<TAccumulate,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
    /**
    Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.

    - Parameter source: A sequence to aggregate over.
    - Parameter seedFactory: A function that returns the initial accumulator value.
    - Parameter updateAccumulatorFunc: An accumulator function to be invoked on each element in a partition.
    - Parameter combineAccumulatorsFunc: An accumulator function to be invoked on the yielded accumulator result from each partition.
    - Parameter resultSelector: A function to transform the final accumulator value into the result value.
    - Returns: The transformed final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seedFactory : dotnet.System.Func_1<UTAccumulate>, updateAccumulatorFunc : dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>, combineAccumulatorsFunc : dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTResult__Aggregate_3__5__System_Linq_ParallelQuery_UTSource__System_Func_UTAccumulate__System_Func_UTAccumulate_UTSource_UTAccumulate__System_Func_UTAccumulate_UTAccumulate_UTAccumulate__System_Func_UTAccumulate_UTResult_(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), seedFactory.get_handle(), updateAccumulatorFunc.get_handle(), combineAccumulatorsFunc.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seedFactory : @escaping () throws -> UTAccumulate, updateAccumulatorFunc : @escaping (UTAccumulate, UTSource) throws -> UTAccumulate, combineAccumulatorsFunc : @escaping (UTAccumulate, UTAccumulate) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_seedFactory = try dotnet.System.Func_1<UTAccumulate>(seedFactory);
        let del_updateAccumulatorFunc = try dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>(updateAccumulatorFunc);
        let del_combineAccumulatorsFunc = try dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>(combineAccumulatorsFunc);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try Aggregate(source: source, seedFactory: del_seedFactory, updateAccumulatorFunc: del_updateAccumulatorFunc, combineAccumulatorsFunc: del_combineAccumulatorsFunc, resultSelector: del_resultSelector);
    }
    // TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TAccumulate,TAccumulate>, System.Func<TAccumulate,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
    /**
    Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.

    - Parameter source: A sequence to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter updateAccumulatorFunc: An accumulator function to be invoked on each element in a partition.
    - Parameter combineAccumulatorsFunc: An accumulator function to be invoked on the yielded accumulator result from each partition.
    - Parameter resultSelector: A function to transform the final accumulator value into the result value.
    - Returns: The transformed final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seed : UTAccumulate, updateAccumulatorFunc : dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>, combineAccumulatorsFunc : dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTResult__Aggregate_3__5__System_Linq_ParallelQuery_UTSource__UTAccumulate_System_Func_UTAccumulate_UTSource_UTAccumulate__System_Func_UTAccumulate_UTAccumulate_UTAccumulate__System_Func_UTAccumulate_UTResult_(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), updateAccumulatorFunc.get_handle(), combineAccumulatorsFunc.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seed : UTAccumulate, updateAccumulatorFunc : @escaping (UTAccumulate, UTSource) throws -> UTAccumulate, combineAccumulatorsFunc : @escaping (UTAccumulate, UTAccumulate) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_updateAccumulatorFunc = try dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>(updateAccumulatorFunc);
        let del_combineAccumulatorsFunc = try dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>(combineAccumulatorsFunc);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try Aggregate(source: source, seed: seed, updateAccumulatorFunc: del_updateAccumulatorFunc, combineAccumulatorsFunc: del_combineAccumulatorsFunc, resultSelector: del_resultSelector);
    }
    // TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
    /**
    Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.

    - Parameter source: A sequence to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter func: An accumulator function to be invoked on each element.
    - Parameter resultSelector: A function to transform the final accumulator value into the result value.
    - Returns: The transformed final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTResult__Aggregate_3__4__System_Linq_ParallelQuery_UTSource__UTAccumulate_System_Func_UTAccumulate_UTSource_UTAccumulate__System_Func_UTAccumulate_UTResult_(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), func_.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, seed : UTAccumulate, func_ : @escaping (UTAccumulate, UTSource) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>(func_);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try Aggregate(source: source, seed: seed, func_: del_func_, resultSelector: del_resultSelector);
    }
    // bool All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Determines in parallel whether all elements of a sequence satisfy a condition.

    - Parameter source: A sequence whose elements to apply the predicate to.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
         if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, .

    */
    public static func All<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__All_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func All<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try All(source: source, predicate: del_predicate);
    }
    // bool Any<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
    /**
    Determines whether a parallel sequence contains any elements.

    - Parameter source: The sequence to check for emptiness.
    - Returns: 
         if the source sequence contains any elements; otherwise, .

    */
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__Any_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Determines in parallel whether any element of a sequence satisfies a condition.

    - Parameter source: A sequence to whose elements the predicate will be applied.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
         if any elements in the source sequence pass the test in the specified predicate; otherwise, .

    */
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__Any_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Any_(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
    /**
    Converts a  into an  to force sequential evaluation of the query.

    - Parameter source: The sequence to cast as .
    - Returns: The input sequence typed as .

    */
    public static func AsEnumerable<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_IEnumerable_UTSource___AsEnumerable_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery AsOrdered(System.Linq.ParallelQuery)
// docid: M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
    /**
    Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on non-generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.

    - Parameter source: The input sequence.
    - Returns: The source sequence which will maintain the original ordering in the subsequent query operators.

    */
    public static func AsOrdered(source : dotnet.System.Linq.ParallelQuery) throws -> dotnet.System.Linq.ParallelQuery {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_ParallelQuery__AsOrdered_0__1__ParallelQuery(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
    /**
    Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.

    - Parameter source: The input sequence.
    - Returns: The source sequence which will maintain the original ordering in the subsequent query operators.

    */
    public static func AsOrdered<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___AsOrdered_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery AsParallel(System.Collections.IEnumerable)
// docid: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    /**
    Enables parallelization of a query.

    - Parameter source: An  to convert to a .
    - Returns: The source as a ParallelQuery to bind to ParallelEnumerable extension methods.

    */
    public static func AsParallel(source : dotnet.System.Collections.IEnumerable) throws -> dotnet.System.Linq.ParallelQuery {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_ParallelQuery__AsParallel_0__1__IEnumerable(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)
// docid: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
    /**
    Enables parallelization of a query, as sourced by a custom partitioner that is responsible for splitting the input sequence into partitions.

    - Parameter source: A partitioner over the input sequence.
    - Returns: The  as a ParallelQuery to bind to ParallelEnumerable extension methods.

    */
    public static func AsParallel<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___AsParallel_1__1__System_Collections_Concurrent_Partitioner_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Enables parallelization of a query.

    - Parameter source: An  to convert to a .
    - Returns: The source as a  to bind to ParallelEnumerable extension methods.

    */
    public static func AsParallel<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___AsParallel_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
    /**
    Converts a  into an  to force sequential evaluation of the query.

    - Parameter source: A  to convert to an .
    - Returns: The source as an  to bind to sequential extension methods.

    */
    public static func AsSequential<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_IEnumerable_UTSource___AsSequential_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
    /**
    Allows an intermediate query to be treated as if no ordering is implied among the elements.

    - Parameter source: The input sequence.
    - Returns: The source sequence with arbitrary order.

    */
    public static func AsUnordered<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___AsUnordered_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Decimal Average(System.Linq.ParallelQuery<System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
    /**
    Computes in parallel the average of a sequence of values.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.ParallelQuery_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Average_0__1__System_Linq_ParallelQuery_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Average(System.Linq.ParallelQuery<System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
    /**
    Computes in parallel the average of a sequence of values.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.ParallelQuery_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Average_0__1__System_Linq_ParallelQuery_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average(System.Linq.ParallelQuery<System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
    /**
    Computes in parallel the average of a sequence of values.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int32>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Average_0__1__System_Linq_ParallelQuery_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average(System.Linq.ParallelQuery<System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
    /**
    Computes in parallel the average of a sequence of values.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int64>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Average_0__1__System_Linq_ParallelQuery_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Average(System.Linq.ParallelQuery<System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
    /**
    Computes in parallel the average of a sequence of values.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.ParallelQuery_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Average_0__1__System_Linq_ParallelQuery_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
    /**
    Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Average_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Double Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
    /**
    Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Average_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Double Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
    /**
    Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Average_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Double Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
    /**
    Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Average_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Single Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
    /**
    Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Average_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Average(source: source, selector: del_selector);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.ParallelQuery<TResult> Cast<TResult>(System.Linq.ParallelQuery)
    // System.Linq.ParallelQuery<TSource> Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    This Concat overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Concat<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Concat_1__2__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
    /**
    Concatenates two parallel sequences.

    - Parameter first: The first sequence to concatenate.
    - Parameter second: The sequence to concatenate to the first sequence.
    - Returns: A sequence that contains the concatenated elements of the two input sequences.

    */
    public static func Concat<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Concat_1__2__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // bool Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
// docid: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
    /**
    Determines in parallel whether a sequence contains a specified element by using the default equality comparer.

    - Parameter source: A sequence in which to locate a value.
    - Parameter value: The value to locate in the sequence.
    - Returns: 
         if the source sequence contains an element that has the specified value; otherwise, .

    */
    public static func Contains<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, value : UTSource) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__Contains_1__2__System_Linq_ParallelQuery_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    /**
    Determines in parallel whether a sequence contains a specified element by using a specified .

    - Parameter source: A sequence in which to locate a value.
    - Parameter value: The value to locate in the sequence.
    - Parameter comparer: An equality comparer to compare values.
    - Returns: 
         if the source sequence contains an element that has the specified value; otherwise, .

    */
    public static func Contains<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, value : UTSource, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__Contains_1__3__System_Linq_ParallelQuery_UTSource__UTSource_System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), value.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 Count<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the number of elements in a parallel sequence.

    - Parameter source: A sequence that contains elements to be counted.
    - Returns: The number of elements in the input sequence.

    */
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Count_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.

    - Parameter source: A sequence that contains elements to be counted.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.

    */
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Count_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Swift.Int32 {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Count(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.

    - Parameter source: The sequence to return a default value for if it is empty.
    - Returns: A sequence that contains default(TSource) if  is empty; otherwise, .

    */
    public static func DefaultIfEmpty<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___DefaultIfEmpty_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
// docid: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
    /**
    Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.

    - Parameter source: The sequence to return the specified value for if it is empty.
    - Parameter defaultValue: The value to return if the sequence is empty.
    - Returns: A sequence that contains defaultValue if  is empty; otherwise, .

    */
    public static func DefaultIfEmpty<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, defaultValue : UTSource) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___DefaultIfEmpty_1__2__System_Linq_ParallelQuery_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Distinct<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
    /**
    Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.

    - Parameter source: The sequence to remove duplicate elements from.
    - Returns: A sequence that contains distinct elements from the source sequence.

    */
    public static func Distinct<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Distinct_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Returns distinct elements from a parallel sequence by using a specified  to compare values.

    - Parameter source: The sequence to remove duplicate elements from.
    - Parameter comparer: An  to compare values.
    - Returns: A sequence that contains distinct elements from the source sequence.

    */
    public static func Distinct<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Distinct_1__2__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // TSource ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
    /**
    Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.

    - Parameter source: A sequence to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.

    */
    public static func ElementAtOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, index : Swift.Int32) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__ElementAtOrDefault_1__2__System_Linq_ParallelQuery_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
    /**
    Returns the element at a specified index in a parallel sequence.

    - Parameter source: A sequence to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: The element at the specified position in the source sequence.

    */
    public static func ElementAt<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, index : Swift.Int32) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__ElementAt_1__2__System_Linq_ParallelQuery_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.ParallelQuery<TResult> Empty<TResult>()
    // System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    This Except overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Except<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Except_1__2__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    This Except overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Parameter comparer: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Except<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Except_1__3__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
    /**
    Produces the set difference of two parallel sequences by using the default equality comparer to compare values.

    - Parameter first: A sequence whose elements that are not also in  will be returned.
    - Parameter second: A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - Returns: A sequence that contains the set difference of the elements of two sequences.

    */
    public static func Except<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Except_1__2__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set difference of two parallel sequences by using the specified  to compare values.

    - Parameter first: A sequence whose elements that are not also in  will be returned.
    - Parameter second: A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - Parameter comparer: 
         to compare values.
    - Returns: A sequence that contains the set difference of the elements of two sequences.

    */
    public static func Except<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Except_1__3__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.

    - Parameter source: The sequence to return the first element of.
    - Returns: default(TSource) if  is empty; otherwise, the first element in .

    */
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__FirstOrDefault_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.

    - Parameter source: The sequence to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: default(TSource) if  is empty or if no element passes the test specified by predicate; otherwise, the first element in  that passes the test specified by predicate.

    */
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__FirstOrDefault_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try FirstOrDefault(source: source, predicate: del_predicate);
    }
    // TSource First<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the first element of a parallel sequence.

    - Parameter source: The sequence to return the first element of.
    - Returns: The first element in the specified sequence.

    */
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__First_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns the first element in a parallel sequence that satisfies a specified condition.

    - Parameter source: The sequence to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The first element in the sequence that passes the test in the specified predicate function.

    */
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__First_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try First(source: source, predicate: del_predicate);
    }
    // void ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)
// docid: M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
    /**
    Invokes in parallel the specified action for each element in the .

    - Parameter source: The  whose elements will be processed by .
    - Parameter action: An Action to invoke on each element.
    */
    public static func ForAll<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, action : dotnet.System.Action_1<UTSource>) throws {
        var __thrown : NullableHandle = nil;
        System_Linq_ParallelEnumerable_void__ForAll_1__2__System_Linq_ParallelQuery_UTSource__System_Action_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func ForAll<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, action : @escaping (UTSource) throws -> Void) throws {
        let del_action = try dotnet.System.Action_1<UTSource>(action);
        return try ForAll(source: source, action: del_action);
    }
    // System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Groups in parallel the elements of a sequence according to a specified key selector function.

    - Parameter source: An OrderedParallelQuery{TSource}that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: A sequence of groups that are sorted descending according to .

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_System_Linq_System_Linq_IGrouping_UTKey_UTSource____GroupBy_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try GroupBy(source: source, keySelector: del_keySelector);
    }
    // System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified .

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: A sequence of groups that are sorted descending according to .

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_System_Linq_System_Linq_IGrouping_UTKey_UTSource____GroupBy_2__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try GroupBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Returns: A sequence of groups that are sorted descending according to .

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_System_Linq_System_Linq_IGrouping_UTKey_UTElement____GroupBy_3__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups in parallel the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.

    - Parameter source: An OrderedParallelQuery{TSource}that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter elementSelector: A function to map each source element to an element in an IGrouping.
    - Parameter comparer: An IComparer{TSource} to compare keys.
    - Returns: A sequence of groups that are sorted descending according to .

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_System_Linq_System_Linq_IGrouping_UTKey_UTElement____GroupBy_3__4__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    /**
    Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.

    - Parameter source: A sequence whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter resultSelector: A function to create a result value from each group.
    - Returns: A sequence of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupBy_3__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTSource__UTResult_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.

    - Parameter source: A sequence whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter resultSelector: A function to create a result value from each group.
    - Parameter comparer: An  to compare keys.
    - Returns: A sequence of groups.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupBy_3__4__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTSource__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
    /**
    Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.

    - Parameter source: A sequence whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an IGrouping<TKey, TElement>.
    - Parameter resultSelector: A function to create a result value from each group.
    - Returns: A sequence of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupBy_4__4__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTResult_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.

    - Parameter source: A sequence whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an IGrouping{Key, TElement}.
    - Parameter resultSelector: A function to create a result value from each group.
    - Parameter comparer: An  to compare keys.
    - Returns: A sequence of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupBy_4__5__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>)
// docid: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    /**
    This GroupJoin overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter outer: This parameter is not used.
    - Parameter inner: This parameter is not used.
    - Parameter outerKeySelector: This parameter is not used.
    - Parameter innerKeySelector: This parameter is not used.
    - Parameter resultSelector: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupJoin_4__5__System_Linq_ParallelQuery_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try GroupJoin(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    /**
    This GroupJoin overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter outer: This parameter is not used.
    - Parameter inner: This parameter is not used.
    - Parameter outerKeySelector: This parameter is not used.
    - Parameter innerKeySelector: This parameter is not used.
    - Parameter resultSelector: This parameter is not used.
    - Parameter comparer: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupJoin_4__6__System_Linq_ParallelQuery_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try GroupJoin(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>)
// docid: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    /**
    Correlates in parallel the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Returns: A sequence that has elements of type  that are obtained by performing a grouped join on two sequences.

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupJoin_4__5__System_Linq_ParallelQuery_UTOuter__System_Linq_ParallelQuery_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try GroupJoin(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Correlates in parallel the elements of two sequences based on key equality and groups the results. A specified  is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Parameter comparer: An  to hash and compare keys.
    - Returns: A sequence that has elements of type  that are obtained by performing a grouped join on two sequences.

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___GroupJoin_4__6__System_Linq_ParallelQuery_UTOuter__System_Linq_ParallelQuery_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try GroupJoin(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    This Intersect overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Intersect_1__2__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    This Intersect overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Parameter comparer: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Intersect_1__3__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
    /**
    Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.

    - Parameter first: A sequence whose distinct elements that also appear in  will be returned.
    - Parameter second: A sequence whose distinct elements that also appear in the first sequence will be returned.
    - Returns: A sequence that contains the elements that form the set intersection of two sequences.

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Intersect_1__2__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.

    - Parameter first: A sequence whose distinct elements that also appear in  will be returned.
    - Parameter second: A sequence whose distinct elements that also appear in the first sequence will be returned.
    - Parameter comparer: An  to compare values.
    - Returns: A sequence that contains the elements that form the set intersection of two sequences.

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Intersect_1__3__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    /**
    This Join overload should never be called. This method is marked as obsolete and always throws  when invoked.

    - Parameter outer: This parameter is not used.
    - Parameter inner: This parameter is not used.
    - Parameter outerKeySelector: This parameter is not used.
    - Parameter innerKeySelector: This parameter is not used.
    - Parameter resultSelector: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,UTInner,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Join_4__5__System_Linq_ParallelQuery_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_UTInner_UTResult_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, UTInner) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,UTInner,UTResult>(resultSelector);
        return try Join(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    /**
    This Join overload should never be called. This method is marked as obsolete and always throws  when invoked.

    - Parameter outer: This parameter is not used.
    - Parameter inner: This parameter is not used.
    - Parameter outerKeySelector: This parameter is not used.
    - Parameter innerKeySelector: This parameter is not used.
    - Parameter resultSelector: This parameter is not used.
    - Parameter comparer: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,UTInner,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Join_4__6__System_Linq_ParallelQuery_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_UTInner_UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, UTInner) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,UTInner,UTResult>(resultSelector);
        return try Join(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    /**
    Correlates in parallel the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Returns: A sequence that has elements of type  that are obtained by performing an inner join on two sequences.

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,UTInner,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Join_4__5__System_Linq_ParallelQuery_UTOuter__System_Linq_ParallelQuery_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_UTInner_UTResult_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, UTInner) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,UTInner,UTResult>(resultSelector);
        return try Join(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Correlates in parallel the elements of two sequences based on matching keys. A specified  is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Parameter comparer: An  to hash and compare keys.
    - Returns: A sequence that has elements of type  that are obtained by performing an inner join on two sequences.

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,UTInner,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Join_4__6__System_Linq_ParallelQuery_UTOuter__System_Linq_ParallelQuery_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_UTInner_UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.ParallelQuery_1<UTOuter>, inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, UTInner) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,UTInner,UTResult>(resultSelector);
        return try Join(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // TSource LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.

    - Parameter source: The sequence to return an element from.
    - Returns: default() if the source sequence is empty; otherwise, the last element in the sequence.

    */
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__LastOrDefault_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.

    - Parameter source: The sequence to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.

    */
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__LastOrDefault_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try LastOrDefault(source: source, predicate: del_predicate);
    }
    // TSource Last<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the last element of a parallel sequence.

    - Parameter source: The sequence to return the last element from.
    - Returns: The value at the last position in the source sequence.

    */
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Last_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns the last element of a parallel sequence that satisfies a specified condition.

    - Parameter source: The sequence to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The last element in the sequence that passes the test in the specified predicate function.

    */
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Last_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Last(source: source, predicate: del_predicate);
    }
    // System.Int64 LongCount<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
    /**
    Returns an Int64 that represents the total number of elements in a parallel sequence.

    - Parameter source: A sequence that contains elements to be counted.
    - Returns: The number of elements in the input sequence.

    */
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__LongCount_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.

    - Parameter source: A sequence that contains elements to be counted.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.

    */
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__LongCount_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Swift.Int64 {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try LongCount(source: source, predicate: del_predicate);
    }
    // System.Decimal Max(System.Linq.ParallelQuery<System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
    /**
    Returns the maximum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Linq.ParallelQuery_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Max_0__1__System_Linq_ParallelQuery_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Max(System.Linq.ParallelQuery<System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
    /**
    Returns the maximum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Linq.ParallelQuery_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Max_0__1__System_Linq_ParallelQuery_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Max(System.Linq.ParallelQuery<System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
    /**
    Returns the maximum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Max_0__1__System_Linq_ParallelQuery_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Max(System.Linq.ParallelQuery<System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
    /**
    Returns the maximum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__Max_0__1__System_Linq_ParallelQuery_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Max(System.Linq.ParallelQuery<System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
    /**
    Returns the maximum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Linq.ParallelQuery_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Max_0__1__System_Linq_ParallelQuery_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // TSource Max<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the maximum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Max_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Decimal Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the maximum value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Max_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Double Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the maximum value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Max_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Int32 Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the maximum value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Max_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Int64 Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the maximum value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__Max_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Single Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the maximum value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Max_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // TResult Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the maximum value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTResult__Max_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Decimal Min(System.Linq.ParallelQuery<System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
    /**
    Returns the minimum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Linq.ParallelQuery_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Min_0__1__System_Linq_ParallelQuery_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Min(System.Linq.ParallelQuery<System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
    /**
    Returns the minimum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Linq.ParallelQuery_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Min_0__1__System_Linq_ParallelQuery_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Min(System.Linq.ParallelQuery<System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
    /**
    Returns the minimum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Min_0__1__System_Linq_ParallelQuery_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Min(System.Linq.ParallelQuery<System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
    /**
    Returns the minimum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__Min_0__1__System_Linq_ParallelQuery_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Min(System.Linq.ParallelQuery<System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
    /**
    Returns the minimum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Linq.ParallelQuery_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Min_0__1__System_Linq_ParallelQuery_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // TSource Min<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the minimum value in a parallel sequence of values.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Min_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Decimal Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the minimum value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Min_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Double Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the minimum value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Min_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Int32 Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the minimum value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Min_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Int64 Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the minimum value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__Min_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Single Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the minimum value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Min_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // TResult Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Invokes in parallel a transform function on each element of a sequence and returns the minimum value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTResult__Min_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try Min(source: source, selector: del_selector);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.ParallelQuery<TResult> OfType<TResult>(System.Linq.ParallelQuery)
    // System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Sorts in parallel the elements of a sequence in descending order according to a key.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.

    */
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___OrderByDescending_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the elements of a sequence in descending order by using a specified comparer.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An IComparer{TKey} to compare keys.
    - Returns: An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.

    */
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___OrderByDescending_2__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Sorts in parallel the elements of a sequence in ascending order according to a key.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An OrderedParallelQuery{TSource} whose elements are sorted according to a key.

    */
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___OrderBy_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector);
    }
    // System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An IComparer{TKey} to compare keys.
    - Returns: An OrderedParallelQuery{TSource} whose elements are sorted according to a key.

    */
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___OrderBy_2__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<System.Int32> Range(System.Int32, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
    /**
    Generates a parallel sequence of integral numbers within a specified range.

    - Parameter start: The value of the first integer in the sequence.
    - Parameter count: The number of sequential integers to generate.
    - Returns: An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.

    */
    public static func Range(start : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_i32___Range_0__2__i32_i32(&__thrown, start, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TResult> Repeat<TResult>(TResult, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
    /**
    Generates a parallel sequence that contains one repeated value.

    - Parameter element: The value to be repeated.
    - Parameter count: The number of times to repeat the value in the generated sequence.
    - Returns: A sequence that contains a repeated value.

    */
    public static func Repeat<UTResult : SGBridgeGenericValue>(element : UTResult, count : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Repeat_1__2__UTResult_i32(UTResult.get_type_handle(), &__thrown, element.to_gval(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Reverse<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
    /**
    Inverts the order of the elements in a parallel sequence.

    - Parameter source: A sequence of values to reverse.
    - Returns: A sequence whose elements correspond to those of the input sequence in reverse order.

    */
    public static func Reverse<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Reverse_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TResult> SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>)
// docid: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    /**
    Projects in parallel each element of a sequence to an  and flattens the resulting sequences into one sequence.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A transform function to apply to each element.
    - Returns: A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___SelectMany_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try SelectMany(source: source, selector: del_selector);
    }
    // System.Linq.ParallelQuery<TResult> SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>)
// docid: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
    /**
    Projects in parallel each element of a sequence to an , and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A transform function to apply to each element.
    - Returns: A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___SelectMany_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try SelectMany(source: source, selector: del_selector);
    }
    // System.Linq.ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
// docid: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    /**
    Projects each element of a sequence to an , flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.

    - Parameter source: A sequence of values to project.
    - Parameter collectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Returns: A sequence whose elements are the result of invoking the one-to-many transform function  on each element of  based on the index supplied to , and then mapping each of those sequence elements and their corresponding source element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, collectionSelector : dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<UTSource,UTCollection,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___SelectMany_3__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection___System_Func_UTSource_UTCollection_UTResult_(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, collectionSelector : @escaping (UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (UTSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTSource,UTCollection,UTResult>(resultSelector);
        return try SelectMany(source: source, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
// docid: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    /**
    Projects each element of a sequence to an , flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.

    - Parameter source: A sequence of values to project.
    - Parameter collectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Returns: A sequence whose elements are the result of invoking the one-to-many transform function  on each element of  based on the index supplied to , and then mapping each of those sequence elements and their corresponding source element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, collectionSelector : dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<UTSource,UTCollection,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___SelectMany_3__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection___System_Func_UTSource_UTCollection_UTResult_(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, collectionSelector : @escaping (UTSource, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (UTSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTSource,UTCollection,UTResult>(resultSelector);
        return try SelectMany(source: source, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
    /**
    Projects in parallel each element of a sequence into a new form by incorporating the element's index.

    - Parameter source: A sequence of values to invoke a transform function on.
    - Parameter selector: A transform function to apply to each element.
    - Returns: A sequence whose elements are the result of invoking the transform function on each element of , based on the index supplied to .

    */
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_3<UTSource,Swift.Int32,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Select_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource, Swift.Int32) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<UTSource,Swift.Int32,UTResult>(selector);
        return try Select(source: source, selector: del_selector);
    }
    // System.Linq.ParallelQuery<TResult> Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Projects in parallel each element of a sequence into a new form.

    - Parameter source: A sequence of values to invoke a transform function on.
    - Parameter selector: A transform function to apply to each element.
    - Returns: A sequence whose elements are the result of invoking the transform function on each element of .

    */
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Select_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try Select(source: source, selector: del_selector);
    }
    // bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    This SequenceEqual overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__SequenceEqual_1__2__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    This SequenceEqual overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Parameter comparer: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__SequenceEqual_1__3__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
    /**
    Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.

    - Parameter first: A sequence to compare to second.
    - Parameter second: A sequence to compare to the first input sequence.
    - Returns: 
         if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__SequenceEqual_1__2__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.

    - Parameter first: A sequence to compare to .
    - Parameter second: A sequence to compare to the first input sequence.
    - Parameter comparer: An  to use to compare elements.
    - Returns: 
         if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_bool__SequenceEqual_1__3__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // TSource SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.

    - Parameter source: The sequence to return the single element of.
    - Returns: The single element of the input sequence, or default() if the sequence contains no elements.

    */
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__SingleOrDefault_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.

    - Parameter source: The sequence to return the single element of.
    - Parameter predicate: A function to test an element for a condition.
    - Returns: The single element of the input sequence that satisfies the condition, or default() if no such element is found.

    */
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__SingleOrDefault_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try SingleOrDefault(source: source, predicate: del_predicate);
    }
    // TSource Single<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
    /**
    Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.

    - Parameter source: The sequence to return the single element of.
    - Returns: The single element of the input sequence.

    */
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Single_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.

    - Parameter source: The sequence to return the single element of.
    - Parameter predicate: A function to test an element for a condition.
    - Returns: The single element of the input sequence that satisfies a condition.

    */
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSource__Single_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Single(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.

    */
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___SkipWhile_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try SkipWhile(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,bool>)
// docid: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
    /**
    Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    - Returns: A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.

    */
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_3<UTSource,Swift.Int32,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___SkipWhile_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        let del_predicate = try dotnet.System.Func_3<UTSource,Swift.Int32,Swift.Bool>(predicate);
        return try SkipWhile(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> Skip<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
    /**
    Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.

    - Parameter source: The sequence to return elements from.
    - Parameter count: The number of elements to skip before returning the remaining elements.
    - Returns: A sequence that contains the elements that occur after the specified index in the input sequence.

    */
    public static func Skip<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Skip_1__2__System_Linq_ParallelQuery_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Decimal Sum(System.Linq.ParallelQuery<System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
    /**
    Computes in parallel the sum of a sequence of values.

    - Parameter source: A sequence of values to calculate the sum of.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.ParallelQuery_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Sum_0__1__System_Linq_ParallelQuery_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Sum(System.Linq.ParallelQuery<System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
    /**
    Computes in parallel the sum of a sequence of values.

    - Parameter source: A sequence of values to calculate the sum of.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.ParallelQuery_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Sum_0__1__System_Linq_ParallelQuery_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Sum(System.Linq.ParallelQuery<System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
    /**
    Computes in parallel the sum of a sequence of values.

    - Parameter source: A sequence of values to calculate the sum of.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Sum_0__1__System_Linq_ParallelQuery_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Sum(System.Linq.ParallelQuery<System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
    /**
    Computes in parallel the sum of a sequence of values.

    - Parameter source: A sequence of values to calculate the sum of.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.ParallelQuery_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__Sum_0__1__System_Linq_ParallelQuery_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Sum(System.Linq.ParallelQuery<System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
    /**
    Computes in parallel the sum of a sequence of values.

    - Parameter source: A sequence of values to calculate the sum of.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.ParallelQuery_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Sum_0__1__System_Linq_ParallelQuery_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
    /**
    Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the sum of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_Decimal__Sum_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Double Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
    /**
    Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the sum of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f64__Sum_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Int32 Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
    /**
    Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the sum of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i32__Sum_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Int64 Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
    /**
    Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the sum of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_i64__Sum_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Single Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
    /**
    Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the sum of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values in the sequence.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_f32__Sum_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Returns elements from a parallel sequence as long as a specified condition is true.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.

    */
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___TakeWhile_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try TakeWhile(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,bool>)
// docid: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
    /**
    Returns elements from a parallel sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    - Returns: A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.

    */
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_3<UTSource,Swift.Int32,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___TakeWhile_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        let del_predicate = try dotnet.System.Func_3<UTSource,Swift.Int32,Swift.Bool>(predicate);
        return try TakeWhile(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> Take<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
    /**
    Returns a specified number of contiguous elements from the start of a parallel sequence.

    - Parameter source: The sequence to return elements from.
    - Parameter count: The number of elements to return.
    - Returns: A sequence that contains the specified number of elements from the start of the input sequence.

    */
    public static func Take<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Take_1__2__System_Linq_ParallelQuery_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
    /**
    Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.

    - Parameter source: An OrderedParallelQuery{TSource} that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: A sequence whose elements are sorted descending according to a key.

    */
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___ThenByDescending_2__2__System_Linq_OrderedParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.

    - Parameter source: An OrderedParallelQuery{TSource} that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An IComparer{TKey} to compare keys.
    - Returns: A sequence whose elements are sorted descending according to a key.

    */
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___ThenByDescending_2__3__System_Linq_OrderedParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
    /**
    Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.

    - Parameter source: An OrderedParallelQuery{TSource} that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An OrderedParallelQuery{TSource} whose elements are sorted according to a key.

    */
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___ThenBy_2__2__System_Linq_OrderedParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenBy(source: source, keySelector: del_keySelector);
    }
    // System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.

    - Parameter source: An OrderedParallelQuery{TSource} that contains elements to sort.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An IComparer{TKey} to compare keys.
    - Returns: An OrderedParallelQuery{TSource} whose elements are sorted according to a key.

    */
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_OrderedParallelQuery_UTSource___ThenBy_2__3__System_Linq_OrderedParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.OrderedParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.OrderedParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // TSource[] ToArray<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
    /**
    Creates an array from a .

    - Parameter source: A sequence to create an array from.
    - Returns: An array that contains the elements from the input sequence.

    */
    public static func ToArray<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System_Arr<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_UTSourceArray__ToArray_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<UTSource>(hndl : __return);
        }
    }
    // System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Creates a  from a  according to a specified key selector function.

    - Parameter source: A sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: A  that contains keys and values.

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_Dictionary_UTKey_UTSource___ToDictionary_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToDictionary(source: source, keySelector: del_keySelector);
    }
    // System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a  from a  according to a specified key selector function and key comparer.

    - Parameter source: A sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains keys and values.

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_Dictionary_UTKey_UTSource___ToDictionary_2__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToDictionary(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
// docid: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Creates a  from a  according to specified key selector and element selector functions.

    - Parameter source: A sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Returns: A  that contains values of type  selected from the input sequence

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_Dictionary_UTKey_UTElement___ToDictionary_3__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a  from a  according to a specified key selector function, a comparer, and an element selector function.

    - Parameter source: A sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains values of type  selected from the input sequence

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_Dictionary_UTKey_UTElement___ToDictionary_3__4__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // System.Collections.Generic.List<TSource> ToList<TSource>(System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
    /**
    Creates a  from an .

    - Parameter source: A sequence to create a  from.
    - Returns: A  that contains elements from the input sequence.

    */
    public static func ToList<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Collections.Generic.List_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Collections_Generic_List_UTSource___ToList_1__1__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_1(hndl : __return);
        }
    }
    // System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
    /**
    Creates an  from a  according to a specified key selector function.

    - Parameter source: The sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: A  that contains keys and values.

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ILookup_UTKey_UTSource___ToLookup_2__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToLookup(source: source, keySelector: del_keySelector);
    }
    // System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates an  from a  according to a specified key selector function and key comparer.

    - Parameter source: The sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains keys and values.

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ILookup_UTKey_UTSource___ToLookup_2__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToLookup(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
// docid: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Creates an  from a  according to specified key selector and element selector functions.

    - Parameter source: The sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Returns: A  that contains values of type  selected from the input sequence.

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ILookup_UTKey_UTElement___ToLookup_3__3__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToLookup(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates an  from a  according to a specified key selector function, a comparer and an element selector function.

    - Parameter source: The sequence to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A Lookup<(Of <(TKey, TElement>)>) that contains values of type TElement selected from the input sequence.

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ILookup_UTKey_UTElement___ToLookup_3__4__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToLookup(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    This Union overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Union<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Union_1__2__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    This Union overload should never be called. This method is marked as obsolete and always throws  when called.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Parameter comparer: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Union<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Union_1__3__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
    /**
    Produces the set union of two parallel sequences by using the default equality comparer.

    - Parameter first: A sequence whose distinct elements form the first set for the union.
    - Parameter second: A sequence whose distinct elements form the second set for the union.
    - Returns: A sequence that contains the elements from both input sequences, excluding duplicates.

    */
    public static func Union<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Union_1__2__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.

    - Parameter first: A sequence whose distinct elements form the first set for the union.
    - Parameter second: A sequence whose distinct elements form the second set for the union.
    - Parameter comparer: An  to compare values.
    - Returns: A sequence that contains the elements from both input sequences, excluding duplicates.

    */
    public static func Union<UTSource : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTSource>, second : dotnet.System.Linq.ParallelQuery_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Union_1__3__System_Linq_ParallelQuery_UTSource__System_Linq_ParallelQuery_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
    /**
    Filters in parallel a sequence of values based on a predicate.

    - Parameter source: A sequence to filter.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A sequence that contains elements from the input sequence that satisfy the condition.

    */
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Where_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Where(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,bool>)
// docid: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
    /**
    Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.

    - Parameter source: A sequence to filter.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A sequence that contains elements from the input sequence that satisfy the condition.

    */
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : dotnet.System.Func_3<UTSource,Swift.Int32,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___Where_1__2__System_Linq_ParallelQuery_UTSource__System_Func_UTSource_i32_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, predicate : @escaping (UTSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        let del_predicate = try dotnet.System.Func_3<UTSource,Swift.Int32,Swift.Bool>(predicate);
        return try Where(source: source, predicate: del_predicate);
    }
    // System.Linq.ParallelQuery<TSource> WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)
// docid: M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
    /**
    Sets the  to associate with the query.

    - Parameter source: A ParallelQuery on which to set the option.
    - Parameter cancellationToken: A cancellation token.
    - Returns: ParallelQuery representing the same query as source, but with the registered cancellation token.

    */
    public static func WithCancellation<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___WithCancellation_1__2__System_Linq_ParallelQuery_UTSource__CancellationToken(UTSource.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
// docid: M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
    /**
    Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.

    - Parameter source: A ParallelQuery on which to set the limit on the degrees of parallelism.
    - Parameter degreeOfParallelism: The degree of parallelism for the query.
    - Returns: ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.

    */
    public static func WithDegreeOfParallelism<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, degreeOfParallelism : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___WithDegreeOfParallelism_1__2__System_Linq_ParallelQuery_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), degreeOfParallelism);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)
// docid: M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
    /**
    Sets the execution mode of the query.

    - Parameter source: A ParallelQuery on which to set the option.
    - Parameter executionMode: The mode in which to execute the query.
    - Returns: ParallelQuery representing the same query as source, but with the registered execution mode.

    */
    public static func WithExecutionMode<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, executionMode : dotnet.System.Linq.ParallelExecutionMode) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___WithExecutionMode_1__2__System_Linq_ParallelQuery_UTSource__ParallelExecutionMode(UTSource.get_type_handle(), &__thrown, source.get_handle(), executionMode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TSource> WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)
// docid: M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
    /**
    Sets the merge options for this query, which specify how the query will buffer output.

    - Parameter source: A ParallelQuery on which to set the option.
    - Parameter mergeOptions: The merge options to set for this query.
    - Returns: ParallelQuery representing the same query as source, but with the registered merge options.

    */
    public static func WithMergeOptions<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.ParallelQuery_1<UTSource>, mergeOptions : dotnet.System.Linq.ParallelMergeOptions) throws -> dotnet.System.Linq.ParallelQuery_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTSource___WithMergeOptions_1__2__System_Linq_ParallelQuery_UTSource__ParallelMergeOptions(UTSource.get_type_handle(), &__thrown, source.get_handle(), mergeOptions.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // System.Linq.ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst,TSecond,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
    /**
    This Zip overload should never be called. This method is marked as obsolete and always throws  when invoked.

    - Parameter first: This parameter is not used.
    - Parameter second: This parameter is not used.
    - Parameter resultSelector: This parameter is not used.
    - Returns: This overload always throws a .

    */
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTFirst>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : dotnet.System.Func_3<UTFirst,UTSecond,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Zip_3__3__System_Linq_ParallelQuery_UTFirst__System_Collections_Generic_IEnumerable_UTSecond__System_Func_UTFirst_UTSecond_UTResult_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), UTResult.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTFirst>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : @escaping (UTFirst, UTSecond) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<UTFirst,UTSecond,UTResult>(resultSelector);
        return try Zip(first: first, second: second, resultSelector: del_resultSelector);
    }
    // System.Linq.ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst,TSecond,TResult>)
// docid: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
    /**
    Merges in parallel two sequences by using the specified predicate function.

    - Parameter first: The first sequence to zip.
    - Parameter second: The second sequence to zip.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Returns: A sequence that has elements of type  that are obtained by performing  pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.

    */
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTFirst>, second : dotnet.System.Linq.ParallelQuery_1<UTSecond>, resultSelector : dotnet.System.Func_3<UTFirst,UTSecond,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelEnumerable_System_Linq_ParallelQuery_UTResult___Zip_3__3__System_Linq_ParallelQuery_UTFirst__System_Linq_ParallelQuery_UTSecond__System_Func_UTFirst_UTSecond_UTResult_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), UTResult.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ParallelQuery_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(first : dotnet.System.Linq.ParallelQuery_1<UTFirst>, second : dotnet.System.Linq.ParallelQuery_1<UTSecond>, resultSelector : @escaping (UTFirst, UTSecond) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<UTFirst,UTSecond,UTResult>(resultSelector);
        return try Zip(first: first, second: second, resultSelector: del_resultSelector);
    }
} // ParallelEnumerable


// type: System.Linq.ParallelExecutionMode
    /**
    The query execution mode is a hint that specifies how the system should handle performance trade-offs when parallelizing queries.

    */
public struct ParallelExecutionMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Linq_ParallelExecutionMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Linq.ParallelExecutionMode Default
    /**
    This is the default setting. PLINQ will examine the query's structure and will only parallelize the query if will likely result in speedup. If the query structure indicates that speedup is not likely to be obtained, then PLINQ will execute the query as an ordinary LINQ to Objects query.

    */
    public static var Default : dotnet.System.Linq.ParallelExecutionMode {
        get {
        let __return = dotnet.System.Linq.ParallelExecutionMode(val: System_Linq_ParallelExecutionMode_get_Default());
            return __return;
        }
    }
    // static field: System.Linq.ParallelExecutionMode ForceParallelism
    /**
    Parallelize the entire query, even if that means using high-overhead algorithms. Use this flag in cases where you know that parallel execution of the query will result in speedup, but PLINQ in the Default mode would execute it as sequential.

    */
    public static var ForceParallelism : dotnet.System.Linq.ParallelExecutionMode {
        get {
        let __return = dotnet.System.Linq.ParallelExecutionMode(val: System_Linq_ParallelExecutionMode_get_ForceParallelism());
            return __return;
        }
    }
} // ParallelExecutionMode


// type: System.Linq.ParallelMergeOptions
    /**
    Specifies the preferred type of output merge to use in a query. In other words, it indicates how PLINQ should merge the results from the various partitions back into a single result sequence. This is a hint only, and may not be respected by the system when parallelizing all queries.

    */
public struct ParallelMergeOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Linq_ParallelMergeOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Linq.ParallelMergeOptions Default
    /**
    Use the default merge type, which is AutoBuffered.

    */
    public static var Default : dotnet.System.Linq.ParallelMergeOptions {
        get {
        let __return = dotnet.System.Linq.ParallelMergeOptions(val: System_Linq_ParallelMergeOptions_get_Default());
            return __return;
        }
    }
    // static field: System.Linq.ParallelMergeOptions NotBuffered
    /**
    Use a merge without output buffers. As soon as result elements have been computed, make that element available to the consumer of the query.

    */
    public static var NotBuffered : dotnet.System.Linq.ParallelMergeOptions {
        get {
        let __return = dotnet.System.Linq.ParallelMergeOptions(val: System_Linq_ParallelMergeOptions_get_NotBuffered());
            return __return;
        }
    }
    // static field: System.Linq.ParallelMergeOptions AutoBuffered
    /**
    Use a merge with output buffers of a size chosen by the system. Results will accumulate into an output buffer before they are available to the consumer of the query.

    */
    public static var AutoBuffered : dotnet.System.Linq.ParallelMergeOptions {
        get {
        let __return = dotnet.System.Linq.ParallelMergeOptions(val: System_Linq_ParallelMergeOptions_get_AutoBuffered());
            return __return;
        }
    }
    // static field: System.Linq.ParallelMergeOptions FullyBuffered
    /**
    Use a merge with full output buffers. The system will accumulate all of the results before making any of them available to the consumer of the query.

    */
    public static var FullyBuffered : dotnet.System.Linq.ParallelMergeOptions {
        get {
        let __return = dotnet.System.Linq.ParallelMergeOptions(val: System_Linq_ParallelMergeOptions_get_FullyBuffered());
            return __return;
        }
    }
} // ParallelMergeOptions


// type: System.Linq.ParallelQuery
    /**
    Represents a parallel sequence.

    */
open class ParallelQuery
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_ParallelQuery_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ParallelQuery


// type: System.Linq.ParallelQuery`1
    /**
    Represents a parallel sequence.

    */
open class ParallelQuery_1<TSource : SGBridgeGenericValue>
    :
    dotnet.System.Linq.ParallelQuery
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_ParallelQuery_1_get_type_handle(TSource.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerator<TSource> GetEnumerator()
// docid: M:System.Linq.ParallelQuery`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the sequence.

    - Returns: An enumerator that iterates through the sequence.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<TSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ParallelQuery_1_System_Collections_Generic_IEnumerator_TSource___GetEnumerator_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // ParallelQuery_1


}


// EXTENSION METHOD TSource Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TSource,TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Aggregate(func_ : dotnet.System.Func_3<TSource,TSource,TSource>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, func_: func_);
    }
    // delegate closure overload
    public func Aggregate(func_ : @escaping (TSource, TSource) throws -> TSource) throws -> TSource {
        let del_func_ = try dotnet.System.Func_3<TSource,TSource,TSource>(func_);
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, func_: del_func_);
    }
}

// EXTENSION METHOD TAccumulate Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>) throws -> UTAccumulate {
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seed: seed, func_: func_);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : @escaping (UTAccumulate, TSource) throws -> UTAccumulate) throws -> UTAccumulate {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>(func_);
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seed: seed, func_: del_func_);
    }
}

// EXTENSION METHOD TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TAccumulate,TAccumulate>, System.Func<TAccumulate,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seedFactory : dotnet.System.Func_1<UTAccumulate>, updateAccumulatorFunc : dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>, combineAccumulatorsFunc : dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seedFactory: seedFactory, updateAccumulatorFunc: updateAccumulatorFunc, combineAccumulatorsFunc: combineAccumulatorsFunc, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seedFactory : @escaping () throws -> UTAccumulate, updateAccumulatorFunc : @escaping (UTAccumulate, TSource) throws -> UTAccumulate, combineAccumulatorsFunc : @escaping (UTAccumulate, UTAccumulate) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_seedFactory = try dotnet.System.Func_1<UTAccumulate>(seedFactory);
        let del_updateAccumulatorFunc = try dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>(updateAccumulatorFunc);
        let del_combineAccumulatorsFunc = try dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>(combineAccumulatorsFunc);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seedFactory: del_seedFactory, updateAccumulatorFunc: del_updateAccumulatorFunc, combineAccumulatorsFunc: del_combineAccumulatorsFunc, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TAccumulate,TAccumulate>, System.Func<TAccumulate,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, updateAccumulatorFunc : dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>, combineAccumulatorsFunc : dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seed: seed, updateAccumulatorFunc: updateAccumulatorFunc, combineAccumulatorsFunc: combineAccumulatorsFunc, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, updateAccumulatorFunc : @escaping (UTAccumulate, TSource) throws -> UTAccumulate, combineAccumulatorsFunc : @escaping (UTAccumulate, UTAccumulate) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_updateAccumulatorFunc = try dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>(updateAccumulatorFunc);
        let del_combineAccumulatorsFunc = try dotnet.System.Func_3<UTAccumulate,UTAccumulate,UTAccumulate>(combineAccumulatorsFunc);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seed: seed, updateAccumulatorFunc: del_updateAccumulatorFunc, combineAccumulatorsFunc: del_combineAccumulatorsFunc, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seed: seed, func_: func_, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : @escaping (UTAccumulate, TSource) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,TSource,UTAccumulate>(func_);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Aggregate(source: self, seed: seed, func_: del_func_, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD bool All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func All(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.All(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func All(predicate : @escaping (TSource) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.All(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD bool Any<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Any_() throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.Any_(source: self);
    }
}

// EXTENSION METHOD bool Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Any_(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.Any_(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Any_(predicate : @escaping (TSource) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.Any_(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func AsEnumerable() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.AsEnumerable(source: self);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery AsOrdered(System.Linq.ParallelQuery)
// TODO HACK COPE skip case we currently cannot handle

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)
// TODO HACK COPE skip case we currently cannot handle

// EXTENSION METHOD System.Linq.ParallelQuery AsParallel(System.Collections.IEnumerable)
extension System_Collections_IEnumerable {
    public func AsParallel() throws -> dotnet.System.Linq.ParallelQuery {
        return try dotnet.System.Linq.ParallelEnumerable.AsParallel(source: dotnet.System.Collections.IEnumerable(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)
extension dotnet.System.Collections.Concurrent.Partitioner_1 {
    public func AsParallel() throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.AsParallel(source: self);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func AsParallel() throws -> dotnet.System.Linq.ParallelQuery_1<T> {
        return try dotnet.System.Linq.ParallelEnumerable.AsParallel(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func AsSequential() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.AsSequential(source: self);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func AsUnordered() throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.AsUnordered(source: self);
    }
}

// EXTENSION METHOD System.Decimal Average(System.Linq.ParallelQuery<System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average() throws -> dotnet.System.Decimal where TSource == dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Linq.ParallelQuery<System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average() throws -> Swift.Double where TSource == Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Linq.ParallelQuery<System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average() throws -> Swift.Double where TSource == Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Linq.ParallelQuery<System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average() throws -> Swift.Double where TSource == Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Single Average(System.Linq.ParallelQuery<System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average() throws -> Swift.Float where TSource == Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Decimal Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average(selector : dotnet.System.Func_2<TSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (TSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<TSource,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average(selector : dotnet.System.Func_2<TSource,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (TSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Double>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average(selector : dotnet.System.Func_2<TSource,Swift.Int32>) throws -> Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (TSource) throws -> Swift.Int32) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int32>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average(selector : dotnet.System.Func_2<TSource,Swift.Int64>) throws -> Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (TSource) throws -> Swift.Int64) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int64>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Average(selector : dotnet.System.Func_2<TSource,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (TSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Float>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Cast<TResult>(System.Linq.ParallelQuery)
// TODO COPE extension method (unused generic param) System.Linq.ParallelQuery<TResult> Cast<TResult>(System.Linq.ParallelQuery)

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Concat(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Concat(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Concat(second : dotnet.System.Linq.ParallelQuery_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Concat(first: self, second: second);
    }
}

// EXTENSION METHOD bool Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Contains(value : TSource) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.Contains(source: self, value: value);
    }
}

// EXTENSION METHOD bool Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Contains(value : TSource, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.Contains(source: self, value: value, comparer: comparer);
    }
}

// EXTENSION METHOD System.Int32 Count<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Count() throws -> Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Count(source: self);
    }
}

// EXTENSION METHOD System.Int32 Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Count(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Count(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Count(predicate : @escaping (TSource) throws -> Bool) throws -> Swift.Int32 {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.Count(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func DefaultIfEmpty() throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.DefaultIfEmpty(source: self);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func DefaultIfEmpty(defaultValue : TSource) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.DefaultIfEmpty(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Distinct<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Distinct() throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Distinct(source: self);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Distinct(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Distinct(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD TSource ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ElementAtOrDefault(index : Swift.Int32) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.ElementAtOrDefault(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ElementAt(index : Swift.Int32) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.ElementAt(source: self, index: index);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Except(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Except(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Except(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Except(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Except(second : dotnet.System.Linq.ParallelQuery_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Except(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Except(second : dotnet.System.Linq.ParallelQuery_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Except(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func FirstOrDefault() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.FirstOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func FirstOrDefault(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.FirstOrDefault(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func FirstOrDefault(predicate : @escaping (TSource) throws -> Bool) throws -> TSource {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.FirstOrDefault(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD TSource First<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func First() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.First(source: self);
    }
}

// EXTENSION METHOD TSource First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func First(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.First(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func First(predicate : @escaping (TSource) throws -> Bool) throws -> TSource {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.First(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD void ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ForAll(action : dotnet.System.Action_1<TSource>) throws {
        try dotnet.System.Linq.ParallelEnumerable.ForAll(source: self, action: action);
    }
    // delegate closure overload
    public func ForAll(action : @escaping (TSource) throws -> Void) throws {
        let del_action = try dotnet.System.Action_1<TSource>(action);
        try dotnet.System.Linq.ParallelEnumerable.ForAll(source: self, action: del_action);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,TSource>> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,TSource>> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,TSource>> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,TSource>> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<TSource>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<TSource>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<TSource>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<TSource>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Intersect(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Intersect(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Intersect(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Intersect(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Intersect(second : dotnet.System.Linq.ParallelQuery_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Intersect(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Intersect(second : dotnet.System.Linq.ParallelQuery_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Intersect(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,UTInner,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, UTInner) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTInner,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,UTInner,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, UTInner) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTInner,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,UTInner,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, UTInner) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTInner,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : dotnet.System.Func_2<TSource,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<TSource,UTInner,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Linq.ParallelQuery_1<UTInner>, outerKeySelector : @escaping (TSource) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (TSource, UTInner) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<TSource,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTInner,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Join(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func LastOrDefault() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.LastOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func LastOrDefault(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.LastOrDefault(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func LastOrDefault(predicate : @escaping (TSource) throws -> Bool) throws -> TSource {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.LastOrDefault(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD TSource Last<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Last() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Last(source: self);
    }
}

// EXTENSION METHOD TSource Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Last(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Last(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Last(predicate : @escaping (TSource) throws -> Bool) throws -> TSource {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.Last(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Int64 LongCount<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func LongCount() throws -> Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.LongCount(source: self);
    }
}

// EXTENSION METHOD System.Int64 LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func LongCount(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.LongCount(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func LongCount(predicate : @escaping (TSource) throws -> Bool) throws -> Swift.Int64 {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.LongCount(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Decimal Max(System.Linq.ParallelQuery<System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max() throws -> dotnet.System.Decimal where TSource == dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Double Max(System.Linq.ParallelQuery<System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max() throws -> Swift.Double where TSource == Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Int32 Max(System.Linq.ParallelQuery<System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max() throws -> Swift.Int32 where TSource == Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Int64 Max(System.Linq.ParallelQuery<System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max() throws -> Swift.Int64 where TSource == Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Single Max(System.Linq.ParallelQuery<System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max() throws -> Swift.Float where TSource == Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self);
    }
}

// EXTENSION METHOD TSource Max<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Decimal Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max(selector : dotnet.System.Func_2<TSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (TSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<TSource,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max(selector : dotnet.System.Func_2<TSource,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (TSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Double>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int32 Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max(selector : dotnet.System.Func_2<TSource,Swift.Int32>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (TSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int32>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int64 Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max(selector : dotnet.System.Func_2<TSource,Swift.Int64>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (TSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int64>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max(selector : dotnet.System.Func_2<TSource,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (TSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Float>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD TResult Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Max<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<TSource,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max<UTResult : SGBridgeGenericValue>(selector : @escaping (TSource) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<TSource,UTResult>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Decimal Min(System.Linq.ParallelQuery<System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min() throws -> dotnet.System.Decimal where TSource == dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Double Min(System.Linq.ParallelQuery<System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min() throws -> Swift.Double where TSource == Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Int32 Min(System.Linq.ParallelQuery<System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min() throws -> Swift.Int32 where TSource == Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Int64 Min(System.Linq.ParallelQuery<System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min() throws -> Swift.Int64 where TSource == Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Single Min(System.Linq.ParallelQuery<System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min() throws -> Swift.Float where TSource == Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self);
    }
}

// EXTENSION METHOD TSource Min<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Decimal Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min(selector : dotnet.System.Func_2<TSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (TSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<TSource,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min(selector : dotnet.System.Func_2<TSource,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (TSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Double>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int32 Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min(selector : dotnet.System.Func_2<TSource,Swift.Int32>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (TSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int32>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int64 Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min(selector : dotnet.System.Func_2<TSource,Swift.Int64>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (TSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int64>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min(selector : dotnet.System.Func_2<TSource,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (TSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Float>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD TResult Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Min<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<TSource,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min<UTResult : SGBridgeGenericValue>(selector : @escaping (TSource) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<TSource,UTResult>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> OfType<TResult>(System.Linq.ParallelQuery)
// TODO COPE extension method (unused generic param) System.Linq.ParallelQuery<TResult> OfType<TResult>(System.Linq.ParallelQuery)

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.OrderByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.OrderByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.OrderByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.OrderByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.OrderBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.OrderBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.OrderBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.OrderBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Reverse<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Reverse() throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Reverse(source: self);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, selector: selector);
    }
    // delegate closure overload
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : @escaping (TSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_3<TSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, selector: selector);
    }
    // delegate closure overload
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : @escaping (TSource, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<TSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Func_2<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<TSource,UTCollection,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : @escaping (TSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (TSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_2<TSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTCollection,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Func_3<TSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<TSource,UTCollection,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : @escaping (TSource, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (TSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_3<TSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTCollection,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.SelectMany(source: self, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_3<TSource,Swift.Int32,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Select(source: self, selector: selector);
    }
    // delegate closure overload
    public func Select<UTResult : SGBridgeGenericValue>(selector : @escaping (TSource, Swift.Int32) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<TSource,Swift.Int32,UTResult>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Select(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<TSource,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Select(source: self, selector: selector);
    }
    // delegate closure overload
    public func Select<UTResult : SGBridgeGenericValue>(selector : @escaping (TSource) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<TSource,UTResult>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Select(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SequenceEqual(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.SequenceEqual(first: self, second: second);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SequenceEqual(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.SequenceEqual(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SequenceEqual(second : dotnet.System.Linq.ParallelQuery_1<TSource>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.SequenceEqual(first: self, second: second);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SequenceEqual(second : dotnet.System.Linq.ParallelQuery_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> Bool {
        return try dotnet.System.Linq.ParallelEnumerable.SequenceEqual(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SingleOrDefault() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.SingleOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SingleOrDefault(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.SingleOrDefault(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func SingleOrDefault(predicate : @escaping (TSource) throws -> Bool) throws -> TSource {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.SingleOrDefault(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD TSource Single<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Single() throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Single(source: self);
    }
}

// EXTENSION METHOD TSource Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Single(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> TSource {
        return try dotnet.System.Linq.ParallelEnumerable.Single(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Single(predicate : @escaping (TSource) throws -> Bool) throws -> TSource {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.Single(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SkipWhile(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.SkipWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func SkipWhile(predicate : @escaping (TSource) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.SkipWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func SkipWhile(predicate : dotnet.System.Func_3<TSource,Swift.Int32,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.SkipWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func SkipWhile(predicate : @escaping (TSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        let del_predicate = try dotnet.System.Func_3<TSource,Swift.Int32,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.SkipWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Skip<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Skip(count : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Skip(source: self, count: count);
    }
}

// EXTENSION METHOD System.Decimal Sum(System.Linq.ParallelQuery<System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum() throws -> dotnet.System.Decimal where TSource == dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Double Sum(System.Linq.ParallelQuery<System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum() throws -> Swift.Double where TSource == Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Int32 Sum(System.Linq.ParallelQuery<System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum() throws -> Swift.Int32 where TSource == Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Int64 Sum(System.Linq.ParallelQuery<System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum() throws -> Swift.Int64 where TSource == Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Single Sum(System.Linq.ParallelQuery<System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum() throws -> Swift.Float where TSource == Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Decimal Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum(selector : dotnet.System.Func_2<TSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (TSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<TSource,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum(selector : dotnet.System.Func_2<TSource,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (TSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Double>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int32 Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum(selector : dotnet.System.Func_2<TSource,Swift.Int32>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (TSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int32>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int64 Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum(selector : dotnet.System.Func_2<TSource,Swift.Int64>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (TSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Int64>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Sum(selector : dotnet.System.Func_2<TSource,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (TSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<TSource,Swift.Float>(selector);
        return try dotnet.System.Linq.ParallelEnumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func TakeWhile(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.TakeWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func TakeWhile(predicate : @escaping (TSource) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.TakeWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func TakeWhile(predicate : dotnet.System.Func_3<TSource,Swift.Int32,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.TakeWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func TakeWhile(predicate : @escaping (TSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        let del_predicate = try dotnet.System.Func_3<TSource,Swift.Int32,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.TakeWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Take<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Take(count : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Take(source: self, count: count);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.OrderedParallelQuery_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ThenByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ThenByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.OrderedParallelQuery_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ThenByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ThenByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.OrderedParallelQuery_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ThenBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ThenBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.OrderedParallelQuery_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ThenBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.OrderedParallelQuery_1<TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ThenBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource[] ToArray<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToArray() throws -> dotnet.System_Arr<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ToArray(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.List<TSource> ToList<TSource>(System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToList() throws -> dotnet.System.Collections.Generic.List_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ToList(source: self);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey) throws -> dotnet.System.Linq.ILookup_2<UTKey,TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,TSource> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TSource,UTKey>, elementSelector : dotnet.System.Func_2<TSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (TSource) throws -> UTKey, elementSelector : @escaping (TSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<TSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<TSource,UTElement>(elementSelector);
        return try dotnet.System.Linq.ParallelEnumerable.ToLookup(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Union(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Union(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Union(second : dotnet.System.Collections.Generic.IEnumerable_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Union(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Union(second : dotnet.System.Linq.ParallelQuery_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Union(first: self, second: second);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Union(second : dotnet.System.Linq.ParallelQuery_1<TSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TSource>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Union(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Where(predicate : dotnet.System.Func_2<TSource,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Where(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (TSource) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        let del_predicate = try dotnet.System.Func_2<TSource,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.Where(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource,System.Int32,bool>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Where(predicate : dotnet.System.Func_3<TSource,Swift.Int32,Bool>) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.Where(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (TSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        let del_predicate = try dotnet.System.Func_3<TSource,Swift.Int32,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ParallelEnumerable.Where(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func WithCancellation(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.WithCancellation(source: self, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func WithDegreeOfParallelism(degreeOfParallelism : Swift.Int32) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.WithDegreeOfParallelism(source: self, degreeOfParallelism: degreeOfParallelism);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func WithExecutionMode(executionMode : dotnet.System.Linq.ParallelExecutionMode) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.WithExecutionMode(source: self, executionMode: executionMode);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TSource> WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func WithMergeOptions(mergeOptions : dotnet.System.Linq.ParallelMergeOptions) throws -> dotnet.System.Linq.ParallelQuery_1<TSource> {
        return try dotnet.System.Linq.ParallelEnumerable.WithMergeOptions(source: self, mergeOptions: mergeOptions);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst,TSecond,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : dotnet.System.Func_3<TSource,UTSecond,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Zip(first: self, second: second, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : @escaping (TSource, UTSecond) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTSecond,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Zip(first: self, second: second, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Linq.ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst,TSecond,TResult>)
extension dotnet.System.Linq.ParallelQuery_1 {
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(second : dotnet.System.Linq.ParallelQuery_1<UTSecond>, resultSelector : dotnet.System.Func_3<TSource,UTSecond,UTResult>) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        return try dotnet.System.Linq.ParallelEnumerable.Zip(first: self, second: second, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(second : dotnet.System.Linq.ParallelQuery_1<UTSecond>, resultSelector : @escaping (TSource, UTSecond) throws -> UTResult) throws -> dotnet.System.Linq.ParallelQuery_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<TSource,UTSecond,UTResult>(resultSelector);
        return try dotnet.System.Linq.ParallelEnumerable.Zip(first: self, second: second, resultSelector: del_resultSelector);
    }
}

