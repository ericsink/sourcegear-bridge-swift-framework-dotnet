// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.IWebProxyScript
    /**
    Provides the base interface to load and execute scripts for automatic proxy detection.

    */
open class IWebProxyScript
    :
    SGBridgeGenericValue,
    System_Net_IWebProxyScript
{
    open class func get_type_handle() -> TypeHandle {
        return System_Net_IWebProxyScript_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Close()
// docid: M:System.Net.IWebProxyScript.Close
    /**
    Closes a script.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_IWebProxyScript_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Load(System.Uri, System.String, System.Type)
// docid: M:System.Net.IWebProxyScript.Load(System.Uri,System.String,System.Type)
    /**
    Loads a script.

    - Parameter scriptLocation: Internal only.
    - Parameter script: Internal only.
    - Parameter helperType: Internal only.
    - Returns: A  indicating whether the script was successfully loaded.

    */
    open func Load(scriptLocation : dotnet.System.Uri, script : dotnet.System.String, helperType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IWebProxyScript_bool__Load_0__3__Uri_String_Type(&__thrown, self.get_handle(), scriptLocation.get_handle(), script.get_handle(), helperType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String Run(System.String, System.String)
// docid: M:System.Net.IWebProxyScript.Run(System.String,System.String)
    /**
    Runs a script.

    - Parameter url: Internal only.
    - Parameter host: Internal only.
    - Returns: A .  
  
 An internal-only value returned.

    */
    open func Run(url : dotnet.System.String, host : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IWebProxyScript_String__Run_0__2__String_String(&__thrown, self.get_handle(), url.get_handle(), host.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IWebProxyScript


// type: System.Net.WebProxy
    /**
    Contains HTTP proxy settings for the  class.

    */
open class WebProxy
    :
    dotnet.System.Object,
    System_Net_IWebProxy,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebProxy_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.WebProxy.#ctor
    /**
    Initializes an empty instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.WebProxy.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified URI.

    - Parameter Address: The URI of the proxy server.
    */
    public init(Address : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__1__String(&__thrown, Address?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool)
// docid: M:System.Net.WebProxy.#ctor(System.String,System.Boolean)
    /**
    Initializes a new instance of the  class with the specified URI and bypass setting.

    - Parameter Address: The URI of the proxy server.
    - Parameter BypassOnLocal: 
         to bypass the proxy for local addresses; otherwise, .
    */
    public init(Address : Optional<dotnet.System.String>, BypassOnLocal : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__2__String_bool(&__thrown, Address?.get_handle() ?? nil, Swift.Int32(BypassOnLocal ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool, System.String[])
// docid: M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
    /**
    Initializes a new instance of the  class with the specified URI, bypass setting, and list of URIs to bypass.

    - Parameter Address: The URI of the proxy server.
    - Parameter BypassOnLocal: 
         to bypass the proxy for local addresses; otherwise, .
    - Parameter BypassList: An array of regular expression strings that contain the URIs of the servers to bypass.
    */
    public init(Address : Optional<dotnet.System.String>, BypassOnLocal : Bool, BypassList : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__3__String_bool_StringArray(&__thrown, Address?.get_handle() ?? nil, Swift.Int32(BypassOnLocal ? 1 : 0), (BypassList?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool, System.String[], System.Net.ICredentials)
// docid: M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
    /**
    Initializes a new instance of the  class with the specified URI, bypass setting, list of URIs to bypass, and credentials.

    - Parameter Address: The URI of the proxy server.
    - Parameter BypassOnLocal: 
         to bypass the proxy for local addresses; otherwise, .
    - Parameter BypassList: An array of regular expression strings that contains the URIs of the servers to bypass.
    - Parameter Credentials: An  instance to submit to the proxy server for authentication.
    */
    public init(Address : Optional<dotnet.System.String>, BypassOnLocal : Bool, BypassList : Optional<dotnet.System_Arr<dotnet.System.String>>, Credentials : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__4__String_bool_StringArray_ICredentials(&__thrown, Address?.get_handle() ?? nil, Swift.Int32(BypassOnLocal ? 1 : 0), (BypassList?.get_handle()), Credentials?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32)
// docid: M:System.Net.WebProxy.#ctor(System.String,System.Int32)
    /**
    Initializes a new instance of the  class with the specified host and port number.

    - Parameter Host: The name of the proxy host.
    - Parameter Port: The port number on  to use.
    */
    public init(Host : dotnet.System.String, Port : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__2__String_i32(&__thrown, Host.get_handle(), Port);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Uri)
// docid: M:System.Net.WebProxy.#ctor(System.Uri)
    /**
    Initializes a new instance of the  class from the specified  instance.

    - Parameter Address: A  instance that contains the address of the proxy server.
    */
    public init(Address : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__1__Uri(&__thrown, Address?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Uri, bool)
// docid: M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
    /**
    Initializes a new instance of the  class with the  instance and bypass setting.

    - Parameter Address: A  instance that contains the address of the proxy server.
    - Parameter BypassOnLocal: 
         to bypass the proxy for local addresses; otherwise, .
    */
    public init(Address : Optional<dotnet.System.Uri>, BypassOnLocal : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__2__Uri_bool(&__thrown, Address?.get_handle() ?? nil, Swift.Int32(BypassOnLocal ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Uri, bool, System.String[])
// docid: M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
    /**
    Initializes a new instance of the  class with the specified  instance, bypass setting, and list of URIs to bypass.

    - Parameter Address: A  instance that contains the address of the proxy server.
    - Parameter BypassOnLocal: 
         to bypass the proxy for local addresses; otherwise, .
    - Parameter BypassList: An array of regular expression strings that contains the URIs of the servers to bypass.
    */
    public init(Address : Optional<dotnet.System.Uri>, BypassOnLocal : Bool, BypassList : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__3__Uri_bool_StringArray(&__thrown, Address?.get_handle() ?? nil, Swift.Int32(BypassOnLocal ? 1 : 0), (BypassList?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Uri, bool, System.String[], System.Net.ICredentials)
// docid: M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
    /**
    Initializes a new instance of the  class with the specified  instance, bypass setting, list of URIs to bypass, and credentials.

    - Parameter Address: A  instance that contains the address of the proxy server.
    - Parameter BypassOnLocal: 
         to bypass the proxy for local addresses; otherwise, .
    - Parameter BypassList: An array of regular expression strings that contains the URIs of the servers to bypass.
    - Parameter Credentials: An  instance to submit to the proxy server for authentication.
    */
    public init(Address : Optional<dotnet.System.Uri>, BypassOnLocal : Bool, BypassList : Optional<dotnet.System_Arr<dotnet.System.String>>, Credentials : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebProxy_ctor_0__4__Uri_bool_StringArray_ICredentials(&__thrown, Address?.get_handle() ?? nil, Swift.Int32(BypassOnLocal ? 1 : 0), (BypassList?.get_handle()), Credentials?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.WebProxy GetDefaultProxy()
// docid: M:System.Net.WebProxy.GetDefaultProxy
    /**
    Reads the Internet Explorer nondynamic proxy settings.

    - Returns: A  instance that contains the nondynamic proxy settings from Internet Explorer 5.5 and later.

    */
    open class func GetDefaultProxy() throws -> dotnet.System.Net.WebProxy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_WebProxy__GetDefaultProxy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebProxy(hndl : __return);
        }
    }
    // System.Uri GetProxy(System.Uri)
// docid: M:System.Net.WebProxy.GetProxy(System.Uri)
    /**
    Returns the proxied URI for a request.

    - Parameter destination: The  instance of the requested Internet resource.
    - Returns: The  instance of the Internet resource, if the resource is on the bypass list; otherwise, the  instance of the proxy.

    */
    open /* method final */ func GetProxy(destination : dotnet.System.Uri) throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_Uri__GetProxy_0__1__Uri(&__thrown, self.get_handle(), destination.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsBypassed(System.Uri)
// docid: M:System.Net.WebProxy.IsBypassed(System.Uri)
    /**
    Indicates whether to use the proxy server for the specified host.

    - Parameter host: The  instance of the host to check for proxy use.
    - Returns: 
         if the proxy server should not be used for ; otherwise, .

    */
    open /* method final */ func IsBypassed(host : dotnet.System.Uri) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_bool__IsBypassed_0__1__Uri(&__thrown, self.get_handle(), host.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Uri get_Address()
// docid: M:System.Net.WebProxy.get_Address
    open func get_Address() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_Uri__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Address(System.Uri)
// docid: M:System.Net.WebProxy.set_Address(System.Uri)
    open func set_Address(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebProxy_void__set_Address_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.ArrayList get_BypassArrayList()
// docid: M:System.Net.WebProxy.get_BypassArrayList
    open func get_BypassArrayList() throws -> dotnet.System.Collections.ArrayList {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_ArrayList__get_BypassArrayList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ArrayList(hndl : __return);
        }
    }
    // [IsSpecialName] System.String[] get_BypassList()
// docid: M:System.Net.WebProxy.get_BypassList
    open func get_BypassList() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_StringArray__get_BypassList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BypassList(System.String[])
// docid: M:System.Net.WebProxy.set_BypassList(System.String[])
    open func set_BypassList(value : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebProxy_void__set_BypassList_0__1__StringArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_BypassProxyOnLocal()
// docid: M:System.Net.WebProxy.get_BypassProxyOnLocal
    open func get_BypassProxyOnLocal() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_bool__get_BypassProxyOnLocal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_BypassProxyOnLocal(bool)
// docid: M:System.Net.WebProxy.set_BypassProxyOnLocal(System.Boolean)
    open func set_BypassProxyOnLocal(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebProxy_void__set_BypassProxyOnLocal_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.WebProxy.get_Credentials
    open /* method final */ func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.WebProxy.set_Credentials(System.Net.ICredentials)
    open /* method final */ func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebProxy_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.WebProxy.get_UseDefaultCredentials
    open func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebProxy_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.WebProxy.set_UseDefaultCredentials(System.Boolean)
    open func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebProxy_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the address of the proxy server.

    */
    open var Address : Optional<dotnet.System.Uri> {
        get {
            return try! get_Address();
        }
        set(v) {
            return try! set_Address(value: v!);
        }
    }
    /**
    Gets a list of addresses that do not use the proxy server.

    */
    open var BypassArrayList : dotnet.System.Collections.ArrayList {
        get {
            return try! get_BypassArrayList();
        }
    }
    /**
    Gets or sets an array of addresses that do not use the proxy server.

    */
    open var BypassList : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_BypassList();
        }
        set(v) {
            return try! set_BypassList(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to bypass the proxy server for local addresses.

    */
    open var BypassProxyOnLocal : Bool {
        get {
            return try! get_BypassProxyOnLocal();
        }
        set(v) {
            return try! set_BypassProxyOnLocal(value: v);
        }
    }
    /**
    Gets or sets the credentials to submit to the proxy server for authentication.

    */
    public var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    Gets or sets a  value that controls whether the  are sent with requests.

    */
    open var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
} // WebProxy


}


public protocol System_Net_IWebProxyScript
    :
    SGBridgeGetHandle
{
}

