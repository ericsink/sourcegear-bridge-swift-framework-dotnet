// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Collections
// System.Collections.Concurrent
extension System.Collections.Concurrent {
// type: System.Collections.Concurrent.BlockingCollection`1
    /**
    Provides blocking and bounding capabilities for thread-safe collections that implement .

    */
open class BlockingCollection_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_BlockingCollection_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.#ctor
    /**
    Initializes a new instance of the  class without an upper-bound.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_BlockingCollection_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Concurrent.IProducerConsumerCollection<T>)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
    /**
    Initializes a new instance of the  class without an upper-bound and using the provided  as its underlying data store.

    - Parameter collection: The collection to use as the underlying data store.
    */
    public init(collection : dotnet.System.Collections.Concurrent.IProducerConsumerCollection_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_BlockingCollection_1_ctor_0__1__System_Collections_Concurrent_IProducerConsumerCollection_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
    /**
    Initializes a new instance of the  class with the specified upper-bound and using the provided  as its underlying data store.

    - Parameter collection: The collection to use as the underlying data store.
    - Parameter boundedCapacity: The bounded size of the collection.
    */
    public init(collection : dotnet.System.Collections.Concurrent.IProducerConsumerCollection_1<T>, boundedCapacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_BlockingCollection_1_ctor_0__2__System_Collections_Concurrent_IProducerConsumerCollection_T__i32(T.get_type_handle(), &__thrown, collection.get_handle(), boundedCapacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the specified upper-bound.

    - Parameter boundedCapacity: The bounded size of the collection.
    */
    public init(boundedCapacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_BlockingCollection_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, boundedCapacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)
    /**
    Adds the item to the .

    - Parameter item: The item to be added to the collection. The value can be a null reference.
    */
    open func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_BlockingCollection_1_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(T, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
    /**
    Adds the item to the .

    - Parameter item: The item to be added to the collection. The value can be a null reference.
    - Parameter cancellationToken: A cancellation token to observe.
    */
    open func Add(item : T, cancellationToken : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_BlockingCollection_1_void__Add_0__2__T_CancellationToken(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection`1[],`0)
    open class func AddToAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__AddToAny_0__2__System_Collections_Concurrent_BlockingCollection_T_Array_T(T.get_type_handle(), &__thrown, collections.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection`1[],`0,System.Threading.CancellationToken)
    open class func AddToAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : T, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__AddToAny_0__3__System_Collections_Concurrent_BlockingCollection_T_Array_T_CancellationToken(T.get_type_handle(), &__thrown, collections.get_handle(), item.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void CompleteAdding()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
    /**
    Marks the  instances as not accepting any more additions.

    */
    open func CompleteAdding() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_BlockingCollection_1_void__CompleteAdding_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(System.Collections.Concurrent.T[],System.Int32)
    open func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_BlockingCollection_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_BlockingCollection_1_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
    /**
    Provides a consuming  for items in the collection.

    - Returns: An  that removes and returns items from the collection.

    */
    open func GetConsumingEnumerable() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_System_Collections_Generic_IEnumerable_T___GetConsumingEnumerable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable(System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
    /**
    Provides a consuming  for items in the collection.

    - Parameter cancellationToken: A cancellation token to observe.
    - Returns: An  that removes and returns items from the collection.

    */
    open func GetConsumingEnumerable(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_System_Collections_Generic_IEnumerable_T___GetConsumingEnumerable_0__1__CancellationToken(T.get_type_handle(), &__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // T Take()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.Take
    /**
    Removes  an item from the .

    - Returns: The item removed from the collection.

    */
    open func Take() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_T__Take_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Take(System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
    /**
    Removes an item from the .

    - Parameter cancellationToken: Object that can be used to cancel the take operation.
    - Returns: The item removed from the collection.

    */
    open func Take(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_T__Take_0__1__CancellationToken(T.get_type_handle(), &__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // System.Int32 TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], ref T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection`1[],`0@)
    open class func TakeFromAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : inout T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TakeFromAny_0__2__System_Collections_Concurrent_BlockingCollection_T_Array_outT(T.get_type_handle(), &__thrown, collections.get_handle(), &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], ref T, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection`1[],`0@,System.Threading.CancellationToken)
    open class func TakeFromAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : inout T, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TakeFromAny_0__3__System_Collections_Concurrent_BlockingCollection_T_Array_outT_CancellationToken(T.get_type_handle(), &__thrown, collections.get_handle(), &_tmp_out_item, cancellationToken.get_handle());
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.ToArray
    /**
    Copies the items from the  instance into a new array.

    - Returns: An array containing copies of the elements of the collection.

    */
    open func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // bool TryAdd(T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
    /**
    Tries to add the specified item to the .

    - Parameter item: The item to be added to the collection.
    - Returns: 
         if  could be added; otherwise, . If the item is a duplicate, and the underlying collection does not accept duplicate items, then an  is thrown.

    */
    open func TryAdd(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__TryAdd_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryAdd(T, System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
    /**
    Tries to add the specified item to the  within the specified time period.

    - Parameter item: The item to be added to the collection.
    - Parameter millisecondsTimeout: The number of milliseconds to wait, or  (-1) to wait indefinitely.
    - Returns: 
         if the  could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an  is thrown.

    */
    open func TryAdd(item : T, millisecondsTimeout : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__TryAdd_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), millisecondsTimeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryAdd(T, System.Int32, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
    /**
    Tries to add the specified item to the  within the specified time period, while observing a cancellation token.

    - Parameter item: The item to be added to the collection.
    - Parameter millisecondsTimeout: The number of milliseconds to wait, or  (-1) to wait indefinitely.
    - Parameter cancellationToken: A cancellation token to observe.
    - Returns: 
         if the  could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an  is thrown.

    */
    open func TryAdd(item : T, millisecondsTimeout : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__TryAdd_0__3__T_i32_CancellationToken(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), millisecondsTimeout, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryAdd(T, System.TimeSpan)
    // System.Int32 TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[],`0)
    open class func TryAddToAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TryAddToAny_0__2__System_Collections_Concurrent_BlockingCollection_T_Array_T(T.get_type_handle(), &__thrown, collections.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[],`0,System.Int32)
    open class func TryAddToAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : T, millisecondsTimeout : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TryAddToAny_0__3__System_Collections_Concurrent_BlockingCollection_T_Array_T_i32(T.get_type_handle(), &__thrown, collections.get_handle(), item.to_gval(), millisecondsTimeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection`1[],`0,System.Int32,System.Threading.CancellationToken)
    open class func TryAddToAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : T, millisecondsTimeout : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TryAddToAny_0__4__System_Collections_Concurrent_BlockingCollection_T_Array_T_i32_CancellationToken(T.get_type_handle(), &__thrown, collections.get_handle(), item.to_gval(), millisecondsTimeout, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.TimeSpan)
    // bool TryTake(ref T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
    /**
    Tries to remove an item from the .

    - Parameter item: The item to be removed from the collection.
    - Returns: 
         if an item could be removed; otherwise, .

    */
    open func TryTake(item : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__TryTake_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryTake(ref T, System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
    /**
    Tries to remove an item from the  in the specified time period.

    - Parameter item: The item to be removed from the collection.
    - Parameter millisecondsTimeout: The number of milliseconds to wait, or  (-1) to wait indefinitely.
    - Returns: 
         if an item could be removed from the collection within the specified  time; otherwise, .

    */
    open func TryTake(item : inout T, millisecondsTimeout : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__TryTake_0__2__outT_i32(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_item, millisecondsTimeout);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryTake(ref T, System.Int32, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
    /**
    Tries to remove an item from the  in the specified time period while observing a cancellation token.

    - Parameter item: The item to be removed from the collection.
    - Parameter millisecondsTimeout: The number of milliseconds to wait, or  (-1) to wait indefinitely.
    - Parameter cancellationToken: A cancellation token to observe.
    - Returns: 
         if an item could be removed from the collection within the specified  time; otherwise, .

    */
    open func TryTake(item : inout T, millisecondsTimeout : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__TryTake_0__3__outT_i32_CancellationToken(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_item, millisecondsTimeout, cancellationToken.get_handle());
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryTake(ref T, System.TimeSpan)
    // System.Int32 TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], ref T)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[],`0@)
    open class func TryTakeFromAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : inout T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TryTakeFromAny_0__2__System_Collections_Concurrent_BlockingCollection_T_Array_outT(T.get_type_handle(), &__thrown, collections.get_handle(), &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], ref T, System.Int32)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[],`0@,System.Int32)
    open class func TryTakeFromAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : inout T, millisecondsTimeout : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TryTakeFromAny_0__3__System_Collections_Concurrent_BlockingCollection_T_Array_outT_i32(T.get_type_handle(), &__thrown, collections.get_handle(), &_tmp_out_item, millisecondsTimeout);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], ref T, System.Int32, System.Threading.CancellationToken)
// docid: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection`1[],`0@,System.Int32,System.Threading.CancellationToken)
    open class func TryTakeFromAny(collections : dotnet.System_Arr<dotnet.System.Collections.Concurrent.BlockingCollection_1<T>>, item : inout T, millisecondsTimeout : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__TryTakeFromAny_0__4__System_Collections_Concurrent_BlockingCollection_T_Array_outT_i32_CancellationToken(T.get_type_handle(), &__thrown, collections.get_handle(), &_tmp_out_item, millisecondsTimeout, cancellationToken.get_handle());
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], ref T, System.TimeSpan)
    // [IsSpecialName] System.Int32 get_BoundedCapacity()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.get_BoundedCapacity
    open func get_BoundedCapacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__get_BoundedCapacity_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsAddingCompleted()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.get_IsAddingCompleted
    open func get_IsAddingCompleted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__get_IsAddingCompleted_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsCompleted()
// docid: M:System.Collections.Concurrent.BlockingCollection`1.get_IsCompleted
    open func get_IsCompleted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_BlockingCollection_1_bool__get_IsCompleted_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the bounded capacity of this  instance.

    */
    open var BoundedCapacity : Swift.Int32 {
        get {
            return try! get_BoundedCapacity();
        }
    }
    /**
    Gets the number of items contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets whether this  has been marked as complete for adding.

    */
    open var IsAddingCompleted : Bool {
        get {
            return try! get_IsAddingCompleted();
        }
    }
    /**
    Gets whether this  has been marked as complete for adding and is empty.

    */
    open var IsCompleted : Bool {
        get {
            return try! get_IsCompleted();
        }
    }
} // BlockingCollection_1


// type: System.Collections.Concurrent.ConcurrentBag`1
    /**
    Represents a thread-safe, unordered collection of objects.

    */
open class ConcurrentBag_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_ConcurrentBag_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentBag_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection.

    - Parameter collection: The collection whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentBag_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(T)
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
    /**
    Adds an object to the .

    - Parameter item: The object to be added to the . The value can be a null reference (Nothing in Visual Basic) for reference types.
    */
    open func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentBag_1_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.Clear
    /**
    Removes all values from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentBag_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(System.Collections.Concurrent.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentBag_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator for the contents of the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentBag_1_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.ToArray
    /**
    Copies the  elements to a new array.

    - Returns: A new array containing a snapshot of elements copied from the .

    */
    open /* method final */ func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentBag_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // bool TryPeek(ref T)
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
    /**
    Attempts to return an object from the  without removing it.

    - Parameter result: When this method returns,  contains an object from the  or the default value of  if the operation failed.
    - Returns: 
         if an object was returned successfully; otherwise, .

    */
    open func TryPeek(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentBag_1_bool__TryPeek_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryTake(ref T)
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
    /**
    Attempts to remove and return an object from the .

    - Parameter result: When this method returns,  contains the object removed from the  or the default value of  if the bag is empty.
    - Returns: 
         if an object was removed successfully; otherwise, .

    */
    open /* method final */ func TryTake(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentBag_1_bool__TryTake_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentBag_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Concurrent.ConcurrentBag`1.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentBag_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  is empty.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
} // ConcurrentBag_1


// type: System.Collections.Concurrent.ConcurrentDictionary`2
    /**
    Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.

    */
open class ConcurrentDictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_ConcurrentDictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
    /**
    Initializes a new instance of the  class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified , has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.

    - Parameter collection: The  whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  has the default concurrency level, has the default initial capacity, and uses the specified  .

    - Parameter collection: The  whose elements are copied to the new .
    - Parameter comparer: The  implementation to use when comparing keys.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__2__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue___System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, collection.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that is empty, has the default concurrency level and capacity, and uses the specified .

    - Parameter comparer: The equality comparison implementation to use when comparing keys.
    */
    public init(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__1__System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified , and uses the specified .

    - Parameter concurrencyLevel: The estimated number of threads that will update the  concurrently.
    - Parameter collection: The  whose elements are copied to the new .
    - Parameter comparer: The  implementation to use when comparing keys.
    */
    public init(concurrencyLevel : Swift.Int32, collection : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__3__i32_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue___System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, concurrencyLevel, collection.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.

    - Parameter concurrencyLevel: The estimated number of threads that will update the  concurrently.
    - Parameter capacity: The initial number of elements that the  can contain.
    */
    public init(concurrencyLevel : Swift.Int32, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__2__i32_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, concurrencyLevel, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified .

    - Parameter concurrencyLevel: The estimated number of threads that will update the  concurrently.
    - Parameter capacity: The initial number of elements that the  can contain.
    - Parameter comparer: The  implementation to use when comparing keys.
    */
    public init(concurrencyLevel : Swift.Int32, capacity : Swift.Int32, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentDictionary_2_ctor_0__3__i32_i32_System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, concurrencyLevel, capacity, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // TValue AddOrUpdate(TKey, System.Func<TKey,TValue>, System.Func<TKey,TValue,TValue>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
    /**
    Uses the specified functions to add a key/value pair to the  if the key does not already exist, or to update a key/value pair in the  if the key already exists.

    - Parameter key: The key to be added or whose value should be updated
    - Parameter addValueFactory: The function used to generate a value for an absent key
    - Parameter updateValueFactory: The function used to generate a new value for an existing key based on the key's existing value
    - Returns: The new value for the key. This will be either be the result of  (if the key was absent) or the result of  (if the key was present).

    */
    open func AddOrUpdate(key : TKey, addValueFactory : dotnet.System.Func_2<TKey,TValue>, updateValueFactory : dotnet.System.Func_3<TKey,TValue,TValue>) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__AddOrUpdate_0__3__TKey_System_Func_TKey_TValue__System_Func_TKey_TValue_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), addValueFactory.get_handle(), updateValueFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // delegate closure overload
    open func AddOrUpdate(key : TKey, addValueFactory : @escaping (TKey) throws -> TValue, updateValueFactory : @escaping (TKey, TValue) throws -> TValue) throws -> TValue {
        let del_addValueFactory = try dotnet.System.Func_2<TKey,TValue>(addValueFactory);
        let del_updateValueFactory = try dotnet.System.Func_3<TKey,TValue,TValue>(updateValueFactory);
        return try AddOrUpdate(key: key, addValueFactory: del_addValueFactory, updateValueFactory: del_updateValueFactory);
    }
    // TValue AddOrUpdate(TKey, TValue, System.Func<TKey,TValue,TValue>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
    /**
    Adds a key/value pair to the  if the key does not already exist, or updates a key/value pair in the  by using the specified function if the key already exists.

    - Parameter key: The key to be added or whose value should be updated
    - Parameter addValue: The value to be added for an absent key
    - Parameter updateValueFactory: The function used to generate a new value for an existing key based on the key's existing value
    - Returns: The new value for the key. This will be either be  (if the key was absent) or the result of  (if the key was present).

    */
    open func AddOrUpdate(key : TKey, addValue : TValue, updateValueFactory : dotnet.System.Func_3<TKey,TValue,TValue>) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__AddOrUpdate_0__3__TKey_TValue_System_Func_TKey_TValue_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), addValue.to_gval(), updateValueFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // delegate closure overload
    open func AddOrUpdate(key : TKey, addValue : TValue, updateValueFactory : @escaping (TKey, TValue) throws -> TValue) throws -> TValue {
        let del_updateValueFactory = try dotnet.System.Func_3<TKey,TValue,TValue>(updateValueFactory);
        return try AddOrUpdate(key: key, addValue: addValue, updateValueFactory: del_updateValueFactory);
    }
    // TValue AddOrUpdate<TArg>(TKey, System.Func<TKey,TArg,TValue>, System.Func<TKey,TValue,TArg,TValue>, TArg)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
    /**
    Uses the specified functions and argument to add a key/value pair to the  if the key does not already exist, or to update a key/value pair in the  if the key already exists.

    - Parameter key: The key to be added or whose value should be updated.
    - Parameter addValueFactory: The function used to generate a value for an absent key.
    - Parameter updateValueFactory: The function used to generate a new value for an existing key based on the key's existing value.
    - Parameter factoryArgument: An argument to pass into  and .
    - Returns: The new value for the key. This will be either be the result of  (if the key was absent) or the result of  (if the key was present).

    */
    open func AddOrUpdate<UTArg : SGBridgeGenericValue>(key : TKey, addValueFactory : dotnet.System.Func_3<TKey,UTArg,TValue>, updateValueFactory : dotnet.System.Func_4<TKey,TValue,UTArg,TValue>, factoryArgument : UTArg) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__AddOrUpdate_1__4__TKey_System_Func_TKey_UTArg_TValue__System_Func_TKey_TValue_UTArg_TValue__UTArg(TKey.get_type_handle(), TValue.get_type_handle(), UTArg.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), addValueFactory.get_handle(), updateValueFactory.get_handle(), factoryArgument.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // delegate closure overload
    open func AddOrUpdate<UTArg : SGBridgeGenericValue>(key : TKey, addValueFactory : @escaping (TKey, UTArg) throws -> TValue, updateValueFactory : @escaping (TKey, TValue, UTArg) throws -> TValue, factoryArgument : UTArg) throws -> TValue {
        let del_addValueFactory = try dotnet.System.Func_3<TKey,UTArg,TValue>(addValueFactory);
        let del_updateValueFactory = try dotnet.System.Func_4<TKey,TValue,UTArg,TValue>(updateValueFactory);
        return try AddOrUpdate(key: key, addValueFactory: del_addValueFactory, updateValueFactory: del_updateValueFactory, factoryArgument: factoryArgument);
    }
    // void Clear()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear
    /**
    Removes all keys and values from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentDictionary_2_void__Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
    /**
    Determines whether the  contains the specified key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue____GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // TValue GetOrAdd(TKey, System.Func<TKey,TValue>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
    /**
    Adds a key/value pair to the  by using the specified function if the key does not already exist. Returns the new value, or the existing value if the key exists.

    - Parameter key: The key of the element to add.
    - Parameter valueFactory: The function used to generate a value for the key.
    - Returns: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.

    */
    open func GetOrAdd(key : TKey, valueFactory : dotnet.System.Func_2<TKey,TValue>) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__GetOrAdd_0__2__TKey_System_Func_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), valueFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // delegate closure overload
    open func GetOrAdd(key : TKey, valueFactory : @escaping (TKey) throws -> TValue) throws -> TValue {
        let del_valueFactory = try dotnet.System.Func_2<TKey,TValue>(valueFactory);
        return try GetOrAdd(key: key, valueFactory: del_valueFactory);
    }
    // TValue GetOrAdd(TKey, TValue)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
    /**
    Adds a key/value pair to the  if the key does not already exist. Returns the new value, or the existing value if the key exists.

    - Parameter key: The key of the element to add.
    - Parameter value: The value to be added, if the key does not already exist.
    - Returns: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.

    */
    open func GetOrAdd(key : TKey, value : TValue) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__GetOrAdd_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // TValue GetOrAdd<TArg>(TKey, System.Func<TKey,TArg,TValue>, TArg)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
    /**
    Adds a key/value pair to the  by using the specified function and an argument if the key does not already exist, or returns the existing value if the key exists.

    - Parameter key: The key of the element to add.
    - Parameter valueFactory: The function used to generate a value for the key.
    - Parameter factoryArgument: An argument value to pass into .
    - Returns: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.

    */
    open func GetOrAdd<UTArg : SGBridgeGenericValue>(key : TKey, valueFactory : dotnet.System.Func_3<TKey,UTArg,TValue>, factoryArgument : UTArg) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__GetOrAdd_1__3__TKey_System_Func_TKey_UTArg_TValue__UTArg(TKey.get_type_handle(), TValue.get_type_handle(), UTArg.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), valueFactory.get_handle(), factoryArgument.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // delegate closure overload
    open func GetOrAdd<UTArg : SGBridgeGenericValue>(key : TKey, valueFactory : @escaping (TKey, UTArg) throws -> TValue, factoryArgument : UTArg) throws -> TValue {
        let del_valueFactory = try dotnet.System.Func_3<TKey,UTArg,TValue>(valueFactory);
        return try GetOrAdd(key: key, valueFactory: del_valueFactory, factoryArgument: factoryArgument);
    }
    // System.Collections.Generic.KeyValuePair<TKey,TValue>[] ToArray()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
    /**
    Copies the key and value pairs stored in the  to a new array.

    - Returns: A new array containing a snapshot of key and value pairs copied from the .

    */
    open func ToArray() throws -> dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_System_Collections_Generic_KeyValuePair_TKey_TValue_Array__ToArray_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>(hndl : __return);
        }
    }
    // bool TryAdd(TKey, TValue)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
    /**
    Attempts to add the specified key and value to the .

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add. The value can be   for reference types.
    - Returns: 
         if the key/value pair was added to the  successfully;  if the key already exists.

    */
    open func TryAdd(key : TKey, value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__TryAdd_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
    /**
    Attempts to get the value associated with the specified key from the .

    - Parameter key: The key of the value to get.
    - Parameter value: When this method returns, contains the object from the  that has the specified key, or the default value of the type if the operation failed.
    - Returns: 
         if the key was found in the ; otherwise, .

    */
    open /* method final */ func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryRemove(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Removes a key and value from the dictionary.

    - Parameter item: The  representing the key and value to remove.
    - Returns: 
         if the key and value represented by  are successfully found and removed; otherwise, .

    */
    open func TryRemove(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__TryRemove_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryRemove(TKey, ref TValue)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
    /**
    Attempts to remove and return the value that has the specified key from the .

    - Parameter key: The key of the element to remove and return.
    - Parameter value: When this method returns, contains the object removed from the , or the default value of  the  type if  does not exist.
    - Returns: 
         if the object was removed successfully; otherwise, .

    */
    open func TryRemove(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__TryRemove_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryUpdate(TKey, TValue, TValue)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
    /**
    Updates the value associated with  to  if the existing value with  is equal to .

    - Parameter key: The key of the value that is compared with  and possibly replaced.
    - Parameter newValue: The value that replaces the value of the element that has the specified  if the comparison results in equality.
    - Parameter comparisonValue: The value that is compared with the value of the element that has the specified .
    - Returns: 
         if the value with  was equal to  and was replaced with ; otherwise, .

    */
    open func TryUpdate(key : TKey, newValue : TValue, comparisonValue : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__TryUpdate_0__3__TKey_TValue_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), newValue.to_gval(), comparisonValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TKey> get_Comparer()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_System_Collections_Generic_IEqualityComparer_TKey___get_Comparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_bool__get_IsEmpty_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<TKey> get_Keys()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_System_Collections_Generic_ICollection_TKey___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<TValue> get_Values()
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_System_Collections_Generic_ICollection_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentDictionary_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(TKey, TValue)
// docid: M:System.Collections.Concurrent.ConcurrentDictionary`2.set_Item(`0,`1)
    open /* method final */ func set_Item(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentDictionary_2_void__set_Item_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    Gets the number of key/value pairs contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  is empty.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets a collection containing the keys in the .

    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<TKey> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets a collection that contains the values in the .

    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<TValue> {
        get {
            return try! get_Values();
        }
    }
} // ConcurrentDictionary_2


// type: System.Collections.Concurrent.ConcurrentQueue`1
    /**
    Represents a thread-safe first in-first out (FIFO) collection.

    */
open class ConcurrentQueue_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_ConcurrentQueue_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentQueue_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection.

    - Parameter collection: The collection whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentQueue_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.Clear
    /**
    Removes all objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentQueue_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(System.Collections.Concurrent.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentQueue_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Enqueue(T)
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
    /**
    Adds an object to the end of the .

    - Parameter item: The object to add to the end of the . The value can be a null reference (Nothing in Visual Basic) for reference types.
    */
    open func Enqueue(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentQueue_1_void__Enqueue_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator for the contents of the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentQueue_1_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray
    /**
    Copies the elements stored in the  to a new array.

    - Returns: A new array containing a snapshot of elements copied from the .

    */
    open /* method final */ func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentQueue_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // bool TryDequeue(ref T)
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
    /**
    Tries to remove and return the object at the beginning of the concurrent queue.

    - Parameter result: When this method returns, if the operation was successful,  contains the object removed. If no object was available to be removed, the value is unspecified.
    - Returns: 
         if an element was removed and returned from the beginning of the  successfully; otherwise, .

    */
    open func TryDequeue(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentQueue_1_bool__TryDequeue_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryPeek(ref T)
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
    /**
    Tries to return an object from the beginning of the  without removing it.

    - Parameter result: When this method returns,  contains an object from the beginning of the  or an unspecified value if the operation failed.
    - Returns: 
         if an object was returned successfully; otherwise, .

    */
    open func TryPeek(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentQueue_1_bool__TryPeek_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentQueue_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Concurrent.ConcurrentQueue`1.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentQueue_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  is empty.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
} // ConcurrentQueue_1


// type: System.Collections.Concurrent.ConcurrentStack`1
    /**
    Represents a thread-safe last in-first out (LIFO) collection.

    */
open class ConcurrentStack_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_ConcurrentStack_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentStack_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection.

    - Parameter collection: The collection whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Concurrent_ConcurrentStack_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.Clear
    /**
    Removes all objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentStack_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(System.Collections.Concurrent.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentStack_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentStack_1_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // void Push(T)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
    /**
    Inserts an object at the top of the .

    - Parameter item: The object to push onto the . The value can be a null reference (Nothing in Visual Basic) for reference types.
    */
    open func Push(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentStack_1_void__Push_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PushRange(T[])
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(System.Collections.Concurrent.T[])
    open func PushRange(items : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentStack_1_void__PushRange_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PushRange(T[], System.Int32, System.Int32)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(System.Collections.Concurrent.T[],System.Int32,System.Int32)
    open func PushRange(items : dotnet.System_Arr<T>, startIndex : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_ConcurrentStack_1_void__PushRange_0__3__TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.ToArray
    /**
    Copies the items stored in the  to a new array.

    - Returns: A new array containing a snapshot of elements copied from the .

    */
    open /* method final */ func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentStack_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // bool TryPeek(ref T)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
    /**
    Attempts to return an object from the top of the  without removing it.

    - Parameter result: When this method returns,  contains an object from the top of the  or an unspecified value if the operation failed.
    - Returns: 
         if and object was returned successfully; otherwise, .

    */
    open func TryPeek(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentStack_1_bool__TryPeek_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryPop(ref T)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
    /**
    Attempts to pop and return the object at the top of the .

    - Parameter result: When this method returns, if the operation was successful,  contains the object removed. If no object was available to be removed, the value is unspecified.
    - Returns: 
         if an element was removed and returned from the top of the  successfully; otherwise, .

    */
    open func TryPop(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Concurrent_ConcurrentStack_1_bool__TryPop_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 TryPopRange(T[])
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(System.Collections.Concurrent.T[])
    open func TryPopRange(items : dotnet.System_Arr<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentStack_1_i32__TryPopRange_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 TryPopRange(T[], System.Int32, System.Int32)
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(System.Collections.Concurrent.T[],System.Int32,System.Int32)
    open func TryPopRange(items : dotnet.System_Arr<T>, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentStack_1_i32__TryPopRange_0__3__TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentStack_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Concurrent.ConcurrentStack`1.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_ConcurrentStack_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the  is empty.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
} // ConcurrentStack_1


// type: System.Collections.Concurrent.EnumerablePartitionerOptions
    /**
    Specifies options to control the buffering behavior of a partitioner.

    */
public struct EnumerablePartitionerOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_EnumerablePartitionerOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Collections.Concurrent.EnumerablePartitionerOptions None
    /**
    Use the default behavior, which is to use buffering to achieve optimal performance.

    */
    public static var None : dotnet.System.Collections.Concurrent.EnumerablePartitionerOptions {
        get {
        let __return = dotnet.System.Collections.Concurrent.EnumerablePartitionerOptions(val: System_Collections_Concurrent_EnumerablePartitionerOptions_get_None());
            return __return;
        }
    }
    // static field: System.Collections.Concurrent.EnumerablePartitionerOptions NoBuffering
    /**
    Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).

    */
    public static var NoBuffering : dotnet.System.Collections.Concurrent.EnumerablePartitionerOptions {
        get {
        let __return = dotnet.System.Collections.Concurrent.EnumerablePartitionerOptions(val: System_Collections_Concurrent_EnumerablePartitionerOptions_get_NoBuffering());
            return __return;
        }
    }
} // EnumerablePartitionerOptions


// type: System.Collections.Concurrent.IProducerConsumerCollection`1
    /**
    Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as  can use the collection as the underlying storage mechanism.

    */
open class IProducerConsumerCollection_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Collections_Concurrent_IProducerConsumerCollection_1,
    System_Collections_ICollection
{
    public typealias T_IProducerConsumerCollection_1 = T;
    public typealias T_IEnumerable_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_IProducerConsumerCollection_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(System.Collections.Concurrent.T[],System.Int32)
    open func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Concurrent_IProducerConsumerCollection_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
    /**
    Copies the elements contained in the  to a new array.

    - Returns: A new array containing the elements copied from the .

    */
    open func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_IProducerConsumerCollection_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // bool TryAdd(T)
// docid: M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
    /**
    Attempts to add an object to the .

    - Parameter item: The object to add to the .
    - Returns: 
         if the object was added successfully; otherwise, .

    */
    open func TryAdd(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_IProducerConsumerCollection_1_bool__TryAdd_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryTake(ref T)
// docid: M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
    /**
    Attempts to remove and return an object from the .

    - Parameter item: When this method returns, if the object was removed and returned successfully,  contains the removed object. If no object was available to be removed, the value is unspecified.
    - Returns: 
         if an object was removed and returned successfully; otherwise, .

    */
    open func TryTake(item : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_Concurrent_IProducerConsumerCollection_1_bool__TryTake_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IProducerConsumerCollection_1


// type: System.Collections.Concurrent.OrderablePartitioner`1
    /**
    Represents a particular manner of splitting an orderable data source into multiple partitions.

    */
open class OrderablePartitioner_1<TSource : SGBridgeGenericValue>
    :
    dotnet.System.Collections.Concurrent.Partitioner_1<TSource>
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_OrderablePartitioner_1_get_type_handle(TSource.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions()
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
    /**
    Creates an object that can partition the underlying collection into a variable number of partitions.

    - Returns: An object that can create partitions over the underlying data source.

    */
    open override func GetDynamicPartitions() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_System_Collections_Generic_IEnumerable_TSource___GetDynamicPartitions_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64,TSource>> GetOrderableDynamicPartitions()
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
    /**
    Creates an object that can partition the underlying collection into a variable number of partitions.

    - Returns: An object that can create partitions over the underlying data source.

    */
    open func GetOrderableDynamicPartitions() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<Swift.Int64,TSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_i64_TSource____GetOrderableDynamicPartitions_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>> GetOrderablePartitions(System.Int32)
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
    /**
    Partitions the underlying collection into the specified number of orderable partitions.

    - Parameter partitionCount: The number of partitions to create.
    - Returns: A list containing  enumerators.

    */
    open func GetOrderablePartitions(partitionCount : Swift.Int32) throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<Swift.Int64,TSource>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_System_Collections_Generic_IList_System_Collections_Generic_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_i64_TSource_____GetOrderablePartitions_0__1__i32(TSource.get_type_handle(), &__thrown, self.get_handle(), partitionCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions(System.Int32)
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
    /**
    Partitions the underlying collection into the given number of ordered partitions.

    - Parameter partitionCount: The number of partitions to create.
    - Returns: A list containing  enumerators.

    */
    open override func GetPartitions(partitionCount : Swift.Int32) throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Collections.Generic.IEnumerator_1<TSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_System_Collections_Generic_IList_System_Collections_Generic_System_Collections_Generic_IEnumerator_TSource____GetPartitions_0__1__i32(TSource.get_type_handle(), &__thrown, self.get_handle(), partitionCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_KeysNormalized()
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.get_KeysNormalized
    open func get_KeysNormalized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_bool__get_KeysNormalized_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_KeysOrderedAcrossPartitions()
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.get_KeysOrderedAcrossPartitions
    open func get_KeysOrderedAcrossPartitions() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_bool__get_KeysOrderedAcrossPartitions_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_KeysOrderedInEachPartition()
// docid: M:System.Collections.Concurrent.OrderablePartitioner`1.get_KeysOrderedInEachPartition
    open func get_KeysOrderedInEachPartition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_OrderablePartitioner_1_bool__get_KeysOrderedInEachPartition_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets whether order keys are normalized.

    */
    open var KeysNormalized : Bool {
        get {
            return try! get_KeysNormalized();
        }
    }
    /**
    Gets whether elements in an earlier partition always come before elements in a later partition.

    */
    open var KeysOrderedAcrossPartitions : Bool {
        get {
            return try! get_KeysOrderedAcrossPartitions();
        }
    }
    /**
    Gets whether elements in each partition are yielded in the order of increasing keys.

    */
    open var KeysOrderedInEachPartition : Bool {
        get {
            return try! get_KeysOrderedInEachPartition();
        }
    }
} // OrderablePartitioner_1


// type: System.Collections.Concurrent.Partitioner
public struct Partitioner {
    // System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>> Create(System.Int32, System.Int32)
// docid: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
    /**
    Creates a partitioner that chunks the user-specified range.

    - Parameter fromInclusive: The lower, inclusive bound of the range.
    - Parameter toExclusive: The upper, exclusive bound of the range.
    - Returns: A partitioner.

    */
    public static func Create(fromInclusive : Swift.Int32, toExclusive : Swift.Int32) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<dotnet.System.Tuple_2<Swift.Int32,Swift.Int32>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_System_System_Tuple_i32_i32____Create_0__2__i32_i32(&__thrown, fromInclusive, toExclusive);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
    // System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>> Create(System.Int32, System.Int32, System.Int32)
// docid: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
    /**
    Creates a partitioner that chunks the user-specified range.

    - Parameter fromInclusive: The lower, inclusive bound of the range.
    - Parameter toExclusive: The upper, exclusive bound of the range.
    - Parameter rangeSize: The size of each subrange.
    - Returns: A partitioner.

    */
    public static func Create(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, rangeSize : Swift.Int32) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<dotnet.System.Tuple_2<Swift.Int32,Swift.Int32>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_System_System_Tuple_i32_i32____Create_0__3__i32_i32_i32(&__thrown, fromInclusive, toExclusive, rangeSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
    // System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>> Create(System.Int64, System.Int64)
// docid: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
    /**
    Creates a partitioner that chunks the user-specified range.

    - Parameter fromInclusive: The lower, inclusive bound of the range.
    - Parameter toExclusive: The upper, exclusive bound of the range.
    - Returns: A partitioner.

    */
    public static func Create(fromInclusive : Swift.Int64, toExclusive : Swift.Int64) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<dotnet.System.Tuple_2<Swift.Int64,Swift.Int64>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_System_System_Tuple_i64_i64____Create_0__2__i64_i64(&__thrown, fromInclusive, toExclusive);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
    // System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>> Create(System.Int64, System.Int64, System.Int64)
// docid: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
    /**
    Creates a partitioner that chunks the user-specified range.

    - Parameter fromInclusive: The lower, inclusive bound of the range.
    - Parameter toExclusive: The upper, exclusive bound of the range.
    - Parameter rangeSize: The size of each subrange.
    - Returns: A partitioner.

    */
    public static func Create(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, rangeSize : Swift.Int64) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<dotnet.System.Tuple_2<Swift.Int64,Swift.Int64>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_System_System_Tuple_i64_i64____Create_0__3__i64_i64_i64(&__thrown, fromInclusive, toExclusive, rangeSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
    // System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates an orderable partitioner from a  instance.

    - Parameter source: The enumerable to be partitioned.
    - Returns: An orderable partitioner based on the input array.

    */
    public static func Create<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_UTSource___Create_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
    // System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Concurrent.EnumerablePartitionerOptions)
// docid: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
    /**
    Creates an orderable partitioner from a  instance.

    - Parameter source: The enumerable to be partitioned.
    - Parameter partitionerOptions: Options to control the buffering behavior of the partitioner.
    - Returns: An orderable partitioner based on the input array.

    */
    public static func Create<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, partitionerOptions : dotnet.System.Collections.Concurrent.EnumerablePartitionerOptions) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_UTSource___Create_1__2__System_Collections_Generic_IEnumerable_UTSource__EnumerablePartitionerOptions(UTSource.get_type_handle(), &__thrown, source.get_handle(), partitionerOptions.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
    // System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IList<TSource>, bool)
// docid: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
    /**
    Creates an orderable partitioner from an  instance.

    - Parameter list: The list to be partitioned.
    - Parameter loadBalance: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.
    - Returns: An orderable partitioner based on the input list.

    */
    public static func Create<UTSource : SGBridgeGenericValue>(list : dotnet.System.Collections.Generic.IList_1<UTSource>, loadBalance : Bool) throws -> dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_System_Collections_Concurrent_OrderablePartitioner_UTSource___Create_1__2__System_Collections_Generic_IList_UTSource__bool(UTSource.get_type_handle(), &__thrown, list.get_handle(), Swift.Int32(loadBalance ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Concurrent.OrderablePartitioner_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(TSource[], bool)
} // Partitioner


// type: System.Collections.Concurrent.Partitioner`1
    /**
    Represents a particular manner of splitting a data source into multiple partitions.

    */
open class Partitioner_1<TSource : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Concurrent_Partitioner_1_get_type_handle(TSource.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions()
// docid: M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    /**
    Creates an object that can partition the underlying collection into a variable number of partitions.

    - Returns: An object that can create partitions over the underlying data source.

    */
    open func GetDynamicPartitions() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_1_System_Collections_Generic_IEnumerable_TSource___GetDynamicPartitions_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions(System.Int32)
// docid: M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    /**
    Partitions the underlying collection into the given number of partitions.

    - Parameter partitionCount: The number of partitions to create.
    - Returns: A list containing  enumerators.

    */
    open func GetPartitions(partitionCount : Swift.Int32) throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Collections.Generic.IEnumerator_1<TSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_1_System_Collections_Generic_IList_System_Collections_Generic_System_Collections_Generic_IEnumerator_TSource____GetPartitions_0__1__i32(TSource.get_type_handle(), &__thrown, self.get_handle(), partitionCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsDynamicPartitions()
// docid: M:System.Collections.Concurrent.Partitioner`1.get_SupportsDynamicPartitions
    open func get_SupportsDynamicPartitions() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Concurrent_Partitioner_1_bool__get_SupportsDynamicPartitions_0__0(TSource.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets whether additional partitions can be created dynamically.

    */
    open var SupportsDynamicPartitions : Bool {
        get {
            return try! get_SupportsDynamicPartitions();
        }
    }
} // Partitioner_1


}



public protocol System_Collections_Concurrent_IProducerConsumerCollection_1
    :
    System_Collections_Generic_IEnumerable_1,
    System_Collections_ICollection
    where
        T_IEnumerable_1 == T_IProducerConsumerCollection_1
{
    associatedtype T_IProducerConsumerCollection_1;
}

