// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.AuthenticationSchemeSelector
    /**
    Selects the authentication scheme for an  instance.

    */
public final class AuthenticationSchemeSelector
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_AuthenticationSchemeSelector_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.AuthenticationSchemes Invoke(System.Net.HttpListenerRequest)
// docid: M:System.Net.AuthenticationSchemeSelector.Invoke(System.Net.HttpListenerRequest)
    public func Invoke(httpRequest : dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Net.AuthenticationSchemes {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationSchemeSelector_AuthenticationSchemes__Invoke_0__1__HttpListenerRequest(&__thrown, self.get_handle(), httpRequest.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.AuthenticationSchemes(val: __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.Net.HttpListenerRequest, System.AsyncCallback, System.Object)
// docid: M:System.Net.AuthenticationSchemeSelector.BeginInvoke(System.Net.HttpListenerRequest,System.AsyncCallback,System.Object)
    public func BeginInvoke(httpRequest : dotnet.System.Net.HttpListenerRequest, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationSchemeSelector_IAsyncResult__BeginInvoke_0__3__HttpListenerRequest_AsyncCallback_Object(&__thrown, self.get_handle(), httpRequest.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Net.AuthenticationSchemes EndInvoke(System.IAsyncResult)
// docid: M:System.Net.AuthenticationSchemeSelector.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Net.AuthenticationSchemes {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationSchemeSelector_AuthenticationSchemes__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.AuthenticationSchemes(val: __return);
        }
    }
    public init(_ callback : @escaping (dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Net.AuthenticationSchemes) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Swift.Int32 =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, httpRequest : NonnullHandle) -> Swift.Int32 in
            do
            {
                thrown.pointee = nil;
                let ret = try callback(dotnet.System.Net.HttpListenerRequest(hndl: httpRequest));
                return ret.get_value();
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return 0;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return 0;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, httpRequest : NonnullHandle) -> Swift.Int32
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Swift.Int32;
            return f(thrown, httpRequest);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_AuthenticationSchemeSelector_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.AuthenticationSchemes Invoke(System.Net.HttpListenerRequest)
// docid: M:System.Net.AuthenticationSchemeSelector.Invoke(System.Net.HttpListenerRequest)
    public func callAsFunction(httpRequest : dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Net.AuthenticationSchemes {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationSchemeSelector_AuthenticationSchemes__Invoke_0__1__HttpListenerRequest(&__thrown, self.get_handle(), httpRequest.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.AuthenticationSchemes(val: __return);
        }
    }
} // AuthenticationSchemeSelector


// type: System.Net.HttpListener
    /**
    Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.

    */
public final class HttpListener
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.HttpListener.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Abort()
// docid: M:System.Net.HttpListener.Abort
    /**
    Shuts down the  object immediately, discarding all currently queued requests.

    */
    public func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginGetContext(System.AsyncCallback, System.Object)
// docid: M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)
    /**
    Begins asynchronously retrieving an incoming request.

    - Parameter callback: An  delegate that references the method to invoke when a client request is available.
    - Parameter state: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation completes.
    - Returns: An  object that indicates the status of the asynchronous operation.

    */
    public func BeginGetContext(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_IAsyncResult__BeginGetContext_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public func BeginGetContext(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetContext(callback: del_callback, state: state);
    }
    // void Close()
// docid: M:System.Net.HttpListener.Close
    /**
    Shuts down the .

    */
    public func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Net.HttpListenerContext EndGetContext(System.IAsyncResult)
// docid: M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)
    /**
    Completes an asynchronous operation to retrieve an incoming client request.

    - Parameter asyncResult: An  object that was obtained when the asynchronous operation was started.
    - Returns: An  object that represents the client request.

    */
    public func EndGetContext(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.HttpListenerContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_HttpListenerContext__EndGetContext_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpListenerContext(hndl : __return);
        }
    }
    // System.Net.HttpListenerContext GetContext()
// docid: M:System.Net.HttpListener.GetContext
    /**
    Waits for an incoming request and returns when one is received.

    - Returns: An  object that represents a client request.

    */
    public func GetContext() throws -> dotnet.System.Net.HttpListenerContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_HttpListenerContext__GetContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpListenerContext(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.HttpListenerContext> GetContextAsync()
// docid: M:System.Net.HttpListener.GetContextAsync
    /**
    Waits for an incoming request as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation. The  property on the task object returns an  object that represents a client request.

    */
    public func GetContextAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.HttpListenerContext> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_System_Threading_Tasks_Task_System_Net_HttpListenerContext___GetContextAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Start()
// docid: M:System.Net.HttpListener.Start
    /**
    Allows this instance to receive incoming requests.

    */
    public func Start() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Stop()
// docid: M:System.Net.HttpListener.Stop
    /**
    Causes this instance to stop receiving new incoming requests and terminates processing of all ongoing requests.

    */
    public func Stop() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__Stop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.AuthenticationSchemes get_AuthenticationSchemes()
// docid: M:System.Net.HttpListener.get_AuthenticationSchemes
    public func get_AuthenticationSchemes() throws -> dotnet.System.Net.AuthenticationSchemes {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_AuthenticationSchemes__get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.AuthenticationSchemes(val: __return);
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.Net.AuthenticationSchemes)
// docid: M:System.Net.HttpListener.set_AuthenticationSchemes(System.Net.AuthenticationSchemes)
    public func set_AuthenticationSchemes(value : dotnet.System.Net.AuthenticationSchemes) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_AuthenticationSchemes_0__1__AuthenticationSchemes(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.AuthenticationSchemeSelector get_AuthenticationSchemeSelectorDelegate()
// docid: M:System.Net.HttpListener.get_AuthenticationSchemeSelectorDelegate
    public func get_AuthenticationSchemeSelectorDelegate() throws -> Optional<dotnet.System.Net.AuthenticationSchemeSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_AuthenticationSchemeSelector__get_AuthenticationSchemeSelectorDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.AuthenticationSchemeSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemeSelectorDelegate(System.Net.AuthenticationSchemeSelector)
// docid: M:System.Net.HttpListener.set_AuthenticationSchemeSelectorDelegate(System.Net.AuthenticationSchemeSelector)
    public func set_AuthenticationSchemeSelectorDelegate(value : Optional<dotnet.System.Net.AuthenticationSchemeSelector>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_AuthenticationSchemeSelectorDelegate_0__1__AuthenticationSchemeSelector(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_AuthenticationSchemeSelectorDelegate(value : @escaping (dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Net.AuthenticationSchemes) throws {
        let del_value = try dotnet.System.Net.AuthenticationSchemeSelector(value);
        return try set_AuthenticationSchemeSelectorDelegate(value: del_value);
    }
    // [IsSpecialName] System.Security.Authentication.ExtendedProtection.ServiceNameCollection get_DefaultServiceNames()
// docid: M:System.Net.HttpListener.get_DefaultServiceNames
    public func get_DefaultServiceNames() throws -> dotnet.System.Security.Authentication.ExtendedProtection.ServiceNameCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_ServiceNameCollection__get_DefaultServiceNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Authentication.ExtendedProtection.ServiceNameCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy get_ExtendedProtectionPolicy()
// docid: M:System.Net.HttpListener.get_ExtendedProtectionPolicy
    public func get_ExtendedProtectionPolicy() throws -> dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_ExtendedProtectionPolicy__get_ExtendedProtectionPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
// docid: M:System.Net.HttpListener.set_ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
    public func set_ExtendedProtectionPolicy(value : dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_ExtendedProtectionPolicy_0__1__ExtendedProtectionPolicy(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.HttpListener.ExtendedProtectionSelector get_ExtendedProtectionSelectorDelegate()
// docid: M:System.Net.HttpListener.get_ExtendedProtectionSelectorDelegate
    public func get_ExtendedProtectionSelectorDelegate() throws -> Optional<dotnet.System.Net.HttpListener_ExtendedProtectionSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_HttpListener_ExtendedProtectionSelector__get_ExtendedProtectionSelectorDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.HttpListener_ExtendedProtectionSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExtendedProtectionSelectorDelegate(System.Net.HttpListener.ExtendedProtectionSelector)
// docid: M:System.Net.HttpListener.set_ExtendedProtectionSelectorDelegate(System.Net.HttpListener.ExtendedProtectionSelector)
    public func set_ExtendedProtectionSelectorDelegate(value : Optional<dotnet.System.Net.HttpListener_ExtendedProtectionSelector>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_ExtendedProtectionSelectorDelegate_0__1__HttpListener_ExtendedProtectionSelector(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ExtendedProtectionSelectorDelegate(value : @escaping (dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy) throws {
        let del_value = try dotnet.System.Net.HttpListener_ExtendedProtectionSelector(value);
        return try set_ExtendedProtectionSelectorDelegate(value: del_value);
    }
    // [IsSpecialName] bool get_IgnoreWriteExceptions()
// docid: M:System.Net.HttpListener.get_IgnoreWriteExceptions
    public func get_IgnoreWriteExceptions() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_bool__get_IgnoreWriteExceptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreWriteExceptions(bool)
// docid: M:System.Net.HttpListener.set_IgnoreWriteExceptions(System.Boolean)
    public func set_IgnoreWriteExceptions(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_IgnoreWriteExceptions_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsListening()
// docid: M:System.Net.HttpListener.get_IsListening
    public func get_IsListening() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_bool__get_IsListening_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSupported()
// docid: M:System.Net.HttpListener.get_IsSupported
    public class func get_IsSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_bool__get_IsSupported_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.HttpListenerPrefixCollection get_Prefixes()
// docid: M:System.Net.HttpListener.get_Prefixes
    public func get_Prefixes() throws -> dotnet.System.Net.HttpListenerPrefixCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_HttpListenerPrefixCollection__get_Prefixes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpListenerPrefixCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Realm()
// docid: M:System.Net.HttpListener.get_Realm
    public func get_Realm() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_String__get_Realm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Realm(System.String)
// docid: M:System.Net.HttpListener.set_Realm(System.String)
    public func set_Realm(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_Realm_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.HttpListenerTimeoutManager get_TimeoutManager()
// docid: M:System.Net.HttpListener.get_TimeoutManager
    public func get_TimeoutManager() throws -> dotnet.System.Net.HttpListenerTimeoutManager {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_HttpListenerTimeoutManager__get_TimeoutManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpListenerTimeoutManager(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_UnsafeConnectionNtlmAuthentication()
// docid: M:System.Net.HttpListener.get_UnsafeConnectionNtlmAuthentication
    public func get_UnsafeConnectionNtlmAuthentication() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_bool__get_UnsafeConnectionNtlmAuthentication_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UnsafeConnectionNtlmAuthentication(bool)
// docid: M:System.Net.HttpListener.set_UnsafeConnectionNtlmAuthentication(System.Boolean)
    public func set_UnsafeConnectionNtlmAuthentication(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListener_void__set_UnsafeConnectionNtlmAuthentication_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the delegate called to determine the protocol used to authenticate clients.

    */
    public var AuthenticationSchemeSelectorDelegate : Optional<dotnet.System.Net.AuthenticationSchemeSelector> {
        get {
            return try! get_AuthenticationSchemeSelectorDelegate();
        }
        set(v) {
            return try! set_AuthenticationSchemeSelectorDelegate(value: v!);
        }
    }
    /**
    Gets or sets the scheme used to authenticate clients.

    */
    public var AuthenticationSchemes : dotnet.System.Net.AuthenticationSchemes {
        get {
            return try! get_AuthenticationSchemes();
        }
        set(v) {
            return try! set_AuthenticationSchemes(value: v);
        }
    }
    /**
    Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.

    */
    public var DefaultServiceNames : dotnet.System.Security.Authentication.ExtendedProtection.ServiceNameCollection {
        get {
            return try! get_DefaultServiceNames();
        }
    }
    /**
    Gets or sets the  to use for extended protection for a session.

    */
    public var ExtendedProtectionPolicy : dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy {
        get {
            return try! get_ExtendedProtectionPolicy();
        }
        set(v) {
            return try! set_ExtendedProtectionPolicy(value: v);
        }
    }
    /**
    Gets or sets the delegate called to determine the  to use for each request.

    */
    public var ExtendedProtectionSelectorDelegate : Optional<dotnet.System.Net.HttpListener_ExtendedProtectionSelector> {
        get {
            return try! get_ExtendedProtectionSelectorDelegate();
        }
        set(v) {
            return try! set_ExtendedProtectionSelectorDelegate(value: v!);
        }
    }
    /**
    Gets or sets a  value that specifies whether your application receives exceptions that occur when an  sends the response to the client.

    */
    public var IgnoreWriteExceptions : Bool {
        get {
            return try! get_IgnoreWriteExceptions();
        }
        set(v) {
            return try! set_IgnoreWriteExceptions(value: v);
        }
    }
    /**
    Gets a value that indicates whether  has been started.

    */
    public var IsListening : Bool {
        get {
            return try! get_IsListening();
        }
    }
    /**
    Gets a value that indicates whether  can be used with the current operating system.

    */
    public static var IsSupported : Bool {
        get {
            return try! get_IsSupported();
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) prefixes handled by this  object.

    */
    public var Prefixes : dotnet.System.Net.HttpListenerPrefixCollection {
        get {
            return try! get_Prefixes();
        }
    }
    /**
    Gets or sets the realm, or resource partition, associated with this  object.

    */
    public var Realm : Optional<dotnet.System.String> {
        get {
            return try! get_Realm();
        }
        set(v) {
            return try! set_Realm(value: v!);
        }
    }
    /**
    The timeout manager for this  instance.

    */
    public var TimeoutManager : dotnet.System.Net.HttpListenerTimeoutManager {
        get {
            return try! get_TimeoutManager();
        }
    }
    /**
    Gets or sets a  value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.

    */
    public var UnsafeConnectionNtlmAuthentication : Bool {
        get {
            return try! get_UnsafeConnectionNtlmAuthentication();
        }
        set(v) {
            return try! set_UnsafeConnectionNtlmAuthentication(value: v);
        }
    }
} // HttpListener


// type: System.Net.HttpListener+ExtendedProtectionSelector
    /**
    A delegate called to determine the  to use for each  request.

    */
public final class HttpListener_ExtendedProtectionSelector
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListener_ExtendedProtectionSelector_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy Invoke(System.Net.HttpListenerRequest)
// docid: M:System.Net.HttpListener.ExtendedProtectionSelector.Invoke(System.Net.HttpListenerRequest)
    public func Invoke(request : dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_ExtendedProtectionSelector_ExtendedProtectionPolicy__Invoke_0__1__HttpListenerRequest(&__thrown, self.get_handle(), request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.Net.HttpListenerRequest, System.AsyncCallback, System.Object)
// docid: M:System.Net.HttpListener.ExtendedProtectionSelector.BeginInvoke(System.Net.HttpListenerRequest,System.AsyncCallback,System.Object)
    public func BeginInvoke(request : dotnet.System.Net.HttpListenerRequest, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_ExtendedProtectionSelector_IAsyncResult__BeginInvoke_0__3__HttpListenerRequest_AsyncCallback_Object(&__thrown, self.get_handle(), request.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy EndInvoke(System.IAsyncResult)
// docid: M:System.Net.HttpListener.ExtendedProtectionSelector.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_ExtendedProtectionSelector_ExtendedProtectionPolicy__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy(hndl : __return);
        }
    }
    public init(_ callback : @escaping (dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, request : NonnullHandle) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback(dotnet.System.Net.HttpListenerRequest(hndl: request));
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, request : NonnullHandle) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> NonnullHandle;
            return f(thrown, request);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpListener_ExtendedProtectionSelector_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy Invoke(System.Net.HttpListenerRequest)
// docid: M:System.Net.HttpListener.ExtendedProtectionSelector.Invoke(System.Net.HttpListenerRequest)
    public func callAsFunction(request : dotnet.System.Net.HttpListenerRequest) throws -> dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListener_ExtendedProtectionSelector_ExtendedProtectionPolicy__Invoke_0__1__HttpListenerRequest(&__thrown, self.get_handle(), request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy(hndl : __return);
        }
    }
} // HttpListener_ExtendedProtectionSelector


// type: System.Net.HttpListenerBasicIdentity
    /**
    Holds the user name and password from a basic authentication request.

    */
open class HttpListenerBasicIdentity
    :
    dotnet.System.Security.Principal.GenericIdentity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerBasicIdentity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Net.HttpListenerBasicIdentity.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the specified user name and password.

    - Parameter username: The user name.
    - Parameter password: The password.
    */
    public init(username : dotnet.System.String, password : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpListenerBasicIdentity_ctor_0__2__String_String(&__thrown, username.get_handle(), password.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Password()
// docid: M:System.Net.HttpListenerBasicIdentity.get_Password
    open func get_Password() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerBasicIdentity_String__get_Password_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Indicates the password from a basic authentication attempt.

    */
    open var Password : dotnet.System.String {
        get {
            return try! get_Password();
        }
    }
} // HttpListenerBasicIdentity


// type: System.Net.HttpListenerContext
    /**
    Provides access to the request and response objects used by the  class. This class cannot be inherited.

    */
public final class HttpListenerContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(System.String)
// docid: M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
    /**
    Accept a WebSocket connection as an asynchronous operation.

    - Parameter subProtocol: The supported WebSocket sub-protocol.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns an  object.

    */
    public func AcceptWebSocketAsync(subProtocol : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.WebSockets.HttpListenerWebSocketContext> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerContext_System_Threading_Tasks_Task_System_Net_WebSockets_HttpListenerWebSocketContext___AcceptWebSocketAsync_0__1__String(&__thrown, self.get_handle(), subProtocol?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(System.String, System.Int32, System.TimeSpan)
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(System.String, System.Int32, System.TimeSpan, System.ArraySegment<System.Byte>)
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(System.String, System.TimeSpan)
    // [IsSpecialName] System.Net.HttpListenerRequest get_Request()
// docid: M:System.Net.HttpListenerContext.get_Request
    public func get_Request() throws -> dotnet.System.Net.HttpListenerRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerContext_HttpListenerRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpListenerRequest(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.HttpListenerResponse get_Response()
// docid: M:System.Net.HttpListenerContext.get_Response
    public func get_Response() throws -> dotnet.System.Net.HttpListenerResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerContext_HttpListenerResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpListenerResponse(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.IPrincipal get_User()
// docid: M:System.Net.HttpListenerContext.get_User
    public func get_User() throws -> Optional<dotnet.System.Security.Principal.IPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerContext_IPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.IPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the  that represents a client's request for a resource.

    */
    public var Request : dotnet.System.Net.HttpListenerRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    Gets the  object that will be sent to the client in response to the client's request.

    */
    public var Response : dotnet.System.Net.HttpListenerResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    Gets an object used to obtain identity, authentication information, and security roles for the client whose request is represented by this  object.

    */
    public var User : Optional<dotnet.System.Security.Principal.IPrincipal> {
        get {
            return try! get_User();
        }
    }
} // HttpListenerContext


// type: System.Net.HttpListenerException
    /**
    The exception that is thrown when an error occurs processing an HTTP request.

    */
open class HttpListenerException
    :
    dotnet.System.ComponentModel.Win32Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.HttpListenerException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpListenerException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Net.HttpListenerException.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class using the specified error code.

    - Parameter errorCode: A  value that identifies the error that occurred.
    */
    public init(errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpListenerException_ctor_0__1__i32(&__thrown, errorCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.String)
// docid: M:System.Net.HttpListenerException.#ctor(System.Int32,System.String)
    /**
    Initializes a new instance of the  class using the specified error code and message.

    - Parameter errorCode: A  value that identifies the error that occurred.
    - Parameter message: A  that describes the error that occurred.
    */
    public init(errorCode : Swift.Int32, message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpListenerException_ctor_0__2__i32_String(&__thrown, errorCode, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_ErrorCode()
// docid: M:System.Net.HttpListenerException.get_ErrorCode
    open override func get_ErrorCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerException_i32__get_ErrorCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a value that identifies the error that occurred.

    */
    open override var ErrorCode : Swift.Int32 {
        get {
            return try! get_ErrorCode();
        }
    }
} // HttpListenerException


// type: System.Net.HttpListenerPrefixCollection
    /**
    Represents the collection used to store Uniform Resource Identifier (URI) prefixes for  objects.

    */
open class HttpListenerPrefixCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerPrefixCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.String)
// docid: M:System.Net.HttpListenerPrefixCollection.Add(System.String)
    /**
    Adds a Uniform Resource Identifier (URI) prefix to the collection.

    - Parameter uriPrefix: A  that identifies the URI information that is compared in incoming requests. The prefix must be terminated with a forward slash ("/").
    */
    open /* method final */ func Add(uriPrefix : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerPrefixCollection_void__Add_0__1__String(&__thrown, self.get_handle(), uriPrefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.HttpListenerPrefixCollection.Clear
    /**
    Removes all the Uniform Resource Identifier (URI) prefixes from the collection.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerPrefixCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Net.HttpListenerPrefixCollection.Contains(System.String)
    /**
    Returns a  value that indicates whether the specified prefix is contained in the collection.

    - Parameter uriPrefix: A  that contains the Uniform Resource Identifier (URI) prefix to test.
    - Returns: 
         if this collection contains the prefix specified by ; otherwise, .

    */
    open /* method final */ func Contains(uriPrefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerPrefixCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), uriPrefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the contents of an  to the specified array.

    - Parameter array: The one dimensional  that receives the Uniform Resource Identifier (URI) prefix strings in this collection.
    - Parameter offset: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System.Array, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerPrefixCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.String[], System.Int32)
// docid: M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)
    /**
    Copies the contents of an  to the specified string array.

    - Parameter array: The one dimensional string array that receives the Uniform Resource Identifier (URI) prefix strings in this collection.
    - Parameter offset: The zero-based index in  at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.String>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerPrefixCollection_void__CopyTo_0__2__StringArray_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.String> GetEnumerator()
// docid: M:System.Net.HttpListenerPrefixCollection.GetEnumerator
    /**
    Returns an object that can be used to iterate through the collection.

    - Returns: An object that implements the  interface and provides access to the strings in this collection.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerPrefixCollection_System_Collections_Generic_IEnumerator_string___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.String)
// docid: M:System.Net.HttpListenerPrefixCollection.Remove(System.String)
    /**
    Removes the specified Uniform Resource Identifier (URI) from the list of prefixes handled by the  object.

    - Parameter uriPrefix: A  that contains the URI prefix to remove.
    - Returns: 
         if the  was found in the  and removed; otherwise .

    */
    open /* method final */ func Remove(uriPrefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerPrefixCollection_bool__Remove_0__1__String(&__thrown, self.get_handle(), uriPrefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.HttpListenerPrefixCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerPrefixCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Net.HttpListenerPrefixCollection.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerPrefixCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Net.HttpListenerPrefixCollection.get_IsSynchronized
    open func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerPrefixCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the number of prefixes contained in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to the collection is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value that indicates whether access to the collection is synchronized (thread-safe).

    */
    open var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
} // HttpListenerPrefixCollection


// type: System.Net.HttpListenerRequest
    /**
    Describes an incoming HTTP request to an  object. This class cannot be inherited.

    */
public final class HttpListenerRequest
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerRequest_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.IAsyncResult BeginGetClientCertificate(System.AsyncCallback, System.Object)
// docid: M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request for the client's X.509 v.3 certificate.

    - Parameter requestCallback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter state: A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.
    - Returns: An  that indicates the status of the operation.

    */
    public func BeginGetClientCertificate(requestCallback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_IAsyncResult__BeginGetClientCertificate_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), requestCallback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public func BeginGetClientCertificate(requestCallback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_requestCallback = try dotnet.System.AsyncCallback(requestCallback);
        return try BeginGetClientCertificate(requestCallback: del_requestCallback, state: state);
    }
    // System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate(System.IAsyncResult)
// docid: M:System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
    /**
    Ends an asynchronous request for the client's X.509 v.3 certificate.

    - Parameter asyncResult: The pending request for the certificate.
    - Returns: The  object that is returned when the operation started.

    */
    public func EndGetClientCertificate(asyncResult : dotnet.System.IAsyncResult) throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_X509Certificate2__EndGetClientCertificate_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate()
// docid: M:System.Net.HttpListenerRequest.GetClientCertificate
    /**
    Retrieves the client's X.509 v.3 certificate.

    - Returns: A  object that contains the client's X.509 v.3 certificate.

    */
    public func GetClientCertificate() throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_X509Certificate2__GetClientCertificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync()
// docid: M:System.Net.HttpListenerRequest.GetClientCertificateAsync
    /**
    Retrieves the client's X.509 v.3 certificate as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  object that contains the client's X.509 v.3 certificate.

    */
    public func GetClientCertificateAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_System_Threading_Tasks_Task_System_Security_Cryptography_X509Certificates_X509Certificate2___GetClientCertificateAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String[] get_AcceptTypes()
// docid: M:System.Net.HttpListenerRequest.get_AcceptTypes
    public func get_AcceptTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_StringArray__get_AcceptTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_ClientCertificateError()
// docid: M:System.Net.HttpListenerRequest.get_ClientCertificateError
    public func get_ClientCertificateError() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_i32__get_ClientCertificateError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_ContentEncoding()
// docid: M:System.Net.HttpListenerRequest.get_ContentEncoding
    public func get_ContentEncoding() throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_Encoding__get_ContentEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength64()
// docid: M:System.Net.HttpListenerRequest.get_ContentLength64
    public func get_ContentLength64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_i64__get_ContentLength64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.HttpListenerRequest.get_ContentType
    public func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Net.CookieCollection get_Cookies()
// docid: M:System.Net.HttpListenerRequest.get_Cookies
    public func get_Cookies() throws -> dotnet.System.Net.CookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_CookieCollection__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.CookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasEntityBody()
// docid: M:System.Net.HttpListenerRequest.get_HasEntityBody
    public func get_HasEntityBody() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_bool__get_HasEntityBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameValueCollection get_Headers()
// docid: M:System.Net.HttpListenerRequest.get_Headers
    public func get_Headers() throws -> dotnet.System.Collections.Specialized.NameValueCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_NameValueCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameValueCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_HttpMethod()
// docid: M:System.Net.HttpListenerRequest.get_HttpMethod
    public func get_HttpMethod() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_HttpMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.Stream get_InputStream()
// docid: M:System.Net.HttpListenerRequest.get_InputStream
    public func get_InputStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_Stream__get_InputStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsAuthenticated()
// docid: M:System.Net.HttpListenerRequest.get_IsAuthenticated
    public func get_IsAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_bool__get_IsAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLocal()
// docid: M:System.Net.HttpListenerRequest.get_IsLocal
    public func get_IsLocal() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_bool__get_IsLocal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecureConnection()
// docid: M:System.Net.HttpListenerRequest.get_IsSecureConnection
    public func get_IsSecureConnection() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_bool__get_IsSecureConnection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsWebSocketRequest()
// docid: M:System.Net.HttpListenerRequest.get_IsWebSocketRequest
    public func get_IsWebSocketRequest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_bool__get_IsWebSocketRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_KeepAlive()
// docid: M:System.Net.HttpListenerRequest.get_KeepAlive
    public func get_KeepAlive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_bool__get_KeepAlive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.IPEndPoint get_LocalEndPoint()
// docid: M:System.Net.HttpListenerRequest.get_LocalEndPoint
    public func get_LocalEndPoint() throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_IPEndPoint__get_LocalEndPoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Version get_ProtocolVersion()
// docid: M:System.Net.HttpListenerRequest.get_ProtocolVersion
    public func get_ProtocolVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_Version__get_ProtocolVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameValueCollection get_QueryString()
// docid: M:System.Net.HttpListenerRequest.get_QueryString
    public func get_QueryString() throws -> dotnet.System.Collections.Specialized.NameValueCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_NameValueCollection__get_QueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameValueCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RawUrl()
// docid: M:System.Net.HttpListenerRequest.get_RawUrl
    public func get_RawUrl() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_RawUrl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Net.IPEndPoint get_RemoteEndPoint()
// docid: M:System.Net.HttpListenerRequest.get_RemoteEndPoint
    public func get_RemoteEndPoint() throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_IPEndPoint__get_RemoteEndPoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Guid get_RequestTraceIdentifier()
// docid: M:System.Net.HttpListenerRequest.get_RequestTraceIdentifier
    public func get_RequestTraceIdentifier() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_Guid__get_RequestTraceIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ServiceName()
// docid: M:System.Net.HttpListenerRequest.get_ServiceName
    public func get_ServiceName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_ServiceName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Net.TransportContext get_TransportContext()
// docid: M:System.Net.HttpListenerRequest.get_TransportContext
    public func get_TransportContext() throws -> dotnet.System.Net.TransportContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_TransportContext__get_TransportContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.TransportContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_Url()
// docid: M:System.Net.HttpListenerRequest.get_Url
    public func get_Url() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_Uri__get_Url_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Uri get_UrlReferrer()
// docid: M:System.Net.HttpListenerRequest.get_UrlReferrer
    public func get_UrlReferrer() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_Uri__get_UrlReferrer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_UserAgent()
// docid: M:System.Net.HttpListenerRequest.get_UserAgent
    public func get_UserAgent() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_UserAgent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_UserHostAddress()
// docid: M:System.Net.HttpListenerRequest.get_UserHostAddress
    public func get_UserHostAddress() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_UserHostAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_UserHostName()
// docid: M:System.Net.HttpListenerRequest.get_UserHostName
    public func get_UserHostName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_String__get_UserHostName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String[] get_UserLanguages()
// docid: M:System.Net.HttpListenerRequest.get_UserLanguages
    public func get_UserLanguages() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerRequest_StringArray__get_UserLanguages_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the MIME types accepted by the client.

    */
    public var AcceptTypes : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_AcceptTypes();
        }
    }
    /**
    Gets an error code that identifies a problem with the  provided by the client.

    */
    public var ClientCertificateError : Swift.Int32 {
        get {
            return try! get_ClientCertificateError();
        }
    }
    /**
    Gets the content encoding that can be used with data sent with the request.

    */
    public var ContentEncoding : dotnet.System.Text.Encoding {
        get {
            return try! get_ContentEncoding();
        }
    }
    /**
    Gets the length of the body data included in the request.

    */
    public var ContentLength64 : Swift.Int64 {
        get {
            return try! get_ContentLength64();
        }
    }
    /**
    Gets the MIME type of the body data included in the request.

    */
    public var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
    }
    /**
    Gets the cookies sent with the request.

    */
    public var Cookies : dotnet.System.Net.CookieCollection {
        get {
            return try! get_Cookies();
        }
    }
    /**
    Gets a  value that indicates whether the request has associated body data.

    */
    public var HasEntityBody : Bool {
        get {
            return try! get_HasEntityBody();
        }
    }
    /**
    Gets the collection of header name/value pairs sent in the request.

    */
    public var Headers : dotnet.System.Collections.Specialized.NameValueCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets the HTTP method specified by the client.

    */
    public var HttpMethod : dotnet.System.String {
        get {
            return try! get_HttpMethod();
        }
    }
    /**
    Gets a stream that contains the body data sent by the client.

    */
    public var InputStream : dotnet.System.IO.Stream {
        get {
            return try! get_InputStream();
        }
    }
    /**
    Gets a  value that indicates whether the client sending this request is authenticated.

    */
    public var IsAuthenticated : Bool {
        get {
            return try! get_IsAuthenticated();
        }
    }
    /**
    Gets a  value that indicates whether the request is sent from the local computer.

    */
    public var IsLocal : Bool {
        get {
            return try! get_IsLocal();
        }
    }
    /**
    Gets a  value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.

    */
    public var IsSecureConnection : Bool {
        get {
            return try! get_IsSecureConnection();
        }
    }
    /**
    Gets a  value that indicates whether the TCP connection was  a WebSocket request.

    */
    public var IsWebSocketRequest : Bool {
        get {
            return try! get_IsWebSocketRequest();
        }
    }
    /**
    Gets a  value that indicates whether the client requests a persistent connection.

    */
    public var KeepAlive : Bool {
        get {
            return try! get_KeepAlive();
        }
    }
    /**
    Gets the server IP address and port number to which the request is directed.

    */
    public var LocalEndPoint : dotnet.System.Net.IPEndPoint {
        get {
            return try! get_LocalEndPoint();
        }
    }
    /**
    Gets the HTTP version used by the requesting client.

    */
    public var ProtocolVersion : dotnet.System.Version {
        get {
            return try! get_ProtocolVersion();
        }
    }
    /**
    Gets the query string included in the request.

    */
    public var QueryString : dotnet.System.Collections.Specialized.NameValueCollection {
        get {
            return try! get_QueryString();
        }
    }
    /**
    Gets the URL information (without the host and port) requested by the client.

    */
    public var RawUrl : Optional<dotnet.System.String> {
        get {
            return try! get_RawUrl();
        }
    }
    /**
    Gets the client IP address and port number from which the request originated.

    */
    public var RemoteEndPoint : dotnet.System.Net.IPEndPoint {
        get {
            return try! get_RemoteEndPoint();
        }
    }
    /**
    Gets the request identifier of the incoming HTTP request.

    */
    public var RequestTraceIdentifier : dotnet.System.Guid {
        get {
            return try! get_RequestTraceIdentifier();
        }
    }
    /**
    Gets the Service Provider Name (SPN) that the client sent on the request.

    */
    public var ServiceName : Optional<dotnet.System.String> {
        get {
            return try! get_ServiceName();
        }
    }
    /**
    Gets the  for the client request.

    */
    public var TransportContext : dotnet.System.Net.TransportContext {
        get {
            return try! get_TransportContext();
        }
    }
    /**
    Gets the  object requested by the client.

    */
    public var Url : Optional<dotnet.System.Uri> {
        get {
            return try! get_Url();
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.

    */
    public var UrlReferrer : Optional<dotnet.System.Uri> {
        get {
            return try! get_UrlReferrer();
        }
    }
    /**
    Gets the user agent presented by the client.

    */
    public var UserAgent : dotnet.System.String {
        get {
            return try! get_UserAgent();
        }
    }
    /**
    Gets the server IP address and port number to which the request is directed.

    */
    public var UserHostAddress : dotnet.System.String {
        get {
            return try! get_UserHostAddress();
        }
    }
    /**
    Gets the DNS name and, if provided, the port number specified by the client.

    */
    public var UserHostName : dotnet.System.String {
        get {
            return try! get_UserHostName();
        }
    }
    /**
    Gets the natural languages that are preferred for the response.

    */
    public var UserLanguages : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_UserLanguages();
        }
    }
} // HttpListenerRequest


// type: System.Net.HttpListenerResponse
    /**
    Represents a response to a request being handled by an  object.

    */
public final class HttpListenerResponse
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerResponse_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Abort()
// docid: M:System.Net.HttpListenerResponse.Abort
    /**
    Closes the connection to the client without sending a response.

    */
    public func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHeader(System.String, System.String)
// docid: M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)
    /**
    Adds the specified header and value to the HTTP headers for this response.

    - Parameter name: The name of the HTTP header to set.
    - Parameter value: The value for the  header.
    */
    public func AddHeader(name : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__AddHeader_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendCookie(System.Net.Cookie)
// docid: M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)
    /**
    Adds the specified  to the collection of cookies for this response.

    - Parameter cookie: The  to add to the collection to be sent with this response.
    */
    public func AppendCookie(cookie : dotnet.System.Net.Cookie) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__AppendCookie_0__1__Cookie(&__thrown, self.get_handle(), cookie.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendHeader(System.String, System.String)
// docid: M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)
    /**
    Appends a value to the specified HTTP header to be sent with this response.

    - Parameter name: The name of the HTTP header to append  to.
    - Parameter value: The value to append to the  header.
    */
    public func AppendHeader(name : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__AppendHeader_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Net.HttpListenerResponse.Close
    /**
    Sends the response to the client and releases the resources held by this  instance.

    */
    public func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close(System.Byte[], bool)
// docid: M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)
    /**
    Returns the specified byte array to the client and releases the resources held by this  instance.

    - Parameter responseEntity: A  array that contains the response to send to the client.
    - Parameter willBlock: 
         to block execution while flushing the stream to the client; otherwise, .
    */
    public func Close(responseEntity : dotnet.System_Arr<Swift.UInt8>, willBlock : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__Close_0__2__u8Array_bool(&__thrown, self.get_handle(), responseEntity.get_handle(), Swift.Int32(willBlock ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyFrom(System.Net.HttpListenerResponse)
// docid: M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)
    /**
    Copies properties from the specified  to this response.

    - Parameter templateResponse: The  instance to copy.
    */
    public func CopyFrom(templateResponse : dotnet.System.Net.HttpListenerResponse) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__CopyFrom_0__1__HttpListenerResponse(&__thrown, self.get_handle(), templateResponse.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Redirect(System.String)
// docid: M:System.Net.HttpListenerResponse.Redirect(System.String)
    /**
    Configures the response to redirect the client to the specified URL.

    - Parameter url: The URL that the client should use to locate the requested resource.
    */
    public func Redirect(url : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__Redirect_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCookie(System.Net.Cookie)
// docid: M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)
    /**
    Adds or updates a  in the collection of cookies sent with this response.

    - Parameter cookie: A  for this response.
    */
    public func SetCookie(cookie : dotnet.System.Net.Cookie) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__SetCookie_0__1__Cookie(&__thrown, self.get_handle(), cookie.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_ContentEncoding()
// docid: M:System.Net.HttpListenerResponse.get_ContentEncoding
    public func get_ContentEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_Encoding__get_ContentEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentEncoding(System.Text.Encoding)
// docid: M:System.Net.HttpListenerResponse.set_ContentEncoding(System.Text.Encoding)
    public func set_ContentEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_ContentEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength64()
// docid: M:System.Net.HttpListenerResponse.get_ContentLength64
    public func get_ContentLength64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_i64__get_ContentLength64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentLength64(System.Int64)
// docid: M:System.Net.HttpListenerResponse.set_ContentLength64(System.Int64)
    public func set_ContentLength64(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_ContentLength64_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.HttpListenerResponse.get_ContentType
    public func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:System.Net.HttpListenerResponse.set_ContentType(System.String)
    public func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.CookieCollection get_Cookies()
// docid: M:System.Net.HttpListenerResponse.get_Cookies
    public func get_Cookies() throws -> dotnet.System.Net.CookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_CookieCollection__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.CookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookies(System.Net.CookieCollection)
// docid: M:System.Net.HttpListenerResponse.set_Cookies(System.Net.CookieCollection)
    public func set_Cookies(value : dotnet.System.Net.CookieCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_Cookies_0__1__CookieCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.HttpListenerResponse.get_Headers
    public func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(System.Net.WebHeaderCollection)
// docid: M:System.Net.HttpListenerResponse.set_Headers(System.Net.WebHeaderCollection)
    public func set_Headers(value : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_Headers_0__1__WebHeaderCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_KeepAlive()
// docid: M:System.Net.HttpListenerResponse.get_KeepAlive
    public func get_KeepAlive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_bool__get_KeepAlive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_KeepAlive(bool)
// docid: M:System.Net.HttpListenerResponse.set_KeepAlive(System.Boolean)
    public func set_KeepAlive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_KeepAlive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_OutputStream()
// docid: M:System.Net.HttpListenerResponse.get_OutputStream
    public func get_OutputStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_Stream__get_OutputStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.Version get_ProtocolVersion()
// docid: M:System.Net.HttpListenerResponse.get_ProtocolVersion
    public func get_ProtocolVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_Version__get_ProtocolVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProtocolVersion(System.Version)
// docid: M:System.Net.HttpListenerResponse.set_ProtocolVersion(System.Version)
    public func set_ProtocolVersion(value : dotnet.System.Version) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_ProtocolVersion_0__1__Version(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RedirectLocation()
// docid: M:System.Net.HttpListenerResponse.get_RedirectLocation
    public func get_RedirectLocation() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_String__get_RedirectLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RedirectLocation(System.String)
// docid: M:System.Net.HttpListenerResponse.set_RedirectLocation(System.String)
    public func set_RedirectLocation(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_RedirectLocation_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SendChunked()
// docid: M:System.Net.HttpListenerResponse.get_SendChunked
    public func get_SendChunked() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_bool__get_SendChunked_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SendChunked(bool)
// docid: M:System.Net.HttpListenerResponse.set_SendChunked(System.Boolean)
    public func set_SendChunked(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_SendChunked_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:System.Net.HttpListenerResponse.get_StatusCode
    public func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Int32)
// docid: M:System.Net.HttpListenerResponse.set_StatusCode(System.Int32)
    public func set_StatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_StatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_StatusDescription()
// docid: M:System.Net.HttpListenerResponse.get_StatusDescription
    public func get_StatusDescription() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerResponse_String__get_StatusDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_StatusDescription(System.String)
// docid: M:System.Net.HttpListenerResponse.set_StatusDescription(System.String)
    public func set_StatusDescription(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerResponse_void__set_StatusDescription_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  for this response's .

    */
    public var ContentEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_ContentEncoding();
        }
        set(v) {
            return try! set_ContentEncoding(value: v!);
        }
    }
    /**
    Gets or sets the number of bytes in the body data included in the response.

    */
    public var ContentLength64 : Swift.Int64 {
        get {
            return try! get_ContentLength64();
        }
        set(v) {
            return try! set_ContentLength64(value: v);
        }
    }
    /**
    Gets or sets the MIME type of the content returned.

    */
    public var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    Gets or sets the collection of cookies returned with the response.

    */
    public var Cookies : dotnet.System.Net.CookieCollection {
        get {
            return try! get_Cookies();
        }
        set(v) {
            return try! set_Cookies(value: v);
        }
    }
    /**
    Gets or sets the collection of header name/value pairs returned by the server.

    */
    public var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the server requests a persistent connection.

    */
    public var KeepAlive : Bool {
        get {
            return try! get_KeepAlive();
        }
        set(v) {
            return try! set_KeepAlive(value: v);
        }
    }
    /**
    Gets a  object to which a response can be written.

    */
    public var OutputStream : dotnet.System.IO.Stream {
        get {
            return try! get_OutputStream();
        }
    }
    /**
    Gets or sets the HTTP version used for the response.

    */
    public var ProtocolVersion : dotnet.System.Version {
        get {
            return try! get_ProtocolVersion();
        }
        set(v) {
            return try! set_ProtocolVersion(value: v);
        }
    }
    /**
    Gets or sets the value of the HTTP  header in this response.

    */
    public var RedirectLocation : Optional<dotnet.System.String> {
        get {
            return try! get_RedirectLocation();
        }
        set(v) {
            return try! set_RedirectLocation(value: v!);
        }
    }
    /**
    Gets or sets whether the response uses chunked transfer encoding.

    */
    public var SendChunked : Bool {
        get {
            return try! get_SendChunked();
        }
        set(v) {
            return try! set_SendChunked(value: v);
        }
    }
    /**
    Gets or sets the HTTP status code to be returned to the client.

    */
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
    /**
    Gets or sets a text description of the HTTP status code returned to the client.

    */
    public var StatusDescription : dotnet.System.String {
        get {
            return try! get_StatusDescription();
        }
        set(v) {
            return try! set_StatusDescription(value: v);
        }
    }
} // HttpListenerResponse


// type: System.Net.HttpListenerTimeoutManager
    /**
    The timeout manager to use for an  object.

    */
open class HttpListenerTimeoutManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpListenerTimeoutManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.TimeSpan get_DrainEntityBody()
// docid: M:System.Net.HttpListenerTimeoutManager.get_DrainEntityBody
    open func get_DrainEntityBody() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerTimeoutManager_TimeSpan__get_DrainEntityBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_DrainEntityBody(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_EntityBody()
// docid: M:System.Net.HttpListenerTimeoutManager.get_EntityBody
    open func get_EntityBody() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerTimeoutManager_TimeSpan__get_EntityBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_EntityBody(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_HeaderWait()
// docid: M:System.Net.HttpListenerTimeoutManager.get_HeaderWait
    open func get_HeaderWait() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerTimeoutManager_TimeSpan__get_HeaderWait_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_HeaderWait(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_IdleConnection()
// docid: M:System.Net.HttpListenerTimeoutManager.get_IdleConnection
    open func get_IdleConnection() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerTimeoutManager_TimeSpan__get_IdleConnection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_IdleConnection(System.TimeSpan)
    // [IsSpecialName] System.Int64 get_MinSendBytesPerSecond()
// docid: M:System.Net.HttpListenerTimeoutManager.get_MinSendBytesPerSecond
    open func get_MinSendBytesPerSecond() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerTimeoutManager_i64__get_MinSendBytesPerSecond_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MinSendBytesPerSecond(System.Int64)
// docid: M:System.Net.HttpListenerTimeoutManager.set_MinSendBytesPerSecond(System.Int64)
    open func set_MinSendBytesPerSecond(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpListenerTimeoutManager_void__set_MinSendBytesPerSecond_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_RequestQueue()
// docid: M:System.Net.HttpListenerTimeoutManager.get_RequestQueue
    open func get_RequestQueue() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpListenerTimeoutManager_TimeSpan__get_RequestQueue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_RequestQueue(System.TimeSpan)
    /**
    Gets or sets the time allowed for the  to drain the entity body on a Keep-Alive connection.

    */
    open var DrainEntityBody : dotnet.System.TimeSpan {
        get {
            return try! get_DrainEntityBody();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_DrainEntityBody(System.TimeSpan)
    }
    /**
    Gets or sets the time allowed for the request entity body to arrive.

    */
    open var EntityBody : dotnet.System.TimeSpan {
        get {
            return try! get_EntityBody();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_EntityBody(System.TimeSpan)
    }
    /**
    Gets or sets the time allowed for the  to parse the request header.

    */
    open var HeaderWait : dotnet.System.TimeSpan {
        get {
            return try! get_HeaderWait();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_HeaderWait(System.TimeSpan)
    }
    /**
    Gets or sets the time allowed for an idle connection.

    */
    open var IdleConnection : dotnet.System.TimeSpan {
        get {
            return try! get_IdleConnection();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_IdleConnection(System.TimeSpan)
    }
    /**
    Gets or sets the minimum send rate, in bytes-per-second, for the response.

    */
    open var MinSendBytesPerSecond : Swift.Int64 {
        get {
            return try! get_MinSendBytesPerSecond();
        }
        set(v) {
            return try! set_MinSendBytesPerSecond(value: v);
        }
    }
    /**
    Gets or sets the time allowed for the request to remain in the request queue before the  picks it up.

    */
    open var RequestQueue : dotnet.System.TimeSpan {
        get {
            return try! get_RequestQueue();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_RequestQueue(System.TimeSpan)
    }
} // HttpListenerTimeoutManager


}
// System.Net.WebSockets
extension System.Net.WebSockets {
// type: System.Net.WebSockets.HttpListenerWebSocketContext
    /**
    Provides access to information received by the  class when accepting WebSocket connections.

    */
open class HttpListenerWebSocketContext
    :
    dotnet.System.Net.WebSockets.WebSocketContext
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebSockets_HttpListenerWebSocketContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.CookieCollection get_CookieCollection()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_CookieCollection
    open override func get_CookieCollection() throws -> dotnet.System.Net.CookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_CookieCollection__get_CookieCollection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.CookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameValueCollection get_Headers()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_Headers
    open override func get_Headers() throws -> dotnet.System.Collections.Specialized.NameValueCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_NameValueCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameValueCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsAuthenticated()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_IsAuthenticated
    open override func get_IsAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_bool__get_IsAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLocal()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_IsLocal
    open override func get_IsLocal() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_bool__get_IsLocal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecureConnection()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_IsSecureConnection
    open override func get_IsSecureConnection() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_bool__get_IsSecureConnection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Origin()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_Origin
    open override func get_Origin() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_String__get_Origin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_RequestUri()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_RequestUri
    open override func get_RequestUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_Uri__get_RequestUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SecWebSocketKey()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_SecWebSocketKey
    open override func get_SecWebSocketKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_String__get_SecWebSocketKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_SecWebSocketProtocols()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_SecWebSocketProtocols
    open override func get_SecWebSocketProtocols() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_System_Collections_Generic_IEnumerable_string___get_SecWebSocketProtocols_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SecWebSocketVersion()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_SecWebSocketVersion
    open override func get_SecWebSocketVersion() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_String__get_SecWebSocketVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.IPrincipal get_User()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_User
    open override func get_User() throws -> dotnet.System.Security.Principal.IPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_IPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.WebSockets.WebSocket get_WebSocket()
// docid: M:System.Net.WebSockets.HttpListenerWebSocketContext.get_WebSocket
    open override func get_WebSocket() throws -> dotnet.System.Net.WebSockets.WebSocket {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebSockets_HttpListenerWebSocketContext_WebSocket__get_WebSocket_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebSockets.WebSocket(hndl : __return);
        }
    }
    /**
    Gets the cookies received by the  object in the WebSocket opening handshake.

    */
    open override var CookieCollection : dotnet.System.Net.CookieCollection {
        get {
            return try! get_CookieCollection();
        }
    }
    /**
    Gets the HTTP headers received by the  object in the WebSocket opening handshake.

    */
    open override var Headers : dotnet.System.Collections.Specialized.NameValueCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets a value that indicates if the WebSocket client is authenticated.

    */
    open override var IsAuthenticated : Bool {
        get {
            return try! get_IsAuthenticated();
        }
    }
    /**
    Gets a value that indicates if the WebSocket client connected from the local machine.

    */
    open override var IsLocal : Bool {
        get {
            return try! get_IsLocal();
        }
    }
    /**
    Gets a value that indicates if the WebSocket connection is secured using Secure Sockets Layer (SSL).

    */
    open override var IsSecureConnection : Bool {
        get {
            return try! get_IsSecureConnection();
        }
    }
    /**
    Gets the value of the Origin HTTP header included in the WebSocket opening handshake.

    */
    open override var Origin : dotnet.System.String {
        get {
            return try! get_Origin();
        }
    }
    /**
    Gets the URI requested by the WebSocket client.

    */
    open override var RequestUri : dotnet.System.Uri {
        get {
            return try! get_RequestUri();
        }
    }
    /**
    Gets the value of the SecWebSocketKey HTTP header included in the WebSocket opening handshake.

    */
    open override var SecWebSocketKey : dotnet.System.String {
        get {
            return try! get_SecWebSocketKey();
        }
    }
    /**
    Gets the list of the Secure WebSocket protocols included in the WebSocket opening handshake.

    */
    open override var SecWebSocketProtocols : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_SecWebSocketProtocols();
        }
    }
    /**
    Gets the list of sub-protocols requested by the WebSocket client.

    */
    open override var SecWebSocketVersion : dotnet.System.String {
        get {
            return try! get_SecWebSocketVersion();
        }
    }
    /**
    Gets an object used to obtain identity, authentication information, and security roles for the WebSocket client.

    */
    open override var User : dotnet.System.Security.Principal.IPrincipal {
        get {
            return try! get_User();
        }
    }
    /**
    Gets the  instance used to send and receive data over the  connection.

    */
    open override var WebSocket : dotnet.System.Net.WebSockets.WebSocket {
        get {
            return try! get_WebSocket();
        }
    }
} // HttpListenerWebSocketContext


}



