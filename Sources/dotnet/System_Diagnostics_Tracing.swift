// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Diagnostics
// System.Diagnostics.Tracing
extension System.Diagnostics.Tracing {
// type: System.Diagnostics.Tracing.DiagnosticCounter
    /**
    
         is an abstract class that serves as the parent class for various Counter(ASTERISK) classes, namely , , , and .

    */
open class DiagnosticCounter
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_DiagnosticCounter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddMetadata(System.String, System.String)
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.AddMetadata(System.String,System.String)
    /**
    Adds key-value metadata to the counter that will be included as a part of the payload.

    - Parameter key: The metadata key.
    - Parameter value: The metadata value.
    */
    open func AddMetadata(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_DiagnosticCounter_void__AddMetadata_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.Dispose
    /**
    Removes the counter from the set that the  will report on.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_DiagnosticCounter_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_DiagnosticCounter_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.set_DisplayName(System.String)
    open func set_DisplayName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_DiagnosticCounter_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayUnits()
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.get_DisplayUnits
    open func get_DisplayUnits() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_DiagnosticCounter_String__get_DisplayUnits_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DisplayUnits(System.String)
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.set_DisplayUnits(System.String)
    open func set_DisplayUnits(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_DiagnosticCounter_void__set_DisplayUnits_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventSource get_EventSource()
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.get_EventSource
    open func get_EventSource() throws -> dotnet.System.Diagnostics.Tracing.EventSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_DiagnosticCounter_EventSource__get_EventSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventSource(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Tracing.DiagnosticCounter.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_DiagnosticCounter_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the display name of the counter.

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v);
        }
    }
    /**
    Gets or sets the display units of the counter.

    */
    open var DisplayUnits : dotnet.System.String {
        get {
            return try! get_DisplayUnits();
        }
        set(v) {
            return try! set_DisplayUnits(value: v);
        }
    }
    /**
    Gets the EventSource that this counter is attached to.

    */
    open var EventSource : dotnet.System.Diagnostics.Tracing.EventSource {
        get {
            return try! get_EventSource();
        }
    }
    /**
    Gets the name of this counter.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // DiagnosticCounter


// type: System.Diagnostics.Tracing.EventActivityOptions
    /**
    Specifies the tracking of activity start and stop events.

    */
public struct EventActivityOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventActivityOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventActivityOptions None
    /**
    Use the default behavior for start and stop tracking.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventActivityOptions(val: System_Diagnostics_Tracing_EventActivityOptions_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventActivityOptions Disable
    /**
    Turn off start and stop tracking.

    */
    public static var Disable : dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventActivityOptions(val: System_Diagnostics_Tracing_EventActivityOptions_get_Disable());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventActivityOptions Recursive
    /**
    Allow recursive activity starts. By default, an activity cannot be recursive. That is, a sequence of Start A, Start A, Stop A, Stop A is not allowed. Unintentional recursive activities can occur if the app executes and for some the stop is not reached before another start is called.

    */
    public static var Recursive : dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventActivityOptions(val: System_Diagnostics_Tracing_EventActivityOptions_get_Recursive());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventActivityOptions Detachable
    /**
    Allow overlapping activities. By default, activity starts and stops must be property nested. That is, a sequence of Start A, Start B, Stop A, Stop B is not allowed will result in B stopping at the same time as A.

    */
    public static var Detachable : dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventActivityOptions(val: System_Diagnostics_Tracing_EventActivityOptions_get_Detachable());
            return __return;
        }
    }
} // EventActivityOptions


// type: System.Diagnostics.Tracing.EventAttribute
    /**
    Specifies additional event schema information for an event.

    */
public final class EventAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the specified event identifier.

    - Parameter eventId: The event identifier for the event.
    */
    public init(eventId : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventAttribute_ctor_0__1__i32(&__thrown, eventId);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventActivityOptions get_ActivityOptions()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_ActivityOptions
    public func get_ActivityOptions() throws -> dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventActivityOptions__get_ActivityOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventActivityOptions(val: __return);
        }
    }
    // [IsSpecialName] void set_ActivityOptions(System.Diagnostics.Tracing.EventActivityOptions)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_ActivityOptions(System.Diagnostics.Tracing.EventActivityOptions)
    public func set_ActivityOptions(value : dotnet.System.Diagnostics.Tracing.EventActivityOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_ActivityOptions_0__1__EventActivityOptions(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventChannel get_Channel()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Channel
    public func get_Channel() throws -> dotnet.System.Diagnostics.Tracing.EventChannel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventChannel__get_Channel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventChannel(val: __return);
        }
    }
    // [IsSpecialName] void set_Channel(System.Diagnostics.Tracing.EventChannel)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Channel(System.Diagnostics.Tracing.EventChannel)
    public func set_Channel(value : dotnet.System.Diagnostics.Tracing.EventChannel) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Channel_0__1__EventChannel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_EventId()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_EventId
    public func get_EventId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_i32__get_EventId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventKeywords get_Keywords()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Keywords
    public func get_Keywords() throws -> dotnet.System.Diagnostics.Tracing.EventKeywords {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventKeywords__get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventKeywords(val: __return);
        }
    }
    // [IsSpecialName] void set_Keywords(System.Diagnostics.Tracing.EventKeywords)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Keywords(System.Diagnostics.Tracing.EventKeywords)
    public func set_Keywords(value : dotnet.System.Diagnostics.Tracing.EventKeywords) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Keywords_0__1__EventKeywords(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventLevel get_Level()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Level
    public func get_Level() throws -> dotnet.System.Diagnostics.Tracing.EventLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(System.Diagnostics.Tracing.EventLevel)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Level(System.Diagnostics.Tracing.EventLevel)
    public func set_Level(value : dotnet.System.Diagnostics.Tracing.EventLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Level_0__1__EventLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Message
    public func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Message(System.String)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Message(System.String)
    public func set_Message(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Message_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventOpcode get_Opcode()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Opcode
    public func get_Opcode() throws -> dotnet.System.Diagnostics.Tracing.EventOpcode {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventOpcode__get_Opcode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventOpcode(val: __return);
        }
    }
    // [IsSpecialName] void set_Opcode(System.Diagnostics.Tracing.EventOpcode)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Opcode(System.Diagnostics.Tracing.EventOpcode)
    public func set_Opcode(value : dotnet.System.Diagnostics.Tracing.EventOpcode) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Opcode_0__1__EventOpcode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventTags get_Tags()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Tags
    public func get_Tags() throws -> dotnet.System.Diagnostics.Tracing.EventTags {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventTags__get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventTags(val: __return);
        }
    }
    // [IsSpecialName] void set_Tags(System.Diagnostics.Tracing.EventTags)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Tags(System.Diagnostics.Tracing.EventTags)
    public func set_Tags(value : dotnet.System.Diagnostics.Tracing.EventTags) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Tags_0__1__EventTags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventTask get_Task()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Task
    public func get_Task() throws -> dotnet.System.Diagnostics.Tracing.EventTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_EventTask__get_Task_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventTask(val: __return);
        }
    }
    // [IsSpecialName] void set_Task(System.Diagnostics.Tracing.EventTask)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Task(System.Diagnostics.Tracing.EventTask)
    public func set_Task(value : dotnet.System.Diagnostics.Tracing.EventTask) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Task_0__1__EventTask(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte get_Version()
// docid: M:System.Diagnostics.Tracing.EventAttribute.get_Version
    public func get_Version() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventAttribute_u8__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Version(System.Byte)
// docid: M:System.Diagnostics.Tracing.EventAttribute.set_Version(System.Byte)
    public func set_Version(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventAttribute_void__set_Version_0__1__u8(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Specifies the behavior of the start and stop events of an activity. An activity is the region of time in an app between the start and the stop.

    */
    public var ActivityOptions : dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        get {
            return try! get_ActivityOptions();
        }
        set(v) {
            return try! set_ActivityOptions(value: v);
        }
    }
    /**
    Gets or sets an additional event log where the event should be written.

    */
    public var Channel : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
            return try! get_Channel();
        }
        set(v) {
            return try! set_Channel(value: v);
        }
    }
    /**
    Gets or sets the identifier for the event.

    */
    public var EventId : Swift.Int32 {
        get {
            return try! get_EventId();
        }
    }
    /**
    Gets or sets the keywords for the event.

    */
    public var Keywords : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
            return try! get_Keywords();
        }
        set(v) {
            return try! set_Keywords(value: v);
        }
    }
    /**
    Gets or sets the level for the event.

    */
    public var Level : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
    /**
    Gets or sets the message for the event.

    */
    public var Message : Optional<dotnet.System.String> {
        get {
            return try! get_Message();
        }
        set(v) {
            return try! set_Message(value: v!);
        }
    }
    /**
    Gets or sets the operation code for the event.

    */
    public var Opcode : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
            return try! get_Opcode();
        }
        set(v) {
            return try! set_Opcode(value: v);
        }
    }
    /**
    Gets or sets the  value for this  object. An event tag is a user-defined value that is passed through when the event is logged.

    */
    public var Tags : dotnet.System.Diagnostics.Tracing.EventTags {
        get {
            return try! get_Tags();
        }
        set(v) {
            return try! set_Tags(value: v);
        }
    }
    /**
    Gets or sets the task for the event.

    */
    public var Task : dotnet.System.Diagnostics.Tracing.EventTask {
        get {
            return try! get_Task();
        }
        set(v) {
            return try! set_Task(value: v);
        }
    }
    /**
    Gets or sets the version of the event.

    */
    public var Version : Swift.UInt8 {
        get {
            return try! get_Version();
        }
        set(v) {
            return try! set_Version(value: v);
        }
    }
} // EventAttribute


// type: System.Diagnostics.Tracing.EventChannel
    /**
    Specifies the event log channel for the event.

    */
public struct EventChannel : SGBridgeGenericValue {
    let v : Swift.UInt8;
    public init(val: Swift.UInt8) { self.v = val; }
    public func get_value() -> Swift.UInt8 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventChannel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.UInt8(gval); }
    // static field: System.Diagnostics.Tracing.EventChannel None
    /**
    No channel specified.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventChannel(val: System_Diagnostics_Tracing_EventChannel_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventChannel Admin
    /**
    The administrator log channel.

    */
    public static var Admin : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventChannel(val: System_Diagnostics_Tracing_EventChannel_get_Admin());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventChannel Operational
    /**
    The operational channel.

    */
    public static var Operational : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventChannel(val: System_Diagnostics_Tracing_EventChannel_get_Operational());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventChannel Analytic
    /**
    The analytic channel.

    */
    public static var Analytic : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventChannel(val: System_Diagnostics_Tracing_EventChannel_get_Analytic());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventChannel Debug
    /**
    The debug channel.

    */
    public static var Debug : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventChannel(val: System_Diagnostics_Tracing_EventChannel_get_Debug());
            return __return;
        }
    }
} // EventChannel


// type: System.Diagnostics.Tracing.EventCommand
    /**
    Describes the command ( property) that is passed to the  callback.

    */
public struct EventCommand : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventCommand_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventCommand Disable
    /**
    Disable the event.

    */
    public static var Disable : dotnet.System.Diagnostics.Tracing.EventCommand {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventCommand(val: System_Diagnostics_Tracing_EventCommand_get_Disable());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventCommand Enable
    /**
    Enable the event.

    */
    public static var Enable : dotnet.System.Diagnostics.Tracing.EventCommand {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventCommand(val: System_Diagnostics_Tracing_EventCommand_get_Enable());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventCommand SendManifest
    /**
    Send the manifest.

    */
    public static var SendManifest : dotnet.System.Diagnostics.Tracing.EventCommand {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventCommand(val: System_Diagnostics_Tracing_EventCommand_get_SendManifest());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventCommand Update
    /**
    Update the event.

    */
    public static var Update : dotnet.System.Diagnostics.Tracing.EventCommand {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventCommand(val: System_Diagnostics_Tracing_EventCommand_get_Update());
            return __return;
        }
    }
} // EventCommand


// type: System.Diagnostics.Tracing.EventCommandEventArgs
    /**
    Provides the arguments for the  callback.

    */
open class EventCommandEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventCommandEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool DisableEvent(System.Int32)
// docid: M:System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)
    /**
    Disables the event that have the specified identifier.

    - Parameter eventId: The identifier of the event to disable.
    - Returns: 
         if  is in range; otherwise, .

    */
    open func DisableEvent(eventId : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventCommandEventArgs_bool__DisableEvent_0__1__i32(&__thrown, self.get_handle(), eventId);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool EnableEvent(System.Int32)
// docid: M:System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)
    /**
    Enables the event that has the specified identifier.

    - Parameter eventId: The identifier of the event to enable.
    - Returns: 
         if  is in range; otherwise, .

    */
    open func EnableEvent(eventId : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventCommandEventArgs_bool__EnableEvent_0__1__i32(&__thrown, self.get_handle(), eventId);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Arguments()
// docid: M:System.Diagnostics.Tracing.EventCommandEventArgs.get_Arguments
    open func get_Arguments() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventCommandEventArgs_System_Collections_Generic_IDictionary_string_string___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventCommand get_Command()
// docid: M:System.Diagnostics.Tracing.EventCommandEventArgs.get_Command
    open func get_Command() throws -> dotnet.System.Diagnostics.Tracing.EventCommand {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventCommandEventArgs_EventCommand__get_Command_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventCommand(val: __return);
        }
    }
    /**
    Gets the array of arguments for the callback.

    */
    open var Arguments : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets the command for the callback.

    */
    open var Command : dotnet.System.Diagnostics.Tracing.EventCommand {
        get {
            return try! get_Command();
        }
    }
} // EventCommandEventArgs


// type: System.Diagnostics.Tracing.EventCounter
    /**
    Provides the ability to collect statistics for very frequent events through the   class.

    */
open class EventCounter
    :
    dotnet.System.Diagnostics.Tracing.DiagnosticCounter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventCounter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Diagnostics.Tracing.EventSource)
// docid: M:System.Diagnostics.Tracing.EventCounter.#ctor(System.String,System.Diagnostics.Tracing.EventSource)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The event counter name.
    - Parameter eventSource: The event source.
    */
    public init(name : dotnet.System.String, eventSource : dotnet.System.Diagnostics.Tracing.EventSource) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventCounter_ctor_0__2__String_EventSource(&__thrown, name.get_handle(), eventSource.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.Tracing.EventCounter.ToString
    /**
    Returns a string representation of the current event counter instance.

    - Returns: The name, count and mean of the current event counter.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventCounter_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteMetric(System.Double)
// docid: M:System.Diagnostics.Tracing.EventCounter.WriteMetric(System.Double)
    /**
    Writes the metric if performance counters are on.

    - Parameter value: The value to be written.
    */
    open func WriteMetric(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventCounter_void__WriteMetric_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteMetric(System.Single)
// docid: M:System.Diagnostics.Tracing.EventCounter.WriteMetric(System.Single)
    /**
    Writes the metric if performance counters are on.

    - Parameter value: The value to be written.
    */
    open func WriteMetric(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventCounter_void__WriteMetric_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EventCounter


// type: System.Diagnostics.Tracing.EventDataAttribute
    /**
    Specifies a type to be passed to the  method.

    */
open class EventDataAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventDataAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.EventDataAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventDataAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Tracing.EventDataAttribute.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventDataAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Diagnostics.Tracing.EventDataAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventDataAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name to apply to an event if the event type or property is not explicitly named.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // EventDataAttribute


// type: System.Diagnostics.Tracing.EventFieldAttribute
    /**
    The  is placed on fields of user-defined types that are passed as  payloads.

    */
open class EventFieldAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventFieldAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.EventFieldAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventFieldAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventFieldFormat get_Format()
// docid: M:System.Diagnostics.Tracing.EventFieldAttribute.get_Format
    open func get_Format() throws -> dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventFieldAttribute_EventFieldFormat__get_Format_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: __return);
        }
    }
    // [IsSpecialName] void set_Format(System.Diagnostics.Tracing.EventFieldFormat)
// docid: M:System.Diagnostics.Tracing.EventFieldAttribute.set_Format(System.Diagnostics.Tracing.EventFieldFormat)
    open func set_Format(value : dotnet.System.Diagnostics.Tracing.EventFieldFormat) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventFieldAttribute_void__set_Format_0__1__EventFieldFormat(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventFieldTags get_Tags()
// docid: M:System.Diagnostics.Tracing.EventFieldAttribute.get_Tags
    open func get_Tags() throws -> dotnet.System.Diagnostics.Tracing.EventFieldTags {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventFieldAttribute_EventFieldTags__get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventFieldTags(val: __return);
        }
    }
    // [IsSpecialName] void set_Tags(System.Diagnostics.Tracing.EventFieldTags)
// docid: M:System.Diagnostics.Tracing.EventFieldAttribute.set_Tags(System.Diagnostics.Tracing.EventFieldTags)
    open func set_Tags(value : dotnet.System.Diagnostics.Tracing.EventFieldTags) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventFieldAttribute_void__set_Tags_0__1__EventFieldTags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the value that specifies how to format the value of a user-defined type.

    */
    open var Format : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
            return try! get_Format();
        }
        set(v) {
            return try! set_Format(value: v);
        }
    }
    /**
    Gets or sets the user-defined  value that is required for fields that contain data that isn't one of the supported types.

    */
    open var Tags : dotnet.System.Diagnostics.Tracing.EventFieldTags {
        get {
            return try! get_Tags();
        }
        set(v) {
            return try! set_Tags(value: v);
        }
    }
} // EventFieldAttribute


// type: System.Diagnostics.Tracing.EventFieldFormat
    /**
    Specifies how to format the value of a user-defined type and can be used to override the default formatting for a field.

    */
public struct EventFieldFormat : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventFieldFormat_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventFieldFormat Default
    /**
    Default.

    */
    public static var Default : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_Default());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventFieldFormat String
    /**
    String.

    */
    public static var String : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_String());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventFieldFormat Boolean
    /**
    Boolean.

    */
    public static var Boolean : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_Boolean());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventFieldFormat Hexadecimal
    /**
    Hexadecimal.

    */
    public static var Hexadecimal : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_Hexadecimal());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventFieldFormat Xml
    /**
    XML.

    */
    public static var Xml : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_Xml());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventFieldFormat Json
    /**
    JSON.

    */
    public static var Json : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_Json());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventFieldFormat HResult
    /**
    HResult.

    */
    public static var HResult : dotnet.System.Diagnostics.Tracing.EventFieldFormat {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldFormat(val: System_Diagnostics_Tracing_EventFieldFormat_get_HResult());
            return __return;
        }
    }
} // EventFieldFormat


// type: System.Diagnostics.Tracing.EventFieldTags
    /**
    Specifies the user-defined tag that is placed on fields of user-defined types that are passed as  payloads through the .

    */
public struct EventFieldTags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventFieldTags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventFieldTags None
    /**
    Specifies no tag and is equal to zero.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventFieldTags {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventFieldTags(val: System_Diagnostics_Tracing_EventFieldTags_get_None());
            return __return;
        }
    }
} // EventFieldTags


// type: System.Diagnostics.Tracing.EventIgnoreAttribute
    /**
    Specifies a property should be ignored when writing an event type with the  method.

    */
open class EventIgnoreAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventIgnoreAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.EventIgnoreAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventIgnoreAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EventIgnoreAttribute


// type: System.Diagnostics.Tracing.EventKeywords
    /**
    Defines the standard keywords that apply to events.

    */
public struct EventKeywords : SGBridgeGenericValue {
    let v : Swift.Int64;
    public init(val: Swift.Int64) { self.v = val; }
    public func get_value() -> Swift.Int64 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventKeywords_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int64(gval); }
    // static field: System.Diagnostics.Tracing.EventKeywords All
    /**
    All the bits are set to 1, representing every possible group of events.

    */
    public static var All : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_All());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords None
    /**
    No filtering on keywords is performed when the event is published.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords MicrosoftTelemetry
    /**
    Attached to all Microsoft telemetry events.

    */
    public static var MicrosoftTelemetry : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_MicrosoftTelemetry());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords WdiContext
    /**
    Attached to all Windows Diagnostics Infrastructure (WDI) context events.

    */
    public static var WdiContext : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_WdiContext());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords WdiDiagnostic
    /**
    Attached to all Windows Diagnostics Infrastructure (WDI) diagnostic events.

    */
    public static var WdiDiagnostic : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_WdiDiagnostic());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords Sqm
    /**
    Attached to all Service Quality Mechanism (SQM) events.

    */
    public static var Sqm : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_Sqm());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords AuditFailure
    /**
    Attached to all failed security audit events. Use this keyword only  for events in the security log.

    */
    public static var AuditFailure : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_AuditFailure());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords CorrelationHint
    /**
    Attached to transfer events where the related activity ID (correlation ID) is a computed value and is not guaranteed to be unique (that is, it is not a real GUID).

    */
    public static var CorrelationHint : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_CorrelationHint());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords AuditSuccess
    /**
    Attached to all successful security audit events. Use this keyword only for events in the security log.

    */
    public static var AuditSuccess : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_AuditSuccess());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventKeywords EventLogClassic
    /**
    Attached to events that are raised by using the  function.

    */
    public static var EventLogClassic : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventKeywords(val: System_Diagnostics_Tracing_EventKeywords_get_EventLogClassic());
            return __return;
        }
    }
} // EventKeywords


// type: System.Diagnostics.Tracing.EventLevel
    /**
    Identifies the level of an event.

    */
public struct EventLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventLevel LogAlways
    /**
    No level filtering is done on the event.

    */
    public static var LogAlways : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventLevel(val: System_Diagnostics_Tracing_EventLevel_get_LogAlways());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventLevel Critical
    /**
    This level corresponds to a critical error, which is a serious error that has caused a major failure.

    */
    public static var Critical : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventLevel(val: System_Diagnostics_Tracing_EventLevel_get_Critical());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventLevel Error
    /**
    This level adds standard errors that signify a problem.

    */
    public static var Error : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventLevel(val: System_Diagnostics_Tracing_EventLevel_get_Error());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventLevel Warning
    /**
    This level adds warning events (for example, events that are published because a disk is nearing full capacity).

    */
    public static var Warning : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventLevel(val: System_Diagnostics_Tracing_EventLevel_get_Warning());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventLevel Informational
    /**
    This level adds informational events or messages that are not errors. These events can help trace the progress or state of an application.

    */
    public static var Informational : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventLevel(val: System_Diagnostics_Tracing_EventLevel_get_Informational());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventLevel Verbose
    /**
    This level adds lengthy events or messages. It causes all events to be logged.

    */
    public static var Verbose : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventLevel(val: System_Diagnostics_Tracing_EventLevel_get_Verbose());
            return __return;
        }
    }
} // EventLevel


// type: System.Diagnostics.Tracing.EventListener
    /**
    Provides methods for enabling and disabling events from event sources.

    */
open class EventListener
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void DisableEvents(System.Diagnostics.Tracing.EventSource)
// docid: M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
    /**
    Disables all events for the specified event source.

    - Parameter eventSource: The event source to disable events for.
    */
    open func DisableEvents(eventSource : dotnet.System.Diagnostics.Tracing.EventSource) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__DisableEvents_0__1__EventSource(&__thrown, self.get_handle(), eventSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Tracing.EventListener.Dispose
    /**
    Releases the resources used by the current instance of the  class.

    */
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel)
// docid: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
    /**
    Enables events for the specified event source that has the specified verbosity level or lower.

    - Parameter eventSource: The event source to enable events for.
    - Parameter level: The level of events to enable.
    */
    open func EnableEvents(eventSource : dotnet.System.Diagnostics.Tracing.EventSource, level : dotnet.System.Diagnostics.Tracing.EventLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__EnableEvents_0__2__EventSource_EventLevel(&__thrown, self.get_handle(), eventSource.get_handle(), level.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
// docid: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
    /**
    Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.

    - Parameter eventSource: The event source to enable events for.
    - Parameter level: The level of events to enable.
    - Parameter matchAnyKeyword: The keyword flags necessary to enable the events.
    */
    open func EnableEvents(eventSource : dotnet.System.Diagnostics.Tracing.EventSource, level : dotnet.System.Diagnostics.Tracing.EventLevel, matchAnyKeyword : dotnet.System.Diagnostics.Tracing.EventKeywords) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__EnableEvents_0__3__EventSource_EventLevel_EventKeywords(&__thrown, self.get_handle(), eventSource.get_handle(), level.get_value(), matchAnyKeyword.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.

    - Parameter eventSource: The event source to enable events for.
    - Parameter level: The level of events to enable.
    - Parameter matchAnyKeyword: The keyword flags necessary to enable the events.
    - Parameter arguments: The arguments to be matched to enable the events.
    */
    open func EnableEvents(eventSource : dotnet.System.Diagnostics.Tracing.EventSource, level : dotnet.System.Diagnostics.Tracing.EventLevel, matchAnyKeyword : dotnet.System.Diagnostics.Tracing.EventKeywords, arguments : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__EnableEvents_0__4__EventSource_EventLevel_EventKeywords_System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), eventSource.get_handle(), level.get_value(), matchAnyKeyword.get_value(), (arguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_EventSourceCreated(System.EventHandler<System.Diagnostics.Tracing.EventSourceCreatedEventArgs>)
// docid: M:System.Diagnostics.Tracing.EventListener.add_EventSourceCreated(System.EventHandler{System.Diagnostics.Tracing.EventSourceCreatedEventArgs})
    open func add_EventSourceCreated(value : Optional<dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventSourceCreatedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__add_EventSourceCreated_0__1__System_EventHandler_System_Diagnostics_Tracing_EventSourceCreatedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_EventSourceCreated(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Diagnostics.Tracing.EventSourceCreatedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventSourceCreatedEventArgs>(value);
        return try add_EventSourceCreated(value: del_value);
    }
    // [IsSpecialName] void remove_EventSourceCreated(System.EventHandler<System.Diagnostics.Tracing.EventSourceCreatedEventArgs>)
// docid: M:System.Diagnostics.Tracing.EventListener.remove_EventSourceCreated(System.EventHandler{System.Diagnostics.Tracing.EventSourceCreatedEventArgs})
    open func remove_EventSourceCreated(value : Optional<dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventSourceCreatedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__remove_EventSourceCreated_0__1__System_EventHandler_System_Diagnostics_Tracing_EventSourceCreatedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_EventSourceCreated(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Diagnostics.Tracing.EventSourceCreatedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventSourceCreatedEventArgs>(value);
        return try remove_EventSourceCreated(value: del_value);
    }
    // [IsSpecialName] void add_EventWritten(System.EventHandler<System.Diagnostics.Tracing.EventWrittenEventArgs>)
// docid: M:System.Diagnostics.Tracing.EventListener.add_EventWritten(System.EventHandler{System.Diagnostics.Tracing.EventWrittenEventArgs})
    open func add_EventWritten(value : Optional<dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventWrittenEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__add_EventWritten_0__1__System_EventHandler_System_Diagnostics_Tracing_EventWrittenEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_EventWritten(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Diagnostics.Tracing.EventWrittenEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventWrittenEventArgs>(value);
        return try add_EventWritten(value: del_value);
    }
    // [IsSpecialName] void remove_EventWritten(System.EventHandler<System.Diagnostics.Tracing.EventWrittenEventArgs>)
// docid: M:System.Diagnostics.Tracing.EventListener.remove_EventWritten(System.EventHandler{System.Diagnostics.Tracing.EventWrittenEventArgs})
    open func remove_EventWritten(value : Optional<dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventWrittenEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventListener_void__remove_EventWritten_0__1__System_EventHandler_System_Diagnostics_Tracing_EventWrittenEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_EventWritten(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Diagnostics.Tracing.EventWrittenEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventWrittenEventArgs>(value);
        return try remove_EventWritten(value: del_value);
    }
} // EventListener


// type: System.Diagnostics.Tracing.EventManifestOptions
    /**
    Specifies how the ETW manifest for the event source is generated.

    */
public struct EventManifestOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventManifestOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventManifestOptions None
    /**
    No options are specified.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventManifestOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventManifestOptions(val: System_Diagnostics_Tracing_EventManifestOptions_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventManifestOptions Strict
    /**
    Causes an exception to be raised if any inconsistencies occur when writing the manifest file.

    */
    public static var Strict : dotnet.System.Diagnostics.Tracing.EventManifestOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventManifestOptions(val: System_Diagnostics_Tracing_EventManifestOptions_get_Strict());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventManifestOptions AllCultures
    /**
    Generates a resources node under the localization folder for every satellite assembly provided.

    */
    public static var AllCultures : dotnet.System.Diagnostics.Tracing.EventManifestOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventManifestOptions(val: System_Diagnostics_Tracing_EventManifestOptions_get_AllCultures());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventManifestOptions OnlyIfNeededForRegistration
    /**
    A manifest is generated only the event source must be registered on the host computer.

    */
    public static var OnlyIfNeededForRegistration : dotnet.System.Diagnostics.Tracing.EventManifestOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventManifestOptions(val: System_Diagnostics_Tracing_EventManifestOptions_get_OnlyIfNeededForRegistration());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventManifestOptions AllowEventSourceOverride
    /**
    Overrides the default behavior that the current  must be the base class of the user-defined type passed to the write method. This enables the validation of .NET event sources.

    */
    public static var AllowEventSourceOverride : dotnet.System.Diagnostics.Tracing.EventManifestOptions {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventManifestOptions(val: System_Diagnostics_Tracing_EventManifestOptions_get_AllowEventSourceOverride());
            return __return;
        }
    }
} // EventManifestOptions


// type: System.Diagnostics.Tracing.EventOpcode
    /**
    Defines the standard operation codes that the event source attaches to events.

    */
public struct EventOpcode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventOpcode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventOpcode Info
    /**
    An informational event.

    */
    public static var Info : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Info());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Start
    /**
    An event that is published when an application starts a new transaction or activity. This operation code can be embedded within another transaction or activity when multiple events that have the  code follow each other without an intervening event that has a  code.

    */
    public static var Start : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Start());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Stop
    /**
    An event that is published when an activity or a transaction in an application ends. The event corresponds to the last unpaired event that has a  operation code.

    */
    public static var Stop : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Stop());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode DataCollectionStart
    /**
    A trace collection start event.

    */
    public static var DataCollectionStart : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_DataCollectionStart());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode DataCollectionStop
    /**
    A trace collection stop event.

    */
    public static var DataCollectionStop : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_DataCollectionStop());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Extension
    /**
    An extension event.

    */
    public static var Extension : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Extension());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Reply
    /**
    An event that is published after an activity in an application replies to an event.

    */
    public static var Reply : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Reply());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Resume
    /**
    An event that is published after an activity in an application resumes from a suspended state. The event should follow an event that has the  operation code.

    */
    public static var Resume : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Resume());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Suspend
    /**
    An event that is published when an activity in an application is suspended.

    */
    public static var Suspend : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Suspend());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Send
    /**
    An event that is published when one activity in an application transfers data or system resources to another activity.

    */
    public static var Send : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Send());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventOpcode Receive
    /**
    An event that is published when one activity in an application receives data.

    */
    public static var Receive : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventOpcode(val: System_Diagnostics_Tracing_EventOpcode_get_Receive());
            return __return;
        }
    }
} // EventOpcode


// type: System.Diagnostics.Tracing.EventSource
    /**
    Provides the ability to create events for event tracing for Windows (ETW).

    */
open class EventSource
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String)
    /**
    Creates a new instance of the  class with the specified name.

    - Parameter eventSourceName: The name to apply to the event source. Must not be .
    */
    public init(eventSourceName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSource_ctor_0__1__String(&__thrown, eventSourceName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.Tracing.EventSourceSettings)
// docid: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
    /**
    Creates a new instance of the  class with the specified name and settings.

    - Parameter eventSourceName: The name to apply to the event source. Must not be .
    - Parameter config: A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.
    */
    public init(eventSourceName : dotnet.System.String, config : dotnet.System.Diagnostics.Tracing.EventSourceSettings) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSource_ctor_0__2__String_EventSourceSettings(&__thrown, eventSourceName.get_handle(), config.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String[])
// docid: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
    /**
    Creates a new instance of the  class with the specified configuration settings.

    - Parameter eventSourceName: The name to apply to the event source. Must not be .
    - Parameter config: A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.
    - Parameter traits: The key-value pairs that specify traits for the event source.
    */
    public init(eventSourceName : dotnet.System.String, config : dotnet.System.Diagnostics.Tracing.EventSourceSettings, traits : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSource_ctor_0__3__String_EventSourceSettings_StringArray(&__thrown, eventSourceName.get_handle(), config.get_value(), (traits?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Tracing.EventSource.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GenerateManifest(System.Type, System.String)
// docid: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
    /**
    Returns a string of the XML manifest that is associated with the current event source.

    - Parameter eventSourceType: The type of the event source.
    - Parameter assemblyPathToIncludeInManifest: The path to the assembly file (.dll) to include in the provider element of the manifest.
    - Returns: The XML data string.

    */
    open class func GenerateManifest(eventSourceType : dotnet.System.Type_, assemblyPathToIncludeInManifest : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_String__GenerateManifest_0__2__Type_String(&__thrown, eventSourceType.get_handle(), assemblyPathToIncludeInManifest?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GenerateManifest(System.Type, System.String, System.Diagnostics.Tracing.EventManifestOptions)
// docid: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
    /**
    Returns a string of the XML manifest that is associated with the current event source.

    - Parameter eventSourceType: The type of the event source.
    - Parameter assemblyPathToIncludeInManifest: The path to the assembly file (.dll) file to include in the provider element of the manifest.
    - Parameter flags: A bitwise combination of the enumeration values that specify how the manifest is generated.
    - Returns: The XML data string or .

    */
    open class func GenerateManifest(eventSourceType : dotnet.System.Type_, assemblyPathToIncludeInManifest : Optional<dotnet.System.String>, flags : dotnet.System.Diagnostics.Tracing.EventManifestOptions) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_String__GenerateManifest_0__3__Type_String_EventManifestOptions(&__thrown, eventSourceType.get_handle(), assemblyPathToIncludeInManifest?.get_handle() ?? nil, flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Guid GetGuid(System.Type)
// docid: M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
    /**
    Gets the unique identifier for this implementation of the event source.

    - Parameter eventSourceType: The type of the event source.
    - Returns: A unique identifier for this event source type.

    */
    open class func GetGuid(eventSourceType : dotnet.System.Type_) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_Guid__GetGuid_0__1__Type(&__thrown, eventSourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.String GetName(System.Type)
// docid: M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)
    /**
    Gets the friendly name of the event source.

    - Parameter eventSourceType: The type of the event source.
    - Returns: The friendly name of the event source. The default is the simple name of the class.

    */
    open class func GetName(eventSourceType : dotnet.System.Type_) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_String__GetName_0__1__Type(&__thrown, eventSourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource> GetSources()
// docid: M:System.Diagnostics.Tracing.EventSource.GetSources
    /**
    Gets a snapshot of all the event sources for the application domain.

    - Returns: An enumeration of all the event sources in the application domain.

    */
    open class func GetSources() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Tracing.EventSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_System_Collections_Generic_IEnumerable_System_Diagnostics_Tracing_EventSource___GetSources_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.String GetTrait(System.String)
// docid: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
    /**
    Gets the trait value associated with the specified key.

    - Parameter key: The key of the trait to get.
    - Returns: The trait value associated with the specified key. If the key is not found, returns .

    */
    open func GetTrait(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_String__GetTrait_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsEnabled()
// docid: M:System.Diagnostics.Tracing.EventSource.IsEnabled
    /**
    Determines whether the current event source is enabled.

    - Returns: 
         if the current event source is enabled; otherwise, .

    */
    open func IsEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_bool__IsEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
// docid: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
    /**
    Determines whether the current event source that has the specified level and keyword is enabled.

    - Parameter level: The level of the event source.
    - Parameter keywords: The keyword of the event source.
    - Returns: 
         if the event source is enabled; otherwise, .

    */
    open func IsEnabled(level : dotnet.System.Diagnostics.Tracing.EventLevel, keywords : dotnet.System.Diagnostics.Tracing.EventKeywords) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_bool__IsEnabled_0__2__EventLevel_EventKeywords(&__thrown, self.get_handle(), level.get_value(), keywords.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Diagnostics.Tracing.EventChannel)
// docid: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
    /**
    Determines whether the current event source is enabled for events with the specified level, keywords and channel.

    - Parameter level: The event level to check. An event source will be considered enabled when its level is greater than or equal to .
    - Parameter keywords: The event keywords to check.
    - Parameter channel: The event channel to check.
    - Returns: 
         if the event source is enabled for the specified event level, keywords and channel; otherwise, .  
  
 The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled. Event sources may have additional filtering that determines their activity.

    */
    open func IsEnabled(level : dotnet.System.Diagnostics.Tracing.EventLevel, keywords : dotnet.System.Diagnostics.Tracing.EventKeywords, channel : dotnet.System.Diagnostics.Tracing.EventChannel) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_bool__IsEnabled_0__3__EventLevel_EventKeywords_EventChannel(&__thrown, self.get_handle(), level.get_value(), keywords.get_value(), channel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    Sends a command to a specified event source.

    - Parameter eventSource: The event source to send the command to.
    - Parameter command: The event command to send.
    - Parameter commandArguments: The arguments for the event command.
    */
    open class func SendCommand(eventSource : dotnet.System.Diagnostics.Tracing.EventSource, command : dotnet.System.Diagnostics.Tracing.EventCommand, commandArguments : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__SendCommand_0__3__EventSource_EventCommand_System_Collections_Generic_IDictionary_string_string_(&__thrown, eventSource.get_handle(), command.get_value(), (commandArguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCurrentThreadActivityId(System.Guid)
// docid: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
    /**
    Sets the activity ID on the current thread.

    - Parameter activityId: The current thread's new activity ID, or  to indicate that work on the current thread is not associated with any activity.
    */
    open class func SetCurrentThreadActivityId(activityId : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__SetCurrentThreadActivityId_0__1__Guid(&__thrown, activityId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCurrentThreadActivityId(System.Guid, ref System.Guid)
// docid: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
    /**
    Sets the activity ID on the current thread, and returns the previous activity ID.

    - Parameter activityId: The current thread's new activity ID, or  to indicate that work on the current thread is not associated with any activity.
    - Parameter oldActivityThatWillContinue: When this method returns, contains the previous activity ID on the current thread.
    */
    open class func SetCurrentThreadActivityId(activityId : dotnet.System.Guid, oldActivityThatWillContinue : inout dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_oldActivityThatWillContinue = oldActivityThatWillContinue.get_handle();
        System_Diagnostics_Tracing_EventSource_void__SetCurrentThreadActivityId_0__2__Guid_outGuid(&__thrown, activityId.get_handle(), &_tmp_out_oldActivityThatWillContinue);
        let _tmp2_oldActivityThatWillContinue = dotnet.System.Guid(hndl: _tmp_out_oldActivityThatWillContinue);
            oldActivityThatWillContinue = _tmp2_oldActivityThatWillContinue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.Tracing.EventSource.ToString
    /**
    Obtains a string representation of the current event source instance.

    - Returns: The name and unique identifier that identify the current event source.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.Tracing.EventSource.Write(System.String)
    /**
    Writes an event without fields, but with the specified name and default options.

    - Parameter eventName: The name of the event to write.
    */
    open func Write(eventName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__Write_0__1__String(&__thrown, self.get_handle(), eventName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.Diagnostics.Tracing.EventSourceOptions)
// docid: M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
    /**
    Writes an event without fields, but with the specified name and options.

    - Parameter eventName: The name of the event to write.
    - Parameter options: The options such as level, keywords and operation code for the event.
    */
    open func Write(eventName : Optional<dotnet.System.String>, options : dotnet.System.Diagnostics.Tracing.EventSourceOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__Write_0__2__String_EventSourceOptions(&__thrown, self.get_handle(), eventName?.get_handle() ?? nil, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write<T>(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
// docid: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
    /**
    Writes an event with the specified name, event data and options.

    - Parameter eventName: The name of the event.
    - Parameter options: The event options.
    - Parameter data: The event data. This type must be an anonymous type or marked with the  attribute.
    */
    open func Write<UT : SGBridgeGenericValue>(eventName : Optional<dotnet.System.String>, options : dotnet.System.Diagnostics.Tracing.EventSourceOptions, data : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__Write_1__3__String_EventSourceOptions_UT(UT.get_type_handle(), &__thrown, self.get_handle(), eventName?.get_handle() ?? nil, options.get_handle(), data.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref System.Guid, ref System.Guid, ref T)
// TODO COPE (write_all_methods) (unused generic param) void Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref T)
    // void Write<T>(System.String, T)
// docid: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
    /**
    Writes an event with the specified name and data.

    - Parameter eventName: The name of the event.
    - Parameter data: The event data. This type must be an anonymous type or marked with the  attribute.
    */
    open func Write<UT : SGBridgeGenericValue>(eventName : Optional<dotnet.System.String>, data : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__Write_1__2__String_UT(UT.get_type_handle(), &__thrown, self.get_handle(), eventName?.get_handle() ?? nil, data.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Exception get_ConstructionException()
// docid: M:System.Diagnostics.Tracing.EventSource.get_ConstructionException
    open func get_ConstructionException() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_Exception__get_ConstructionException_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Guid get_CurrentThreadActivityId()
// docid: M:System.Diagnostics.Tracing.EventSource.get_CurrentThreadActivityId
    open class func get_CurrentThreadActivityId() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_Guid__get_CurrentThreadActivityId_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Guid get_Guid()
// docid: M:System.Diagnostics.Tracing.EventSource.get_Guid
    open func get_Guid() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_Guid__get_Guid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Tracing.EventSource.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventSourceSettings get_Settings()
// docid: M:System.Diagnostics.Tracing.EventSource.get_Settings
    open func get_Settings() throws -> dotnet.System.Diagnostics.Tracing.EventSourceSettings {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSource_EventSourceSettings__get_Settings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventSourceSettings(val: __return);
        }
    }
    // [IsSpecialName] void add_EventCommandExecuted(System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)
// docid: M:System.Diagnostics.Tracing.EventSource.add_EventCommandExecuted(System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs})
    open func add_EventCommandExecuted(value : Optional<dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventCommandEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__add_EventCommandExecuted_0__1__System_EventHandler_System_Diagnostics_Tracing_EventCommandEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_EventCommandExecuted(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Diagnostics.Tracing.EventCommandEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventCommandEventArgs>(value);
        return try add_EventCommandExecuted(value: del_value);
    }
    // [IsSpecialName] void remove_EventCommandExecuted(System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>)
// docid: M:System.Diagnostics.Tracing.EventSource.remove_EventCommandExecuted(System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs})
    open func remove_EventCommandExecuted(value : Optional<dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventCommandEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSource_void__remove_EventCommandExecuted_0__1__System_EventHandler_System_Diagnostics_Tracing_EventCommandEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_EventCommandExecuted(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Diagnostics.Tracing.EventCommandEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Diagnostics.Tracing.EventCommandEventArgs>(value);
        return try remove_EventCommandExecuted(value: del_value);
    }
    /**
    Gets any exception that was thrown during the construction of the event source.

    */
    open var ConstructionException : Optional<dotnet.System.Exception> {
        get {
            return try! get_ConstructionException();
        }
    }
    /**
    Gets the activity ID of the current thread.

    */
    public static var CurrentThreadActivityId : dotnet.System.Guid {
        get {
            return try! get_CurrentThreadActivityId();
        }
    }
    /**
    The unique identifier for the event source.

    */
    open var Guid : dotnet.System.Guid {
        get {
            return try! get_Guid();
        }
    }
    /**
    The friendly name of the class that is derived from the event source.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the settings applied to this event source.

    */
    open var Settings : dotnet.System.Diagnostics.Tracing.EventSourceSettings {
        get {
            return try! get_Settings();
        }
    }
} // EventSource


// type: System.Diagnostics.Tracing.EventSourceAttribute
    /**
    Allows the event tracing for Windows (ETW) name to be defined independently of the name of the event source class.

    */
public final class EventSourceAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventSourceAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSourceAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Guid()
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.get_Guid
    public func get_Guid() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceAttribute_String__get_Guid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Guid(System.String)
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.set_Guid(System.String)
    public func set_Guid(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceAttribute_void__set_Guid_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalizationResources()
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.get_LocalizationResources
    public func get_LocalizationResources() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceAttribute_String__get_LocalizationResources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LocalizationResources(System.String)
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.set_LocalizationResources(System.String)
    public func set_LocalizationResources(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceAttribute_void__set_LocalizationResources_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Diagnostics.Tracing.EventSourceAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the event source identifier.

    */
    public var Guid : Optional<dotnet.System.String> {
        get {
            return try! get_Guid();
        }
        set(v) {
            return try! set_Guid(value: v!);
        }
    }
    /**
    Gets or sets the name of the localization resource file.

    */
    public var LocalizationResources : Optional<dotnet.System.String> {
        get {
            return try! get_LocalizationResources();
        }
        set(v) {
            return try! set_LocalizationResources(value: v!);
        }
    }
    /**
    Gets or sets the name of the event source.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // EventSourceAttribute


// type: System.Diagnostics.Tracing.EventSourceCreatedEventArgs
    /**
    Provides data for the  event.

    */
open class EventSourceCreatedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventSourceCreatedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.EventSourceCreatedEventArgs.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSourceCreatedEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventSource get_EventSource()
// docid: M:System.Diagnostics.Tracing.EventSourceCreatedEventArgs.get_EventSource
    open func get_EventSource() throws -> Optional<dotnet.System.Diagnostics.Tracing.EventSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceCreatedEventArgs_EventSource__get_EventSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Tracing.EventSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Get the event source that is attaching to the listener.

    */
    open var EventSource : Optional<dotnet.System.Diagnostics.Tracing.EventSource> {
        get {
            return try! get_EventSource();
        }
    }
} // EventSourceCreatedEventArgs


// type: System.Diagnostics.Tracing.EventSourceException
    /**
    The exception that is thrown when an error occurs during event tracing for Windows (ETW).

    */
open class EventSourceException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventSourceException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.EventSourceException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSourceException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The message that describes the error.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSourceException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or  if no inner exception is specified.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_EventSourceException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EventSourceException


// type: System.Diagnostics.Tracing.EventSourceOptions
// boxed value type
    /**
    Specifies overrides of default event settings such as the log level, keywords and operation code when the  method is called.

    */
public final class EventSourceOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventSourceOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    The activity options defined for this event source.

    */
    public var ActivityOptions : dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        get {
            return try! get_ActivityOptions();
        }
        set(v) {
            return try! set_ActivityOptions(value: v);
        }
    }
    /**
    Gets or sets the keywords applied to the event. If this property is not set, the event's keywords will be .

    */
    public var Keywords : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
            return try! get_Keywords();
        }
        set(v) {
            return try! set_Keywords(value: v);
        }
    }
    /**
    Gets or sets the event level applied to the event.

    */
    public var Level : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
    /**
    Gets or sets the operation code to use for the specified event.

    */
    public var Opcode : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
            return try! get_Opcode();
        }
        set(v) {
            return try! set_Opcode(value: v);
        }
    }
    /**
    The event tags defined for this event source.

    */
    public var Tags : dotnet.System.Diagnostics.Tracing.EventTags {
        get {
            return try! get_Tags();
        }
        set(v) {
            return try! set_Tags(value: v);
        }
    }
    public override init() {
        let h = System_Diagnostics_Tracing_EventSourceOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventActivityOptions get_ActivityOptions()
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.get_ActivityOptions
    public func get_ActivityOptions() throws -> dotnet.System.Diagnostics.Tracing.EventActivityOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceOptions_EventActivityOptions__get_ActivityOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventActivityOptions(val: __return);
        }
    }
    // [IsSpecialName] void set_ActivityOptions(System.Diagnostics.Tracing.EventActivityOptions)
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.set_ActivityOptions(System.Diagnostics.Tracing.EventActivityOptions)
    public func set_ActivityOptions(value : dotnet.System.Diagnostics.Tracing.EventActivityOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceOptions_void__set_ActivityOptions_0__1__EventActivityOptions(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventKeywords get_Keywords()
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.get_Keywords
    public func get_Keywords() throws -> dotnet.System.Diagnostics.Tracing.EventKeywords {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceOptions_EventKeywords__get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventKeywords(val: __return);
        }
    }
    // [IsSpecialName] void set_Keywords(System.Diagnostics.Tracing.EventKeywords)
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.set_Keywords(System.Diagnostics.Tracing.EventKeywords)
    public func set_Keywords(value : dotnet.System.Diagnostics.Tracing.EventKeywords) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceOptions_void__set_Keywords_0__1__EventKeywords(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventLevel get_Level()
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.get_Level
    public func get_Level() throws -> dotnet.System.Diagnostics.Tracing.EventLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceOptions_EventLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(System.Diagnostics.Tracing.EventLevel)
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.set_Level(System.Diagnostics.Tracing.EventLevel)
    public func set_Level(value : dotnet.System.Diagnostics.Tracing.EventLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceOptions_void__set_Level_0__1__EventLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventOpcode get_Opcode()
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.get_Opcode
    public func get_Opcode() throws -> dotnet.System.Diagnostics.Tracing.EventOpcode {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceOptions_EventOpcode__get_Opcode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventOpcode(val: __return);
        }
    }
    // [IsSpecialName] void set_Opcode(System.Diagnostics.Tracing.EventOpcode)
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.set_Opcode(System.Diagnostics.Tracing.EventOpcode)
    public func set_Opcode(value : dotnet.System.Diagnostics.Tracing.EventOpcode) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceOptions_void__set_Opcode_0__1__EventOpcode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventTags get_Tags()
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.get_Tags
    public func get_Tags() throws -> dotnet.System.Diagnostics.Tracing.EventTags {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventSourceOptions_EventTags__get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventTags(val: __return);
        }
    }
    // [IsSpecialName] void set_Tags(System.Diagnostics.Tracing.EventTags)
// docid: M:System.Diagnostics.Tracing.EventSourceOptions.set_Tags(System.Diagnostics.Tracing.EventTags)
    public func set_Tags(value : dotnet.System.Diagnostics.Tracing.EventTags) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_EventSourceOptions_void__set_Tags_0__1__EventTags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EventSourceOptions


// type: System.Diagnostics.Tracing.EventSourceSettings
    /**
    Specifies configuration options for an event source.

    */
public struct EventSourceSettings : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventSourceSettings_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventSourceSettings Default
    /**
    None of the special configuration options are enabled.

    */
    public static var Default : dotnet.System.Diagnostics.Tracing.EventSourceSettings {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventSourceSettings(val: System_Diagnostics_Tracing_EventSourceSettings_get_Default());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventSourceSettings ThrowOnEventWriteErrors
    /**
    The event source throws an exception when an error occurs.

    */
    public static var ThrowOnEventWriteErrors : dotnet.System.Diagnostics.Tracing.EventSourceSettings {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventSourceSettings(val: System_Diagnostics_Tracing_EventSourceSettings_get_ThrowOnEventWriteErrors());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventSourceSettings EtwManifestEventFormat
    /**
    The ETW listener should use a manifest-based format when raising events. Setting this option is a directive to the ETW listener should use manifest-based format when raising events. This is the default option when defining a type derived from  using one of the protected  constructors.

    */
    public static var EtwManifestEventFormat : dotnet.System.Diagnostics.Tracing.EventSourceSettings {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventSourceSettings(val: System_Diagnostics_Tracing_EventSourceSettings_get_EtwManifestEventFormat());
            return __return;
        }
    }
    // static field: System.Diagnostics.Tracing.EventSourceSettings EtwSelfDescribingEventFormat
    /**
    The ETW listener should use self-describing event format. This is the default option when creating a new instance of the  using one of the public  constructors.

    */
    public static var EtwSelfDescribingEventFormat : dotnet.System.Diagnostics.Tracing.EventSourceSettings {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventSourceSettings(val: System_Diagnostics_Tracing_EventSourceSettings_get_EtwSelfDescribingEventFormat());
            return __return;
        }
    }
} // EventSourceSettings


// type: System.Diagnostics.Tracing.EventTags
    /**
    Specifies the tracking of activity start and stop events. You should only use the lower 24 bits. For more information, see  and .

    */
public struct EventTags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventTags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventTags None
    /**
    Specifies no tag and is equal to zero.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventTags {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventTags(val: System_Diagnostics_Tracing_EventTags_get_None());
            return __return;
        }
    }
} // EventTags


// type: System.Diagnostics.Tracing.EventTask
    /**
    Defines the tasks that apply to events.

    */
public struct EventTask : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventTask_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Tracing.EventTask None
    /**
    Undefined task.

    */
    public static var None : dotnet.System.Diagnostics.Tracing.EventTask {
        get {
        let __return = dotnet.System.Diagnostics.Tracing.EventTask(val: System_Diagnostics_Tracing_EventTask_get_None());
            return __return;
        }
    }
} // EventTask


// type: System.Diagnostics.Tracing.EventWrittenEventArgs
    /**
    Provides data for the  callback.

    */
open class EventWrittenEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_EventWrittenEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Guid get_ActivityId()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_ActivityId
    open func get_ActivityId() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_Guid__get_ActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventChannel get_Channel()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Channel
    open func get_Channel() throws -> dotnet.System.Diagnostics.Tracing.EventChannel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventChannel__get_Channel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventChannel(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_EventId()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_EventId
    open func get_EventId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_i32__get_EventId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_EventName()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_EventName
    open func get_EventName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_String__get_EventName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventSource get_EventSource()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_EventSource
    open func get_EventSource() throws -> dotnet.System.Diagnostics.Tracing.EventSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventSource__get_EventSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventSource(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventKeywords get_Keywords()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Keywords
    open func get_Keywords() throws -> dotnet.System.Diagnostics.Tracing.EventKeywords {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventKeywords__get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventKeywords(val: __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventLevel get_Level()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Level
    open func get_Level() throws -> dotnet.System.Diagnostics.Tracing.EventLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventLevel(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Message
    open func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventOpcode get_Opcode()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Opcode
    open func get_Opcode() throws -> dotnet.System.Diagnostics.Tracing.EventOpcode {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventOpcode__get_Opcode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventOpcode(val: __return);
        }
    }
    // [IsSpecialName] System.Int64 get_OSThreadId()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_OSThreadId
    open func get_OSThreadId() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_i64__get_OSThreadId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Object> get_Payload()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Payload
    open func get_Payload() throws -> Optional<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_System_Collections_ObjectModel_ReadOnlyCollection_object___get_Payload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.String> get_PayloadNames()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_PayloadNames
    open func get_PayloadNames() throws -> Optional<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_System_Collections_ObjectModel_ReadOnlyCollection_string___get_PayloadNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Guid get_RelatedActivityId()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_RelatedActivityId
    open func get_RelatedActivityId() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_Guid__get_RelatedActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventTags get_Tags()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Tags
    open func get_Tags() throws -> dotnet.System.Diagnostics.Tracing.EventTags {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventTags__get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventTags(val: __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Tracing.EventTask get_Task()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Task
    open func get_Task() throws -> dotnet.System.Diagnostics.Tracing.EventTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_EventTask__get_Task_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Tracing.EventTask(val: __return);
        }
    }
    // [IsSpecialName] System.DateTime get_TimeStamp()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_TimeStamp
    open func get_TimeStamp() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_DateTime__get_TimeStamp_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_Version()
// docid: M:System.Diagnostics.Tracing.EventWrittenEventArgs.get_Version
    open func get_Version() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_EventWrittenEventArgs_u8__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the activity ID on the thread that the event was written to.

    */
    open var ActivityId : dotnet.System.Guid {
        get {
            return try! get_ActivityId();
        }
    }
    /**
    Gets the channel for the event.

    */
    open var Channel : dotnet.System.Diagnostics.Tracing.EventChannel {
        get {
            return try! get_Channel();
        }
    }
    /**
    Gets the event identifier.

    */
    open var EventId : Swift.Int32 {
        get {
            return try! get_EventId();
        }
    }
    /**
    Gets the name of the event.

    */
    open var EventName : Optional<dotnet.System.String> {
        get {
            return try! get_EventName();
        }
    }
    /**
    Gets the event source object.

    */
    open var EventSource : dotnet.System.Diagnostics.Tracing.EventSource {
        get {
            return try! get_EventSource();
        }
    }
    /**
    Gets the keywords for the event.

    */
    open var Keywords : dotnet.System.Diagnostics.Tracing.EventKeywords {
        get {
            return try! get_Keywords();
        }
    }
    /**
    Gets the level of the event.

    */
    open var Level : dotnet.System.Diagnostics.Tracing.EventLevel {
        get {
            return try! get_Level();
        }
    }
    /**
    Gets the message for the event.

    */
    open var Message : Optional<dotnet.System.String> {
        get {
            return try! get_Message();
        }
    }
    /**
    Gets the thread identifier for the OS thread that wrote the event. (.NET Core 2.2 and later only.)

    */
    open var OSThreadId : Swift.Int64 {
        get {
            return try! get_OSThreadId();
        }
    }
    /**
    Gets the operation code for the event.

    */
    open var Opcode : dotnet.System.Diagnostics.Tracing.EventOpcode {
        get {
            return try! get_Opcode();
        }
    }
    /**
    Gets the payload for the event.

    */
    open var Payload : Optional<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Object>> {
        get {
            return try! get_Payload();
        }
    }
    /**
    Returns a list of strings that represent the property names of the event.

    */
    open var PayloadNames : Optional<dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.String>> {
        get {
            return try! get_PayloadNames();
        }
    }
    /**
    Gets the identifier of an activity that is related to the activity represented by the current instance.

    */
    open var RelatedActivityId : dotnet.System.Guid {
        get {
            return try! get_RelatedActivityId();
        }
    }
    /**
    Returns the tags specified in the call to the  method.

    */
    open var Tags : dotnet.System.Diagnostics.Tracing.EventTags {
        get {
            return try! get_Tags();
        }
    }
    /**
    Gets the task for the event.

    */
    open var Task : dotnet.System.Diagnostics.Tracing.EventTask {
        get {
            return try! get_Task();
        }
    }
    /**
    Gets the time that the event was originally generated as a  timestamp. (.NET Core 2.2 and later only.)

    */
    open var TimeStamp : dotnet.System.DateTime {
        get {
            return try! get_TimeStamp();
        }
    }
    /**
    Gets the version of the event.

    */
    open var Version : Swift.UInt8 {
        get {
            return try! get_Version();
        }
    }
} // EventWrittenEventArgs


// type: System.Diagnostics.Tracing.IncrementingEventCounter
    /**
    Provides a variant of  for variables that are ever-increasing, such as the number of exceptions in the runtime.

    */
open class IncrementingEventCounter
    :
    dotnet.System.Diagnostics.Tracing.DiagnosticCounter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_IncrementingEventCounter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Diagnostics.Tracing.EventSource)
// docid: M:System.Diagnostics.Tracing.IncrementingEventCounter.#ctor(System.String,System.Diagnostics.Tracing.EventSource)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name for this  instance.
    - Parameter eventSource: The event source.
    */
    public init(name : dotnet.System.String, eventSource : dotnet.System.Diagnostics.Tracing.EventSource) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_IncrementingEventCounter_ctor_0__2__String_EventSource(&__thrown, name.get_handle(), eventSource.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Increment(System.Double)
// docid: M:System.Diagnostics.Tracing.IncrementingEventCounter.Increment(System.Double)
    /**
    Adds a value to a running total that will be published by the counter at the next timer interval.

    - Parameter increment: The value to increment the running total by.
    */
    open func Increment(increment : Swift.Double = 1.000000) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Tracing_IncrementingEventCounter_void__Increment_0__1__f64(&__thrown, self.get_handle(), increment);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.Tracing.IncrementingEventCounter.ToString
    /**
    Returns a string representation of the current incrementing event counter instance.

    - Returns: The name and increment of the current incrementing event counter.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_IncrementingEventCounter_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_DisplayRateTimeScale()
// docid: M:System.Diagnostics.Tracing.IncrementingEventCounter.get_DisplayRateTimeScale
    open func get_DisplayRateTimeScale() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_IncrementingEventCounter_TimeSpan__get_DisplayRateTimeScale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_DisplayRateTimeScale(System.TimeSpan)
    /**
    Gets or sets the rate at which this metric should be displayed as.

    */
    open var DisplayRateTimeScale : dotnet.System.TimeSpan {
        get {
            return try! get_DisplayRateTimeScale();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_DisplayRateTimeScale(System.TimeSpan)
    }
} // IncrementingEventCounter


// type: System.Diagnostics.Tracing.IncrementingPollingCounter
    /**
    Provides a variant of  for variables that are ever-increasing, such as the number of exceptions in the runtime.

    */
open class IncrementingPollingCounter
    :
    dotnet.System.Diagnostics.Tracing.DiagnosticCounter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_IncrementingPollingCounter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Diagnostics.Tracing.EventSource, System.Func<System.Double>)
// docid: M:System.Diagnostics.Tracing.IncrementingPollingCounter.#ctor(System.String,System.Diagnostics.Tracing.EventSource,System.Func{System.Double})
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name for this  instance.
    - Parameter eventSource: The event source this instance is a part of.
    - Parameter totalValueProvider: A method that will be used to poll the value.
    */
    public init(name : dotnet.System.String, eventSource : dotnet.System.Diagnostics.Tracing.EventSource, totalValueProvider : dotnet.System.Func_1<Swift.Double>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_IncrementingPollingCounter_ctor_0__3__String_EventSource_System_Func_f64_(&__thrown, name.get_handle(), eventSource.get_handle(), totalValueProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.Tracing.IncrementingPollingCounter.ToString
    /**
    Returns a string representation of the current incrementing polling counter instance.

    - Returns: The name and increment of the current incrementing polling counter.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_IncrementingPollingCounter_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_DisplayRateTimeScale()
// docid: M:System.Diagnostics.Tracing.IncrementingPollingCounter.get_DisplayRateTimeScale
    open func get_DisplayRateTimeScale() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_IncrementingPollingCounter_TimeSpan__get_DisplayRateTimeScale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_DisplayRateTimeScale(System.TimeSpan)
    /**
    Gets or sets rate at which this metric should be displayed as.

    */
    open var DisplayRateTimeScale : dotnet.System.TimeSpan {
        get {
            return try! get_DisplayRateTimeScale();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_DisplayRateTimeScale(System.TimeSpan)
    }
} // IncrementingPollingCounter


// type: System.Diagnostics.Tracing.NonEventAttribute
    /**
    Identifies a method that is not generating an event.

    */
public final class NonEventAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_NonEventAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Tracing.NonEventAttribute.#ctor
    /**
    Creates a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_NonEventAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NonEventAttribute


// type: System.Diagnostics.Tracing.PollingCounter
    /**
    Provides a variant of  that collects and calculates similar statistics as .

    */
open class PollingCounter
    :
    dotnet.System.Diagnostics.Tracing.DiagnosticCounter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Tracing_PollingCounter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Diagnostics.Tracing.EventSource, System.Func<System.Double>)
// docid: M:System.Diagnostics.Tracing.PollingCounter.#ctor(System.String,System.Diagnostics.Tracing.EventSource,System.Func{System.Double})
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name for this  instance.
    - Parameter eventSource: The event source.
    - Parameter metricProvider: A method that will be used to poll the value.
    */
    public init(name : dotnet.System.String, eventSource : dotnet.System.Diagnostics.Tracing.EventSource, metricProvider : dotnet.System.Func_1<Swift.Double>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Tracing_PollingCounter_ctor_0__3__String_EventSource_System_Func_f64_(&__thrown, name.get_handle(), eventSource.get_handle(), metricProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.Tracing.PollingCounter.ToString
    /**
    Returns a string representation of the current polling counter instance.

    - Returns: The name and mean of the current polling counter.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Tracing_PollingCounter_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // PollingCounter


}



