// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
extension System {
// type: System.LocalDataStoreSlot
    /**
    Encapsulates a memory slot to store local data. This class cannot be inherited.

    */
public final class LocalDataStoreSlot
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_LocalDataStoreSlot_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // LocalDataStoreSlot


}
// System.Threading
extension System.Threading {
// type: System.Threading.ApartmentState
    /**
    Specifies the apartment state of a .

    */
public struct ApartmentState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Threading_ApartmentState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Threading.ApartmentState STA
    /**
    The  will create and enter a single-threaded apartment.

    */
    public static var STA : dotnet.System.Threading.ApartmentState {
        get {
        let __return = dotnet.System.Threading.ApartmentState(val: System_Threading_ApartmentState_get_STA());
            return __return;
        }
    }
    // static field: System.Threading.ApartmentState MTA
    /**
    The  will create and enter a multithreaded apartment.

    */
    public static var MTA : dotnet.System.Threading.ApartmentState {
        get {
        let __return = dotnet.System.Threading.ApartmentState(val: System_Threading_ApartmentState_get_MTA());
            return __return;
        }
    }
    // static field: System.Threading.ApartmentState Unknown
    /**
    The  property has not been set.

    */
    public static var Unknown : dotnet.System.Threading.ApartmentState {
        get {
        let __return = dotnet.System.Threading.ApartmentState(val: System_Threading_ApartmentState_get_Unknown());
            return __return;
        }
    }
} // ApartmentState


// type: System.Threading.CompressedStack
    /**
    Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.

    */
public final class CompressedStack
    :
    dotnet.System.Object,
    System_Runtime_Serialization_ISerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_CompressedStack_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.CompressedStack Capture()
// docid: M:System.Threading.CompressedStack.Capture
    /**
    Captures the compressed stack from the current thread.

    - Returns: A  object.

    */
    public class func Capture() throws -> dotnet.System.Threading.CompressedStack {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_CompressedStack_CompressedStack__Capture_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CompressedStack(hndl : __return);
        }
    }
    // System.Threading.CompressedStack CreateCopy()
// docid: M:System.Threading.CompressedStack.CreateCopy
    /**
    Creates a copy of the current compressed stack.

    - Returns: A  object representing the current compressed stack.

    */
    public func CreateCopy() throws -> dotnet.System.Threading.CompressedStack {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_CompressedStack_CompressedStack__CreateCopy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CompressedStack(hndl : __return);
        }
    }
    // System.Threading.CompressedStack GetCompressedStack()
// docid: M:System.Threading.CompressedStack.GetCompressedStack
    /**
    Gets the compressed stack for the current thread.

    - Returns: A  for the current thread.

    */
    public class func GetCompressedStack() throws -> dotnet.System.Threading.CompressedStack {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_CompressedStack_CompressedStack__GetCompressedStack_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CompressedStack(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Sets the  object with the logical context information needed to recreate an instance of this execution context.

    - Parameter info: The  object to be populated with serialization information.
    - Parameter context: The  structure representing the destination context of the serialization.
    */
    public func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_CompressedStack_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Run(System.Threading.CompressedStack, System.Threading.ContextCallback, System.Object)
// docid: M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)
    /**
    Runs a method in the specified compressed stack on the current thread.

    - Parameter compressedStack: The  to set.
    - Parameter callback: A  that represents the method to be run in the specified security context.
    - Parameter state: The object to be passed to the callback method.
    */
    public class func Run(compressedStack : dotnet.System.Threading.CompressedStack, callback : dotnet.System.Threading.ContextCallback, state : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_CompressedStack_void__Run_0__3__CompressedStack_ContextCallback_Object(&__thrown, compressedStack.get_handle(), callback.get_handle(), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public class func Run(compressedStack : dotnet.System.Threading.CompressedStack, callback : @escaping (Optional<dotnet.System.Object>) throws -> Void, state : Optional<dotnet.System.Object>) throws {
        let del_callback = try dotnet.System.Threading.ContextCallback(callback);
        return try Run(compressedStack: compressedStack, callback: del_callback, state: state);
    }
} // CompressedStack


// type: System.Threading.ParameterizedThreadStart
    /**
    Represents the method that executes on a .

    */
public final class ParameterizedThreadStart
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_ParameterizedThreadStart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object)
// docid: M:System.Threading.ParameterizedThreadStart.Invoke(System.Object)
    public func Invoke(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ParameterizedThreadStart_void__Invoke_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)
// docid: M:System.Threading.ParameterizedThreadStart.BeginInvoke(System.Object,System.AsyncCallback,System.Object)
    public func BeginInvoke(obj : Optional<dotnet.System.Object>, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_ParameterizedThreadStart_IAsyncResult__BeginInvoke_0__3__Object_AsyncCallback_Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Threading.ParameterizedThreadStart.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ParameterizedThreadStart_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, obj : NullableHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((obj != nil) ? (dotnet.System.Object(hndl: obj!)) : nil);
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, obj : NullableHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle) -> Void;
            f(thrown, obj);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ParameterizedThreadStart_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object)
// docid: M:System.Threading.ParameterizedThreadStart.Invoke(System.Object)
    public func callAsFunction(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ParameterizedThreadStart_void__Invoke_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ParameterizedThreadStart


// type: System.Threading.Thread
    /**
    Creates and controls a thread, sets its priority, and gets its status.

    */
public final class Thread
    :
    dotnet.System.Runtime.ConstrainedExecution.CriticalFinalizerObject
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Thread_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Threading.ParameterizedThreadStart)
// docid: M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)
    /**
    Initializes a new instance of the  class, specifying a delegate that allows an object to be passed to the thread when the thread is started.

    - Parameter start: A delegate that represents the methods to be invoked when this thread begins executing.
    */
    public init(start : dotnet.System.Threading.ParameterizedThreadStart) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Thread_ctor_0__1__ParameterizedThreadStart(&__thrown, start.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Threading.ParameterizedThreadStart, System.Int32)
// docid: M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)
    /**
    Initializes a new instance of the  class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.

    - Parameter start: A  delegate that represents the methods to be invoked when this thread begins executing.
    - Parameter maxStackSize: The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.  
  
 Important   For partially trusted code,  is ignored if it is greater than the default stack size. No exception is thrown.
    */
    public init(start : dotnet.System.Threading.ParameterizedThreadStart, maxStackSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Thread_ctor_0__2__ParameterizedThreadStart_i32(&__thrown, start.get_handle(), maxStackSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Threading.ThreadStart)
// docid: M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)
    /**
    Initializes a new instance of the  class.

    - Parameter start: A  delegate that represents the methods to be invoked when this thread begins executing.
    */
    public init(start : dotnet.System.Threading.ThreadStart) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Thread_ctor_0__1__ThreadStart(&__thrown, start.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Threading.ThreadStart, System.Int32)
// docid: M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)
    /**
    Initializes a new instance of the  class, specifying the maximum stack size for the thread.

    - Parameter start: A  delegate that represents the methods to be invoked when this thread begins executing.
    - Parameter maxStackSize: The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.  
  
 Important   For partially trusted code,  is ignored if it is greater than the default stack size. No exception is thrown.
    */
    public init(start : dotnet.System.Threading.ThreadStart, maxStackSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Thread_ctor_0__2__ThreadStart_i32(&__thrown, start.get_handle(), maxStackSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Abort()
// docid: M:System.Threading.Thread.Abort
    /**
    Raises a  in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.

    */
    public func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Abort(System.Object)
// docid: M:System.Threading.Thread.Abort(System.Object)
    /**
    Raises a  in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.

    - Parameter stateInfo: An object that contains application-specific information, such as state, which can be used by the thread being aborted.
    */
    public func Abort(stateInfo : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Abort_0__1__Object(&__thrown, self.get_handle(), stateInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.LocalDataStoreSlot AllocateDataSlot()
// docid: M:System.Threading.Thread.AllocateDataSlot
    /**
    Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the  attribute instead.

    - Returns: The allocated named data slot on all threads.

    */
    public class func AllocateDataSlot() throws -> dotnet.System.LocalDataStoreSlot {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_LocalDataStoreSlot__AllocateDataSlot_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.LocalDataStoreSlot(hndl : __return);
        }
    }
    // System.LocalDataStoreSlot AllocateNamedDataSlot(System.String)
// docid: M:System.Threading.Thread.AllocateNamedDataSlot(System.String)
    /**
    Allocates a named data slot on all threads. For better performance, use fields that are marked with the  attribute instead.

    - Parameter name: The name of the data slot to be allocated.
    - Returns: The allocated named data slot on all threads.

    */
    public class func AllocateNamedDataSlot(name : dotnet.System.String) throws -> dotnet.System.LocalDataStoreSlot {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_LocalDataStoreSlot__AllocateNamedDataSlot_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.LocalDataStoreSlot(hndl : __return);
        }
    }
    // void BeginCriticalRegion()
// docid: M:System.Threading.Thread.BeginCriticalRegion
    /**
    Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.

    */
    public class func BeginCriticalRegion() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__BeginCriticalRegion_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginThreadAffinity()
// docid: M:System.Threading.Thread.BeginThreadAffinity
    /**
    Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.

    */
    public class func BeginThreadAffinity() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__BeginThreadAffinity_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DisableComObjectEagerCleanup()
// docid: M:System.Threading.Thread.DisableComObjectEagerCleanup
    /**
    Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.

    */
    public func DisableComObjectEagerCleanup() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__DisableComObjectEagerCleanup_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndCriticalRegion()
// docid: M:System.Threading.Thread.EndCriticalRegion
    /**
    Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.

    */
    public class func EndCriticalRegion() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__EndCriticalRegion_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndThreadAffinity()
// docid: M:System.Threading.Thread.EndThreadAffinity
    /**
    Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.

    */
    public class func EndThreadAffinity() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__EndThreadAffinity_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void FreeNamedDataSlot(System.String)
// docid: M:System.Threading.Thread.FreeNamedDataSlot(System.String)
    /**
    Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the  attribute instead.

    - Parameter name: The name of the data slot to be freed.
    */
    public class func FreeNamedDataSlot(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__FreeNamedDataSlot_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.ApartmentState GetApartmentState()
// docid: M:System.Threading.Thread.GetApartmentState
    /**
    Returns an  value indicating the apartment state.

    - Returns: One of the  values indicating the apartment state of the managed thread. The default is .

    */
    public func GetApartmentState() throws -> dotnet.System.Threading.ApartmentState {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_ApartmentState__GetApartmentState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.ApartmentState(val: __return);
        }
    }
    // System.Threading.CompressedStack GetCompressedStack()
// docid: M:System.Threading.Thread.GetCompressedStack
    /**
    Returns a  object that can be used to capture the stack for the current thread.

    - Returns: None.

    */
    public func GetCompressedStack() throws -> dotnet.System.Threading.CompressedStack {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_CompressedStack__GetCompressedStack_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CompressedStack(hndl : __return);
        }
    }
    // System.Int32 GetCurrentProcessorId()
// docid: M:System.Threading.Thread.GetCurrentProcessorId
    /**
    Gets an ID used to indicate on which processor the current thread is executing.

    - Returns: An integer representing the cached processor ID.

    */
    public class func GetCurrentProcessorId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_i32__GetCurrentProcessorId_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Object GetData(System.LocalDataStoreSlot)
// docid: M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)
    /**
    Retrieves the value from the specified slot on the current thread, within the current thread's current domain. For better performance, use fields that are marked with the  attribute instead.

    - Parameter slot: The  from which to get the value.
    - Returns: The retrieved value.

    */
    public class func GetData(slot : dotnet.System.LocalDataStoreSlot) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_Object__GetData_0__1__LocalDataStoreSlot(&__thrown, slot.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.AppDomain GetDomain()
// docid: M:System.Threading.Thread.GetDomain
    /**
    Returns the current domain in which the current thread is running.

    - Returns: An  representing the current application domain of the running thread.

    */
    public class func GetDomain() throws -> dotnet.System.AppDomain {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_AppDomain__GetDomain_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.AppDomain(hndl : __return);
        }
    }
    // System.Int32 GetDomainID()
// docid: M:System.Threading.Thread.GetDomainID
    /**
    Returns a unique application domain identifier.

    - Returns: A 32-bit signed integer uniquely identifying the application domain.

    */
    public class func GetDomainID() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_i32__GetDomainID_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Threading.Thread.GetHashCode
    /**
    Returns a hash code for the current thread.

    - Returns: An integer hash code value.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.LocalDataStoreSlot GetNamedDataSlot(System.String)
// docid: M:System.Threading.Thread.GetNamedDataSlot(System.String)
    /**
    Looks up a named data slot. For better performance, use fields that are marked with the  attribute instead.

    - Parameter name: The name of the local data slot.
    - Returns: A  allocated for this thread.

    */
    public class func GetNamedDataSlot(name : dotnet.System.String) throws -> dotnet.System.LocalDataStoreSlot {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_LocalDataStoreSlot__GetNamedDataSlot_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.LocalDataStoreSlot(hndl : __return);
        }
    }
    // void Interrupt()
// docid: M:System.Threading.Thread.Interrupt
    /**
    Interrupts a thread that is in the  thread state.

    */
    public func Interrupt() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Interrupt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Join()
// docid: M:System.Threading.Thread.Join
    /**
    Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and  pumping.

    */
    public func Join() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Join_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Join(System.Int32)
// docid: M:System.Threading.Thread.Join(System.Int32)
    /**
    Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.

    - Parameter millisecondsTimeout: The number of milliseconds to wait for the thread to terminate.
    - Returns: 
         if the thread has terminated;  if the thread has not terminated after the amount of time specified by the  parameter has elapsed.

    */
    public func Join(millisecondsTimeout : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_bool__Join_0__1__i32(&__thrown, self.get_handle(), millisecondsTimeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool Join(System.TimeSpan)
    // void MemoryBarrier()
// docid: M:System.Threading.Thread.MemoryBarrier
    /**
    Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to  execute after memory accesses that follow the call to .

    */
    public class func MemoryBarrier() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__MemoryBarrier_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetAbort()
// docid: M:System.Threading.Thread.ResetAbort
    /**
    Cancels an  requested for the current thread.

    */
    public class func ResetAbort() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__ResetAbort_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Resume()
// docid: M:System.Threading.Thread.Resume
    /**
    Resumes a thread that has been suspended.

    */
    public func Resume() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Resume_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetApartmentState(System.Threading.ApartmentState)
// docid: M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)
    /**
    Sets the apartment state of a thread before it is started.

    - Parameter state: The new apartment state.
    */
    public func SetApartmentState(state : dotnet.System.Threading.ApartmentState) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__SetApartmentState_0__1__ApartmentState(&__thrown, self.get_handle(), state.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCompressedStack(System.Threading.CompressedStack)
// docid: M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)
    /**
    Applies a captured  to the current thread.

    - Parameter stack: The  object to be applied to the current thread.
    */
    public func SetCompressedStack(stack : dotnet.System.Threading.CompressedStack) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__SetCompressedStack_0__1__CompressedStack(&__thrown, self.get_handle(), stack.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetData(System.LocalDataStoreSlot, System.Object)
// docid: M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)
    /**
    Sets the data in the specified slot on the currently running thread, for that thread's current domain. For better performance, use fields marked with the  attribute instead.

    - Parameter slot: The  in which to set the value.
    - Parameter data: The value to be set.
    */
    public class func SetData(slot : dotnet.System.LocalDataStoreSlot, data : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__SetData_0__2__LocalDataStoreSlot_Object(&__thrown, slot.get_handle(), data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sleep(System.Int32)
// docid: M:System.Threading.Thread.Sleep(System.Int32)
    /**
    Suspends the current thread for the specified number of milliseconds.

    - Parameter millisecondsTimeout: The number of milliseconds for which the thread is suspended. If the value of the  argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.
    */
    public class func Sleep(millisecondsTimeout : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Sleep_0__1__i32(&__thrown, millisecondsTimeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void Sleep(System.TimeSpan)
    // void SpinWait(System.Int32)
// docid: M:System.Threading.Thread.SpinWait(System.Int32)
    /**
    Causes a thread to wait the number of times defined by the  parameter.

    - Parameter iterations: A 32-bit signed integer that defines how long a thread is to wait.
    */
    public class func SpinWait(iterations : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__SpinWait_0__1__i32(&__thrown, iterations);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Start()
// docid: M:System.Threading.Thread.Start
    /**
    Causes the operating system to change the state of the current instance to .

    */
    public func Start() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Start(System.Object)
// docid: M:System.Threading.Thread.Start(System.Object)
    /**
    Causes the operating system to change the state of the current instance to , and optionally supplies an object containing data to be used by the method the thread executes.

    - Parameter parameter: An object that contains data to be used by the method the thread executes.
    */
    public func Start(parameter : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Start_0__1__Object(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Suspend()
// docid: M:System.Threading.Thread.Suspend
    /**
    Either suspends the thread, or if the thread is already suspended, has no effect.

    */
    public func Suspend() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__Suspend_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TrySetApartmentState(System.Threading.ApartmentState)
// docid: M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)
    /**
    Sets the apartment state of a thread before it is started.

    - Parameter state: The new apartment state.
    - Returns: 
         if the apartment state is set; otherwise, .

    */
    public func TrySetApartmentState(state : dotnet.System.Threading.ApartmentState) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_bool__TrySetApartmentState_0__1__ApartmentState(&__thrown, self.get_handle(), state.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void UnsafeStart()
// docid: M:System.Threading.Thread.UnsafeStart
    public func UnsafeStart() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__UnsafeStart_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UnsafeStart(System.Object)
// docid: M:System.Threading.Thread.UnsafeStart(System.Object)
    public func UnsafeStart(parameter : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__UnsafeStart_0__1__Object(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte VolatileRead(ref System.Byte)
// docid: M:System.Threading.Thread.VolatileRead(System.Byte@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.UInt8) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_u8__VolatileRead_0__1__refu8(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double VolatileRead(ref System.Double)
// docid: M:System.Threading.Thread.VolatileRead(System.Double@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.Double) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_f64__VolatileRead_0__1__reff64(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int16 VolatileRead(ref System.Int16)
// docid: M:System.Threading.Thread.VolatileRead(System.Int16@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.Int16) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_i16__VolatileRead_0__1__refi16(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 VolatileRead(ref System.Int32)
// docid: M:System.Threading.Thread.VolatileRead(System.Int32@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_i32__VolatileRead_0__1__refi32(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 VolatileRead(ref System.Int64)
// docid: M:System.Threading.Thread.VolatileRead(System.Int64@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.Int64) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_i64__VolatileRead_0__1__refi64(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr VolatileRead(ref System.IntPtr)
// docid: M:System.Threading.Thread.VolatileRead(System.IntPtr@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout dotnet.System.IntPtr) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address.get_value();
        let __return = System_Threading_Thread_IntPtr__VolatileRead_0__1__refIntPtr(&__thrown, &_tmp_ref_address);
        let _tmp2_address = dotnet.System.IntPtr(val: _tmp_ref_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Object VolatileRead(ref System.Object)
// docid: M:System.Threading.Thread.VolatileRead(System.Object@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address.get_handle();
        let __return = System_Threading_Thread_Object__VolatileRead_0__1__refObject(&__thrown, &_tmp_ref_address);
        let _tmp2_address = dotnet.System.Object(hndl: _tmp_ref_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.SByte VolatileRead(ref System.SByte)
// docid: M:System.Threading.Thread.VolatileRead(System.SByte@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.Int8) throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_i8__VolatileRead_0__1__refi8(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single VolatileRead(ref System.Single)
// docid: M:System.Threading.Thread.VolatileRead(System.Single@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.Float) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_f32__VolatileRead_0__1__reff32(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt16 VolatileRead(ref System.UInt16)
// docid: M:System.Threading.Thread.VolatileRead(System.UInt16@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.UInt16) throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_u16__VolatileRead_0__1__refu16(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt32 VolatileRead(ref System.UInt32)
// docid: M:System.Threading.Thread.VolatileRead(System.UInt32@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.UInt32) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_u32__VolatileRead_0__1__refu32(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt64 VolatileRead(ref System.UInt64)
// docid: M:System.Threading.Thread.VolatileRead(System.UInt64@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout Swift.UInt64) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        let __return = System_Threading_Thread_u64__VolatileRead_0__1__refu64(&__thrown, &_tmp_ref_address);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UIntPtr VolatileRead(ref System.UIntPtr)
// docid: M:System.Threading.Thread.VolatileRead(System.UIntPtr@)
    /**
    Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.

    - Parameter address: The field to be read.
    - Returns: The latest value written to the field by any processor.

    */
    public class func VolatileRead(address : inout dotnet.System.UIntPtr) throws -> dotnet.System.UIntPtr {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address.get_handle();
        let __return = System_Threading_Thread_UIntPtr__VolatileRead_0__1__refUIntPtr(&__thrown, &_tmp_ref_address);
        let _tmp2_address = dotnet.System.UIntPtr(hndl: _tmp_ref_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.UIntPtr(hndl : __return);
        }
    }
    // void VolatileWrite(ref System.Byte, System.Byte)
// docid: M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.UInt8, value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refu8_u8(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.Double, System.Double)
// docid: M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.Double, value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__reff64_f64(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.Int16, System.Int16)
// docid: M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.Int16, value : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refi16_i16(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.Int32, System.Int32)
// docid: M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.Int32, value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refi32_i32(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.Int64, System.Int64)
// docid: M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.Int64, value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refi64_i64(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.IntPtr, System.IntPtr)
// docid: M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout dotnet.System.IntPtr, value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address.get_value();
        System_Threading_Thread_void__VolatileWrite_0__2__refIntPtr_IntPtr(&__thrown, &_tmp_ref_address, value.get_value());
        let _tmp2_address = dotnet.System.IntPtr(val: _tmp_ref_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.Object, System.Object)
// docid: M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address.get_handle();
        System_Threading_Thread_void__VolatileWrite_0__2__refObject_Object(&__thrown, &_tmp_ref_address, value?.get_handle() ?? nil);
        let _tmp2_address = dotnet.System.Object(hndl: _tmp_ref_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.SByte, System.SByte)
// docid: M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.Int8, value : Swift.Int8) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refi8_i8(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.Single, System.Single)
// docid: M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.Float, value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__reff32_f32(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.UInt16, System.UInt16)
// docid: M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.UInt16, value : Swift.UInt16) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refu16_u16(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.UInt32, System.UInt32)
// docid: M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.UInt32, value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refu32_u32(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.UInt64, System.UInt64)
// docid: M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout Swift.UInt64, value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address;
        System_Threading_Thread_void__VolatileWrite_0__2__refu64_u64(&__thrown, &_tmp_ref_address, value);
        let _tmp2_address = _tmp_ref_address;
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void VolatileWrite(ref System.UIntPtr, System.UIntPtr)
// docid: M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)
    /**
    Writes a value to a field immediately, so that the value is visible to all processors in the computer.

    - Parameter address: The field to which the value is to be written.
    - Parameter value: The value to be written.
    */
    public class func VolatileWrite(address : inout dotnet.System.UIntPtr, value : dotnet.System.UIntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_address = address.get_handle();
        System_Threading_Thread_void__VolatileWrite_0__2__refUIntPtr_UIntPtr(&__thrown, &_tmp_ref_address, value.get_handle());
        let _tmp2_address = dotnet.System.UIntPtr(hndl: _tmp_ref_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Yield()
// docid: M:System.Threading.Thread.Yield
    /**
    Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.

    - Returns: 
         if the operating system switched execution to another thread; otherwise, .

    */
    public class func Yield() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_bool__Yield_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Threading.ApartmentState get_ApartmentState()
// docid: M:System.Threading.Thread.get_ApartmentState
    public func get_ApartmentState() throws -> dotnet.System.Threading.ApartmentState {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_ApartmentState__get_ApartmentState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.ApartmentState(val: __return);
        }
    }
    // [IsSpecialName] void set_ApartmentState(System.Threading.ApartmentState)
// docid: M:System.Threading.Thread.set_ApartmentState(System.Threading.ApartmentState)
    public func set_ApartmentState(value : dotnet.System.Threading.ApartmentState) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_ApartmentState_0__1__ApartmentState(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_CurrentCulture()
// docid: M:System.Threading.Thread.get_CurrentCulture
    public func get_CurrentCulture() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_CultureInfo__get_CurrentCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CurrentCulture(System.Globalization.CultureInfo)
// docid: M:System.Threading.Thread.set_CurrentCulture(System.Globalization.CultureInfo)
    public func set_CurrentCulture(value : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_CurrentCulture_0__1__CultureInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.IPrincipal get_CurrentPrincipal()
// docid: M:System.Threading.Thread.get_CurrentPrincipal
    public class func get_CurrentPrincipal() throws -> Optional<dotnet.System.Security.Principal.IPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_IPrincipal__get_CurrentPrincipal_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.IPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CurrentPrincipal(System.Security.Principal.IPrincipal)
// docid: M:System.Threading.Thread.set_CurrentPrincipal(System.Security.Principal.IPrincipal)
    public class func set_CurrentPrincipal(value : Optional<dotnet.System.Security.Principal.IPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_CurrentPrincipal_0__1__IPrincipal(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.Thread get_CurrentThread()
// docid: M:System.Threading.Thread.get_CurrentThread
    public class func get_CurrentThread() throws -> dotnet.System.Threading.Thread {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_Thread__get_CurrentThread_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Thread(hndl : __return);
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_CurrentUICulture()
// docid: M:System.Threading.Thread.get_CurrentUICulture
    public func get_CurrentUICulture() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_CultureInfo__get_CurrentUICulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CurrentUICulture(System.Globalization.CultureInfo)
// docid: M:System.Threading.Thread.set_CurrentUICulture(System.Globalization.CultureInfo)
    public func set_CurrentUICulture(value : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_CurrentUICulture_0__1__CultureInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.ExecutionContext get_ExecutionContext()
// docid: M:System.Threading.Thread.get_ExecutionContext
    public func get_ExecutionContext() throws -> Optional<dotnet.System.Threading.ExecutionContext> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_ExecutionContext__get_ExecutionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.ExecutionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsAlive()
// docid: M:System.Threading.Thread.get_IsAlive
    public func get_IsAlive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_bool__get_IsAlive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsBackground()
// docid: M:System.Threading.Thread.get_IsBackground
    public func get_IsBackground() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_bool__get_IsBackground_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsBackground(bool)
// docid: M:System.Threading.Thread.set_IsBackground(System.Boolean)
    public func set_IsBackground(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_IsBackground_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsThreadPoolThread()
// docid: M:System.Threading.Thread.get_IsThreadPoolThread
    public func get_IsThreadPoolThread() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_bool__get_IsThreadPoolThread_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_ManagedThreadId()
// docid: M:System.Threading.Thread.get_ManagedThreadId
    public func get_ManagedThreadId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_i32__get_ManagedThreadId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Threading.Thread.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Threading.Thread.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.ThreadPriority get_Priority()
// docid: M:System.Threading.Thread.get_Priority
    public func get_Priority() throws -> dotnet.System.Threading.ThreadPriority {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_ThreadPriority__get_Priority_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.ThreadPriority(val: __return);
        }
    }
    // [IsSpecialName] void set_Priority(System.Threading.ThreadPriority)
// docid: M:System.Threading.Thread.set_Priority(System.Threading.ThreadPriority)
    public func set_Priority(value : dotnet.System.Threading.ThreadPriority) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Thread_void__set_Priority_0__1__ThreadPriority(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.ThreadState get_ThreadState()
// docid: M:System.Threading.Thread.get_ThreadState
    public func get_ThreadState() throws -> dotnet.System.Threading.ThreadState {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Thread_ThreadState__get_ThreadState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.ThreadState(val: __return);
        }
    }
    /**
    Gets or sets the apartment state of this thread.

    */
    public var ApartmentState : dotnet.System.Threading.ApartmentState {
        get {
            return try! get_ApartmentState();
        }
        set(v) {
            return try! set_ApartmentState(value: v);
        }
    }
    /**
    Gets or sets the culture for the current thread.

    */
    public var CurrentCulture : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_CurrentCulture();
        }
        set(v) {
            return try! set_CurrentCulture(value: v);
        }
    }
    /**
    Gets or sets the thread's current principal (for role-based security).

    */
    public static var CurrentPrincipal : Optional<dotnet.System.Security.Principal.IPrincipal> {
        get {
            return try! get_CurrentPrincipal();
        }
        set(v) {
            return try! set_CurrentPrincipal(value: v!);
        }
    }
    /**
    Gets the currently running thread.

    */
    public static var CurrentThread : dotnet.System.Threading.Thread {
        get {
            return try! get_CurrentThread();
        }
    }
    /**
    Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.

    */
    public var CurrentUICulture : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_CurrentUICulture();
        }
        set(v) {
            return try! set_CurrentUICulture(value: v);
        }
    }
    /**
    Gets an  object that contains information about the various contexts of the current thread.

    */
    public var ExecutionContext : Optional<dotnet.System.Threading.ExecutionContext> {
        get {
            return try! get_ExecutionContext();
        }
    }
    /**
    Gets a value indicating the execution status of the current thread.

    */
    public var IsAlive : Bool {
        get {
            return try! get_IsAlive();
        }
    }
    /**
    Gets or sets a value indicating whether or not a thread is a background thread.

    */
    public var IsBackground : Bool {
        get {
            return try! get_IsBackground();
        }
        set(v) {
            return try! set_IsBackground(value: v);
        }
    }
    /**
    Gets a value indicating whether or not a thread belongs to the managed thread pool.

    */
    public var IsThreadPoolThread : Bool {
        get {
            return try! get_IsThreadPoolThread();
        }
    }
    /**
    Gets a unique identifier for the current managed thread.

    */
    public var ManagedThreadId : Swift.Int32 {
        get {
            return try! get_ManagedThreadId();
        }
    }
    /**
    Gets or sets the name of the thread.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets a value indicating the scheduling priority of a thread.

    */
    public var Priority : dotnet.System.Threading.ThreadPriority {
        get {
            return try! get_Priority();
        }
        set(v) {
            return try! set_Priority(value: v);
        }
    }
    /**
    Gets a value containing the states of the current thread.

    */
    public var ThreadState : dotnet.System.Threading.ThreadState {
        get {
            return try! get_ThreadState();
        }
    }
} // Thread


// type: System.Threading.ThreadAbortException
    /**
    The exception that is thrown when a call is made to the  method. This class cannot be inherited.

    */
public final class ThreadAbortException
    :
    dotnet.System.SystemException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadAbortException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Object get_ExceptionState()
// docid: M:System.Threading.ThreadAbortException.get_ExceptionState
    public func get_ExceptionState() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_ThreadAbortException_Object__get_ExceptionState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets an object that contains application-specific information related to the thread abort.

    */
    public var ExceptionState : Optional<dotnet.System.Object> {
        get {
            return try! get_ExceptionState();
        }
    }
} // ThreadAbortException


// type: System.Threading.ThreadExceptionEventArgs
    /**
    Provides data for the  event.

    */
open class ThreadExceptionEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadExceptionEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Exception)
// docid: M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter t: The  that occurred.
    */
    public init(t : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadExceptionEventArgs_ctor_0__1__Exception(&__thrown, t.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:System.Threading.ThreadExceptionEventArgs.get_Exception
    open func get_Exception() throws -> dotnet.System.Exception {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_ThreadExceptionEventArgs_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Exception(hndl : __return);
        }
    }
    /**
    Gets the  that occurred.

    */
    open var Exception : dotnet.System.Exception {
        get {
            return try! get_Exception();
        }
    }
} // ThreadExceptionEventArgs


// type: System.Threading.ThreadExceptionEventHandler
    /**
    Represents the method that will handle the  event of an .

    */
public final class ThreadExceptionEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadExceptionEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Threading.ThreadExceptionEventArgs)
// docid: M:System.Threading.ThreadExceptionEventHandler.Invoke(System.Object,System.Threading.ThreadExceptionEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Threading.ThreadExceptionEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ThreadExceptionEventHandler_void__Invoke_0__2__Object_ThreadExceptionEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Threading.ThreadExceptionEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Threading.ThreadExceptionEventHandler.BeginInvoke(System.Object,System.Threading.ThreadExceptionEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Threading.ThreadExceptionEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_ThreadExceptionEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ThreadExceptionEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Threading.ThreadExceptionEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ThreadExceptionEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Threading.ThreadExceptionEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Threading.ThreadExceptionEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadExceptionEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Threading.ThreadExceptionEventArgs)
// docid: M:System.Threading.ThreadExceptionEventHandler.Invoke(System.Object,System.Threading.ThreadExceptionEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Threading.ThreadExceptionEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ThreadExceptionEventHandler_void__Invoke_0__2__Object_ThreadExceptionEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ThreadExceptionEventHandler


// type: System.Threading.ThreadInterruptedException
    /**
    The exception that is thrown when a  is interrupted while it is in a waiting state.

    */
open class ThreadInterruptedException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadInterruptedException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.ThreadInterruptedException.#ctor
    /**
    Initializes a new instance of the  class with default properties.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadInterruptedException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Threading.ThreadInterruptedException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadInterruptedException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadInterruptedException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ThreadInterruptedException


// type: System.Threading.ThreadPriority
    /**
    Specifies the scheduling priority of a .

    */
public struct ThreadPriority : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadPriority_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Threading.ThreadPriority Lowest
    /**
    The  can be scheduled after threads with any other priority.

    */
    public static var Lowest : dotnet.System.Threading.ThreadPriority {
        get {
        let __return = dotnet.System.Threading.ThreadPriority(val: System_Threading_ThreadPriority_get_Lowest());
            return __return;
        }
    }
    // static field: System.Threading.ThreadPriority BelowNormal
    /**
    The  can be scheduled after threads with  priority and before those with  priority.

    */
    public static var BelowNormal : dotnet.System.Threading.ThreadPriority {
        get {
        let __return = dotnet.System.Threading.ThreadPriority(val: System_Threading_ThreadPriority_get_BelowNormal());
            return __return;
        }
    }
    // static field: System.Threading.ThreadPriority Normal
    /**
    The  can be scheduled after threads with  priority and before those with  priority. Threads have  priority by default.

    */
    public static var Normal : dotnet.System.Threading.ThreadPriority {
        get {
        let __return = dotnet.System.Threading.ThreadPriority(val: System_Threading_ThreadPriority_get_Normal());
            return __return;
        }
    }
    // static field: System.Threading.ThreadPriority AboveNormal
    /**
    The  can be scheduled after threads with  priority and before those with  priority.

    */
    public static var AboveNormal : dotnet.System.Threading.ThreadPriority {
        get {
        let __return = dotnet.System.Threading.ThreadPriority(val: System_Threading_ThreadPriority_get_AboveNormal());
            return __return;
        }
    }
    // static field: System.Threading.ThreadPriority Highest
    /**
    The  can be scheduled before threads with any other priority.

    */
    public static var Highest : dotnet.System.Threading.ThreadPriority {
        get {
        let __return = dotnet.System.Threading.ThreadPriority(val: System_Threading_ThreadPriority_get_Highest());
            return __return;
        }
    }
} // ThreadPriority


// type: System.Threading.ThreadStart
    /**
    Represents the method that executes on a .

    */
public final class ThreadStart
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadStart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke()
// docid: M:System.Threading.ThreadStart.Invoke
    public func Invoke() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ThreadStart_void__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:System.Threading.ThreadStart.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_ThreadStart_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Threading.ThreadStart.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ThreadStart_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping () throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback();
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> Void;
            f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadStart_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke()
// docid: M:System.Threading.ThreadStart.Invoke
    public func callAsFunction() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_ThreadStart_void__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ThreadStart


// type: System.Threading.ThreadStartException
    /**
    The exception that is thrown when a failure occurs in a managed thread after the underlying operating system thread has been started, but before the thread is ready to execute user code.

    */
public final class ThreadStartException
    :
    dotnet.System.SystemException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadStartException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ThreadStartException


// type: System.Threading.ThreadState
    /**
    Specifies the execution states of a .

    */
public struct ThreadState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Threading.ThreadState Running
    /**
    The thread has been started and not yet stopped.

    */
    public static var Running : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_Running());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState StopRequested
    /**
    The thread is being requested to stop. This is for internal use only.

    */
    public static var StopRequested : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_StopRequested());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState SuspendRequested
    /**
    The thread is being requested to suspend.

    */
    public static var SuspendRequested : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_SuspendRequested());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState Background
    /**
    The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the  property.

    */
    public static var Background : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_Background());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState Unstarted
    /**
    The  method has not been invoked on the thread.

    */
    public static var Unstarted : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_Unstarted());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState Stopped
    /**
    The thread has stopped.

    */
    public static var Stopped : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_Stopped());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState WaitSleepJoin
    /**
    The thread is blocked. This could be the result of calling  or , of requesting a lock - for example, by calling  or  - or of waiting on a thread synchronization object such as .

    */
    public static var WaitSleepJoin : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_WaitSleepJoin());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState Suspended
    /**
    The thread has been suspended.

    */
    public static var Suspended : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_Suspended());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState AbortRequested
    /**
    The  method has been invoked on the thread, but the thread has not yet received the pending  that will attempt to terminate it.

    */
    public static var AbortRequested : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_AbortRequested());
            return __return;
        }
    }
    // static field: System.Threading.ThreadState Aborted
    /**
    The thread state includes  and the thread is now dead, but its state has not yet changed to .

    */
    public static var Aborted : dotnet.System.Threading.ThreadState {
        get {
        let __return = dotnet.System.Threading.ThreadState(val: System_Threading_ThreadState_get_Aborted());
            return __return;
        }
    }
} // ThreadState


// type: System.Threading.ThreadStateException
    /**
    The exception that is thrown when a  is in an invalid  for the method call.

    */
open class ThreadStateException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_ThreadStateException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.ThreadStateException.#ctor
    /**
    Initializes a new instance of the  class with default properties.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadStateException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Threading.ThreadStateException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadStateException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_ThreadStateException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ThreadStateException


}


