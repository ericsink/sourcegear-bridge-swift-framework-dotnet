// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Reflection
extension System.Reflection {
// type: System.Reflection.AssemblyExtensions
public struct AssemblyExtensions {
    // System.Type[] GetExportedTypes(System.Reflection.Assembly)
// docid: M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
    /**
    - Parameter assembly: 
    */
    public static func GetExportedTypes(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_AssemblyExtensions_TypeArray__GetExportedTypes_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.Module[] GetModules(System.Reflection.Assembly)
// docid: M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
    /**
    - Parameter assembly: 
    */
    public static func GetModules(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System_Arr<dotnet.System.Reflection.Module> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_AssemblyExtensions_ModuleArray__GetModules_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.Module>(hndl : __return);
        }
    }
    // System.Type[] GetTypes(System.Reflection.Assembly)
// docid: M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
    /**
    - Parameter assembly: 
    */
    public static func GetTypes(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_AssemblyExtensions_TypeArray__GetTypes_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
} // AssemblyExtensions


// type: System.Reflection.EventInfoExtensions
public struct EventInfoExtensions {
    // System.Reflection.MethodInfo GetAddMethod(System.Reflection.EventInfo)
// docid: M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)
    /**
    - Parameter eventInfo: 
    */
    public static func GetAddMethod(eventInfo : dotnet.System.Reflection.EventInfo) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_EventInfoExtensions_MethodInfo__GetAddMethod_0__1__EventInfo(&__thrown, eventInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetAddMethod(System.Reflection.EventInfo, bool)
// docid: M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)
    /**
    - Parameter eventInfo: 
    - Parameter nonPublic: 
    */
    public static func GetAddMethod(eventInfo : dotnet.System.Reflection.EventInfo, nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_EventInfoExtensions_MethodInfo__GetAddMethod_0__2__EventInfo_bool(&__thrown, eventInfo.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetRaiseMethod(System.Reflection.EventInfo)
// docid: M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)
    /**
    - Parameter eventInfo: 
    */
    public static func GetRaiseMethod(eventInfo : dotnet.System.Reflection.EventInfo) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_EventInfoExtensions_MethodInfo__GetRaiseMethod_0__1__EventInfo(&__thrown, eventInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetRaiseMethod(System.Reflection.EventInfo, bool)
// docid: M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)
    /**
    - Parameter eventInfo: 
    - Parameter nonPublic: 
    */
    public static func GetRaiseMethod(eventInfo : dotnet.System.Reflection.EventInfo, nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_EventInfoExtensions_MethodInfo__GetRaiseMethod_0__2__EventInfo_bool(&__thrown, eventInfo.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetRemoveMethod(System.Reflection.EventInfo)
// docid: M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)
    /**
    - Parameter eventInfo: 
    */
    public static func GetRemoveMethod(eventInfo : dotnet.System.Reflection.EventInfo) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_EventInfoExtensions_MethodInfo__GetRemoveMethod_0__1__EventInfo(&__thrown, eventInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetRemoveMethod(System.Reflection.EventInfo, bool)
// docid: M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)
    /**
    - Parameter eventInfo: 
    - Parameter nonPublic: 
    */
    public static func GetRemoveMethod(eventInfo : dotnet.System.Reflection.EventInfo, nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_EventInfoExtensions_MethodInfo__GetRemoveMethod_0__2__EventInfo_bool(&__thrown, eventInfo.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EventInfoExtensions


// type: System.Reflection.MemberInfoExtensions
public struct MemberInfoExtensions {
    // System.Int32 GetMetadataToken(System.Reflection.MemberInfo)
// docid: M:System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)
    /**
    Gets a metadata token for the given member, if available.

    - Parameter member: The member from which to retrieve the token, as reftype.
    - Returns: An integer representing the metadata token. The returned token is never nil. If unavailable, an exception is thrown.

    */
    public static func GetMetadataToken(member : dotnet.System.Reflection.MemberInfo) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_MemberInfoExtensions_i32__GetMetadataToken_0__1__MemberInfo(&__thrown, member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool HasMetadataToken(System.Reflection.MemberInfo)
// docid: M:System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)
    /**
    Returns a value that indicates whether a metadata token is available for the specified member.

    - Parameter member: The member to analyze, as reftype.
    - Returns: 
         if there is a metadata token available for the given member; otherwise, .

    */
    public static func HasMetadataToken(member : dotnet.System.Reflection.MemberInfo) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_MemberInfoExtensions_bool__HasMetadataToken_0__1__MemberInfo(&__thrown, member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // MemberInfoExtensions


// type: System.Reflection.MethodInfoExtensions
public struct MethodInfoExtensions {
    // System.Reflection.MethodInfo GetBaseDefinition(System.Reflection.MethodInfo)
// docid: M:System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)
    /**
    - Parameter method: 
    */
    public static func GetBaseDefinition(method : dotnet.System.Reflection.MethodInfo) throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_MethodInfoExtensions_MethodInfo__GetBaseDefinition_0__1__MethodInfo(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
} // MethodInfoExtensions


// type: System.Reflection.ModuleExtensions
public struct ModuleExtensions {
    // System.Guid GetModuleVersionId(System.Reflection.Module)
// docid: M:System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
    /**
    - Parameter module: 
    */
    public static func GetModuleVersionId(module : dotnet.System.Reflection.Module) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_ModuleExtensions_Guid__GetModuleVersionId_0__1__Module(&__thrown, module.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // bool HasModuleVersionId(System.Reflection.Module)
// docid: M:System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
    /**
    - Parameter module: 
    */
    public static func HasModuleVersionId(module : dotnet.System.Reflection.Module) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_ModuleExtensions_bool__HasModuleVersionId_0__1__Module(&__thrown, module.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ModuleExtensions


// type: System.Reflection.PropertyInfoExtensions
public struct PropertyInfoExtensions {
    // System.Reflection.MethodInfo[] GetAccessors(System.Reflection.PropertyInfo)
// docid: M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)
    /**
    - Parameter property: 
    */
    public static func GetAccessors(property : dotnet.System.Reflection.PropertyInfo) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_PropertyInfoExtensions_MethodInfoArray__GetAccessors_0__1__PropertyInfo(&__thrown, property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo[] GetAccessors(System.Reflection.PropertyInfo, bool)
// docid: M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)
    /**
    - Parameter property: 
    - Parameter nonPublic: 
    */
    public static func GetAccessors(property : dotnet.System.Reflection.PropertyInfo, nonPublic : Bool) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_PropertyInfoExtensions_MethodInfoArray__GetAccessors_0__2__PropertyInfo_bool(&__thrown, property.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetGetMethod(System.Reflection.PropertyInfo)
// docid: M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)
    /**
    - Parameter property: 
    */
    public static func GetGetMethod(property : dotnet.System.Reflection.PropertyInfo) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_PropertyInfoExtensions_MethodInfo__GetGetMethod_0__1__PropertyInfo(&__thrown, property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetGetMethod(System.Reflection.PropertyInfo, bool)
// docid: M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)
    /**
    - Parameter property: 
    - Parameter nonPublic: 
    */
    public static func GetGetMethod(property : dotnet.System.Reflection.PropertyInfo, nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_PropertyInfoExtensions_MethodInfo__GetGetMethod_0__2__PropertyInfo_bool(&__thrown, property.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetSetMethod(System.Reflection.PropertyInfo)
// docid: M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)
    /**
    - Parameter property: 
    */
    public static func GetSetMethod(property : dotnet.System.Reflection.PropertyInfo) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_PropertyInfoExtensions_MethodInfo__GetSetMethod_0__1__PropertyInfo(&__thrown, property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetSetMethod(System.Reflection.PropertyInfo, bool)
// docid: M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)
    /**
    - Parameter property: 
    - Parameter nonPublic: 
    */
    public static func GetSetMethod(property : dotnet.System.Reflection.PropertyInfo, nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_PropertyInfoExtensions_MethodInfo__GetSetMethod_0__2__PropertyInfo_bool(&__thrown, property.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // PropertyInfoExtensions


// type: System.Reflection.TypeExtensions
public struct TypeExtensions {
    // System.Reflection.ConstructorInfo GetConstructor(System.Type, System.Type[])
// docid: M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
    /**
    - Parameter type: 
    - Parameter types: 
    */
    public static func GetConstructor(type : dotnet.System.Type_, types : dotnet.System_Arr<dotnet.System.Type_>) throws -> Optional<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_ConstructorInfo__GetConstructor_0__2__Type_TypeArray(&__thrown, type.get_handle(), types.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.ConstructorInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.ConstructorInfo[] GetConstructors(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetConstructors(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetConstructors(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_ConstructorInfoArray__GetConstructors_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo>(hndl : __return);
        }
    }
    // System.Reflection.ConstructorInfo[] GetConstructors(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetConstructors(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_ConstructorInfoArray__GetConstructors_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetDefaultMembers(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetDefaultMembers(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MemberInfoArray__GetDefaultMembers_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.EventInfo GetEvent(System.Type, System.String)
// docid: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
    /**
    - Parameter type: 
    - Parameter name: 
    */
    public static func GetEvent(type : dotnet.System.Type_, name : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_EventInfo__GetEvent_0__2__Type_String(&__thrown, type.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.EventInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.EventInfo GetEvent(System.Type, System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter bindingAttr: 
    */
    public static func GetEvent(type : dotnet.System.Type_, name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_EventInfo__GetEvent_0__3__Type_String_BindingFlags(&__thrown, type.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.EventInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.EventInfo[] GetEvents(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetEvents(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetEvents(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_EventInfoArray__GetEvents_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.EventInfo[] GetEvents(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetEvents(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_EventInfoArray__GetEvents_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo GetField(System.Type, System.String)
// docid: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)
    /**
    - Parameter type: 
    - Parameter name: 
    */
    public static func GetField(type : dotnet.System.Type_, name : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_FieldInfo__GetField_0__2__Type_String(&__thrown, type.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.FieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.FieldInfo GetField(System.Type, System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter bindingAttr: 
    */
    public static func GetField(type : dotnet.System.Type_, name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_FieldInfo__GetField_0__3__Type_String_BindingFlags(&__thrown, type.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.FieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.FieldInfo[] GetFields(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetFields(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetFields(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_FieldInfoArray__GetFields_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo[] GetFields(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetFields(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_FieldInfoArray__GetFields_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>(hndl : __return);
        }
    }
    // System.Type[] GetGenericArguments(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetGenericArguments(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_TypeArray__GetGenericArguments_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Type[] GetInterfaces(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetInterfaces(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_TypeArray__GetInterfaces_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMember(System.Type, System.String)
// docid: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
    /**
    - Parameter type: 
    - Parameter name: 
    */
    public static func GetMember(type : dotnet.System.Type_, name : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MemberInfoArray__GetMember_0__2__Type_String(&__thrown, type.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMember(System.Type, System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter bindingAttr: 
    */
    public static func GetMember(type : dotnet.System.Type_, name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MemberInfoArray__GetMember_0__3__Type_String_BindingFlags(&__thrown, type.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMembers(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetMembers(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetMembers(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MemberInfoArray__GetMembers_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMembers(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetMembers(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MemberInfoArray__GetMembers_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetMethod(System.Type, System.String)
// docid: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
    /**
    - Parameter type: 
    - Parameter name: 
    */
    public static func GetMethod(type : dotnet.System.Type_, name : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MethodInfo__GetMethod_0__2__Type_String(&__thrown, type.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetMethod(System.Type, System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter bindingAttr: 
    */
    public static func GetMethod(type : dotnet.System.Type_, name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MethodInfo__GetMethod_0__3__Type_String_BindingFlags(&__thrown, type.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetMethod(System.Type, System.String, System.Type[])
// docid: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter types: 
    */
    public static func GetMethod(type : dotnet.System.Type_, name : dotnet.System.String, types : dotnet.System_Arr<dotnet.System.Type_>) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MethodInfo__GetMethod_0__3__Type_String_TypeArray(&__thrown, type.get_handle(), name.get_handle(), types.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo[] GetMethods(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetMethods(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetMethods(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MethodInfoArray__GetMethods_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo[] GetMethods(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetMethods(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_MethodInfoArray__GetMethods_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Type GetNestedType(System.Type, System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter bindingAttr: 
    */
    public static func GetNestedType(type : dotnet.System.Type_, name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_Type__GetNestedType_0__3__Type_String_BindingFlags(&__thrown, type.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type[] GetNestedTypes(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetNestedTypes(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_TypeArray__GetNestedTypes_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.PropertyInfo[] GetProperties(System.Type)
// docid: M:System.Reflection.TypeExtensions.GetProperties(System.Type)
    /**
    - Parameter type: 
    */
    public static func GetProperties(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_PropertyInfoArray__GetProperties_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>(hndl : __return);
        }
    }
    // System.Reflection.PropertyInfo[] GetProperties(System.Type, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter bindingAttr: 
    */
    public static func GetProperties(type : dotnet.System.Type_, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_PropertyInfoArray__GetProperties_0__2__Type_BindingFlags(&__thrown, type.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>(hndl : __return);
        }
    }
    // System.Reflection.PropertyInfo GetProperty(System.Type, System.String)
// docid: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
    /**
    - Parameter type: 
    - Parameter name: 
    */
    public static func GetProperty(type : dotnet.System.Type_, name : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_PropertyInfo__GetProperty_0__2__Type_String(&__thrown, type.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.PropertyInfo GetProperty(System.Type, System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter bindingAttr: 
    */
    public static func GetProperty(type : dotnet.System.Type_, name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_PropertyInfo__GetProperty_0__3__Type_String_BindingFlags(&__thrown, type.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.PropertyInfo GetProperty(System.Type, System.String, System.Type)
// docid: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter returnType: 
    */
    public static func GetProperty(type : dotnet.System.Type_, name : dotnet.System.String, returnType : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_PropertyInfo__GetProperty_0__3__Type_String_Type(&__thrown, type.get_handle(), name.get_handle(), returnType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.PropertyInfo GetProperty(System.Type, System.String, System.Type, System.Type[])
// docid: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
    /**
    - Parameter type: 
    - Parameter name: 
    - Parameter returnType: 
    - Parameter types: 
    */
    public static func GetProperty(type : dotnet.System.Type_, name : dotnet.System.String, returnType : Optional<dotnet.System.Type_>, types : dotnet.System_Arr<dotnet.System.Type_>) throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_PropertyInfo__GetProperty_0__4__Type_String_Type_TypeArray(&__thrown, type.get_handle(), name.get_handle(), returnType?.get_handle() ?? nil, types.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsAssignableFrom(System.Type, System.Type)
// docid: M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
    /**
    - Parameter type: 
    - Parameter c: 
    */
    public static func IsAssignableFrom(type : dotnet.System.Type_, c : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_bool__IsAssignableFrom_0__2__Type_Type(&__thrown, type.get_handle(), c?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsInstanceOfType(System.Type, System.Object)
// docid: M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
    /**
    - Parameter type: 
    - Parameter o: 
    */
    public static func IsInstanceOfType(type : dotnet.System.Type_, o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_TypeExtensions_bool__IsInstanceOfType_0__2__Type_Object(&__thrown, type.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TypeExtensions


}


// EXTENSION METHOD System.Int32 GetMetadataToken(System.Reflection.MemberInfo)
extension dotnet.System.Reflection.MemberInfo {
    public func GetMetadataToken() throws -> Swift.Int32 {
        return try dotnet.System.Reflection.MemberInfoExtensions.GetMetadataToken(member: self);
    }
}

// EXTENSION METHOD bool HasMetadataToken(System.Reflection.MemberInfo)
extension dotnet.System.Reflection.MemberInfo {
    public func HasMetadataToken() throws -> Bool {
        return try dotnet.System.Reflection.MemberInfoExtensions.HasMetadataToken(member: self);
    }
}

// EXTENSION METHOD System.Guid GetModuleVersionId(System.Reflection.Module)
extension dotnet.System.Reflection.Module {
    public func GetModuleVersionId() throws -> dotnet.System.Guid {
        return try dotnet.System.Reflection.ModuleExtensions.GetModuleVersionId(module: self);
    }
}

// EXTENSION METHOD bool HasModuleVersionId(System.Reflection.Module)
extension dotnet.System.Reflection.Module {
    public func HasModuleVersionId() throws -> Bool {
        return try dotnet.System.Reflection.ModuleExtensions.HasModuleVersionId(module: self);
    }
}

