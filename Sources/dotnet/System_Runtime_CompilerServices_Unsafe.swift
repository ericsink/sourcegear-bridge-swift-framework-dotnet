// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Runtime
// System.Runtime.CompilerServices
extension System.Runtime.CompilerServices {
// type: System.Runtime.CompilerServices.Unsafe
public struct Unsafe {
// TODO COPE (write_all_methods) (unused generic param) void* Add<T>(void*, System.Int32)
// TODO COPE (write_all_methods) (unused generic param) bool AreSame<T>(ref T, ref T)
// TODO COPE (write_all_methods) (unused generic param) void* AsPointer<T>(ref T)
// TODO COPE (write_all_methods) (unused generic param) T As<T>(System.Object)
// TODO COPE (write_all_methods) (unused generic param) System.IntPtr ByteOffset<T>(ref T, ref T)
    // void CopyBlock(ref System.Byte, ref System.Byte, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)
    /**
    Copies bytes from the source address to the destination address.

    - Parameter destination: The destination address to copy to.
    - Parameter source: The source address to copy from.
    - Parameter byteCount: The number of bytes to copy.
    */
    public static func CopyBlock(destination : inout Swift.UInt8, source : inout Swift.UInt8, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_destination = destination;
            var _tmp_ref_source = source;
        System_Runtime_CompilerServices_Unsafe_void__CopyBlock_0__3__refu8_refu8_u32(&__thrown, &_tmp_ref_destination, &_tmp_ref_source, byteCount);
        let _tmp2_destination = _tmp_ref_destination;
            destination = _tmp2_destination;
        let _tmp2_source = _tmp_ref_source;
            source = _tmp2_source;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyBlock(void*, void*, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)
    /**
    Copies bytes from the source address to the destination address.

    - Parameter destination: The destination address to copy to.
    - Parameter source: The source address to copy from.
    - Parameter byteCount: The number of bytes to copy.
    */
    public static func CopyBlock(destination : UnsafeMutableRawPointer?, source : UnsafeMutableRawPointer?, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_Unsafe_void__CopyBlock_0__3__pvoid_pvoid_u32(&__thrown, destination, source, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyBlockUnaligned(ref System.Byte, ref System.Byte, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)
    /**
    Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.

    - Parameter destination: The destination address to copy to.
    - Parameter source: The source address to copy from.
    - Parameter byteCount: The number of bytes to copy.
    */
    public static func CopyBlockUnaligned(destination : inout Swift.UInt8, source : inout Swift.UInt8, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_destination = destination;
            var _tmp_ref_source = source;
        System_Runtime_CompilerServices_Unsafe_void__CopyBlockUnaligned_0__3__refu8_refu8_u32(&__thrown, &_tmp_ref_destination, &_tmp_ref_source, byteCount);
        let _tmp2_destination = _tmp_ref_destination;
            destination = _tmp2_destination;
        let _tmp2_source = _tmp_ref_source;
            source = _tmp2_source;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyBlockUnaligned(void*, void*, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)
    /**
    Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.

    - Parameter destination: The destination address to copy to.
    - Parameter source: The source address to copy from.
    - Parameter byteCount: The number of bytes to copy.
    */
    public static func CopyBlockUnaligned(destination : UnsafeMutableRawPointer?, source : UnsafeMutableRawPointer?, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_Unsafe_void__CopyBlockUnaligned_0__3__pvoid_pvoid_u32(&__thrown, destination, source, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void Copy<T>(void*, ref T)
// TODO COPE (write_all_methods) (unused generic param) void Copy<T>(ref T, void*)
    // void InitBlock(ref System.Byte, System.Byte, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)
    /**
    Initializes a block of memory at the given location with a given initial value.

    - Parameter startAddress: The address of the start of the memory block to initialize.
    - Parameter value: The value to initialize the block to.
    - Parameter byteCount: The number of bytes to initialize.
    */
    public static func InitBlock(startAddress : inout Swift.UInt8, value : Swift.UInt8, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_startAddress = startAddress;
        System_Runtime_CompilerServices_Unsafe_void__InitBlock_0__3__refu8_u8_u32(&__thrown, &_tmp_ref_startAddress, value, byteCount);
        let _tmp2_startAddress = _tmp_ref_startAddress;
            startAddress = _tmp2_startAddress;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InitBlock(void*, System.Byte, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)
    /**
    Initializes a block of memory at the given location with a given initial value.

    - Parameter startAddress: The address of the start of the memory block to initialize.
    - Parameter value: The value to initialize the block to.
    - Parameter byteCount: The number of bytes to initialize.
    */
    public static func InitBlock(startAddress : UnsafeMutableRawPointer?, value : Swift.UInt8, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_Unsafe_void__InitBlock_0__3__pvoid_u8_u32(&__thrown, startAddress, value, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InitBlockUnaligned(ref System.Byte, System.Byte, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)
    /**
    Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.

    - Parameter startAddress: The address of the start of the memory block to initialize.
    - Parameter value: The value to initialize the block to.
    - Parameter byteCount: The number of bytes to initialize.
    */
    public static func InitBlockUnaligned(startAddress : inout Swift.UInt8, value : Swift.UInt8, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_startAddress = startAddress;
        System_Runtime_CompilerServices_Unsafe_void__InitBlockUnaligned_0__3__refu8_u8_u32(&__thrown, &_tmp_ref_startAddress, value, byteCount);
        let _tmp2_startAddress = _tmp_ref_startAddress;
            startAddress = _tmp2_startAddress;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InitBlockUnaligned(void*, System.Byte, System.UInt32)
// docid: M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)
    /**
    Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.

    - Parameter startAddress: The address of the start of the memory block to initialize.
    - Parameter value: The value to initialize the block to.
    - Parameter byteCount: The number of bytes to initialize.
    */
    public static func InitBlockUnaligned(startAddress : UnsafeMutableRawPointer?, value : Swift.UInt8, byteCount : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_Unsafe_void__InitBlockUnaligned_0__3__pvoid_u8_u32(&__thrown, startAddress, value, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) bool IsAddressGreaterThan<T>(ref T, ref T)
// TODO COPE (write_all_methods) (unused generic param) bool IsAddressLessThan<T>(ref T, ref T)
// TODO COPE (write_all_methods) (unused generic param) bool IsNullRef<T>(ref T)
// TODO COPE (write_all_methods) (unused generic param) T ReadUnaligned<T>(ref System.Byte)
// TODO COPE (write_all_methods) (unused generic param) T ReadUnaligned<T>(void*)
// TODO COPE (write_all_methods) (unused generic param) T Read<T>(void*)
// TODO COPE (write_all_methods) (unused generic param) void SkipInit<T>(ref T)
// TODO COPE (write_all_methods) (unused generic param) System.Int32 SizeOf<T>()
// TODO COPE (write_all_methods) (unused generic param) void* Subtract<T>(void*, System.Int32)
    // void WriteUnaligned<T>(ref System.Byte, T)
// docid: M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)
    /**
    Writes a value of type  to the given location without assuming architecture dependent alignment of the addresses.

    - Parameter destination: The location to write to.
    - Parameter value: The value to write.
    */
    public static func WriteUnaligned<UT : SGBridgeGenericValue>(destination : inout Swift.UInt8, value : UT) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_destination = destination;
        System_Runtime_CompilerServices_Unsafe_void__WriteUnaligned_1__2__refu8_UT(UT.get_type_handle(), &__thrown, &_tmp_ref_destination, value.to_gval());
        let _tmp2_destination = _tmp_ref_destination;
            destination = _tmp2_destination;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteUnaligned<T>(void*, T)
// docid: M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)
    /**
    Writes a value of type  to the given location without assuming architecture dependent alignment of the addresses.

    - Parameter destination: The location to write to.
    - Parameter value: The value to write.
    */
    public static func WriteUnaligned<UT : SGBridgeGenericValue>(destination : UnsafeMutableRawPointer?, value : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_Unsafe_void__WriteUnaligned_1__2__pvoid_UT(UT.get_type_handle(), &__thrown, destination, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write<T>(void*, T)
// docid: M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)
    /**
    Writes a value of type  to the given location.

    - Parameter destination: The location to write to.
    - Parameter value: The value to write.
    */
    public static func Write<UT : SGBridgeGenericValue>(destination : UnsafeMutableRawPointer?, value : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_CompilerServices_Unsafe_void__Write_1__2__pvoid_UT(UT.get_type_handle(), &__thrown, destination, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Unsafe


}



