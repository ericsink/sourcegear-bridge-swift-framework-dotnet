// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Reflection
// System.Reflection.Emit
extension System.Reflection.Emit {
// type: System.Reflection.Emit.CustomAttributeBuilder
    /**
    Helps build custom attributes.

    */
open class CustomAttributeBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_CustomAttributeBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.ConstructorInfo, System.Object[])
// docid: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])
    /**
    Initializes an instance of the  class given the constructor for the custom attribute and the arguments to the constructor.

    - Parameter con: The constructor for the custom attribute.
    - Parameter constructorArgs: The arguments to the constructor of the custom attribute.
    */
    public init(con : dotnet.System.Reflection.ConstructorInfo, constructorArgs : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Reflection_Emit_CustomAttributeBuilder_ctor_0__2__ConstructorInfo_ObjectArray(&__thrown, con.get_handle(), constructorArgs.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.FieldInfo[], System.Object[])
// docid: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])
    /**
    Initializes an instance of the  class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.

    - Parameter con: The constructor for the custom attribute.
    - Parameter constructorArgs: The arguments to the constructor of the custom attribute.
    - Parameter namedFields: Named fields of the custom attribute.
    - Parameter fieldValues: Values for the named fields of the custom attribute.
    */
    public init(con : dotnet.System.Reflection.ConstructorInfo, constructorArgs : dotnet.System_Arr<dotnet.System.Object>, namedFields : dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>, fieldValues : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Reflection_Emit_CustomAttributeBuilder_ctor_0__4__ConstructorInfo_ObjectArray_FieldInfoArray_ObjectArray(&__thrown, con.get_handle(), constructorArgs.get_handle(), namedFields.get_handle(), fieldValues.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.PropertyInfo[], System.Object[])
// docid: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])
    /**
    Initializes an instance of the  class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.

    - Parameter con: The constructor for the custom attribute.
    - Parameter constructorArgs: The arguments to the constructor of the custom attribute.
    - Parameter namedProperties: Named properties of the custom attribute.
    - Parameter propertyValues: Values for the named properties of the custom attribute.
    */
    public init(con : dotnet.System.Reflection.ConstructorInfo, constructorArgs : dotnet.System_Arr<dotnet.System.Object>, namedProperties : dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>, propertyValues : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Reflection_Emit_CustomAttributeBuilder_ctor_0__4__ConstructorInfo_ObjectArray_PropertyInfoArray_ObjectArray(&__thrown, con.get_handle(), constructorArgs.get_handle(), namedProperties.get_handle(), propertyValues.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.PropertyInfo[], System.Object[], System.Reflection.FieldInfo[], System.Object[])
// docid: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])
    /**
    Initializes an instance of the  class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.

    - Parameter con: The constructor for the custom attribute.
    - Parameter constructorArgs: The arguments to the constructor of the custom attribute.
    - Parameter namedProperties: Named properties of the custom attribute.
    - Parameter propertyValues: Values for the named properties of the custom attribute.
    - Parameter namedFields: Named fields of the custom attribute.
    - Parameter fieldValues: Values for the named fields of the custom attribute.
    */
    public init(con : dotnet.System.Reflection.ConstructorInfo, constructorArgs : dotnet.System_Arr<dotnet.System.Object>, namedProperties : dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>, propertyValues : dotnet.System_Arr<dotnet.System.Object>, namedFields : dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>, fieldValues : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Reflection_Emit_CustomAttributeBuilder_ctor_0__6__ConstructorInfo_ObjectArray_PropertyInfoArray_ObjectArray_FieldInfoArray_ObjectArray(&__thrown, con.get_handle(), constructorArgs.get_handle(), namedProperties.get_handle(), propertyValues.get_handle(), namedFields.get_handle(), fieldValues.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // CustomAttributeBuilder


// type: System.Reflection.Emit.ILGenerator
    /**
    Generates Microsoft intermediate language (MSIL) instructions.

    */
open class ILGenerator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_ILGenerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void BeginCatchBlock(System.Type)
// docid: M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
    /**
    Begins a catch block.

    - Parameter exceptionType: The  object that represents the exception.
    */
    open func BeginCatchBlock(exceptionType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__BeginCatchBlock_0__1__Type(&__thrown, self.get_handle(), exceptionType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginExceptFilterBlock()
// docid: M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
    /**
    Begins an exception block for a filtered exception.

    */
    open func BeginExceptFilterBlock() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__BeginExceptFilterBlock_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Reflection.Emit.Label BeginExceptionBlock()
// docid: M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock
    /**
    Begins an exception block for a non-filtered exception.

    - Returns: The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.

    */
    open func BeginExceptionBlock() throws -> dotnet.System.Reflection.Emit.Label {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ILGenerator_Label__BeginExceptionBlock_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.Label(hndl : __return);
        }
    }
    // void BeginFaultBlock()
// docid: M:System.Reflection.Emit.ILGenerator.BeginFaultBlock
    /**
    Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.

    */
    open func BeginFaultBlock() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__BeginFaultBlock_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginFinallyBlock()
// docid: M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock
    /**
    Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.

    */
    open func BeginFinallyBlock() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__BeginFinallyBlock_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginScope()
// docid: M:System.Reflection.Emit.ILGenerator.BeginScope
    /**
    Begins a lexical scope.

    */
    open func BeginScope() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__BeginScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type)
// docid: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
    /**
    Declares a local variable of the specified type.

    - Parameter localType: A  object that represents the type of the local variable.
    - Returns: The declared local variable.

    */
    open func DeclareLocal(localType : dotnet.System.Type_) throws -> dotnet.System.Reflection.Emit.LocalBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ILGenerator_LocalBuilder__DeclareLocal_0__1__Type(&__thrown, self.get_handle(), localType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.LocalBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type, bool)
// docid: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
    /**
    Declares a local variable of the specified type, optionally pinning the object referred to by the variable.

    - Parameter localType: A  object that represents the type of the local variable.
    - Parameter pinned: 
         to pin the object in memory; otherwise, .
    - Returns: A  object that represents the local variable.

    */
    open func DeclareLocal(localType : dotnet.System.Type_, pinned : Bool) throws -> dotnet.System.Reflection.Emit.LocalBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ILGenerator_LocalBuilder__DeclareLocal_0__2__Type_bool(&__thrown, self.get_handle(), localType.get_handle(), Swift.Int32(pinned ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.LocalBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.Label DefineLabel()
// docid: M:System.Reflection.Emit.ILGenerator.DefineLabel
    /**
    Declares a new label.

    - Returns: A new label that can be used as a token for branching.

    */
    open func DefineLabel() throws -> dotnet.System.Reflection.Emit.Label {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ILGenerator_Label__DefineLabel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.Label(hndl : __return);
        }
    }
    // void Emit(System.Reflection.Emit.OpCode)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
    /**
    Puts the specified instruction onto the stream of instructions.

    - Parameter opcode: The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__1__OpCode(&__thrown, self.get_handle(), opcode.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Byte)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
    /**
    Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be put onto the stream.
    - Parameter arg: The character argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_u8(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Double)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
    /**
    Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be put onto the stream. Defined in the  enumeration.
    - Parameter arg: The numerical argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_f64(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Int16)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
    /**
    Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter arg: The  argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_i16(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Int32)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
    /**
    Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be put onto the stream.
    - Parameter arg: The numerical argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_i32(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Int64)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
    /**
    Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be put onto the stream.
    - Parameter arg: The numerical argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_i64(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
    /**
    Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter con: A  representing a constructor.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, con : dotnet.System.Reflection.ConstructorInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_ConstructorInfo(&__thrown, self.get_handle(), opcode.get_handle(), con.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
    /**
    Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter label: The label to which to branch from this location.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, label : dotnet.System.Reflection.Emit.Label) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_Label(&__thrown, self.get_handle(), opcode.get_handle(), label.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
    /**
    Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter labels: The array of label objects to which to branch from this location. All of the labels will be used.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, labels : dotnet.System_Arr<dotnet.System.Reflection.Emit.Label>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_LabelArray(&__thrown, self.get_handle(), opcode.get_handle(), labels.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
    /**
    Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter local: A local variable.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, local : dotnet.System.Reflection.Emit.LocalBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_LocalBuilder(&__thrown, self.get_handle(), opcode.get_handle(), local.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
    /**
    Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter signature: A helper for constructing a signature token.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, signature : dotnet.System.Reflection.Emit.SignatureHelper) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_SignatureHelper(&__thrown, self.get_handle(), opcode.get_handle(), signature.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
    /**
    Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter field: A  representing a field.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, field : dotnet.System.Reflection.FieldInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_FieldInfo(&__thrown, self.get_handle(), opcode.get_handle(), field.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
    /**
    Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter meth: A  representing a method.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, meth : dotnet.System.Reflection.MethodInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_MethodInfo(&__thrown, self.get_handle(), opcode.get_handle(), meth.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.SByte)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
    /**
    Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be put onto the stream.
    - Parameter arg: The character argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.Int8) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_i8(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Single)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
    /**
    Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.

    - Parameter opcode: The MSIL instruction to be put onto the stream.
    - Parameter arg: The  argument pushed onto the stream immediately after the instruction.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, arg : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_f32(&__thrown, self.get_handle(), opcode.get_handle(), arg);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.String)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
    /**
    Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream.
    - Parameter str: The  to be emitted.
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, str : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_String(&__thrown, self.get_handle(), opcode.get_handle(), str.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Emit(System.Reflection.Emit.OpCode, System.Type)
// docid: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
    /**
    Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.

    - Parameter opcode: The MSIL instruction to be put onto the stream.
    - Parameter cls: A .
    */
    open func Emit(opcode : dotnet.System.Reflection.Emit.OpCode, cls : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__Emit_0__2__OpCode_Type(&__thrown, self.get_handle(), opcode.get_handle(), cls.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])
// docid: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
    /**
    Puts a  or  instruction onto the Microsoft intermediate language (MSIL) stream to call a  method.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream. Must be , , or .
    - Parameter methodInfo: The  method to be called.
    - Parameter optionalParameterTypes: The types of the optional arguments if the method is a  method; otherwise, .
    */
    open func EmitCall(opcode : dotnet.System.Reflection.Emit.OpCode, methodInfo : dotnet.System.Reflection.MethodInfo, optionalParameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EmitCall_0__3__OpCode_MethodInfo_TypeArray(&__thrown, self.get_handle(), opcode.get_handle(), methodInfo.get_handle(), (optionalParameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])
// docid: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
    /**
    Puts a  instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream. Must be .
    - Parameter callingConvention: The managed calling convention to be used.
    - Parameter returnType: The  of the result.
    - Parameter parameterTypes: The types of the required arguments to the instruction.
    - Parameter optionalParameterTypes: The types of the optional arguments for  calls.
    */
    open func EmitCalli(opcode : dotnet.System.Reflection.Emit.OpCode, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, optionalParameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EmitCalli_0__5__OpCode_CallingConventions_Type_TypeArray_TypeArray(&__thrown, self.get_handle(), opcode.get_handle(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()), (optionalParameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EmitCalli(System.Reflection.Emit.OpCode, System.Runtime.InteropServices.CallingConvention, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
    /**
    Puts a  instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.

    - Parameter opcode: The MSIL instruction to be emitted onto the stream. Must be .
    - Parameter unmanagedCallConv: The unmanaged calling convention to be used.
    - Parameter returnType: The  of the result.
    - Parameter parameterTypes: The types of the required arguments to the instruction.
    */
    open func EmitCalli(opcode : dotnet.System.Reflection.Emit.OpCode, unmanagedCallConv : dotnet.System.Runtime.InteropServices.CallingConvention, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EmitCalli_0__4__OpCode_CallingConvention_Type_TypeArray(&__thrown, self.get_handle(), opcode.get_handle(), unmanagedCallConv.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EmitWriteLine(System.Reflection.Emit.LocalBuilder)
// docid: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
    /**
    Emits the Microsoft intermediate language (MSIL) necessary to call  with the given local variable.

    - Parameter localBuilder: The local variable whose value is to be written to the console.
    */
    open func EmitWriteLine(localBuilder : dotnet.System.Reflection.Emit.LocalBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EmitWriteLine_0__1__LocalBuilder(&__thrown, self.get_handle(), localBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EmitWriteLine(System.Reflection.FieldInfo)
// docid: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
    /**
    Emits the Microsoft intermediate language (MSIL) necessary to call  with the given field.

    - Parameter fld: The field whose value is to be written to the console.
    */
    open func EmitWriteLine(fld : dotnet.System.Reflection.FieldInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EmitWriteLine_0__1__FieldInfo(&__thrown, self.get_handle(), fld.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EmitWriteLine(System.String)
// docid: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
    /**
    Emits the Microsoft intermediate language (MSIL) to call  with a string.

    - Parameter value: The string to be printed.
    */
    open func EmitWriteLine(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EmitWriteLine_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndExceptionBlock()
// docid: M:System.Reflection.Emit.ILGenerator.EndExceptionBlock
    /**
    Ends an exception block.

    */
    open func EndExceptionBlock() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EndExceptionBlock_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndScope()
// docid: M:System.Reflection.Emit.ILGenerator.EndScope
    /**
    Ends a lexical scope.

    */
    open func EndScope() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__EndScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MarkLabel(System.Reflection.Emit.Label)
// docid: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
    /**
    Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.

    - Parameter loc: The label for which to set an index.
    */
    open func MarkLabel(loc : dotnet.System.Reflection.Emit.Label) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__MarkLabel_0__1__Label(&__thrown, self.get_handle(), loc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ThrowException(System.Type)
// docid: M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
    /**
    Emits an instruction to throw an exception.

    - Parameter excType: The class of the type of exception to throw.
    */
    open func ThrowException(excType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__ThrowException_0__1__Type(&__thrown, self.get_handle(), excType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UsingNamespace(System.String)
// docid: M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
    /**
    Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.

    - Parameter usingNamespace: The namespace to be used in evaluating locals and watches for the current active lexical scope
    */
    open func UsingNamespace(usingNamespace : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ILGenerator_void__UsingNamespace_0__1__String(&__thrown, self.get_handle(), usingNamespace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ILOffset()
// docid: M:System.Reflection.Emit.ILGenerator.get_ILOffset
    open func get_ILOffset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ILGenerator_i32__get_ILOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the .

    */
    open var ILOffset : Swift.Int32 {
        get {
            return try! get_ILOffset();
        }
    }
} // ILGenerator


// type: System.Reflection.Emit.Label
// boxed value type
    /**
    Represents a label in the instruction stream.  is used in conjunction with the  class.

    */
public final class Label
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_Label_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Reflection_Emit_Label_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.Label.Equals(System.Object)
    /**
    Checks if the given object is an instance of  and is equal to this instance.

    - Parameter obj: The object to compare with this  instance.
    - Returns: 
         if  is an instance of  and is equal to this object; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_Label_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Reflection.Emit.Label)
// docid: M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)
    /**
    Indicates whether the current instance is equal to the specified .

    - Parameter obj: The  to compare to the current instance.
    - Returns: 
         if the value of  is equal to the value of the current instance; otherwise, .

    */
    public func Equals(obj : dotnet.System.Reflection.Emit.Label) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_Label_bool__Equals_0__1__Label(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.Label.GetHashCode
    /**
    Generates a hash code for this instance.

    - Returns: A hash code for this instance.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_Label_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Reflection.Emit.Label, System.Reflection.Emit.Label)
// docid: M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
    /**
    Indicates whether two  structures are equal.

    - Parameter a: The  to compare to .
    - Parameter b: The  to compare to .
    - Returns: 
         if  is equal to ; otherwise, .

    */
    public class func op_Equality(a : dotnet.System.Reflection.Emit.Label, b : dotnet.System.Reflection.Emit.Label) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_Label_bool__op_Equality_0__2__Label_Label(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Reflection.Emit.Label, System.Reflection.Emit.Label)
// docid: M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
    /**
    Indicates whether two  structures are not equal.

    - Parameter a: The  to compare to .
    - Parameter b: The  to compare to .
    - Returns: 
         if  is not equal to ; otherwise, .

    */
    public class func op_Inequality(a : dotnet.System.Reflection.Emit.Label, b : dotnet.System.Reflection.Emit.Label) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_Label_bool__op_Inequality_0__2__Label_Label(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // Label


// type: System.Reflection.Emit.LocalBuilder
    /**
    Represents a local variable within a method or constructor.

    */
public final class LocalBuilder
    :
    dotnet.System.Reflection.LocalVariableInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_LocalBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsPinned()
// docid: M:System.Reflection.Emit.LocalBuilder.get_IsPinned
    public override func get_IsPinned() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_LocalBuilder_bool__get_IsPinned_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LocalIndex()
// docid: M:System.Reflection.Emit.LocalBuilder.get_LocalIndex
    public override func get_LocalIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_LocalBuilder_i32__get_LocalIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_LocalType()
// docid: M:System.Reflection.Emit.LocalBuilder.get_LocalType
    public override func get_LocalType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_LocalBuilder_Type__get_LocalType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets a value indicating whether the object referred to by the local variable is pinned in memory.

    */
    public override var IsPinned : Bool {
        get {
            return try! get_IsPinned();
        }
    }
    /**
    Gets the zero-based index of the local variable within the method body.

    */
    public override var LocalIndex : Swift.Int32 {
        get {
            return try! get_LocalIndex();
        }
    }
    /**
    Gets the type of the local variable.

    */
    public override var LocalType : dotnet.System.Type_ {
        get {
            return try! get_LocalType();
        }
    }
} // LocalBuilder


// type: System.Reflection.Emit.ParameterBuilder
    /**
    Creates or associates parameter information.

    */
open class ParameterBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_ParameterBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void SetConstant(System.Object)
// docid: M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
    /**
    Sets the default value of the parameter.

    - Parameter defaultValue: The default value of this parameter.
    */
    open func SetConstant(defaultValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ParameterBuilder_void__SetConstant_0__1__Object(&__thrown, self.get_handle(), defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Set a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    open func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ParameterBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Set a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    open func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ParameterBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Attributes()
// docid: M:System.Reflection.Emit.ParameterBuilder.get_Attributes
    open func get_Attributes() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ParameterBuilder_i32__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsIn()
// docid: M:System.Reflection.Emit.ParameterBuilder.get_IsIn
    open func get_IsIn() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ParameterBuilder_bool__get_IsIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOptional()
// docid: M:System.Reflection.Emit.ParameterBuilder.get_IsOptional
    open func get_IsOptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ParameterBuilder_bool__get_IsOptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOut()
// docid: M:System.Reflection.Emit.ParameterBuilder.get_IsOut
    open func get_IsOut() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ParameterBuilder_bool__get_IsOut_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.ParameterBuilder.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ParameterBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Position()
// docid: M:System.Reflection.Emit.ParameterBuilder.get_Position
    open func get_Position() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ParameterBuilder_i32__get_Position_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Retrieves the attributes for this parameter.

    */
    open var Attributes : Swift.Int32 {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Retrieves whether this is an input parameter.

    */
    open var IsIn : Bool {
        get {
            return try! get_IsIn();
        }
    }
    /**
    Retrieves whether this parameter is optional.

    */
    open var IsOptional : Bool {
        get {
            return try! get_IsOptional();
        }
    }
    /**
    Retrieves whether this parameter is an output parameter.

    */
    open var IsOut : Bool {
        get {
            return try! get_IsOut();
        }
    }
    /**
    Retrieves the name of this parameter.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    Retrieves the signature position for this parameter.

    */
    open var Position : Swift.Int32 {
        get {
            return try! get_Position();
        }
    }
} // ParameterBuilder


// type: System.Reflection.Emit.SignatureHelper
    /**
    Provides methods for building signatures.

    */
public final class SignatureHelper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_SignatureHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddArgument(System.Type)
// docid: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
    /**
    Adds an argument to the signature.

    - Parameter clsArgument: The type of the argument.
    */
    public func AddArgument(clsArgument : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_SignatureHelper_void__AddArgument_0__1__Type(&__thrown, self.get_handle(), clsArgument.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddArgument(System.Type, bool)
// docid: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
    /**
    Adds an argument of the specified type to the signature, specifying whether the argument is pinned.

    - Parameter argument: The argument type.
    - Parameter pinned: 
         if the argument is pinned; otherwise, .
    */
    public func AddArgument(argument : dotnet.System.Type_, pinned : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_SignatureHelper_void__AddArgument_0__2__Type_bool(&__thrown, self.get_handle(), argument.get_handle(), Swift.Int32(pinned ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddArgument(System.Type, System.Type[], System.Type[])
// docid: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
    /**
    Adds an argument to the signature, with the specified custom modifiers.

    - Parameter argument: The argument type.
    - Parameter requiredCustomModifiers: An array of types representing the required custom modifiers for the argument, such as  or . If the argument has no required custom modifiers, specify .
    - Parameter optionalCustomModifiers: An array of types representing the optional custom modifiers for the argument, such as  or . If the argument has no optional custom modifiers, specify .
    */
    public func AddArgument(argument : dotnet.System.Type_, requiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, optionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_SignatureHelper_void__AddArgument_0__3__Type_TypeArray_TypeArray(&__thrown, self.get_handle(), argument.get_handle(), (requiredCustomModifiers?.get_handle()), (optionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddArguments(System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
    /**
    Adds a set of arguments to the signature, with the specified custom modifiers.

    - Parameter arguments: The types of the arguments to be added.
    - Parameter requiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as  or . If a particular argument has no required custom modifiers, specify  instead of an array of types. If none of the arguments have required custom modifiers, specify  instead of an array of arrays.
    - Parameter optionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as  or . If a particular argument has no optional custom modifiers, specify  instead of an array of types. If none of the arguments have optional custom modifiers, specify  instead of an array of arrays.
    */
    public func AddArguments(arguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, requiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, optionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_SignatureHelper_void__AddArguments_0__3__TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), (arguments?.get_handle()), (requiredCustomModifiers?.get_handle()), (optionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddSentinel()
// docid: M:System.Reflection.Emit.SignatureHelper.AddSentinel
    /**
    Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.

    */
    public func AddSentinel() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_SignatureHelper_void__AddSentinel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)
    /**
    Checks if this instance is equal to the given object.

    - Parameter obj: The object with which this instance should be compared.
    - Returns: 
         if the given object is a  and represents the same signature; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Reflection.Emit.SignatureHelper GetFieldSigHelper(System.Reflection.Module)
// docid: M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
    /**
    Returns a signature helper for a field.

    - Parameter mod: The dynamic module that contains the field for which the  is requested.
    - Returns: The  object for a field.

    */
    public class func GetFieldSigHelper(mod : Optional<dotnet.System.Reflection.Module>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetFieldSigHelper_0__1__Module(&__thrown, mod?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.SignatureHelper.GetHashCode
    /**
    Creates and returns a hash code for this instance.

    - Returns: The hash code based on the name.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper()
// docid: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
    /**
    Returns a signature helper for a local variable.

    - Returns: A  for a local variable.

    */
    public class func GetLocalVarSigHelper() throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetLocalVarSigHelper_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper(System.Reflection.Module)
// docid: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
    /**
    Returns a signature helper for a local variable.

    - Parameter mod: The dynamic module that contains the local variable for which the  is requested.
    - Returns: The  object for a local variable.

    */
    public class func GetLocalVarSigHelper(mod : Optional<dotnet.System.Reflection.Module>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetLocalVarSigHelper_0__1__Module(&__thrown, mod?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetMethodSigHelper(System.Reflection.CallingConventions, System.Type)
// docid: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
    /**
    Returns a signature helper for a method given the method's calling convention and return type.

    - Parameter callingConvention: The calling convention of the method.
    - Parameter returnType: The return type of the method, or  for a void return type ( procedure in Visual Basic).
    - Returns: The  object for a method.

    */
    public class func GetMethodSigHelper(callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetMethodSigHelper_0__2__CallingConventions_Type(&__thrown, callingConvention.get_value(), returnType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetMethodSigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type)
// docid: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
    /**
    Returns a signature helper for a method given the method's module, calling convention, and return type.

    - Parameter mod: The  that contains the method for which the  is requested.
    - Parameter callingConvention: The calling convention of the method.
    - Parameter returnType: The return type of the method, or  for a void return type ( procedure in Visual Basic).
    - Returns: The  object for a method.

    */
    public class func GetMethodSigHelper(mod : Optional<dotnet.System.Reflection.Module>, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetMethodSigHelper_0__3__Module_CallingConventions_Type(&__thrown, mod?.get_handle() ?? nil, callingConvention.get_value(), returnType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetMethodSigHelper(System.Reflection.Module, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
    /**
    Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.

    - Parameter mod: The  that contains the method for which the  is requested.
    - Parameter returnType: The return type of the method, or  for a void return type ( procedure in Visual Basic).
    - Parameter parameterTypes: The types of the arguments of the method, or  if the method has no arguments.
    - Returns: The  object for a method.

    */
    public class func GetMethodSigHelper(mod : Optional<dotnet.System.Reflection.Module>, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetMethodSigHelper_0__3__Module_Type_TypeArray(&__thrown, mod?.get_handle() ?? nil, returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetPropertySigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.

    - Parameter mod: The  that contains the property for which the  is requested.
    - Parameter callingConvention: The calling convention of the property accessors.
    - Parameter returnType: The property type.
    - Parameter requiredReturnTypeCustomModifiers: An array of types representing the required custom modifiers for the return type, such as  or . If the return type has no required custom modifiers, specify .
    - Parameter optionalReturnTypeCustomModifiers: An array of types representing the optional custom modifiers for the return type, such as  or . If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the property's arguments, or  if the property has no arguments.
    - Parameter requiredParameterTypeCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify  instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify  instead of an array of arrays.
    - Parameter optionalParameterTypeCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify  instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: A  object for a property.

    */
    public class func GetPropertySigHelper(mod : Optional<dotnet.System.Reflection.Module>, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, requiredReturnTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, optionalReturnTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, requiredParameterTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, optionalParameterTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetPropertySigHelper_0__8__Module_CallingConventions_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, mod?.get_handle() ?? nil, callingConvention.get_value(), returnType?.get_handle() ?? nil, (requiredReturnTypeCustomModifiers?.get_handle()), (optionalReturnTypeCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (requiredParameterTypeCustomModifiers?.get_handle()), (optionalParameterTypeCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
    /**
    Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.

    - Parameter mod: The  that contains the property for which the  is requested.
    - Parameter returnType: The property type.
    - Parameter parameterTypes: The argument types, or  if the property has no arguments.
    - Returns: A  object for a property.

    */
    public class func GetPropertySigHelper(mod : Optional<dotnet.System.Reflection.Module>, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetPropertySigHelper_0__3__Module_Type_TypeArray(&__thrown, mod?.get_handle() ?? nil, returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Reflection.Emit.SignatureHelper GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.

    - Parameter mod: The  that contains the property for which the  is requested.
    - Parameter returnType: The property type.
    - Parameter requiredReturnTypeCustomModifiers: An array of types representing the required custom modifiers for the return type, such as  or . If the return type has no required custom modifiers, specify .
    - Parameter optionalReturnTypeCustomModifiers: An array of types representing the optional custom modifiers for the return type, such as  or . If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the property's arguments, or  if the property has no arguments.
    - Parameter requiredParameterTypeCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify  instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify  instead of an array of arrays.
    - Parameter optionalParameterTypeCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify  instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: A  object for a property.

    */
    public class func GetPropertySigHelper(mod : Optional<dotnet.System.Reflection.Module>, returnType : Optional<dotnet.System.Type_>, requiredReturnTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, optionalReturnTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, requiredParameterTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, optionalParameterTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.SignatureHelper {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_SignatureHelper__GetPropertySigHelper_0__7__Module_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, mod?.get_handle() ?? nil, returnType?.get_handle() ?? nil, (requiredReturnTypeCustomModifiers?.get_handle()), (optionalReturnTypeCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (requiredParameterTypeCustomModifiers?.get_handle()), (optionalParameterTypeCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.SignatureHelper(hndl : __return);
        }
    }
    // System.Byte[] GetSignature()
// docid: M:System.Reflection.Emit.SignatureHelper.GetSignature
    /**
    Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.

    - Returns: A byte array made up of the full signature.

    */
    public func GetSignature() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_u8Array__GetSignature_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Reflection.Emit.SignatureHelper.ToString
    /**
    Returns a string representing the signature arguments.

    - Returns: A string representing the arguments of this signature.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_SignatureHelper_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // SignatureHelper


}



