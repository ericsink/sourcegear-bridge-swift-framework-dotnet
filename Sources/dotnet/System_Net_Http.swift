// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
// System.Net.Http
extension System.Net.Http {
// type: System.Net.Http.ByteArrayContent
    /**
    Provides HTTP content based on a byte array.

    */
open class ByteArrayContent
    :
    dotnet.System.Net.Http.HttpContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_ByteArrayContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Byte[])
// docid: M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  class.

    - Parameter content: The content used to initialize the .
    */
    public init(content : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_ByteArrayContent_ctor_0__1__u8Array(&__thrown, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class.

    - Parameter content: The content used to initialize the .
    - Parameter offset: The offset, in bytes, in the  parameter used to initialize the .
    - Parameter count: The number of bytes in the  starting from the  parameter used to initialize the .
    */
    public init(content : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_ByteArrayContent_ctor_0__3__u8Array_i32_i32(&__thrown, content.get_handle(), offset, count);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ByteArrayContent


// type: System.Net.Http.ClientCertificateOption
    /**
    Specifies how client certificates are provided.

    */
public struct ClientCertificateOption : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Http_ClientCertificateOption_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Http.ClientCertificateOption Manual
    /**
    The application manually provides the client certificates to the . This value is the default.

    */
    public static var Manual : dotnet.System.Net.Http.ClientCertificateOption {
        get {
        let __return = dotnet.System.Net.Http.ClientCertificateOption(val: System_Net_Http_ClientCertificateOption_get_Manual());
            return __return;
        }
    }
    // static field: System.Net.Http.ClientCertificateOption Automatic
    /**
    The  will attempt to provide  all available client certificates  automatically.

    */
    public static var Automatic : dotnet.System.Net.Http.ClientCertificateOption {
        get {
        let __return = dotnet.System.Net.Http.ClientCertificateOption(val: System_Net_Http_ClientCertificateOption_get_Automatic());
            return __return;
        }
    }
} // ClientCertificateOption


// type: System.Net.Http.DelegatingHandler
    /**
    A type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler.

    */
open class DelegatingHandler
    :
    dotnet.System.Net.Http.HttpMessageHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_DelegatingHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.Http.HttpMessageHandler get_InnerHandler()
// docid: M:System.Net.Http.DelegatingHandler.get_InnerHandler
    open func get_InnerHandler() throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_DelegatingHandler_HttpMessageHandler__get_InnerHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpMessageHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InnerHandler(System.Net.Http.HttpMessageHandler)
// docid: M:System.Net.Http.DelegatingHandler.set_InnerHandler(System.Net.Http.HttpMessageHandler)
    open func set_InnerHandler(value : Optional<dotnet.System.Net.Http.HttpMessageHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_DelegatingHandler_void__set_InnerHandler_0__1__HttpMessageHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the inner handler which processes the HTTP response messages.

    */
    open var InnerHandler : Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        get {
            return try! get_InnerHandler();
        }
        set(v) {
            return try! set_InnerHandler(value: v!);
        }
    }
} // DelegatingHandler


// type: System.Net.Http.FormUrlEncodedContent
    /**
    A container for name/value tuples encoded using application/x-www-form-urlencoded MIME type.

    */
open class FormUrlEncodedContent
    :
    dotnet.System.Net.Http.ByteArrayContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_FormUrlEncodedContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
// docid: M:System.Net.Http.FormUrlEncodedContent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
    /**
    Initializes a new instance of the  class with a specific collection of name/value pairs.

    - Parameter nameValueCollection: A collection of name/value pairs.
    */
    public init(nameValueCollection : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_FormUrlEncodedContent_ctor_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string__(&__thrown, nameValueCollection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // FormUrlEncodedContent


// type: System.Net.Http.HeaderEncodingSelector`1
    /**
    Represents a method that specifies the encoding to use when interpreting header values.

    */
public final class HeaderEncodingSelector_1<TContext : SGBridgeGenericValue>
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HeaderEncodingSelector_1_get_type_handle(TContext.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Encoding Invoke(System.String, TContext)
// docid: M:System.Net.Http.HeaderEncodingSelector`1.Invoke(System.String,`0)
    public func Invoke(headerName : dotnet.System.String, context : TContext) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HeaderEncodingSelector_1_Encoding__Invoke_0__2__String_TContext(TContext.get_type_handle(), &__thrown, self.get_handle(), headerName.get_handle(), context.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IAsyncResult BeginInvoke(System.String, TContext, System.AsyncCallback, System.Object)
// docid: M:System.Net.Http.HeaderEncodingSelector`1.BeginInvoke(System.String,`0,System.AsyncCallback,System.Object)
    public func BeginInvoke(headerName : dotnet.System.String, context : TContext, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HeaderEncodingSelector_1_IAsyncResult__BeginInvoke_0__4__String_TContext_AsyncCallback_Object(TContext.get_type_handle(), &__thrown, self.get_handle(), headerName.get_handle(), context.to_gval(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Encoding EndInvoke(System.IAsyncResult)
// docid: M:System.Net.Http.HeaderEncodingSelector`1.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HeaderEncodingSelector_1_Encoding__EndInvoke_0__1__IAsyncResult(TContext.get_type_handle(), &__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public init(_ callback : @escaping (dotnet.System.String, TContext) throws -> dotnet.System.Text.Encoding) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, GVal) -> NullableHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, headerName : NonnullHandle, context : GVal) -> NullableHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback(dotnet.System.String(hndl: headerName), TContext(gval: context));
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, headerName : NonnullHandle, context : GVal) -> NullableHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, GVal) -> NullableHandle;
            return f(thrown, headerName, context);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HeaderEncodingSelector_1_create(
            TContext.get_type_handle(),
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Text.Encoding Invoke(System.String, TContext)
// docid: M:System.Net.Http.HeaderEncodingSelector`1.Invoke(System.String,`0)
    public func callAsFunction(headerName : dotnet.System.String, context : TContext) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HeaderEncodingSelector_1_Encoding__Invoke_0__2__String_TContext(TContext.get_type_handle(), &__thrown, self.get_handle(), headerName.get_handle(), context.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HeaderEncodingSelector_1


// type: System.Net.Http.HttpClient
    /**
    Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.

    */
open class HttpClient
    :
    dotnet.System.Net.Http.HttpMessageInvoker
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpClient_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.HttpClient.#ctor
    /**
    Initializes a new instance of the  class using a  that is disposed when this instance is disposed.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpClient_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Http.HttpMessageHandler)
// docid: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
    /**
    Initializes a new instance of the  class with the specified handler. The handler is disposed when this instance is disposed.

    - Parameter handler: The HTTP handler stack to use for sending requests.
    */
    public override init(handler : dotnet.System.Net.Http.HttpMessageHandler) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpClient_ctor_0__1__HttpMessageHandler(&__thrown, handler.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Http.HttpMessageHandler, bool)
// docid: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
    /**
    Initializes a new instance of the  class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.

    - Parameter handler: The  responsible for processing the HTTP response messages.
    - Parameter disposeHandler: 
         if the inner handler should be disposed of by HttpClient.Dispose;  if you intend to reuse the inner handler.
    */
    public override init(handler : dotnet.System.Net.Http.HttpMessageHandler, disposeHandler : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpClient_ctor_0__2__HttpMessageHandler_bool(&__thrown, handler.get_handle(), Swift.Int32(disposeHandler ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CancelPendingRequests()
// docid: M:System.Net.Http.HttpClient.CancelPendingRequests
    /**
    Cancel all pending requests on this instance.

    */
    open func CancelPendingRequests() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClient_void__CancelPendingRequests_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(System.String)
// docid: M:System.Net.Http.HttpClient.DeleteAsync(System.String)
    /**
    Send a DELETE request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func DeleteAsync(requestUri : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___DeleteAsync_0__1__String(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
    /**
    Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func DeleteAsync(requestUri : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___DeleteAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(System.Uri)
// docid: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)
    /**
    Send a DELETE request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func DeleteAsync(requestUri : Optional<dotnet.System.Uri>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___DeleteAsync_0__1__Uri(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(System.Uri, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
    /**
    Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func DeleteAsync(requestUri : Optional<dotnet.System.Uri>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___DeleteAsync_0__2__Uri_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.String)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.String)
    /**
    Send a GET request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__1__String(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.String, System.Net.Http.HttpCompletionOption)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
    /**
    Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter completionOption: An HTTP completion option value that indicates when the operation should be considered completed.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.String>, completionOption : dotnet.System.Net.Http.HttpCompletionOption) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__2__String_HttpCompletionOption(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, completionOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.String, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter completionOption: An HTTP  completion option value that indicates when the operation should be considered completed.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.String>, completionOption : dotnet.System.Net.Http.HttpCompletionOption, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__3__String_HttpCompletionOption_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, completionOption.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.Uri)
    /**
    Send a GET request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.Uri>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__1__Uri(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri, System.Net.Http.HttpCompletionOption)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
    /**
    Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter completionOption: An HTTP completion option value that indicates when the operation should be considered completed.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.Uri>, completionOption : dotnet.System.Net.Http.HttpCompletionOption) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__2__Uri_HttpCompletionOption(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, completionOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter completionOption: An HTTP  completion option value that indicates when the operation should be considered completed.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.Uri>, completionOption : dotnet.System.Net.Http.HttpCompletionOption, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__3__Uri_HttpCompletionOption_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, completionOption.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetAsync(requestUri : Optional<dotnet.System.Uri>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___GetAsync_0__2__Uri_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> GetByteArrayAsync(System.String)
// docid: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
    /**
    Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetByteArrayAsync(requestUri : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_u8Array___GetByteArrayAsync_0__1__String(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> GetByteArrayAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String,System.Threading.CancellationToken)
    /**
    Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetByteArrayAsync(requestUri : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_u8Array___GetByteArrayAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> GetByteArrayAsync(System.Uri)
// docid: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
    /**
    Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetByteArrayAsync(requestUri : Optional<dotnet.System.Uri>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_u8Array___GetByteArrayAsync_0__1__Uri(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> GetByteArrayAsync(System.Uri, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetByteArrayAsync(requestUri : Optional<dotnet.System.Uri>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_u8Array___GetByteArrayAsync_0__2__Uri_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.String)
// docid: M:System.Net.Http.HttpClient.GetStreamAsync(System.String)
    /**
    Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStreamAsync(requestUri : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_IO_Stream___GetStreamAsync_0__1__String(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetStreamAsync(System.String,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStreamAsync(requestUri : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_IO_Stream___GetStreamAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.Uri)
// docid: M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
    /**
    Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStreamAsync(requestUri : Optional<dotnet.System.Uri>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_IO_Stream___GetStreamAsync_0__1__Uri(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.Uri, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStreamAsync(requestUri : Optional<dotnet.System.Uri>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_IO_Stream___GetStreamAsync_0__2__Uri_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetStringAsync(System.String)
// docid: M:System.Net.Http.HttpClient.GetStringAsync(System.String)
    /**
    Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStringAsync(requestUri : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_string___GetStringAsync_0__1__String(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetStringAsync(System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetStringAsync(System.String,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStringAsync(requestUri : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_string___GetStringAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetStringAsync(System.Uri)
// docid: M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)
    /**
    Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStringAsync(requestUri : Optional<dotnet.System.Uri>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_string___GetStringAsync_0__1__Uri(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetStringAsync(System.Uri, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.GetStringAsync(System.Uri,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func GetStringAsync(requestUri : Optional<dotnet.System.Uri>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_string___GetStringAsync_0__2__Uri_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PatchAsync(System.String, System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)
    /**
    Sends a PATCH request to a Uri designated as a string as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PatchAsync(requestUri : Optional<dotnet.System.String>, content : Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PatchAsync_0__2__String_HttpContent(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PatchAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
    /**
    Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PatchAsync(requestUri : Optional<dotnet.System.String>, content : Optional<dotnet.System.Net.Http.HttpContent>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PatchAsync_0__3__String_HttpContent_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PatchAsync(System.Uri, System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)
    /**
    Sends a PATCH request as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PatchAsync(requestUri : Optional<dotnet.System.Uri>, content : Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PatchAsync_0__2__Uri_HttpContent(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PatchAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
    /**
    Sends a PATCH request with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PatchAsync(requestUri : Optional<dotnet.System.Uri>, content : Optional<dotnet.System.Net.Http.HttpContent>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PatchAsync_0__3__Uri_HttpContent_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(System.String, System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
    /**
    Send a POST request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PostAsync(requestUri : Optional<dotnet.System.String>, content : Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsync_0__2__String_HttpContent(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
    /**
    Send a POST request with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PostAsync(requestUri : Optional<dotnet.System.String>, content : Optional<dotnet.System.Net.Http.HttpContent>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsync_0__3__String_HttpContent_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(System.Uri, System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
    /**
    Send a POST request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PostAsync(requestUri : Optional<dotnet.System.Uri>, content : Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsync_0__2__Uri_HttpContent(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
    /**
    Send a POST request with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PostAsync(requestUri : Optional<dotnet.System.Uri>, content : Optional<dotnet.System.Net.Http.HttpContent>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsync_0__3__Uri_HttpContent_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(System.String, System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
    /**
    Send a PUT request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PutAsync(requestUri : Optional<dotnet.System.String>, content : Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsync_0__2__String_HttpContent(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
    /**
    Send a PUT request with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PutAsync(requestUri : Optional<dotnet.System.String>, content : Optional<dotnet.System.Net.Http.HttpContent>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsync_0__3__String_HttpContent_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(System.Uri, System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
    /**
    Send a PUT request to the specified Uri as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PutAsync(requestUri : Optional<dotnet.System.Uri>, content : Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsync_0__2__Uri_HttpContent(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
    /**
    Send a PUT request with a cancellation token as an asynchronous operation.

    - Parameter requestUri: The Uri the request is sent to.
    - Parameter content: The HTTP request content sent to the server.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func PutAsync(requestUri : Optional<dotnet.System.Uri>, content : Optional<dotnet.System.Net.Http.HttpContent>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsync_0__3__Uri_HttpContent_CancellationToken(&__thrown, self.get_handle(), requestUri?.get_handle() ?? nil, content?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage)
// docid: M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage)
    /**
    Sends an HTTP request with the specified request.

    - Parameter request: The HTTP request message to send.
    - Returns: An HTTP response message.

    */
    open func Send(request : dotnet.System.Net.Http.HttpRequestMessage) throws -> dotnet.System.Net.Http.HttpResponseMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_HttpResponseMessage__Send_0__1__HttpRequestMessage(&__thrown, self.get_handle(), request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpResponseMessage(hndl : __return);
        }
    }
    // System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption)
// docid: M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
    /**
    Sends an HTTP request.

    - Parameter request: The HTTP request message to send.
    - Parameter completionOption: One of the enumeration values that specifies when the operation should complete (as soon as a response is available or after reading the response content).
    - Returns: The HTTP response message.

    */
    open func Send(request : dotnet.System.Net.Http.HttpRequestMessage, completionOption : dotnet.System.Net.Http.HttpCompletionOption) throws -> dotnet.System.Net.Http.HttpResponseMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_HttpResponseMessage__Send_0__2__HttpRequestMessage_HttpCompletionOption(&__thrown, self.get_handle(), request.get_handle(), completionOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpResponseMessage(hndl : __return);
        }
    }
    // System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
    /**
    Sends an HTTP request with the specified request, completion option and cancellation token.

    - Parameter request: The HTTP request message to send.
    - Parameter completionOption: One of the enumeration values that specifies when the operation should complete (as soon as a response is available or after reading the response content).
    - Parameter cancellationToken: The token to cancel the operation.
    - Returns: The HTTP response message.

    */
    open func Send(request : dotnet.System.Net.Http.HttpRequestMessage, completionOption : dotnet.System.Net.Http.HttpCompletionOption, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Net.Http.HttpResponseMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_HttpResponseMessage__Send_0__3__HttpRequestMessage_HttpCompletionOption_CancellationToken(&__thrown, self.get_handle(), request.get_handle(), completionOption.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpResponseMessage(hndl : __return);
        }
    }
    // System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    /**
    Sends an HTTP request with the specified request and cancellation token.

    - Parameter request: The HTTP request message to send.
    - Parameter cancellationToken: The token to cancel the operation.
    - Returns: The HTTP response message.

    */
    open override func Send(request : dotnet.System.Net.Http.HttpRequestMessage, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Net.Http.HttpResponseMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_HttpResponseMessage__Send_0__2__HttpRequestMessage_CancellationToken(&__thrown, self.get_handle(), request.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpResponseMessage(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage)
// docid: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
    /**
    Send an HTTP request as an asynchronous operation.

    - Parameter request: The HTTP request message to send.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendAsync(request : dotnet.System.Net.Http.HttpRequestMessage) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___SendAsync_0__1__HttpRequestMessage(&__thrown, self.get_handle(), request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption)
// docid: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
    /**
    Send an HTTP request as an asynchronous operation.

    - Parameter request: The HTTP request message to send.
    - Parameter completionOption: When the operation should complete (as soon as a response is available or after reading the whole response content).
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendAsync(request : dotnet.System.Net.Http.HttpRequestMessage, completionOption : dotnet.System.Net.Http.HttpCompletionOption) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___SendAsync_0__2__HttpRequestMessage_HttpCompletionOption(&__thrown, self.get_handle(), request.get_handle(), completionOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
    /**
    Send an HTTP request as an asynchronous operation.

    - Parameter request: The HTTP request message to send.
    - Parameter completionOption: When the operation should complete (as soon as a response is available or after reading the whole response content).
    - Parameter cancellationToken: The cancellation token to cancel operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendAsync(request : dotnet.System.Net.Http.HttpRequestMessage, completionOption : dotnet.System.Net.Http.HttpCompletionOption, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___SendAsync_0__3__HttpRequestMessage_HttpCompletionOption_CancellationToken(&__thrown, self.get_handle(), request.get_handle(), completionOption.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    /**
    Send an HTTP request as an asynchronous operation.

    - Parameter request: The HTTP request message to send.
    - Parameter cancellationToken: The cancellation token to cancel operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open override func SendAsync(request : dotnet.System.Net.Http.HttpRequestMessage, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___SendAsync_0__2__HttpRequestMessage_CancellationToken(&__thrown, self.get_handle(), request.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_BaseAddress()
// docid: M:System.Net.Http.HttpClient.get_BaseAddress
    open func get_BaseAddress() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_Uri__get_BaseAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseAddress(System.Uri)
// docid: M:System.Net.Http.HttpClient.set_BaseAddress(System.Uri)
    open func set_BaseAddress(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClient_void__set_BaseAddress_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_DefaultProxy()
// docid: M:System.Net.Http.HttpClient.get_DefaultProxy
    open class func get_DefaultProxy() throws -> dotnet.System.Net.IWebProxy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_IWebProxy__get_DefaultProxy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IWebProxy(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultProxy(System.Net.IWebProxy)
// docid: M:System.Net.Http.HttpClient.set_DefaultProxy(System.Net.IWebProxy)
    open class func set_DefaultProxy(value : dotnet.System.Net.IWebProxy) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClient_void__set_DefaultProxy_0__1__IWebProxy(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpRequestHeaders get_DefaultRequestHeaders()
// docid: M:System.Net.Http.HttpClient.get_DefaultRequestHeaders
    open func get_DefaultRequestHeaders() throws -> dotnet.System.Net.Http.Headers.HttpRequestHeaders {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_HttpRequestHeaders__get_DefaultRequestHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpRequestHeaders(hndl : __return);
        }
    }
    // [IsSpecialName] System.Version get_DefaultRequestVersion()
// docid: M:System.Net.Http.HttpClient.get_DefaultRequestVersion
    open func get_DefaultRequestVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_Version__get_DefaultRequestVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultRequestVersion(System.Version)
// docid: M:System.Net.Http.HttpClient.set_DefaultRequestVersion(System.Version)
    open func set_DefaultRequestVersion(value : dotnet.System.Version) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClient_void__set_DefaultRequestVersion_0__1__Version(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.HttpVersionPolicy get_DefaultVersionPolicy()
// docid: M:System.Net.Http.HttpClient.get_DefaultVersionPolicy
    open func get_DefaultVersionPolicy() throws -> dotnet.System.Net.Http.HttpVersionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_HttpVersionPolicy__get_DefaultVersionPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpVersionPolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_DefaultVersionPolicy(System.Net.Http.HttpVersionPolicy)
// docid: M:System.Net.Http.HttpClient.set_DefaultVersionPolicy(System.Net.Http.HttpVersionPolicy)
    open func set_DefaultVersionPolicy(value : dotnet.System.Net.Http.HttpVersionPolicy) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClient_void__set_DefaultVersionPolicy_0__1__HttpVersionPolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxResponseContentBufferSize()
// docid: M:System.Net.Http.HttpClient.get_MaxResponseContentBufferSize
    open func get_MaxResponseContentBufferSize() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_i64__get_MaxResponseContentBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxResponseContentBufferSize(System.Int64)
// docid: M:System.Net.Http.HttpClient.set_MaxResponseContentBufferSize(System.Int64)
    open func set_MaxResponseContentBufferSize(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClient_void__set_MaxResponseContentBufferSize_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_Timeout()
// docid: M:System.Net.Http.HttpClient.get_Timeout
    open func get_Timeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClient_TimeSpan__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_Timeout(System.TimeSpan)
    /**
    Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.

    */
    open var BaseAddress : Optional<dotnet.System.Uri> {
        get {
            return try! get_BaseAddress();
        }
        set(v) {
            return try! set_BaseAddress(value: v!);
        }
    }
    /**
    Gets or sets the global Http proxy.

    */
    public static var DefaultProxy : dotnet.System.Net.IWebProxy {
        get {
            return try! get_DefaultProxy();
        }
        set(v) {
            return try! set_DefaultProxy(value: v);
        }
    }
    /**
    Gets the headers which should be sent with each request.

    */
    open var DefaultRequestHeaders : dotnet.System.Net.Http.Headers.HttpRequestHeaders {
        get {
            return try! get_DefaultRequestHeaders();
        }
    }
    /**
    Gets or sets the default HTTP version used on subsequent requests made by this  instance.

    */
    open var DefaultRequestVersion : dotnet.System.Version {
        get {
            return try! get_DefaultRequestVersion();
        }
        set(v) {
            return try! set_DefaultRequestVersion(value: v);
        }
    }
    /**
    Gets or sets the default version policy for implicitly created requests in convenience methods, for example,  and .

    */
    open var DefaultVersionPolicy : dotnet.System.Net.Http.HttpVersionPolicy {
        get {
            return try! get_DefaultVersionPolicy();
        }
        set(v) {
            return try! set_DefaultVersionPolicy(value: v);
        }
    }
    /**
    Gets or sets the maximum number of bytes to buffer when reading the response content.

    */
    open var MaxResponseContentBufferSize : Swift.Int64 {
        get {
            return try! get_MaxResponseContentBufferSize();
        }
        set(v) {
            return try! set_MaxResponseContentBufferSize(value: v);
        }
    }
    /**
    Gets or sets the timespan to wait before the request times out.

    */
    open var Timeout : dotnet.System.TimeSpan {
        get {
            return try! get_Timeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_Timeout(System.TimeSpan)
    }
} // HttpClient


// type: System.Net.Http.HttpClientHandler
    /**
    The default message handler used by  in .NET Framework and .NET Core 2.0 and earlier.

    */
open class HttpClientHandler
    :
    dotnet.System.Net.Http.HttpMessageHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpClientHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.HttpClientHandler.#ctor
    /**
    Creates an instance of a  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpClientHandler_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_AllowAutoRedirect()
// docid: M:System.Net.Http.HttpClientHandler.get_AllowAutoRedirect
    open func get_AllowAutoRedirect() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_AllowAutoRedirect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowAutoRedirect(bool)
// docid: M:System.Net.Http.HttpClientHandler.set_AllowAutoRedirect(System.Boolean)
    open func set_AllowAutoRedirect(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_AllowAutoRedirect_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.DecompressionMethods get_AutomaticDecompression()
// docid: M:System.Net.Http.HttpClientHandler.get_AutomaticDecompression
    open func get_AutomaticDecompression() throws -> dotnet.System.Net.DecompressionMethods {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_DecompressionMethods__get_AutomaticDecompression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.DecompressionMethods(val: __return);
        }
    }
    // [IsSpecialName] void set_AutomaticDecompression(System.Net.DecompressionMethods)
// docid: M:System.Net.Http.HttpClientHandler.set_AutomaticDecompression(System.Net.DecompressionMethods)
    open func set_AutomaticDecompression(value : dotnet.System.Net.DecompressionMethods) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_AutomaticDecompression_0__1__DecompressionMethods(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CheckCertificateRevocationList()
// docid: M:System.Net.Http.HttpClientHandler.get_CheckCertificateRevocationList
    open func get_CheckCertificateRevocationList() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_CheckCertificateRevocationList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CheckCertificateRevocationList(bool)
// docid: M:System.Net.Http.HttpClientHandler.set_CheckCertificateRevocationList(System.Boolean)
    open func set_CheckCertificateRevocationList(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_CheckCertificateRevocationList_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.ClientCertificateOption get_ClientCertificateOptions()
// docid: M:System.Net.Http.HttpClientHandler.get_ClientCertificateOptions
    open func get_ClientCertificateOptions() throws -> dotnet.System.Net.Http.ClientCertificateOption {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_ClientCertificateOption__get_ClientCertificateOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.ClientCertificateOption(val: __return);
        }
    }
    // [IsSpecialName] void set_ClientCertificateOptions(System.Net.Http.ClientCertificateOption)
// docid: M:System.Net.Http.HttpClientHandler.set_ClientCertificateOptions(System.Net.Http.ClientCertificateOption)
    open func set_ClientCertificateOptions(value : dotnet.System.Net.Http.ClientCertificateOption) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_ClientCertificateOptions_0__1__ClientCertificateOption(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
// docid: M:System.Net.Http.HttpClientHandler.get_ClientCertificates
    open func get_ClientCertificates() throws -> dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_X509CertificateCollection__get_ClientCertificates_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.CookieContainer get_CookieContainer()
// docid: M:System.Net.Http.HttpClientHandler.get_CookieContainer
    open func get_CookieContainer() throws -> dotnet.System.Net.CookieContainer {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_CookieContainer__get_CookieContainer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.CookieContainer(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieContainer(System.Net.CookieContainer)
// docid: M:System.Net.Http.HttpClientHandler.set_CookieContainer(System.Net.CookieContainer)
    open func set_CookieContainer(value : dotnet.System.Net.CookieContainer) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_CookieContainer_0__1__CookieContainer(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.Http.HttpClientHandler.get_Credentials
    open func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.Http.HttpClientHandler.set_Credentials(System.Net.ICredentials)
    open func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,bool> get_DangerousAcceptAnyServerCertificateValidator()
// docid: M:System.Net.Http.HttpClientHandler.get_DangerousAcceptAnyServerCertificateValidator
    open class func get_DangerousAcceptAnyServerCertificateValidator() throws -> dotnet.System.Func_5<dotnet.System.Net.Http.HttpRequestMessage,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2,dotnet.System.Security.Cryptography.X509Certificates.X509Chain,dotnet.System.Net.Security.SslPolicyErrors,Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_System_Func_System_Net_Http_HttpRequestMessage_System_Security_Cryptography_X509Certificates_X509Certificate2_System_Security_Cryptography_X509Certificates_X509Chain_System_Net_Security_SslPolicyErrors_bool___get_DangerousAcceptAnyServerCertificateValidator_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_5(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_DefaultProxyCredentials()
// docid: M:System.Net.Http.HttpClientHandler.get_DefaultProxyCredentials
    open func get_DefaultProxyCredentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_ICredentials__get_DefaultProxyCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultProxyCredentials(System.Net.ICredentials)
// docid: M:System.Net.Http.HttpClientHandler.set_DefaultProxyCredentials(System.Net.ICredentials)
    open func set_DefaultProxyCredentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_DefaultProxyCredentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxAutomaticRedirections()
// docid: M:System.Net.Http.HttpClientHandler.get_MaxAutomaticRedirections
    open func get_MaxAutomaticRedirections() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_i32__get_MaxAutomaticRedirections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxAutomaticRedirections(System.Int32)
// docid: M:System.Net.Http.HttpClientHandler.set_MaxAutomaticRedirections(System.Int32)
    open func set_MaxAutomaticRedirections(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_MaxAutomaticRedirections_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxConnectionsPerServer()
// docid: M:System.Net.Http.HttpClientHandler.get_MaxConnectionsPerServer
    open func get_MaxConnectionsPerServer() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_i32__get_MaxConnectionsPerServer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxConnectionsPerServer(System.Int32)
// docid: M:System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(System.Int32)
    open func set_MaxConnectionsPerServer(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_MaxConnectionsPerServer_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxRequestContentBufferSize()
// docid: M:System.Net.Http.HttpClientHandler.get_MaxRequestContentBufferSize
    open func get_MaxRequestContentBufferSize() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_i64__get_MaxRequestContentBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxRequestContentBufferSize(System.Int64)
// docid: M:System.Net.Http.HttpClientHandler.set_MaxRequestContentBufferSize(System.Int64)
    open func set_MaxRequestContentBufferSize(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_MaxRequestContentBufferSize_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxResponseHeadersLength()
// docid: M:System.Net.Http.HttpClientHandler.get_MaxResponseHeadersLength
    open func get_MaxResponseHeadersLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_i32__get_MaxResponseHeadersLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxResponseHeadersLength(System.Int32)
// docid: M:System.Net.Http.HttpClientHandler.set_MaxResponseHeadersLength(System.Int32)
    open func set_MaxResponseHeadersLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_MaxResponseHeadersLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreAuthenticate()
// docid: M:System.Net.Http.HttpClientHandler.get_PreAuthenticate
    open func get_PreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_PreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreAuthenticate(bool)
// docid: M:System.Net.Http.HttpClientHandler.set_PreAuthenticate(System.Boolean)
    open func set_PreAuthenticate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_PreAuthenticate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:System.Net.Http.HttpClientHandler.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.Http.HttpClientHandler.get_Proxy
    open func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.Http.HttpClientHandler.set_Proxy(System.Net.IWebProxy)
    open func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,bool> get_ServerCertificateCustomValidationCallback()
// docid: M:System.Net.Http.HttpClientHandler.get_ServerCertificateCustomValidationCallback
    open func get_ServerCertificateCustomValidationCallback() throws -> Optional<dotnet.System.Func_5<dotnet.System.Net.Http.HttpRequestMessage,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2,dotnet.System.Security.Cryptography.X509Certificates.X509Chain,dotnet.System.Net.Security.SslPolicyErrors,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_System_Func_System_Net_Http_HttpRequestMessage_System_Security_Cryptography_X509Certificates_X509Certificate2_System_Security_Cryptography_X509Certificates_X509Chain_System_Net_Security_SslPolicyErrors_bool___get_ServerCertificateCustomValidationCallback_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_5(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ServerCertificateCustomValidationCallback(System.Func<System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,bool>)
// docid: M:System.Net.Http.HttpClientHandler.set_ServerCertificateCustomValidationCallback(System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean})
    open func set_ServerCertificateCustomValidationCallback(value : Optional<dotnet.System.Func_5<dotnet.System.Net.Http.HttpRequestMessage,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2,dotnet.System.Security.Cryptography.X509Certificates.X509Chain,dotnet.System.Net.Security.SslPolicyErrors,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_ServerCertificateCustomValidationCallback_0__1__System_Func_System_Net_Http_HttpRequestMessage_System_Security_Cryptography_X509Certificates_X509Certificate2_System_Security_Cryptography_X509Certificates_X509Chain_System_Net_Security_SslPolicyErrors_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ServerCertificateCustomValidationCallback(value : @escaping (Optional<dotnet.System.Net.Http.HttpRequestMessage>, Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>, Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Chain>, dotnet.System.Net.Security.SslPolicyErrors) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_5<dotnet.System.Net.Http.HttpRequestMessage,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2,dotnet.System.Security.Cryptography.X509Certificates.X509Chain,dotnet.System.Net.Security.SslPolicyErrors,Swift.Bool>(value);
        return try set_ServerCertificateCustomValidationCallback(value: del_value);
    }
    // [IsSpecialName] System.Security.Authentication.SslProtocols get_SslProtocols()
// docid: M:System.Net.Http.HttpClientHandler.get_SslProtocols
    open func get_SslProtocols() throws -> dotnet.System.Security.Authentication.SslProtocols {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_SslProtocols__get_SslProtocols_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Authentication.SslProtocols(val: __return);
        }
    }
    // [IsSpecialName] void set_SslProtocols(System.Security.Authentication.SslProtocols)
// docid: M:System.Net.Http.HttpClientHandler.set_SslProtocols(System.Security.Authentication.SslProtocols)
    open func set_SslProtocols(value : dotnet.System.Security.Authentication.SslProtocols) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_SslProtocols_0__1__SslProtocols(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SupportsAutomaticDecompression()
// docid: M:System.Net.Http.HttpClientHandler.get_SupportsAutomaticDecompression
    open func get_SupportsAutomaticDecompression() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_SupportsAutomaticDecompression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_SupportsProxy()
// docid: M:System.Net.Http.HttpClientHandler.get_SupportsProxy
    open func get_SupportsProxy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_SupportsProxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_SupportsRedirectConfiguration()
// docid: M:System.Net.Http.HttpClientHandler.get_SupportsRedirectConfiguration
    open func get_SupportsRedirectConfiguration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_SupportsRedirectConfiguration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_UseCookies()
// docid: M:System.Net.Http.HttpClientHandler.get_UseCookies
    open func get_UseCookies() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_UseCookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseCookies(bool)
// docid: M:System.Net.Http.HttpClientHandler.set_UseCookies(System.Boolean)
    open func set_UseCookies(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_UseCookies_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.Http.HttpClientHandler.get_UseDefaultCredentials
    open func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.Http.HttpClientHandler.set_UseDefaultCredentials(System.Boolean)
    open func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseProxy()
// docid: M:System.Net.Http.HttpClientHandler.get_UseProxy
    open func get_UseProxy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientHandler_bool__get_UseProxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseProxy(bool)
// docid: M:System.Net.Http.HttpClientHandler.set_UseProxy(System.Boolean)
    open func set_UseProxy(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpClientHandler_void__set_UseProxy_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether the handler should follow redirection responses.

    */
    open var AllowAutoRedirect : Bool {
        get {
            return try! get_AllowAutoRedirect();
        }
        set(v) {
            return try! set_AllowAutoRedirect(value: v);
        }
    }
    /**
    Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.

    */
    open var AutomaticDecompression : dotnet.System.Net.DecompressionMethods {
        get {
            return try! get_AutomaticDecompression();
        }
        set(v) {
            return try! set_AutomaticDecompression(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the certificate is checked against the certificate authority revocation list.

    */
    open var CheckCertificateRevocationList : Bool {
        get {
            return try! get_CheckCertificateRevocationList();
        }
        set(v) {
            return try! set_CheckCertificateRevocationList(value: v);
        }
    }
    /**
    Gets or sets a value that indicates if the certificate is automatically picked from the certificate store or if the caller is allowed to pass in a specific client certificate.

    */
    open var ClientCertificateOptions : dotnet.System.Net.Http.ClientCertificateOption {
        get {
            return try! get_ClientCertificateOptions();
        }
        set(v) {
            return try! set_ClientCertificateOptions(value: v);
        }
    }
    /**
    Gets the collection of security certificates that are associated requests to the server.

    */
    open var ClientCertificates : dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        get {
            return try! get_ClientCertificates();
        }
    }
    /**
    Gets or sets the cookie container used to store server cookies by the handler.

    */
    open var CookieContainer : dotnet.System.Net.CookieContainer {
        get {
            return try! get_CookieContainer();
        }
        set(v) {
            return try! set_CookieContainer(value: v);
        }
    }
    /**
    Gets or sets authentication information used by this handler.

    */
    open var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    Gets a cached delegate that always returns .

    */
    public static var DangerousAcceptAnyServerCertificateValidator : dotnet.System.Func_5<dotnet.System.Net.Http.HttpRequestMessage,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2,dotnet.System.Security.Cryptography.X509Certificates.X509Chain,dotnet.System.Net.Security.SslPolicyErrors,Bool> {
        get {
            return try! get_DangerousAcceptAnyServerCertificateValidator();
        }
    }
    /**
    When the default (system) proxy is being used, gets or sets the credentials to submit to the default proxy server for authentication. The default proxy is used only when  is set to  and  is set to .

    */
    open var DefaultProxyCredentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_DefaultProxyCredentials();
        }
        set(v) {
            return try! set_DefaultProxyCredentials(value: v!);
        }
    }
    /**
    Gets or sets the maximum number of redirects that the handler follows.

    */
    open var MaxAutomaticRedirections : Swift.Int32 {
        get {
            return try! get_MaxAutomaticRedirections();
        }
        set(v) {
            return try! set_MaxAutomaticRedirections(value: v);
        }
    }
    /**
    Gets or sets the maximum number of concurrent connections (per server endpoint) allowed when making requests using an  object. Note that the limit is per server endpoint, so for example a value of 256 would permit 256 concurrent connections to http://www.adatum.com/ and another 256 to http://www.adventure-works.com/.

    */
    open var MaxConnectionsPerServer : Swift.Int32 {
        get {
            return try! get_MaxConnectionsPerServer();
        }
        set(v) {
            return try! set_MaxConnectionsPerServer(value: v);
        }
    }
    /**
    Gets or sets the maximum request content buffer size used by the handler.

    */
    open var MaxRequestContentBufferSize : Swift.Int64 {
        get {
            return try! get_MaxRequestContentBufferSize();
        }
        set(v) {
            return try! set_MaxRequestContentBufferSize(value: v);
        }
    }
    /**
    Gets or sets the maximum length, in kilobytes (1024 bytes), of the response headers. For example, if the value is 64, then 65536 bytes are allowed for the maximum response headers' length.

    */
    open var MaxResponseHeadersLength : Swift.Int32 {
        get {
            return try! get_MaxResponseHeadersLength();
        }
        set(v) {
            return try! set_MaxResponseHeadersLength(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the handler sends an Authorization header with the request.

    */
    open var PreAuthenticate : Bool {
        get {
            return try! get_PreAuthenticate();
        }
        set(v) {
            return try! set_PreAuthenticate(value: v);
        }
    }
    /**
    Gets a writable dictionary (that is, a map) of custom properties for the  requests. The dictionary is initialized empty; you can insert and query key-value pairs for your custom handlers and special processing.

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    Gets or sets proxy information used by the handler.

    */
    open var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    Gets or sets a callback method to validate the server certificate.

    */
    open var ServerCertificateCustomValidationCallback : Optional<dotnet.System.Func_5<dotnet.System.Net.Http.HttpRequestMessage,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2,dotnet.System.Security.Cryptography.X509Certificates.X509Chain,dotnet.System.Net.Security.SslPolicyErrors,Bool>> {
        get {
            return try! get_ServerCertificateCustomValidationCallback();
        }
        set(v) {
            return try! set_ServerCertificateCustomValidationCallback(value: v!);
        }
    }
    /**
    Gets or sets the TLS/SSL protocol used by the  objects managed by the HttpClientHandler object.

    */
    open var SslProtocols : dotnet.System.Security.Authentication.SslProtocols {
        get {
            return try! get_SslProtocols();
        }
        set(v) {
            return try! set_SslProtocols(value: v);
        }
    }
    /**
    Gets a value that indicates whether the handler supports automatic response content decompression.

    */
    open var SupportsAutomaticDecompression : Bool {
        get {
            return try! get_SupportsAutomaticDecompression();
        }
    }
    /**
    Gets a value that indicates whether the handler supports proxy settings.

    */
    open var SupportsProxy : Bool {
        get {
            return try! get_SupportsProxy();
        }
    }
    /**
    Gets a value that indicates whether the handler supports configuration settings for the  and  properties.

    */
    open var SupportsRedirectConfiguration : Bool {
        get {
            return try! get_SupportsRedirectConfiguration();
        }
    }
    /**
    Gets or sets a value that indicates whether the handler uses the   property  to store server cookies and uses these cookies when sending requests.

    */
    open var UseCookies : Bool {
        get {
            return try! get_UseCookies();
        }
        set(v) {
            return try! set_UseCookies(value: v);
        }
    }
    /**
    Gets or sets a value that controls whether default credentials are sent with requests by the handler.

    */
    open var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the handler uses a proxy for requests.

    */
    open var UseProxy : Bool {
        get {
            return try! get_UseProxy();
        }
        set(v) {
            return try! set_UseProxy(value: v);
        }
    }
} // HttpClientHandler


// type: System.Net.Http.HttpCompletionOption
    /**
    Indicates if  operations should be considered completed either as soon as a response is available, or after reading the entire response message including the content.

    */
public struct HttpCompletionOption : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpCompletionOption_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Http.HttpCompletionOption ResponseContentRead
    /**
    The operation should complete after reading the entire response including the content.

    */
    public static var ResponseContentRead : dotnet.System.Net.Http.HttpCompletionOption {
        get {
        let __return = dotnet.System.Net.Http.HttpCompletionOption(val: System_Net_Http_HttpCompletionOption_get_ResponseContentRead());
            return __return;
        }
    }
    // static field: System.Net.Http.HttpCompletionOption ResponseHeadersRead
    /**
    The operation should complete as soon as a response is available and headers are read. The content is not read yet.

    */
    public static var ResponseHeadersRead : dotnet.System.Net.Http.HttpCompletionOption {
        get {
        let __return = dotnet.System.Net.Http.HttpCompletionOption(val: System_Net_Http_HttpCompletionOption_get_ResponseHeadersRead());
            return __return;
        }
    }
} // HttpCompletionOption


// type: System.Net.Http.HttpContent
    /**
    A base class representing an HTTP entity body and content headers.

    */
open class HttpContent
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CopyTo(System.IO.Stream, System.Net.TransportContext, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.CopyTo(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)
    /**
    Serializes the HTTP content into a stream of bytes and copies it to .

    - Parameter stream: The target stream.
    - Parameter context: Information about the transport (for example, the channel binding token). This parameter may be .
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    */
    open func CopyTo(stream : dotnet.System.IO.Stream, context : Optional<dotnet.System.Net.TransportContext>, cancellationToken : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpContent_void__CopyTo_0__3__Stream_TransportContext_CancellationToken(&__thrown, self.get_handle(), stream.get_handle(), context?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream)
// docid: M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
    /**
    Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the  parameter.

    - Parameter stream: The target stream.
    - Returns: The task object representing the asynchronous operation.

    */
    open func CopyToAsync(stream : dotnet.System.IO.Stream) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Task__CopyToAsync_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.Net.TransportContext)
// docid: M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
    /**
    Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the  parameter.

    - Parameter stream: The target stream.
    - Parameter context: Information about the transport (channel binding token, for example). This parameter may be .
    - Returns: The task object representing the asynchronous operation.

    */
    open func CopyToAsync(stream : dotnet.System.IO.Stream, context : Optional<dotnet.System.Net.TransportContext>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Task__CopyToAsync_0__2__Stream_TransportContext(&__thrown, self.get_handle(), stream.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.Net.TransportContext, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)
    /**
    Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the  parameter.

    - Parameter stream: The target stream.
    - Parameter context: Information about the transport (channel binding token, for example). This parameter may be .
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func CopyToAsync(stream : dotnet.System.IO.Stream, context : Optional<dotnet.System.Net.TransportContext>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Task__CopyToAsync_0__3__Stream_TransportContext_CancellationToken(&__thrown, self.get_handle(), stream.get_handle(), context?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    /**
    Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the  parameter.

    - Parameter stream: The target stream.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func CopyToAsync(stream : dotnet.System.IO.Stream, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Task__CopyToAsync_0__2__Stream_CancellationToken(&__thrown, self.get_handle(), stream.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Net.Http.HttpContent.Dispose
    /**
    Releases the unmanaged resources and disposes of the managed resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpContent_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task LoadIntoBufferAsync()
// docid: M:System.Net.Http.HttpContent.LoadIntoBufferAsync
    /**
    Serialize the HTTP content to a memory buffer as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func LoadIntoBufferAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Task__LoadIntoBufferAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task LoadIntoBufferAsync(System.Int64)
// docid: M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
    /**
    Serialize the HTTP content to a memory buffer as an asynchronous operation.

    - Parameter maxBufferSize: The maximum size, in bytes, of the buffer to use.
    - Returns: The task object representing the asynchronous operation.

    */
    open func LoadIntoBufferAsync(maxBufferSize : Swift.Int64) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Task__LoadIntoBufferAsync_0__1__i64(&__thrown, self.get_handle(), maxBufferSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> ReadAsByteArrayAsync()
// docid: M:System.Net.Http.HttpContent.ReadAsByteArrayAsync
    /**
    Serialize the HTTP content to a byte array as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func ReadAsByteArrayAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_System_Threading_Tasks_Task_u8Array___ReadAsByteArrayAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> ReadAsByteArrayAsync(System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.ReadAsByteArrayAsync(System.Threading.CancellationToken)
    /**
    Serialize the HTTP content to a byte array as an asynchronous operation.

    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func ReadAsByteArrayAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_System_Threading_Tasks_Task_u8Array___ReadAsByteArrayAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IO.Stream ReadAsStream()
// docid: M:System.Net.Http.HttpContent.ReadAsStream
    /**
    Serializes the HTTP content and returns a stream that represents the content.

    - Returns: The stream that represents the HTTP content.

    */
    open func ReadAsStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Stream__ReadAsStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream ReadAsStream(System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.ReadAsStream(System.Threading.CancellationToken)
    /**
    Serializes the HTTP content and returns a stream that represents the content.

    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The stream that represents the HTTP content.

    */
    open func ReadAsStream(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_Stream__ReadAsStream_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync()
// docid: M:System.Net.Http.HttpContent.ReadAsStreamAsync
    /**
    Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func ReadAsStreamAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_System_Threading_Tasks_Task_System_IO_Stream___ReadAsStreamAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.ReadAsStreamAsync(System.Threading.CancellationToken)
    /**
    Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.

    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func ReadAsStreamAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_System_Threading_Tasks_Task_System_IO_Stream___ReadAsStreamAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadAsStringAsync()
// docid: M:System.Net.Http.HttpContent.ReadAsStringAsync
    /**
    Serialize the HTTP content to a string as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func ReadAsStringAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_System_Threading_Tasks_Task_string___ReadAsStringAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadAsStringAsync(System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpContent.ReadAsStringAsync(System.Threading.CancellationToken)
    /**
    Serialize the HTTP content to a string as an asynchronous operation.

    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func ReadAsStringAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_System_Threading_Tasks_Task_string___ReadAsStringAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpContentHeaders get_Headers()
// docid: M:System.Net.Http.HttpContent.get_Headers
    open func get_Headers() throws -> dotnet.System.Net.Http.Headers.HttpContentHeaders {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpContent_HttpContentHeaders__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpContentHeaders(hndl : __return);
        }
    }
    /**
    Gets the HTTP content headers as defined in RFC 2616.

    */
    open var Headers : dotnet.System.Net.Http.Headers.HttpContentHeaders {
        get {
            return try! get_Headers();
        }
    }
} // HttpContent


// type: System.Net.Http.HttpKeepAlivePingPolicy
    /**
    Specifies when the HTTP/2 ping frame is sent on an idle connection.

    */
public struct HttpKeepAlivePingPolicy : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpKeepAlivePingPolicy_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Http.HttpKeepAlivePingPolicy WithActiveRequests
    /**
    Sends a keep alive ping only when there are active streams on the connection.

    */
    public static var WithActiveRequests : dotnet.System.Net.Http.HttpKeepAlivePingPolicy {
        get {
        let __return = dotnet.System.Net.Http.HttpKeepAlivePingPolicy(val: System_Net_Http_HttpKeepAlivePingPolicy_get_WithActiveRequests());
            return __return;
        }
    }
    // static field: System.Net.Http.HttpKeepAlivePingPolicy Always
    /**
    Sends a keep alive ping for the whole lifetime of the connection.

    */
    public static var Always : dotnet.System.Net.Http.HttpKeepAlivePingPolicy {
        get {
        let __return = dotnet.System.Net.Http.HttpKeepAlivePingPolicy(val: System_Net_Http_HttpKeepAlivePingPolicy_get_Always());
            return __return;
        }
    }
} // HttpKeepAlivePingPolicy


// type: System.Net.Http.HttpMessageHandler
    /**
    A base type for HTTP message handlers.

    */
open class HttpMessageHandler
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpMessageHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Net.Http.HttpMessageHandler.Dispose
    /**
    Releases the unmanaged resources and disposes of the managed resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpMessageHandler_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HttpMessageHandler


// type: System.Net.Http.HttpMessageInvoker
    /**
    A specialty class that allows applications to call the  method on an HTTP handler chain.

    */
open class HttpMessageInvoker
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpMessageInvoker_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Net.Http.HttpMessageHandler)
// docid: M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
    /**
    Initializes an instance of a  class with a specific .

    - Parameter handler: The  responsible for processing the HTTP response messages.
    */
    public init(handler : dotnet.System.Net.Http.HttpMessageHandler) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpMessageInvoker_ctor_0__1__HttpMessageHandler(&__thrown, handler.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Http.HttpMessageHandler, bool)
// docid: M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
    /**
    Initializes an instance of a  class with a specific .

    - Parameter handler: The  responsible for processing the HTTP response messages.
    - Parameter disposeHandler: 
         if the inner handler should be disposed of by Dispose(),  if you intend to reuse the inner handler.
    */
    public init(handler : dotnet.System.Net.Http.HttpMessageHandler, disposeHandler : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpMessageInvoker_ctor_0__2__HttpMessageHandler_bool(&__thrown, handler.get_handle(), Swift.Int32(disposeHandler ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Net.Http.HttpMessageInvoker.Dispose
    /**
    Releases the unmanaged resources and disposes of the managed resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpMessageInvoker_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpMessageInvoker.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    /**
    Sends an HTTP request with the specified request and cancellation token.

    - Parameter request: The HTTP request message to send.
    - Parameter cancellationToken: The cancellation token to cancel operation.
    - Returns: The HTTP response message.

    */
    open func Send(request : dotnet.System.Net.Http.HttpRequestMessage, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Net.Http.HttpResponseMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMessageInvoker_HttpResponseMessage__Send_0__2__HttpRequestMessage_CancellationToken(&__thrown, self.get_handle(), request.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpResponseMessage(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
// docid: M:System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    /**
    Send an HTTP request as an asynchronous operation.

    - Parameter request: The HTTP request message to send.
    - Parameter cancellationToken: The cancellation token to cancel operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendAsync(request : dotnet.System.Net.Http.HttpRequestMessage, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMessageInvoker_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___SendAsync_0__2__HttpRequestMessage_CancellationToken(&__thrown, self.get_handle(), request.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // HttpMessageInvoker


// type: System.Net.Http.HttpMethod
    /**
    A helper class for retrieving and comparing standard HTTP methods and for creating new HTTP methods.

    */
open class HttpMethod
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpMethod_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.HttpMethod.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specific HTTP method.

    - Parameter method: The HTTP method.
    */
    public init(method : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpMethod_ctor_0__1__String(&__thrown, method.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Net.Http.HttpMethod)
// docid: M:System.Net.Http.HttpMethod.Equals(System.Net.Http.HttpMethod)
    /**
    Determines whether the specified  is equal to the current .

    - Parameter other: The HTTP method to compare with the current object.
    - Returns: 
         if the specified object is equal to the current object; otherwise, .

    */
    open /* method final */ func Equals(other : Optional<dotnet.System.Net.Http.HttpMethod>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_bool__Equals_0__1__HttpMethod(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.HttpMethod.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current .

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified object is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.HttpMethod.GetHashCode
    /**
    Serves as a hash function for this type.

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Net.Http.HttpMethod, System.Net.Http.HttpMethod)
// docid: M:System.Net.Http.HttpMethod.op_Equality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)
    /**
    The equality operator for comparing two  objects.

    - Parameter left: The left  to an equality operator.
    - Parameter right: The right   to an equality operator.
    - Returns: 
         if the specified  and  parameters are equal; otherwise, .

    */
    open class func op_Equality(left : Optional<dotnet.System.Net.Http.HttpMethod>, right : Optional<dotnet.System.Net.Http.HttpMethod>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_bool__op_Equality_0__2__HttpMethod_HttpMethod(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Net.Http.HttpMethod, System.Net.Http.HttpMethod)
// docid: M:System.Net.Http.HttpMethod.op_Inequality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)
    /**
    The inequality operator for comparing two  objects.

    - Parameter left: The left  to an inequality operator.
    - Parameter right: The right   to an inequality operator.
    - Returns: 
         if the specified  and  parameters are inequal; otherwise, .

    */
    open class func op_Inequality(left : Optional<dotnet.System.Net.Http.HttpMethod>, right : Optional<dotnet.System.Net.Http.HttpMethod>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_bool__op_Inequality_0__2__HttpMethod_HttpMethod(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.HttpMethod.ToString
    /**
    Returns a string that represents the current object.

    - Returns: A string representing the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Delete()
// docid: M:System.Net.Http.HttpMethod.get_Delete
    open class func get_Delete() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Delete_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Get()
// docid: M:System.Net.Http.HttpMethod.get_Get
    open class func get_Get() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Get_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Head()
// docid: M:System.Net.Http.HttpMethod.get_Head
    open class func get_Head() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Head_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.Net.Http.HttpMethod.get_Method
    open func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Options()
// docid: M:System.Net.Http.HttpMethod.get_Options
    open class func get_Options() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Options_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Patch()
// docid: M:System.Net.Http.HttpMethod.get_Patch
    open class func get_Patch() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Patch_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Post()
// docid: M:System.Net.Http.HttpMethod.get_Post
    open class func get_Post() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Post_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Put()
// docid: M:System.Net.Http.HttpMethod.get_Put
    open class func get_Put() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Put_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Trace()
// docid: M:System.Net.Http.HttpMethod.get_Trace
    open class func get_Trace() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMethod_HttpMethod__get_Trace_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    /**
    Represents an HTTP DELETE protocol method.

    */
    public static var Delete : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Delete();
        }
    }
    /**
    Represents an HTTP GET protocol method.

    */
    public static var Get : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Get();
        }
    }
    /**
    Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.

    */
    public static var Head : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Head();
        }
    }
    /**
    An HTTP method.

    */
    open var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
    }
    /**
    Represents an HTTP OPTIONS protocol method.

    */
    public static var Options : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Options();
        }
    }
    /**
    Gets the HTTP PATCH protocol method.

    */
    public static var Patch : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Patch();
        }
    }
    /**
    Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.

    */
    public static var Post : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Post();
        }
    }
    /**
    Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.

    */
    public static var Put : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Put();
        }
    }
    /**
    Represents an HTTP TRACE protocol method.

    */
    public static var Trace : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Trace();
        }
    }
} // HttpMethod


// type: System.Net.Http.HttpRequestException
    /**
    A base class for exceptions thrown by the  and  classes.

    */
open class HttpRequestException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpRequestException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.HttpRequestException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Http.HttpRequestException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specific message that describes the current exception.

    - Parameter message: A message that describes the current exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Net.Http.HttpRequestException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specific message that describes the current exception and an inner exception.

    - Parameter message: A message that describes the current exception.
    - Parameter inner: The inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Nullable<System.Net.HttpStatusCode>)
// docid: M:System.Net.Http.HttpRequestException.#ctor(System.String,System.Exception,System.Nullable{System.Net.HttpStatusCode})
    /**
    Initializes a new instance of the  class with a specific message that describes the current exception, an inner exception, and an HTTP status code.

    - Parameter message: A message that describes the current exception.
    - Parameter inner: The inner exception.
    - Parameter statusCode: The HTTP status code.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>, statusCode : Optional<dotnet.System.Net.HttpStatusCode>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestException_ctor_0__3__String_Exception_System_Nullable_System_Net_HttpStatusCode_(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!.get_value()) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<System.Net.HttpStatusCode> get_StatusCode()
// docid: M:System.Net.Http.HttpRequestException.get_StatusCode
    open func get_StatusCode() throws -> Optional<dotnet.System.Net.HttpStatusCode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestException_System_Nullable_System_Net_HttpStatusCode___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? dotnet.System.Net.HttpStatusCode(val: System_Int32_unbox(__return!)) : nil;
        }
    }
    /**
    Gets the HTTP status code to be returned with the exception.

    */
    open var StatusCode : Optional<dotnet.System.Net.HttpStatusCode> {
        get {
            return try! get_StatusCode();
        }
    }
} // HttpRequestException


// type: System.Net.Http.HttpRequestMessage
    /**
    Represents a HTTP request message.

    */
open class HttpRequestMessage
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpRequestMessage_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.HttpRequestMessage.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestMessage_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Http.HttpMethod, System.String)
// docid: M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.String)
    /**
    Initializes a new instance of the  class with an HTTP method and a request .

    - Parameter method: The HTTP method.
    - Parameter requestUri: A string that represents the request  .
    */
    public init(method : dotnet.System.Net.Http.HttpMethod, requestUri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestMessage_ctor_0__2__HttpMethod_String(&__thrown, method.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Http.HttpMethod, System.Uri)
// docid: M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.Uri)
    /**
    Initializes a new instance of the  class with an HTTP method and a request .

    - Parameter method: The HTTP method.
    - Parameter requestUri: The  to request.
    */
    public init(method : dotnet.System.Net.Http.HttpMethod, requestUri : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestMessage_ctor_0__2__HttpMethod_Uri(&__thrown, method.get_handle(), requestUri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Net.Http.HttpRequestMessage.Dispose
    /**
    Releases the unmanaged resources and disposes of the managed resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestMessage_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.HttpRequestMessage.ToString
    /**
    Returns a string that represents the current object.

    - Returns: A string representation of the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpContent get_Content()
// docid: M:System.Net.Http.HttpRequestMessage.get_Content
    open func get_Content() throws -> Optional<dotnet.System.Net.Http.HttpContent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_HttpContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpRequestMessage.set_Content(System.Net.Http.HttpContent)
    open func set_Content(value : Optional<dotnet.System.Net.Http.HttpContent>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestMessage_void__set_Content_0__1__HttpContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpRequestHeaders get_Headers()
// docid: M:System.Net.Http.HttpRequestMessage.get_Headers
    open func get_Headers() throws -> dotnet.System.Net.Http.Headers.HttpRequestHeaders {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_HttpRequestHeaders__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpRequestHeaders(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMethod get_Method()
// docid: M:System.Net.Http.HttpRequestMessage.get_Method
    open func get_Method() throws -> dotnet.System.Net.Http.HttpMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_HttpMethod__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpMethod(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.Net.Http.HttpMethod)
// docid: M:System.Net.Http.HttpRequestMessage.set_Method(System.Net.Http.HttpMethod)
    open func set_Method(value : dotnet.System.Net.Http.HttpMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestMessage_void__set_Method_0__1__HttpMethod(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:System.Net.Http.HttpRequestMessage.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpRequestOptions get_Options()
// docid: M:System.Net.Http.HttpRequestMessage.get_Options
    open func get_Options() throws -> dotnet.System.Net.Http.HttpRequestOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_HttpRequestOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpRequestOptions(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_RequestUri()
// docid: M:System.Net.Http.HttpRequestMessage.get_RequestUri
    open func get_RequestUri() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_Uri__get_RequestUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RequestUri(System.Uri)
// docid: M:System.Net.Http.HttpRequestMessage.set_RequestUri(System.Uri)
    open func set_RequestUri(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestMessage_void__set_RequestUri_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Version get_Version()
// docid: M:System.Net.Http.HttpRequestMessage.get_Version
    open func get_Version() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_Version__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Version(System.Version)
// docid: M:System.Net.Http.HttpRequestMessage.set_Version(System.Version)
    open func set_Version(value : dotnet.System.Version) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestMessage_void__set_Version_0__1__Version(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.HttpVersionPolicy get_VersionPolicy()
// docid: M:System.Net.Http.HttpRequestMessage.get_VersionPolicy
    open func get_VersionPolicy() throws -> dotnet.System.Net.Http.HttpVersionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestMessage_HttpVersionPolicy__get_VersionPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpVersionPolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_VersionPolicy(System.Net.Http.HttpVersionPolicy)
// docid: M:System.Net.Http.HttpRequestMessage.set_VersionPolicy(System.Net.Http.HttpVersionPolicy)
    open func set_VersionPolicy(value : dotnet.System.Net.Http.HttpVersionPolicy) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestMessage_void__set_VersionPolicy_0__1__HttpVersionPolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the contents of the HTTP message.

    */
    open var Content : Optional<dotnet.System.Net.Http.HttpContent> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
    /**
    Gets the collection of HTTP request headers.

    */
    open var Headers : dotnet.System.Net.Http.Headers.HttpRequestHeaders {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets or sets the HTTP method used by the HTTP request message.

    */
    open var Method : dotnet.System.Net.Http.HttpMethod {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    */
    open var Options : dotnet.System.Net.Http.HttpRequestOptions {
        get {
            return try! get_Options();
        }
    }
    /**
    Gets a set of properties for the HTTP request.

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    Gets or sets the  used for the HTTP request.

    */
    open var RequestUri : Optional<dotnet.System.Uri> {
        get {
            return try! get_RequestUri();
        }
        set(v) {
            return try! set_RequestUri(value: v!);
        }
    }
    /**
    Gets or sets the HTTP message version.

    */
    open var Version : dotnet.System.Version {
        get {
            return try! get_Version();
        }
        set(v) {
            return try! set_Version(value: v);
        }
    }
    /**
    Gets or sets the policy that determines how  is interpreted and how the final HTTP version is negotiated with the server.

    */
    open var VersionPolicy : dotnet.System.Net.Http.HttpVersionPolicy {
        get {
            return try! get_VersionPolicy();
        }
        set(v) {
            return try! set_VersionPolicy(value: v);
        }
    }
} // HttpRequestMessage


// type: System.Net.Http.HttpRequestOptions
    /**
    */
public final class HttpRequestOptions
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpRequestOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.HttpRequestOptions.#ctor
    /**
    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool TryGetValue<TValue>(System.Net.Http.HttpRequestOptionsKey<TValue>, ref TValue)
// docid: M:System.Net.Http.HttpRequestOptions.TryGetValue``1(System.Net.Http.HttpRequestOptionsKey{``0},``0@)
    /**
    - Parameter key: 
    - Parameter value: 
    */
    public func TryGetValue<UTValue : SGBridgeGenericValue>(key : dotnet.System.Net.Http.HttpRequestOptionsKey_1<UTValue>, value : inout UTValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Net_Http_HttpRequestOptions_bool__TryGetValue_1__2__System_Net_Http_HttpRequestOptionsKey_UTValue__outUTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
            let _tmp2_value = UTValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Set<TValue>(System.Net.Http.HttpRequestOptionsKey<TValue>, TValue)
// docid: M:System.Net.Http.HttpRequestOptions.Set``1(System.Net.Http.HttpRequestOptionsKey{``0},``0)
    /**
    - Parameter key: 
    - Parameter value: 
    */
    public func Set<UTValue : SGBridgeGenericValue>(key : dotnet.System.Net.Http.HttpRequestOptionsKey_1<UTValue>, value : UTValue) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpRequestOptions_void__Set_1__2__System_Net_Http_HttpRequestOptionsKey_UTValue__UTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), key.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HttpRequestOptions


// type: System.Net.Http.HttpRequestOptionsKey`1
// boxed value type
    /**
    */
public final class HttpRequestOptionsKey_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpRequestOptionsKey_1_get_type_handle(TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    */
    public var Key : dotnet.System.String {
        get {
            return try! get_Key();
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Http.HttpRequestOptionsKey`1.#ctor(System.String)
    /**
    - Parameter key: 
    */
    public init(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpRequestOptionsKey_1_ctor_0__1__String(TValue.get_type_handle(), &__thrown, key.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Net_Http_HttpRequestOptionsKey_1_implicit_ctor(TValue.get_type_handle());
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:System.Net.Http.HttpRequestOptionsKey`1.get_Key
    public func get_Key() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpRequestOptionsKey_1_String__get_Key_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // HttpRequestOptionsKey_1


// type: System.Net.Http.HttpResponseMessage
    /**
    Represents a HTTP response message including the status code and data.

    */
open class HttpResponseMessage
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpResponseMessage_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.HttpResponseMessage.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpResponseMessage_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.HttpStatusCode)
// docid: M:System.Net.Http.HttpResponseMessage.#ctor(System.Net.HttpStatusCode)
    /**
    Initializes a new instance of the  class with a specific .

    - Parameter statusCode: The status code of the HTTP response.
    */
    public init(statusCode : dotnet.System.Net.HttpStatusCode) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_HttpResponseMessage_ctor_0__1__HttpStatusCode(&__thrown, statusCode.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Net.Http.HttpResponseMessage.Dispose
    /**
    Releases the unmanaged resources and disposes of unmanaged resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpResponseMessage_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Net.Http.HttpResponseMessage EnsureSuccessStatusCode()
// docid: M:System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode
    /**
    Throws an exception if the  property for the HTTP response is .

    - Returns: The HTTP response message if the call is successful.

    */
    open func EnsureSuccessStatusCode() throws -> dotnet.System.Net.Http.HttpResponseMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_HttpResponseMessage__EnsureSuccessStatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpResponseMessage(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.HttpResponseMessage.ToString
    /**
    Returns a string that represents the current object.

    - Returns: A string representation of the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpContent get_Content()
// docid: M:System.Net.Http.HttpResponseMessage.get_Content
    open func get_Content() throws -> dotnet.System.Net.Http.HttpContent {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_HttpContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpContent(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Content(System.Net.Http.HttpContent)
// docid: M:System.Net.Http.HttpResponseMessage.set_Content(System.Net.Http.HttpContent)
    open func set_Content(value : dotnet.System.Net.Http.HttpContent) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpResponseMessage_void__set_Content_0__1__HttpContent(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpResponseHeaders get_Headers()
// docid: M:System.Net.Http.HttpResponseMessage.get_Headers
    open func get_Headers() throws -> dotnet.System.Net.Http.Headers.HttpResponseHeaders {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_HttpResponseHeaders__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpResponseHeaders(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsSuccessStatusCode()
// docid: M:System.Net.Http.HttpResponseMessage.get_IsSuccessStatusCode
    open func get_IsSuccessStatusCode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_bool__get_IsSuccessStatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_ReasonPhrase()
// docid: M:System.Net.Http.HttpResponseMessage.get_ReasonPhrase
    open func get_ReasonPhrase() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_String__get_ReasonPhrase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReasonPhrase(System.String)
// docid: M:System.Net.Http.HttpResponseMessage.set_ReasonPhrase(System.String)
    open func set_ReasonPhrase(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpResponseMessage_void__set_ReasonPhrase_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.HttpRequestMessage get_RequestMessage()
// docid: M:System.Net.Http.HttpResponseMessage.get_RequestMessage
    open func get_RequestMessage() throws -> Optional<dotnet.System.Net.Http.HttpRequestMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_HttpRequestMessage__get_RequestMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpRequestMessage(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RequestMessage(System.Net.Http.HttpRequestMessage)
// docid: M:System.Net.Http.HttpResponseMessage.set_RequestMessage(System.Net.Http.HttpRequestMessage)
    open func set_RequestMessage(value : Optional<dotnet.System.Net.Http.HttpRequestMessage>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpResponseMessage_void__set_RequestMessage_0__1__HttpRequestMessage(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.HttpStatusCode get_StatusCode()
// docid: M:System.Net.Http.HttpResponseMessage.get_StatusCode
    open func get_StatusCode() throws -> dotnet.System.Net.HttpStatusCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_HttpStatusCode__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpStatusCode(val: __return);
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Net.HttpStatusCode)
// docid: M:System.Net.Http.HttpResponseMessage.set_StatusCode(System.Net.HttpStatusCode)
    open func set_StatusCode(value : dotnet.System.Net.HttpStatusCode) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpResponseMessage_void__set_StatusCode_0__1__HttpStatusCode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpResponseHeaders get_TrailingHeaders()
// docid: M:System.Net.Http.HttpResponseMessage.get_TrailingHeaders
    open func get_TrailingHeaders() throws -> dotnet.System.Net.Http.Headers.HttpResponseHeaders {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_HttpResponseHeaders__get_TrailingHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpResponseHeaders(hndl : __return);
        }
    }
    // [IsSpecialName] System.Version get_Version()
// docid: M:System.Net.Http.HttpResponseMessage.get_Version
    open func get_Version() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpResponseMessage_Version__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Version(System.Version)
// docid: M:System.Net.Http.HttpResponseMessage.set_Version(System.Version)
    open func set_Version(value : dotnet.System.Version) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_HttpResponseMessage_void__set_Version_0__1__Version(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the content of a HTTP response message.

    */
    open var Content : dotnet.System.Net.Http.HttpContent {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v);
        }
    }
    /**
    Gets the collection of HTTP response headers.

    */
    open var Headers : dotnet.System.Net.Http.Headers.HttpResponseHeaders {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets a value that indicates if the HTTP response was successful.

    */
    open var IsSuccessStatusCode : Bool {
        get {
            return try! get_IsSuccessStatusCode();
        }
    }
    /**
    Gets or sets the reason phrase which typically is sent by servers together with the status code.

    */
    open var ReasonPhrase : Optional<dotnet.System.String> {
        get {
            return try! get_ReasonPhrase();
        }
        set(v) {
            return try! set_ReasonPhrase(value: v!);
        }
    }
    /**
    Gets or sets the request message which led to this response message.

    */
    open var RequestMessage : Optional<dotnet.System.Net.Http.HttpRequestMessage> {
        get {
            return try! get_RequestMessage();
        }
        set(v) {
            return try! set_RequestMessage(value: v!);
        }
    }
    /**
    Gets or sets the status code of the HTTP response.

    */
    open var StatusCode : dotnet.System.Net.HttpStatusCode {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
    /**
    Gets the collection of trailing headers included in an HTTP response.

    */
    open var TrailingHeaders : dotnet.System.Net.Http.Headers.HttpResponseHeaders {
        get {
            return try! get_TrailingHeaders();
        }
    }
    /**
    Gets or sets the HTTP message version.

    */
    open var Version : dotnet.System.Version {
        get {
            return try! get_Version();
        }
        set(v) {
            return try! set_Version(value: v);
        }
    }
} // HttpResponseMessage


// type: System.Net.Http.HttpVersionPolicy
    /**
    Specifies behaviors for selecting and negotiating the HTTP version for a request.

    */
public struct HttpVersionPolicy : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Http_HttpVersionPolicy_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Http.HttpVersionPolicy RequestVersionOrLower
    /**
    Use the requested version or downgrade to a lower one. This is the default behavior.

    */
    public static var RequestVersionOrLower : dotnet.System.Net.Http.HttpVersionPolicy {
        get {
        let __return = dotnet.System.Net.Http.HttpVersionPolicy(val: System_Net_Http_HttpVersionPolicy_get_RequestVersionOrLower());
            return __return;
        }
    }
    // static field: System.Net.Http.HttpVersionPolicy RequestVersionOrHigher
    /**
    Use the highest available version, downgrading only to the requested version but not below.

    */
    public static var RequestVersionOrHigher : dotnet.System.Net.Http.HttpVersionPolicy {
        get {
        let __return = dotnet.System.Net.Http.HttpVersionPolicy(val: System_Net_Http_HttpVersionPolicy_get_RequestVersionOrHigher());
            return __return;
        }
    }
    // static field: System.Net.Http.HttpVersionPolicy RequestVersionExact
    /**
    Only use the requested version.

    */
    public static var RequestVersionExact : dotnet.System.Net.Http.HttpVersionPolicy {
        get {
        let __return = dotnet.System.Net.Http.HttpVersionPolicy(val: System_Net_Http_HttpVersionPolicy_get_RequestVersionExact());
            return __return;
        }
    }
} // HttpVersionPolicy


// type: System.Net.Http.MessageProcessingHandler
    /**
    A base type for handlers which only do some small processing of request and/or response messages.

    */
open class MessageProcessingHandler
    :
    dotnet.System.Net.Http.DelegatingHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_MessageProcessingHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // MessageProcessingHandler


// type: System.Net.Http.MultipartContent
    /**
    Provides a collection of  objects that get serialized using the multipart/(ASTERISK) content type specification.

    */
open class MultipartContent
    :
    dotnet.System.Net.Http.HttpContent,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_MultipartContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.MultipartContent.#ctor
    /**
    Creates a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_MultipartContent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Http.MultipartContent.#ctor(System.String)
    /**
    Creates a new instance of the  class.

    - Parameter subtype: The subtype of the multipart content.
    */
    public init(subtype : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_MultipartContent_ctor_0__1__String(&__thrown, subtype.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)
    /**
    Creates a new instance of the  class.

    - Parameter subtype: The subtype of the multipart content.
    - Parameter boundary: The boundary string for the multipart content.
    */
    public init(subtype : dotnet.System.String, boundary : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_MultipartContent_ctor_0__2__String_String(&__thrown, subtype.get_handle(), boundary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Net.Http.HttpContent)
// docid: M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)
    /**
    Add multipart HTTP content to a collection of  objects that get serialized using the multipart/(ASTERISK) content type specification.

    - Parameter content: The HTTP content to add to the collection.
    */
    open func Add(content : dotnet.System.Net.Http.HttpContent) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_MultipartContent_void__Add_0__1__HttpContent(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Net.Http.HttpContent> GetEnumerator()
// docid: M:System.Net.Http.MultipartContent.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection of  objects that get serialized using the multipart/(ASTERISK) content type specification.

    - Returns: An object that can be used to iterate through the collection.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Net.Http.HttpContent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_MultipartContent_System_Collections_Generic_IEnumerator_System_Net_Http_HttpContent___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HeaderEncodingSelector<System.Net.Http.HttpContent> get_HeaderEncodingSelector()
// docid: M:System.Net.Http.MultipartContent.get_HeaderEncodingSelector
    open func get_HeaderEncodingSelector() throws -> Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpContent>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_MultipartContent_System_Net_Http_HeaderEncodingSelector_System_Net_Http_HttpContent___get_HeaderEncodingSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HeaderEncodingSelector_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HeaderEncodingSelector(System.Net.Http.HeaderEncodingSelector<System.Net.Http.HttpContent>)
// docid: M:System.Net.Http.MultipartContent.set_HeaderEncodingSelector(System.Net.Http.HeaderEncodingSelector{System.Net.Http.HttpContent})
    open func set_HeaderEncodingSelector(value : Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpContent>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_MultipartContent_void__set_HeaderEncodingSelector_0__1__System_Net_Http_HeaderEncodingSelector_System_Net_Http_HttpContent_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_HeaderEncodingSelector(value : @escaping (dotnet.System.String, Optional<dotnet.System.Net.Http.HttpContent>) throws -> dotnet.System.Text.Encoding) throws {
        let del_value = try dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpContent>(value);
        return try set_HeaderEncodingSelector(value: del_value);
    }
    /**
    Gets or sets a callback that decode response header values.

    */
    open var HeaderEncodingSelector : Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpContent>> {
        get {
            return try! get_HeaderEncodingSelector();
        }
        set(v) {
            return try! set_HeaderEncodingSelector(value: v!);
        }
    }
} // MultipartContent


// type: System.Net.Http.MultipartFormDataContent
    /**
    Provides a container for content encoded using multipart/form-data MIME type.

    */
open class MultipartFormDataContent
    :
    dotnet.System.Net.Http.MultipartContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_MultipartFormDataContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.MultipartFormDataContent.#ctor
    /**
    Creates a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_MultipartFormDataContent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Http.MultipartFormDataContent.#ctor(System.String)
    /**
    Creates a new instance of the  class.

    - Parameter boundary: The boundary string for the multipart form data content.
    */
    public init(boundary : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_MultipartFormDataContent_ctor_0__1__String(&__thrown, boundary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Net.Http.HttpContent)
// docid: M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent)
    /**
    Add HTTP content to a collection of  objects that get serialized to multipart/form-data MIME type.

    - Parameter content: The HTTP content to add to the collection.
    */
    open override func Add(content : dotnet.System.Net.Http.HttpContent) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_MultipartFormDataContent_void__Add_0__1__HttpContent(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Net.Http.HttpContent, System.String)
// docid: M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String)
    /**
    Add HTTP content to a collection of  objects that get serialized to multipart/form-data MIME type.

    - Parameter content: The HTTP content to add to the collection.
    - Parameter name: The name for the HTTP content to add.
    */
    open func Add(content : dotnet.System.Net.Http.HttpContent, name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_MultipartFormDataContent_void__Add_0__2__HttpContent_String(&__thrown, self.get_handle(), content.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Net.Http.HttpContent, System.String, System.String)
// docid: M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String,System.String)
    /**
    Add HTTP content to a collection of  objects that get serialized to multipart/form-data MIME type.

    - Parameter content: The HTTP content to add to the collection.
    - Parameter name: The name for the HTTP content to add.
    - Parameter fileName: The file name for the HTTP content to add to the collection.
    */
    open func Add(content : dotnet.System.Net.Http.HttpContent, name : dotnet.System.String, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_MultipartFormDataContent_void__Add_0__3__HttpContent_String_String(&__thrown, self.get_handle(), content.get_handle(), name.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MultipartFormDataContent


// type: System.Net.Http.ReadOnlyMemoryContent
    /**
    Provides HTTP content based on a .

    */
public final class ReadOnlyMemoryContent
    :
    dotnet.System.Net.Http.HttpContent
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_ReadOnlyMemoryContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ReadOnlyMemory<System.Byte>)
// docid: M:System.Net.Http.ReadOnlyMemoryContent.#ctor(System.ReadOnlyMemory{System.Byte})
    /**
    Initializes a new instance of the  class.

    - Parameter content: The content used to initialize the .
    */
    public init(content : dotnet.System.ReadOnlyMemory_1<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_ReadOnlyMemoryContent_ctor_0__1__System_ReadOnlyMemory_u8_(&__thrown, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ReadOnlyMemoryContent


// type: System.Net.Http.SocketsHttpConnectionContext
    /**
    Represents the context passed to the  for a  instance. .

    */
public final class SocketsHttpConnectionContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_SocketsHttpConnectionContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.DnsEndPoint get_DnsEndPoint()
// docid: M:System.Net.Http.SocketsHttpConnectionContext.get_DnsEndPoint
    public func get_DnsEndPoint() throws -> dotnet.System.Net.DnsEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpConnectionContext_DnsEndPoint__get_DnsEndPoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.DnsEndPoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpRequestMessage get_InitialRequestMessage()
// docid: M:System.Net.Http.SocketsHttpConnectionContext.get_InitialRequestMessage
    public func get_InitialRequestMessage() throws -> dotnet.System.Net.Http.HttpRequestMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpConnectionContext_HttpRequestMessage__get_InitialRequestMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpRequestMessage(hndl : __return);
        }
    }
    /**
    Gets the DNS endpoint to be used by the  to establish the connection.

    */
    public var DnsEndPoint : dotnet.System.Net.DnsEndPoint {
        get {
            return try! get_DnsEndPoint();
        }
    }
    /**
    Gets the initial HTTP request message that is causing the connection to be created.

    */
    public var InitialRequestMessage : dotnet.System.Net.Http.HttpRequestMessage {
        get {
            return try! get_InitialRequestMessage();
        }
    }
} // SocketsHttpConnectionContext


// type: System.Net.Http.SocketsHttpHandler
    /**
    Provides the default message handler used by  in .NET Core 2.1 and later.

    */
public final class SocketsHttpHandler
    :
    dotnet.System.Net.Http.HttpMessageHandler
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_SocketsHttpHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.SocketsHttpHandler.#ctor
    /**
    Creates an instance of a  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_SocketsHttpHandler_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_InitialHttp2StreamWindowSize()
// docid: M:System.Net.Http.SocketsHttpHandler.get_InitialHttp2StreamWindowSize
    public func get_InitialHttp2StreamWindowSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_i32__get_InitialHttp2StreamWindowSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_InitialHttp2StreamWindowSize(System.Int32)
// docid: M:System.Net.Http.SocketsHttpHandler.set_InitialHttp2StreamWindowSize(System.Int32)
    public func set_InitialHttp2StreamWindowSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_InitialHttp2StreamWindowSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsSupported()
// docid: M:System.Net.Http.SocketsHttpHandler.get_IsSupported
    public class func get_IsSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_bool__get_IsSupported_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowAutoRedirect()
// docid: M:System.Net.Http.SocketsHttpHandler.get_AllowAutoRedirect
    public func get_AllowAutoRedirect() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_bool__get_AllowAutoRedirect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowAutoRedirect(bool)
// docid: M:System.Net.Http.SocketsHttpHandler.set_AllowAutoRedirect(System.Boolean)
    public func set_AllowAutoRedirect(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_AllowAutoRedirect_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.DecompressionMethods get_AutomaticDecompression()
// docid: M:System.Net.Http.SocketsHttpHandler.get_AutomaticDecompression
    public func get_AutomaticDecompression() throws -> dotnet.System.Net.DecompressionMethods {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_DecompressionMethods__get_AutomaticDecompression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.DecompressionMethods(val: __return);
        }
    }
    // [IsSpecialName] void set_AutomaticDecompression(System.Net.DecompressionMethods)
// docid: M:System.Net.Http.SocketsHttpHandler.set_AutomaticDecompression(System.Net.DecompressionMethods)
    public func set_AutomaticDecompression(value : dotnet.System.Net.DecompressionMethods) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_AutomaticDecompression_0__1__DecompressionMethods(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_ConnectTimeout()
// docid: M:System.Net.Http.SocketsHttpHandler.get_ConnectTimeout
    public func get_ConnectTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_ConnectTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_ConnectTimeout(System.TimeSpan)
    // [IsSpecialName] System.Net.CookieContainer get_CookieContainer()
// docid: M:System.Net.Http.SocketsHttpHandler.get_CookieContainer
    public func get_CookieContainer() throws -> dotnet.System.Net.CookieContainer {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_CookieContainer__get_CookieContainer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.CookieContainer(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieContainer(System.Net.CookieContainer)
// docid: M:System.Net.Http.SocketsHttpHandler.set_CookieContainer(System.Net.CookieContainer)
    public func set_CookieContainer(value : dotnet.System.Net.CookieContainer) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_CookieContainer_0__1__CookieContainer(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.Http.SocketsHttpHandler.get_Credentials
    public func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.Http.SocketsHttpHandler.set_Credentials(System.Net.ICredentials)
    public func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_DefaultProxyCredentials()
// docid: M:System.Net.Http.SocketsHttpHandler.get_DefaultProxyCredentials
    public func get_DefaultProxyCredentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_ICredentials__get_DefaultProxyCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultProxyCredentials(System.Net.ICredentials)
// docid: M:System.Net.Http.SocketsHttpHandler.set_DefaultProxyCredentials(System.Net.ICredentials)
    public func set_DefaultProxyCredentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_DefaultProxyCredentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_Expect100ContinueTimeout()
// docid: M:System.Net.Http.SocketsHttpHandler.get_Expect100ContinueTimeout
    public func get_Expect100ContinueTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_Expect100ContinueTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_Expect100ContinueTimeout(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_KeepAlivePingDelay()
// docid: M:System.Net.Http.SocketsHttpHandler.get_KeepAlivePingDelay
    public func get_KeepAlivePingDelay() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_KeepAlivePingDelay_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_KeepAlivePingDelay(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_KeepAlivePingTimeout()
// docid: M:System.Net.Http.SocketsHttpHandler.get_KeepAlivePingTimeout
    public func get_KeepAlivePingTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_KeepAlivePingTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_KeepAlivePingTimeout(System.TimeSpan)
    // [IsSpecialName] System.Net.Http.HttpKeepAlivePingPolicy get_KeepAlivePingPolicy()
// docid: M:System.Net.Http.SocketsHttpHandler.get_KeepAlivePingPolicy
    public func get_KeepAlivePingPolicy() throws -> dotnet.System.Net.Http.HttpKeepAlivePingPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_HttpKeepAlivePingPolicy__get_KeepAlivePingPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpKeepAlivePingPolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_KeepAlivePingPolicy(System.Net.Http.HttpKeepAlivePingPolicy)
// docid: M:System.Net.Http.SocketsHttpHandler.set_KeepAlivePingPolicy(System.Net.Http.HttpKeepAlivePingPolicy)
    public func set_KeepAlivePingPolicy(value : dotnet.System.Net.Http.HttpKeepAlivePingPolicy) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_KeepAlivePingPolicy_0__1__HttpKeepAlivePingPolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxAutomaticRedirections()
// docid: M:System.Net.Http.SocketsHttpHandler.get_MaxAutomaticRedirections
    public func get_MaxAutomaticRedirections() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_i32__get_MaxAutomaticRedirections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxAutomaticRedirections(System.Int32)
// docid: M:System.Net.Http.SocketsHttpHandler.set_MaxAutomaticRedirections(System.Int32)
    public func set_MaxAutomaticRedirections(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_MaxAutomaticRedirections_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxConnectionsPerServer()
// docid: M:System.Net.Http.SocketsHttpHandler.get_MaxConnectionsPerServer
    public func get_MaxConnectionsPerServer() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_i32__get_MaxConnectionsPerServer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxConnectionsPerServer(System.Int32)
// docid: M:System.Net.Http.SocketsHttpHandler.set_MaxConnectionsPerServer(System.Int32)
    public func set_MaxConnectionsPerServer(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_MaxConnectionsPerServer_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxResponseDrainSize()
// docid: M:System.Net.Http.SocketsHttpHandler.get_MaxResponseDrainSize
    public func get_MaxResponseDrainSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_i32__get_MaxResponseDrainSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxResponseDrainSize(System.Int32)
// docid: M:System.Net.Http.SocketsHttpHandler.set_MaxResponseDrainSize(System.Int32)
    public func set_MaxResponseDrainSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_MaxResponseDrainSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxResponseHeadersLength()
// docid: M:System.Net.Http.SocketsHttpHandler.get_MaxResponseHeadersLength
    public func get_MaxResponseHeadersLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_i32__get_MaxResponseHeadersLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxResponseHeadersLength(System.Int32)
// docid: M:System.Net.Http.SocketsHttpHandler.set_MaxResponseHeadersLength(System.Int32)
    public func set_MaxResponseHeadersLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_MaxResponseHeadersLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_PooledConnectionIdleTimeout()
// docid: M:System.Net.Http.SocketsHttpHandler.get_PooledConnectionIdleTimeout
    public func get_PooledConnectionIdleTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_PooledConnectionIdleTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_PooledConnectionIdleTimeout(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_PooledConnectionLifetime()
// docid: M:System.Net.Http.SocketsHttpHandler.get_PooledConnectionLifetime
    public func get_PooledConnectionLifetime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_PooledConnectionLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_PooledConnectionLifetime(System.TimeSpan)
    // [IsSpecialName] bool get_PreAuthenticate()
// docid: M:System.Net.Http.SocketsHttpHandler.get_PreAuthenticate
    public func get_PreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_bool__get_PreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreAuthenticate(bool)
// docid: M:System.Net.Http.SocketsHttpHandler.set_PreAuthenticate(System.Boolean)
    public func set_PreAuthenticate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_PreAuthenticate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:System.Net.Http.SocketsHttpHandler.get_Properties
    public func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.Http.SocketsHttpHandler.get_Proxy
    public func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.Http.SocketsHttpHandler.set_Proxy(System.Net.IWebProxy)
    public func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.HeaderEncodingSelector<System.Net.Http.HttpRequestMessage> get_RequestHeaderEncodingSelector()
// docid: M:System.Net.Http.SocketsHttpHandler.get_RequestHeaderEncodingSelector
    public func get_RequestHeaderEncodingSelector() throws -> Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_System_Net_Http_HeaderEncodingSelector_System_Net_Http_HttpRequestMessage___get_RequestHeaderEncodingSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HeaderEncodingSelector_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RequestHeaderEncodingSelector(System.Net.Http.HeaderEncodingSelector<System.Net.Http.HttpRequestMessage>)
// docid: M:System.Net.Http.SocketsHttpHandler.set_RequestHeaderEncodingSelector(System.Net.Http.HeaderEncodingSelector{System.Net.Http.HttpRequestMessage})
    public func set_RequestHeaderEncodingSelector(value : Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_RequestHeaderEncodingSelector_0__1__System_Net_Http_HeaderEncodingSelector_System_Net_Http_HttpRequestMessage_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_RequestHeaderEncodingSelector(value : @escaping (dotnet.System.String, Optional<dotnet.System.Net.Http.HttpRequestMessage>) throws -> dotnet.System.Text.Encoding) throws {
        let del_value = try dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>(value);
        return try set_RequestHeaderEncodingSelector(value: del_value);
    }
    // [IsSpecialName] System.TimeSpan get_ResponseDrainTimeout()
// docid: M:System.Net.Http.SocketsHttpHandler.get_ResponseDrainTimeout
    public func get_ResponseDrainTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_TimeSpan__get_ResponseDrainTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_ResponseDrainTimeout(System.TimeSpan)
    // [IsSpecialName] System.Net.Http.HeaderEncodingSelector<System.Net.Http.HttpRequestMessage> get_ResponseHeaderEncodingSelector()
// docid: M:System.Net.Http.SocketsHttpHandler.get_ResponseHeaderEncodingSelector
    public func get_ResponseHeaderEncodingSelector() throws -> Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_System_Net_Http_HeaderEncodingSelector_System_Net_Http_HttpRequestMessage___get_ResponseHeaderEncodingSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HeaderEncodingSelector_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ResponseHeaderEncodingSelector(System.Net.Http.HeaderEncodingSelector<System.Net.Http.HttpRequestMessage>)
// docid: M:System.Net.Http.SocketsHttpHandler.set_ResponseHeaderEncodingSelector(System.Net.Http.HeaderEncodingSelector{System.Net.Http.HttpRequestMessage})
    public func set_ResponseHeaderEncodingSelector(value : Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_ResponseHeaderEncodingSelector_0__1__System_Net_Http_HeaderEncodingSelector_System_Net_Http_HttpRequestMessage_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ResponseHeaderEncodingSelector(value : @escaping (dotnet.System.String, Optional<dotnet.System.Net.Http.HttpRequestMessage>) throws -> dotnet.System.Text.Encoding) throws {
        let del_value = try dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>(value);
        return try set_ResponseHeaderEncodingSelector(value: del_value);
    }
    // [IsSpecialName] System.Net.Security.SslClientAuthenticationOptions get_SslOptions()
// docid: M:System.Net.Http.SocketsHttpHandler.get_SslOptions
    public func get_SslOptions() throws -> dotnet.System.Net.Security.SslClientAuthenticationOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_SslClientAuthenticationOptions__get_SslOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Security.SslClientAuthenticationOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SslOptions(System.Net.Security.SslClientAuthenticationOptions)
// docid: M:System.Net.Http.SocketsHttpHandler.set_SslOptions(System.Net.Security.SslClientAuthenticationOptions)
    public func set_SslOptions(value : dotnet.System.Net.Security.SslClientAuthenticationOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_SslOptions_0__1__SslClientAuthenticationOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseCookies()
// docid: M:System.Net.Http.SocketsHttpHandler.get_UseCookies
    public func get_UseCookies() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_bool__get_UseCookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseCookies(bool)
// docid: M:System.Net.Http.SocketsHttpHandler.set_UseCookies(System.Boolean)
    public func set_UseCookies(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_UseCookies_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseProxy()
// docid: M:System.Net.Http.SocketsHttpHandler.get_UseProxy
    public func get_UseProxy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_bool__get_UseProxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseProxy(bool)
// docid: M:System.Net.Http.SocketsHttpHandler.set_UseProxy(System.Boolean)
    public func set_UseProxy(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_UseProxy_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableMultipleHttp2Connections()
// docid: M:System.Net.Http.SocketsHttpHandler.get_EnableMultipleHttp2Connections
    public func get_EnableMultipleHttp2Connections() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_bool__get_EnableMultipleHttp2Connections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableMultipleHttp2Connections(bool)
// docid: M:System.Net.Http.SocketsHttpHandler.set_EnableMultipleHttp2Connections(System.Boolean)
    public func set_EnableMultipleHttp2Connections(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_EnableMultipleHttp2Connections_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask<System.IO.Stream>> get_ConnectCallback()
// docid: M:System.Net.Http.SocketsHttpHandler.get_ConnectCallback
    public func get_ConnectCallback() throws -> Optional<dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpConnectionContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_System_Func_System_Net_Http_SocketsHttpConnectionContext_System_Threading_CancellationToken_System_Threading_Tasks_System_Threading_Tasks_ValueTask_System_IO_Stream____get_ConnectCallback_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConnectCallback(System.Func<System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask<System.IO.Stream>>)
// docid: M:System.Net.Http.SocketsHttpHandler.set_ConnectCallback(System.Func{System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.IO.Stream}})
    public func set_ConnectCallback(value : Optional<dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpConnectionContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_ConnectCallback_0__1__System_Func_System_Net_Http_SocketsHttpConnectionContext_System_Threading_CancellationToken_System_Threading_Tasks_System_Threading_Tasks_ValueTask_System_IO_Stream__(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ConnectCallback(value : @escaping (Optional<dotnet.System.Net.Http.SocketsHttpConnectionContext>, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>) throws {
        let del_value = try dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpConnectionContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>(value);
        return try set_ConnectCallback(value: del_value);
    }
    // [IsSpecialName] System.Func<System.Net.Http.SocketsHttpPlaintextStreamFilterContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask<System.IO.Stream>> get_PlaintextStreamFilter()
// docid: M:System.Net.Http.SocketsHttpHandler.get_PlaintextStreamFilter
    public func get_PlaintextStreamFilter() throws -> Optional<dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpPlaintextStreamFilterContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_System_Func_System_Net_Http_SocketsHttpPlaintextStreamFilterContext_System_Threading_CancellationToken_System_Threading_Tasks_System_Threading_Tasks_ValueTask_System_IO_Stream____get_PlaintextStreamFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PlaintextStreamFilter(System.Func<System.Net.Http.SocketsHttpPlaintextStreamFilterContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask<System.IO.Stream>>)
// docid: M:System.Net.Http.SocketsHttpHandler.set_PlaintextStreamFilter(System.Func{System.Net.Http.SocketsHttpPlaintextStreamFilterContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.IO.Stream}})
    public func set_PlaintextStreamFilter(value : Optional<dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpPlaintextStreamFilterContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_PlaintextStreamFilter_0__1__System_Func_System_Net_Http_SocketsHttpPlaintextStreamFilterContext_System_Threading_CancellationToken_System_Threading_Tasks_System_Threading_Tasks_ValueTask_System_IO_Stream__(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_PlaintextStreamFilter(value : @escaping (Optional<dotnet.System.Net.Http.SocketsHttpPlaintextStreamFilterContext>, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>) throws {
        let del_value = try dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpPlaintextStreamFilterContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>(value);
        return try set_PlaintextStreamFilter(value: del_value);
    }
    // [IsSpecialName] System.Diagnostics.DistributedContextPropagator get_ActivityHeadersPropagator()
// docid: M:System.Net.Http.SocketsHttpHandler.get_ActivityHeadersPropagator
    public func get_ActivityHeadersPropagator() throws -> Optional<dotnet.System.Diagnostics.DistributedContextPropagator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpHandler_DistributedContextPropagator__get_ActivityHeadersPropagator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.DistributedContextPropagator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActivityHeadersPropagator(System.Diagnostics.DistributedContextPropagator)
// docid: M:System.Net.Http.SocketsHttpHandler.set_ActivityHeadersPropagator(System.Diagnostics.DistributedContextPropagator)
    public func set_ActivityHeadersPropagator(value : Optional<dotnet.System.Diagnostics.DistributedContextPropagator>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_SocketsHttpHandler_void__set_ActivityHeadersPropagator_0__1__DistributedContextPropagator(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var ActivityHeadersPropagator : Optional<dotnet.System.Diagnostics.DistributedContextPropagator> {
        get {
            return try! get_ActivityHeadersPropagator();
        }
        set(v) {
            return try! set_ActivityHeadersPropagator(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates whether the handler should follow redirection responses.

    */
    public var AllowAutoRedirect : Bool {
        get {
            return try! get_AllowAutoRedirect();
        }
        set(v) {
            return try! set_AllowAutoRedirect(value: v);
        }
    }
    /**
    Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.

    */
    public var AutomaticDecompression : dotnet.System.Net.DecompressionMethods {
        get {
            return try! get_AutomaticDecompression();
        }
        set(v) {
            return try! set_AutomaticDecompression(value: v);
        }
    }
    /**
    Gets or sets a custom callback used to open new connections.

    */
    public var ConnectCallback : Optional<dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpConnectionContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>> {
        get {
            return try! get_ConnectCallback();
        }
        set(v) {
            return try! set_ConnectCallback(value: v!);
        }
    }
    /**
    Gets or sets the timespan to wait before the connection establishing times out.

    */
    public var ConnectTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_ConnectTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_ConnectTimeout(System.TimeSpan)
    }
    /**
    Gets or sets the managed cookie container object.

    */
    public var CookieContainer : dotnet.System.Net.CookieContainer {
        get {
            return try! get_CookieContainer();
        }
        set(v) {
            return try! set_CookieContainer(value: v);
        }
    }
    /**
    Gets or sets authentication information used by this handler.

    */
    public var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    When the default (system) proxy is used, gets or sets the credentials used to submit to the default proxy server for authentication.

    */
    public var DefaultProxyCredentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_DefaultProxyCredentials();
        }
        set(v) {
            return try! set_DefaultProxyCredentials(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates whether additional HTTP/2 connections can be established to the same server when the maximum number of concurrent streams is reached on all existing connections.

    */
    public var EnableMultipleHttp2Connections : Bool {
        get {
            return try! get_EnableMultipleHttp2Connections();
        }
        set(v) {
            return try! set_EnableMultipleHttp2Connections(value: v);
        }
    }
    /**
    Gets or sets the time-out value for server HTTP 100 Continue response.

    */
    public var Expect100ContinueTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_Expect100ContinueTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_Expect100ContinueTimeout(System.TimeSpan)
    }
    public var InitialHttp2StreamWindowSize : Swift.Int32 {
        get {
            return try! get_InitialHttp2StreamWindowSize();
        }
        set(v) {
            return try! set_InitialHttp2StreamWindowSize(value: v);
        }
    }
    /**
    Gets a value that indicates whether the handler is supported on the current platform.

    */
    public static var IsSupported : Bool {
        get {
            return try! get_IsSupported();
        }
    }
    /**
    Gets or sets the keep alive ping delay.

    */
    public var KeepAlivePingDelay : dotnet.System.TimeSpan {
        get {
            return try! get_KeepAlivePingDelay();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_KeepAlivePingDelay(System.TimeSpan)
    }
    /**
    Gets or sets the keep alive ping behaviour.

    */
    public var KeepAlivePingPolicy : dotnet.System.Net.Http.HttpKeepAlivePingPolicy {
        get {
            return try! get_KeepAlivePingPolicy();
        }
        set(v) {
            return try! set_KeepAlivePingPolicy(value: v);
        }
    }
    /**
    Gets or sets the keep alive ping timeout.

    */
    public var KeepAlivePingTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_KeepAlivePingTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_KeepAlivePingTimeout(System.TimeSpan)
    }
    /**
    Gets or sets the maximum number of allowed HTTP redirects.

    */
    public var MaxAutomaticRedirections : Swift.Int32 {
        get {
            return try! get_MaxAutomaticRedirections();
        }
        set(v) {
            return try! set_MaxAutomaticRedirections(value: v);
        }
    }
    /**
    Gets or sets the maximum number of simultaneous TCP connections allowed to a single server.

    */
    public var MaxConnectionsPerServer : Swift.Int32 {
        get {
            return try! get_MaxConnectionsPerServer();
        }
        set(v) {
            return try! set_MaxConnectionsPerServer(value: v);
        }
    }
    /**
    Gets or sets the maximum amount of data that can be drained from responses in bytes.

    */
    public var MaxResponseDrainSize : Swift.Int32 {
        get {
            return try! get_MaxResponseDrainSize();
        }
        set(v) {
            return try! set_MaxResponseDrainSize(value: v);
        }
    }
    /**
    Gets or sets the maximum length, in kilobytes (1024 bytes), of the response headers.

    */
    public var MaxResponseHeadersLength : Swift.Int32 {
        get {
            return try! get_MaxResponseHeadersLength();
        }
        set(v) {
            return try! set_MaxResponseHeadersLength(value: v);
        }
    }
    /**
    Gets or sets a custom callback that provides access to the plaintext HTTP protocol stream.

    */
    public var PlaintextStreamFilter : Optional<dotnet.System.Func_3<dotnet.System.Net.Http.SocketsHttpPlaintextStreamFilterContext,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream>>> {
        get {
            return try! get_PlaintextStreamFilter();
        }
        set(v) {
            return try! set_PlaintextStreamFilter(value: v!);
        }
    }
    /**
    Gets or sets how long a connection can be idle in the pool to be considered reusable.

    */
    public var PooledConnectionIdleTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_PooledConnectionIdleTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_PooledConnectionIdleTimeout(System.TimeSpan)
    }
    /**
    Gets or sets how long a connection can be the pool to be considered reusable.

    */
    public var PooledConnectionLifetime : dotnet.System.TimeSpan {
        get {
            return try! get_PooledConnectionLifetime();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_PooledConnectionLifetime(System.TimeSpan)
    }
    /**
    Gets or sets a value that indicates whether the handler sends an Authorization header with the request.

    */
    public var PreAuthenticate : Bool {
        get {
            return try! get_PreAuthenticate();
        }
        set(v) {
            return try! set_PreAuthenticate(value: v);
        }
    }
    /**
    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    Gets or sets the custom proxy when the  property is .

    */
    public var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    Gets or sets a callback that decodes request headers values.

    */
    public var RequestHeaderEncodingSelector : Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>> {
        get {
            return try! get_RequestHeaderEncodingSelector();
        }
        set(v) {
            return try! set_RequestHeaderEncodingSelector(value: v!);
        }
    }
    /**
    Gets or sets the timespan to wait for data to be drained from responses.

    */
    public var ResponseDrainTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_ResponseDrainTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_ResponseDrainTimeout(System.TimeSpan)
    }
    /**
    Gets or sets a callback that decodes response headers values.

    */
    public var ResponseHeaderEncodingSelector : Optional<dotnet.System.Net.Http.HeaderEncodingSelector_1<dotnet.System.Net.Http.HttpRequestMessage>> {
        get {
            return try! get_ResponseHeaderEncodingSelector();
        }
        set(v) {
            return try! set_ResponseHeaderEncodingSelector(value: v!);
        }
    }
    /**
    Gets or sets the set of options used for client TLS authentication.

    */
    public var SslOptions : dotnet.System.Net.Security.SslClientAuthenticationOptions {
        get {
            return try! get_SslOptions();
        }
        set(v) {
            return try! set_SslOptions(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the handler should use cookies.

    */
    public var UseCookies : Bool {
        get {
            return try! get_UseCookies();
        }
        set(v) {
            return try! set_UseCookies(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the handler should use a proxy.

    */
    public var UseProxy : Bool {
        get {
            return try! get_UseProxy();
        }
        set(v) {
            return try! set_UseProxy(value: v);
        }
    }
} // SocketsHttpHandler


// type: System.Net.Http.SocketsHttpPlaintextStreamFilterContext
    /**
    Represents the context passed to the PlaintextStreamFilter for a SocketsHttpHandler instance.

    */
public final class SocketsHttpPlaintextStreamFilterContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_SocketsHttpPlaintextStreamFilterContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.IO.Stream get_PlaintextStream()
// docid: M:System.Net.Http.SocketsHttpPlaintextStreamFilterContext.get_PlaintextStream
    public func get_PlaintextStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpPlaintextStreamFilterContext_Stream__get_PlaintextStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.Version get_NegotiatedHttpVersion()
// docid: M:System.Net.Http.SocketsHttpPlaintextStreamFilterContext.get_NegotiatedHttpVersion
    public func get_NegotiatedHttpVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpPlaintextStreamFilterContext_Version__get_NegotiatedHttpVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.HttpRequestMessage get_InitialRequestMessage()
// docid: M:System.Net.Http.SocketsHttpPlaintextStreamFilterContext.get_InitialRequestMessage
    public func get_InitialRequestMessage() throws -> dotnet.System.Net.Http.HttpRequestMessage {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_SocketsHttpPlaintextStreamFilterContext_HttpRequestMessage__get_InitialRequestMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpRequestMessage(hndl : __return);
        }
    }
    /**
    Gets the initial HTTP request message that is causing the stream to be used.

    */
    public var InitialRequestMessage : dotnet.System.Net.Http.HttpRequestMessage {
        get {
            return try! get_InitialRequestMessage();
        }
    }
    /**
    Gets the version of HTTP in use for this stream.

    */
    public var NegotiatedHttpVersion : dotnet.System.Version {
        get {
            return try! get_NegotiatedHttpVersion();
        }
    }
    /**
    Gets the plaintext stream that will be used for HTTP protocol requests and responses.

    */
    public var PlaintextStream : dotnet.System.IO.Stream {
        get {
            return try! get_PlaintextStream();
        }
    }
} // SocketsHttpPlaintextStreamFilterContext


// type: System.Net.Http.StreamContent
    /**
    Provides HTTP content based on a stream.

    */
open class StreamContent
    :
    dotnet.System.Net.Http.HttpContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_StreamContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Net.Http.StreamContent.#ctor(System.IO.Stream)
    /**
    Creates a new instance of the  class.

    - Parameter content: The content used to initialize the .
    */
    public init(content : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_StreamContent_ctor_0__1__Stream(&__thrown, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Int32)
// docid: M:System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
    /**
    Creates a new instance of the  class.

    - Parameter content: The content used to initialize the .
    - Parameter bufferSize: The size, in bytes, of the buffer for the .
    */
    public init(content : dotnet.System.IO.Stream, bufferSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_StreamContent_ctor_0__2__Stream_i32(&__thrown, content.get_handle(), bufferSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // StreamContent


// type: System.Net.Http.StringContent
    /**
    Provides HTTP content based on a string.

    */
open class StringContent
    :
    dotnet.System.Net.Http.ByteArrayContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_StringContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.StringContent.#ctor(System.String)
    /**
    Creates a new instance of the  class.

    - Parameter content: The content used to initialize the .
    */
    public init(content : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_StringContent_ctor_0__1__String(&__thrown, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Text.Encoding)
// docid: M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding)
    /**
    Creates a new instance of the  class.

    - Parameter content: The content used to initialize the .
    - Parameter encoding: The encoding to use for the content.
    */
    public init(content : dotnet.System.String, encoding : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_StringContent_ctor_0__2__String_Encoding(&__thrown, content.get_handle(), encoding?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Text.Encoding, System.String)
// docid: M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding,System.String)
    /**
    Creates a new instance of the  class.

    - Parameter content: The content used to initialize the .
    - Parameter encoding: The encoding to use for the content.
    - Parameter mediaType: The media type to use for the content.
    */
    public init(content : dotnet.System.String, encoding : Optional<dotnet.System.Text.Encoding>, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_StringContent_ctor_0__3__String_Encoding_String(&__thrown, content.get_handle(), encoding?.get_handle() ?? nil, mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // StringContent


}
// System.Net.Http.Headers
extension System.Net.Http.Headers {
// type: System.Net.Http.Headers.AuthenticationHeaderValue
    /**
    Represents authentication information in Authorization, ProxyAuthorization, WWW-Authenticate, and Proxy-Authenticate header values.

    */
open class AuthenticationHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_AuthenticationHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter scheme: The scheme to use for authorization.
    */
    public init(scheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_AuthenticationHeaderValue_ctor_0__1__String(&__thrown, scheme.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter scheme: The scheme to use for authorization.
    - Parameter parameter: The credentials containing the authentication information of the user agent for the resource being requested.
    */
    public init(scheme : dotnet.System.String, parameter : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_AuthenticationHeaderValue_ctor_0__2__String_String(&__thrown, scheme.get_handle(), parameter?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.GetHashCode
    /**
    Serves as a hash function for an   object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.AuthenticationHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents authentication header value information.
    - Returns: An  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.AuthenticationHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_AuthenticationHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.AuthenticationHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.AuthenticationHeaderValue)
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.TryParse(System.String,System.Net.Http.Headers.AuthenticationHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.AuthenticationHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_bool__TryParse_0__2__String_outAuthenticationHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.AuthenticationHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Parameter()
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.get_Parameter
    open func get_Parameter() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_String__get_Parameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Scheme()
// docid: M:System.Net.Http.Headers.AuthenticationHeaderValue.get_Scheme
    open func get_Scheme() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_AuthenticationHeaderValue_String__get_Scheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the credentials containing the authentication information of the user agent for the resource being requested.

    */
    open var Parameter : Optional<dotnet.System.String> {
        get {
            return try! get_Parameter();
        }
    }
    /**
    Gets the scheme to use for authorization.

    */
    open var Scheme : dotnet.System.String {
        get {
            return try! get_Scheme();
        }
    }
} // AuthenticationHeaderValue


// type: System.Net.Http.Headers.CacheControlHeaderValue
    /**
    Represents the value of the Cache-Control header.

    */
open class CacheControlHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_CacheControlHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_CacheControlHeaderValue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
    /**
    Serves as a hash function for a   object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.CacheControlHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents cache-control header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.CacheControlHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_CacheControlHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.CacheControlHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.CacheControlHeaderValue)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.CacheControlHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__TryParse_0__2__String_outCacheControlHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.CacheControlHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> get_Extensions()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_Extensions
    open func get_Extensions() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Collections_Generic_ICollection_System_Net_Http_Headers_NameValueHeaderValue___get_Extensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxAge()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_MaxAge
    open func get_MaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxAge(System.Nullable<System.TimeSpan>)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_MaxAge(System.Nullable{System.TimeSpan})
    open func set_MaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_MaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_MaxStale()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_MaxStale
    open func get_MaxStale() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_MaxStale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MaxStale(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_MaxStale(System.Boolean)
    open func set_MaxStale(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_MaxStale_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxStaleLimit()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_MaxStaleLimit
    open func get_MaxStaleLimit() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_MaxStaleLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxStaleLimit(System.Nullable<System.TimeSpan>)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_MaxStaleLimit(System.Nullable{System.TimeSpan})
    open func set_MaxStaleLimit(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_MaxStaleLimit_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MinFresh()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_MinFresh
    open func get_MinFresh() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_MinFresh_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MinFresh(System.Nullable<System.TimeSpan>)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_MinFresh(System.Nullable{System.TimeSpan})
    open func set_MinFresh(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_MinFresh_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_MustRevalidate()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_MustRevalidate
    open func get_MustRevalidate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_MustRevalidate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MustRevalidate(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_MustRevalidate(System.Boolean)
    open func set_MustRevalidate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_MustRevalidate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_NoCache()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_NoCache
    open func get_NoCache() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_NoCache_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoCache(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_NoCache(System.Boolean)
    open func set_NoCache(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_NoCache_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_NoCacheHeaders()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_NoCacheHeaders
    open func get_NoCacheHeaders() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Collections_Generic_ICollection_string___get_NoCacheHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_NoStore()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_NoStore
    open func get_NoStore() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_NoStore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoStore(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_NoStore(System.Boolean)
    open func set_NoStore(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_NoStore_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_NoTransform()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_NoTransform
    open func get_NoTransform() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_NoTransform_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoTransform(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_NoTransform(System.Boolean)
    open func set_NoTransform(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_NoTransform_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_OnlyIfCached()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_OnlyIfCached
    open func get_OnlyIfCached() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_OnlyIfCached_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_OnlyIfCached(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_OnlyIfCached(System.Boolean)
    open func set_OnlyIfCached(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_OnlyIfCached_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Private()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_Private
    open func get_Private() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_Private_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Private(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_Private(System.Boolean)
    open func set_Private(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_Private_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_PrivateHeaders()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_PrivateHeaders
    open func get_PrivateHeaders() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Collections_Generic_ICollection_string___get_PrivateHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ProxyRevalidate()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_ProxyRevalidate
    open func get_ProxyRevalidate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_ProxyRevalidate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ProxyRevalidate(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_ProxyRevalidate(System.Boolean)
    open func set_ProxyRevalidate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_ProxyRevalidate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Public()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_Public
    open func get_Public() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_bool__get_Public_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Public(bool)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_Public(System.Boolean)
    open func set_Public(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_Public_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_SharedMaxAge()
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.get_SharedMaxAge
    open func get_SharedMaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_SharedMaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_SharedMaxAge(System.Nullable<System.TimeSpan>)
// docid: M:System.Net.Http.Headers.CacheControlHeaderValue.set_SharedMaxAge(System.Nullable{System.TimeSpan})
    open func set_SharedMaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_CacheControlHeaderValue_void__set_SharedMaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Cache-extension tokens, each with an optional assigned value.

    */
    open var Extensions : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Extensions();
        }
    }
    /**
    The maximum age, specified in seconds, that the HTTP client is willing to accept a response.

    */
    open var MaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxAge();
        }
        set(v) {
            return try! set_MaxAge(value: v!);
        }
    }
    /**
    Whether an HTTP client is willing to accept a response that has exceeded its expiration time.

    */
    open var MaxStale : Bool {
        get {
            return try! get_MaxStale();
        }
        set(v) {
            return try! set_MaxStale(value: v);
        }
    }
    /**
    The maximum time, in seconds, an HTTP client is willing to accept a response that has exceeded its expiration time.

    */
    open var MaxStaleLimit : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxStaleLimit();
        }
        set(v) {
            return try! set_MaxStaleLimit(value: v!);
        }
    }
    /**
    The freshness lifetime, in seconds, that an HTTP client is willing to accept a response.

    */
    open var MinFresh : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MinFresh();
        }
        set(v) {
            return try! set_MinFresh(value: v!);
        }
    }
    /**
    Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.

    */
    open var MustRevalidate : Bool {
        get {
            return try! get_MustRevalidate();
        }
        set(v) {
            return try! set_MustRevalidate(value: v);
        }
    }
    /**
    Whether an HTTP client is willing to accept a cached response.

    */
    open var NoCache : Bool {
        get {
            return try! get_NoCache();
        }
        set(v) {
            return try! set_NoCache(value: v);
        }
    }
    /**
    A collection of fieldnames in the "no-cache" directive in a cache-control header field on an HTTP response.

    */
    open var NoCacheHeaders : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_NoCacheHeaders();
        }
    }
    /**
    Whether a cache must not store any part of either the HTTP request message or any response.

    */
    open var NoStore : Bool {
        get {
            return try! get_NoStore();
        }
        set(v) {
            return try! set_NoStore(value: v);
        }
    }
    /**
    Whether a cache or proxy must not change any aspect of the entity-body.

    */
    open var NoTransform : Bool {
        get {
            return try! get_NoTransform();
        }
        set(v) {
            return try! set_NoTransform(value: v);
        }
    }
    /**
    Whether a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status.

    */
    open var OnlyIfCached : Bool {
        get {
            return try! get_OnlyIfCached();
        }
        set(v) {
            return try! set_OnlyIfCached(value: v);
        }
    }
    /**
    Whether all or part of the HTTP response message is intended for a single user and must not be cached by a shared cache.

    */
    open var Private : Bool {
        get {
            return try! get_Private();
        }
        set(v) {
            return try! set_Private(value: v);
        }
    }
    /**
    A collection fieldnames in the "private" directive in a cache-control header field on an HTTP response.

    */
    open var PrivateHeaders : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_PrivateHeaders();
        }
    }
    /**
    Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale for shared user agent caches.

    */
    open var ProxyRevalidate : Bool {
        get {
            return try! get_ProxyRevalidate();
        }
        set(v) {
            return try! set_ProxyRevalidate(value: v);
        }
    }
    /**
    Whether an HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.

    */
    open var Public : Bool {
        get {
            return try! get_Public();
        }
        set(v) {
            return try! set_Public(value: v);
        }
    }
    /**
    The shared maximum age, specified in seconds, in an HTTP response that overrides the "max-age" directive in a cache-control header or an Expires header for a shared cache.

    */
    open var SharedMaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_SharedMaxAge();
        }
        set(v) {
            return try! set_SharedMaxAge(value: v!);
        }
    }
} // CacheControlHeaderValue


// type: System.Net.Http.Headers.ContentDispositionHeaderValue
    /**
    Represents the value of the Content-Disposition header.

    */
open class ContentDispositionHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_ContentDispositionHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter dispositionType: A string that contains a .
    */
    public init(dispositionType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ContentDispositionHeaderValue_ctor_0__1__String(&__thrown, dispositionType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.GetHashCode
    /**
    Serves as a hash function for an   object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.ContentDispositionHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents content disposition header value information.
    - Returns: An  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_ContentDispositionHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentDispositionHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_bool__TryParse_0__2__String_outContentDispositionHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_CreationDate()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_CreationDate
    open func get_CreationDate() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_System_DateTimeOffset___get_CreationDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_CreationDate(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_CreationDate(System.Nullable{System.DateTimeOffset})
    open func set_CreationDate(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_CreationDate_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DispositionType()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_DispositionType
    open func get_DispositionType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_String__get_DispositionType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DispositionType(System.String)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_DispositionType(System.String)
    open func set_DispositionType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_DispositionType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_FileName
    open func get_FileName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileName(System.String)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_FileName(System.String)
    open func set_FileName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_FileName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FileNameStar()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_FileNameStar
    open func get_FileNameStar() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_String__get_FileNameStar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileNameStar(System.String)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_FileNameStar(System.String)
    open func set_FileNameStar(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_FileNameStar_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_ModificationDate()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_ModificationDate
    open func get_ModificationDate() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_System_DateTimeOffset___get_ModificationDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ModificationDate(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_ModificationDate(System.Nullable{System.DateTimeOffset})
    open func set_ModificationDate(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_ModificationDate_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> get_Parameters()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_System_Collections_Generic_ICollection_System_Net_Http_Headers_NameValueHeaderValue___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_ReadDate()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_ReadDate
    open func get_ReadDate() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_System_DateTimeOffset___get_ReadDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ReadDate(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_ReadDate(System.Nullable{System.DateTimeOffset})
    open func set_ReadDate(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_ReadDate_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_Size()
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.get_Size
    open func get_Size() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_i64___get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Size(System.Nullable<System.Int64>)
// docid: M:System.Net.Http.Headers.ContentDispositionHeaderValue.set_Size(System.Nullable{System.Int64})
    open func set_Size(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentDispositionHeaderValue_void__set_Size_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    The date at which   the file was created.

    */
    open var CreationDate : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_CreationDate();
        }
        set(v) {
            return try! set_CreationDate(value: v!);
        }
    }
    /**
    The disposition type for a content body part.

    */
    open var DispositionType : dotnet.System.String {
        get {
            return try! get_DispositionType();
        }
        set(v) {
            return try! set_DispositionType(value: v);
        }
    }
    /**
    A suggestion for how to construct a filename for   storing the message payload to be used if the entity is   detached and stored in a separate file.

    */
    open var FileName : Optional<dotnet.System.String> {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v!);
        }
    }
    /**
    A suggestion for how to construct filenames for   storing message payloads to be used if the entities are    detached and stored in a separate files.

    */
    open var FileNameStar : Optional<dotnet.System.String> {
        get {
            return try! get_FileNameStar();
        }
        set(v) {
            return try! set_FileNameStar(value: v!);
        }
    }
    /**
    The date at   which the file was last modified.

    */
    open var ModificationDate : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_ModificationDate();
        }
        set(v) {
            return try! set_ModificationDate(value: v!);
        }
    }
    /**
    The name for a content body part.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    A set of parameters included the Content-Disposition header.

    */
    open var Parameters : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    The date the file was last read.

    */
    open var ReadDate : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_ReadDate();
        }
        set(v) {
            return try! set_ReadDate(value: v!);
        }
    }
    /**
    The approximate size, in bytes, of the file.

    */
    open var Size : Optional<Swift.Int64> {
        get {
            return try! get_Size();
        }
        set(v) {
            return try! set_Size(value: v!);
        }
    }
} // ContentDispositionHeaderValue


// type: System.Net.Http.Headers.ContentRangeHeaderValue
    /**
    Represents the value of the Content-Range header.

    */
open class ContentRangeHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_ContentRangeHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int64)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64)
    /**
    Initializes a new instance of the  class.

    - Parameter length: The starting or ending point of the range, in bytes.
    */
    public init(length : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ContentRangeHeaderValue_ctor_0__1__i64(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64, System.Int64)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64)
    /**
    Initializes a new instance of the  class.

    - Parameter from: The position, in bytes, at which to start sending data.
    - Parameter to: The position, in bytes, at which to stop sending data.
    */
    public init(from : Swift.Int64, to : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ContentRangeHeaderValue_ctor_0__2__i64_i64(&__thrown, from, to);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64, System.Int64, System.Int64)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64,System.Int64)
    /**
    Initializes a new instance of the  class.

    - Parameter from: The position, in bytes, at which to start sending data.
    - Parameter to: The position, in bytes, at which to stop sending data.
    - Parameter length: The starting or ending point of the range, in bytes.
    */
    public init(from : Swift.Int64, to : Swift.Int64, length : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ContentRangeHeaderValue_ctor_0__3__i64_i64_i64(&__thrown, from, to, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified Object is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.ContentRangeHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents content range header value information.
    - Returns: An  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.ContentRangeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_ContentRangeHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.ContentRangeHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.ContentRangeHeaderValue)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentRangeHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.ContentRangeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_bool__TryParse_0__2__String_outContentRangeHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.ContentRangeHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_From()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.get_From
    open func get_From() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_System_Nullable_i64___get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] bool get_HasLength()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.get_HasLength
    open func get_HasLength() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_bool__get_HasLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasRange()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.get_HasRange
    open func get_HasRange() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_bool__get_HasRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_Length()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.get_Length
    open func get_Length() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_System_Nullable_i64___get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_To()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.get_To
    open func get_To() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_System_Nullable_i64___get_To_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_Unit()
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.get_Unit
    open func get_Unit() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ContentRangeHeaderValue_String__get_Unit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Unit(System.String)
// docid: M:System.Net.Http.Headers.ContentRangeHeaderValue.set_Unit(System.String)
    open func set_Unit(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_ContentRangeHeaderValue_void__set_Unit_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the position at which to start sending data.

    */
    open var From : Optional<Swift.Int64> {
        get {
            return try! get_From();
        }
    }
    /**
    Gets whether the Content-Range header has a length specified.

    */
    open var HasLength : Bool {
        get {
            return try! get_HasLength();
        }
    }
    /**
    Gets whether the Content-Range has a range specified.

    */
    open var HasRange : Bool {
        get {
            return try! get_HasRange();
        }
    }
    /**
    Gets the length of the full entity-body.

    */
    open var Length : Optional<Swift.Int64> {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets the position at which to stop sending data.

    */
    open var To : Optional<Swift.Int64> {
        get {
            return try! get_To();
        }
    }
    /**
    The range units used.

    */
    open var Unit : dotnet.System.String {
        get {
            return try! get_Unit();
        }
        set(v) {
            return try! set_Unit(value: v);
        }
    }
} // ContentRangeHeaderValue


// type: System.Net.Http.Headers.EntityTagHeaderValue
    /**
    Represents an entity-tag header value.

    */
open class EntityTagHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_EntityTagHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter tag: A string that contains an .
    */
    public init(tag : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_EntityTagHeaderValue_ctor_0__1__String(&__thrown, tag.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool)
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter tag: A string that contains an  .
    - Parameter isWeak: A value that indicates if this entity-tag header is a weak validator. If the entity-tag header is weak validator, then  should be set to . If the entity-tag header is a strong validator, then  should be set to .
    */
    public init(tag : dotnet.System.String, isWeak : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_EntityTagHeaderValue_ctor_0__2__String_bool(&__thrown, tag.get_handle(), Swift.Int32(isWeak ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.EntityTagHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents entity tag header value information.
    - Returns: An  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.EntityTagHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_EntityTagHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.EntityTagHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.EntityTagHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_bool__TryParse_0__2__String_outEntityTagHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.EntityTagHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.EntityTagHeaderValue get_Any()
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.get_Any
    open class func get_Any() throws -> dotnet.System.Net.Http.Headers.EntityTagHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_EntityTagHeaderValue__get_Any_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.EntityTagHeaderValue(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsWeak()
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.get_IsWeak
    open func get_IsWeak() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_bool__get_IsWeak_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Tag()
// docid: M:System.Net.Http.Headers.EntityTagHeaderValue.get_Tag
    open func get_Tag() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_EntityTagHeaderValue_String__get_Tag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the entity-tag header value.

    */
    public static var Any_ : dotnet.System.Net.Http.Headers.EntityTagHeaderValue {
        get {
            return try! get_Any();
        }
    }
    /**
    Gets whether the entity-tag is prefaced by a weakness indicator.

    */
    open var IsWeak : Bool {
        get {
            return try! get_IsWeak();
        }
    }
    /**
    Gets the opaque quoted string.

    */
    open var Tag : dotnet.System.String {
        get {
            return try! get_Tag();
        }
    }
} // EntityTagHeaderValue


// type: System.Net.Http.Headers.HeaderStringValues
// boxed value type
public final class HeaderStringValues
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HeaderStringValues_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public override init() {
        let h = System_Net_Http_Headers_HeaderStringValues_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Net.Http.Headers.HeaderStringValues.Enumerator GetEnumerator()
// docid: M:System.Net.Http.Headers.HeaderStringValues.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Net.Http.Headers.HeaderStringValues_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HeaderStringValues_HeaderStringValues_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HeaderStringValues_Enumerator(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.HeaderStringValues.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HeaderStringValues_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.Http.Headers.HeaderStringValues.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HeaderStringValues_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // HeaderStringValues


// type: System.Net.Http.Headers.HeaderStringValues+Enumerator
// boxed value type
public final class HeaderStringValues_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HeaderStringValues_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Current : dotnet.System.String {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Net_Http_Headers_HeaderStringValues_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Net.Http.Headers.HeaderStringValues.Enumerator.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HeaderStringValues_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Net.Http.Headers.HeaderStringValues.Enumerator.MoveNext
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HeaderStringValues_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Current()
// docid: M:System.Net.Http.Headers.HeaderStringValues.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HeaderStringValues_Enumerator_String__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // HeaderStringValues_Enumerator


// type: System.Net.Http.Headers.HttpContentHeaders
    /**
    Represents the collection of Content Headers as defined in RFC 2616.

    */
public final class HttpContentHeaders
    :
    dotnet.System.Net.Http.Headers.HttpHeaders
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpContentHeaders_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Allow()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_Allow
    public func get_Allow() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_System_Collections_Generic_ICollection_string___get_Allow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.ContentDispositionHeaderValue get_ContentDisposition()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentDisposition
    public func get_ContentDisposition() throws -> Optional<dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_ContentDispositionHeaderValue__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentDisposition(System.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_ContentDisposition(System.Net.Http.Headers.ContentDispositionHeaderValue)
    public func set_ContentDisposition(value : Optional<dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_ContentDisposition_0__1__ContentDispositionHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_ContentEncoding()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentEncoding
    public func get_ContentEncoding() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_System_Collections_Generic_ICollection_string___get_ContentEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_ContentLanguage()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentLanguage
    public func get_ContentLanguage() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_System_Collections_Generic_ICollection_string___get_ContentLanguage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentLength
    public func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_ContentLength(System.Nullable{System.Int64})
    public func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_ContentLocation()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentLocation
    public func get_ContentLocation() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_Uri__get_ContentLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentLocation(System.Uri)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_ContentLocation(System.Uri)
    public func set_ContentLocation(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_ContentLocation_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_ContentMD5()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentMD5
    public func get_ContentMD5() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_u8Array__get_ContentMD5_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentMD5(System.Byte[])
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_ContentMD5(System.Byte[])
    public func set_ContentMD5(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_ContentMD5_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.ContentRangeHeaderValue get_ContentRange()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentRange
    public func get_ContentRange() throws -> Optional<dotnet.System.Net.Http.Headers.ContentRangeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_ContentRangeHeaderValue__get_ContentRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.ContentRangeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRange(System.Net.Http.Headers.ContentRangeHeaderValue)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_ContentRange(System.Net.Http.Headers.ContentRangeHeaderValue)
    public func set_ContentRange(value : Optional<dotnet.System.Net.Http.Headers.ContentRangeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_ContentRange_0__1__ContentRangeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.MediaTypeHeaderValue get_ContentType()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_ContentType
    public func get_ContentType() throws -> Optional<dotnet.System.Net.Http.Headers.MediaTypeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_MediaTypeHeaderValue__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.MediaTypeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_ContentType(System.Net.Http.Headers.MediaTypeHeaderValue)
    public func set_ContentType(value : Optional<dotnet.System.Net.Http.Headers.MediaTypeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_ContentType_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Expires()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_Expires
    public func get_Expires() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_System_Nullable_System_DateTimeOffset___get_Expires_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Expires(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_Expires(System.Nullable{System.DateTimeOffset})
    public func set_Expires(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_Expires_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_LastModified()
// docid: M:System.Net.Http.Headers.HttpContentHeaders.get_LastModified
    public func get_LastModified() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpContentHeaders_System_Nullable_System_DateTimeOffset___get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_LastModified(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.HttpContentHeaders.set_LastModified(System.Nullable{System.DateTimeOffset})
    public func set_LastModified(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpContentHeaders_void__set_LastModified_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the value of the  content header on an HTTP response.

    */
    public var Allow : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Allow();
        }
    }
    /**
    Gets the value of the  content header on an HTTP response.

    */
    public var ContentDisposition : Optional<dotnet.System.Net.Http.Headers.ContentDispositionHeaderValue> {
        get {
            return try! get_ContentDisposition();
        }
        set(v) {
            return try! set_ContentDisposition(value: v!);
        }
    }
    /**
    Gets the value of the  content header on an HTTP response.

    */
    public var ContentEncoding : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_ContentEncoding();
        }
    }
    /**
    Gets the value of the  content header on an HTTP response.

    */
    public var ContentLanguage : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_ContentLanguage();
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var ContentLength : Optional<Swift.Int64> {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v!);
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var ContentLocation : Optional<dotnet.System.Uri> {
        get {
            return try! get_ContentLocation();
        }
        set(v) {
            return try! set_ContentLocation(value: v!);
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var ContentMD5 : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_ContentMD5();
        }
        set(v) {
            return try! set_ContentMD5(value: v!);
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var ContentRange : Optional<dotnet.System.Net.Http.Headers.ContentRangeHeaderValue> {
        get {
            return try! get_ContentRange();
        }
        set(v) {
            return try! set_ContentRange(value: v!);
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var ContentType : Optional<dotnet.System.Net.Http.Headers.MediaTypeHeaderValue> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var Expires : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Expires();
        }
        set(v) {
            return try! set_Expires(value: v!);
        }
    }
    /**
    Gets or sets the value of the  content header on an HTTP response.

    */
    public var LastModified : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_LastModified();
        }
        set(v) {
            return try! set_LastModified(value: v!);
        }
    }
} // HttpContentHeaders


// type: System.Net.Http.Headers.HttpHeaderValueCollection`1
    /**
    Represents a collection of header values.

    */
public final class HttpHeaderValueCollection_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpHeaderValueCollection_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(T)
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Add(`0)
    /**
    Adds an entry to the .

    - Parameter item: The item to add to the header collection.
    */
    public func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaderValueCollection_1_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Clear
    /**
    Removes all entries from the .

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaderValueCollection_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Contains(`0)
    /**
    Determines if the  contains an item.

    - Parameter item: The item to find to the header collection.
    - Returns: 
         if the entry is contained in the  instance; otherwise, 

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.CopyTo(System.Net.Http.Headers.T[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaderValueCollection_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator for the  instance.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // void ParseAdd(System.String)
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ParseAdd(System.String)
    /**
    Parses and adds an entry to the .

    - Parameter input: The entry to add.
    */
    public func ParseAdd(input : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaderValueCollection_1_void__ParseAdd_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(T)
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Remove(`0)
    /**
    Removes the specified item from the .

    - Parameter item: The item to remove.
    - Returns: 
         if the  was removed from the  instance; otherwise, 

    */
    public func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ToString
    /**
    Returns a string that represents the current  object. object.

    - Returns: A string that represents the current object.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParseAdd(System.String)
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.TryParseAdd(System.String)
    /**
    Determines whether the input could be parsed and added to the .

    - Parameter input: The entry to validate.
    - Returns: 
         if the  could be parsed and added to the  instance; otherwise, 

    */
    public func TryParseAdd(input : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_bool__TryParseAdd_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Net.Http.Headers.HttpHeaderValueCollection`1.get_IsReadOnly
    public func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaderValueCollection_1_bool__get_IsReadOnly_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the number of headers in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the  instance is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // HttpHeaderValueCollection_1


// type: System.Net.Http.Headers.HttpHeaders
    /**
    A collection of headers and their values as defined in RFC 2616.

    */
open class HttpHeaders
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpHeaders_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    Adds the specified header and its values into the  collection.

    - Parameter name: The header to add to the collection.
    - Parameter values: A list of header values to add to the collection.
    */
    open func Add(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaders_void__Add_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), name.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.String)
// docid: M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.String)
    /**
    Adds the specified header and its value into the  collection.

    - Parameter name: The header to add to the collection.
    - Parameter value: The content of the header.
    */
    open func Add(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaders_void__Add_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.Http.Headers.HttpHeaders.Clear
    /**
    Removes all headers from the  collection.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeaders_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Net.Http.Headers.HttpHeaders.Contains(System.String)
    /**
    Returns if  a specific header exists in the  collection.

    - Parameter name: The specific header.
    - Returns: 
         is the specified header exists in the collection; otherwise .

    */
    open func Contains(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_bool__Contains_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Collections.Generic.IEnumerable<System.String>>> GetEnumerator()
// docid: M:System.Net.Http.Headers.HttpHeaders.GetEnumerator
    /**
    Returns an enumerator that can iterate through the  instance.

    - Returns: An enumerator for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_System_Collections_Generic_System_Collections_Generic_IEnumerable_string_____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetValues(System.String)
// docid: M:System.Net.Http.Headers.HttpHeaders.GetValues(System.String)
    /**
    Returns all header values for a specified header stored in the  collection.

    - Parameter name: The specified header to return values for.
    - Returns: An array of header strings.

    */
    open func GetValues(name : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_System_Collections_Generic_IEnumerable_string___GetValues_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool Remove(System.String)
// docid: M:System.Net.Http.Headers.HttpHeaders.Remove(System.String)
    /**
    Removes the specified header from the  collection.

    - Parameter name: The name of the header to remove from the collection.
    - Returns: Returns .

    */
    open func Remove(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_bool__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.HttpHeaders.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryAddWithoutValidation(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    Returns a value that indicates whether the specified header and its values were added to the  collection without validating the provided information.

    - Parameter name: The header to add to the collection.
    - Parameter values: The values of the header.
    - Returns: 
         if the specified header  and  could be added to the collection; otherwise .

    */
    open func TryAddWithoutValidation(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_bool__TryAddWithoutValidation_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), name.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryAddWithoutValidation(System.String, System.String)
// docid: M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.String)
    /**
    Returns a value that indicates whether the specified header and its value were added to the  collection without validating the provided information.

    - Parameter name: The header to add to the collection.
    - Parameter value: The content of the header.
    - Returns: 
         if the specified header  and  could be added to the collection; otherwise .

    */
    open func TryAddWithoutValidation(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_bool__TryAddWithoutValidation_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValues(System.String, ref System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.Net.Http.Headers.HttpHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)
    /**
    Return if a specified header and specified values are stored in the  collection.

    - Parameter name: The specified header.
    - Parameter values: The specified header values.
    - Returns: 
         is the specified header  and  are stored in the collection; otherwise .

    */
    open func TryGetValues(name : dotnet.System.String, values : inout dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_values = values.get_handle();
        let __return = System_Net_Http_Headers_HttpHeaders_bool__TryGetValues_0__2__String_outSystem_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), name.get_handle(), &_tmp_out_values);
        let _tmp2_values = dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>(hndl : _tmp_out_values);
            values = _tmp2_values;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeadersNonValidated get_NonValidated()
// docid: M:System.Net.Http.Headers.HttpHeaders.get_NonValidated
    open func get_NonValidated() throws -> dotnet.System.Net.Http.Headers.HttpHeadersNonValidated {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeaders_HttpHeadersNonValidated__get_NonValidated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeadersNonValidated(hndl : __return);
        }
    }
    open var NonValidated : dotnet.System.Net.Http.Headers.HttpHeadersNonValidated {
        get {
            return try! get_NonValidated();
        }
    }
} // HttpHeaders


// type: System.Net.Http.Headers.HttpHeadersNonValidated
// boxed value type
public final class HttpHeadersNonValidated
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpHeadersNonValidated_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public override init() {
        let h = System_Net_Http_Headers_HttpHeadersNonValidated_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Contains(System.String)
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.Contains(System.String)
    public func Contains(headerName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_bool__Contains_0__1__String(&__thrown, self.get_handle(), headerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Net.Http.Headers.HttpHeadersNonValidated.Enumerator GetEnumerator()
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Net.Http.Headers.HttpHeadersNonValidated_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_HttpHeadersNonValidated_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeadersNonValidated_Enumerator(hndl : __return);
        }
    }
    // bool TryGetValues(System.String, ref System.Net.Http.Headers.HeaderStringValues)
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.TryGetValues(System.String,System.Net.Http.Headers.HeaderStringValues@)
    public func TryGetValues(headerName : dotnet.System.String, values : inout dotnet.System.Net.Http.Headers.HeaderStringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_values = values.get_handle();
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_bool__TryGetValues_0__2__String_outHeaderStringValues(&__thrown, self.get_handle(), headerName.get_handle(), &_tmp_out_values);
        let _tmp2_values = dotnet.System.Net.Http.Headers.HeaderStringValues(hndl: _tmp_out_values);
            values = _tmp2_values;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HeaderStringValues get_Item(System.String)
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(headerName : dotnet.System.String) throws -> dotnet.System.Net.Http.Headers.HeaderStringValues {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_HeaderStringValues__get_Item_0__1__String(&__thrown, self.get_handle(), headerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HeaderStringValues(hndl : __return);
        }
    }
} // HttpHeadersNonValidated


// type: System.Net.Http.Headers.HttpHeadersNonValidated+Enumerator
// boxed value type
public final class HttpHeadersNonValidated_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpHeadersNonValidated_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Net.Http.Headers.HeaderStringValues> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Net_Http_Headers_HttpHeadersNonValidated_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.Enumerator.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpHeadersNonValidated_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.Enumerator.MoveNext
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.Net.Http.Headers.HeaderStringValues> get_Current()
// docid: M:System.Net.Http.Headers.HttpHeadersNonValidated.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Net.Http.Headers.HeaderStringValues> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpHeadersNonValidated_Enumerator_System_Collections_Generic_KeyValuePair_string_System_Net_Http_Headers_HeaderStringValues___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // HttpHeadersNonValidated_Enumerator


// type: System.Net.Http.Headers.HttpRequestHeaders
    /**
    Represents the collection of Request Headers as defined in RFC 2616.

    */
public final class HttpRequestHeaders
    :
    dotnet.System.Net.Http.Headers.HttpHeaders
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpRequestHeaders_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.MediaTypeWithQualityHeaderValue> get_Accept()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Accept
    public func get_Accept() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_MediaTypeWithQualityHeaderValue___get_Accept_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue> get_AcceptCharset()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_AcceptCharset
    public func get_AcceptCharset() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_StringWithQualityHeaderValue___get_AcceptCharset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue> get_AcceptEncoding()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_AcceptEncoding
    public func get_AcceptEncoding() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_StringWithQualityHeaderValue___get_AcceptEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue> get_AcceptLanguage()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_AcceptLanguage
    public func get_AcceptLanguage() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_StringWithQualityHeaderValue___get_AcceptLanguage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.AuthenticationHeaderValue get_Authorization()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Authorization
    public func get_Authorization() throws -> Optional<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_AuthenticationHeaderValue__get_Authorization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.AuthenticationHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Authorization(System.Net.Http.Headers.AuthenticationHeaderValue)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_Authorization(System.Net.Http.Headers.AuthenticationHeaderValue)
    public func set_Authorization(value : Optional<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_Authorization_0__1__AuthenticationHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.CacheControlHeaderValue get_CacheControl()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_CacheControl
    public func get_CacheControl() throws -> Optional<dotnet.System.Net.Http.Headers.CacheControlHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_CacheControlHeaderValue__get_CacheControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.CacheControlHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CacheControl(System.Net.Http.Headers.CacheControlHeaderValue)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_CacheControl(System.Net.Http.Headers.CacheControlHeaderValue)
    public func set_CacheControl(value : Optional<dotnet.System.Net.Http.Headers.CacheControlHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_CacheControl_0__1__CacheControlHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.String> get_Connection()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Connection
    public func get_Connection() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_string___get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_ConnectionClose()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_ConnectionClose
    public func get_ConnectionClose() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_bool___get_ConnectionClose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_ConnectionClose(System.Nullable<bool>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_ConnectionClose(System.Nullable{System.Boolean})
    public func set_ConnectionClose(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_ConnectionClose_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Date
    public func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Date(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_Date(System.Nullable{System.DateTimeOffset})
    public func set_Date(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_Date_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueWithParametersHeaderValue> get_Expect()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Expect
    public func get_Expect() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.NameValueWithParametersHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_NameValueWithParametersHeaderValue___get_Expect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_ExpectContinue()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_ExpectContinue
    public func get_ExpectContinue() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_bool___get_ExpectContinue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_ExpectContinue(System.Nullable<bool>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_ExpectContinue(System.Nullable{System.Boolean})
    public func set_ExpectContinue(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_ExpectContinue_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_From()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_From
    public func get_From() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_String__get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_From(System.String)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_From(System.String)
    public func set_From(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_From_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Host
    public func get_Host() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_Host(System.String)
    public func set_Host(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_Host_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.EntityTagHeaderValue> get_IfMatch()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_IfMatch
    public func get_IfMatch() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_EntityTagHeaderValue___get_IfMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_IfModifiedSince()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_IfModifiedSince
    public func get_IfModifiedSince() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_System_DateTimeOffset___get_IfModifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_IfModifiedSince(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_IfModifiedSince(System.Nullable{System.DateTimeOffset})
    public func set_IfModifiedSince(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_IfModifiedSince_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.EntityTagHeaderValue> get_IfNoneMatch()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_IfNoneMatch
    public func get_IfNoneMatch() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_EntityTagHeaderValue___get_IfNoneMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.RangeConditionHeaderValue get_IfRange()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_IfRange
    public func get_IfRange() throws -> Optional<dotnet.System.Net.Http.Headers.RangeConditionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_RangeConditionHeaderValue__get_IfRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.RangeConditionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_IfRange(System.Net.Http.Headers.RangeConditionHeaderValue)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_IfRange(System.Net.Http.Headers.RangeConditionHeaderValue)
    public func set_IfRange(value : Optional<dotnet.System.Net.Http.Headers.RangeConditionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_IfRange_0__1__RangeConditionHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_IfUnmodifiedSince()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_IfUnmodifiedSince
    public func get_IfUnmodifiedSince() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_System_DateTimeOffset___get_IfUnmodifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_IfUnmodifiedSince(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_IfUnmodifiedSince(System.Nullable{System.DateTimeOffset})
    public func set_IfUnmodifiedSince(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_IfUnmodifiedSince_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_MaxForwards()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_MaxForwards
    public func get_MaxForwards() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_i32___get_MaxForwards_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaxForwards(System.Nullable<System.Int32>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_MaxForwards(System.Nullable{System.Int32})
    public func set_MaxForwards(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_MaxForwards_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueHeaderValue> get_Pragma()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Pragma
    public func get_Pragma() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_NameValueHeaderValue___get_Pragma_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.AuthenticationHeaderValue get_ProxyAuthorization()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_ProxyAuthorization
    public func get_ProxyAuthorization() throws -> Optional<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_AuthenticationHeaderValue__get_ProxyAuthorization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.AuthenticationHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ProxyAuthorization(System.Net.Http.Headers.AuthenticationHeaderValue)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_ProxyAuthorization(System.Net.Http.Headers.AuthenticationHeaderValue)
    public func set_ProxyAuthorization(value : Optional<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_ProxyAuthorization_0__1__AuthenticationHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.RangeHeaderValue get_Range()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Range
    public func get_Range() throws -> Optional<dotnet.System.Net.Http.Headers.RangeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_RangeHeaderValue__get_Range_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.RangeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Range(System.Net.Http.Headers.RangeHeaderValue)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_Range(System.Net.Http.Headers.RangeHeaderValue)
    public func set_Range(value : Optional<dotnet.System.Net.Http.Headers.RangeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_Range_0__1__RangeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_Referrer()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Referrer
    public func get_Referrer() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_Uri__get_Referrer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Referrer(System.Uri)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_Referrer(System.Uri)
    public func set_Referrer(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_Referrer_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingWithQualityHeaderValue> get_TE()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_TE
    public func get_TE() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.TransferCodingWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_TransferCodingWithQualityHeaderValue___get_TE_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.String> get_Trailer()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Trailer
    public func get_Trailer() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_string___get_Trailer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingHeaderValue> get_TransferEncoding()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_TransferEncoding
    public func get_TransferEncoding() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.TransferCodingHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_TransferCodingHeaderValue___get_TransferEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_TransferEncodingChunked()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_TransferEncodingChunked
    public func get_TransferEncodingChunked() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Nullable_bool___get_TransferEncodingChunked_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_TransferEncodingChunked(System.Nullable<bool>)
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.set_TransferEncodingChunked(System.Nullable{System.Boolean})
    public func set_TransferEncodingChunked(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpRequestHeaders_void__set_TransferEncodingChunked_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductHeaderValue> get_Upgrade()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Upgrade
    public func get_Upgrade() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_ProductHeaderValue___get_Upgrade_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductInfoHeaderValue> get_UserAgent()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_UserAgent
    public func get_UserAgent() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductInfoHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_ProductInfoHeaderValue___get_UserAgent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ViaHeaderValue> get_Via()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Via
    public func get_Via() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ViaHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_ViaHeaderValue___get_Via_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.WarningHeaderValue> get_Warning()
// docid: M:System.Net.Http.Headers.HttpRequestHeaders.get_Warning
    public func get_Warning() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.WarningHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpRequestHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_WarningHeaderValue___get_Warning_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Accept : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue> {
        get {
            return try! get_Accept();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var AcceptCharset : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue> {
        get {
            return try! get_AcceptCharset();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var AcceptEncoding : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue> {
        get {
            return try! get_AcceptEncoding();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var AcceptLanguage : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue> {
        get {
            return try! get_AcceptLanguage();
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var Authorization : Optional<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        get {
            return try! get_Authorization();
        }
        set(v) {
            return try! set_Authorization(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var CacheControl : Optional<dotnet.System.Net.Http.Headers.CacheControlHeaderValue> {
        get {
            return try! get_CacheControl();
        }
        set(v) {
            return try! set_CacheControl(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Connection : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        get {
            return try! get_Connection();
        }
    }
    /**
    Gets or sets a value that indicates if the  header for an HTTP request contains Close.

    */
    public var ConnectionClose : Optional<Bool> {
        get {
            return try! get_ConnectionClose();
        }
        set(v) {
            return try! set_ConnectionClose(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
        set(v) {
            return try! set_Date(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Expect : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.NameValueWithParametersHeaderValue> {
        get {
            return try! get_Expect();
        }
    }
    /**
    Gets or sets a value that indicates if the  header for an HTTP request contains Continue.

    */
    public var ExpectContinue : Optional<Bool> {
        get {
            return try! get_ExpectContinue();
        }
        set(v) {
            return try! set_ExpectContinue(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var From : Optional<dotnet.System.String> {
        get {
            return try! get_From();
        }
        set(v) {
            return try! set_From(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var Host : Optional<dotnet.System.String> {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var IfMatch : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_IfMatch();
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var IfModifiedSince : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_IfModifiedSince();
        }
        set(v) {
            return try! set_IfModifiedSince(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var IfNoneMatch : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_IfNoneMatch();
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var IfRange : Optional<dotnet.System.Net.Http.Headers.RangeConditionHeaderValue> {
        get {
            return try! get_IfRange();
        }
        set(v) {
            return try! set_IfRange(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var IfUnmodifiedSince : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_IfUnmodifiedSince();
        }
        set(v) {
            return try! set_IfUnmodifiedSince(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var MaxForwards : Optional<Swift.Int32> {
        get {
            return try! get_MaxForwards();
        }
        set(v) {
            return try! set_MaxForwards(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Pragma : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Pragma();
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var ProxyAuthorization : Optional<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        get {
            return try! get_ProxyAuthorization();
        }
        set(v) {
            return try! set_ProxyAuthorization(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var Range : Optional<dotnet.System.Net.Http.Headers.RangeHeaderValue> {
        get {
            return try! get_Range();
        }
        set(v) {
            return try! set_Range(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP request.

    */
    public var Referrer : Optional<dotnet.System.Uri> {
        get {
            return try! get_Referrer();
        }
        set(v) {
            return try! set_Referrer(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var TE : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.TransferCodingWithQualityHeaderValue> {
        get {
            return try! get_TE();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Trailer : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        get {
            return try! get_Trailer();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var TransferEncoding : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.TransferCodingHeaderValue> {
        get {
            return try! get_TransferEncoding();
        }
    }
    /**
    Gets or sets a value that indicates if the  header for an HTTP request contains chunked.

    */
    public var TransferEncodingChunked : Optional<Bool> {
        get {
            return try! get_TransferEncodingChunked();
        }
        set(v) {
            return try! set_TransferEncodingChunked(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Upgrade : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductHeaderValue> {
        get {
            return try! get_Upgrade();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var UserAgent : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductInfoHeaderValue> {
        get {
            return try! get_UserAgent();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Via : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ViaHeaderValue> {
        get {
            return try! get_Via();
        }
    }
    /**
    Gets the value of the  header for an HTTP request.

    */
    public var Warning : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.WarningHeaderValue> {
        get {
            return try! get_Warning();
        }
    }
} // HttpRequestHeaders


// type: System.Net.Http.Headers.HttpResponseHeaders
    /**
    Represents the collection of Response Headers as defined in RFC 2616.

    */
public final class HttpResponseHeaders
    :
    dotnet.System.Net.Http.Headers.HttpHeaders
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_HttpResponseHeaders_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.String> get_AcceptRanges()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_AcceptRanges
    public func get_AcceptRanges() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_string___get_AcceptRanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_Age()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Age
    public func get_Age() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Nullable_System_TimeSpan___get_Age_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Age(System.Nullable<System.TimeSpan>)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_Age(System.Nullable{System.TimeSpan})
    public func set_Age(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_Age_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.CacheControlHeaderValue get_CacheControl()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_CacheControl
    public func get_CacheControl() throws -> Optional<dotnet.System.Net.Http.Headers.CacheControlHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_CacheControlHeaderValue__get_CacheControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.CacheControlHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CacheControl(System.Net.Http.Headers.CacheControlHeaderValue)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_CacheControl(System.Net.Http.Headers.CacheControlHeaderValue)
    public func set_CacheControl(value : Optional<dotnet.System.Net.Http.Headers.CacheControlHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_CacheControl_0__1__CacheControlHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.String> get_Connection()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Connection
    public func get_Connection() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_string___get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_ConnectionClose()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_ConnectionClose
    public func get_ConnectionClose() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Nullable_bool___get_ConnectionClose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_ConnectionClose(System.Nullable<bool>)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_ConnectionClose(System.Nullable{System.Boolean})
    public func set_ConnectionClose(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_ConnectionClose_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Date
    public func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Date(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_Date(System.Nullable{System.DateTimeOffset})
    public func set_Date(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_Date_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.EntityTagHeaderValue get_ETag()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_ETag
    public func get_ETag() throws -> Optional<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_EntityTagHeaderValue__get_ETag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.EntityTagHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ETag(System.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_ETag(System.Net.Http.Headers.EntityTagHeaderValue)
    public func set_ETag(value : Optional<dotnet.System.Net.Http.Headers.EntityTagHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_ETag_0__1__EntityTagHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_Location()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Location
    public func get_Location() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_Uri__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Location(System.Uri)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_Location(System.Uri)
    public func set_Location(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_Location_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueHeaderValue> get_Pragma()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Pragma
    public func get_Pragma() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_NameValueHeaderValue___get_Pragma_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.AuthenticationHeaderValue> get_ProxyAuthenticate()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_ProxyAuthenticate
    public func get_ProxyAuthenticate() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_AuthenticationHeaderValue___get_ProxyAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.RetryConditionHeaderValue get_RetryAfter()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_RetryAfter
    public func get_RetryAfter() throws -> Optional<dotnet.System.Net.Http.Headers.RetryConditionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_RetryConditionHeaderValue__get_RetryAfter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.RetryConditionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RetryAfter(System.Net.Http.Headers.RetryConditionHeaderValue)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_RetryAfter(System.Net.Http.Headers.RetryConditionHeaderValue)
    public func set_RetryAfter(value : Optional<dotnet.System.Net.Http.Headers.RetryConditionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_RetryAfter_0__1__RetryConditionHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductInfoHeaderValue> get_Server()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Server
    public func get_Server() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductInfoHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_ProductInfoHeaderValue___get_Server_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.String> get_Trailer()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Trailer
    public func get_Trailer() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_string___get_Trailer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingHeaderValue> get_TransferEncoding()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_TransferEncoding
    public func get_TransferEncoding() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.TransferCodingHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_TransferCodingHeaderValue___get_TransferEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_TransferEncodingChunked()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_TransferEncodingChunked
    public func get_TransferEncodingChunked() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Nullable_bool___get_TransferEncodingChunked_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_TransferEncodingChunked(System.Nullable<bool>)
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.set_TransferEncodingChunked(System.Nullable{System.Boolean})
    public func set_TransferEncodingChunked(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_HttpResponseHeaders_void__set_TransferEncodingChunked_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductHeaderValue> get_Upgrade()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Upgrade
    public func get_Upgrade() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_ProductHeaderValue___get_Upgrade_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.String> get_Vary()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Vary
    public func get_Vary() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_string___get_Vary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ViaHeaderValue> get_Via()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Via
    public func get_Via() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ViaHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_ViaHeaderValue___get_Via_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.WarningHeaderValue> get_Warning()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_Warning
    public func get_Warning() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.WarningHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_WarningHeaderValue___get_Warning_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.AuthenticationHeaderValue> get_WwwAuthenticate()
// docid: M:System.Net.Http.Headers.HttpResponseHeaders.get_WwwAuthenticate
    public func get_WwwAuthenticate() throws -> dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_HttpResponseHeaders_System_Net_Http_Headers_HttpHeaderValueCollection_System_Net_Http_Headers_AuthenticationHeaderValue___get_WwwAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1(hndl : __return);
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var AcceptRanges : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        get {
            return try! get_AcceptRanges();
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP response.

    */
    public var Age : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_Age();
        }
        set(v) {
            return try! set_Age(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP response.

    */
    public var CacheControl : Optional<dotnet.System.Net.Http.Headers.CacheControlHeaderValue> {
        get {
            return try! get_CacheControl();
        }
        set(v) {
            return try! set_CacheControl(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Connection : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        get {
            return try! get_Connection();
        }
    }
    /**
    Gets or sets a value that indicates if the  header for an HTTP response contains Close.

    */
    public var ConnectionClose : Optional<Bool> {
        get {
            return try! get_ConnectionClose();
        }
        set(v) {
            return try! set_ConnectionClose(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP response.

    */
    public var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
        set(v) {
            return try! set_Date(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP response.

    */
    public var ETag : Optional<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_ETag();
        }
        set(v) {
            return try! set_ETag(value: v!);
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP response.

    */
    public var Location : Optional<dotnet.System.Uri> {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Pragma : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Pragma();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var ProxyAuthenticate : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        get {
            return try! get_ProxyAuthenticate();
        }
    }
    /**
    Gets or sets the value of the  header for an HTTP response.

    */
    public var RetryAfter : Optional<dotnet.System.Net.Http.Headers.RetryConditionHeaderValue> {
        get {
            return try! get_RetryAfter();
        }
        set(v) {
            return try! set_RetryAfter(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Server : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductInfoHeaderValue> {
        get {
            return try! get_Server();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Trailer : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        get {
            return try! get_Trailer();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var TransferEncoding : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.TransferCodingHeaderValue> {
        get {
            return try! get_TransferEncoding();
        }
    }
    /**
    Gets or sets a value that indicates if the  header for an HTTP response contains chunked.

    */
    public var TransferEncodingChunked : Optional<Bool> {
        get {
            return try! get_TransferEncodingChunked();
        }
        set(v) {
            return try! set_TransferEncodingChunked(value: v!);
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Upgrade : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ProductHeaderValue> {
        get {
            return try! get_Upgrade();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Vary : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.String> {
        get {
            return try! get_Vary();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Via : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.ViaHeaderValue> {
        get {
            return try! get_Via();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var Warning : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.WarningHeaderValue> {
        get {
            return try! get_Warning();
        }
    }
    /**
    Gets the value of the  header for an HTTP response.

    */
    public var WwwAuthenticate : dotnet.System.Net.Http.Headers.HttpHeaderValueCollection_1<dotnet.System.Net.Http.Headers.AuthenticationHeaderValue> {
        get {
            return try! get_WwwAuthenticate();
        }
    }
} // HttpResponseHeaders


// type: System.Net.Http.Headers.MediaTypeHeaderValue
    /**
    Represents a media type used in a Content-Type header as defined in the RFC 2616.

    */
open class MediaTypeHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_MediaTypeHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter mediaType: The source represented as a string to initialize the new instance.
    */
    public init(mediaType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_MediaTypeHeaderValue_ctor_0__1__String(&__thrown, mediaType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.MediaTypeHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents media type header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.MediaTypeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_MediaTypeHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.MediaTypeHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.MediaTypeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_bool__TryParse_0__2__String_outMediaTypeHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.MediaTypeHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_CharSet()
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.get_CharSet
    open func get_CharSet() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_String__get_CharSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CharSet(System.String)
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.set_CharSet(System.String)
    open func set_CharSet(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_MediaTypeHeaderValue_void__set_CharSet_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MediaType()
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.get_MediaType
    open func get_MediaType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_String__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MediaType(System.String)
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.set_MediaType(System.String)
    open func set_MediaType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_MediaTypeHeaderValue_void__set_MediaType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> get_Parameters()
// docid: M:System.Net.Http.Headers.MediaTypeHeaderValue.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeHeaderValue_System_Collections_Generic_ICollection_System_Net_Http_Headers_NameValueHeaderValue___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    /**
    Gets or sets the character set.

    */
    open var CharSet : Optional<dotnet.System.String> {
        get {
            return try! get_CharSet();
        }
        set(v) {
            return try! set_CharSet(value: v!);
        }
    }
    /**
    Gets or sets the media-type header value.

    */
    open var MediaType : Optional<dotnet.System.String> {
        get {
            return try! get_MediaType();
        }
        set(v) {
            return try! set_MediaType(value: v!);
        }
    }
    /**
    Gets or sets the media-type header value parameters.

    */
    open var Parameters : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Parameters();
        }
    }
} // MediaTypeHeaderValue


// type: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue
    /**
    Represents a media type with an additional quality factor used in a Content-Type header.

    */
public final class MediaTypeWithQualityHeaderValue
    :
    dotnet.System.Net.Http.Headers.MediaTypeHeaderValue
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter mediaType: A  represented as string to initialize the new instance.
    */
    public override init(mediaType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_ctor_0__1__String(&__thrown, mediaType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Double)
// docid: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)
    /**
    Initializes a new instance of the  class.

    - Parameter mediaType: A  represented as string to initialize the new instance.
    - Parameter quality: The quality associated with this header value.
    */
    public init(mediaType : dotnet.System.String, quality : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_ctor_0__2__String_f64(&__thrown, mediaType.get_handle(), quality);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.Http.Headers.MediaTypeWithQualityHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents media type with quality header value information.
    - Returns: A  instance.

    */
    public class override func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_MediaTypeWithQualityHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.MediaTypeWithQualityHeaderValue)
// docid: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    public class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_bool__TryParse_0__2__String_outMediaTypeWithQualityHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> get_Quality()
// docid: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.get_Quality
    public func get_Quality() throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_System_Nullable_f64___get_Quality_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Quality(System.Nullable<System.Double>)
// docid: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.set_Quality(System.Nullable{System.Double})
    public func set_Quality(value : Optional<Swift.Double>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_MediaTypeWithQualityHeaderValue_void__set_Quality_0__1__System_Nullable_f64_(&__thrown, self.get_handle(), (value != nil) ? System_Double_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the quality value for the .

    */
    public var Quality : Optional<Swift.Double> {
        get {
            return try! get_Quality();
        }
        set(v) {
            return try! set_Quality(value: v!);
        }
    }
} // MediaTypeWithQualityHeaderValue


// type: System.Net.Http.Headers.NameValueHeaderValue
    /**
    Represents a name/value pair used in various headers as defined in RFC 2616.

    */
open class NameValueHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_NameValueHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The header name.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_NameValueHeaderValue_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    public init(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_NameValueHeaderValue_ctor_0__2__String_String(&__thrown, name.get_handle(), value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.NameValueHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents name value header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.NameValueHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueHeaderValue_NameValueHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.NameValueHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.NameValueHeaderValue)
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.NameValueHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_NameValueHeaderValue_bool__TryParse_0__2__String_outNameValueHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.NameValueHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueHeaderValue_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueHeaderValue_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Net.Http.Headers.NameValueHeaderValue.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_NameValueHeaderValue_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the header name.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the header value.

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // NameValueHeaderValue


// type: System.Net.Http.Headers.NameValueWithParametersHeaderValue
    /**
    Represents a name/value pair with parameters used in various headers as defined in RFC 2616.

    */
open class NameValueWithParametersHeaderValue
    :
    dotnet.System.Net.Http.Headers.NameValueHeaderValue
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_NameValueWithParametersHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The header name.
    */
    public override init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_NameValueWithParametersHeaderValue_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    public override init(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_NameValueWithParametersHeaderValue_ctor_0__2__String_String(&__thrown, name.get_handle(), value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueWithParametersHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueWithParametersHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.NameValueWithParametersHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents name value with parameter header value information.
    - Returns: A  instance.

    */
    open class override func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.NameValueWithParametersHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueWithParametersHeaderValue_NameValueWithParametersHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.NameValueWithParametersHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueWithParametersHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.NameValueWithParametersHeaderValue)
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueWithParametersHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.NameValueWithParametersHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_NameValueWithParametersHeaderValue_bool__TryParse_0__2__String_outNameValueWithParametersHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.NameValueWithParametersHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> get_Parameters()
// docid: M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_NameValueWithParametersHeaderValue_System_Collections_Generic_ICollection_System_Net_Http_Headers_NameValueHeaderValue___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    /**
    Gets the parameters from the  object.

    */
    open var Parameters : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Parameters();
        }
    }
} // NameValueWithParametersHeaderValue


// type: System.Net.Http.Headers.ProductHeaderValue
    /**
    Represents a product token value in a User-Agent header.

    */
open class ProductHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_ProductHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The product name.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ProductHeaderValue_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The product name value.
    - Parameter version: The product version value.
    */
    public init(name : dotnet.System.String, version : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ProductHeaderValue_ctor_0__2__String_String(&__thrown, name.get_handle(), version?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.ProductHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.ProductHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.ProductHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.ProductHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents product header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.ProductHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductHeaderValue_ProductHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.ProductHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.ProductHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.ProductHeaderValue)
// docid: M:System.Net.Http.Headers.ProductHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.ProductHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_ProductHeaderValue_bool__TryParse_0__2__String_outProductHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.ProductHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Net.Http.Headers.ProductHeaderValue.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductHeaderValue_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Net.Http.Headers.ProductHeaderValue.get_Version
    open func get_Version() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductHeaderValue_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the product token.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the version of the product token.

    */
    open var Version : Optional<dotnet.System.String> {
        get {
            return try! get_Version();
        }
    }
} // ProductHeaderValue


// type: System.Net.Http.Headers.ProductInfoHeaderValue
    /**
    Represents a value which can either be a product or a comment in a User-Agent header.

    */
open class ProductInfoHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_ProductInfoHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Net.Http.Headers.ProductHeaderValue)
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.Net.Http.Headers.ProductHeaderValue)
    /**
    Initializes a new instance of the  class.

    - Parameter product: A  object used to initialize the new instance.
    */
    public init(product : dotnet.System.Net.Http.Headers.ProductHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ProductInfoHeaderValue_ctor_0__1__ProductHeaderValue(&__thrown, product.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter comment: A comment value.
    */
    public init(comment : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ProductInfoHeaderValue_ctor_0__1__String(&__thrown, comment.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter productName: The product name value.
    - Parameter productVersion: The product version value.
    */
    public init(productName : dotnet.System.String, productVersion : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ProductInfoHeaderValue_ctor_0__2__String_String(&__thrown, productName.get_handle(), productVersion?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.ProductInfoHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents product info header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : dotnet.System.String) throws -> dotnet.System.Net.Http.Headers.ProductInfoHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_ProductInfoHeaderValue__Parse_0__1__String(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.ProductInfoHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.ProductInfoHeaderValue)
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductInfoHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : dotnet.System.String, parsedValue : inout dotnet.System.Net.Http.Headers.ProductInfoHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_bool__TryParse_0__2__String_outProductInfoHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.ProductInfoHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Comment()
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.get_Comment
    open func get_Comment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_String__get_Comment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.ProductHeaderValue get_Product()
// docid: M:System.Net.Http.Headers.ProductInfoHeaderValue.get_Product
    open func get_Product() throws -> Optional<dotnet.System.Net.Http.Headers.ProductHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ProductInfoHeaderValue_ProductHeaderValue__get_Product_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.ProductHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the comment from the  object.

    */
    open var Comment : Optional<dotnet.System.String> {
        get {
            return try! get_Comment();
        }
    }
    /**
    Gets the product from the  object.

    */
    open var Product : Optional<dotnet.System.Net.Http.Headers.ProductHeaderValue> {
        get {
            return try! get_Product();
        }
    }
} // ProductInfoHeaderValue


// type: System.Net.Http.Headers.RangeConditionHeaderValue
    /**
    Represents an If-Range header value which can either be a date/time or an entity-tag value.

    */
open class RangeConditionHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_RangeConditionHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.DateTimeOffset)
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.DateTimeOffset)
    /**
    Initializes a new instance of the  class.

    - Parameter date: A date value used to initialize the new instance.
    */
    public init(date : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RangeConditionHeaderValue_ctor_0__1__DateTimeOffset(&__thrown, date.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.Net.Http.Headers.EntityTagHeaderValue)
    /**
    Initializes a new instance of the  class.

    - Parameter entityTag: An  object used to initialize the new instance.
    */
    public init(entityTag : dotnet.System.Net.Http.Headers.EntityTagHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RangeConditionHeaderValue_ctor_0__1__EntityTagHeaderValue(&__thrown, entityTag.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter entityTag: An entity tag represented as a string used to initialize the new instance.
    */
    public init(entityTag : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RangeConditionHeaderValue_ctor_0__1__String(&__thrown, entityTag.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.RangeConditionHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents range condition header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.RangeConditionHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_RangeConditionHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.RangeConditionHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.RangeConditionHeaderValue)
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeConditionHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.RangeConditionHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_bool__TryParse_0__2__String_outRangeConditionHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.RangeConditionHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.get_Date
    open func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Net.Http.Headers.EntityTagHeaderValue get_EntityTag()
// docid: M:System.Net.Http.Headers.RangeConditionHeaderValue.get_EntityTag
    open func get_EntityTag() throws -> Optional<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeConditionHeaderValue_EntityTagHeaderValue__get_EntityTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.Headers.EntityTagHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the date from the  object.

    */
    open var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
    }
    /**
    Gets the entity tag from the  object.

    */
    open var EntityTag : Optional<dotnet.System.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_EntityTag();
        }
    }
} // RangeConditionHeaderValue


// type: System.Net.Http.Headers.RangeHeaderValue
    /**
    Represents a Range header value.

    */
open class RangeHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_RangeHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Http.Headers.RangeHeaderValue.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RangeHeaderValue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Nullable<System.Int64>, System.Nullable<System.Int64>)
// docid: M:System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})
    /**
    Initializes a new instance of the  class with a byte range.

    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    public init(from : Optional<Swift.Int64>, to : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RangeHeaderValue_ctor_0__2__System_Nullable_i64__System_Nullable_i64_(&__thrown, (from != nil) ? System_Int64_box(from!) : nil, (to != nil) ? System_Int64_box(to!) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.RangeHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.RangeHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents range header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.RangeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeHeaderValue_RangeHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.RangeHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.RangeHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.RangeHeaderValue)
// docid: M:System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: he string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.RangeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_RangeHeaderValue_bool__TryParse_0__2__String_outRangeHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.RangeHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Net.Http.Headers.RangeItemHeaderValue> get_Ranges()
// docid: M:System.Net.Http.Headers.RangeHeaderValue.get_Ranges
    open func get_Ranges() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.RangeItemHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeHeaderValue_System_Collections_Generic_ICollection_System_Net_Http_Headers_RangeItemHeaderValue___get_Ranges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Unit()
// docid: M:System.Net.Http.Headers.RangeHeaderValue.get_Unit
    open func get_Unit() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeHeaderValue_String__get_Unit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Unit(System.String)
// docid: M:System.Net.Http.Headers.RangeHeaderValue.set_Unit(System.String)
    open func set_Unit(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_RangeHeaderValue_void__set_Unit_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the ranges specified from the  object.

    */
    open var Ranges : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.RangeItemHeaderValue> {
        get {
            return try! get_Ranges();
        }
    }
    /**
    Gets the unit from the  object.

    */
    open var Unit : dotnet.System.String {
        get {
            return try! get_Unit();
        }
        set(v) {
            return try! set_Unit(value: v);
        }
    }
} // RangeHeaderValue


// type: System.Net.Http.Headers.RangeItemHeaderValue
    /**
    Represents a byte range in a Range header value.

    */
open class RangeItemHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_RangeItemHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Nullable<System.Int64>, System.Nullable<System.Int64>)
// docid: M:System.Net.Http.Headers.RangeItemHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})
    /**
    Initializes a new instance of the  class.

    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    public init(from : Optional<Swift.Int64>, to : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RangeItemHeaderValue_ctor_0__2__System_Nullable_i64__System_Nullable_i64_(&__thrown, (from != nil) ? System_Int64_box(from!) : nil, (to != nil) ? System_Int64_box(to!) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.RangeItemHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeItemHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.RangeItemHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeItemHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.RangeItemHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeItemHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_From()
// docid: M:System.Net.Http.Headers.RangeItemHeaderValue.get_From
    open func get_From() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeItemHeaderValue_System_Nullable_i64___get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_To()
// docid: M:System.Net.Http.Headers.RangeItemHeaderValue.get_To
    open func get_To() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RangeItemHeaderValue_System_Nullable_i64___get_To_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    /**
    Gets the position at which to start sending data.

    */
    open var From : Optional<Swift.Int64> {
        get {
            return try! get_From();
        }
    }
    /**
    Gets the position at which to stop sending data.

    */
    open var To : Optional<Swift.Int64> {
        get {
            return try! get_To();
        }
    }
} // RangeItemHeaderValue


// type: System.Net.Http.Headers.RetryConditionHeaderValue
    /**
    Represents a Retry-After header value which can either be a date/time or a timespan value.

    */
open class RetryConditionHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_RetryConditionHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.DateTimeOffset)
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.DateTimeOffset)
    /**
    Initializes a new instance of the  class.

    - Parameter date: The date and time offset used to initialize the new instance.
    */
    public init(date : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_RetryConditionHeaderValue_ctor_0__1__DateTimeOffset(&__thrown, date.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.TimeSpan)
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.RetryConditionHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents retry condition header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.RetryConditionHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_RetryConditionHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.RetryConditionHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.RetryConditionHeaderValue)
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RetryConditionHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.RetryConditionHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_bool__TryParse_0__2__String_outRetryConditionHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.RetryConditionHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.get_Date
    open func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_Delta()
// docid: M:System.Net.Http.Headers.RetryConditionHeaderValue.get_Delta
    open func get_Delta() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_RetryConditionHeaderValue_System_Nullable_System_TimeSpan___get_Delta_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    /**
    Gets the date and time offset from the  object.

    */
    open var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
    }
    /**
    Gets the delta in seconds from the  object.

    */
    open var Delta : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_Delta();
        }
    }
} // RetryConditionHeaderValue


// type: System.Net.Http.Headers.StringWithQualityHeaderValue
    /**
    Represents a string header value with an optional quality.

    */
open class StringWithQualityHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_StringWithQualityHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter value: The string used to initialize the new instance.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_StringWithQualityHeaderValue_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Double)
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)
    /**
    Initializes a new instance of the  class.

    - Parameter value: A string used to initialize the new instance.
    - Parameter quality: A quality factor used to initialize the new instance.
    */
    public init(value : dotnet.System.String, quality : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_StringWithQualityHeaderValue_ctor_0__2__String_f64(&__thrown, value.get_handle(), quality);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified Object is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.StringWithQualityHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents quality header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_StringWithQualityHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.StringWithQualityHeaderValue)
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_bool__TryParse_0__2__String_outStringWithQualityHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.StringWithQualityHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> get_Quality()
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.get_Quality
    open func get_Quality() throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_System_Nullable_f64___get_Quality_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Net.Http.Headers.StringWithQualityHeaderValue.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_StringWithQualityHeaderValue_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the quality factor from the  object.

    */
    open var Quality : Optional<Swift.Double> {
        get {
            return try! get_Quality();
        }
    }
    /**
    Gets the string value from the  object.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // StringWithQualityHeaderValue


// type: System.Net.Http.Headers.TransferCodingHeaderValue
    /**
    Represents an accept-encoding header value.

    */
open class TransferCodingHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_TransferCodingHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter value: A string used to initialize the new instance.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_TransferCodingHeaderValue_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified Object is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.TransferCodingHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents transfer-coding header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.TransferCodingHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_TransferCodingHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.TransferCodingHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.TransferCodingHeaderValue)
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.TransferCodingHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_bool__TryParse_0__2__String_outTransferCodingHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.TransferCodingHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> get_Parameters()
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_System_Collections_Generic_ICollection_System_Net_Http_Headers_NameValueHeaderValue___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Net.Http.Headers.TransferCodingHeaderValue.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingHeaderValue_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the transfer-coding parameters.

    */
    open var Parameters : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    Gets the transfer-coding value.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // TransferCodingHeaderValue


// type: System.Net.Http.Headers.TransferCodingWithQualityHeaderValue
    /**
    Represents an Accept-Encoding header value.with optional quality factor.

    */
public final class TransferCodingWithQualityHeaderValue
    :
    dotnet.System.Net.Http.Headers.TransferCodingHeaderValue
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter value: A string used to initialize the new instance.
    */
    public override init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Double)
// docid: M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String,System.Double)
    /**
    Initializes a new instance of the  class.

    - Parameter value: A string used to initialize the new instance.
    - Parameter quality: A value for the quality factor.
    */
    public init(value : dotnet.System.String, quality : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_ctor_0__2__String_f64(&__thrown, value.get_handle(), quality);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.Http.Headers.TransferCodingWithQualityHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents transfer-coding value information.
    - Returns: A  instance.

    */
    public class override func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.TransferCodingWithQualityHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_TransferCodingWithQualityHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.TransferCodingWithQualityHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.TransferCodingWithQualityHeaderValue)
// docid: M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingWithQualityHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    public class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.TransferCodingWithQualityHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_bool__TryParse_0__2__String_outTransferCodingWithQualityHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.TransferCodingWithQualityHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> get_Quality()
// docid: M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.get_Quality
    public func get_Quality() throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_System_Nullable_f64___get_Quality_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Quality(System.Nullable<System.Double>)
// docid: M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.set_Quality(System.Nullable{System.Double})
    public func set_Quality(value : Optional<Swift.Double>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Http_Headers_TransferCodingWithQualityHeaderValue_void__set_Quality_0__1__System_Nullable_f64_(&__thrown, self.get_handle(), (value != nil) ? System_Double_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the quality factor from the .

    */
    public var Quality : Optional<Swift.Double> {
        get {
            return try! get_Quality();
        }
        set(v) {
            return try! set_Quality(value: v!);
        }
    }
} // TransferCodingWithQualityHeaderValue


// type: System.Net.Http.Headers.ViaHeaderValue
    /**
    Represents the value of a Via header.

    */
open class ViaHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_ViaHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter protocolVersion: The protocol version of the received protocol.
    - Parameter receivedBy: The host and port that the request or response was received by.
    */
    public init(protocolVersion : dotnet.System.String, receivedBy : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ViaHeaderValue_ctor_0__2__String_String(&__thrown, protocolVersion.get_handle(), receivedBy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter protocolVersion: The protocol version of the received protocol.
    - Parameter receivedBy: The host and port that the request or response was received by.
    - Parameter protocolName: The protocol name of the received protocol.
    */
    public init(protocolVersion : dotnet.System.String, receivedBy : dotnet.System.String, protocolName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ViaHeaderValue_ctor_0__3__String_String_String(&__thrown, protocolVersion.get_handle(), receivedBy.get_handle(), protocolName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter protocolVersion: The protocol version of the received protocol.
    - Parameter receivedBy: The host and port that the request or response was received by.
    - Parameter protocolName: The protocol name of the received protocol.
    - Parameter comment: The comment field used to identify the software of the recipient proxy or gateway.
    */
    public init(protocolVersion : dotnet.System.String, receivedBy : dotnet.System.String, protocolName : Optional<dotnet.System.String>, comment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_ViaHeaderValue_ctor_0__4__String_String_String_String(&__thrown, protocolVersion.get_handle(), receivedBy.get_handle(), protocolName?.get_handle() ?? nil, comment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.ViaHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.ViaHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents via header value information.
    - Returns: A  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.ViaHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_ViaHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.ViaHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.ViaHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.ViaHeaderValue)
// docid: M:System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.ViaHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_ViaHeaderValue_bool__TryParse_0__2__String_outViaHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.ViaHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Comment()
// docid: M:System.Net.Http.Headers.ViaHeaderValue.get_Comment
    open func get_Comment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_String__get_Comment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ProtocolName()
// docid: M:System.Net.Http.Headers.ViaHeaderValue.get_ProtocolName
    open func get_ProtocolName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_String__get_ProtocolName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ProtocolVersion()
// docid: M:System.Net.Http.Headers.ViaHeaderValue.get_ProtocolVersion
    open func get_ProtocolVersion() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_String__get_ProtocolVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ReceivedBy()
// docid: M:System.Net.Http.Headers.ViaHeaderValue.get_ReceivedBy
    open func get_ReceivedBy() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_ViaHeaderValue_String__get_ReceivedBy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the comment field used to identify the software of the recipient proxy or gateway.

    */
    open var Comment : Optional<dotnet.System.String> {
        get {
            return try! get_Comment();
        }
    }
    /**
    Gets the protocol name of the received protocol.

    */
    open var ProtocolName : Optional<dotnet.System.String> {
        get {
            return try! get_ProtocolName();
        }
    }
    /**
    Gets the protocol version of the received protocol.

    */
    open var ProtocolVersion : dotnet.System.String {
        get {
            return try! get_ProtocolVersion();
        }
    }
    /**
    Gets the host and port that the request or response was received by.

    */
    open var ReceivedBy : dotnet.System.String {
        get {
            return try! get_ReceivedBy();
        }
    }
} // ViaHeaderValue


// type: System.Net.Http.Headers.WarningHeaderValue
    /**
    Represents a warning value used by the Warning header.

    */
open class WarningHeaderValue
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Headers_WarningHeaderValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.String, System.String)
// docid: M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter code: The specific warning code.
    - Parameter agent: The host that attached the warning.
    - Parameter text: A quoted-string containing the warning text.
    */
    public init(code : Swift.Int32, agent : dotnet.System.String, text : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_WarningHeaderValue_ctor_0__3__i32_String_String(&__thrown, code, agent.get_handle(), text.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.String, System.String, System.DateTimeOffset)
// docid: M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String,System.DateTimeOffset)
    /**
    Initializes a new instance of the  class.

    - Parameter code: The specific warning code.
    - Parameter agent: The host that attached the warning.
    - Parameter text: A quoted-string containing the warning text.
    - Parameter date: The date/time stamp of the warning.
    */
    public init(code : Swift.Int32, agent : dotnet.System.String, text : dotnet.System.String, date : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Http_Headers_WarningHeaderValue_ctor_0__4__i32_String_String_DateTimeOffset(&__thrown, code, agent.get_handle(), text.get_handle(), date.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Http.Headers.WarningHeaderValue.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter obj: The object to compare with the current object.
    - Returns: 
         if the specified  is equal to the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Http.Headers.WarningHeaderValue.GetHashCode
    /**
    Serves as a hash function for an  object.

    - Returns: A hash code for the current object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.Http.Headers.WarningHeaderValue Parse(System.String)
// docid: M:System.Net.Http.Headers.WarningHeaderValue.Parse(System.String)
    /**
    Converts a string to an  instance.

    - Parameter input: A string that represents authentication header value information.
    - Returns: Returns a  instance.

    */
    open class func Parse(input : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Http.Headers.WarningHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_WarningHeaderValue__Parse_0__1__String(&__thrown, input?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Headers.WarningHeaderValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Http.Headers.WarningHeaderValue.ToString
    /**
    Returns a string that represents the current  object.

    - Returns: A string that represents the current object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParse(System.String, ref System.Net.Http.Headers.WarningHeaderValue)
// docid: M:System.Net.Http.Headers.WarningHeaderValue.TryParse(System.String,System.Net.Http.Headers.WarningHeaderValue@)
    /**
    Determines whether a string is valid  information.

    - Parameter input: The string to validate.
    - Parameter parsedValue: The  version of the string.
    - Returns: 
         if  is valid  information; otherwise, .

    */
    open class func TryParse(input : Optional<dotnet.System.String>, parsedValue : inout dotnet.System.Net.Http.Headers.WarningHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = System_Net_Http_Headers_WarningHeaderValue_bool__TryParse_0__2__String_outWarningHeaderValue(&__thrown, input?.get_handle() ?? nil, &_tmp_out_parsedValue);
        let _tmp2_parsedValue = dotnet.System.Net.Http.Headers.WarningHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Agent()
// docid: M:System.Net.Http.Headers.WarningHeaderValue.get_Agent
    open func get_Agent() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_String__get_Agent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Code()
// docid: M:System.Net.Http.Headers.WarningHeaderValue.get_Code
    open func get_Code() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_i32__get_Code_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:System.Net.Http.Headers.WarningHeaderValue.get_Date
    open func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.String get_Text()
// docid: M:System.Net.Http.Headers.WarningHeaderValue.get_Text
    open func get_Text() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Headers_WarningHeaderValue_String__get_Text_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the host that attached the warning.

    */
    open var Agent : dotnet.System.String {
        get {
            return try! get_Agent();
        }
    }
    /**
    Gets the specific warning code.

    */
    open var Code : Swift.Int32 {
        get {
            return try! get_Code();
        }
    }
    /**
    Gets the date/time stamp of the warning.

    */
    open var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
    }
    /**
    Gets a quoted-string containing the warning text.

    */
    open var Text : dotnet.System.String {
        get {
            return try! get_Text();
        }
    }
} // WarningHeaderValue


}




