// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Numerics
extension System.Numerics {
// type: System.Numerics.BigInteger
// boxed value type
    /**
    Represents an arbitrarily large signed integer.

    */
public final class BigInteger
    :
    dotnet.System.Object,
    System_IComparable,
    System_ISpanFormattable,
    System_IFormattable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_BigInteger_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Indicates whether the value of the current  object is an even number.

    */
    public var IsEven : Bool {
        get {
            return try! get_IsEven();
        }
    }
    /**
    Indicates whether the value of the current  object is .

    */
    public var IsOne : Bool {
        get {
            return try! get_IsOne();
        }
    }
    /**
    Indicates whether the value of the current  object is a power of two.

    */
    public var IsPowerOfTwo : Bool {
        get {
            return try! get_IsPowerOfTwo();
        }
    }
    /**
    Indicates whether the value of the current  object is .

    */
    public var IsZero : Bool {
        get {
            return try! get_IsZero();
        }
    }
    /**
    Gets a value that represents the number negative one (-1).

    */
    public static var MinusOne : dotnet.System.Numerics.BigInteger {
        get {
            return try! get_MinusOne();
        }
    }
    /**
    Gets a value that represents the number one (1).

    */
    public static var One : dotnet.System.Numerics.BigInteger {
        get {
            return try! get_One();
        }
    }
    /**
    Gets a number that indicates the sign (negative, positive, or zero) of the current  object.

    */
    public var Sign : Swift.Int32 {
        get {
            return try! get_Sign();
        }
    }
    /**
    Gets a value that represents the number 0 (zero).

    */
    public static var Zero : dotnet.System.Numerics.BigInteger {
        get {
            return try! get_Zero();
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Numerics.BigInteger.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  structure using the values in a byte array.

    - Parameter value: An array of byte values in little-endian order.
    */
    public init(value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__u8Array(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Decimal)
// docid: M:System.Numerics.BigInteger.#ctor(System.Decimal)
    /**
    Initializes a new instance of the  structure using a  value.

    - Parameter value: A decimal number.
    */
    public init(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Double)
// docid: M:System.Numerics.BigInteger.#ctor(System.Double)
    /**
    Initializes a new instance of the  structure using a double-precision floating-point value.

    - Parameter value: A double-precision floating-point value.
    */
    public init(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__f64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Numerics.BigInteger.#ctor(System.Int32)
    /**
    Initializes a new instance of the  structure using a 32-bit signed integer value.

    - Parameter value: A 32-bit signed integer.
    */
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64)
// docid: M:System.Numerics.BigInteger.#ctor(System.Int64)
    /**
    Initializes a new instance of the  structure using a 64-bit signed integer value.

    - Parameter value: A 64-bit signed integer.
    */
    public init(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__i64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.ReadOnlySpan<System.Byte>, bool, bool)
    // .ctor(System.Single)
// docid: M:System.Numerics.BigInteger.#ctor(System.Single)
    /**
    Initializes a new instance of the  structure using a single-precision floating-point value.

    - Parameter value: A single-precision floating-point value.
    */
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.UInt32)
// docid: M:System.Numerics.BigInteger.#ctor(System.UInt32)
    /**
    Initializes a new instance of the  structure using an unsigned 32-bit integer value.

    - Parameter value: An unsigned 32-bit integer value.
    */
    public init(value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__u32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.UInt64)
// docid: M:System.Numerics.BigInteger.#ctor(System.UInt64)
    /**
    Initializes a new instance of the  structure with an unsigned 64-bit integer value.

    - Parameter value: An unsigned 64-bit integer.
    */
    public init(value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_BigInteger_ctor_0__1__u64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_BigInteger_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.BigInteger Abs(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
    /**
    Gets the absolute value of a  object.

    - Parameter value: A number.
    - Returns: The absolute value of .

    */
    public class func Abs(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Abs_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Add(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Adds two  values and returns the result.

    - Parameter left: The first value to add.
    - Parameter right: The second value to add.
    - Returns: The sum of  and .

    */
    public class func Add(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Add_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Int32 Compare(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Compares two  values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: A signed integer that indicates the relative values of  and , as shown in the following table.  
  
  Value Condition Less than zero is less than . Zero equals . Greater than zero is greater than .

    */
    public class func Compare(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__Compare_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Int64)
// docid: M:System.Numerics.BigInteger.CompareTo(System.Int64)
    /**
    Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.

    - Parameter other: The signed 64-bit integer to compare.
    - Returns: A signed integer value that indicates the relationship of this instance to , as shown in the following table.  
  
  Return value Description Less than zero The current instance is less than . Zero The current instance equals . Greater than zero The current instance is greater than .

    */
    public func CompareTo(other : Swift.Int64) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__CompareTo_0__1__i64(&__thrown, self.get_handle(), other);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
    /**
    Compares this instance to a second  and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.

    - Parameter other: The object to compare.
    - Returns: A signed integer value that indicates the relationship of this instance to , as shown in the following table.  
  
  Return value Description Less than zero The current instance is less than . Zero The current instance equals . Greater than zero The current instance is greater than .

    */
    public func CompareTo(other : dotnet.System.Numerics.BigInteger) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__CompareTo_0__1__BigInteger(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.Object)
// docid: M:System.Numerics.BigInteger.CompareTo(System.Object)
    /**
    Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.

    - Parameter obj: The object to compare.
    - Returns: A signed integer that indicates the relationship of the current instance to the  parameter, as shown in the following table.  
  
  Return value Description Less than zero The current instance is less than . Zero The current instance equals . Greater than zero The current instance is greater than , or the  parameter is .

    */
    public func CompareTo(obj : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__CompareTo_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CompareTo(System.UInt64)
// docid: M:System.Numerics.BigInteger.CompareTo(System.UInt64)
    /**
    Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.

    - Parameter other: The unsigned 64-bit integer to compare.
    - Returns: A signed integer that indicates the relative value of this instance and , as shown in the following table.
          Return valueDescriptionLess than zeroThe current instance is less than .ZeroThe current instance equals .Greater than zeroThe current instance is greater than .

    */
    public func CompareTo(other : Swift.UInt64) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__CompareTo_0__1__u64(&__thrown, self.get_handle(), other);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.BigInteger Divide(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Divides one  value by another and returns the result.

    - Parameter dividend: The value to be divided.
    - Parameter divisor: The value to divide by.
    - Returns: The quotient of the division.

    */
    public class func Divide(dividend : dotnet.System.Numerics.BigInteger, divisor : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Divide_0__2__BigInteger_BigInteger(&__thrown, dividend.get_handle(), divisor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, ref System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
    /**
    Divides one  value by another, returns the result, and returns the remainder in an output parameter.

    - Parameter dividend: The value to be divided.
    - Parameter divisor: The value to divide by.
    - Parameter remainder: When this method returns, contains a  value that represents the remainder from the division. This parameter is passed uninitialized.
    - Returns: The quotient of the division.

    */
    public class func DivRem(dividend : dotnet.System.Numerics.BigInteger, divisor : dotnet.System.Numerics.BigInteger, remainder : inout dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
            var _tmp_out_remainder = remainder.get_handle();
        let __return = System_Numerics_BigInteger_BigInteger__DivRem_0__3__BigInteger_BigInteger_outBigInteger(&__thrown, dividend.get_handle(), divisor.get_handle(), &_tmp_out_remainder);
        let _tmp2_remainder = dotnet.System.Numerics.BigInteger(hndl: _tmp_out_remainder);
            remainder = _tmp2_remainder;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // bool Equals(System.Int64)
// docid: M:System.Numerics.BigInteger.Equals(System.Int64)
    /**
    Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.

    - Parameter other: The signed 64-bit integer value to compare.
    - Returns: 
         if the signed 64-bit integer and the current instance have the same value; otherwise, .

    */
    public func Equals(other : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__Equals_0__1__i64(&__thrown, self.get_handle(), other);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether the current instance and a specified  object have the same value.

    - Parameter other: The object to compare.
    - Returns: 
         if this  object and  have the same value; otherwise, .

    */
    public func Equals(other : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__Equals_0__1__BigInteger(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.BigInteger.Equals(System.Object)
    /**
    Returns a value that indicates whether the current instance and a specified object have the same value.

    - Parameter obj: The object to compare.
    - Returns: 
         if the  argument is a  object, and its value is equal to the value of the current  instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.UInt64)
// docid: M:System.Numerics.BigInteger.Equals(System.UInt64)
    /**
    Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.

    - Parameter other: The unsigned 64-bit integer to compare.
    - Returns: 
         if the current instance and the unsigned 64-bit integer have the same value; otherwise, .

    */
    public func Equals(other : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__Equals_0__1__u64(&__thrown, self.get_handle(), other);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int64 GetBitLength()
// docid: M:System.Numerics.BigInteger.GetBitLength
    /**
    Gets the number of bits required for shortest two's complement representation of the current instance without the sign bit.

    - Returns: The minimum non-negative number of bits in two's complement notation without the sign bit.

    */
    public func GetBitLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i64__GetBitLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(bool)
// docid: M:System.Numerics.BigInteger.GetByteCount(System.Boolean)
    /**
    Gets the number of bytes that will be output by  and .

    - Parameter isUnsigned: 
         to use unsigned encoding; otherwise, .
    - Returns: The number of bytes.

    */
    public func GetByteCount(isUnsigned : Bool = false) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__GetByteCount_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(isUnsigned ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.BigInteger.GetHashCode
    /**
    Returns the hash code for the current  object.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.BigInteger GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Finds the greatest common divisor of two  values.

    - Parameter left: The first value.
    - Parameter right: The second value.
    - Returns: The greatest common divisor of  and .

    */
    public class func GreatestCommonDivisor(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__GreatestCommonDivisor_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Double Log(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
    /**
    Returns the natural (base ) logarithm of a specified number.

    - Parameter value: The number whose logarithm is to be found.
    - Returns: The natural (base ) logarithm of , as shown in the table in the Remarks section.

    */
    public class func Log(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_f64__Log_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Log(System.Numerics.BigInteger, System.Double)
// docid: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
    /**
    Returns the logarithm of a specified number in a specified base.

    - Parameter value: A number whose logarithm is to be found.
    - Parameter baseValue: The base of the logarithm.
    - Returns: The base  logarithm of , as shown in the table in the Remarks section.

    */
    public class func Log(value : dotnet.System.Numerics.BigInteger, baseValue : Swift.Double) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_f64__Log_0__2__BigInteger_f64(&__thrown, value.get_handle(), baseValue);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Log10(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
    /**
    Returns the base 10 logarithm of a specified number.

    - Parameter value: A number whose logarithm is to be found.
    - Returns: The base 10 logarithm of , as shown in the table in the Remarks section.

    */
    public class func Log10(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_f64__Log10_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.BigInteger Max(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns the larger of two  values.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: The  or  parameter, whichever is larger.

    */
    public class func Max(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Max_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Min(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns the smaller of two  values.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: The  or  parameter, whichever is smaller.

    */
    public class func Min(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Min_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger ModPow(System.Numerics.BigInteger, System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Performs modulus division on a number raised to the power of another number.

    - Parameter value: The number to raise to the  power.
    - Parameter exponent: The exponent to raise  by.
    - Parameter modulus: The number by which to divide  raised to the  power.
    - Returns: The remainder after dividing exponent by .

    */
    public class func ModPow(value : dotnet.System.Numerics.BigInteger, exponent : dotnet.System.Numerics.BigInteger, modulus : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__ModPow_0__3__BigInteger_BigInteger_BigInteger(&__thrown, value.get_handle(), exponent.get_handle(), modulus.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns the product of two  values.

    - Parameter left: The first number to multiply.
    - Parameter right: The second number to multiply.
    - Returns: The product of the  and  parameters.

    */
    public class func Multiply(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Multiply_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Negate(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
    /**
    Negates a specified  value.

    - Parameter value: The value to negate.
    - Returns: The result of the  parameter multiplied by negative one (-1).

    */
    public class func Negate(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Negate_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Addition(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Adds the values of two specified  objects.

    - Parameter left: The first value to add.
    - Parameter right: The second value to add.
    - Returns: The sum of  and .

    */
    public class func op_Addition(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Addition_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_BitwiseAnd(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Performs a bitwise  operation on two  values.

    - Parameter left: The first value.
    - Parameter right: The second value.
    - Returns: The result of the bitwise  operation.

    */
    public class func op_BitwiseAnd(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_BitwiseAnd_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_BitwiseOr(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Performs a bitwise  operation on two  values.

    - Parameter left: The first value.
    - Parameter right: The second value.
    - Returns: The result of the bitwise  operation.

    */
    public class func op_BitwiseOr(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_BitwiseOr_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Decrement(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
    /**
    Decrements a  value by 1.

    - Parameter value: The value to decrement.
    - Returns: The value of the  parameter decremented by 1.

    */
    public class func op_Decrement(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Decrement_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Division(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Divides a specified  value by another specified  value by using integer division.

    - Parameter dividend: The value to be divided.
    - Parameter divisor: The value to divide by.
    - Returns: The integral result of the division.

    */
    public class func op_Division(dividend : dotnet.System.Numerics.BigInteger, divisor : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Division_0__2__BigInteger_BigInteger(&__thrown, dividend.get_handle(), divisor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Int64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a signed long integer value and a  value are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if the  and  parameters have the same value; otherwise, .

    */
    public class func op_Equality(left : Swift.Int64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Equality_0__2__i64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.BigInteger, System.Int64)
// docid: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
    /**
    Returns a value that indicates whether a  value and a signed long integer value are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if the  and  parameters have the same value; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Numerics.BigInteger, right : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Equality_0__2__BigInteger_i64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether the values of two  objects are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if the  and  parameters have the same value; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Equality_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.BigInteger, System.UInt64)
// docid: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
    /**
    Returns a value that indicates whether a  value and an unsigned long integer value are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if the  and  parameters have the same value; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Numerics.BigInteger, right : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Equality_0__2__BigInteger_u64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.UInt64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether an unsigned long integer value and a  value are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if the  and  parameters have the same value; otherwise, .

    */
    public class func op_Equality(left : Swift.UInt64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Equality_0__2__u64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_ExclusiveOr(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Performs a bitwise exclusive  () operation on two  values.

    - Parameter left: The first value.
    - Parameter right: The second value.
    - Returns: The result of the bitwise  operation.

    */
    public class func op_ExclusiveOr(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_ExclusiveOr_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Explicit(System.Decimal)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Decimal)
    public class func op_Explicit(value : dotnet.System.Decimal) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Explicit_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Explicit(System.Double)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Double)
    public class func op_Explicit(value : Swift.Double) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Explicit_0__1__f64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_u8__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Decimal op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_Decimal__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_f64__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int16 op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i16__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i64__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.SByte op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i8__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Single op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_f32__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt16 op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_u16__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt32 op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_u32__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt64 op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_u64__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Explicit(System.Single)
// docid: M:System.Numerics.BigInteger.op_Explicit(System.Single)
    public class func op_Explicit(value : Swift.Float) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Explicit_0__1__f32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_GreaterThan(System.Int64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit signed integer is greater than a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThan(left : Swift.Int64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThan_0__2__i64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThan(System.Numerics.BigInteger, System.Int64)
// docid: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
    /**
    Returns a value that indicates whether a  is greater than a 64-bit signed integer value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThan(left : dotnet.System.Numerics.BigInteger, right : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThan_0__2__BigInteger_i64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThan(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a  value is greater than another  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThan(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThan_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThan(System.Numerics.BigInteger, System.UInt64)
// docid: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
    /**
    Returns a value that indicates whether a  value is greater than a 64-bit unsigned integer.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThan(left : dotnet.System.Numerics.BigInteger, right : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThan_0__2__BigInteger_u64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThan(System.UInt64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a  value is greater than a 64-bit unsigned integer.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThan(left : Swift.UInt64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThan_0__2__u64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThanOrEqual(System.Int64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThanOrEqual(left : Swift.Int64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThanOrEqual_0__2__i64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThanOrEqual(System.Numerics.BigInteger, System.Int64)
// docid: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
    /**
    Returns a value that indicates whether a  value is greater than or equal to a 64-bit signed integer value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThanOrEqual(left : dotnet.System.Numerics.BigInteger, right : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThanOrEqual_0__2__BigInteger_i64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a  value is greater than or equal to another  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThanOrEqual(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThanOrEqual_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThanOrEqual(System.Numerics.BigInteger, System.UInt64)
// docid: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
    /**
    Returns a value that indicates whether a  value is greater than or equal to a 64-bit unsigned integer value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThanOrEqual(left : dotnet.System.Numerics.BigInteger, right : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThanOrEqual_0__2__BigInteger_u64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_GreaterThanOrEqual(System.UInt64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is greater than ; otherwise, .

    */
    public class func op_GreaterThanOrEqual(left : Swift.UInt64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_GreaterThanOrEqual_0__2__u64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.Byte)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.Byte)
    public class func op_Implicit(value : Swift.UInt8) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__u8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.Int16)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.Int16)
    public class func op_Implicit(value : Swift.Int16) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__i16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.Int32)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.Int32)
    public class func op_Implicit(value : Swift.Int32) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.Int64)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.Int64)
    public class func op_Implicit(value : Swift.Int64) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.SByte)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.SByte)
    public class func op_Implicit(value : Swift.Int8) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__i8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.UInt16)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.UInt16)
    public class func op_Implicit(value : Swift.UInt16) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__u16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.UInt32)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.UInt32)
    public class func op_Implicit(value : Swift.UInt32) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__u32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Implicit(System.UInt64)
// docid: M:System.Numerics.BigInteger.op_Implicit(System.UInt64)
    public class func op_Implicit(value : Swift.UInt64) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Implicit_0__1__u64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Increment(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
    /**
    Increments a  value by 1.

    - Parameter value: The value to increment.
    - Returns: The value of the  parameter incremented by 1.

    */
    public class func op_Increment(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Increment_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Int64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit signed integer and a  value are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : Swift.Int64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Inequality_0__2__i64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.BigInteger, System.Int64)
// docid: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
    /**
    Returns a value that indicates whether a  value and a 64-bit signed integer are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Numerics.BigInteger, right : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Inequality_0__2__BigInteger_i64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether two  objects have different values.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Inequality_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.BigInteger, System.UInt64)
// docid: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
    /**
    Returns a value that indicates whether a  value and a 64-bit unsigned integer are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Numerics.BigInteger, right : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Inequality_0__2__BigInteger_u64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.UInt64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit unsigned integer and a  value are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : Swift.UInt64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_Inequality_0__2__u64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_LeftShift(System.Numerics.BigInteger, System.Int32)
// docid: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
    /**
    Shifts a  value a specified number of bits to the left.

    - Parameter value: The value whose bits are to be shifted.
    - Parameter shift: The number of bits to shift  to the left.
    - Returns: A value that has been shifted to the left by the specified number of bits.

    */
    public class func op_LeftShift(value : dotnet.System.Numerics.BigInteger, shift : Swift.Int32) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_LeftShift_0__2__BigInteger_i32(&__thrown, value.get_handle(), shift);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_LessThan(System.Int64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit signed integer is less than a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than ; otherwise, .

    */
    public class func op_LessThan(left : Swift.Int64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThan_0__2__i64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThan(System.Numerics.BigInteger, System.Int64)
// docid: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
    /**
    Returns a value that indicates whether a  value is less than a 64-bit signed integer.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than ; otherwise, .

    */
    public class func op_LessThan(left : dotnet.System.Numerics.BigInteger, right : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThan_0__2__BigInteger_i64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThan(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a  value is less than another  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than ; otherwise, .

    */
    public class func op_LessThan(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThan_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThan(System.Numerics.BigInteger, System.UInt64)
// docid: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
    /**
    Returns a value that indicates whether a  value is less than a 64-bit unsigned integer.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than ; otherwise, .

    */
    public class func op_LessThan(left : dotnet.System.Numerics.BigInteger, right : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThan_0__2__BigInteger_u64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThan(System.UInt64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit unsigned integer is less than a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than ; otherwise, .

    */
    public class func op_LessThan(left : Swift.UInt64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThan_0__2__u64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThanOrEqual(System.Int64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit signed integer is less than or equal to a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than or equal to ; otherwise, .

    */
    public class func op_LessThanOrEqual(left : Swift.Int64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThanOrEqual_0__2__i64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThanOrEqual(System.Numerics.BigInteger, System.Int64)
// docid: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
    /**
    Returns a value that indicates whether a  value is less than or equal to a 64-bit signed integer.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than or equal to ; otherwise, .

    */
    public class func op_LessThanOrEqual(left : dotnet.System.Numerics.BigInteger, right : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThanOrEqual_0__2__BigInteger_i64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a  value is less than or equal to another  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than or equal to ; otherwise, .

    */
    public class func op_LessThanOrEqual(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThanOrEqual_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThanOrEqual(System.Numerics.BigInteger, System.UInt64)
// docid: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
    /**
    Returns a value that indicates whether a  value is less than or equal to a 64-bit unsigned integer.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than or equal to ; otherwise, .

    */
    public class func op_LessThanOrEqual(left : dotnet.System.Numerics.BigInteger, right : Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThanOrEqual_0__2__BigInteger_u64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_LessThanOrEqual(System.UInt64, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
    /**
    Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a  value.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  is less than or equal to ; otherwise, .

    */
    public class func op_LessThanOrEqual(left : Swift.UInt64, right : dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__op_LessThanOrEqual_0__2__u64_BigInteger(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Modulus(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Returns the remainder that results from division with two specified  values.

    - Parameter dividend: The value to be divided.
    - Parameter divisor: The value to divide by.
    - Returns: The remainder that results from the division.

    */
    public class func op_Modulus(dividend : dotnet.System.Numerics.BigInteger, divisor : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Modulus_0__2__BigInteger_BigInteger(&__thrown, dividend.get_handle(), divisor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Multiplies two specified  values.

    - Parameter left: The first value to multiply.
    - Parameter right: The second value to multiply.
    - Returns: The product of  and .

    */
    public class func op_Multiply(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Multiply_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_OnesComplement(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
    /**
    Returns the bitwise one's complement of a  value.

    - Parameter value: An integer value.
    - Returns: The bitwise one's complement of .

    */
    public class func op_OnesComplement(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_OnesComplement_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_RightShift(System.Numerics.BigInteger, System.Int32)
// docid: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
    /**
    Shifts a  value a specified number of bits to the right.

    - Parameter value: The value whose bits are to be shifted.
    - Parameter shift: The number of bits to shift  to the right.
    - Returns: A value that has been shifted to the right by the specified number of bits.

    */
    public class func op_RightShift(value : dotnet.System.Numerics.BigInteger, shift : Swift.Int32) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_RightShift_0__2__BigInteger_i32(&__thrown, value.get_handle(), shift);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_Subtraction(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Subtracts a  value from another  value.

    - Parameter left: The value to subtract from (the minuend).
    - Parameter right: The value to subtract (the subtrahend).
    - Returns: The result of subtracting  from .

    */
    public class func op_Subtraction(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_Subtraction_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_UnaryNegation(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
    /**
    Negates a specified BigInteger value.

    - Parameter value: The value to negate.
    - Returns: The result of the  parameter multiplied by negative one (-1).

    */
    public class func op_UnaryNegation(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_UnaryNegation_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger op_UnaryPlus(System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
    /**
    Returns the value of the  operand. (The sign of the operand is unchanged.)

    - Parameter value: An integer value.
    - Returns: The value of the  operand.

    */
    public class func op_UnaryPlus(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__op_UnaryPlus_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Numerics.BigInteger Parse(System.ReadOnlySpan<System.Char>, System.Globalization.NumberStyles, System.IFormatProvider)
    // System.Numerics.BigInteger Parse(System.String)
// docid: M:System.Numerics.BigInteger.Parse(System.String)
    /**
    Converts the string representation of a number to its  equivalent.

    - Parameter value: A string that contains the number to convert.
    - Returns: A value that is equivalent to the number specified in the  parameter.

    */
    public class func Parse(value : dotnet.System.String) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Parse_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Parse(System.String, System.Globalization.NumberStyles)
// docid: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
    /**
    Converts the string representation of a number in a specified style to its  equivalent.

    - Parameter value: A string that contains a number to convert.
    - Parameter style: A bitwise combination of the enumeration values that specify the permitted format of .
    - Returns: A value that is equivalent to the number specified in the  parameter.

    */
    public class func Parse(value : dotnet.System.String, style : dotnet.System.Globalization.NumberStyles) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Parse_0__2__String_NumberStyles(&__thrown, value.get_handle(), style.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
// docid: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
    /**
    Converts the string representation of a number in a specified style and culture-specific format to its  equivalent.

    - Parameter value: A string that contains a number to convert.
    - Parameter style: A bitwise combination of the enumeration values that specify the permitted format of .
    - Parameter provider: An object that provides culture-specific formatting information about .
    - Returns: A value that is equivalent to the number specified in the  parameter.

    */
    public class func Parse(value : dotnet.System.String, style : dotnet.System.Globalization.NumberStyles, provider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Parse_0__3__String_NumberStyles_IFormatProvider(&__thrown, value.get_handle(), style.get_value(), provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Parse(System.String, System.IFormatProvider)
// docid: M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
    /**
    Converts the string representation of a number in a specified culture-specific format to its  equivalent.

    - Parameter value: A string that contains a number to convert.
    - Parameter provider: An object that provides culture-specific formatting information about .
    - Returns: A value that is equivalent to the number specified in the  parameter.

    */
    public class func Parse(value : dotnet.System.String, provider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Parse_0__2__String_IFormatProvider(&__thrown, value.get_handle(), provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Pow(System.Numerics.BigInteger, System.Int32)
// docid: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
    /**
    Raises a  value to the power of a specified value.

    - Parameter value: The number to raise to the  power.
    - Parameter exponent: The exponent to raise  by.
    - Returns: The result of raising  to the  power.

    */
    public class func Pow(value : dotnet.System.Numerics.BigInteger, exponent : Swift.Int32) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Pow_0__2__BigInteger_i32(&__thrown, value.get_handle(), exponent);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Remainder(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Performs integer division on two  values and returns the remainder.

    - Parameter dividend: The value to be divided.
    - Parameter divisor: The value to divide by.
    - Returns: The remainder after dividing  by .

    */
    public class func Remainder(dividend : dotnet.System.Numerics.BigInteger, divisor : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Remainder_0__2__BigInteger_BigInteger(&__thrown, dividend.get_handle(), divisor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Numerics.BigInteger Subtract(System.Numerics.BigInteger, System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
    /**
    Subtracts one  value from another and returns the result.

    - Parameter left: The value to subtract from (the minuend).
    - Parameter right: The value to subtract (the subtrahend).
    - Returns: The result of subtracting  from .

    */
    public class func Subtract(left : dotnet.System.Numerics.BigInteger, right : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__Subtract_0__2__BigInteger_BigInteger(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.Byte[] ToByteArray()
// docid: M:System.Numerics.BigInteger.ToByteArray
    /**
    Converts a  value to a byte array.

    - Returns: The value of the current  object converted to an array of bytes.

    */
    public func ToByteArray() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_u8Array__ToByteArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] ToByteArray(bool, bool)
// docid: M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)
    /**
    Returns the value of this  as a byte array using the fewest number of bytes possible. If the value is zero, returns an array of one byte whose element is 0x00.

    - Parameter isUnsigned: 
         to use unsigned encoding; otherwise, .
    - Parameter isBigEndian: 
         to write the bytes in a big-endian byte order; otherwise, .
    - Returns: The value of the current  object converted to an array of bytes.

    */
    public func ToByteArray(isUnsigned : Bool = false, isBigEndian : Bool = false) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_u8Array__ToByteArray_0__2__bool_bool(&__thrown, self.get_handle(), Swift.Int32(isUnsigned ? 1 : 0), Swift.Int32(isBigEndian ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.BigInteger.ToString
    /**
    Converts the numeric value of the current  object to its equivalent string representation.

    - Returns: The string representation of the current  value.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.IFormatProvider)
// docid: M:System.Numerics.BigInteger.ToString(System.IFormatProvider)
    /**
    Converts the numeric value of the current  object to its equivalent string representation by using the specified culture-specific formatting information.

    - Parameter provider: An object that supplies culture-specific formatting information.
    - Returns: The string representation of the current  value in the format specified by the  parameter.

    */
    public func ToString(provider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_String__ToString_0__1__IFormatProvider(&__thrown, self.get_handle(), provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String)
// docid: M:System.Numerics.BigInteger.ToString(System.String)
    /**
    Converts the numeric value of the current  object to its equivalent string representation by using the specified format.

    - Parameter format: A standard or custom numeric format string.
    - Returns: The string representation of the current  value in the format specified by the  parameter.

    */
    public func ToString(format : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_String__ToString_0__1__String(&__thrown, self.get_handle(), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.IFormatProvider)
// docid: M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
    /**
    Converts the numeric value of the current  object to its equivalent string representation by using the specified format and culture-specific format information.

    - Parameter format: A standard or custom numeric format string.
    - Parameter provider: An object that supplies culture-specific formatting information.
    - Returns: The string representation of the current  value as specified by the  and  parameters.

    */
    public func ToString(format : Optional<dotnet.System.String>, provider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_String__ToString_0__2__String_IFormatProvider(&__thrown, self.get_handle(), format?.get_handle() ?? nil, provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) bool TryFormat(System.Span<System.Char>, ref System.Int32, System.ReadOnlySpan<System.Char>, System.IFormatProvider)
// TODO COPE (write_all_methods) (span) bool TryParse(System.ReadOnlySpan<System.Char>, System.Globalization.NumberStyles, System.IFormatProvider, ref System.Numerics.BigInteger)
// TODO COPE (write_all_methods) (span) bool TryParse(System.ReadOnlySpan<System.Char>, ref System.Numerics.BigInteger)
    // bool TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ref System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
    /**
    Tries to convert the string representation of a number in a specified style and culture-specific format to its  equivalent, and returns a value that indicates whether the conversion succeeded.

    - Parameter value: The string representation of a number. The string is interpreted using the style specified by .
    - Parameter style: A bitwise combination of enumeration values that indicates the style elements that can be present in . A typical value to specify is .
    - Parameter provider: An object that supplies culture-specific formatting information about .
    - Parameter result: When this method returns, contains the  equivalent to the number that is contained in , or  if the conversion failed. The conversion fails if the  parameter is  or is not in a format that is compliant with . This parameter is passed uninitialized.
    - Returns: 
         if the  parameter was converted successfully; otherwise, .

    */
    public class func TryParse(value : Optional<dotnet.System.String>, style : dotnet.System.Globalization.NumberStyles, provider : Optional<dotnet.System.IFormatProvider>, result : inout dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Numerics_BigInteger_bool__TryParse_0__4__String_NumberStyles_IFormatProvider_outBigInteger(&__thrown, value?.get_handle() ?? nil, style.get_value(), provider?.get_handle() ?? nil, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Numerics.BigInteger(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParse(System.String, ref System.Numerics.BigInteger)
// docid: M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
    /**
    Tries to convert the string representation of a number to its  equivalent, and returns a value that indicates whether the conversion succeeded.

    - Parameter value: The string representation of a number.
    - Parameter result: When this method returns, contains the  equivalent to the number that is contained in , or zero (0) if the conversion fails. The conversion fails if the  parameter is  or is not of the correct format. This parameter is passed uninitialized.
    - Returns: 
         if  was converted successfully; otherwise, .

    */
    public class func TryParse(value : Optional<dotnet.System.String>, result : inout dotnet.System.Numerics.BigInteger) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Numerics_BigInteger_bool__TryParse_0__2__String_outBigInteger(&__thrown, value?.get_handle() ?? nil, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Numerics.BigInteger(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryWriteBytes(System.Span<System.Byte>, ref System.Int32, bool, bool)
    // [IsSpecialName] bool get_IsEven()
// docid: M:System.Numerics.BigInteger.get_IsEven
    public func get_IsEven() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__get_IsEven_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOne()
// docid: M:System.Numerics.BigInteger.get_IsOne
    public func get_IsOne() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__get_IsOne_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsPowerOfTwo()
// docid: M:System.Numerics.BigInteger.get_IsPowerOfTwo
    public func get_IsPowerOfTwo() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__get_IsPowerOfTwo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsZero()
// docid: M:System.Numerics.BigInteger.get_IsZero
    public func get_IsZero() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_bool__get_IsZero_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger get_MinusOne()
// docid: M:System.Numerics.BigInteger.get_MinusOne
    public class func get_MinusOne() throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__get_MinusOne_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger get_One()
// docid: M:System.Numerics.BigInteger.get_One
    public class func get_One() throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__get_One_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Sign()
// docid: M:System.Numerics.BigInteger.get_Sign
    public func get_Sign() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_i32__get_Sign_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Numerics.BigInteger get_Zero()
// docid: M:System.Numerics.BigInteger.get_Zero
    public class func get_Zero() throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_BigInteger_BigInteger__get_Zero_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
} // BigInteger


// type: System.Numerics.Complex
// boxed value type
    /**
    Represents a complex number.

    */
public final class Complex
    :
    dotnet.System.Object,
    System_IFormattable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Complex_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Numerics.Complex ImaginaryOne
    /**
    Returns a new  instance with a real number equal to zero and an imaginary number equal to one.

    */
    public class var ImaginaryOne : dotnet.System.Numerics.Complex {
        get {
        let __return = dotnet.System.Numerics.Complex(hndl: System_Numerics_Complex_get_ImaginaryOne());
            return __return;
        }
    }
    // static field: System.Numerics.Complex Infinity
    /**
    Represents infinity as a complex number.

    */
    public class var Infinity : dotnet.System.Numerics.Complex {
        get {
        let __return = dotnet.System.Numerics.Complex(hndl: System_Numerics_Complex_get_Infinity());
            return __return;
        }
    }
    // static field: System.Numerics.Complex NaN
    /**
    Represents a complex instance that is not a number (NaN).

    */
    public class var NaN : dotnet.System.Numerics.Complex {
        get {
        let __return = dotnet.System.Numerics.Complex(hndl: System_Numerics_Complex_get_NaN());
            return __return;
        }
    }
    // static field: System.Numerics.Complex One
    /**
    Returns a new  instance with a real number equal to one and an imaginary number equal to zero.

    */
    public class var One : dotnet.System.Numerics.Complex {
        get {
        let __return = dotnet.System.Numerics.Complex(hndl: System_Numerics_Complex_get_One());
            return __return;
        }
    }
    // static field: System.Numerics.Complex Zero
    /**
    Returns a new  instance with a real number equal to zero and an imaginary number equal to zero.

    */
    public class var Zero : dotnet.System.Numerics.Complex {
        get {
        let __return = dotnet.System.Numerics.Complex(hndl: System_Numerics_Complex_get_Zero());
            return __return;
        }
    }
    /**
    Gets the imaginary component of the current  object.

    */
    public var Imaginary : Swift.Double {
        get {
            return try! get_Imaginary();
        }
    }
    /**
    Gets the magnitude (or absolute value) of a complex number.

    */
    public var Magnitude : Swift.Double {
        get {
            return try! get_Magnitude();
        }
    }
    /**
    Gets the phase of a complex number.

    */
    public var Phase : Swift.Double {
        get {
            return try! get_Phase();
        }
    }
    /**
    Gets the real component of the current  object.

    */
    public var Real : Swift.Double {
        get {
            return try! get_Real();
        }
    }
    // .ctor(System.Double, System.Double)
// docid: M:System.Numerics.Complex.#ctor(System.Double,System.Double)
    /**
    Initializes a new instance of the  structure using the specified real and imaginary values.

    - Parameter real: The real part of the complex number.
    - Parameter imaginary: The imaginary part of the complex number.
    */
    public init(real : Swift.Double, imaginary : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Complex_ctor_0__2__f64_f64(&__thrown, real, imaginary);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_Complex_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Double Abs(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Abs(System.Numerics.Complex)
    /**
    Gets the absolute value (or magnitude) of a complex number.

    - Parameter value: A complex number.
    - Returns: The absolute value of .

    */
    public class func Abs(value : dotnet.System.Numerics.Complex) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_f64__Abs_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Complex Acos(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Acos(System.Numerics.Complex)
    /**
    Returns the angle that is the arc cosine of the specified complex number.

    - Parameter value: A complex number that represents a cosine.
    - Returns: The angle, measured in radians, which is the arc cosine of .

    */
    public class func Acos(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Acos_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Add(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)
    /**
    Adds a double-precision real number to a complex number and returns the result.

    - Parameter left: The double-precision real value to add.
    - Parameter right: The complex value to add.
    - Returns: The sum of  and .

    */
    public class func Add(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Add_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Add(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)
    /**
    Adds a complex number to a double-precision real number and returns the result.

    - Parameter left: The complex value to add.
    - Parameter right: The double-precision real value to add.
    - Returns: The sum of  and .

    */
    public class func Add(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Add_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Add(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Adds two complex numbers and returns the result.

    - Parameter left: The first complex number to add.
    - Parameter right: The second complex number to add.
    - Returns: The sum of  and .

    */
    public class func Add(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Add_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Asin(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Asin(System.Numerics.Complex)
    /**
    Returns the angle that is the arc sine of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The angle which is the arc sine of .

    */
    public class func Asin(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Asin_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Atan(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Atan(System.Numerics.Complex)
    /**
    Returns the angle that is the arc tangent of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The angle that is the arc tangent of .

    */
    public class func Atan(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Atan_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Conjugate(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)
    /**
    Computes the conjugate of a complex number and returns the result.

    - Parameter value: A complex number.
    - Returns: The conjugate of .

    */
    public class func Conjugate(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Conjugate_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Cos(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Cos(System.Numerics.Complex)
    /**
    Returns the cosine of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The cosine of .

    */
    public class func Cos(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Cos_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Cosh(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Cosh(System.Numerics.Complex)
    /**
    Returns the hyperbolic cosine of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The hyperbolic cosine of .

    */
    public class func Cosh(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Cosh_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Divide(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)
    /**
    Divides one double-precision real number by a complex number and returns the result.

    - Parameter dividend: The double-precision real number to be divided.
    - Parameter divisor: The complex number to divide by.
    - Returns: The quotient of the division.

    */
    public class func Divide(dividend : Swift.Double, divisor : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Divide_0__2__f64_Complex(&__thrown, dividend, divisor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Divide(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)
    /**
    Divides one complex number by a double-precision real number and returns the result.

    - Parameter dividend: The complex number to be divided.
    - Parameter divisor: The double-precision real number to divide by.
    - Returns: The quotient of the division.

    */
    public class func Divide(dividend : dotnet.System.Numerics.Complex, divisor : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Divide_0__2__Complex_f64(&__thrown, dividend.get_handle(), divisor);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Divide(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Divides one complex number by another and returns the result.

    - Parameter dividend: The complex number to be divided.
    - Parameter divisor: The complex number to divide by.
    - Returns: The quotient of the division.

    */
    public class func Divide(dividend : dotnet.System.Numerics.Complex, divisor : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Divide_0__2__Complex_Complex(&__thrown, dividend.get_handle(), divisor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // bool Equals(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Equals(System.Numerics.Complex)
    /**
    Returns a value that indicates whether the current instance and a specified complex number have the same value.

    - Parameter value: The complex number to compare.
    - Returns: 
         if this complex number and  have the same value; otherwise, .

    */
    public func Equals(value : dotnet.System.Numerics.Complex) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__Equals_0__1__Complex(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Complex.Equals(System.Object)
    /**
    Returns a value that indicates whether the current instance and a specified object have the same value.

    - Parameter obj: The object to compare.
    - Returns: 
         if the  parameter is a  object or a type capable of implicit conversion to a  object, and its value is equal to the current  object; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Complex Exp(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Exp(System.Numerics.Complex)
    /**
    Returns  raised to the power specified by a complex number.

    - Parameter value: A complex number that specifies a power.
    - Returns: The number  raised to the power .

    */
    public class func Exp(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Exp_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex FromPolarCoordinates(System.Double, System.Double)
// docid: M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
    /**
    Creates a complex number from a point's polar coordinates.

    - Parameter magnitude: The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.
    - Parameter phase: The phase, which is the angle from the line to the horizontal axis, measured in radians.
    - Returns: A complex number.

    */
    public class func FromPolarCoordinates(magnitude : Swift.Double, phase : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__FromPolarCoordinates_0__2__f64_f64(&__thrown, magnitude, phase);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Complex.GetHashCode
    /**
    Returns the hash code for the current  object.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsFinite(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)
    /**
    Determines whether the specified complex number is finite.

    - Parameter value: A complex number.
    - Returns: 
         if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, .

    */
    public class func IsFinite(value : dotnet.System.Numerics.Complex) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__IsFinite_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsInfinity(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)
    /**
    Returns a value indicating whether the specified complex number evaluates to infinity.

    - Parameter value: A complex number.
    - Returns: 
         if either, the real or imaginary part are  or ; otherwise, .

    */
    public class func IsInfinity(value : dotnet.System.Numerics.Complex) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__IsInfinity_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNaN(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)
    /**
    Returns a value that indicates whether the specified complex instance is not a number (NaN).

    - Parameter value: A complex number.
    - Returns: 
         if the specified value is not finite nor infinite; otherwise, .

    */
    public class func IsNaN(value : dotnet.System.Numerics.Complex) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__IsNaN_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Complex Log(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Log(System.Numerics.Complex)
    /**
    Returns the natural (base ) logarithm of a specified complex number.

    - Parameter value: A complex number.
    - Returns: The natural (base ) logarithm of .

    */
    public class func Log(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Log_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Log(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
    /**
    Returns the logarithm of a specified complex number in a specified base.

    - Parameter value: A complex number.
    - Parameter baseValue: The base of the logarithm.
    - Returns: The logarithm of  in base .

    */
    public class func Log(value : dotnet.System.Numerics.Complex, baseValue : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Log_0__2__Complex_f64(&__thrown, value.get_handle(), baseValue);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Log10(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Log10(System.Numerics.Complex)
    /**
    Returns the base-10 logarithm of a specified complex number.

    - Parameter value: A complex number.
    - Returns: The base-10 logarithm of .

    */
    public class func Log10(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Log10_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Multiply(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)
    /**
    Returns the product of a double-precision real number and a complex number.

    - Parameter left: The double-precision real number to multiply.
    - Parameter right: The complex number to multiply.
    - Returns: The product of the  and  parameters.

    */
    public class func Multiply(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Multiply_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Multiply(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)
    /**
    Returns the product of a complex number and a double-precision real number.

    - Parameter left: The complex number to multiply.
    - Parameter right: The double-precision real number to multiply.
    - Returns: The product of the  and  parameters.

    */
    public class func Multiply(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Multiply_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Multiply(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Returns the product of two complex numbers.

    - Parameter left: The first complex number to multiply.
    - Parameter right: The second complex number to multiply.
    - Returns: The product of the  and  parameters.

    */
    public class func Multiply(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Multiply_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Negate(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Negate(System.Numerics.Complex)
    /**
    Returns the additive inverse of a specified complex number.

    - Parameter value: A complex number.
    - Returns: The result of the  and  components of the  parameter multiplied by -1.

    */
    public class func Negate(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Negate_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Addition(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)
    /**
    Adds a double-precision real number to a complex number.

    - Parameter left: The double-precision real value to add.
    - Parameter right: The complex value to add.
    - Returns: The sum of  and  as a complex number.

    */
    public class func op_Addition(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Addition_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Addition(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)
    /**
    Adds a complex number to a double-precision real number.

    - Parameter left: The complex value to add.
    - Parameter right: The double-precision real value to add.
    - Returns: The sum of  and  as a complex number.

    */
    public class func op_Addition(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Addition_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Addition(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Adds two complex numbers.

    - Parameter left: The first complex value to add.
    - Parameter right: The second complex value to add.
    - Returns: The sum of  and .

    */
    public class func op_Addition(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Addition_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Division(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)
    /**
    Divides a specified double-precision real number by a specified complex number.

    - Parameter left: The double-precision real value to be divided.
    - Parameter right: The complex value to divide by.
    - Returns: The result of dividing  by , as a complex number.

    */
    public class func op_Division(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Division_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Division(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)
    /**
    Divides a specified complex number by a specified double-precision real number.

    - Parameter left: The complex value to be divided.
    - Parameter right: The double-precision real value to divide by.
    - Returns: The result of dividing  by , as a complex number.

    */
    public class func op_Division(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Division_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Division(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Divides a specified complex number by another specified complex number.

    - Parameter left: The complex value to be divided.
    - Parameter right: The complex value to divide by.
    - Returns: The result of dividing  by .

    */
    public class func op_Division(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Division_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Returns a value that indicates whether two complex numbers are equal.

    - Parameter left: The first complex number to compare.
    - Parameter right: The second complex number to compare.
    - Returns: 
         if the  and  parameters have the same value; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__op_Equality_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Explicit(System.Decimal)
// docid: M:System.Numerics.Complex.op_Explicit(System.Decimal)
    public class func op_Explicit(value : dotnet.System.Decimal) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Explicit_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Explicit(System.Numerics.BigInteger)
// docid: M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)
    public class func op_Explicit(value : dotnet.System.Numerics.BigInteger) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Explicit_0__1__BigInteger(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.Byte)
// docid: M:System.Numerics.Complex.op_Implicit(System.Byte)
    public class func op_Implicit(value : Swift.UInt8) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__u8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.Double)
// docid: M:System.Numerics.Complex.op_Implicit(System.Double)
    public class func op_Implicit(value : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__f64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.Int16)
// docid: M:System.Numerics.Complex.op_Implicit(System.Int16)
    public class func op_Implicit(value : Swift.Int16) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__i16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.Int32)
// docid: M:System.Numerics.Complex.op_Implicit(System.Int32)
    public class func op_Implicit(value : Swift.Int32) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.Int64)
// docid: M:System.Numerics.Complex.op_Implicit(System.Int64)
    public class func op_Implicit(value : Swift.Int64) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.SByte)
// docid: M:System.Numerics.Complex.op_Implicit(System.SByte)
    public class func op_Implicit(value : Swift.Int8) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__i8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.Single)
// docid: M:System.Numerics.Complex.op_Implicit(System.Single)
    public class func op_Implicit(value : Swift.Float) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__f32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.UInt16)
// docid: M:System.Numerics.Complex.op_Implicit(System.UInt16)
    public class func op_Implicit(value : Swift.UInt16) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__u16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.UInt32)
// docid: M:System.Numerics.Complex.op_Implicit(System.UInt32)
    public class func op_Implicit(value : Swift.UInt32) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__u32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Implicit(System.UInt64)
// docid: M:System.Numerics.Complex.op_Implicit(System.UInt64)
    public class func op_Implicit(value : Swift.UInt64) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Implicit_0__1__u64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Returns a value that indicates whether two complex numbers are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_bool__op_Inequality_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Multiply(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)
    /**
    Multiplies a specified double-precision real number by a specified complex number.

    - Parameter left: The double-precision real value to multiply.
    - Parameter right: The complex value to multiply.
    - Returns: The product of  and , as a complex number.

    */
    public class func op_Multiply(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Multiply_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Multiply(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)
    /**
    Multiplies the specified complex number by a specified double-precision real number.

    - Parameter left: The complex value to multiply.
    - Parameter right: The double-precision real value to multiply.
    - Returns: The product of  and , as a complex number.

    */
    public class func op_Multiply(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Multiply_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Multiply(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Multiplies two specified complex numbers.

    - Parameter left: The first complex value to multiply.
    - Parameter right: The second complex value to multiply.
    - Returns: The product of  and .

    */
    public class func op_Multiply(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Multiply_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Subtraction(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)
    /**
    Subtracts a complex number from a double-precision real number.

    - Parameter left: The double-precision real value to subtract from (the minuend).
    - Parameter right: The complex value to subtract (the subtrahend).
    - Returns: The result of subtracting  from , as a complex number.

    */
    public class func op_Subtraction(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Subtraction_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Subtraction(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)
    /**
    Subtracts a double-precision real number from a complex number.

    - Parameter left: The complex value to subtract from (the minuend).
    - Parameter right: The double-precision real value to subtract (the subtrahend).
    - Returns: The result of subtracting  from , as a complex number.

    */
    public class func op_Subtraction(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Subtraction_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_Subtraction(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Subtracts a complex number from another complex number.

    - Parameter left: The value to subtract from (the minuend).
    - Parameter right: The value to subtract (the subtrahend).
    - Returns: The result of subtracting  from .

    */
    public class func op_Subtraction(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_Subtraction_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Complex op_UnaryNegation(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
    /**
    Returns the additive inverse of a specified complex number.

    - Parameter value: The value to negate.
    - Returns: The result of the  and  components of the  parameter multiplied by -1.

    */
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__op_UnaryNegation_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Pow(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
    /**
    Returns a specified complex number raised to a power specified by a double-precision floating-point number.

    - Parameter value: A complex number to be raised to a power.
    - Parameter power: A double-precision floating-point number that specifies a power.
    - Returns: The complex number  raised to the power .

    */
    public class func Pow(value : dotnet.System.Numerics.Complex, power : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Pow_0__2__Complex_f64(&__thrown, value.get_handle(), power);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Pow(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Returns a specified complex number raised to a power specified by a complex number.

    - Parameter value: A complex number to be raised to a power.
    - Parameter power: A complex number that specifies a power.
    - Returns: The complex number  raised to the power .

    */
    public class func Pow(value : dotnet.System.Numerics.Complex, power : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Pow_0__2__Complex_Complex(&__thrown, value.get_handle(), power.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Reciprocal(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
    /**
    Returns the multiplicative inverse of a complex number.

    - Parameter value: A complex number.
    - Returns: The reciprocal of .

    */
    public class func Reciprocal(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Reciprocal_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Sin(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Sin(System.Numerics.Complex)
    /**
    Returns the sine of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The sine of .

    */
    public class func Sin(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Sin_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Sinh(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Sinh(System.Numerics.Complex)
    /**
    Returns the hyperbolic sine of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The hyperbolic sine of .

    */
    public class func Sinh(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Sinh_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Sqrt(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)
    /**
    Returns the square root of a specified complex number.

    - Parameter value: A complex number.
    - Returns: The square root of .

    */
    public class func Sqrt(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Sqrt_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Subtract(System.Double, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)
    /**
    Subtracts one complex number from a double-precision real number and returns the result.

    - Parameter left: The double-precision real value to subtract from (the minuend).
    - Parameter right: The complex value to subtract (the subtrahend).
    - Returns: The result of subtracting  from , as a complex number.

    */
    public class func Subtract(left : Swift.Double, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Subtract_0__2__f64_Complex(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Subtract(System.Numerics.Complex, System.Double)
// docid: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)
    /**
    Subtracts one double-precision real number from a complex number and returns the result.

    - Parameter left: The complex value to subtract from (the minuend).
    - Parameter right: The double-precision real value to subtract (the subtrahend).
    - Returns: The result of subtracting  from , as a complex number.

    */
    public class func Subtract(left : dotnet.System.Numerics.Complex, right : Swift.Double) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Subtract_0__2__Complex_f64(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Subtract(System.Numerics.Complex, System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
    /**
    Subtracts one complex number from another and returns the result.

    - Parameter left: The value to subtract from (the minuend).
    - Parameter right: The value to subtract (the subtrahend).
    - Returns: The result of subtracting  from .

    */
    public class func Subtract(left : dotnet.System.Numerics.Complex, right : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Subtract_0__2__Complex_Complex(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Tan(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Tan(System.Numerics.Complex)
    /**
    Returns the tangent of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The tangent of .

    */
    public class func Tan(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Tan_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.Numerics.Complex Tanh(System.Numerics.Complex)
// docid: M:System.Numerics.Complex.Tanh(System.Numerics.Complex)
    /**
    Returns the hyperbolic tangent of the specified complex number.

    - Parameter value: A complex number.
    - Returns: The hyperbolic tangent of .

    */
    public class func Tanh(value : dotnet.System.Numerics.Complex) throws -> dotnet.System.Numerics.Complex {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_Complex__Tanh_0__1__Complex(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Complex(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Complex.ToString
    /**
    Converts the value of the current complex number to its equivalent string representation in Cartesian form.

    - Returns: The string representation of the current instance in Cartesian form.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.IFormatProvider)
// docid: M:System.Numerics.Complex.ToString(System.IFormatProvider)
    /**
    Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.

    - Parameter provider: An object that supplies culture-specific formatting information.
    - Returns: The string representation of the current instance in Cartesian form, as specified by .

    */
    public func ToString(provider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_String__ToString_0__1__IFormatProvider(&__thrown, self.get_handle(), provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String)
// docid: M:System.Numerics.Complex.ToString(System.String)
    /**
    Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.

    - Parameter format: A standard or custom numeric format string.
    - Returns: The string representation of the current instance in Cartesian form.

    */
    public func ToString(format : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_String__ToString_0__1__String(&__thrown, self.get_handle(), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.IFormatProvider)
// docid: M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
    /**
    Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.

    - Parameter format: A standard or custom numeric format string.
    - Parameter provider: An object that supplies culture-specific formatting information.
    - Returns: The string representation of the current instance in Cartesian form, as specified by  and .

    */
    public func ToString(format : Optional<dotnet.System.String>, provider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_String__ToString_0__2__String_IFormatProvider(&__thrown, self.get_handle(), format?.get_handle() ?? nil, provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double get_Imaginary()
// docid: M:System.Numerics.Complex.get_Imaginary
    public func get_Imaginary() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_f64__get_Imaginary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Double get_Magnitude()
// docid: M:System.Numerics.Complex.get_Magnitude
    public func get_Magnitude() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_f64__get_Magnitude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Double get_Phase()
// docid: M:System.Numerics.Complex.get_Phase
    public func get_Phase() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_f64__get_Phase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Double get_Real()
// docid: M:System.Numerics.Complex.get_Real
    public func get_Real() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Complex_f64__get_Real_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // Complex


}


