// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Xml
// System.Xml.Serialization
extension System.Xml.Serialization {
// type: System.Xml.Serialization.CodeGenerationOptions
    /**
    Specifies various options to use when generating .NET types for use with an XML Web Service.

    */
public struct CodeGenerationOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_CodeGenerationOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Serialization.CodeGenerationOptions None
    /**
    Represents primitive types by fields and primitive types by  namespace types.

    */
    public static var None : dotnet.System.Xml.Serialization.CodeGenerationOptions {
        get {
        let __return = dotnet.System.Xml.Serialization.CodeGenerationOptions(val: System_Xml_Serialization_CodeGenerationOptions_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.CodeGenerationOptions GenerateProperties
    /**
    Represents primitive types by properties.

    */
    public static var GenerateProperties : dotnet.System.Xml.Serialization.CodeGenerationOptions {
        get {
        let __return = dotnet.System.Xml.Serialization.CodeGenerationOptions(val: System_Xml_Serialization_CodeGenerationOptions_get_GenerateProperties());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.CodeGenerationOptions GenerateNewAsync
    /**
    Creates events for the asynchronous invocation of Web methods.

    */
    public static var GenerateNewAsync : dotnet.System.Xml.Serialization.CodeGenerationOptions {
        get {
        let __return = dotnet.System.Xml.Serialization.CodeGenerationOptions(val: System_Xml_Serialization_CodeGenerationOptions_get_GenerateNewAsync());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.CodeGenerationOptions GenerateOldAsync
    /**
    Creates Begin and End methods for the asynchronous invocation of Web methods.

    */
    public static var GenerateOldAsync : dotnet.System.Xml.Serialization.CodeGenerationOptions {
        get {
        let __return = dotnet.System.Xml.Serialization.CodeGenerationOptions(val: System_Xml_Serialization_CodeGenerationOptions_get_GenerateOldAsync());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.CodeGenerationOptions GenerateOrder
    /**
    Generates explicitly ordered serialization code as specified through the  property of the , , and  attributes.

    */
    public static var GenerateOrder : dotnet.System.Xml.Serialization.CodeGenerationOptions {
        get {
        let __return = dotnet.System.Xml.Serialization.CodeGenerationOptions(val: System_Xml_Serialization_CodeGenerationOptions_get_GenerateOrder());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.CodeGenerationOptions EnableDataBinding
    /**
    Enables data binding.

    */
    public static var EnableDataBinding : dotnet.System.Xml.Serialization.CodeGenerationOptions {
        get {
        let __return = dotnet.System.Xml.Serialization.CodeGenerationOptions(val: System_Xml_Serialization_CodeGenerationOptions_get_EnableDataBinding());
            return __return;
        }
    }
} // CodeGenerationOptions


// type: System.Xml.Serialization.CodeIdentifier
    /**
    Provides static methods to convert input text into names for code entities.

    */
open class CodeIdentifier
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_CodeIdentifier_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.CodeIdentifier.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_CodeIdentifier_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String MakeCamel(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)
    /**
    Produces a camel-case string from an input string.

    - Parameter identifier: The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.
    - Returns: A camel-case version of the parameter string.

    */
    open class func MakeCamel(identifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifier_String__MakeCamel_0__1__String(&__thrown, identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String MakePascal(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)
    /**
    Produces a Pascal-case string from an input string.

    - Parameter identifier: The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.
    - Returns: A Pascal-case version of the parameter string.

    */
    open class func MakePascal(identifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifier_String__MakePascal_0__1__String(&__thrown, identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String MakeValid(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)
    /**
    Produces a valid code entity name from an input string.

    - Parameter identifier: The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.
    - Returns: A string that can be used as a code identifier, such as the name of a method parameter.

    */
    open class func MakeValid(identifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifier_String__MakeValid_0__1__String(&__thrown, identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // CodeIdentifier


// type: System.Xml.Serialization.CodeIdentifiers
    /**
    Maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.

    */
open class CodeIdentifiers
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_CodeIdentifiers_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.CodeIdentifiers.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_CodeIdentifiers_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Xml.Serialization.CodeIdentifiers.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class and determines whether code identifiers are case sensitive.

    - Parameter caseSensitive: 
         if identifiers are case sensitive; otherwise, .
    */
    public init(caseSensitive : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_CodeIdentifiers_ctor_0__1__bool(&__thrown, Swift.Int32(caseSensitive ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.Object)
// docid: M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)
    /**
    Adds a named code entity or type mapping to the  instance's scope.

    - Parameter identifier: A name that is used to index the code entity.
    - Parameter value: The code entity or type mapping information.
    */
    open func Add(identifier : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_CodeIdentifiers_void__Add_0__2__String_Object(&__thrown, self.get_handle(), identifier.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddReserved(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)
    /**
    Prevents a specified name from being used within the  instance's scope.

    - Parameter identifier: A name that will not be available within the  instance's scope.
    */
    open func AddReserved(identifier : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_CodeIdentifiers_void__AddReserved_0__1__String(&__thrown, self.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String AddUnique(System.String, System.Object)
// docid: M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)
    /**
    Adds a named code entity or type mapping to the  instance's scope, ensuring that the name is unique within the scope.

    - Parameter identifier: A candidate name that is used to index the code entity.
    - Parameter value: The code entity or type mapping information.
    - Returns: The identifier parameter value or a modified string if there is a name collision.

    */
    open func AddUnique(identifier : dotnet.System.String, value : Optional<dotnet.System.Object>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifiers_String__AddUnique_0__2__String_Object(&__thrown, self.get_handle(), identifier.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Clear()
// docid: M:System.Xml.Serialization.CodeIdentifiers.Clear
    /**
    Removes all code entities or type mappings, including their names, from the  instance's scope.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_CodeIdentifiers_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsInUse(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)
    /**
    Determines whether a specified name is already being used within the  instance's scope.

    - Parameter identifier: The name to check for use within the  instance's scope.
    - Returns: 
         if the name is already in use; otherwise, .

    */
    open func IsInUse(identifier : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifiers_bool__IsInUse_0__1__String(&__thrown, self.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String MakeRightCase(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)
    /**
    Ensures that the input is of the correct case by modifying the name according to the value of the  property.

    - Parameter identifier: The name to possibly modify.
    - Returns: A string that is the same as the input identifier or has the first letter's case modified.

    */
    open func MakeRightCase(identifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifiers_String__MakeRightCase_0__1__String(&__thrown, self.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String MakeUnique(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)
    /**
    Determines whether the input name conflicts with another name within the  instance's scope and, if it does, generates a modified string.

    - Parameter identifier: The name to modify if it is not already unique.
    - Returns: The identifier parameter value or a modified string if there is a name collision.

    */
    open func MakeUnique(identifier : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifiers_String__MakeUnique_0__1__String(&__thrown, self.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Remove(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)
    /**
    Removes from the  instance's scope the code entity or type mapping identified by the input name.

    - Parameter identifier: The name of the code entity or type mapping information to remove.
    */
    open func Remove(identifier : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_CodeIdentifiers_void__Remove_0__1__String(&__thrown, self.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveReserved(System.String)
// docid: M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)
    /**
    Removes the input name from the  instance's reserved names.

    - Parameter identifier: A name that will be made available within the  instance's scope.
    */
    open func RemoveReserved(identifier : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_CodeIdentifiers_void__RemoveReserved_0__1__String(&__thrown, self.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object ToArray(System.Type)
// docid: M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)
    /**
    Returns an array of the code entities or type mappings within the  instance's scope.

    - Parameter type: The type of all the code entities or type mappings for the instance.
    - Returns: An array of the code entities or type mappings that is stored by the  object.

    */
    open func ToArray(type : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifiers_Object__ToArray_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_UseCamelCasing()
// docid: M:System.Xml.Serialization.CodeIdentifiers.get_UseCamelCasing
    open func get_UseCamelCasing() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_CodeIdentifiers_bool__get_UseCamelCasing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseCamelCasing(bool)
// docid: M:System.Xml.Serialization.CodeIdentifiers.set_UseCamelCasing(System.Boolean)
    open func set_UseCamelCasing(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_CodeIdentifiers_void__set_UseCamelCasing_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether the instance uses camel case.

    */
    open var UseCamelCasing : Bool {
        get {
            return try! get_UseCamelCasing();
        }
        set(v) {
            return try! set_UseCamelCasing(value: v);
        }
    }
} // CodeIdentifiers


// type: System.Xml.Serialization.IXmlTextParser
    /**
    Establishes a  property for use by the .NET Framework infrastructure.

    */
open class IXmlTextParser
    :
    SGBridgeGenericValue,
    System_Xml_Serialization_IXmlTextParser
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_IXmlTextParser_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_Normalized()
// docid: M:System.Xml.Serialization.IXmlTextParser.get_Normalized
    open func get_Normalized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_IXmlTextParser_bool__get_Normalized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Normalized(bool)
// docid: M:System.Xml.Serialization.IXmlTextParser.set_Normalized(System.Boolean)
    open func set_Normalized(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_IXmlTextParser_void__set_Normalized_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.WhitespaceHandling get_WhitespaceHandling()
// docid: M:System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling
    open func get_WhitespaceHandling() throws -> dotnet.System.Xml.WhitespaceHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_IXmlTextParser_WhitespaceHandling__get_WhitespaceHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.WhitespaceHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_WhitespaceHandling(System.Xml.WhitespaceHandling)
// docid: M:System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling(System.Xml.WhitespaceHandling)
    open func set_WhitespaceHandling(value : dotnet.System.Xml.WhitespaceHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_IXmlTextParser_void__set_WhitespaceHandling_0__1__WhitespaceHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IXmlTextParser


// type: System.Xml.Serialization.ImportContext
    /**
    Describes the context in which a set of schema is bound to .NET Framework code entities.

    */
open class ImportContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_ImportContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Serialization.CodeIdentifiers, bool)
// docid: M:System.Xml.Serialization.ImportContext.#ctor(System.Xml.Serialization.CodeIdentifiers,System.Boolean)
    /**
    Initializes a new instance of the  class for the given code identifiers, with the given type-sharing option.

    - Parameter identifiers: The code entities to which the context applies.
    - Parameter shareTypes: A  value that determines whether custom types are shared among schema.
    */
    public init(identifiers : Optional<dotnet.System.Xml.Serialization.CodeIdentifiers>, shareTypes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_ImportContext_ctor_0__2__CodeIdentifiers_bool(&__thrown, identifiers?.get_handle() ?? nil, Swift.Int32(shareTypes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_ShareTypes()
// docid: M:System.Xml.Serialization.ImportContext.get_ShareTypes
    open func get_ShareTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_ImportContext_bool__get_ShareTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.CodeIdentifiers get_TypeIdentifiers()
// docid: M:System.Xml.Serialization.ImportContext.get_TypeIdentifiers
    open func get_TypeIdentifiers() throws -> dotnet.System.Xml.Serialization.CodeIdentifiers {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_ImportContext_CodeIdentifiers__get_TypeIdentifiers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.CodeIdentifiers(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringCollection get_Warnings()
// docid: M:System.Xml.Serialization.ImportContext.get_Warnings
    open func get_Warnings() throws -> dotnet.System.Collections.Specialized.StringCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_ImportContext_StringCollection__get_Warnings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringCollection(hndl : __return);
        }
    }
    /**
    Gets a value that determines whether custom types are shared.

    */
    open var ShareTypes : Bool {
        get {
            return try! get_ShareTypes();
        }
    }
    /**
    Gets a set of code entities to which the context applies.

    */
    open var TypeIdentifiers : dotnet.System.Xml.Serialization.CodeIdentifiers {
        get {
            return try! get_TypeIdentifiers();
        }
    }
    /**
    Gets a collection of warnings that are generated when importing the code entity descriptions.

    */
    open var Warnings : dotnet.System.Collections.Specialized.StringCollection {
        get {
            return try! get_Warnings();
        }
    }
} // ImportContext


// type: System.Xml.Serialization.SchemaImporter
    /**
    Describes a schema importer.

    */
open class SchemaImporter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SchemaImporter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // SchemaImporter


// type: System.Xml.Serialization.SoapAttributeAttribute
    /**
    Specifies that the  must serialize the class member as an encoded SOAP attribute.

    */
open class SoapAttributeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapAttributeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapAttributeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified value as the name of the XML attribute.

    - Parameter attributeName: The name of the XML attribute.
    */
    public init(attributeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapAttributeAttribute_ctor_0__1__String(&__thrown, attributeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_AttributeName()
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.get_AttributeName
    open func get_AttributeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributeAttribute_String__get_AttributeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AttributeName(System.String)
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.set_AttributeName(System.String)
    open func set_AttributeName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributeAttribute_void__set_AttributeName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributeAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributeAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributeAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.SoapAttributeAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributeAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the XML attribute generated by the .

    */
    open var AttributeName : dotnet.System.String {
        get {
            return try! get_AttributeName();
        }
        set(v) {
            return try! set_AttributeName(value: v);
        }
    }
    /**
    Gets or sets the XML Schema definition language (XSD) data type of the SOAP attribute generated by the .

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the XML namespace of the XML attribute.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
} // SoapAttributeAttribute


// type: System.Xml.Serialization.SoapAttributeOverrides
    /**
    Allows you to override attributes applied to properties, fields, and classes when you use an  to serialize or deserialize an object as encoded SOAP.

    */
open class SoapAttributeOverrides
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapAttributeOverrides_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapAttributeOverrides.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapAttributeOverrides_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Type, System.String, System.Xml.Serialization.SoapAttributes)
// docid: M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)
    /**
    Adds a  to the collection of  objects contained by the . The  parameter specifies the object to be overridden by the . The  parameter specifies the name of a member that is overridden.

    - Parameter type: The  of the object to override.
    - Parameter member: The name of the member to override.
    - Parameter attributes: A  that represents the overriding attributes.
    */
    open func Add(type : dotnet.System.Type_, member : dotnet.System.String, attributes : Optional<dotnet.System.Xml.Serialization.SoapAttributes>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributeOverrides_void__Add_0__3__Type_String_SoapAttributes(&__thrown, self.get_handle(), type.get_handle(), member.get_handle(), attributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Type, System.Xml.Serialization.SoapAttributes)
// docid: M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)
    /**
    Adds a  to a collection of  objects. The  parameter specifies an object to be overridden by the .

    - Parameter type: The  of the object that is overridden.
    - Parameter attributes: A  that represents the overriding attributes.
    */
    open func Add(type : dotnet.System.Type_, attributes : Optional<dotnet.System.Xml.Serialization.SoapAttributes>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributeOverrides_void__Add_0__2__Type_SoapAttributes(&__thrown, self.get_handle(), type.get_handle(), attributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapAttributes get_Item(System.Type)
// docid: M:System.Xml.Serialization.SoapAttributeOverrides.get_Item(System.Type)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Xml.Serialization.SoapAttributes> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributeOverrides_SoapAttributes__get_Item_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.SoapAttributes(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapAttributes get_Item(System.Type, System.String)
// docid: M:System.Xml.Serialization.SoapAttributeOverrides.get_Item(System.Type,System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(type : dotnet.System.Type_, member : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Serialization.SoapAttributes> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributeOverrides_SoapAttributes__get_Item_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.SoapAttributes(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // SoapAttributeOverrides


// type: System.Xml.Serialization.SoapAttributes
    /**
    Represents a collection of attribute objects that control how the  serializes and deserializes SOAP methods.

    */
open class SoapAttributes
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapAttributes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapAttributes.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapAttributes_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Reflection.ICustomAttributeProvider)
// docid: M:System.Xml.Serialization.SoapAttributes.#ctor(System.Reflection.ICustomAttributeProvider)
    /**
    Initializes a new instance of the  class using the specified custom type.

    - Parameter provider: Any object that implements the  interface, such as the  class.
    */
    public init(provider : dotnet.System.Reflection.ICustomAttributeProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapAttributes_ctor_0__1__ICustomAttributeProvider(&__thrown, provider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapAttributeAttribute get_SoapAttribute()
// docid: M:System.Xml.Serialization.SoapAttributes.get_SoapAttribute
    open func get_SoapAttribute() throws -> Optional<dotnet.System.Xml.Serialization.SoapAttributeAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributes_SoapAttributeAttribute__get_SoapAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.SoapAttributeAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SoapAttribute(System.Xml.Serialization.SoapAttributeAttribute)
// docid: M:System.Xml.Serialization.SoapAttributes.set_SoapAttribute(System.Xml.Serialization.SoapAttributeAttribute)
    open func set_SoapAttribute(value : Optional<dotnet.System.Xml.Serialization.SoapAttributeAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributes_void__set_SoapAttribute_0__1__SoapAttributeAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_SoapDefaultValue()
// docid: M:System.Xml.Serialization.SoapAttributes.get_SoapDefaultValue
    open func get_SoapDefaultValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributes_Object__get_SoapDefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SoapDefaultValue(System.Object)
// docid: M:System.Xml.Serialization.SoapAttributes.set_SoapDefaultValue(System.Object)
    open func set_SoapDefaultValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributes_void__set_SoapDefaultValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapElementAttribute get_SoapElement()
// docid: M:System.Xml.Serialization.SoapAttributes.get_SoapElement
    open func get_SoapElement() throws -> Optional<dotnet.System.Xml.Serialization.SoapElementAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributes_SoapElementAttribute__get_SoapElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.SoapElementAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SoapElement(System.Xml.Serialization.SoapElementAttribute)
// docid: M:System.Xml.Serialization.SoapAttributes.set_SoapElement(System.Xml.Serialization.SoapElementAttribute)
    open func set_SoapElement(value : Optional<dotnet.System.Xml.Serialization.SoapElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributes_void__set_SoapElement_0__1__SoapElementAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapEnumAttribute get_SoapEnum()
// docid: M:System.Xml.Serialization.SoapAttributes.get_SoapEnum
    open func get_SoapEnum() throws -> Optional<dotnet.System.Xml.Serialization.SoapEnumAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributes_SoapEnumAttribute__get_SoapEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.SoapEnumAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SoapEnum(System.Xml.Serialization.SoapEnumAttribute)
// docid: M:System.Xml.Serialization.SoapAttributes.set_SoapEnum(System.Xml.Serialization.SoapEnumAttribute)
    open func set_SoapEnum(value : Optional<dotnet.System.Xml.Serialization.SoapEnumAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributes_void__set_SoapEnum_0__1__SoapEnumAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SoapIgnore()
// docid: M:System.Xml.Serialization.SoapAttributes.get_SoapIgnore
    open func get_SoapIgnore() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributes_bool__get_SoapIgnore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SoapIgnore(bool)
// docid: M:System.Xml.Serialization.SoapAttributes.set_SoapIgnore(System.Boolean)
    open func set_SoapIgnore(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributes_void__set_SoapIgnore_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapTypeAttribute get_SoapType()
// docid: M:System.Xml.Serialization.SoapAttributes.get_SoapType
    open func get_SoapType() throws -> Optional<dotnet.System.Xml.Serialization.SoapTypeAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapAttributes_SoapTypeAttribute__get_SoapType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.SoapTypeAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SoapType(System.Xml.Serialization.SoapTypeAttribute)
// docid: M:System.Xml.Serialization.SoapAttributes.set_SoapType(System.Xml.Serialization.SoapTypeAttribute)
    open func set_SoapType(value : Optional<dotnet.System.Xml.Serialization.SoapTypeAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapAttributes_void__set_SoapType_0__1__SoapTypeAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  to override.

    */
    open var SoapAttribute : Optional<dotnet.System.Xml.Serialization.SoapAttributeAttribute> {
        get {
            return try! get_SoapAttribute();
        }
        set(v) {
            return try! set_SoapAttribute(value: v!);
        }
    }
    /**
    Gets or sets the default value of an XML element or attribute.

    */
    open var SoapDefaultValue : Optional<dotnet.System.Object> {
        get {
            return try! get_SoapDefaultValue();
        }
        set(v) {
            return try! set_SoapDefaultValue(value: v!);
        }
    }
    /**
    Gets or sets a  to override.

    */
    open var SoapElement : Optional<dotnet.System.Xml.Serialization.SoapElementAttribute> {
        get {
            return try! get_SoapElement();
        }
        set(v) {
            return try! set_SoapElement(value: v!);
        }
    }
    /**
    Gets or sets an object that specifies how the  serializes a SOAP enumeration.

    */
    open var SoapEnum : Optional<dotnet.System.Xml.Serialization.SoapEnumAttribute> {
        get {
            return try! get_SoapEnum();
        }
        set(v) {
            return try! set_SoapEnum(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies whether the  serializes a public field or property as encoded SOAP XML.

    */
    open var SoapIgnore : Bool {
        get {
            return try! get_SoapIgnore();
        }
        set(v) {
            return try! set_SoapIgnore(value: v);
        }
    }
    /**
    Gets or sets an object that instructs the  how to serialize an object type into encoded SOAP XML.

    */
    open var SoapType : Optional<dotnet.System.Xml.Serialization.SoapTypeAttribute> {
        get {
            return try! get_SoapType();
        }
        set(v) {
            return try! set_SoapType(value: v!);
        }
    }
} // SoapAttributes


// type: System.Xml.Serialization.SoapElementAttribute
    /**
    Specifies that the public member value be serialized by the  as an encoded SOAP XML element.

    */
open class SoapElementAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapElementAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapElementAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapElementAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the XML element.

    - Parameter elementName: The XML element name of the serialized member.
    */
    public init(elementName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapElementAttribute_ctor_0__1__String(&__thrown, elementName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.SoapElementAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapElementAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.SoapElementAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapElementAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.SoapElementAttribute.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapElementAttribute_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ElementName(System.String)
// docid: M:System.Xml.Serialization.SoapElementAttribute.set_ElementName(System.String)
    open func set_ElementName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapElementAttribute_void__set_ElementName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Xml.Serialization.SoapElementAttribute.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapElementAttribute_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNullable(bool)
// docid: M:System.Xml.Serialization.SoapElementAttribute.set_IsNullable(System.Boolean)
    open func set_IsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapElementAttribute_void__set_IsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XML Schema definition language (XSD) data type of the generated XML element.

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the name of the generated XML element.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
        set(v) {
            return try! set_ElementName(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  must serialize a member that has the  attribute set to "1".

    */
    open var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
        set(v) {
            return try! set_IsNullable(value: v);
        }
    }
} // SoapElementAttribute


// type: System.Xml.Serialization.SoapEnumAttribute
    /**
    Controls how the  serializes an enumeration member.

    */
open class SoapEnumAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapEnumAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapEnumAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapEnumAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified element name.

    - Parameter name: The XML element name generated by the .
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapEnumAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Serialization.SoapEnumAttribute.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapEnumAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Serialization.SoapEnumAttribute.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapEnumAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the value generated in an XML document when the  serializes an enumeration, or the value recognized when it deserializes the enumeration member.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
} // SoapEnumAttribute


// type: System.Xml.Serialization.SoapIgnoreAttribute
    /**
    Instructs the  not to serialize the public field or public read/write property value.

    */
open class SoapIgnoreAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapIgnoreAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapIgnoreAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SoapIgnoreAttribute


// type: System.Xml.Serialization.SoapIncludeAttribute
    /**
    Allows the  to recognize a type when it serializes or deserializes an object as encoded SOAP XML.

    */
open class SoapIncludeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapIncludeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class using the specified type.

    - Parameter type: The type of the object to include.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapIncludeAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.SoapIncludeAttribute.get_Type
    open func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapIncludeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.SoapIncludeAttribute.set_Type(System.Type)
    open func set_Type(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapIncludeAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the type of the object to use when serializing or deserializing an object.

    */
    open var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // SoapIncludeAttribute


// type: System.Xml.Serialization.SoapReflectionImporter
    /**
    Generates mappings to SOAP-encoded messages from .NET Framework types or Web service method information.

    */
open class SoapReflectionImporter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapReflectionImporter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapReflectionImporter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapReflectionImporter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)
    /**
    Initializes a new instance of the  class, specifying a default XML namespace for imported type mappings.

    - Parameter defaultNamespace: The default XML namespace to use for imported type mappings.
    */
    public init(defaultNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapReflectionImporter_ctor_0__1__String(&__thrown, defaultNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.SoapAttributeOverrides)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)
    /**
    Initializes a new instance of the  class, specifying overrides for XML serialization.

    - Parameter attributeOverrides: A  object that overrides how the  class serializes mapped types using SOAP encoding.
    */
    public init(attributeOverrides : Optional<dotnet.System.Xml.Serialization.SoapAttributeOverrides>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapReflectionImporter_ctor_0__1__SoapAttributeOverrides(&__thrown, attributeOverrides?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.SoapAttributeOverrides, System.String)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)
    /**
    Initializes a new instance of the  class, specifying XML serialization overrides and a default XML namespace.

    - Parameter attributeOverrides: A  object that overrides how the  class serializes mapped types using SOAP encoding.
    - Parameter defaultNamespace: The default XML namespace to use for imported type mappings.
    */
    public init(attributeOverrides : Optional<dotnet.System.Xml.Serialization.SoapAttributeOverrides>, defaultNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapReflectionImporter_ctor_0__2__SoapAttributeOverrides_String(&__thrown, attributeOverrides?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[])
// docid: M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])
    /**
    Generates internal type mappings for information that is gathered from a Web service method.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of .NET Framework code entities that belong to a Web service method.
    - Returns: Internal .NET Framework type mappings to the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__3__String_String_XmlReflectionMemberArray(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool, bool)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)
    /**
    Generates internal type mappings for information that is gathered from a Web service method.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Parameter writeAccessors: 
         to indicate an RPC-style Web service binding;  to indicate a document-style Web service binding or a SOAP header.
    - Returns: Internal .NET Framework type mappings to the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool, writeAccessors : Bool) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__5__String_String_XmlReflectionMemberArray_bool_bool(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0), Swift.Int32(writeAccessors ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool, bool, bool)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)
    /**
    Generates internal type mappings for information that is gathered from a Web service method.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Parameter writeAccessors: 
         to indicate an RPC-style Web service binding;  to indicate a document-style Web service binding or a SOAP header.
    - Parameter validate: 
         to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, . This parameter's value is relevant only if the  parameter's value is .
    - Returns: Internal .NET Framework type mappings to the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool, writeAccessors : Bool, validate : Bool) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__6__String_String_XmlReflectionMemberArray_bool_bool_bool(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0), Swift.Int32(writeAccessors ? 1 : 0), Swift.Int32(validate ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool, bool, bool, System.Xml.Serialization.XmlMappingAccess)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)
    /**
    Generates internal type mappings for information that is gathered from a Web service method.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Parameter writeAccessors: 
         to indicate an RPC-style Web service binding;  to indicate a document-style Web service binding or a SOAP header.
    - Parameter validate: 
         to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, . This parameter's value is relevant only if the  parameter's value is .
    - Parameter access: One of the  values.
    - Returns: Internal .NET Framework type mappings to the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool, writeAccessors : Bool, validate : Bool, access : dotnet.System.Xml.Serialization.XmlMappingAccess) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__7__String_String_XmlReflectionMemberArray_bool_bool_bool_XmlMappingAccess(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0), Swift.Int32(writeAccessors ? 1 : 0), Swift.Int32(validate ? 1 : 0), access.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)
    /**
    Generates a mapping to an XML Schema element for a .NET Framework type.

    - Parameter type: The .NET Framework type for which to generate a type mapping.
    - Returns: Internal .NET Framework mapping of a type to an XML Schema element.

    */
    open func ImportTypeMapping(type : dotnet.System.Type_) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapReflectionImporter_XmlTypeMapping__ImportTypeMapping_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type, System.String)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)
    /**
    Generates a mapping to an XML Schema element for a .NET Framework type.

    - Parameter type: The .NET Framework type for which to generate a type mapping.
    - Parameter defaultNamespace: The default XML namespace to use.
    - Returns: Internal .NET Framework mapping of a type to an XML Schema element.

    */
    open func ImportTypeMapping(type : dotnet.System.Type_, defaultNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapReflectionImporter_XmlTypeMapping__ImportTypeMapping_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), defaultNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // void IncludeType(System.Type)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)
    /**
    Places mappings for a type in the  instance's context for later use when import methods are invoked.

    - Parameter type: The .NET Framework type for which to save type mapping information.
    */
    open func IncludeType(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapReflectionImporter_void__IncludeType_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void IncludeTypes(System.Reflection.ICustomAttributeProvider)
// docid: M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)
    /**
    Places mappings for derived types in the  instance's context for later use when import methods are invoked.

    - Parameter provider: An  reflection object that contains custom attributes that are derived from the  attribute.
    */
    open func IncludeTypes(provider : dotnet.System.Reflection.ICustomAttributeProvider) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapReflectionImporter_void__IncludeTypes_0__1__ICustomAttributeProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SoapReflectionImporter


// type: System.Xml.Serialization.SoapSchemaMember
    /**
    Represents certain attributes of a XSD <> element in a WSDL document for generating classes from the document.

    */
open class SoapSchemaMember
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapSchemaMember_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapSchemaMember.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapSchemaMember_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_MemberName()
// docid: M:System.Xml.Serialization.SoapSchemaMember.get_MemberName
    open func get_MemberName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapSchemaMember_String__get_MemberName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MemberName(System.String)
// docid: M:System.Xml.Serialization.SoapSchemaMember.set_MemberName(System.String)
    open func set_MemberName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapSchemaMember_void__set_MemberName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_MemberType()
// docid: M:System.Xml.Serialization.SoapSchemaMember.get_MemberType
    open func get_MemberType() throws -> Optional<dotnet.System.Xml.XmlQualifiedName> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapSchemaMember_XmlQualifiedName__get_MemberType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlQualifiedName(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MemberType(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Serialization.SoapSchemaMember.set_MemberType(System.Xml.XmlQualifiedName)
    open func set_MemberType(value : Optional<dotnet.System.Xml.XmlQualifiedName>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapSchemaMember_void__set_MemberType_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that corresponds to the name attribute of the WSDL part element.

    */
    open var MemberName : dotnet.System.String {
        get {
            return try! get_MemberName();
        }
        set(v) {
            return try! set_MemberName(value: v);
        }
    }
    /**
    Gets or sets a value that corresponds to the type attribute of the WSDL part element.

    */
    open var MemberType : Optional<dotnet.System.Xml.XmlQualifiedName> {
        get {
            return try! get_MemberType();
        }
        set(v) {
            return try! set_MemberType(value: v!);
        }
    }
} // SoapSchemaMember


// type: System.Xml.Serialization.SoapTypeAttribute
    /**
    Controls the schema generated by the  when a class instance is serialized as SOAP encoded XML.

    */
open class SoapTypeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_SoapTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.SoapTypeAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapTypeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the XML type.

    - Parameter typeName: The name of the XML type that the  generates when it serializes the class instance (and recognizes when it deserializes the class instance).
    */
    public init(typeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapTypeAttribute_ctor_0__1__String(&__thrown, typeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class and specifies the name and XML namespace of the type.

    - Parameter typeName: The name of the XML type that the  generates when it serializes the class instance (and recognizes when it deserializes the class instance).
    - Parameter ns: The XML namespace of the type.
    */
    public init(typeName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_SoapTypeAttribute_ctor_0__2__String_String(&__thrown, typeName?.get_handle() ?? nil, ns?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IncludeInSchema()
// docid: M:System.Xml.Serialization.SoapTypeAttribute.get_IncludeInSchema
    open func get_IncludeInSchema() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapTypeAttribute_bool__get_IncludeInSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeInSchema(bool)
// docid: M:System.Xml.Serialization.SoapTypeAttribute.set_IncludeInSchema(System.Boolean)
    open func set_IncludeInSchema(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapTypeAttribute_void__set_IncludeInSchema_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.SoapTypeAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapTypeAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.SoapTypeAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapTypeAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.Xml.Serialization.SoapTypeAttribute.get_TypeName
    open func get_TypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_SoapTypeAttribute_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TypeName(System.String)
// docid: M:System.Xml.Serialization.SoapTypeAttribute.set_TypeName(System.String)
    open func set_TypeName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_SoapTypeAttribute_void__set_TypeName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether to include the type in SOAP-encoded XML Schema documents.

    */
    open var IncludeInSchema : Bool {
        get {
            return try! get_IncludeInSchema();
        }
        set(v) {
            return try! set_IncludeInSchema(value: v);
        }
    }
    /**
    Gets or sets the namespace of the XML type.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the name of the XML type.

    */
    open var TypeName : dotnet.System.String {
        get {
            return try! get_TypeName();
        }
        set(v) {
            return try! set_TypeName(value: v);
        }
    }
} // SoapTypeAttribute


// type: System.Xml.Serialization.UnreferencedObjectEventArgs
    /**
    Provides data for the known, but unreferenced, object found in an encoded SOAP XML stream during deserialization.

    */
open class UnreferencedObjectEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_UnreferencedObjectEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.String)
// docid: M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter o: The unreferenced object.
    - Parameter id: A unique string used to identify the unreferenced object.
    */
    public init(o : Optional<dotnet.System.Object>, id : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_UnreferencedObjectEventArgs_ctor_0__2__Object_String(&__thrown, o?.get_handle() ?? nil, id?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_UnreferencedId()
// docid: M:System.Xml.Serialization.UnreferencedObjectEventArgs.get_UnreferencedId
    open func get_UnreferencedId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_UnreferencedObjectEventArgs_String__get_UnreferencedId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_UnreferencedObject()
// docid: M:System.Xml.Serialization.UnreferencedObjectEventArgs.get_UnreferencedObject
    open func get_UnreferencedObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_UnreferencedObjectEventArgs_Object__get_UnreferencedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the ID of the object.

    */
    open var UnreferencedId : Optional<dotnet.System.String> {
        get {
            return try! get_UnreferencedId();
        }
    }
    /**
    Gets the deserialized, but unreferenced, object.

    */
    open var UnreferencedObject : Optional<dotnet.System.Object> {
        get {
            return try! get_UnreferencedObject();
        }
    }
} // UnreferencedObjectEventArgs


// type: System.Xml.Serialization.UnreferencedObjectEventHandler
    /**
    Represents the method that handles the  event of an .

    */
public final class UnreferencedObjectEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_UnreferencedObjectEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.Serialization.UnreferencedObjectEventArgs)
// docid: M:System.Xml.Serialization.UnreferencedObjectEventHandler.Invoke(System.Object,System.Xml.Serialization.UnreferencedObjectEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_UnreferencedObjectEventHandler_void__Invoke_0__2__Object_UnreferencedObjectEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.Serialization.UnreferencedObjectEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.UnreferencedObjectEventHandler.BeginInvoke(System.Object,System.Xml.Serialization.UnreferencedObjectEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_UnreferencedObjectEventHandler_IAsyncResult__BeginInvoke_0__4__Object_UnreferencedObjectEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.UnreferencedObjectEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_UnreferencedObjectEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_UnreferencedObjectEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.Serialization.UnreferencedObjectEventArgs)
// docid: M:System.Xml.Serialization.UnreferencedObjectEventHandler.Invoke(System.Object,System.Xml.Serialization.UnreferencedObjectEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_UnreferencedObjectEventHandler_void__Invoke_0__2__Object_UnreferencedObjectEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // UnreferencedObjectEventHandler


// type: System.Xml.Serialization.XmlAnyElementAttributes
    /**
    Represents a collection of  objects.

    */
open class XmlAnyElementAttributes
    :
    dotnet.System.Collections.CollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAnyElementAttributes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAnyElementAttributes_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Xml.Serialization.XmlAnyElementAttribute)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)
    /**
    Adds an  to the collection.

    - Parameter attribute: The  to add.
    - Returns: The index of the newly added .

    */
    open func Add(attribute : Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttributes_i32__Add_0__1__XmlAnyElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Contains(System.Xml.Serialization.XmlAnyElementAttribute)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)
    /**
    Gets a value that indicates whether the specified  exists in the collection.

    - Parameter attribute: The  you are interested in.
    - Returns: 
         if the  exists in the collection; otherwise, .

    */
    open func Contains(attribute : Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttributes_bool__Contains_0__1__XmlAnyElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[], System.Int32)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[],System.Int32)
    /**
    Copies the entire collection to a compatible one-dimensional array of  objects, starting at the specified index of the target array.

    - Parameter array: The one-dimensional array of  objects that is the destination of the elements copied from the collection. The array must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttributes_void__CopyTo_0__2__XmlAnyElementAttributeArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)
    /**
    Gets the index of the specified .

    - Parameter attribute: The  whose index you want.
    - Returns: The index of the specified .

    */
    open func IndexOf(attribute : Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttributes_i32__IndexOf_0__1__XmlAnyElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Xml.Serialization.XmlAnyElementAttribute)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)
    /**
    Inserts an  into the collection at the specified index.

    - Parameter index: The index where the  is inserted.
    - Parameter attribute: The  to insert.
    */
    open func Insert(index : Swift.Int32, attribute : Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttributes_void__Insert_0__2__i32_XmlAnyElementAttribute(&__thrown, self.get_handle(), index, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Xml.Serialization.XmlAnyElementAttribute)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)
    /**
    Removes the specified  from the collection.

    - Parameter attribute: The  to remove.
    */
    open func Remove(attribute : Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttributes_void__Remove_0__1__XmlAnyElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAnyElementAttribute get_Item(System.Int32)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttributes_XmlAnyElementAttribute__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlAnyElementAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Xml.Serialization.XmlAnyElementAttribute)
// docid: M:System.Xml.Serialization.XmlAnyElementAttributes.set_Item(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Xml.Serialization.XmlAnyElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttributes_void__set_Item_0__2__i32_XmlAnyElementAttribute(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlAnyElementAttributes


// type: System.Xml.Serialization.XmlArrayAttribute
    /**
    Specifies that the  must serialize a particular class member as an array of XML elements.

    */
open class XmlArrayAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlArrayAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlArrayAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the XML element name generated in the XML document instance.

    - Parameter elementName: The name of the XML element that the  generates.
    */
    public init(elementName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayAttribute_ctor_0__1__String(&__thrown, elementName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.XmlArrayAttribute.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayAttribute_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ElementName(System.String)
// docid: M:System.Xml.Serialization.XmlArrayAttribute.set_ElementName(System.String)
    open func set_ElementName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayAttribute_void__set_ElementName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_Form()
// docid: M:System.Xml.Serialization.XmlArrayAttribute.get_Form
    open func get_Form() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayAttribute_XmlSchemaForm__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_Form(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Serialization.XmlArrayAttribute.set_Form(System.Xml.Schema.XmlSchemaForm)
    open func set_Form(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayAttribute_void__set_Form_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Xml.Serialization.XmlArrayAttribute.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayAttribute_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNullable(bool)
// docid: M:System.Xml.Serialization.XmlArrayAttribute.set_IsNullable(System.Boolean)
    open func set_IsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayAttribute_void__set_IsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlArrayAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlArrayAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.Xml.Serialization.XmlArrayAttribute.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:System.Xml.Serialization.XmlArrayAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XML element name given to the serialized array.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
        set(v) {
            return try! set_ElementName(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the XML element name generated by the  is qualified or unqualified.

    */
    open var Form : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  must serialize a member as an empty XML tag with the  attribute set to .

    */
    open var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
        set(v) {
            return try! set_IsNullable(value: v);
        }
    }
    /**
    Gets or sets the namespace of the XML element.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the explicit order in which the elements are serialized or deserialized.

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // XmlArrayAttribute


// type: System.Xml.Serialization.XmlArrayItemAttribute
    /**
    Represents an attribute that specifies the derived types that the  can place in a serialized array.

    */
open class XmlArrayItemAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlArrayItemAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayItemAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the XML element generated in the XML document.

    - Parameter elementName: The name of the XML element.
    */
    public init(elementName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayItemAttribute_ctor_0__1__String(&__thrown, elementName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class and specifies the name of the XML element generated in the XML document and the  that can be inserted into the generated XML document.

    - Parameter elementName: The name of the XML element.
    - Parameter type: The  of the object to serialize.
    */
    public init(elementName : Optional<dotnet.System.String>, type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayItemAttribute_ctor_0__2__String_Type(&__thrown, elementName?.get_handle() ?? nil, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class and specifies the  that can be inserted into the serialized array.

    - Parameter type: The  of the object to serialize.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayItemAttribute_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ElementName(System.String)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_ElementName(System.String)
    open func set_ElementName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_ElementName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_Form()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_Form
    open func get_Form() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_XmlSchemaForm__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_Form(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_Form(System.Xml.Schema.XmlSchemaForm)
    open func set_Form(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_Form_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNullable(bool)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_IsNullable(System.Boolean)
    open func set_IsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_IsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_NestingLevel()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_NestingLevel
    open func get_NestingLevel() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_i32__get_NestingLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_NestingLevel(System.Int32)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_NestingLevel(System.Int32)
    open func set_NestingLevel(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_NestingLevel_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.XmlArrayItemAttribute.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XML data type of the generated XML element.

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the name of the generated XML element.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
        set(v) {
            return try! set_ElementName(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the name of the generated XML element is qualified.

    */
    open var Form : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  must serialize a member as an empty XML tag with the  attribute set to .

    */
    open var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
        set(v) {
            return try! set_IsNullable(value: v);
        }
    }
    /**
    Gets or sets the namespace of the generated XML element.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the level in a hierarchy of XML elements that the  affects.

    */
    open var NestingLevel : Swift.Int32 {
        get {
            return try! get_NestingLevel();
        }
        set(v) {
            return try! set_NestingLevel(value: v);
        }
    }
    /**
    Gets or sets the type allowed in an array.

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // XmlArrayItemAttribute


// type: System.Xml.Serialization.XmlArrayItemAttributes
    /**
    Represents a collection of  objects.

    */
open class XmlArrayItemAttributes
    :
    dotnet.System.Collections.CollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlArrayItemAttributes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlArrayItemAttributes_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Xml.Serialization.XmlArrayItemAttribute)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)
    /**
    Adds an  to the collection.

    - Parameter attribute: The  to add to the collection.
    - Returns: The index of the added item.

    */
    open func Add(attribute : Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttributes_i32__Add_0__1__XmlArrayItemAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Contains(System.Xml.Serialization.XmlArrayItemAttribute)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.Contains(System.Xml.Serialization.XmlArrayItemAttribute)
    /**
    Determines whether the collection contains the specified .

    - Parameter attribute: The  to check for.
    - Returns: 
         if the collection contains the specified ; otherwise, .

    */
    open func Contains(attribute : Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttributes_bool__Contains_0__1__XmlArrayItemAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[], System.Int32)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[],System.Int32)
    /**
    Copies an  array to the collection, starting at a specified target index.

    - Parameter array: The array of  objects to copy to the collection.
    - Parameter index: The index at which the copied attributes begin.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttributes_void__CopyTo_0__2__XmlArrayItemAttributeArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)
    /**
    Returns the zero-based index of the first occurrence of the specified  in the collection or -1 if the attribute is not found in the collection.

    - Parameter attribute: The  to locate in the collection.
    - Returns: The first index of the  in the collection or -1 if the attribute is not found in the collection.

    */
    open func IndexOf(attribute : Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttributes_i32__IndexOf_0__1__XmlArrayItemAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Xml.Serialization.XmlArrayItemAttribute)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.Insert(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)
    /**
    Inserts an  into the collection at the specified index.

    - Parameter index: The index at which the attribute is inserted.
    - Parameter attribute: The  to insert.
    */
    open func Insert(index : Swift.Int32, attribute : Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttributes_void__Insert_0__2__i32_XmlArrayItemAttribute(&__thrown, self.get_handle(), index, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Xml.Serialization.XmlArrayItemAttribute)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.Remove(System.Xml.Serialization.XmlArrayItemAttribute)
    /**
    Removes an  from the collection, if it is present.

    - Parameter attribute: The  to remove.
    */
    open func Remove(attribute : Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttributes_void__Remove_0__1__XmlArrayItemAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlArrayItemAttribute get_Item(System.Int32)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlArrayItemAttributes_XmlArrayItemAttribute__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlArrayItemAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Xml.Serialization.XmlArrayItemAttribute)
// docid: M:System.Xml.Serialization.XmlArrayItemAttributes.set_Item(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Xml.Serialization.XmlArrayItemAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlArrayItemAttributes_void__set_Item_0__2__i32_XmlArrayItemAttribute(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlArrayItemAttributes


// type: System.Xml.Serialization.XmlAttributeEventArgs
    /**
    Provides data for the  event.

    */
open class XmlAttributeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAttributeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Xml.XmlAttribute get_Attr()
// docid: M:System.Xml.Serialization.XmlAttributeEventArgs.get_Attr
    open func get_Attr() throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeEventArgs_XmlAttribute__get_Attr_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ExpectedAttributes()
// docid: M:System.Xml.Serialization.XmlAttributeEventArgs.get_ExpectedAttributes
    open func get_ExpectedAttributes() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeEventArgs_String__get_ExpectedAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.Serialization.XmlAttributeEventArgs.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeEventArgs_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.Serialization.XmlAttributeEventArgs.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeEventArgs_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_ObjectBeingDeserialized()
// docid: M:System.Xml.Serialization.XmlAttributeEventArgs.get_ObjectBeingDeserialized
    open func get_ObjectBeingDeserialized() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeEventArgs_Object__get_ObjectBeingDeserialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets an object that represents the unknown XML attribute.

    */
    open var Attr : dotnet.System.Xml.XmlAttribute {
        get {
            return try! get_Attr();
        }
    }
    /**
    Gets a comma-delimited list of XML attribute names expected to be in an XML document instance.

    */
    open var ExpectedAttributes : dotnet.System.String {
        get {
            return try! get_ExpectedAttributes();
        }
    }
    /**
    Gets the line number of the unknown XML attribute.

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the position in the line of the unknown XML attribute.

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the object being deserialized.

    */
    open var ObjectBeingDeserialized : Optional<dotnet.System.Object> {
        get {
            return try! get_ObjectBeingDeserialized();
        }
    }
} // XmlAttributeEventArgs


// type: System.Xml.Serialization.XmlAttributeEventHandler
    /**
    Represents the method that handles the 

    */
public final class XmlAttributeEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAttributeEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.Serialization.XmlAttributeEventArgs)
// docid: M:System.Xml.Serialization.XmlAttributeEventHandler.Invoke(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlAttributeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeEventHandler_void__Invoke_0__2__Object_XmlAttributeEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.Serialization.XmlAttributeEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlAttributeEventHandler.BeginInvoke(System.Object,System.Xml.Serialization.XmlAttributeEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlAttributeEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeEventHandler_IAsyncResult__BeginInvoke_0__4__Object_XmlAttributeEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlAttributeEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlAttributeEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Xml.Serialization.XmlAttributeEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributeEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.Serialization.XmlAttributeEventArgs)
// docid: M:System.Xml.Serialization.XmlAttributeEventHandler.Invoke(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlAttributeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeEventHandler_void__Invoke_0__2__Object_XmlAttributeEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlAttributeEventHandler


// type: System.Xml.Serialization.XmlAttributeOverrides
    /**
    Allows you to override property, field, and class attributes when you use the  to serialize or deserialize an object.

    */
open class XmlAttributeOverrides
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAttributeOverrides_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlAttributeOverrides.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributeOverrides_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Type, System.String, System.Xml.Serialization.XmlAttributes)
// docid: M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)
    /**
    Adds an  object to the collection of  objects. The  parameter specifies an object to be overridden. The  parameter specifies the name of a member that is overridden.

    - Parameter type: The  of the object to override.
    - Parameter member: The name of the member to override.
    - Parameter attributes: An  object that represents the overriding attributes.
    */
    open func Add(type : dotnet.System.Type_, member : dotnet.System.String, attributes : Optional<dotnet.System.Xml.Serialization.XmlAttributes>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeOverrides_void__Add_0__3__Type_String_XmlAttributes(&__thrown, self.get_handle(), type.get_handle(), member.get_handle(), attributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Type, System.Xml.Serialization.XmlAttributes)
// docid: M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)
    /**
    Adds an  object to the collection of  objects. The  parameter specifies an object to be overridden by the  object.

    - Parameter type: The  of the object that is overridden.
    - Parameter attributes: An  object that represents the overriding attributes.
    */
    open func Add(type : dotnet.System.Type_, attributes : dotnet.System.Xml.Serialization.XmlAttributes) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeOverrides_void__Add_0__2__Type_XmlAttributes(&__thrown, self.get_handle(), type.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAttributes get_Item(System.Type)
// docid: M:System.Xml.Serialization.XmlAttributeOverrides.get_Item(System.Type)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Xml.Serialization.XmlAttributes> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeOverrides_XmlAttributes__get_Item_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlAttributes(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAttributes get_Item(System.Type, System.String)
// docid: M:System.Xml.Serialization.XmlAttributeOverrides.get_Item(System.Type,System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(type : dotnet.System.Type_, member : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Serialization.XmlAttributes> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeOverrides_XmlAttributes__get_Item_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlAttributes(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlAttributeOverrides


// type: System.Xml.Serialization.XmlAttributes
    /**
    Represents a collection of attribute objects that control how the  serializes and deserializes an object.

    */
open class XmlAttributes
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAttributes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlAttributes.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributes_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Reflection.ICustomAttributeProvider)
// docid: M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)
    /**
    Initializes a new instance of the  class and customizes how the  serializes and deserializes an object.

    - Parameter provider: A class that can provide alternative implementations of attributes that control XML serialization.
    */
    public init(provider : dotnet.System.Reflection.ICustomAttributeProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributes_ctor_0__1__ICustomAttributeProvider(&__thrown, provider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAnyAttributeAttribute get_XmlAnyAttribute()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlAnyAttribute
    open func get_XmlAnyAttribute() throws -> Optional<dotnet.System.Xml.Serialization.XmlAnyAttributeAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlAnyAttributeAttribute__get_XmlAnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlAnyAttributeAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlAnyAttribute(System.Xml.Serialization.XmlAnyAttributeAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlAnyAttribute(System.Xml.Serialization.XmlAnyAttributeAttribute)
    open func set_XmlAnyAttribute(value : Optional<dotnet.System.Xml.Serialization.XmlAnyAttributeAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlAnyAttribute_0__1__XmlAnyAttributeAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAnyElementAttributes get_XmlAnyElements()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlAnyElements
    open func get_XmlAnyElements() throws -> dotnet.System.Xml.Serialization.XmlAnyElementAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlAnyElementAttributes__get_XmlAnyElements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlAnyElementAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlArrayAttribute get_XmlArray()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlArray
    open func get_XmlArray() throws -> Optional<dotnet.System.Xml.Serialization.XmlArrayAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlArrayAttribute__get_XmlArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlArrayAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlArray(System.Xml.Serialization.XmlArrayAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlArray(System.Xml.Serialization.XmlArrayAttribute)
    open func set_XmlArray(value : Optional<dotnet.System.Xml.Serialization.XmlArrayAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlArray_0__1__XmlArrayAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlArrayItemAttributes get_XmlArrayItems()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlArrayItems
    open func get_XmlArrayItems() throws -> dotnet.System.Xml.Serialization.XmlArrayItemAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlArrayItemAttributes__get_XmlArrayItems_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlArrayItemAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAttributeAttribute get_XmlAttribute()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlAttribute
    open func get_XmlAttribute() throws -> Optional<dotnet.System.Xml.Serialization.XmlAttributeAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlAttributeAttribute__get_XmlAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlAttributeAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlAttribute(System.Xml.Serialization.XmlAttributeAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlAttribute(System.Xml.Serialization.XmlAttributeAttribute)
    open func set_XmlAttribute(value : Optional<dotnet.System.Xml.Serialization.XmlAttributeAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlAttribute_0__1__XmlAttributeAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlChoiceIdentifier
    open func get_XmlChoiceIdentifier() throws -> Optional<dotnet.System.Xml.Serialization.XmlChoiceIdentifierAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlChoiceIdentifierAttribute__get_XmlChoiceIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlChoiceIdentifierAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_XmlDefaultValue()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlDefaultValue
    open func get_XmlDefaultValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_Object__get_XmlDefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlDefaultValue(System.Object)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlDefaultValue(System.Object)
    open func set_XmlDefaultValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlDefaultValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlElementAttributes get_XmlElements()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlElements
    open func get_XmlElements() throws -> dotnet.System.Xml.Serialization.XmlElementAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlElementAttributes__get_XmlElements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlElementAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlEnumAttribute get_XmlEnum()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlEnum
    open func get_XmlEnum() throws -> Optional<dotnet.System.Xml.Serialization.XmlEnumAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlEnumAttribute__get_XmlEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlEnumAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlEnum(System.Xml.Serialization.XmlEnumAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlEnum(System.Xml.Serialization.XmlEnumAttribute)
    open func set_XmlEnum(value : Optional<dotnet.System.Xml.Serialization.XmlEnumAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlEnum_0__1__XmlEnumAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_XmlIgnore()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlIgnore
    open func get_XmlIgnore() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_bool__get_XmlIgnore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_XmlIgnore(bool)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlIgnore(System.Boolean)
    open func set_XmlIgnore(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlIgnore_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Xmlns()
// docid: M:System.Xml.Serialization.XmlAttributes.get_Xmlns
    open func get_Xmlns() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_bool__get_Xmlns_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Xmlns(bool)
// docid: M:System.Xml.Serialization.XmlAttributes.set_Xmlns(System.Boolean)
    open func set_Xmlns(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_Xmlns_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlRootAttribute get_XmlRoot()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlRoot
    open func get_XmlRoot() throws -> Optional<dotnet.System.Xml.Serialization.XmlRootAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlRootAttribute__get_XmlRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlRootAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlRoot(System.Xml.Serialization.XmlRootAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlRoot(System.Xml.Serialization.XmlRootAttribute)
    open func set_XmlRoot(value : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlRoot_0__1__XmlRootAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlTextAttribute get_XmlText()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlText
    open func get_XmlText() throws -> Optional<dotnet.System.Xml.Serialization.XmlTextAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlTextAttribute__get_XmlText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlTextAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlText(System.Xml.Serialization.XmlTextAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlText(System.Xml.Serialization.XmlTextAttribute)
    open func set_XmlText(value : Optional<dotnet.System.Xml.Serialization.XmlTextAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlText_0__1__XmlTextAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlTypeAttribute get_XmlType()
// docid: M:System.Xml.Serialization.XmlAttributes.get_XmlType
    open func get_XmlType() throws -> Optional<dotnet.System.Xml.Serialization.XmlTypeAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributes_XmlTypeAttribute__get_XmlType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlTypeAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XmlType(System.Xml.Serialization.XmlTypeAttribute)
// docid: M:System.Xml.Serialization.XmlAttributes.set_XmlType(System.Xml.Serialization.XmlTypeAttribute)
    open func set_XmlType(value : Optional<dotnet.System.Xml.Serialization.XmlTypeAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributes_void__set_XmlType_0__1__XmlTypeAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  to override.

    */
    open var XmlAnyAttribute : Optional<dotnet.System.Xml.Serialization.XmlAnyAttributeAttribute> {
        get {
            return try! get_XmlAnyAttribute();
        }
        set(v) {
            return try! set_XmlAnyAttribute(value: v!);
        }
    }
    /**
    Gets the collection of  objects to override.

    */
    open var XmlAnyElements : dotnet.System.Xml.Serialization.XmlAnyElementAttributes {
        get {
            return try! get_XmlAnyElements();
        }
    }
    /**
    Gets or sets an object that specifies how the  serializes a public field or read/write property that returns an array.

    */
    open var XmlArray : Optional<dotnet.System.Xml.Serialization.XmlArrayAttribute> {
        get {
            return try! get_XmlArray();
        }
        set(v) {
            return try! set_XmlArray(value: v!);
        }
    }
    /**
    Gets or sets a collection of objects that specify how the  serializes items inserted into an array returned by a public field or read/write property.

    */
    open var XmlArrayItems : dotnet.System.Xml.Serialization.XmlArrayItemAttributes {
        get {
            return try! get_XmlArrayItems();
        }
    }
    /**
    Gets or sets an object that specifies how the  serializes a public field or public read/write property as an XML attribute.

    */
    open var XmlAttribute : Optional<dotnet.System.Xml.Serialization.XmlAttributeAttribute> {
        get {
            return try! get_XmlAttribute();
        }
        set(v) {
            return try! set_XmlAttribute(value: v!);
        }
    }
    /**
    Gets or sets an object that allows you to distinguish between a set of choices.

    */
    open var XmlChoiceIdentifier : Optional<dotnet.System.Xml.Serialization.XmlChoiceIdentifierAttribute> {
        get {
            return try! get_XmlChoiceIdentifier();
        }
    }
    /**
    Gets or sets the default value of an XML element or attribute.

    */
    open var XmlDefaultValue : Optional<dotnet.System.Object> {
        get {
            return try! get_XmlDefaultValue();
        }
        set(v) {
            return try! set_XmlDefaultValue(value: v!);
        }
    }
    /**
    Gets a collection of objects that specify how the  serializes a public field or read/write property as an XML element.

    */
    open var XmlElements : dotnet.System.Xml.Serialization.XmlElementAttributes {
        get {
            return try! get_XmlElements();
        }
    }
    /**
    Gets or sets an object that specifies how the  serializes an enumeration member.

    */
    open var XmlEnum : Optional<dotnet.System.Xml.Serialization.XmlEnumAttribute> {
        get {
            return try! get_XmlEnum();
        }
        set(v) {
            return try! set_XmlEnum(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies whether or not the  serializes a public field or public read/write property.

    */
    open var XmlIgnore : Bool {
        get {
            return try! get_XmlIgnore();
        }
        set(v) {
            return try! set_XmlIgnore(value: v);
        }
    }
    /**
    Gets or sets an object that specifies how the  serializes a class as an XML root element.

    */
    open var XmlRoot : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute> {
        get {
            return try! get_XmlRoot();
        }
        set(v) {
            return try! set_XmlRoot(value: v!);
        }
    }
    /**
    Gets or sets an object that instructs the  to serialize a public field or public read/write property as XML text.

    */
    open var XmlText : Optional<dotnet.System.Xml.Serialization.XmlTextAttribute> {
        get {
            return try! get_XmlText();
        }
        set(v) {
            return try! set_XmlText(value: v!);
        }
    }
    /**
    Gets or sets an object that specifies how the  serializes a class to which the  has been applied.

    */
    open var XmlType : Optional<dotnet.System.Xml.Serialization.XmlTypeAttribute> {
        get {
            return try! get_XmlType();
        }
        set(v) {
            return try! set_XmlType(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an  object is overridden.

    */
    open var Xmlns : Bool {
        get {
            return try! get_Xmlns();
        }
        set(v) {
            return try! set_Xmlns(value: v);
        }
    }
} // XmlAttributes


// type: System.Xml.Serialization.XmlChoiceIdentifierAttribute
    /**
    Specifies that the member can be further detected by using an enumeration.

    */
open class XmlChoiceIdentifierAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlChoiceIdentifierAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlChoiceIdentifierAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The member name that returns the enumeration used to detect a choice.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlChoiceIdentifierAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_MemberName()
// docid: M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.get_MemberName
    open func get_MemberName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlChoiceIdentifierAttribute_String__get_MemberName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MemberName(System.String)
// docid: M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.set_MemberName(System.String)
    open func set_MemberName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlChoiceIdentifierAttribute_void__set_MemberName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the field that returns the enumeration to use when detecting types.

    */
    open var MemberName : dotnet.System.String {
        get {
            return try! get_MemberName();
        }
        set(v) {
            return try! set_MemberName(value: v);
        }
    }
} // XmlChoiceIdentifierAttribute


// type: System.Xml.Serialization.XmlDeserializationEvents
// boxed value type
    /**
    Contains fields that can be used to pass event delegates to a thread-safe  method of the .

    */
public final class XmlDeserializationEvents
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlDeserializationEvents_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var OnUnknownAttribute : Optional<dotnet.System.Xml.Serialization.XmlAttributeEventHandler> {
        get {
            return try! get_OnUnknownAttribute();
        }
        set(v) {
            return try! set_OnUnknownAttribute(value: v!);
        }
    }
    public var OnUnknownElement : Optional<dotnet.System.Xml.Serialization.XmlElementEventHandler> {
        get {
            return try! get_OnUnknownElement();
        }
        set(v) {
            return try! set_OnUnknownElement(value: v!);
        }
    }
    public var OnUnknownNode : Optional<dotnet.System.Xml.Serialization.XmlNodeEventHandler> {
        get {
            return try! get_OnUnknownNode();
        }
        set(v) {
            return try! set_OnUnknownNode(value: v!);
        }
    }
    public var OnUnreferencedObject : Optional<dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler> {
        get {
            return try! get_OnUnreferencedObject();
        }
        set(v) {
            return try! set_OnUnreferencedObject(value: v!);
        }
    }
    public override init() {
        let h = System_Xml_Serialization_XmlDeserializationEvents_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAttributeEventHandler get_OnUnknownAttribute()
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.get_OnUnknownAttribute
    public func get_OnUnknownAttribute() throws -> Optional<dotnet.System.Xml.Serialization.XmlAttributeEventHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlDeserializationEvents_XmlAttributeEventHandler__get_OnUnknownAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlAttributeEventHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OnUnknownAttribute(System.Xml.Serialization.XmlAttributeEventHandler)
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.set_OnUnknownAttribute(System.Xml.Serialization.XmlAttributeEventHandler)
    public func set_OnUnknownAttribute(value : Optional<dotnet.System.Xml.Serialization.XmlAttributeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlDeserializationEvents_void__set_OnUnknownAttribute_0__1__XmlAttributeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_OnUnknownAttribute(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlAttributeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlAttributeEventHandler(value);
        return try set_OnUnknownAttribute(value: del_value);
    }
    // [IsSpecialName] System.Xml.Serialization.XmlElementEventHandler get_OnUnknownElement()
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.get_OnUnknownElement
    public func get_OnUnknownElement() throws -> Optional<dotnet.System.Xml.Serialization.XmlElementEventHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlDeserializationEvents_XmlElementEventHandler__get_OnUnknownElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlElementEventHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OnUnknownElement(System.Xml.Serialization.XmlElementEventHandler)
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.set_OnUnknownElement(System.Xml.Serialization.XmlElementEventHandler)
    public func set_OnUnknownElement(value : Optional<dotnet.System.Xml.Serialization.XmlElementEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlDeserializationEvents_void__set_OnUnknownElement_0__1__XmlElementEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_OnUnknownElement(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlElementEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlElementEventHandler(value);
        return try set_OnUnknownElement(value: del_value);
    }
    // [IsSpecialName] System.Xml.Serialization.XmlNodeEventHandler get_OnUnknownNode()
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.get_OnUnknownNode
    public func get_OnUnknownNode() throws -> Optional<dotnet.System.Xml.Serialization.XmlNodeEventHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlDeserializationEvents_XmlNodeEventHandler__get_OnUnknownNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlNodeEventHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OnUnknownNode(System.Xml.Serialization.XmlNodeEventHandler)
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.set_OnUnknownNode(System.Xml.Serialization.XmlNodeEventHandler)
    public func set_OnUnknownNode(value : Optional<dotnet.System.Xml.Serialization.XmlNodeEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlDeserializationEvents_void__set_OnUnknownNode_0__1__XmlNodeEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_OnUnknownNode(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlNodeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlNodeEventHandler(value);
        return try set_OnUnknownNode(value: del_value);
    }
    // [IsSpecialName] System.Xml.Serialization.UnreferencedObjectEventHandler get_OnUnreferencedObject()
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.get_OnUnreferencedObject
    public func get_OnUnreferencedObject() throws -> Optional<dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlDeserializationEvents_UnreferencedObjectEventHandler__get_OnUnreferencedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OnUnreferencedObject(System.Xml.Serialization.UnreferencedObjectEventHandler)
// docid: M:System.Xml.Serialization.XmlDeserializationEvents.set_OnUnreferencedObject(System.Xml.Serialization.UnreferencedObjectEventHandler)
    public func set_OnUnreferencedObject(value : Optional<dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlDeserializationEvents_void__set_OnUnreferencedObject_0__1__UnreferencedObjectEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_OnUnreferencedObject(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler(value);
        return try set_OnUnreferencedObject(value: del_value);
    }
} // XmlDeserializationEvents


// type: System.Xml.Serialization.XmlElementAttributes
    /**
    Represents a collection of  objects used by the  to override the default way it serializes a class.

    */
open class XmlElementAttributes
    :
    dotnet.System.Collections.CollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlElementAttributes_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlElementAttributes.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlElementAttributes_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Xml.Serialization.XmlElementAttribute)
// docid: M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)
    /**
    Adds an  to the collection.

    - Parameter attribute: The  to add.
    - Returns: The zero-based index of the newly added item.

    */
    open func Add(attribute : Optional<dotnet.System.Xml.Serialization.XmlElementAttribute>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttributes_i32__Add_0__1__XmlElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Contains(System.Xml.Serialization.XmlElementAttribute)
// docid: M:System.Xml.Serialization.XmlElementAttributes.Contains(System.Xml.Serialization.XmlElementAttribute)
    /**
    Determines whether the collection contains the specified object.

    - Parameter attribute: The  to look for.
    - Returns: 
         if the object exists in the collection; otherwise, .

    */
    open func Contains(attribute : Optional<dotnet.System.Xml.Serialization.XmlElementAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttributes_bool__Contains_0__1__XmlElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Serialization.XmlElementAttribute[], System.Int32)
// docid: M:System.Xml.Serialization.XmlElementAttributes.CopyTo(System.Xml.Serialization.XmlElementAttribute[],System.Int32)
    /**
    Copies the , or a portion of it to a one-dimensional array.

    - Parameter array: The  array to hold the copied elements.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlElementAttribute>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttributes_void__CopyTo_0__2__XmlElementAttributeArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Xml.Serialization.XmlElementAttribute)
// docid: M:System.Xml.Serialization.XmlElementAttributes.IndexOf(System.Xml.Serialization.XmlElementAttribute)
    /**
    Gets the index of the specified .

    - Parameter attribute: The  whose index is being retrieved.
    - Returns: The zero-based index of the .

    */
    open func IndexOf(attribute : Optional<dotnet.System.Xml.Serialization.XmlElementAttribute>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttributes_i32__IndexOf_0__1__XmlElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Xml.Serialization.XmlElementAttribute)
// docid: M:System.Xml.Serialization.XmlElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlElementAttribute)
    /**
    Inserts an  into the collection.

    - Parameter index: The zero-based index where the member is inserted.
    - Parameter attribute: The  to insert.
    */
    open func Insert(index : Swift.Int32, attribute : Optional<dotnet.System.Xml.Serialization.XmlElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttributes_void__Insert_0__2__i32_XmlElementAttribute(&__thrown, self.get_handle(), index, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Xml.Serialization.XmlElementAttribute)
// docid: M:System.Xml.Serialization.XmlElementAttributes.Remove(System.Xml.Serialization.XmlElementAttribute)
    /**
    Removes the specified object from the collection.

    - Parameter attribute: The  to remove from the collection.
    */
    open func Remove(attribute : Optional<dotnet.System.Xml.Serialization.XmlElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttributes_void__Remove_0__1__XmlElementAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlElementAttribute get_Item(System.Int32)
// docid: M:System.Xml.Serialization.XmlElementAttributes.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Xml.Serialization.XmlElementAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttributes_XmlElementAttribute__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlElementAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Xml.Serialization.XmlElementAttribute)
// docid: M:System.Xml.Serialization.XmlElementAttributes.set_Item(System.Int32,System.Xml.Serialization.XmlElementAttribute)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Xml.Serialization.XmlElementAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttributes_void__set_Item_0__2__i32_XmlElementAttribute(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlElementAttributes


// type: System.Xml.Serialization.XmlElementEventArgs
    /**
    Provides data for the  event.

    */
open class XmlElementEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlElementEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Xml.XmlElement get_Element()
// docid: M:System.Xml.Serialization.XmlElementEventArgs.get_Element
    open func get_Element() throws -> dotnet.System.Xml.XmlElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementEventArgs_XmlElement__get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlElement(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ExpectedElements()
// docid: M:System.Xml.Serialization.XmlElementEventArgs.get_ExpectedElements
    open func get_ExpectedElements() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementEventArgs_String__get_ExpectedElements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.Serialization.XmlElementEventArgs.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementEventArgs_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.Serialization.XmlElementEventArgs.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementEventArgs_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_ObjectBeingDeserialized()
// docid: M:System.Xml.Serialization.XmlElementEventArgs.get_ObjectBeingDeserialized
    open func get_ObjectBeingDeserialized() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementEventArgs_Object__get_ObjectBeingDeserialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the object that represents the unknown XML element.

    */
    open var Element : dotnet.System.Xml.XmlElement {
        get {
            return try! get_Element();
        }
    }
    /**
    Gets a comma-delimited list of XML element names expected to be in an XML document instance.

    */
    open var ExpectedElements : dotnet.System.String {
        get {
            return try! get_ExpectedElements();
        }
    }
    /**
    Gets the line number where the unknown element was encountered if the XML reader is an .

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the place in the line where the unknown element occurs if the XML reader is an .

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the object the  is deserializing.

    */
    open var ObjectBeingDeserialized : Optional<dotnet.System.Object> {
        get {
            return try! get_ObjectBeingDeserialized();
        }
    }
} // XmlElementEventArgs


// type: System.Xml.Serialization.XmlElementEventHandler
    /**
    Represents the method that handles the  event of an .

    */
public final class XmlElementEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlElementEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.Serialization.XmlElementEventArgs)
// docid: M:System.Xml.Serialization.XmlElementEventHandler.Invoke(System.Object,System.Xml.Serialization.XmlElementEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlElementEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementEventHandler_void__Invoke_0__2__Object_XmlElementEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.Serialization.XmlElementEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlElementEventHandler.BeginInvoke(System.Object,System.Xml.Serialization.XmlElementEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlElementEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementEventHandler_IAsyncResult__BeginInvoke_0__4__Object_XmlElementEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlElementEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlElementEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Xml.Serialization.XmlElementEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlElementEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.Serialization.XmlElementEventArgs)
// docid: M:System.Xml.Serialization.XmlElementEventHandler.Invoke(System.Object,System.Xml.Serialization.XmlElementEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlElementEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementEventHandler_void__Invoke_0__2__Object_XmlElementEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlElementEventHandler


// type: System.Xml.Serialization.XmlIncludeAttribute
    /**
    Allows the  to recognize a type when it serializes or deserializes an object.

    */
open class XmlIncludeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlIncludeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter type: The  of the object to include.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlIncludeAttribute_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.XmlIncludeAttribute.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlIncludeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.XmlIncludeAttribute.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlIncludeAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the type of the object to include.

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // XmlIncludeAttribute


// type: System.Xml.Serialization.XmlMapping
    /**
    Supports mappings between .NET Framework types and XML Schema data types.

    */
open class XmlMapping
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlMapping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void SetKey(System.String)
// docid: M:System.Xml.Serialization.XmlMapping.SetKey(System.String)
    /**
    Sets the key used to look up the mapping.

    - Parameter key: The lookup key.
    */
    open func SetKey(key : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlMapping_void__SetKey_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.XmlMapping.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMapping_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlMapping.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMapping_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_XsdElementName()
// docid: M:System.Xml.Serialization.XmlMapping.get_XsdElementName
    open func get_XsdElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMapping_String__get_XsdElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of the mapped element.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
    }
    /**
    Gets the namespace of the mapped element.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
    }
    /**
    Gets the name of the XSD element of the mapping.

    */
    open var XsdElementName : dotnet.System.String {
        get {
            return try! get_XsdElementName();
        }
    }
} // XmlMapping


// type: System.Xml.Serialization.XmlMappingAccess
    /**
    Specifies whether a mapping is read, write, or both.

    */
public struct XmlMappingAccess : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlMappingAccess_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Serialization.XmlMappingAccess None
    /**
    Both read and write methods are generated.

    */
    public static var None : dotnet.System.Xml.Serialization.XmlMappingAccess {
        get {
        let __return = dotnet.System.Xml.Serialization.XmlMappingAccess(val: System_Xml_Serialization_XmlMappingAccess_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.XmlMappingAccess Read
    /**
    Read methods are generated.

    */
    public static var Read : dotnet.System.Xml.Serialization.XmlMappingAccess {
        get {
        let __return = dotnet.System.Xml.Serialization.XmlMappingAccess(val: System_Xml_Serialization_XmlMappingAccess_get_Read());
            return __return;
        }
    }
    // static field: System.Xml.Serialization.XmlMappingAccess Write
    /**
    Write methods are generated.

    */
    public static var Write : dotnet.System.Xml.Serialization.XmlMappingAccess {
        get {
        let __return = dotnet.System.Xml.Serialization.XmlMappingAccess(val: System_Xml_Serialization_XmlMappingAccess_get_Write());
            return __return;
        }
    }
} // XmlMappingAccess


// type: System.Xml.Serialization.XmlMemberMapping
    /**
    Maps a code entity in a .NET Framework Web service method to an element in a Web Services Description Language (WSDL) message.

    */
open class XmlMemberMapping
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlMemberMapping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_Any()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_Any
    open func get_Any() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_bool__get_Any_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CheckSpecified()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_CheckSpecified
    open func get_CheckSpecified() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_bool__get_CheckSpecified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_MemberName()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_MemberName
    open func get_MemberName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_MemberName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TypeFullName()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_TypeFullName
    open func get_TypeFullName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_TypeFullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_TypeName
    open func get_TypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TypeNamespace()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_TypeNamespace
    open func get_TypeNamespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_TypeNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_XsdElementName()
// docid: M:System.Xml.Serialization.XmlMemberMapping.get_XsdElementName
    open func get_XsdElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMemberMapping_String__get_XsdElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets a value that indicates whether the .NET Framework type maps to an XML element or attribute of any type.

    */
    open var Any_ : Bool {
        get {
            return try! get_Any();
        }
    }
    /**
    Gets a value that indicates whether the accompanying field in the .NET Framework type has a value specified.

    */
    open var CheckSpecified : Bool {
        get {
            return try! get_CheckSpecified();
        }
    }
    /**
    Gets the unqualified name of the XML element declaration that applies to this mapping.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
    }
    /**
    Gets the name of the Web service method member that is represented by this mapping.

    */
    open var MemberName : dotnet.System.String {
        get {
            return try! get_MemberName();
        }
    }
    /**
    Gets the XML namespace that applies to this mapping.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
    }
    /**
    Gets the fully qualified type name of the .NET Framework type for this mapping.

    */
    open var TypeFullName : dotnet.System.String {
        get {
            return try! get_TypeFullName();
        }
    }
    /**
    Gets the type name of the .NET Framework type for this mapping.

    */
    open var TypeName : Optional<dotnet.System.String> {
        get {
            return try! get_TypeName();
        }
    }
    /**
    Gets the namespace of the .NET Framework type for this mapping.

    */
    open var TypeNamespace : Optional<dotnet.System.String> {
        get {
            return try! get_TypeNamespace();
        }
    }
    /**
    Gets the XML element name as it appears in the service description document.

    */
    open var XsdElementName : dotnet.System.String {
        get {
            return try! get_XsdElementName();
        }
    }
} // XmlMemberMapping


// type: System.Xml.Serialization.XmlMembersMapping
    /**
    Provides mappings between .NET Framework Web service methods and Web Services Description Language (WSDL) messages that are defined for SOAP Web services.

    */
open class XmlMembersMapping
    :
    dotnet.System.Xml.Serialization.XmlMapping
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlMembersMapping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.Serialization.XmlMembersMapping.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMembersMapping_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.Xml.Serialization.XmlMembersMapping.get_TypeName
    open func get_TypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMembersMapping_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TypeNamespace()
// docid: M:System.Xml.Serialization.XmlMembersMapping.get_TypeNamespace
    open func get_TypeNamespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMembersMapping_String__get_TypeNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlMemberMapping get_Item(System.Int32)
// docid: M:System.Xml.Serialization.XmlMembersMapping.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Xml.Serialization.XmlMemberMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlMembersMapping_XmlMemberMapping__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMemberMapping(hndl : __return);
        }
    }
    /**
    Gets the number of .NET Framework code entities that belong to a Web service method to which a SOAP message is being mapped.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the name of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.

    */
    open var TypeName : Optional<dotnet.System.String> {
        get {
            return try! get_TypeName();
        }
    }
    /**
    Gets the namespace of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.

    */
    open var TypeNamespace : Optional<dotnet.System.String> {
        get {
            return try! get_TypeNamespace();
        }
    }
} // XmlMembersMapping


// type: System.Xml.Serialization.XmlNodeEventArgs
    /**
    Provides data for the  event.

    */
open class XmlNodeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlNodeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_LocalName
    open func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_NamespaceURI
    open func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Object get_ObjectBeingDeserialized()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_ObjectBeingDeserialized
    open func get_ObjectBeingDeserialized() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_Object__get_ObjectBeingDeserialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Text()
// docid: M:System.Xml.Serialization.XmlNodeEventArgs.get_Text
    open func get_Text() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventArgs_String__get_Text_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the line number of the unknown XML node.

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the position in the line of the unknown XML node.

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the XML local name of the XML node being deserialized.

    */
    open var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the name of the XML node being deserialized.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the namespace URI that is associated with the XML node being deserialized.

    */
    open var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets the type of the XML node being deserialized.

    */
    open var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the object being deserialized.

    */
    open var ObjectBeingDeserialized : Optional<dotnet.System.Object> {
        get {
            return try! get_ObjectBeingDeserialized();
        }
    }
    /**
    Gets the text of the XML node being deserialized.

    */
    open var Text : Optional<dotnet.System.String> {
        get {
            return try! get_Text();
        }
    }
} // XmlNodeEventArgs


// type: System.Xml.Serialization.XmlNodeEventHandler
    /**
    Represents the method that handles the  event of an .

    */
public final class XmlNodeEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlNodeEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.Serialization.XmlNodeEventArgs)
// docid: M:System.Xml.Serialization.XmlNodeEventHandler.Invoke(System.Object,System.Xml.Serialization.XmlNodeEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlNodeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlNodeEventHandler_void__Invoke_0__2__Object_XmlNodeEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.Serialization.XmlNodeEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlNodeEventHandler.BeginInvoke(System.Object,System.Xml.Serialization.XmlNodeEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlNodeEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlNodeEventHandler_IAsyncResult__BeginInvoke_0__4__Object_XmlNodeEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlNodeEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlNodeEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlNodeEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Xml.Serialization.XmlNodeEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlNodeEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.Serialization.XmlNodeEventArgs)
// docid: M:System.Xml.Serialization.XmlNodeEventHandler.Invoke(System.Object,System.Xml.Serialization.XmlNodeEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Serialization.XmlNodeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlNodeEventHandler_void__Invoke_0__2__Object_XmlNodeEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlNodeEventHandler


// type: System.Xml.Serialization.XmlReflectionImporter
    /**
    Generates mappings to XML schema element declarations, including literal XML Schema Definition (XSD) message parts in a Web Services Description Language (WSDL) document, for .NET Framework types or Web service method information.

    */
open class XmlReflectionImporter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlReflectionImporter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlReflectionImporter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlReflectionImporter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified default XML namespace.

    - Parameter defaultNamespace: The default XML namespace to use for imported type mappings.
    */
    public init(defaultNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlReflectionImporter_ctor_0__1__String(&__thrown, defaultNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.XmlAttributeOverrides)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)
    /**
    Initializes a new instance of the  class using the specified XML serialization overrides.

    - Parameter attributeOverrides: An object that overrides how the  class serializes mapped types.
    */
    public init(attributeOverrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlReflectionImporter_ctor_0__1__XmlAttributeOverrides(&__thrown, attributeOverrides?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.XmlAttributeOverrides, System.String)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)
    /**
    Initializes a new instance of the  class using the specified XML serialization overrides and default XML namespace.

    - Parameter attributeOverrides: An object that overrides how the  class serializes mapped types.
    - Parameter defaultNamespace: The default XML namespace to use for imported type mappings.
    */
    public init(attributeOverrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>, defaultNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlReflectionImporter_ctor_0__2__XmlAttributeOverrides_String(&__thrown, attributeOverrides?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)
    /**
    Generates internal type mappings for information from a Web service method.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of  objects that contain .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Returns: An  with mappings to the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__4__String_String_XmlReflectionMemberArray_bool(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool, bool)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)
    /**
    Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of  objects that contain .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Parameter rpc: 
         if the method is a remote procedure call; otherwise, .
    - Returns: An  that contains the mappings.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool, rpc : Bool) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__5__String_String_XmlReflectionMemberArray_bool_bool(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0), Swift.Int32(rpc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool, bool, bool)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)
    /**
    Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of  objects that contain .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Parameter rpc: 
         if the method is a remote procedure call; otherwise, .
    - Parameter openModel: 
         to specify that the generated schema type will be marked with the  element; otherwise, .
    - Returns: An  that contains the mappings.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool, rpc : Bool, openModel : Bool) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__6__String_String_XmlReflectionMemberArray_bool_bool_bool(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0), Swift.Int32(rpc ? 1 : 0), Swift.Int32(openModel ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.XmlReflectionMember[], bool, bool, bool, System.Xml.Serialization.XmlMappingAccess)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)
    /**
    Generates internal type mappings for information from a Web service method.

    - Parameter elementName: An XML element name produced from the Web service method.
    - Parameter ns: An XML element namespace produced from the Web service method.
    - Parameter members: An array of  objects that contain .NET Framework code entities that belong to a Web service method.
    - Parameter hasWrapperElement: 
         if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, .
    - Parameter rpc: 
         if the method is a remote procedure call; otherwise, .
    - Parameter openModel: 
         to specify that the generated schema type will be marked with the  element; otherwise, .
    - Parameter access: One of the  values. The default is .
    - Returns: An  that contains the mappings.

    */
    open func ImportMembersMapping(elementName : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlReflectionMember>, hasWrapperElement : Bool, rpc : Bool, openModel : Bool, access : dotnet.System.Xml.Serialization.XmlMappingAccess) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlMembersMapping__ImportMembersMapping_0__7__String_String_XmlReflectionMemberArray_bool_bool_bool_XmlMappingAccess(&__thrown, self.get_handle(), elementName?.get_handle() ?? nil, ns?.get_handle() ?? nil, members.get_handle(), Swift.Int32(hasWrapperElement ? 1 : 0), Swift.Int32(rpc ? 1 : 0), Swift.Int32(openModel ? 1 : 0), access.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)
    /**
    Generates a mapping to an XML Schema element for a specified .NET Framework type.

    - Parameter type: The .NET Framework type for which to generate a type mapping.
    - Returns: Internal .NET Framework mapping of a type to an XML Schema element.

    */
    open func ImportTypeMapping(type : dotnet.System.Type_) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlTypeMapping__ImportTypeMapping_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type, System.String)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)
    /**
    Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and namespace.

    - Parameter type: The .NET Framework type for which to generate a type mapping.
    - Parameter defaultNamespace: The default XML namespace to use.
    - Returns: Internal .NET Framework mapping of a type to an XML Schema element.

    */
    open func ImportTypeMapping(type : dotnet.System.Type_, defaultNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlTypeMapping__ImportTypeMapping_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), defaultNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type, System.Xml.Serialization.XmlRootAttribute)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)
    /**
    Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and attribute.

    - Parameter type: The .NET Framework type for which to generate a type mapping.
    - Parameter root: An  attribute that is applied to the type.
    - Returns: An  that represents a mapping of a .NET Framework type to an XML Schema element.

    */
    open func ImportTypeMapping(type : dotnet.System.Type_, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlTypeMapping__ImportTypeMapping_0__2__Type_XmlRootAttribute(&__thrown, self.get_handle(), type.get_handle(), root?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Type, System.Xml.Serialization.XmlRootAttribute, System.String)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)
    /**
    Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type, attribute, and namespace.

    - Parameter type: The .NET Framework type for which to generate a type mapping.
    - Parameter root: An  attribute that is applied to the type.
    - Parameter defaultNamespace: The default XML namespace to use.
    - Returns: An  that contains the internal .NET Framework mapping of a type to an XML Schema element.

    */
    open func ImportTypeMapping(type : dotnet.System.Type_, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>, defaultNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionImporter_XmlTypeMapping__ImportTypeMapping_0__3__Type_XmlRootAttribute_String(&__thrown, self.get_handle(), type.get_handle(), root?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // void IncludeType(System.Type)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)
    /**
    Includes mappings for a type for later use when import methods are invoked.

    - Parameter type: The .NET Framework type for which to save type mapping information.
    */
    open func IncludeType(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionImporter_void__IncludeType_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void IncludeTypes(System.Reflection.ICustomAttributeProvider)
// docid: M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)
    /**
    Includes mappings for derived types for later use when import methods are invoked.

    - Parameter provider: An instance of the  class that contains custom attributes derived from the  attribute.
    */
    open func IncludeTypes(provider : dotnet.System.Reflection.ICustomAttributeProvider) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionImporter_void__IncludeTypes_0__1__ICustomAttributeProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlReflectionImporter


// type: System.Xml.Serialization.XmlReflectionMember
    /**
    Provides mappings between code entities in .NET Framework Web service methods and the content of Web Services Description Language (WSDL) messages that are defined for SOAP Web services.

    */
open class XmlReflectionMember
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlReflectionMember_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlReflectionMember.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlReflectionMember_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsReturnValue()
// docid: M:System.Xml.Serialization.XmlReflectionMember.get_IsReturnValue
    open func get_IsReturnValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionMember_bool__get_IsReturnValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReturnValue(bool)
// docid: M:System.Xml.Serialization.XmlReflectionMember.set_IsReturnValue(System.Boolean)
    open func set_IsReturnValue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionMember_void__set_IsReturnValue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MemberName()
// docid: M:System.Xml.Serialization.XmlReflectionMember.get_MemberName
    open func get_MemberName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionMember_String__get_MemberName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MemberName(System.String)
// docid: M:System.Xml.Serialization.XmlReflectionMember.set_MemberName(System.String)
    open func set_MemberName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionMember_void__set_MemberName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_MemberType()
// docid: M:System.Xml.Serialization.XmlReflectionMember.get_MemberType
    open func get_MemberType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionMember_Type__get_MemberType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MemberType(System.Type)
// docid: M:System.Xml.Serialization.XmlReflectionMember.set_MemberType(System.Type)
    open func set_MemberType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionMember_void__set_MemberType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_OverrideIsNullable()
// docid: M:System.Xml.Serialization.XmlReflectionMember.get_OverrideIsNullable
    open func get_OverrideIsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionMember_bool__get_OverrideIsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_OverrideIsNullable(bool)
// docid: M:System.Xml.Serialization.XmlReflectionMember.set_OverrideIsNullable(System.Boolean)
    open func set_OverrideIsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionMember_void__set_OverrideIsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.SoapAttributes get_SoapAttributes()
// docid: M:System.Xml.Serialization.XmlReflectionMember.get_SoapAttributes
    open func get_SoapAttributes() throws -> dotnet.System.Xml.Serialization.SoapAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionMember_SoapAttributes__get_SoapAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.SoapAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SoapAttributes(System.Xml.Serialization.SoapAttributes)
// docid: M:System.Xml.Serialization.XmlReflectionMember.set_SoapAttributes(System.Xml.Serialization.SoapAttributes)
    open func set_SoapAttributes(value : dotnet.System.Xml.Serialization.SoapAttributes) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionMember_void__set_SoapAttributes_0__1__SoapAttributes(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlAttributes get_XmlAttributes()
// docid: M:System.Xml.Serialization.XmlReflectionMember.get_XmlAttributes
    open func get_XmlAttributes() throws -> dotnet.System.Xml.Serialization.XmlAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlReflectionMember_XmlAttributes__get_XmlAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XmlAttributes(System.Xml.Serialization.XmlAttributes)
// docid: M:System.Xml.Serialization.XmlReflectionMember.set_XmlAttributes(System.Xml.Serialization.XmlAttributes)
    open func set_XmlAttributes(value : dotnet.System.Xml.Serialization.XmlAttributes) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlReflectionMember_void__set_XmlAttributes_0__1__XmlAttributes(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether the  represents a Web service method return value, as opposed to an output parameter.

    */
    open var IsReturnValue : Bool {
        get {
            return try! get_IsReturnValue();
        }
        set(v) {
            return try! set_IsReturnValue(value: v);
        }
    }
    /**
    Gets or sets the name of the Web service method member for this mapping.

    */
    open var MemberName : dotnet.System.String {
        get {
            return try! get_MemberName();
        }
        set(v) {
            return try! set_MemberName(value: v);
        }
    }
    /**
    Gets or sets the type of the Web service method member code entity that is represented by this mapping.

    */
    open var MemberType : Optional<dotnet.System.Type_> {
        get {
            return try! get_MemberType();
        }
        set(v) {
            return try! set_MemberType(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates that the value of the corresponding XML element definition's isNullable attribute is .

    */
    open var OverrideIsNullable : Bool {
        get {
            return try! get_OverrideIsNullable();
        }
        set(v) {
            return try! set_OverrideIsNullable(value: v);
        }
    }
    /**
    Gets or sets a  with the collection of SOAP-related attributes that have been applied to the member code entity.

    */
    open var SoapAttributes : dotnet.System.Xml.Serialization.SoapAttributes {
        get {
            return try! get_SoapAttributes();
        }
        set(v) {
            return try! set_SoapAttributes(value: v);
        }
    }
    /**
    Gets or sets an  with the collection of -related attributes that have been applied to the member code entity.

    */
    open var XmlAttributes : dotnet.System.Xml.Serialization.XmlAttributes {
        get {
            return try! get_XmlAttributes();
        }
        set(v) {
            return try! set_XmlAttributes(value: v);
        }
    }
} // XmlReflectionMember


// type: System.Xml.Serialization.XmlSchemaEnumerator
    /**
    Enables iteration over a collection of  objects.

    */
open class XmlSchemaEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSchemaEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Serialization.XmlSchemas)
// docid: M:System.Xml.Serialization.XmlSchemaEnumerator.#ctor(System.Xml.Serialization.XmlSchemas)
    /**
    Initializes a new instance of the  class.

    - Parameter list: The  object you want to iterate over.
    */
    public init(list : dotnet.System.Xml.Serialization.XmlSchemas) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSchemaEnumerator_ctor_0__1__XmlSchemas(&__thrown, list.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Xml.Serialization.XmlSchemaEnumerator.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemaEnumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Xml.Serialization.XmlSchemaEnumerator.MoveNext
    /**
    Advances the enumerator to the next item in the collection.

    - Returns: 
         if the move is successful; otherwise, .

    */
    open /* method final */ func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchema get_Current()
// docid: M:System.Xml.Serialization.XmlSchemaEnumerator.get_Current
    open /* method final */ func get_Current() throws -> dotnet.System.Xml.Schema.XmlSchema {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaEnumerator_XmlSchema__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchema(hndl : __return);
        }
    }
    /**
    Gets the current element in the collection.

    */
    public var Current : dotnet.System.Xml.Schema.XmlSchema {
        get {
            return try! get_Current();
        }
    }
} // XmlSchemaEnumerator


// type: System.Xml.Serialization.XmlSchemaExporter
    /**
    Populates  objects with XML schema element declarations that are found in type mapping objects.

    */
open class XmlSchemaExporter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSchemaExporter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Serialization.XmlSchemas)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)
    /**
    Initializes a new instance of the  class.

    - Parameter schemas: A collection of  objects to which element declarations obtained from type mappings are added.
    */
    public init(schemas : dotnet.System.Xml.Serialization.XmlSchemas) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSchemaExporter_ctor_0__1__XmlSchemas(&__thrown, schemas.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ExportAnyType(System.String)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)
    /**
    Exports an <any> element to the  object that is identified by the specified namespace.

    - Parameter ns: The namespace of the XML schema document to which to add an <any> element.
    - Returns: An arbitrary name assigned to the <any> element declaration.

    */
    open func ExportAnyType(ns : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaExporter_String__ExportAnyType_0__1__String(&__thrown, self.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ExportAnyType(System.Xml.Serialization.XmlMembersMapping)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.Xml.Serialization.XmlMembersMapping)
    /**
    Adds an element declaration for an object or type to a SOAP message or to an  object.

    - Parameter members: An  that contains mappings to export.
    - Returns: The string "any" with an appended integer.

    */
    open func ExportAnyType(members : dotnet.System.Xml.Serialization.XmlMembersMapping) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaExporter_String__ExportAnyType_0__1__XmlMembersMapping(&__thrown, self.get_handle(), members.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)
    /**
    Adds an element declaration to the applicable  for each of the element parts of a literal SOAP message definition.

    - Parameter xmlMembersMapping: The internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.
    */
    open func ExportMembersMapping(xmlMembersMapping : dotnet.System.Xml.Serialization.XmlMembersMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemaExporter_void__ExportMembersMapping_0__1__XmlMembersMapping(&__thrown, self.get_handle(), xmlMembersMapping.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping, bool)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)
    /**
    Adds an element declaration to the applicable  for each of the element parts of a literal SOAP message definition, and specifies whether enclosing elements are included.

    - Parameter xmlMembersMapping: The internal mapping between a .NET Framework type and an XML schema element.
    - Parameter exportEnclosingType: 
         if the schema elements that enclose the schema are to be included; otherwise, .
    */
    open func ExportMembersMapping(xmlMembersMapping : dotnet.System.Xml.Serialization.XmlMembersMapping, exportEnclosingType : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemaExporter_void__ExportMembersMapping_0__2__XmlMembersMapping_bool(&__thrown, self.get_handle(), xmlMembersMapping.get_handle(), Swift.Int32(exportEnclosingType ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlQualifiedName ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)
    /**
    Adds an element declaration to the applicable  object for a single element part of a literal SOAP message definition.

    - Parameter xmlMembersMapping: Internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.
    - Returns: An  that represents the qualified XML name of the exported element declaration.

    */
    open func ExportTypeMapping(xmlMembersMapping : dotnet.System.Xml.Serialization.XmlMembersMapping) throws -> Optional<dotnet.System.Xml.XmlQualifiedName> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaExporter_XmlQualifiedName__ExportTypeMapping_0__1__XmlMembersMapping(&__thrown, self.get_handle(), xmlMembersMapping.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlQualifiedName(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)
// docid: M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)
    /**
    Adds an element declaration for a .NET Framework type to the applicable  object.

    - Parameter xmlTypeMapping: The internal mapping between a .NET Framework type and an XML schema element.
    */
    open func ExportTypeMapping(xmlTypeMapping : dotnet.System.Xml.Serialization.XmlTypeMapping) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemaExporter_void__ExportTypeMapping_0__1__XmlTypeMapping(&__thrown, self.get_handle(), xmlTypeMapping.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSchemaExporter


// type: System.Xml.Serialization.XmlSchemaImporter
    /**
    Generates internal mappings to .NET Framework types for XML schema element declarations, including literal XSD message parts in a WSDL document.

    */
open class XmlSchemaImporter
    :
    dotnet.System.Xml.Serialization.SchemaImporter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSchemaImporter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Serialization.XmlSchemas)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)
    /**
    Initializes a new instance of the  class, taking a collection of  objects representing the XML schemas used by SOAP literal messages defined in a WSDL document.

    - Parameter schemas: A collection of  objects.
    */
    public init(schemas : dotnet.System.Xml.Serialization.XmlSchemas) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSchemaImporter_ctor_0__1__XmlSchemas(&__thrown, schemas.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.XmlSchemas, System.Xml.Serialization.CodeIdentifiers)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)
    /**
    Initializes a new instance of the  class, taking a collection of  objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a Web Services Description Language (WSDL) document.

    - Parameter schemas: An  object.
    - Parameter typeIdentifiers: A  object that specifies a collection of classes being generated for bindings defined in a WSDL document.
    */
    public init(schemas : dotnet.System.Xml.Serialization.XmlSchemas, typeIdentifiers : Optional<dotnet.System.Xml.Serialization.CodeIdentifiers>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSchemaImporter_ctor_0__2__XmlSchemas_CodeIdentifiers(&__thrown, schemas.get_handle(), typeIdentifiers?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportAnyType(System.Xml.XmlQualifiedName, System.String)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)
    /**
    Generates internal type mapping information for a single, (SOAP) literal element part defined in a WSDL document.

    - Parameter typeName: An  that specifies the name of an element's type for which a .NET Framework type is generated.
    - Parameter elementName: The name of the part element in the WSDL document.
    - Returns: An  representing the .NET Framework type mapping for a single element part of a WSDL message definition.

    */
    open func ImportAnyType(typeName : dotnet.System.Xml.XmlQualifiedName, elementName : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Serialization.XmlMembersMapping> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlMembersMapping__ImportAnyType_0__2__XmlQualifiedName_String(&__thrown, self.get_handle(), typeName.get_handle(), elementName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportDerivedTypeMapping(System.Xml.XmlQualifiedName, System.Type)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)
    /**
    Generates internal type mapping information for an element defined in an XML schema document.

    - Parameter name: An  that specifies the name of an element defined in an XML schema document.
    - Parameter baseType: A base type for the .NET Framework type that is generated to correspond to an XSD element's type.
    - Returns: An  representing the.NET Framework type mapping information for an XML schema element.

    */
    open func ImportDerivedTypeMapping(name : dotnet.System.Xml.XmlQualifiedName, baseType : Optional<dotnet.System.Type_>) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlTypeMapping__ImportDerivedTypeMapping_0__2__XmlQualifiedName_Type(&__thrown, self.get_handle(), name.get_handle(), baseType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportDerivedTypeMapping(System.Xml.XmlQualifiedName, System.Type, bool)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)
    /**
    Generates internal type mapping information for an element defined in an XML schema document or as a part in a WSDL document.

    - Parameter name: An  that specifies the name of an element defined in an XML schema document.
    - Parameter baseType: A base type for the .NET Framework type that is generated to correspond to an XSD element's type.
    - Parameter baseTypeCanBeIndirect: 
         to indicate that the type corresponding to an XSD element can indirectly inherit from the base type; otherwise, .
    - Returns: The .NET Framework type mapping information for an XML schema element.

    */
    open func ImportDerivedTypeMapping(name : dotnet.System.Xml.XmlQualifiedName, baseType : Optional<dotnet.System.Type_>, baseTypeCanBeIndirect : Bool) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlTypeMapping__ImportDerivedTypeMapping_0__3__XmlQualifiedName_Type_bool(&__thrown, self.get_handle(), name.get_handle(), baseType?.get_handle() ?? nil, Swift.Int32(baseTypeCanBeIndirect ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.String, System.String, System.Xml.Serialization.SoapSchemaMember[])
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])
    /**
    Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.

    - Parameter name: The name of the element for which to generate a mapping.
    - Parameter ns: The namespace of the element for which to generate a mapping.
    - Parameter members: An array of  instances that specifies the members of the element for which to generate a mapping.
    - Returns: A  that contains type mapping information.

    */
    open func ImportMembersMapping(name : dotnet.System.String, ns : Optional<dotnet.System.String>, members : dotnet.System_Arr<dotnet.System.Xml.Serialization.SoapSchemaMember>) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlMembersMapping__ImportMembersMapping_0__3__String_String_SoapSchemaMemberArray(&__thrown, self.get_handle(), name.get_handle(), ns?.get_handle() ?? nil, members.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)
    /**
    Generates internal type mapping information for a single element part of a literal-use SOAP message defined in a WSDL document.

    - Parameter name: An  that specifies the name of the message part.
    - Returns: The .NET Framework type mapping for a WSDL message definition containing a single element part.

    */
    open func ImportMembersMapping(name : dotnet.System.Xml.XmlQualifiedName) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlMembersMapping__ImportMembersMapping_0__1__XmlQualifiedName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.Xml.XmlQualifiedName[])
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])
    /**
    Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.

    - Parameter names: An array of type  that specifies the names of the message parts.
    - Returns: An  that represents the .NET Framework type mappings for the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(names : dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlMembersMapping__ImportMembersMapping_0__1__XmlQualifiedNameArray(&__thrown, self.get_handle(), names.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlMembersMapping ImportMembersMapping(System.Xml.XmlQualifiedName[], System.Type, bool)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)
    /**
    Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.

    - Parameter names: An array of type  that specifies the names of the message parts.
    - Parameter baseType: A base type for all .NET Framework types that are generated to correspond to message parts.
    - Parameter baseTypeCanBeIndirect: 
         to indicate that the types corresponding to message parts can indirectly inherit from the base type; otherwise, .
    - Returns: The .NET Framework type mappings for the element parts of a WSDL message definition.

    */
    open func ImportMembersMapping(names : dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>, baseType : Optional<dotnet.System.Type_>, baseTypeCanBeIndirect : Bool) throws -> dotnet.System.Xml.Serialization.XmlMembersMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlMembersMapping__ImportMembersMapping_0__3__XmlQualifiedNameArray_Type_bool(&__thrown, self.get_handle(), names.get_handle(), baseType?.get_handle() ?? nil, Swift.Int32(baseTypeCanBeIndirect ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlMembersMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportSchemaType(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName)
    /**
    Generates internal type mapping information for an element defined in an XML schema document.

    - Parameter typeName: A  that specifies an XML element.
    - Returns: A  object that describes a type mapping.

    */
    open func ImportSchemaType(typeName : dotnet.System.Xml.XmlQualifiedName) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlTypeMapping__ImportSchemaType_0__1__XmlQualifiedName(&__thrown, self.get_handle(), typeName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportSchemaType(System.Xml.XmlQualifiedName, System.Type)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type)
    /**
    Generates internal type mapping information for an element defined in an XML schema document.

    - Parameter typeName: A  that specifies an XML element.
    - Parameter baseType: A  object that specifies a base type.
    - Returns: A  object that describes a type mapping.

    */
    open func ImportSchemaType(typeName : dotnet.System.Xml.XmlQualifiedName, baseType : Optional<dotnet.System.Type_>) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlTypeMapping__ImportSchemaType_0__2__XmlQualifiedName_Type(&__thrown, self.get_handle(), typeName.get_handle(), baseType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportSchemaType(System.Xml.XmlQualifiedName, System.Type, bool)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type,System.Boolean)
    /**
    Generates internal type mapping information for an element defined in an XML schema document.

    - Parameter typeName: A  that specifies an XML element.
    - Parameter baseType: A  object that specifies a base type.
    - Parameter baseTypeCanBeIndirect: A  value that specifies whether the generated type can indirectly inherit the .
    - Returns: A  object that describes a type mapping.

    */
    open func ImportSchemaType(typeName : dotnet.System.Xml.XmlQualifiedName, baseType : Optional<dotnet.System.Type_>, baseTypeCanBeIndirect : Bool) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlTypeMapping__ImportSchemaType_0__3__XmlQualifiedName_Type_bool(&__thrown, self.get_handle(), typeName.get_handle(), baseType?.get_handle() ?? nil, Swift.Int32(baseTypeCanBeIndirect ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlTypeMapping ImportTypeMapping(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)
    /**
    Generates internal type mapping information for an element defined in an XML schema document.

    - Parameter name: An  that specifies the name of an element defined in an XML schema document.
    - Returns: The .NET Framework type mapping information for an XML schema element.

    */
    open func ImportTypeMapping(name : dotnet.System.Xml.XmlQualifiedName) throws -> dotnet.System.Xml.Serialization.XmlTypeMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaImporter_XmlTypeMapping__ImportTypeMapping_0__1__XmlQualifiedName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlTypeMapping(hndl : __return);
        }
    }
} // XmlSchemaImporter


// type: System.Xml.Serialization.XmlSchemas
    /**
    Represents the collection of XML schemas.

    */
open class XmlSchemas
    :
    dotnet.System.Collections.CollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSchemas_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlSchemas.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSchemas_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)
    /**
    Adds an object to the end of the collection.

    - Parameter schema: The  object to be added to the collection of objects.
    - Returns: The index at which the  is added.

    */
    open func Add(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_i32__Add_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Add(System.Xml.Schema.XmlSchema, System.Uri)
// docid: M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema,System.Uri)
    /**
    Adds an  object that represents an assembly reference to the collection.

    - Parameter schema: The  to add.
    - Parameter baseUri: The  of the schema object.
    - Returns: The index at which the  is added.

    */
    open func Add(schema : dotnet.System.Xml.Schema.XmlSchema, baseUri : Optional<dotnet.System.Uri>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_i32__Add_0__2__XmlSchema_Uri(&__thrown, self.get_handle(), schema.get_handle(), baseUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Add(System.Xml.Serialization.XmlSchemas)
// docid: M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)
    /**
    Adds an instance of the  class to the end of the collection.

    - Parameter schemas: The  object to be added to the end of the collection.
    */
    open func Add(schemas : dotnet.System.Xml.Serialization.XmlSchemas) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__Add_0__1__XmlSchemas(&__thrown, self.get_handle(), schemas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddReference(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.AddReference(System.Xml.Schema.XmlSchema)
    /**
    Adds an  object that represents an assembly reference to the collection.

    - Parameter schema: The  to add.
    */
    open func AddReference(schema : dotnet.System.Xml.Schema.XmlSchema) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__AddReference_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Compile(System.Xml.Schema.ValidationEventHandler, bool)
// docid: M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)
    /**
    Processes the element and attribute names in the XML schemas and, optionally, validates the XML schemas.

    - Parameter handler: A  that specifies the callback method that handles errors and warnings during XML Schema validation, if the strict parameter is set to .
    - Parameter fullCompile: 
         to validate the XML schemas in the collection using the  method of the  class; otherwise, .
    */
    open func Compile(handler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, fullCompile : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__Compile_0__2__ValidationEventHandler_bool(&__thrown, self.get_handle(), handler?.get_handle() ?? nil, Swift.Int32(fullCompile ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Compile(handler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, fullCompile : Bool) throws {
        let del_handler = try dotnet.System.Xml.Schema.ValidationEventHandler(handler);
        return try Compile(handler: del_handler, fullCompile: fullCompile);
    }
    // bool Contains(System.String)
// docid: M:System.Xml.Serialization.XmlSchemas.Contains(System.String)
    /**
    Returns a value that indicates whether the collection contains an  object that belongs to the specified namespace.

    - Parameter targetNamespace: The namespace of the item to check for.
    - Returns: 
         if the item is found; otherwise, .

    */
    open func Contains(targetNamespace : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_bool__Contains_0__1__String(&__thrown, self.get_handle(), targetNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)
    /**
    Determines whether the  contains a specific schema.

    - Parameter schema: The  object to locate.
    - Returns: 
        , if the collection contains the specified item; otherwise, .

    */
    open func Contains(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_bool__Contains_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Schema.XmlSchema[], System.Int32)
// docid: M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
    /**
    Copies the entire  to a compatible one-dimensional , which starts at the specified index of the target array.

    - Parameter array: The one-dimensional  that is the destination of the schemas copied from . The  must have zero-based indexing.
    - Parameter index: A 32-bit integer that represents the index in the array where copying begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchema>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__CopyTo_0__2__XmlSchemaArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Find(System.Xml.XmlQualifiedName, System.Type)
// docid: M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)
    /**
    Locates in one of the XML schemas an  of the specified name and type.

    - Parameter name: An  that specifies a fully qualified name with a namespace used to locate an  object in the collection.
    - Parameter type: The  of the object to find. Possible types include: , , , , and .
    - Returns: An  instance, such as an  or .

    */
    open func Find(name : dotnet.System.Xml.XmlQualifiedName, type : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_Object__Find_0__2__XmlQualifiedName_Type(&__thrown, self.get_handle(), name.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IList GetSchemas(System.String)
// docid: M:System.Xml.Serialization.XmlSchemas.GetSchemas(System.String)
    /**
    Gets a collection of schemas that belong to the same namespace.

    - Parameter ns: The namespace of the schemas to retrieve.
    - Returns: An  implementation that contains the schemas.

    */
    open func GetSchemas(ns : Optional<dotnet.System.String>) throws -> dotnet.System.Collections.IList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_IList__GetSchemas_0__1__String(&__thrown, self.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IList(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)
    /**
    Searches for the specified schema and returns the zero-based index of the first occurrence within the entire .

    - Parameter schema: The  to locate.
    - Returns: The zero-based index of the first occurrence of the value within the entire , if found; otherwise, -1.

    */
    open func IndexOf(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_i32__IndexOf_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)
    /**
    Inserts a schema into the  at the specified index.

    - Parameter index: The zero-based index at which  should be inserted.
    - Parameter schema: The  object to be inserted.
    */
    open func Insert(index : Swift.Int32, schema : dotnet.System.Xml.Schema.XmlSchema) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__Insert_0__2__i32_XmlSchema(&__thrown, self.get_handle(), index, schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsDataSet(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)
    /**
    Static method that determines whether the specified XML schema contains a custom  attribute set to , or its equivalent.

    - Parameter schema: The XML schema to check for an  attribute with a  value.
    - Returns: 
         if the specified schema exists; otherwise, .

    */
    open class func IsDataSet(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_bool__IsDataSet_0__1__XmlSchema(&__thrown, schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Remove(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)
    /**
    Removes the first occurrence of a specific schema from the .

    - Parameter schema: The  to remove.
    */
    open func Remove(schema : dotnet.System.Xml.Schema.XmlSchema) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__Remove_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsCompiled()
// docid: M:System.Xml.Serialization.XmlSchemas.get_IsCompiled
    open func get_IsCompiled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_bool__get_IsCompiled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchema get_Item(System.Int32)
// docid: M:System.Xml.Serialization.XmlSchemas.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Xml.Schema.XmlSchema {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_XmlSchema__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchema(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Serialization.XmlSchemas.set_Item(System.Int32,System.Xml.Schema.XmlSchema)
    open func set_Item(index : Swift.Int32, value : dotnet.System.Xml.Schema.XmlSchema) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemas_void__set_Item_0__2__i32_XmlSchema(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchema get_Item(System.String)
// docid: M:System.Xml.Serialization.XmlSchemas.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(ns : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemas_XmlSchema__get_Item_0__1__String(&__thrown, self.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets a value that indicates whether the schemas have been compiled.

    */
    open var IsCompiled : Bool {
        get {
            return try! get_IsCompiled();
        }
    }
} // XmlSchemas


// type: System.Xml.Serialization.XmlSerializationCollectionFixupCallback
    /**
    Delegate used by the  class for deserialization of SOAP-encoded XML data types that map to collections or enumerations.

    */
public final class XmlSerializationCollectionFixupCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationCollectionFixupCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationCollectionFixupCallback.Invoke(System.Object,System.Object)
    public func Invoke(collection : Optional<dotnet.System.Object>, collectionItems : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationCollectionFixupCallback_void__Invoke_0__2__Object_Object(&__thrown, self.get_handle(), collection?.get_handle() ?? nil, collectionItems?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Object, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationCollectionFixupCallback.BeginInvoke(System.Object,System.Object,System.AsyncCallback,System.Object)
    public func BeginInvoke(collection : Optional<dotnet.System.Object>, collectionItems : Optional<dotnet.System.Object>, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationCollectionFixupCallback_IAsyncResult__BeginInvoke_0__4__Object_Object_AsyncCallback_Object(&__thrown, self.get_handle(), collection?.get_handle() ?? nil, collectionItems?.get_handle() ?? nil, callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlSerializationCollectionFixupCallback.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationCollectionFixupCallback_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Object>) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NullableHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, collection : NullableHandle, collectionItems : NullableHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((collection != nil) ? (dotnet.System.Object(hndl: collection!)) : nil, (collectionItems != nil) ? (dotnet.System.Object(hndl: collectionItems!)) : nil);
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, collection : NullableHandle, collectionItems : NullableHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NullableHandle) -> Void;
            f(thrown, collection, collectionItems);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializationCollectionFixupCallback_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationCollectionFixupCallback.Invoke(System.Object,System.Object)
    public func callAsFunction(collection : Optional<dotnet.System.Object>, collectionItems : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationCollectionFixupCallback_void__Invoke_0__2__Object_Object(&__thrown, self.get_handle(), collection?.get_handle() ?? nil, collectionItems?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSerializationCollectionFixupCallback


// type: System.Xml.Serialization.XmlSerializationFixupCallback
    /**
    Delegate used by the  class for deserialization of SOAP-encoded XML data.

    */
public final class XmlSerializationFixupCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationFixupCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationFixupCallback.Invoke(System.Object)
    public func Invoke(fixup : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationFixupCallback_void__Invoke_0__1__Object(&__thrown, self.get_handle(), fixup.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationFixupCallback.BeginInvoke(System.Object,System.AsyncCallback,System.Object)
    public func BeginInvoke(fixup : dotnet.System.Object, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationFixupCallback_IAsyncResult__BeginInvoke_0__3__Object_AsyncCallback_Object(&__thrown, self.get_handle(), fixup.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlSerializationFixupCallback.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationFixupCallback_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, fixup : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: fixup));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, fixup : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void;
            f(thrown, fixup);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializationFixupCallback_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationFixupCallback.Invoke(System.Object)
    public func callAsFunction(fixup : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationFixupCallback_void__Invoke_0__1__Object(&__thrown, self.get_handle(), fixup.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSerializationFixupCallback


// type: System.Xml.Serialization.XmlSerializationGeneratedCode
    /**
    An abstract class that is the base class for  and  and that contains methods common to both of these types.

    */
open class XmlSerializationGeneratedCode
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationGeneratedCode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // XmlSerializationGeneratedCode


// type: System.Xml.Serialization.XmlSerializationReadCallback
    /**
    Delegate used by the  class for deserialization of types from SOAP-encoded, non-root XML data.

    */
public final class XmlSerializationReadCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationReadCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object Invoke()
// docid: M:System.Xml.Serialization.XmlSerializationReadCallback.Invoke
    public func Invoke() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationReadCallback_Object__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationReadCallback.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationReadCallback_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlSerializationReadCallback.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationReadCallback_Object__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Object) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NullableHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NullableHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NullableHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NullableHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializationReadCallback_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Invoke()
// docid: M:System.Xml.Serialization.XmlSerializationReadCallback.Invoke
    public func callAsFunction() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationReadCallback_Object__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlSerializationReadCallback


// type: System.Xml.Serialization.XmlSerializationReader
    /**
    Controls deserialization by the  class.

    */
open class XmlSerializationReader
    :
    dotnet.System.Xml.Serialization.XmlSerializationGeneratedCode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // XmlSerializationReader


// type: System.Xml.Serialization.XmlSerializationWriteCallback
    /**
    Delegate that is used by the  class for serialization of types from SOAP-encoded, non-root XML data.

    */
public final class XmlSerializationWriteCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationWriteCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationWriteCallback.Invoke(System.Object)
    public func Invoke(o : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationWriteCallback_void__Invoke_0__1__Object(&__thrown, self.get_handle(), o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationWriteCallback.BeginInvoke(System.Object,System.AsyncCallback,System.Object)
    public func BeginInvoke(o : dotnet.System.Object, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializationWriteCallback_IAsyncResult__BeginInvoke_0__3__Object_AsyncCallback_Object(&__thrown, self.get_handle(), o.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Serialization.XmlSerializationWriteCallback.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationWriteCallback_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, o : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: o));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, o : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void;
            f(thrown, o);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializationWriteCallback_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object)
// docid: M:System.Xml.Serialization.XmlSerializationWriteCallback.Invoke(System.Object)
    public func callAsFunction(o : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializationWriteCallback_void__Invoke_0__1__Object(&__thrown, self.get_handle(), o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSerializationWriteCallback


// type: System.Xml.Serialization.XmlSerializationWriter
    /**
    Represents an abstract class used for controlling serialization by the  class.

    */
open class XmlSerializationWriter
    :
    dotnet.System.Xml.Serialization.XmlSerializationGeneratedCode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializationWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // XmlSerializationWriter


// type: System.Xml.Serialization.XmlSerializer
    /**
    Serializes and deserializes objects into and from XML documents. The  enables you to control how objects are encoded into XML.

    */
open class XmlSerializer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)
    /**
    Initializes a new instance of the  class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.

    - Parameter type: The type of the object that this  can serialize.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)
    /**
    Initializes a new instance of the  class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the XML elements.

    - Parameter type: The type of the object that this  can serialize.
    - Parameter defaultNamespace: The default namespace to use for all the XML elements.
    */
    public init(type : dotnet.System.Type_, defaultNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__2__Type_String(&__thrown, type.get_handle(), defaultNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type[])
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])
    /**
    Initializes a new instance of the  class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type. If a property or field returns an array, the  parameter specifies objects that can be inserted into the array.

    - Parameter type: The type of the object that this  can serialize.
    - Parameter extraTypes: A  array of additional object types to serialize.
    */
    public init(type : dotnet.System.Type_, extraTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__2__Type_TypeArray(&__thrown, type.get_handle(), (extraTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.Serialization.XmlAttributeOverrides)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)
    /**
    Initializes a new instance of the  class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.

    - Parameter type: The type of the object to serialize.
    - Parameter overrides: An .
    */
    public init(type : dotnet.System.Type_, overrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__2__Type_XmlAttributeOverrides(&__thrown, type.get_handle(), overrides?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.Serialization.XmlAttributeOverrides, System.Type[], System.Xml.Serialization.XmlRootAttribute, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)
    /**
    Initializes a new instance of the  class that can serialize objects of type  into XML document instances, and deserialize XML document instances into objects of type . Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.

    - Parameter type: The type of the object that this  can serialize.
    - Parameter overrides: An  that extends or overrides the behavior of the class specified in the  parameter.
    - Parameter extraTypes: A  array of additional object types to serialize.
    - Parameter root: An  that defines the XML root element properties.
    - Parameter defaultNamespace: The default namespace of all XML elements in the XML document.
    */
    public init(type : dotnet.System.Type_, overrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>, extraTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>, defaultNamespace : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__5__Type_XmlAttributeOverrides_TypeArray_XmlRootAttribute_String(&__thrown, type.get_handle(), overrides?.get_handle() ?? nil, (extraTypes?.get_handle()), root?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.Serialization.XmlAttributeOverrides, System.Type[], System.Xml.Serialization.XmlRootAttribute, System.String, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)
    /**
    Initializes a new instance of the  class that can serialize objects of type  into XML document instances, and deserialize XML document instances into objects of type . Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.

    - Parameter type: The type of the object that this  can serialize.
    - Parameter overrides: An  that extends or overrides the behavior of the class specified in the  parameter.
    - Parameter extraTypes: A  array of additional object types to serialize.
    - Parameter root: An  that defines the XML root element properties.
    - Parameter defaultNamespace: The default namespace of all XML elements in the XML document.
    - Parameter location: The location of the types.
    */
    public init(type : dotnet.System.Type_, overrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>, extraTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>, defaultNamespace : Optional<dotnet.System.String>, location : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__6__Type_XmlAttributeOverrides_TypeArray_XmlRootAttribute_String_String(&__thrown, type.get_handle(), overrides?.get_handle() ?? nil, (extraTypes?.get_handle()), root?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil, location?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.Serialization.XmlRootAttribute)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)
    /**
    Initializes a new instance of the  class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type. It also specifies the class to use as the XML root element.

    - Parameter type: The type of the object that this  can serialize.
    - Parameter root: An  that represents the XML root element.
    */
    public init(type : dotnet.System.Type_, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__2__Type_XmlRootAttribute(&__thrown, type.get_handle(), root?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.XmlTypeMapping)
// docid: M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)
    /**
    Initializes an instance of the  class using an object that maps one type to another.

    - Parameter xmlTypeMapping: An  that maps one type to another.
    */
    public init(xmlTypeMapping : dotnet.System.Xml.Serialization.XmlTypeMapping) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializer_ctor_0__1__XmlTypeMapping(&__thrown, xmlTypeMapping.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanDeserialize(System.Xml.XmlReader)
// docid: M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)
    /**
    Gets a value that indicates whether this  can deserialize a specified XML document.

    - Parameter xmlReader: An  that points to the document to deserialize.
    - Returns: 
         if this  can deserialize the object that the  points to; otherwise, .

    */
    open func CanDeserialize(xmlReader : dotnet.System.Xml.XmlReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_bool__CanDeserialize_0__1__XmlReader(&__thrown, self.get_handle(), xmlReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object Deserialize(System.IO.Stream)
// docid: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)
    /**
    Deserializes the XML document contained by the specified .

    - Parameter stream: The  that contains the XML document to deserialize.
    - Returns: The  being deserialized.

    */
    open func Deserialize(stream : dotnet.System.IO.Stream) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_Object__Deserialize_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.IO.TextReader)
// docid: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)
    /**
    Deserializes the XML document contained by the specified .

    - Parameter textReader: The  that contains the XML document to deserialize.
    - Returns: The  being deserialized.

    */
    open func Deserialize(textReader : dotnet.System.IO.TextReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_Object__Deserialize_0__1__TextReader(&__thrown, self.get_handle(), textReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Xml.XmlReader)
// docid: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)
    /**
    Deserializes the XML document contained by the specified .

    - Parameter xmlReader: The  that contains the XML document to deserialize.
    - Returns: The  being deserialized.

    */
    open func Deserialize(xmlReader : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_Object__Deserialize_0__1__XmlReader(&__thrown, self.get_handle(), xmlReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Xml.XmlReader, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)
    /**
    Deserializes the XML document contained by the specified  and encoding style.

    - Parameter xmlReader: The  that contains the XML document to deserialize.
    - Parameter encodingStyle: The encoding style of the serialized XML.
    - Returns: The deserialized object.

    */
    open func Deserialize(xmlReader : dotnet.System.Xml.XmlReader, encodingStyle : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_Object__Deserialize_0__2__XmlReader_String(&__thrown, self.get_handle(), xmlReader.get_handle(), encodingStyle?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Xml.XmlReader, System.String, System.Xml.Serialization.XmlDeserializationEvents)
// docid: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)
    /**
    Deserializes the object using the data contained by the specified .

    - Parameter xmlReader: An instance of the  class used to read the document.
    - Parameter encodingStyle: The encoding used.
    - Parameter events: An instance of the  class.
    - Returns: The object being deserialized.

    */
    open func Deserialize(xmlReader : dotnet.System.Xml.XmlReader, encodingStyle : Optional<dotnet.System.String>, events : dotnet.System.Xml.Serialization.XmlDeserializationEvents) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_Object__Deserialize_0__3__XmlReader_String_XmlDeserializationEvents(&__thrown, self.get_handle(), xmlReader.get_handle(), encodingStyle?.get_handle() ?? nil, events.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Xml.XmlReader, System.Xml.Serialization.XmlDeserializationEvents)
// docid: M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)
    /**
    Deserializes an XML document contained by the specified  and allows the overriding of events that occur during deserialization.

    - Parameter xmlReader: The  that contains the document to deserialize.
    - Parameter events: An instance of the  class.
    - Returns: The  being deserialized.

    */
    open func Deserialize(xmlReader : dotnet.System.Xml.XmlReader, events : dotnet.System.Xml.Serialization.XmlDeserializationEvents) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_Object__Deserialize_0__2__XmlReader_XmlDeserializationEvents(&__thrown, self.get_handle(), xmlReader.get_handle(), events.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Serialization.XmlSerializer[] FromMappings(System.Xml.Serialization.XmlMapping[])
// docid: M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])
    /**
    Returns an array of  objects created from an array of  objects.

    - Parameter mappings: An array of  that maps one type to another.
    - Returns: An array of  objects.

    */
    open class func FromMappings(mappings : Optional<dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlMapping>>) throws -> dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlSerializer> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_XmlSerializerArray__FromMappings_0__1__XmlMappingArray(&__thrown, (mappings?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlSerializer>(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer[] FromMappings(System.Xml.Serialization.XmlMapping[], System.Type)
// docid: M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)
    /**
    Returns an instance of the  class from the specified mappings.

    - Parameter mappings: An array of  objects.
    - Parameter type: The  of the deserialized object.
    - Returns: An instance of the  class.

    */
    open class func FromMappings(mappings : Optional<dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlMapping>>, type : Optional<dotnet.System.Type_>) throws -> dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlSerializer> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_XmlSerializerArray__FromMappings_0__2__XmlMappingArray_Type(&__thrown, (mappings?.get_handle()), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlSerializer>(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer[] FromTypes(System.Type[])
// docid: M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])
    /**
    Returns an array of  objects created from an array of types.

    - Parameter types: An array of  objects.
    - Returns: An array of  objects.

    */
    open class func FromTypes(types : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlSerializer> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_XmlSerializerArray__FromTypes_0__1__TypeArray(&__thrown, (types?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.Serialization.XmlSerializer>(hndl : __return);
        }
    }
    // System.String GetXmlSerializerAssemblyName(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)
    /**
    Returns the name of the assembly that contains one or more versions of the  especially created to serialize or deserialize the specified type.

    - Parameter type: The  you are deserializing.
    - Returns: The name of the assembly that contains an  for the type.

    */
    open class func GetXmlSerializerAssemblyName(type : dotnet.System.Type_) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_String__GetXmlSerializerAssemblyName_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetXmlSerializerAssemblyName(System.Type, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)
    /**
    Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.

    - Parameter type: The  you are interested in.
    - Parameter defaultNamespace: The namespace of the type.
    - Returns: The name of the assembly that contains specially built serializers.

    */
    open class func GetXmlSerializerAssemblyName(type : dotnet.System.Type_, defaultNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializer_String__GetXmlSerializerAssemblyName_0__2__Type_String(&__thrown, type.get_handle(), defaultNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Serialize(System.IO.Stream, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)
    /**
    Serializes the specified  and writes the XML document to a file using the specified .

    - Parameter stream: The  used to write the XML document.
    - Parameter o: The  to serialize.
    */
    open func Serialize(stream : dotnet.System.IO.Stream, o : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__2__Stream_Object(&__thrown, self.get_handle(), stream.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.IO.Stream, System.Object, System.Xml.Serialization.XmlSerializerNamespaces)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
    /**
    Serializes the specified  and writes the XML document to a file using the specified  that references the specified namespaces.

    - Parameter stream: The  used to write the XML document.
    - Parameter o: The  to serialize.
    - Parameter namespaces: The  referenced by the object.
    */
    open func Serialize(stream : dotnet.System.IO.Stream, o : Optional<dotnet.System.Object>, namespaces : Optional<dotnet.System.Xml.Serialization.XmlSerializerNamespaces>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__3__Stream_Object_XmlSerializerNamespaces(&__thrown, self.get_handle(), stream.get_handle(), o?.get_handle() ?? nil, namespaces?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.IO.TextWriter, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    /**
    Serializes the specified  and writes the XML document to a file using the specified .

    - Parameter textWriter: The  used to write the XML document.
    - Parameter o: The  to serialize.
    */
    open func Serialize(textWriter : dotnet.System.IO.TextWriter, o : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__2__TextWriter_Object(&__thrown, self.get_handle(), textWriter.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.IO.TextWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
    /**
    Serializes the specified  and writes the XML document to a file using the specified  and references the specified namespaces.

    - Parameter textWriter: The  used to write the XML document.
    - Parameter o: The  to serialize.
    - Parameter namespaces: The  that contains namespaces for the generated XML document.
    */
    open func Serialize(textWriter : dotnet.System.IO.TextWriter, o : Optional<dotnet.System.Object>, namespaces : Optional<dotnet.System.Xml.Serialization.XmlSerializerNamespaces>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__3__TextWriter_Object_XmlSerializerNamespaces(&__thrown, self.get_handle(), textWriter.get_handle(), o?.get_handle() ?? nil, namespaces?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.Xml.XmlWriter, System.Object)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)
    /**
    Serializes the specified  and writes the XML document to a file using the specified .

    - Parameter xmlWriter: The  used to write the XML document.
    - Parameter o: The  to serialize.
    */
    open func Serialize(xmlWriter : dotnet.System.Xml.XmlWriter, o : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__2__XmlWriter_Object(&__thrown, self.get_handle(), xmlWriter.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.Xml.XmlWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)
    /**
    Serializes the specified  and writes the XML document to a file using the specified  and references the specified namespaces.

    - Parameter xmlWriter: The  used to write the XML document.
    - Parameter o: The  to serialize.
    - Parameter namespaces: The  referenced by the object.
    */
    open func Serialize(xmlWriter : dotnet.System.Xml.XmlWriter, o : Optional<dotnet.System.Object>, namespaces : Optional<dotnet.System.Xml.Serialization.XmlSerializerNamespaces>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__3__XmlWriter_Object_XmlSerializerNamespaces(&__thrown, self.get_handle(), xmlWriter.get_handle(), o?.get_handle() ?? nil, namespaces?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.Xml.XmlWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)
    /**
    Serializes the specified object and writes the XML document to a file using the specified  and references the specified namespaces and encoding style.

    - Parameter xmlWriter: The  used to write the XML document.
    - Parameter o: The object to serialize.
    - Parameter namespaces: The  referenced by the object.
    - Parameter encodingStyle: The encoding style of the serialized XML.
    */
    open func Serialize(xmlWriter : dotnet.System.Xml.XmlWriter, o : Optional<dotnet.System.Object>, namespaces : Optional<dotnet.System.Xml.Serialization.XmlSerializerNamespaces>, encodingStyle : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__4__XmlWriter_Object_XmlSerializerNamespaces_String(&__thrown, self.get_handle(), xmlWriter.get_handle(), o?.get_handle() ?? nil, namespaces?.get_handle() ?? nil, encodingStyle?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.Xml.XmlWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces, System.String, System.String)
// docid: M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)
    /**
    Serializes the specified  and writes the XML document to a file using the specified , XML namespaces, and encoding.

    - Parameter xmlWriter: The  used to write the XML document.
    - Parameter o: The object to serialize.
    - Parameter namespaces: An instance of the  that contains namespaces and prefixes to use.
    - Parameter encodingStyle: The encoding used in the document.
    - Parameter id: For SOAP encoded messages, the base used to generate id attributes.
    */
    open func Serialize(xmlWriter : dotnet.System.Xml.XmlWriter, o : Optional<dotnet.System.Object>, namespaces : Optional<dotnet.System.Xml.Serialization.XmlSerializerNamespaces>, encodingStyle : Optional<dotnet.System.String>, id : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__Serialize_0__5__XmlWriter_Object_XmlSerializerNamespaces_String_String(&__thrown, self.get_handle(), xmlWriter.get_handle(), o?.get_handle() ?? nil, namespaces?.get_handle() ?? nil, encodingStyle?.get_handle() ?? nil, id?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_UnknownAttribute(System.Xml.Serialization.XmlAttributeEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.add_UnknownAttribute(System.Xml.Serialization.XmlAttributeEventHandler)
    open func add_UnknownAttribute(value : dotnet.System.Xml.Serialization.XmlAttributeEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__add_UnknownAttribute_0__1__XmlAttributeEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UnknownAttribute(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlAttributeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlAttributeEventHandler(value);
        return try add_UnknownAttribute(value: del_value);
    }
    // [IsSpecialName] void remove_UnknownAttribute(System.Xml.Serialization.XmlAttributeEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.remove_UnknownAttribute(System.Xml.Serialization.XmlAttributeEventHandler)
    open func remove_UnknownAttribute(value : dotnet.System.Xml.Serialization.XmlAttributeEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__remove_UnknownAttribute_0__1__XmlAttributeEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UnknownAttribute(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlAttributeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlAttributeEventHandler(value);
        return try remove_UnknownAttribute(value: del_value);
    }
    // [IsSpecialName] void add_UnknownElement(System.Xml.Serialization.XmlElementEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.add_UnknownElement(System.Xml.Serialization.XmlElementEventHandler)
    open func add_UnknownElement(value : dotnet.System.Xml.Serialization.XmlElementEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__add_UnknownElement_0__1__XmlElementEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UnknownElement(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlElementEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlElementEventHandler(value);
        return try add_UnknownElement(value: del_value);
    }
    // [IsSpecialName] void remove_UnknownElement(System.Xml.Serialization.XmlElementEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.remove_UnknownElement(System.Xml.Serialization.XmlElementEventHandler)
    open func remove_UnknownElement(value : dotnet.System.Xml.Serialization.XmlElementEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__remove_UnknownElement_0__1__XmlElementEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UnknownElement(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlElementEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlElementEventHandler(value);
        return try remove_UnknownElement(value: del_value);
    }
    // [IsSpecialName] void add_UnknownNode(System.Xml.Serialization.XmlNodeEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.add_UnknownNode(System.Xml.Serialization.XmlNodeEventHandler)
    open func add_UnknownNode(value : dotnet.System.Xml.Serialization.XmlNodeEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__add_UnknownNode_0__1__XmlNodeEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UnknownNode(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlNodeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlNodeEventHandler(value);
        return try add_UnknownNode(value: del_value);
    }
    // [IsSpecialName] void remove_UnknownNode(System.Xml.Serialization.XmlNodeEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.remove_UnknownNode(System.Xml.Serialization.XmlNodeEventHandler)
    open func remove_UnknownNode(value : dotnet.System.Xml.Serialization.XmlNodeEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__remove_UnknownNode_0__1__XmlNodeEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UnknownNode(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.XmlNodeEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.XmlNodeEventHandler(value);
        return try remove_UnknownNode(value: del_value);
    }
    // [IsSpecialName] void add_UnreferencedObject(System.Xml.Serialization.UnreferencedObjectEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.add_UnreferencedObject(System.Xml.Serialization.UnreferencedObjectEventHandler)
    open func add_UnreferencedObject(value : dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__add_UnreferencedObject_0__1__UnreferencedObjectEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UnreferencedObject(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler(value);
        return try add_UnreferencedObject(value: del_value);
    }
    // [IsSpecialName] void remove_UnreferencedObject(System.Xml.Serialization.UnreferencedObjectEventHandler)
// docid: M:System.Xml.Serialization.XmlSerializer.remove_UnreferencedObject(System.Xml.Serialization.UnreferencedObjectEventHandler)
    open func remove_UnreferencedObject(value : dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializer_void__remove_UnreferencedObject_0__1__UnreferencedObjectEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UnreferencedObject(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Serialization.UnreferencedObjectEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Serialization.UnreferencedObjectEventHandler(value);
        return try remove_UnreferencedObject(value: del_value);
    }
} // XmlSerializer


// type: System.Xml.Serialization.XmlSerializerAssemblyAttribute
    /**
    Applied to a Web service client proxy, enables you to specify an assembly that contains custom-made serializers.

    */
public final class XmlSerializerAssemblyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializerAssemblyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerAssemblyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified assembly name.

    - Parameter assemblyName: The simple, unencrypted name of the assembly.
    */
    public init(assemblyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerAssemblyAttribute_ctor_0__1__String(&__thrown, assemblyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified assembly name and location of the assembly.

    - Parameter assemblyName: The simple, unencrypted name of the assembly.
    - Parameter codeBase: A string that is the URL location of the assembly.
    */
    public init(assemblyName : Optional<dotnet.System.String>, codeBase : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerAssemblyAttribute_ctor_0__2__String_String(&__thrown, assemblyName?.get_handle() ?? nil, codeBase?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_AssemblyName()
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.get_AssemblyName
    public func get_AssemblyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerAssemblyAttribute_String__get_AssemblyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AssemblyName(System.String)
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.set_AssemblyName(System.String)
    public func set_AssemblyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerAssemblyAttribute_void__set_AssemblyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CodeBase()
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.get_CodeBase
    public func get_CodeBase() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerAssemblyAttribute_String__get_CodeBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CodeBase(System.String)
// docid: M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.set_CodeBase(System.String)
    public func set_CodeBase(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerAssemblyAttribute_void__set_CodeBase_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the assembly that contains serializers for a specific set of types.

    */
    public var AssemblyName : Optional<dotnet.System.String> {
        get {
            return try! get_AssemblyName();
        }
        set(v) {
            return try! set_AssemblyName(value: v!);
        }
    }
    /**
    Gets or sets the location of the assembly that contains the serializers.

    */
    public var CodeBase : Optional<dotnet.System.String> {
        get {
            return try! get_CodeBase();
        }
        set(v) {
            return try! set_CodeBase(value: v!);
        }
    }
} // XmlSerializerAssemblyAttribute


// type: System.Xml.Serialization.XmlSerializerFactory
    /**
    Creates typed versions of the  for more efficient serialization.

    */
open class XmlSerializerFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializerFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlSerializerFactory.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type)
    /**
    Returns a derivation of the  class that is used to serialize the specified type.

    - Parameter type: The  to serialize.
    - Returns: A derivation of the  class that is specifically created to serialize the specified type.

    */
    open func CreateSerializer(type : dotnet.System.Type_) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type, System.String)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.String)
    /**
    Returns a derivation of the  class that is used to serialize the specified type and namespace.

    - Parameter type: The  to serialize.
    - Parameter defaultNamespace: The default namespace to use for all the XML elements.
    - Returns: A derivation of the  class that is specifically created to serialize the specified type.

    */
    open func CreateSerializer(type : dotnet.System.Type_, defaultNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), defaultNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type, System.Type[])
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Type[])
    /**
    Returns a derivation of the  class that is used to serialize the specified type. If a property or field returns an array, the  parameter specifies objects that can be inserted into the array.

    - Parameter type: The  to serialize.
    - Parameter extraTypes: A  array of additional object types to serialize.
    - Returns: A derivation of the .

    */
    open func CreateSerializer(type : dotnet.System.Type_, extraTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__2__Type_TypeArray(&__thrown, self.get_handle(), type.get_handle(), (extraTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type, System.Xml.Serialization.XmlAttributeOverrides)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)
    /**
    Returns a derivation of the  class that can serialize objects of the specified type into XML documents, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.

    - Parameter type: The  to serialize.
    - Parameter overrides: An  that contains fields that override the default serialization behavior.
    - Returns: A derivation of the .

    */
    open func CreateSerializer(type : dotnet.System.Type_, overrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__2__Type_XmlAttributeOverrides(&__thrown, self.get_handle(), type.get_handle(), overrides?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type, System.Xml.Serialization.XmlAttributeOverrides, System.Type[], System.Xml.Serialization.XmlRootAttribute, System.String)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)
    /**
    Returns a derivation of the  class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.

    - Parameter type: The  to serialize.
    - Parameter overrides: An  that contains fields that override the default serialization behavior.
    - Parameter extraTypes: A  array of additional object types to serialize.
    - Parameter root: An  that represents the XML root element.
    - Parameter defaultNamespace: The default namespace of all XML elements in the XML document.
    - Returns: A derivation of the .

    */
    open func CreateSerializer(type : dotnet.System.Type_, overrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>, extraTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>, defaultNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__5__Type_XmlAttributeOverrides_TypeArray_XmlRootAttribute_String(&__thrown, self.get_handle(), type.get_handle(), overrides?.get_handle() ?? nil, (extraTypes?.get_handle()), root?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type, System.Xml.Serialization.XmlAttributeOverrides, System.Type[], System.Xml.Serialization.XmlRootAttribute, System.String, System.String)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)
    /**
    Returns a derivation of the  class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.

    - Parameter type: The  of the object that this  can serialize.
    - Parameter overrides: An  that extends or overrides the behavior of the class specified in the type parameter.
    - Parameter extraTypes: A  array of additional object types to serialize.
    - Parameter root: An  that defines the XML root element properties.
    - Parameter defaultNamespace: The default namespace of all XML elements in the XML document.
    - Parameter location: The path that specifies the location of the types.
    - Returns: A derivation of the .

    */
    open func CreateSerializer(type : dotnet.System.Type_, overrides : Optional<dotnet.System.Xml.Serialization.XmlAttributeOverrides>, extraTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>, defaultNamespace : Optional<dotnet.System.String>, location : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__6__Type_XmlAttributeOverrides_TypeArray_XmlRootAttribute_String_String(&__thrown, self.get_handle(), type.get_handle(), overrides?.get_handle() ?? nil, (extraTypes?.get_handle()), root?.get_handle() ?? nil, defaultNamespace?.get_handle() ?? nil, location?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Type, System.Xml.Serialization.XmlRootAttribute)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)
    /**
    Returns a derivation of the  class that can serialize objects of the specified type into XML documents, and vice versa. Specifies the object that represents the XML root element.

    - Parameter type: The  to serialize.
    - Parameter root: An  that represents the XML root element.
    - Returns: A derivation of the .

    */
    open func CreateSerializer(type : dotnet.System.Type_, root : Optional<dotnet.System.Xml.Serialization.XmlRootAttribute>) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__2__Type_XmlRootAttribute(&__thrown, self.get_handle(), type.get_handle(), root?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // System.Xml.Serialization.XmlSerializer CreateSerializer(System.Xml.Serialization.XmlTypeMapping)
// docid: M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Xml.Serialization.XmlTypeMapping)
    /**
    Returns a derivation of the  class using an object that maps one type to another.

    - Parameter xmlTypeMapping: An  that maps one type to another.
    - Returns: A derivation of the  class that is specifically created to serialize the mapped type.

    */
    open func CreateSerializer(xmlTypeMapping : dotnet.System.Xml.Serialization.XmlTypeMapping) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerFactory_XmlSerializer__CreateSerializer_0__1__XmlTypeMapping(&__thrown, self.get_handle(), xmlTypeMapping.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
} // XmlSerializerFactory


// type: System.Xml.Serialization.XmlSerializerImplementation
    /**
    Defines the reader, writer, and methods for pre-generated, typed serializers.

    */
open class XmlSerializerImplementation
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializerImplementation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CanSerialize(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.CanSerialize(System.Type)
    /**
    Gets a value that determines whether a type can be serialized.

    - Parameter type: The type to be serialized.
    - Returns: 
         if the type can be serialized; otherwise, .

    */
    open func CanSerialize(type : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_bool__CanSerialize_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Xml.Serialization.XmlSerializer GetSerializer(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.GetSerializer(System.Type)
    /**
    Returns a serializer for the specified type.

    - Parameter type: The type to be serialized.
    - Returns: An instance of a type derived from the  class.

    */
    open func GetSerializer(type : dotnet.System.Type_) throws -> dotnet.System.Xml.Serialization.XmlSerializer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_XmlSerializer__GetSerializer_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlSerializationReader get_Reader()
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.get_Reader
    open func get_Reader() throws -> dotnet.System.Xml.Serialization.XmlSerializationReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_XmlSerializationReader__get_Reader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializationReader(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Hashtable get_ReadMethods()
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.get_ReadMethods
    open func get_ReadMethods() throws -> dotnet.System.Collections.Hashtable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_Hashtable__get_ReadMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Hashtable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Hashtable get_TypedSerializers()
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.get_TypedSerializers
    open func get_TypedSerializers() throws -> dotnet.System.Collections.Hashtable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_Hashtable__get_TypedSerializers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Hashtable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Hashtable get_WriteMethods()
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.get_WriteMethods
    open func get_WriteMethods() throws -> dotnet.System.Collections.Hashtable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_Hashtable__get_WriteMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Hashtable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlSerializationWriter get_Writer()
// docid: M:System.Xml.Serialization.XmlSerializerImplementation.get_Writer
    open func get_Writer() throws -> dotnet.System.Xml.Serialization.XmlSerializationWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerImplementation_XmlSerializationWriter__get_Writer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializationWriter(hndl : __return);
        }
    }
    /**
    Gets the collection of methods that is used to read a data stream.

    */
    open var ReadMethods : dotnet.System.Collections.Hashtable {
        get {
            return try! get_ReadMethods();
        }
    }
    /**
    Gets the XML reader object that is used by the serializer.

    */
    open var Reader : dotnet.System.Xml.Serialization.XmlSerializationReader {
        get {
            return try! get_Reader();
        }
    }
    /**
    Gets the collection of typed serializers that is found in the assembly.

    */
    open var TypedSerializers : dotnet.System.Collections.Hashtable {
        get {
            return try! get_TypedSerializers();
        }
    }
    /**
    Gets the collection of methods that is used to write to a data stream.

    */
    open var WriteMethods : dotnet.System.Collections.Hashtable {
        get {
            return try! get_WriteMethods();
        }
    }
    /**
    Gets the XML writer object for the serializer.

    */
    open var Writer : dotnet.System.Xml.Serialization.XmlSerializationWriter {
        get {
            return try! get_Writer();
        }
    }
} // XmlSerializerImplementation


// type: System.Xml.Serialization.XmlSerializerVersionAttribute
    /**
    Signifies that the code was generated by the serialization infrastructure and can be reused for increased performance, when this attribute is applied to an assembly.

    */
public final class XmlSerializerVersionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializerVersionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerVersionAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class for the specified type.

    - Parameter type: The type that is being serialized.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerVersionAttribute_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.get_Namespace
    public func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerVersionAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.set_Namespace(System.String)
    public func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerVersionAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ParentAssemblyId()
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.get_ParentAssemblyId
    public func get_ParentAssemblyId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerVersionAttribute_String__get_ParentAssemblyId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ParentAssemblyId(System.String)
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.set_ParentAssemblyId(System.String)
    public func set_ParentAssemblyId(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerVersionAttribute_void__set_ParentAssemblyId_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.get_Type
    public func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerVersionAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.set_Type(System.Type)
    public func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerVersionAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.get_Version
    public func get_Version() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerVersionAttribute_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Version(System.String)
// docid: M:System.Xml.Serialization.XmlSerializerVersionAttribute.set_Version(System.String)
    public func set_Version(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerVersionAttribute_void__set_Version_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the common language runtime (CLR) namespace of the assembly.

    */
    public var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the identity of the parent assembly.

    */
    public var ParentAssemblyId : Optional<dotnet.System.String> {
        get {
            return try! get_ParentAssemblyId();
        }
        set(v) {
            return try! set_ParentAssemblyId(value: v!);
        }
    }
    /**
    Gets or sets the type that the serializer operates on.

    */
    public var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
    /**
    Gets or sets the assembly's version number.

    */
    public var Version : Optional<dotnet.System.String> {
        get {
            return try! get_Version();
        }
        set(v) {
            return try! set_Version(value: v!);
        }
    }
} // XmlSerializerVersionAttribute


// type: System.Xml.Serialization.XmlTypeAttribute
    /**
    Controls the XML schema that is generated when the attribute target is serialized by the .

    */
open class XmlTypeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlTypeAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlTypeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the XML type.

    - Parameter typeName: The name of the XML type that the  generates when it serializes the class instance (and recognizes when it deserializes the class instance).
    */
    public init(typeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlTypeAttribute_ctor_0__1__String(&__thrown, typeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_AnonymousType()
// docid: M:System.Xml.Serialization.XmlTypeAttribute.get_AnonymousType
    open func get_AnonymousType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeAttribute_bool__get_AnonymousType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AnonymousType(bool)
// docid: M:System.Xml.Serialization.XmlTypeAttribute.set_AnonymousType(System.Boolean)
    open func set_AnonymousType(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlTypeAttribute_void__set_AnonymousType_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IncludeInSchema()
// docid: M:System.Xml.Serialization.XmlTypeAttribute.get_IncludeInSchema
    open func get_IncludeInSchema() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeAttribute_bool__get_IncludeInSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeInSchema(bool)
// docid: M:System.Xml.Serialization.XmlTypeAttribute.set_IncludeInSchema(System.Boolean)
    open func set_IncludeInSchema(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlTypeAttribute_void__set_IncludeInSchema_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlTypeAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlTypeAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlTypeAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.Xml.Serialization.XmlTypeAttribute.get_TypeName
    open func get_TypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeAttribute_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TypeName(System.String)
// docid: M:System.Xml.Serialization.XmlTypeAttribute.set_TypeName(System.String)
    open func set_TypeName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlTypeAttribute_void__set_TypeName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that determines whether the resulting schema type is an XSD anonymous type.

    */
    open var AnonymousType : Bool {
        get {
            return try! get_AnonymousType();
        }
        set(v) {
            return try! set_AnonymousType(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to include the type in XML schema documents.

    */
    open var IncludeInSchema : Bool {
        get {
            return try! get_IncludeInSchema();
        }
        set(v) {
            return try! set_IncludeInSchema(value: v);
        }
    }
    /**
    Gets or sets the namespace of the XML type.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the name of the XML type.

    */
    open var TypeName : dotnet.System.String {
        get {
            return try! get_TypeName();
        }
        set(v) {
            return try! set_TypeName(value: v);
        }
    }
} // XmlTypeAttribute


// type: System.Xml.Serialization.XmlTypeMapping
    /**
    Contains a mapping of one type to another.

    */
open class XmlTypeMapping
    :
    dotnet.System.Xml.Serialization.XmlMapping
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlTypeMapping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_TypeFullName()
// docid: M:System.Xml.Serialization.XmlTypeMapping.get_TypeFullName
    open func get_TypeFullName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeMapping_String__get_TypeFullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.Xml.Serialization.XmlTypeMapping.get_TypeName
    open func get_TypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeMapping_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XsdTypeName()
// docid: M:System.Xml.Serialization.XmlTypeMapping.get_XsdTypeName
    open func get_XsdTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeMapping_String__get_XsdTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_XsdTypeNamespace()
// docid: M:System.Xml.Serialization.XmlTypeMapping.get_XsdTypeNamespace
    open func get_XsdTypeNamespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTypeMapping_String__get_XsdTypeNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    The fully qualified type name that includes the namespace (or namespaces) and type.

    */
    open var TypeFullName : dotnet.System.String {
        get {
            return try! get_TypeFullName();
        }
    }
    /**
    Gets the type name of the mapped object.

    */
    open var TypeName : dotnet.System.String {
        get {
            return try! get_TypeName();
        }
    }
    /**
    Gets the XML element name of the mapped object.

    */
    open var XsdTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_XsdTypeName();
        }
    }
    /**
    Gets the XML namespace of the mapped object.

    */
    open var XsdTypeNamespace : Optional<dotnet.System.String> {
        get {
            return try! get_XsdTypeNamespace();
        }
    }
} // XmlTypeMapping


}



public protocol System_Xml_Serialization_IXmlTextParser
    :
    SGBridgeGetHandle
{
}

