// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.IO
// System.IO.Compression
extension System.IO.Compression {
// type: System.IO.Compression.ZipFile
public struct ZipFile {
    // void CreateFromDirectory(System.String, System.String)
// docid: M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
    /**
    Creates a zip archive that contains the files and directories from the specified directory.

    - Parameter sourceDirectoryName: The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter destinationArchiveFileName: The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    */
    public static func CreateFromDirectory(sourceDirectoryName : dotnet.System.String, destinationArchiveFileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__CreateFromDirectory_0__2__String_String(&__thrown, sourceDirectoryName.get_handle(), destinationArchiveFileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateFromDirectory(System.String, System.String, System.IO.Compression.CompressionLevel, bool)
// docid: M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
    /**
    Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level, and optionally includes the base directory.

    - Parameter sourceDirectoryName: The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter destinationArchiveFileName: The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter compressionLevel: One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.
    - Parameter includeBaseDirectory: 
         to include the directory name from  at the root of the archive;  to include only the contents of the directory.
    */
    public static func CreateFromDirectory(sourceDirectoryName : dotnet.System.String, destinationArchiveFileName : dotnet.System.String, compressionLevel : dotnet.System.IO.Compression.CompressionLevel, includeBaseDirectory : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__CreateFromDirectory_0__4__String_String_CompressionLevel_bool(&__thrown, sourceDirectoryName.get_handle(), destinationArchiveFileName.get_handle(), compressionLevel.get_value(), Swift.Int32(includeBaseDirectory ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateFromDirectory(System.String, System.String, System.IO.Compression.CompressionLevel, bool, System.Text.Encoding)
// docid: M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
    /**
    Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level and character encoding for entry names, and optionally includes the base directory.

    - Parameter sourceDirectoryName: The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter destinationArchiveFileName: The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter compressionLevel: One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.
    - Parameter includeBaseDirectory: 
         to include the directory name from  at the root of the archive;  to include only the contents of the directory.
    - Parameter entryNameEncoding: The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.
    */
    public static func CreateFromDirectory(sourceDirectoryName : dotnet.System.String, destinationArchiveFileName : dotnet.System.String, compressionLevel : dotnet.System.IO.Compression.CompressionLevel, includeBaseDirectory : Bool, entryNameEncoding : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__CreateFromDirectory_0__5__String_String_CompressionLevel_bool_Encoding(&__thrown, sourceDirectoryName.get_handle(), destinationArchiveFileName.get_handle(), compressionLevel.get_value(), Swift.Int32(includeBaseDirectory ? 1 : 0), entryNameEncoding?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToDirectory(System.String, System.String)
// docid: M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
    /**
    Extracts all the files in the specified zip archive to a directory on the file system.

    - Parameter sourceArchiveFileName: The path to the archive that is to be extracted.
    - Parameter destinationDirectoryName: The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    */
    public static func ExtractToDirectory(sourceArchiveFileName : dotnet.System.String, destinationDirectoryName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__ExtractToDirectory_0__2__String_String(&__thrown, sourceArchiveFileName.get_handle(), destinationDirectoryName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToDirectory(System.String, System.String, bool)
// docid: M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)
    /**
    Extracts all of the files in the specified archive to a directory on the file system.

    - Parameter sourceArchiveFileName: The path on the file system to the archive that is to be extracted.
    - Parameter destinationDirectoryName: The path to the destination directory on the file system. The directory specified must not exist, but the directory that it is contained in must exist.
    - Parameter overwriteFiles: 
         to overwrite files;  otherwise.
    */
    public static func ExtractToDirectory(sourceArchiveFileName : dotnet.System.String, destinationDirectoryName : dotnet.System.String, overwriteFiles : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__ExtractToDirectory_0__3__String_String_bool(&__thrown, sourceArchiveFileName.get_handle(), destinationDirectoryName.get_handle(), Swift.Int32(overwriteFiles ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToDirectory(System.String, System.String, System.Text.Encoding)
// docid: M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
    /**
    Extracts all the files in the specified zip archive to a directory on the file system and uses the specified character encoding for entry names.

    - Parameter sourceArchiveFileName: The path to the archive that is to be extracted.
    - Parameter destinationDirectoryName: The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter entryNameEncoding: The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.
    */
    public static func ExtractToDirectory(sourceArchiveFileName : dotnet.System.String, destinationDirectoryName : dotnet.System.String, entryNameEncoding : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__ExtractToDirectory_0__3__String_String_Encoding(&__thrown, sourceArchiveFileName.get_handle(), destinationDirectoryName.get_handle(), entryNameEncoding?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToDirectory(System.String, System.String, System.Text.Encoding, bool)
// docid: M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)
    /**
    Extracts all of the files in the specified archive to a directory on the file system.

    - Parameter sourceArchiveFileName: The path on the file system to the archive that is to be extracted.
    - Parameter destinationDirectoryName: The path to the destination directory on the file system. The directory specified must not exist, but the directory that it is contained in must exist.
    - Parameter entryNameEncoding: The encoding to use when reading entry names in this .
    - Parameter overwriteFiles: 
         to overwrite files;  otherwise.
    */
    public static func ExtractToDirectory(sourceArchiveFileName : dotnet.System.String, destinationDirectoryName : dotnet.System.String, entryNameEncoding : Optional<dotnet.System.Text.Encoding>, overwriteFiles : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFile_void__ExtractToDirectory_0__4__String_String_Encoding_bool(&__thrown, sourceArchiveFileName.get_handle(), destinationDirectoryName.get_handle(), entryNameEncoding?.get_handle() ?? nil, Swift.Int32(overwriteFiles ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.Compression.ZipArchive Open(System.String, System.IO.Compression.ZipArchiveMode)
// docid: M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
    /**
    Opens a zip archive at the specified path and in the specified mode.

    - Parameter archiveFileName: The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter mode: One of the enumeration values that specifies the actions which are allowed on the entries in the opened archive.
    - Returns: The opened zip archive.

    */
    public static func Open(archiveFileName : dotnet.System.String, mode : dotnet.System.IO.Compression.ZipArchiveMode) throws -> dotnet.System.IO.Compression.ZipArchive {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Compression_ZipFile_ZipArchive__Open_0__2__String_ZipArchiveMode(&__thrown, archiveFileName.get_handle(), mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.ZipArchive(hndl : __return);
        }
    }
    // System.IO.Compression.ZipArchive Open(System.String, System.IO.Compression.ZipArchiveMode, System.Text.Encoding)
// docid: M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
    /**
    Opens a zip archive at the specified path, in the specified mode, and by using the specified character encoding for entry names.

    - Parameter archiveFileName: The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter mode: One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.
    - Parameter entryNameEncoding: The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.
    - Returns: The opened zip archive.

    */
    public static func Open(archiveFileName : dotnet.System.String, mode : dotnet.System.IO.Compression.ZipArchiveMode, entryNameEncoding : Optional<dotnet.System.Text.Encoding>) throws -> dotnet.System.IO.Compression.ZipArchive {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Compression_ZipFile_ZipArchive__Open_0__3__String_ZipArchiveMode_Encoding(&__thrown, archiveFileName.get_handle(), mode.get_value(), entryNameEncoding?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.ZipArchive(hndl : __return);
        }
    }
    // System.IO.Compression.ZipArchive OpenRead(System.String)
// docid: M:System.IO.Compression.ZipFile.OpenRead(System.String)
    /**
    Opens a zip archive for reading at the specified path.

    - Parameter archiveFileName: The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.
    - Returns: The opened zip archive.

    */
    public static func OpenRead(archiveFileName : dotnet.System.String) throws -> dotnet.System.IO.Compression.ZipArchive {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Compression_ZipFile_ZipArchive__OpenRead_0__1__String(&__thrown, archiveFileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.ZipArchive(hndl : __return);
        }
    }
} // ZipFile


// type: System.IO.Compression.ZipFileExtensions
public struct ZipFileExtensions {
    // System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(System.IO.Compression.ZipArchive, System.String, System.String)
// docid: M:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)
    /**
    Archives a file by compressing it and adding it to the zip archive.

    - Parameter destination: The zip archive to add the file to.
    - Parameter sourceFileName: The path to the file to be archived. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter entryName: The name of the entry to create in the zip archive.
    - Returns: A wrapper for the new entry in the zip archive.

    */
    public static func CreateEntryFromFile(destination : dotnet.System.IO.Compression.ZipArchive, sourceFileName : dotnet.System.String, entryName : dotnet.System.String) throws -> dotnet.System.IO.Compression.ZipArchiveEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Compression_ZipFileExtensions_ZipArchiveEntry__CreateEntryFromFile_0__3__ZipArchive_String_String(&__thrown, destination.get_handle(), sourceFileName.get_handle(), entryName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.ZipArchiveEntry(hndl : __return);
        }
    }
    // System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(System.IO.Compression.ZipArchive, System.String, System.String, System.IO.Compression.CompressionLevel)
// docid: M:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)
    /**
    Archives a file by compressing it using the specified compression level and adding it to the zip archive.

    - Parameter destination: The zip archive to add the file to.
    - Parameter sourceFileName: The path to the file to be archived. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter entryName: The name of the entry to create in the zip archive.
    - Parameter compressionLevel: One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.
    - Returns: A wrapper for the new entry in the zip archive.

    */
    public static func CreateEntryFromFile(destination : dotnet.System.IO.Compression.ZipArchive, sourceFileName : dotnet.System.String, entryName : dotnet.System.String, compressionLevel : dotnet.System.IO.Compression.CompressionLevel) throws -> dotnet.System.IO.Compression.ZipArchiveEntry {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Compression_ZipFileExtensions_ZipArchiveEntry__CreateEntryFromFile_0__4__ZipArchive_String_String_CompressionLevel(&__thrown, destination.get_handle(), sourceFileName.get_handle(), entryName.get_handle(), compressionLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.ZipArchiveEntry(hndl : __return);
        }
    }
    // void ExtractToDirectory(System.IO.Compression.ZipArchive, System.String)
// docid: M:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)
    /**
    Extracts all the files in the zip archive to a directory on the file system.

    - Parameter source: The zip archive to extract files from.
    - Parameter destinationDirectoryName: The path to the directory to place the extracted files in. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    */
    public static func ExtractToDirectory(source : dotnet.System.IO.Compression.ZipArchive, destinationDirectoryName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFileExtensions_void__ExtractToDirectory_0__2__ZipArchive_String(&__thrown, source.get_handle(), destinationDirectoryName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToDirectory(System.IO.Compression.ZipArchive, System.String, bool)
// docid: M:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String,System.Boolean)
    /**
    Extracts all of the files in the archive to a directory on the file system.

    - Parameter source: The  to extract.
    - Parameter destinationDirectoryName: The path to the destination directory on the file system. The path can be relative or absolute. A relative path is interpreted as relative to the current working directory.
    - Parameter overwriteFiles: 
         to indicate that existing files are to be overwritten;  otherwise.
    */
    public static func ExtractToDirectory(source : dotnet.System.IO.Compression.ZipArchive, destinationDirectoryName : dotnet.System.String, overwriteFiles : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFileExtensions_void__ExtractToDirectory_0__3__ZipArchive_String_bool(&__thrown, source.get_handle(), destinationDirectoryName.get_handle(), Swift.Int32(overwriteFiles ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String)
// docid: M:System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)
    /**
    Extracts an entry in the zip archive to a file.

    - Parameter source: The zip archive entry to extract a file from.
    - Parameter destinationFileName: The path of the file to create from the contents of the entry. You can  specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    */
    public static func ExtractToFile(source : dotnet.System.IO.Compression.ZipArchiveEntry, destinationFileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFileExtensions_void__ExtractToFile_0__2__ZipArchiveEntry_String(&__thrown, source.get_handle(), destinationFileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, bool)
// docid: M:System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String,System.Boolean)
    /**
    Extracts an entry in the zip archive to a file, and optionally overwrites an existing file that has the same name.

    - Parameter source: The zip archive entry to extract a file from.
    - Parameter destinationFileName: The path of the file to create from the contents of the entry. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    - Parameter overwrite: 
         to overwrite an existing file that has the same name as the destination file; otherwise, .
    */
    public static func ExtractToFile(source : dotnet.System.IO.Compression.ZipArchiveEntry, destinationFileName : dotnet.System.String, overwrite : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Compression_ZipFileExtensions_void__ExtractToFile_0__3__ZipArchiveEntry_String_bool(&__thrown, source.get_handle(), destinationFileName.get_handle(), Swift.Int32(overwrite ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ZipFileExtensions


}



// EXTENSION METHOD System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(System.IO.Compression.ZipArchive, System.String, System.String)
extension dotnet.System.IO.Compression.ZipArchive {
    public func CreateEntryFromFile(sourceFileName : dotnet.System.String, entryName : dotnet.System.String) throws -> dotnet.System.IO.Compression.ZipArchiveEntry {
        return try dotnet.System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(destination: self, sourceFileName: sourceFileName, entryName: entryName);
    }
}

// EXTENSION METHOD System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(System.IO.Compression.ZipArchive, System.String, System.String, System.IO.Compression.CompressionLevel)
extension dotnet.System.IO.Compression.ZipArchive {
    public func CreateEntryFromFile(sourceFileName : dotnet.System.String, entryName : dotnet.System.String, compressionLevel : dotnet.System.IO.Compression.CompressionLevel) throws -> dotnet.System.IO.Compression.ZipArchiveEntry {
        return try dotnet.System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(destination: self, sourceFileName: sourceFileName, entryName: entryName, compressionLevel: compressionLevel);
    }
}

// EXTENSION METHOD void ExtractToDirectory(System.IO.Compression.ZipArchive, System.String)
extension dotnet.System.IO.Compression.ZipArchive {
    public func ExtractToDirectory(destinationDirectoryName : dotnet.System.String) throws {
        try dotnet.System.IO.Compression.ZipFileExtensions.ExtractToDirectory(source: self, destinationDirectoryName: destinationDirectoryName);
    }
}

// EXTENSION METHOD void ExtractToDirectory(System.IO.Compression.ZipArchive, System.String, bool)
extension dotnet.System.IO.Compression.ZipArchive {
    public func ExtractToDirectory(destinationDirectoryName : dotnet.System.String, overwriteFiles : Bool) throws {
        try dotnet.System.IO.Compression.ZipFileExtensions.ExtractToDirectory(source: self, destinationDirectoryName: destinationDirectoryName, overwriteFiles: overwriteFiles);
    }
}

// EXTENSION METHOD void ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String)
extension dotnet.System.IO.Compression.ZipArchiveEntry {
    public func ExtractToFile(destinationFileName : dotnet.System.String) throws {
        try dotnet.System.IO.Compression.ZipFileExtensions.ExtractToFile(source: self, destinationFileName: destinationFileName);
    }
}

// EXTENSION METHOD void ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, bool)
extension dotnet.System.IO.Compression.ZipArchiveEntry {
    public func ExtractToFile(destinationFileName : dotnet.System.String, overwrite : Bool) throws {
        try dotnet.System.IO.Compression.ZipFileExtensions.ExtractToFile(source: self, destinationFileName: destinationFileName, overwrite: overwrite);
    }
}

