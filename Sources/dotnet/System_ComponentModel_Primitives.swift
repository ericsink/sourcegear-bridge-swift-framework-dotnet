// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.ComponentModel
extension System.ComponentModel {
// type: System.ComponentModel.BrowsableAttribute
    /**
    Specifies whether a property or event should be displayed in a Properties window.

    */
public final class BrowsableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BrowsableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.BrowsableAttribute Default
    /**
    Specifies the default value for the , which is . This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.BrowsableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.BrowsableAttribute(hndl: System_ComponentModel_BrowsableAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.BrowsableAttribute No
    /**
    Specifies that a property or event cannot be modified at design time. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.BrowsableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.BrowsableAttribute(hndl: System_ComponentModel_BrowsableAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.BrowsableAttribute Yes
    /**
    Specifies that a property or event can be modified at design time. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.BrowsableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.BrowsableAttribute(hndl: System_ComponentModel_BrowsableAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter browsable: 
         if a property or event can be modified at design time; otherwise, . The default is .
    */
    public init(browsable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BrowsableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(browsable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)
    /**
    Indicates whether this instance and a specified object are equal.

    - Parameter obj: Another object to compare to.
    - Returns: 
         if  is equal to this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BrowsableAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.BrowsableAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BrowsableAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.BrowsableAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BrowsableAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Browsable()
// docid: M:System.ComponentModel.BrowsableAttribute.get_Browsable
    public func get_Browsable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BrowsableAttribute_bool__get_Browsable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether an object is browsable.

    */
    public var Browsable : Bool {
        get {
            return try! get_Browsable();
        }
    }
} // BrowsableAttribute


// type: System.ComponentModel.CategoryAttribute
    /**
    Specifies the name of the category in which to group the property or event when displayed in a  control set to Categorized mode.

    */
open class CategoryAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CategoryAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.CategoryAttribute.#ctor
    /**
    Initializes a new instance of the  class using the category name Default.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CategoryAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.CategoryAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified category name.

    - Parameter category: The name of the category.
    */
    public init(category : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CategoryAttribute_ctor_0__1__String(&__thrown, category.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.CategoryAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.CategoryAttribute.GetHashCode
    /**
    Returns the hash code for this attribute.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    open override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Action()
// docid: M:System.ComponentModel.CategoryAttribute.get_Action
    open class func get_Action() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Action_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Appearance()
// docid: M:System.ComponentModel.CategoryAttribute.get_Appearance
    open class func get_Appearance() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Appearance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Asynchronous()
// docid: M:System.ComponentModel.CategoryAttribute.get_Asynchronous
    open class func get_Asynchronous() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Asynchronous_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Behavior()
// docid: M:System.ComponentModel.CategoryAttribute.get_Behavior
    open class func get_Behavior() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Behavior_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Category()
// docid: M:System.ComponentModel.CategoryAttribute.get_Category
    open func get_Category() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_String__get_Category_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Data()
// docid: M:System.ComponentModel.CategoryAttribute.get_Data
    open class func get_Data() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Data_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Default()
// docid: M:System.ComponentModel.CategoryAttribute.get_Default
    open class func get_Default() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Design()
// docid: M:System.ComponentModel.CategoryAttribute.get_Design
    open class func get_Design() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Design_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_DragDrop()
// docid: M:System.ComponentModel.CategoryAttribute.get_DragDrop
    open class func get_DragDrop() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_DragDrop_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Focus()
// docid: M:System.ComponentModel.CategoryAttribute.get_Focus
    open class func get_Focus() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Focus_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Format()
// docid: M:System.ComponentModel.CategoryAttribute.get_Format
    open class func get_Format() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Format_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Key()
// docid: M:System.ComponentModel.CategoryAttribute.get_Key
    open class func get_Key() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Key_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Layout()
// docid: M:System.ComponentModel.CategoryAttribute.get_Layout
    open class func get_Layout() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Layout_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_Mouse()
// docid: M:System.ComponentModel.CategoryAttribute.get_Mouse
    open class func get_Mouse() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_Mouse_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.CategoryAttribute get_WindowStyle()
// docid: M:System.ComponentModel.CategoryAttribute.get_WindowStyle
    open class func get_WindowStyle() throws -> dotnet.System.ComponentModel.CategoryAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CategoryAttribute_CategoryAttribute__get_WindowStyle_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CategoryAttribute(hndl : __return);
        }
    }
    /**
    Gets a  representing the Action category.

    */
    public static var Action : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Action();
        }
    }
    /**
    Gets a  representing the Appearance category.

    */
    public static var Appearance : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Appearance();
        }
    }
    /**
    Gets a  representing the Asynchronous category.

    */
    public static var Asynchronous : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Asynchronous();
        }
    }
    /**
    Gets a  representing the Behavior category.

    */
    public static var Behavior : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Behavior();
        }
    }
    /**
    Gets the name of the category for the property or event that this attribute is applied to.

    */
    open var Category : dotnet.System.String {
        get {
            return try! get_Category();
        }
    }
    /**
    Gets a  representing the Data category.

    */
    public static var Data : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Data();
        }
    }
    /**
    Gets a  representing the Default category.

    */
    public static var Default : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Default();
        }
    }
    /**
    Gets a  representing the Design category.

    */
    public static var Design : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Design();
        }
    }
    /**
    Gets a  representing the DragDrop category.

    */
    public static var DragDrop : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_DragDrop();
        }
    }
    /**
    Gets a  representing the Focus category.

    */
    public static var Focus : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Focus();
        }
    }
    /**
    Gets a  representing the Format category.

    */
    public static var Format : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Format();
        }
    }
    /**
    Gets a  representing the Key category.

    */
    public static var Key : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Key();
        }
    }
    /**
    Gets a  representing the Layout category.

    */
    public static var Layout : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Layout();
        }
    }
    /**
    Gets a  representing the Mouse category.

    */
    public static var Mouse : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_Mouse();
        }
    }
    /**
    Gets a  representing the WindowStyle category.

    */
    public static var WindowStyle : dotnet.System.ComponentModel.CategoryAttribute {
        get {
            return try! get_WindowStyle();
        }
    }
} // CategoryAttribute


// type: System.ComponentModel.Component
    /**
    Provides the base implementation for the  interface and enables object sharing between applications.

    */
open class Component
    :
    dotnet.System.MarshalByRefObject,
    System_ComponentModel_IComponent,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Component_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Component.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Component_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.ComponentModel.Component.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Component_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.Component.ToString
    /**
    Returns a  containing the name of the , if any. This method should not be overridden.

    - Returns: A  containing the name of the , if any, or  if the  is unnamed.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Component_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.IContainer get_Container()
// docid: M:System.ComponentModel.Component.get_Container
    open func get_Container() throws -> Optional<dotnet.System.ComponentModel.IContainer> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Component_IContainer__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IContainer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.ComponentModel.Component.get_Site
    open func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Component_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.ComponentModel.Component.set_Site(System.ComponentModel.ISite)
    open func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Component_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_Disposed(System.EventHandler)
// docid: M:System.ComponentModel.Component.add_Disposed(System.EventHandler)
    open /* method final */ func add_Disposed(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Component_void__add_Disposed_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_Disposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Disposed(value: del_value);
    }
    // [IsSpecialName] void remove_Disposed(System.EventHandler)
// docid: M:System.ComponentModel.Component.remove_Disposed(System.EventHandler)
    open /* method final */ func remove_Disposed(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Component_void__remove_Disposed_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_Disposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Disposed(value: del_value);
    }
    /**
    Gets the  that contains the .

    */
    open var Container : Optional<dotnet.System.ComponentModel.IContainer> {
        get {
            return try! get_Container();
        }
    }
    /**
    Gets or sets the  of the .

    */
    open var Site : Optional<dotnet.System.ComponentModel.ISite> {
        get {
            return try! get_Site();
        }
        set(v) {
            return try! set_Site(value: v!);
        }
    }
} // Component


// type: System.ComponentModel.ComponentCollection
    /**
    Provides a read-only container for a collection of  objects.

    */
open class ComponentCollection
    :
    dotnet.System.Collections.ReadOnlyCollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ComponentCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.IComponent[])
// docid: M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])
    /**
    Initializes a new instance of the  class using the specified array of components.

    - Parameter components: An array of  objects to initialize the collection with.
    */
    public init(components : dotnet.System_Arr<dotnet.System.ComponentModel.IComponent>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComponentCollection_ctor_0__1__IComponentArray(&__thrown, components.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(System.ComponentModel.IComponent[], System.Int32)
// docid: M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)
    /**
    Copies the entire collection to an array, starting writing at the specified array index.

    - Parameter array: An  array to copy the objects in the collection to.
    - Parameter index: The index of the  at which copying to should begin.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.ComponentModel.IComponent>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ComponentCollection_void__CopyTo_0__2__IComponentArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.IComponent get_Item(System.Int32)
// docid: M:System.ComponentModel.ComponentCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.ComponentModel.IComponent> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComponentCollection_IComponent__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IComponent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.IComponent get_Item(System.String)
// docid: M:System.ComponentModel.ComponentCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.ComponentModel.IComponent> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComponentCollection_IComponent__get_Item_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IComponent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ComponentCollection


// type: System.ComponentModel.DescriptionAttribute
    /**
    Specifies a description for a property or event.

    */
open class DescriptionAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DescriptionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DescriptionAttribute Default
    /**
    Specifies the default value for the , which is an empty string (""). This  field is read-only.

    */
    open class var Default : dotnet.System.ComponentModel.DescriptionAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DescriptionAttribute(hndl: System_ComponentModel_DescriptionAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.DescriptionAttribute.#ctor
    /**
    Initializes a new instance of the  class with no parameters.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DescriptionAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a description.

    - Parameter description: The description text.
    */
    public init(description : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DescriptionAttribute_ctor_0__1__String(&__thrown, description.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DescriptionAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DescriptionAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DescriptionAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute
    /**
    Returns a value indicating whether this is the default  instance.

    - Returns: 
        , if this is the default  instance; otherwise, .

    */
    open override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DescriptionAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.ComponentModel.DescriptionAttribute.get_Description
    open func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DescriptionAttribute_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the description stored in this attribute.

    */
    open var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
} // DescriptionAttribute


// type: System.ComponentModel.DesignOnlyAttribute
    /**
    Specifies whether a property can only be set at design time.

    */
public final class DesignOnlyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DesignOnlyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DesignOnlyAttribute Default
    /**
    Specifies the default value for the , which is . This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.DesignOnlyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignOnlyAttribute(hndl: System_ComponentModel_DesignOnlyAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignOnlyAttribute No
    /**
    Specifies that a property can be set at design time or at run time. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.DesignOnlyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignOnlyAttribute(hndl: System_ComponentModel_DesignOnlyAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignOnlyAttribute Yes
    /**
    Specifies that a property can be set only at design time. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.DesignOnlyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignOnlyAttribute(hndl: System_ComponentModel_DesignOnlyAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter isDesignOnly: 
         if a property can be set only at design time;  if the property can be set at design time and at run time.
    */
    public init(isDesignOnly : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignOnlyAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(isDesignOnly ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignOnlyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DesignOnlyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignOnlyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignOnlyAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDesignOnly()
// docid: M:System.ComponentModel.DesignOnlyAttribute.get_IsDesignOnly
    public func get_IsDesignOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignOnlyAttribute_bool__get_IsDesignOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether a property can be set only at design time.

    */
    public var IsDesignOnly : Bool {
        get {
            return try! get_IsDesignOnly();
        }
    }
} // DesignOnlyAttribute


// type: System.ComponentModel.DesignerAttribute
    /**
    Specifies the class used to implement design-time services for a component.

    */
public final class DesignerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DesignerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DesignerAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the name of the type that provides design-time services.

    - Parameter designerTypeName: The concatenation of the fully qualified name of the type that provides design-time services for the component this attribute is bound to, and the name of the assembly this type resides in.
    */
    public init(designerTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerAttribute_ctor_0__1__String(&__thrown, designerTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the designer type and the base class for the designer.

    - Parameter designerTypeName: The concatenation of the fully qualified name of the type that provides design-time services for the component this attribute is bound to, and the name of the assembly this type resides in.
    - Parameter designerBaseTypeName: The fully qualified name of the base class to associate with the designer class.
    */
    public init(designerTypeName : dotnet.System.String, designerBaseTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerAttribute_ctor_0__2__String_String(&__thrown, designerTypeName.get_handle(), designerBaseTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class, using the name of the designer class and the base class for the designer.

    - Parameter designerTypeName: The concatenation of the fully qualified name of the type that provides design-time services for the component this attribute is bound to, and the name of the assembly this type resides in.
    - Parameter designerBaseType: A  that represents the base class to associate with the .
    */
    public init(designerTypeName : dotnet.System.String, designerBaseType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerAttribute_ctor_0__2__String_Type(&__thrown, designerTypeName.get_handle(), designerBaseType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class using the type that provides design-time services.

    - Parameter designerType: A  that represents the class that provides design-time services for the component this attribute is bound to.
    */
    public init(designerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerAttribute_ctor_0__1__Type(&__thrown, designerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type)
// docid: M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)
    /**
    Initializes a new instance of the  class using the types of the designer and designer base class.

    - Parameter designerType: A  that represents the class that provides design-time services for the component this attribute is bound to.
    - Parameter designerBaseType: A  that represents the base class to associate with the .
    */
    public init(designerType : dotnet.System.Type_, designerBaseType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerAttribute_ctor_0__2__Type_Type(&__thrown, designerType.get_handle(), designerBaseType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DesignerAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DesignerAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_DesignerBaseTypeName()
// docid: M:System.ComponentModel.DesignerAttribute.get_DesignerBaseTypeName
    public func get_DesignerBaseTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerAttribute_String__get_DesignerBaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DesignerTypeName()
// docid: M:System.ComponentModel.DesignerAttribute.get_DesignerTypeName
    public func get_DesignerTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerAttribute_String__get_DesignerTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.DesignerAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the name of the base type of this designer.

    */
    public var DesignerBaseTypeName : dotnet.System.String {
        get {
            return try! get_DesignerBaseTypeName();
        }
    }
    /**
    Gets the name of the designer type associated with this designer attribute.

    */
    public var DesignerTypeName : dotnet.System.String {
        get {
            return try! get_DesignerTypeName();
        }
    }
    /**
    Gets a unique ID for this attribute type.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // DesignerAttribute


// type: System.ComponentModel.DesignerCategoryAttribute
    /**
    Specifies that the designer for a class belongs to a certain category.

    */
public final class DesignerCategoryAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DesignerCategoryAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DesignerCategoryAttribute Component
    /**
    Specifies that a component marked with this category use a component designer. This field is read-only.

    */
    public class var Component : dotnet.System.ComponentModel.DesignerCategoryAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerCategoryAttribute(hndl: System_ComponentModel_DesignerCategoryAttribute_get_Component());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerCategoryAttribute Default
    /**
    Specifies that a component marked with this category cannot use a visual designer. This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.DesignerCategoryAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerCategoryAttribute(hndl: System_ComponentModel_DesignerCategoryAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerCategoryAttribute Form
    /**
    Specifies that a component marked with this category use a form designer. This  field is read-only.

    */
    public class var Form : dotnet.System.ComponentModel.DesignerCategoryAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerCategoryAttribute(hndl: System_ComponentModel_DesignerCategoryAttribute_get_Form());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerCategoryAttribute Generic
    /**
    Specifies that a component marked with this category use a generic designer. This  field is read-only.

    */
    public class var Generic : dotnet.System.ComponentModel.DesignerCategoryAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerCategoryAttribute(hndl: System_ComponentModel_DesignerCategoryAttribute_get_Generic());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.DesignerCategoryAttribute.#ctor
    /**
    Initializes a new instance of the  class with an empty string ("").

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerCategoryAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the given category name.

    - Parameter category: The name of the category.
    */
    public init(category : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerCategoryAttribute_ctor_0__1__String(&__thrown, category.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerCategoryAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerCategoryAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerCategoryAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Category()
// docid: M:System.ComponentModel.DesignerCategoryAttribute.get_Category
    public func get_Category() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerCategoryAttribute_String__get_Category_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.DesignerCategoryAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerCategoryAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the name of the category.

    */
    public var Category : dotnet.System.String {
        get {
            return try! get_Category();
        }
    }
    /**
    Gets a unique identifier for this attribute.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // DesignerCategoryAttribute


// type: System.ComponentModel.DesignerSerializationVisibility
    /**
    Specifies the visibility a property has to the design-time serializer.

    */
public struct DesignerSerializationVisibility : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DesignerSerializationVisibility_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.DesignerSerializationVisibility Hidden
    /**
    The code generator does not produce code for the object.

    */
    public static var Hidden : dotnet.System.ComponentModel.DesignerSerializationVisibility {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibility(val: System_ComponentModel_DesignerSerializationVisibility_get_Hidden());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerSerializationVisibility Visible
    /**
    The code generator produces code for the object.

    */
    public static var Visible : dotnet.System.ComponentModel.DesignerSerializationVisibility {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibility(val: System_ComponentModel_DesignerSerializationVisibility_get_Visible());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerSerializationVisibility Content
    /**
    The code generator produces code for the contents of the object, rather than for the object itself.

    */
    public static var Content : dotnet.System.ComponentModel.DesignerSerializationVisibility {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibility(val: System_ComponentModel_DesignerSerializationVisibility_get_Content());
            return __return;
        }
    }
} // DesignerSerializationVisibility


// type: System.ComponentModel.DesignerSerializationVisibilityAttribute
    /**
    Specifies the type of persistence to use when serializing a property on a component at design time.

    */
public final class DesignerSerializationVisibilityAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DesignerSerializationVisibilityAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DesignerSerializationVisibilityAttribute Content
    /**
    Specifies that a serializer should serialize the contents of the property, rather than the property itself. This field is read-only.

    */
    public class var Content : dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute(hndl: System_ComponentModel_DesignerSerializationVisibilityAttribute_get_Content());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerSerializationVisibilityAttribute Default
    /**
    Specifies the default value, which is , that is, a visual designer uses default rules to generate the value of a property. This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute(hndl: System_ComponentModel_DesignerSerializationVisibilityAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerSerializationVisibilityAttribute Hidden
    /**
    Specifies that a serializer should not serialize the value of the property. This  field is read-only.

    */
    public class var Hidden : dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute(hndl: System_ComponentModel_DesignerSerializationVisibilityAttribute_get_Hidden());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignerSerializationVisibilityAttribute Visible
    /**
    Specifies that a serializer should be allowed to serialize the value of the property. This  field is read-only.

    */
    public class var Visible : dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignerSerializationVisibilityAttribute(hndl: System_ComponentModel_DesignerSerializationVisibilityAttribute_get_Visible());
            return __return;
        }
    }
    // .ctor(System.ComponentModel.DesignerSerializationVisibility)
// docid: M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)
    /**
    Initializes a new instance of the  class using the specified  value.

    - Parameter visibility: One of the  values.
    */
    public init(visibility : dotnet.System.ComponentModel.DesignerSerializationVisibility) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignerSerializationVisibilityAttribute_ctor_0__1__DesignerSerializationVisibility(&__thrown, visibility.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(System.Object)
    /**
    Indicates whether this instance and a specified object are equal.

    - Parameter obj: Another object to compare to.
    - Returns: 
         if  is equal to this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerSerializationVisibilityAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode
    /**
    Returns the hash code for this object.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerSerializationVisibilityAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the attribute is set to the default value; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerSerializationVisibilityAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.DesignerSerializationVisibility get_Visibility()
// docid: M:System.ComponentModel.DesignerSerializationVisibilityAttribute.get_Visibility
    public func get_Visibility() throws -> dotnet.System.ComponentModel.DesignerSerializationVisibility {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignerSerializationVisibilityAttribute_DesignerSerializationVisibility__get_Visibility_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.DesignerSerializationVisibility(val: __return);
        }
    }
    /**
    Gets a value indicating the basic serialization mode a serializer should use when determining whether and how to persist the value of a property.

    */
    public var Visibility : dotnet.System.ComponentModel.DesignerSerializationVisibility {
        get {
            return try! get_Visibility();
        }
    }
} // DesignerSerializationVisibilityAttribute


// type: System.ComponentModel.DisplayNameAttribute
    /**
    Specifies the display name for a property, event, or public void method which takes no arguments.

    */
open class DisplayNameAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DisplayNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DisplayNameAttribute Default
    /**
    Specifies the default value for the . This field is read-only.

    */
    open class var Default : dotnet.System.ComponentModel.DisplayNameAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DisplayNameAttribute(hndl: System_ComponentModel_DisplayNameAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.DisplayNameAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DisplayNameAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the display name.

    - Parameter displayName: The display name.
    */
    public init(displayName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DisplayNameAttribute_ctor_0__1__String(&__thrown, displayName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DisplayNameAttribute.Equals(System.Object)
    /**
    Determines whether two  instances are equal.

    - Parameter obj: The  to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current object; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DisplayNameAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DisplayNameAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DisplayNameAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DisplayNameAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    open override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DisplayNameAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.ComponentModel.DisplayNameAttribute.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DisplayNameAttribute_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
} // DisplayNameAttribute


// type: System.ComponentModel.EditorAttribute
    /**
    Specifies the editor to use to change a property. This class cannot be inherited.

    */
public final class EditorAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_EditorAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.EditorAttribute.#ctor
    /**
    Initializes a new instance of the  class with the default editor, which is no editor.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EditorAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the type name and base type name of the editor.

    - Parameter typeName: The fully qualified type name of the editor.
    - Parameter baseTypeName: The fully qualified type name of the base class or interface to use as a lookup key for the editor. This class must be or derive from .
    */
    public init(typeName : dotnet.System.String, baseTypeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EditorAttribute_ctor_0__2__String_String(&__thrown, typeName.get_handle(), baseTypeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class with the type name and the base type.

    - Parameter typeName: The fully qualified type name of the editor.
    - Parameter baseType: The  of the base class or interface to use as a lookup key for the editor. This class must be or derive from .
    */
    public init(typeName : dotnet.System.String, baseType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EditorAttribute_ctor_0__2__String_Type(&__thrown, typeName.get_handle(), baseType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type)
// docid: M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)
    /**
    Initializes a new instance of the  class with the type and the base type.

    - Parameter type: A  that represents the type of the editor.
    - Parameter baseType: The  of the base class or interface to use as a lookup key for the editor. This class must be or derive from .
    */
    public init(type : dotnet.System.Type_, baseType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EditorAttribute_ctor_0__2__Type_Type(&__thrown, type.get_handle(), baseType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.EditorAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current object; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EditorAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.EditorAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EditorAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_EditorBaseTypeName()
// docid: M:System.ComponentModel.EditorAttribute.get_EditorBaseTypeName
    public func get_EditorBaseTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EditorAttribute_String__get_EditorBaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_EditorTypeName()
// docid: M:System.ComponentModel.EditorAttribute.get_EditorTypeName
    public func get_EditorTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EditorAttribute_String__get_EditorTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.EditorAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EditorAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the name of the base class or interface serving as a lookup key for this editor.

    */
    public var EditorBaseTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_EditorBaseTypeName();
        }
    }
    /**
    Gets the name of the editor class in the  format.

    */
    public var EditorTypeName : dotnet.System.String {
        get {
            return try! get_EditorTypeName();
        }
    }
    /**
    Gets a unique ID for this attribute type.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // EditorAttribute


// type: System.ComponentModel.EventHandlerList
    /**
    Provides a simple list of delegates. This class cannot be inherited.

    */
public final class EventHandlerList
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_EventHandlerList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.EventHandlerList.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EventHandlerList_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddHandler(System.Object, System.Delegate)
// docid: M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)
    /**
    Adds a delegate to the list.

    - Parameter key: The object that owns the event.
    - Parameter value: The delegate to add to the list.
    */
    public func AddHandler(key : dotnet.System.Object, value : Optional<dotnet.System.Delegate>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventHandlerList_void__AddHandler_0__2__Object_Delegate(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHandlers(System.ComponentModel.EventHandlerList)
// docid: M:System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)
    /**
    Adds a list of delegates to the current list.

    - Parameter listToAddFrom: The list to add.
    */
    public func AddHandlers(listToAddFrom : dotnet.System.ComponentModel.EventHandlerList) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventHandlerList_void__AddHandlers_0__1__EventHandlerList(&__thrown, self.get_handle(), listToAddFrom.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.ComponentModel.EventHandlerList.Dispose
    /**
    Disposes the delegate list.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventHandlerList_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveHandler(System.Object, System.Delegate)
// docid: M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)
    /**
    Removes a delegate from the list.

    - Parameter key: The object that owns the event.
    - Parameter value: The delegate to remove from the list.
    */
    public func RemoveHandler(key : dotnet.System.Object, value : Optional<dotnet.System.Delegate>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventHandlerList_void__RemoveHandler_0__2__Object_Delegate(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Delegate get_Item(System.Object)
// docid: M:System.ComponentModel.EventHandlerList.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(key : dotnet.System.Object) throws -> Optional<dotnet.System.Delegate> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventHandlerList_Delegate__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Delegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.Delegate)
// docid: M:System.ComponentModel.EventHandlerList.set_Item(System.Object,System.Delegate)
    public func set_Item(key : dotnet.System.Object, value : Optional<dotnet.System.Delegate>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventHandlerList_void__set_Item_0__2__Object_Delegate(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EventHandlerList


// type: System.ComponentModel.IComponent
    /**
    Provides functionality required by all components.

    */
open class IComponent
    :
    SGBridgeGenericValue,
    System_ComponentModel_IComponent,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IComponent_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.ComponentModel.IComponent.get_Site
    open func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComponent_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.ComponentModel.IComponent.set_Site(System.ComponentModel.ISite)
    open func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IComponent_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_Disposed(System.EventHandler)
// docid: M:System.ComponentModel.IComponent.add_Disposed(System.EventHandler)
    open func add_Disposed(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IComponent_void__add_Disposed_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Disposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Disposed(value: del_value);
    }
    // [IsSpecialName] void remove_Disposed(System.EventHandler)
// docid: M:System.ComponentModel.IComponent.remove_Disposed(System.EventHandler)
    open func remove_Disposed(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IComponent_void__remove_Disposed_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Disposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Disposed(value: del_value);
    }
} // IComponent


// type: System.ComponentModel.IContainer
    /**
    Provides functionality for containers. Containers are objects that logically contain zero or more components.

    */
open class IContainer
    :
    SGBridgeGenericValue,
    System_ComponentModel_IContainer,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IContainer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Add(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)
    /**
    Adds the specified  to the  at the end of the list.

    - Parameter component: The  to add.
    */
    open func Add(component : Optional<dotnet.System.ComponentModel.IComponent>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IContainer_void__Add_0__1__IComponent(&__thrown, self.get_handle(), component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.ComponentModel.IComponent, System.String)
// docid: M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)
    /**
    Adds the specified  to the  at the end of the list, and assigns a name to the component.

    - Parameter component: The  to add.
    - Parameter name: The unique, case-insensitive name to assign to the component.  
  
 -or-  
  
  that leaves the component unnamed.
    */
    open func Add(component : Optional<dotnet.System.ComponentModel.IComponent>, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IContainer_void__Add_0__2__IComponent_String(&__thrown, self.get_handle(), component?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)
    /**
    Removes a component from the .

    - Parameter component: The  to remove.
    */
    open func Remove(component : Optional<dotnet.System.ComponentModel.IComponent>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IContainer_void__Remove_0__1__IComponent(&__thrown, self.get_handle(), component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ComponentCollection get_Components()
// docid: M:System.ComponentModel.IContainer.get_Components
    open func get_Components() throws -> dotnet.System.ComponentModel.ComponentCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IContainer_ComponentCollection__get_Components_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ComponentCollection(hndl : __return);
        }
    }
} // IContainer


// type: System.ComponentModel.ISite
    /**
    Provides functionality required by sites.

    */
open class ISite
    :
    SGBridgeGenericValue,
    System_ComponentModel_ISite,
    System_IServiceProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ISite_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.ComponentModel.IComponent get_Component()
// docid: M:System.ComponentModel.ISite.get_Component
    open func get_Component() throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISite_IComponent__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.IContainer get_Container()
// docid: M:System.ComponentModel.ISite.get_Container
    open func get_Container() throws -> Optional<dotnet.System.ComponentModel.IContainer> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISite_IContainer__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IContainer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_DesignMode()
// docid: M:System.ComponentModel.ISite.get_DesignMode
    open func get_DesignMode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISite_bool__get_DesignMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.ISite.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISite_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.ComponentModel.ISite.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ISite_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ISite


// type: System.ComponentModel.ISupportInitialize
    /**
    Specifies that this object supports a simple, transacted notification for batch initialization.

    */
open class ISupportInitialize
    :
    SGBridgeGenericValue,
    System_ComponentModel_ISupportInitialize
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ISupportInitialize_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void BeginInit()
// docid: M:System.ComponentModel.ISupportInitialize.BeginInit
    /**
    Signals the object that initialization is starting.

    */
    open func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ISupportInitialize_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndInit()
// docid: M:System.ComponentModel.ISupportInitialize.EndInit
    /**
    Signals the object that initialization is complete.

    */
    open func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ISupportInitialize_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ISupportInitialize


// type: System.ComponentModel.ISynchronizeInvoke
    /**
    Provides a way to synchronously or asynchronously execute a delegate.

    */
open class ISynchronizeInvoke
    :
    SGBridgeGenericValue,
    System_ComponentModel_ISynchronizeInvoke
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ISynchronizeInvoke_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IAsyncResult BeginInvoke(System.Delegate, System.Object[])
// docid: M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
    /**
    Asynchronously executes the delegate on the thread that created this object.

    - Parameter method: A  to a method that takes parameters of the same number and type that are contained in .
    - Parameter args: An array of type  to pass as arguments to the given method. This can be  if no arguments are needed.
    - Returns: An  interface that represents the asynchronous operation started by calling this method.

    */
    open func BeginInvoke(method : dotnet.System.Delegate, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISynchronizeInvoke_IAsyncResult__BeginInvoke_0__2__Delegate_ObjectArray(&__thrown, self.get_handle(), method.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // System.Object EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
    /**
    Waits until the process started by calling  completes, and then returns the value generated by the process.

    - Parameter result: An  interface that represents the asynchronous operation started by calling .
    - Returns: An  that represents the return value generated by the asynchronous operation.

    */
    open func EndInvoke(result : dotnet.System.IAsyncResult) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISynchronizeInvoke_Object__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Invoke(System.Delegate, System.Object[])
// docid: M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
    /**
    Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.

    - Parameter method: A  that contains a method to call, in the context of the thread for the control.
    - Parameter args: An array of type  that represents the arguments to pass to the given method. This can be  if no arguments are needed.
    - Returns: An  that represents the return value from the delegate being invoked, or  if the delegate has no return value.

    */
    open func Invoke(method : dotnet.System.Delegate, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISynchronizeInvoke_Object__Invoke_0__2__Delegate_ObjectArray(&__thrown, self.get_handle(), method.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_InvokeRequired()
// docid: M:System.ComponentModel.ISynchronizeInvoke.get_InvokeRequired
    open func get_InvokeRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISynchronizeInvoke_bool__get_InvokeRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ISynchronizeInvoke


// type: System.ComponentModel.ImmutableObjectAttribute
    /**
    Specifies that an object has no subproperties capable of being edited. This class cannot be inherited.

    */
public final class ImmutableObjectAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ImmutableObjectAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.ImmutableObjectAttribute Default
    /**
    Represents the default value for .

    */
    public class var Default : dotnet.System.ComponentModel.ImmutableObjectAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ImmutableObjectAttribute(hndl: System_ComponentModel_ImmutableObjectAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.ImmutableObjectAttribute No
    /**
    Specifies that an object has at least one editable subproperty. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.ImmutableObjectAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ImmutableObjectAttribute(hndl: System_ComponentModel_ImmutableObjectAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.ImmutableObjectAttribute Yes
    /**
    Specifies that an object has no subproperties that can be edited. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.ImmutableObjectAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ImmutableObjectAttribute(hndl: System_ComponentModel_ImmutableObjectAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter immutable: 
         if the object is immutable; otherwise, .
    */
    public init(immutable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ImmutableObjectAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(immutable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ImmutableObjectAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to a specified object.

    - Parameter obj: An  to compare with this instance or a null reference ( in Visual Basic).
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ImmutableObjectAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ImmutableObjectAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ImmutableObjectAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute
    /**
    Indicates whether the value of this instance is the default value.

    - Returns: 
         if this instance is the default attribute for the class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ImmutableObjectAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Immutable()
// docid: M:System.ComponentModel.ImmutableObjectAttribute.get_Immutable
    public func get_Immutable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ImmutableObjectAttribute_bool__get_Immutable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets whether the object is immutable.

    */
    public var Immutable : Bool {
        get {
            return try! get_Immutable();
        }
    }
} // ImmutableObjectAttribute


// type: System.ComponentModel.InitializationEventAttribute
    /**
    Specifies which event is raised on initialization. This class cannot be inherited.

    */
public final class InitializationEventAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InitializationEventAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.InitializationEventAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter eventName: The name of the initialization event.
    */
    public init(eventName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InitializationEventAttribute_ctor_0__1__String(&__thrown, eventName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_EventName()
// docid: M:System.ComponentModel.InitializationEventAttribute.get_EventName
    public func get_EventName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InitializationEventAttribute_String__get_EventName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of the initialization event.

    */
    public var EventName : dotnet.System.String {
        get {
            return try! get_EventName();
        }
    }
} // InitializationEventAttribute


// type: System.ComponentModel.InvalidAsynchronousStateException
    /**
    Thrown when a thread on which an operation should execute no longer exists or has no message loop.

    */
open class InvalidAsynchronousStateException
    :
    dotnet.System.ArgumentException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InvalidAsynchronousStateException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.InvalidAsynchronousStateException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidAsynchronousStateException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified detailed description.

    - Parameter message: A detailed description of the error.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidAsynchronousStateException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified detailed description and the specified exception.

    - Parameter message: A detailed description of the error.
    - Parameter innerException: A reference to the inner exception that is the cause of this exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidAsynchronousStateException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidAsynchronousStateException


// type: System.ComponentModel.InvalidEnumArgumentException
    /**
    The exception thrown when using invalid arguments that are enumerators.

    */
open class InvalidEnumArgumentException
    :
    dotnet.System.ArgumentException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InvalidEnumArgumentException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.InvalidEnumArgumentException.#ctor
    /**
    Initializes a new instance of the  class without a message.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidEnumArgumentException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message.

    - Parameter message: The message to display with this exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidEnumArgumentException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified detailed description and the specified exception.

    - Parameter message: A detailed description of the error.
    - Parameter innerException: A reference to the inner exception that is the cause of this exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidEnumArgumentException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32, System.Type)
// docid: M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)
    /**
    Initializes a new instance of the  class with a message generated from the argument, the invalid value, and an enumeration class.

    - Parameter argumentName: The name of the argument that caused the exception.
    - Parameter invalidValue: The value of the argument that failed.
    - Parameter enumClass: A  that represents the enumeration class with the valid values.
    */
    public init(argumentName : Optional<dotnet.System.String>, invalidValue : Swift.Int32, enumClass : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InvalidEnumArgumentException_ctor_0__3__String_i32_Type(&__thrown, argumentName?.get_handle() ?? nil, invalidValue, enumClass.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidEnumArgumentException


// type: System.ComponentModel.LocalizableAttribute
    /**
    Specifies whether a property should be localized. This class cannot be inherited.

    */
public final class LocalizableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LocalizableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.LocalizableAttribute Default
    /**
    Specifies the default value, which is . This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.LocalizableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.LocalizableAttribute(hndl: System_ComponentModel_LocalizableAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.LocalizableAttribute No
    /**
    Specifies that a property should not be localized. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.LocalizableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.LocalizableAttribute(hndl: System_ComponentModel_LocalizableAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.LocalizableAttribute Yes
    /**
    Specifies that a property should be localized. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.LocalizableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.LocalizableAttribute(hndl: System_ComponentModel_LocalizableAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter isLocalizable: 
         if a property should be localized; otherwise, .
    */
    public init(isLocalizable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LocalizableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(isLocalizable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.LocalizableAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LocalizableAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.LocalizableAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LocalizableAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.LocalizableAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LocalizableAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLocalizable()
// docid: M:System.ComponentModel.LocalizableAttribute.get_IsLocalizable
    public func get_IsLocalizable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LocalizableAttribute_bool__get_IsLocalizable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether a property should be localized.

    */
    public var IsLocalizable : Bool {
        get {
            return try! get_IsLocalizable();
        }
    }
} // LocalizableAttribute


// type: System.ComponentModel.MergablePropertyAttribute
    /**
    Specifies that this property can be combined with properties belonging to other objects in a Properties window.

    */
public final class MergablePropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_MergablePropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.MergablePropertyAttribute Default
    /**
    Specifies the default value, which is , that is a property can be combined with properties belonging to other objects in a Properties window. This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.MergablePropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.MergablePropertyAttribute(hndl: System_ComponentModel_MergablePropertyAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.MergablePropertyAttribute No
    /**
    Specifies that a property cannot be combined with properties belonging to other objects in a Properties window. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.MergablePropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.MergablePropertyAttribute(hndl: System_ComponentModel_MergablePropertyAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.MergablePropertyAttribute Yes
    /**
    Specifies that a property can be combined with properties belonging to other objects in a Properties window. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.MergablePropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.MergablePropertyAttribute(hndl: System_ComponentModel_MergablePropertyAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter allowMerge: 
         if this property can be combined with properties belonging to other objects in a Properties window; otherwise, .
    */
    public init(allowMerge : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MergablePropertyAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(allowMerge ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.MergablePropertyAttribute.Equals(System.Object)
    /**
    Indicates whether this instance and a specified object are equal.

    - Parameter obj: Another object to compare to.
    - Returns: 
         if  is equal to this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MergablePropertyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.MergablePropertyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MergablePropertyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MergablePropertyAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowMerge()
// docid: M:System.ComponentModel.MergablePropertyAttribute.get_AllowMerge
    public func get_AllowMerge() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MergablePropertyAttribute_bool__get_AllowMerge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether this property can be combined with properties belonging to other objects in a Properties window.

    */
    public var AllowMerge : Bool {
        get {
            return try! get_AllowMerge();
        }
    }
} // MergablePropertyAttribute


// type: System.ComponentModel.NotifyParentPropertyAttribute
    /**
    Indicates that the parent property is notified when the value of the property that this attribute is applied to is modified. This class cannot be inherited.

    */
public final class NotifyParentPropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_NotifyParentPropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.NotifyParentPropertyAttribute Default
    /**
    Indicates the default attribute state, that the property should not notify the parent property of changes to its value. This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.NotifyParentPropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.NotifyParentPropertyAttribute(hndl: System_ComponentModel_NotifyParentPropertyAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.NotifyParentPropertyAttribute No
    /**
    Indicates that the parent property is not be notified of changes to the value of the property. This field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.NotifyParentPropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.NotifyParentPropertyAttribute(hndl: System_ComponentModel_NotifyParentPropertyAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.NotifyParentPropertyAttribute Yes
    /**
    Indicates that the parent property is notified of changes to the value of the property. This field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.NotifyParentPropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.NotifyParentPropertyAttribute(hndl: System_ComponentModel_NotifyParentPropertyAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class, using the specified value to determine whether the parent property is notified of changes to the value of the property.

    - Parameter notifyParent: 
         if the parent should be notified of changes; otherwise, .
    */
    public init(notifyParent : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_NotifyParentPropertyAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(notifyParent ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)
    /**
    Gets a value indicating whether the specified object is the same as the current object.

    - Parameter obj: The object to test for equality.
    - Returns: 
         if the object is the same as this object; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NotifyParentPropertyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode
    /**
    Gets the hash code for this object.

    - Returns: The hash code for the object the attribute belongs to.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NotifyParentPropertyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the current value of the attribute is the default value of the attribute; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NotifyParentPropertyAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_NotifyParent()
// docid: M:System.ComponentModel.NotifyParentPropertyAttribute.get_NotifyParent
    public func get_NotifyParent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NotifyParentPropertyAttribute_bool__get_NotifyParent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets or sets a value indicating whether the parent property should be notified of changes to the value of the property.

    */
    public var NotifyParent : Bool {
        get {
            return try! get_NotifyParent();
        }
    }
} // NotifyParentPropertyAttribute


// type: System.ComponentModel.ParenthesizePropertyNameAttribute
    /**
    Indicates whether the name of the associated property is displayed with parentheses in the Properties window. This class cannot be inherited.

    */
public final class ParenthesizePropertyNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ParenthesizePropertyNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.ParenthesizePropertyNameAttribute Default
    /**
    Initializes a new instance of the  class with a default value that indicates that the associated property should not be shown with parentheses. This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.ParenthesizePropertyNameAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ParenthesizePropertyNameAttribute(hndl: System_ComponentModel_ParenthesizePropertyNameAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor
    /**
    Initializes a new instance of the  class that indicates that the associated property should not be shown with parentheses.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ParenthesizePropertyNameAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class, using the specified value to indicate whether the attribute is displayed with parentheses.

    - Parameter needParenthesis: 
         if the name should be enclosed in parentheses; otherwise, .
    */
    public init(needParenthesis : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ParenthesizePropertyNameAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(needParenthesis ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(System.Object)
    /**
    Compares the specified object to this object and tests for equality.

    - Parameter obj: 
    - Returns: 
         if equal; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ParenthesizePropertyNameAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode
    /**
    Gets the hash code for this object.

    - Returns: The hash code for the object the attribute belongs to.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ParenthesizePropertyNameAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the current value of the attribute is the default value of the attribute; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ParenthesizePropertyNameAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_NeedParenthesis()
// docid: M:System.ComponentModel.ParenthesizePropertyNameAttribute.get_NeedParenthesis
    public func get_NeedParenthesis() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ParenthesizePropertyNameAttribute_bool__get_NeedParenthesis_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether the Properties window displays the name of the property in parentheses in the Properties window.

    */
    public var NeedParenthesis : Bool {
        get {
            return try! get_NeedParenthesis();
        }
    }
} // ParenthesizePropertyNameAttribute


// type: System.ComponentModel.ReadOnlyAttribute
    /**
    Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited.

    */
public final class ReadOnlyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ReadOnlyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.ReadOnlyAttribute Default
    /**
    Specifies the default value for the , which is  (that is, the property this attribute is bound to is read/write). This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.ReadOnlyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ReadOnlyAttribute(hndl: System_ComponentModel_ReadOnlyAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.ReadOnlyAttribute No
    /**
    Specifies that the property this attribute is bound to is read/write and can be modified. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.ReadOnlyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ReadOnlyAttribute(hndl: System_ComponentModel_ReadOnlyAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.ReadOnlyAttribute Yes
    /**
    Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.ReadOnlyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ReadOnlyAttribute(hndl: System_ComponentModel_ReadOnlyAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter isReadOnly: 
         to show that the property this attribute is bound to is read-only;  to show that the property is read/write.
    */
    public init(isReadOnly : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ReadOnlyAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(isReadOnly ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
    /**
    Indicates whether this instance and a specified object are equal.

    - Parameter value: Another object to compare to.
    - Returns: 
         if  is equal to this instance; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReadOnlyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ReadOnlyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReadOnlyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReadOnlyAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.ComponentModel.ReadOnlyAttribute.get_IsReadOnly
    public func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReadOnlyAttribute_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether the property this attribute is bound to is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // ReadOnlyAttribute


// type: System.ComponentModel.RefreshProperties
    /**
    Defines identifiers that indicate the type of a refresh of the Properties window.

    */
public struct RefreshProperties : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RefreshProperties_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.RefreshProperties None
    /**
    No refresh is necessary.

    */
    public static var None : dotnet.System.ComponentModel.RefreshProperties {
        get {
        let __return = dotnet.System.ComponentModel.RefreshProperties(val: System_ComponentModel_RefreshProperties_get_None());
            return __return;
        }
    }
    // static field: System.ComponentModel.RefreshProperties All
    /**
    The properties should be requeried and the view should be refreshed.

    */
    public static var All : dotnet.System.ComponentModel.RefreshProperties {
        get {
        let __return = dotnet.System.ComponentModel.RefreshProperties(val: System_ComponentModel_RefreshProperties_get_All());
            return __return;
        }
    }
    // static field: System.ComponentModel.RefreshProperties Repaint
    /**
    The view should be refreshed.

    */
    public static var Repaint : dotnet.System.ComponentModel.RefreshProperties {
        get {
        let __return = dotnet.System.ComponentModel.RefreshProperties(val: System_ComponentModel_RefreshProperties_get_Repaint());
            return __return;
        }
    }
} // RefreshProperties


// type: System.ComponentModel.RefreshPropertiesAttribute
    /**
    Indicates that the property grid should refresh when the associated property value changes. This class cannot be inherited.

    */
public final class RefreshPropertiesAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RefreshPropertiesAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.RefreshPropertiesAttribute All
    /**
    Indicates that all properties are queried again and refreshed if the property value is changed. This field is read-only.

    */
    public class var All : dotnet.System.ComponentModel.RefreshPropertiesAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RefreshPropertiesAttribute(hndl: System_ComponentModel_RefreshPropertiesAttribute_get_All());
            return __return;
        }
    }
    // static field: System.ComponentModel.RefreshPropertiesAttribute Default
    /**
    Indicates that no other properties are refreshed if the property value is changed. This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.RefreshPropertiesAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RefreshPropertiesAttribute(hndl: System_ComponentModel_RefreshPropertiesAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.RefreshPropertiesAttribute Repaint
    /**
    Indicates that all properties are repainted if the property value is changed. This field is read-only.

    */
    public class var Repaint : dotnet.System.ComponentModel.RefreshPropertiesAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RefreshPropertiesAttribute(hndl: System_ComponentModel_RefreshPropertiesAttribute_get_Repaint());
            return __return;
        }
    }
    // .ctor(System.ComponentModel.RefreshProperties)
// docid: M:System.ComponentModel.RefreshPropertiesAttribute.#ctor(System.ComponentModel.RefreshProperties)
    /**
    Initializes a new instance of the  class.

    - Parameter refresh: A  value indicating the nature of the refresh.
    */
    public init(refresh : dotnet.System.ComponentModel.RefreshProperties) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RefreshPropertiesAttribute_ctor_0__1__RefreshProperties(&__thrown, refresh.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.RefreshPropertiesAttribute.Equals(System.Object)
    /**
    Overrides the object's  method.

    - Parameter obj: 
    - Returns: 
         if the specified object is the same; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshPropertiesAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode
    /**
    Returns the hash code for this object.

    - Returns: The hash code for the object that the attribute belongs to.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshPropertiesAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the current value of the attribute is the default; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshPropertiesAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.RefreshProperties get_RefreshProperties()
// docid: M:System.ComponentModel.RefreshPropertiesAttribute.get_RefreshProperties
    public func get_RefreshProperties() throws -> dotnet.System.ComponentModel.RefreshProperties {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshPropertiesAttribute_RefreshProperties__get_RefreshProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.RefreshProperties(val: __return);
        }
    }
    /**
    Gets the refresh properties for the member.

    */
    public var RefreshProperties : dotnet.System.ComponentModel.RefreshProperties {
        get {
            return try! get_RefreshProperties();
        }
    }
} // RefreshPropertiesAttribute


}
// System.ComponentModel.Design
// System.ComponentModel.Design.Serialization
extension System.ComponentModel.Design.Serialization {
// type: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute
    /**
    Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to. This class cannot be inherited.

    */
public final class DesignerSerializerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter serializerTypeName: The fully qualified name of the data type of the serializer.
    - Parameter baseSerializerTypeName: The fully qualified name of the base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.
    */
    public init(serializerTypeName : Optional<dotnet.System.String>, baseSerializerTypeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_ctor_0__2__String_String(&__thrown, serializerTypeName?.get_handle() ?? nil, baseSerializerTypeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter serializerTypeName: The fully qualified name of the data type of the serializer.
    - Parameter baseSerializerType: The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.
    */
    public init(serializerTypeName : Optional<dotnet.System.String>, baseSerializerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_ctor_0__2__String_Type(&__thrown, serializerTypeName?.get_handle() ?? nil, baseSerializerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type)
// docid: M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter serializerType: The data type of the serializer.
    - Parameter baseSerializerType: The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.
    */
    public init(serializerType : dotnet.System.Type_, baseSerializerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_ctor_0__2__Type_Type(&__thrown, serializerType.get_handle(), baseSerializerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_SerializerBaseTypeName()
// docid: M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_SerializerBaseTypeName
    public func get_SerializerBaseTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_String__get_SerializerBaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SerializerTypeName()
// docid: M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_SerializerTypeName
    public func get_SerializerTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_String__get_SerializerTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_DesignerSerializerAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the fully qualified type name of the serializer base type.

    */
    public var SerializerBaseTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_SerializerBaseTypeName();
        }
    }
    /**
    Gets the fully qualified type name of the serializer.

    */
    public var SerializerTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_SerializerTypeName();
        }
    }
    /**
    Indicates a unique ID for this attribute type.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // DesignerSerializerAttribute


}




public protocol System_ComponentModel_IComponent
    :
    System_IDisposable
{
}

public protocol System_ComponentModel_IContainer
    :
    System_IDisposable
{
}

public protocol System_ComponentModel_ISite
    :
    System_IServiceProvider
{
}

public protocol System_ComponentModel_ISupportInitialize
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_ISynchronizeInvoke
    :
    SGBridgeGetHandle
{
}

