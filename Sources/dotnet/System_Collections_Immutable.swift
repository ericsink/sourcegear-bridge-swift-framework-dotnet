// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Collections
// System.Collections.Immutable
extension System.Collections.Immutable {
// type: System.Collections.Immutable.IImmutableDictionary`2
    /**
    Represents an immutable collection of key/value pairs.  

 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
open class IImmutableDictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Collections_Immutable_IImmutableDictionary_2
{
    public typealias TKey_IImmutableDictionary_2 = TKey;
    public typealias TValue_IImmutableDictionary_2 = TValue;
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>;
    public typealias T_IReadOnlyCollection_1 = dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>;
    public typealias TKey_IReadOnlyDictionary_2 = TKey;
    public typealias TValue_IReadOnlyDictionary_2 = TValue;
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_IImmutableDictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> Add(TKey, TValue)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)
    /**
    Adds an element with the specified key and value to the dictionary.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add.
    - Returns: A new immutable dictionary that contains the additional key/value pair.

    */
    open func Add(key : TKey, value : TValue) throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Adds the specified key/value pairs to the dictionary.

    - Parameter pairs: The key/value pairs to add.
    - Returns: A new immutable dictionary that contains the additional key/value pairs.

    */
    open func AddRange(pairs : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___AddRange_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), pairs.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> Clear()
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.Clear
    /**
    Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.

    - Returns: An empty dictionary with equivalent ordering and key/value comparison rules.

    */
    open func Clear() throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Determines whether the immutable dictionary contains the specified key/value pair.

    - Parameter pair: The key/value pair to locate.
    - Returns: 
         if the specified key/value pair is found in the dictionary; otherwise, .

    */
    open func Contains(pair : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), pair.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> Remove(TKey)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)
    /**
    Removes the element with the specified key from the immutable dictionary.

    - Parameter key: The key of the element to remove.
    - Returns: A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.

    */
    open func Remove(key : TKey) throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the elements with the specified keys from the immutable dictionary.

    - Parameter keys: The keys of the elements to remove.
    - Returns: A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.

    */
    open func RemoveRange(keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey>) throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___RemoveRange_0__1__System_Collections_Generic_IEnumerable_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> SetItem(TKey, TValue)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)
    /**
    Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.

    - Parameter key: The key of the entry to add.
    - Parameter value: The key value to set.
    - Returns: A new immutable dictionary that contains the specified key/value pair.

    */
    open func SetItem(key : TKey, value : TValue) throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___SetItem_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableDictionary<TKey,TValue> SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.

    - Parameter items: The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.
    - Returns: A new immutable dictionary that contains the specified key/value pairs.

    */
    open func SetItems(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws -> dotnet.System.Collections.Immutable.IImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableDictionary_2_System_Collections_Immutable_IImmutableDictionary_TKey_TValue___SetItems_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableDictionary_2(hndl : __return);
        }
    }
    // bool TryGetKey(TKey, ref TKey)
// docid: M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)
    /**
    Determines whether this dictionary contains a specified key.

    - Parameter equalKey: The key to search for.
    - Parameter actualKey: The matching key located in the dictionary if found, or equalkey if no match is found.
    - Returns: 
         if a match for  is found; otherwise, .

    */
    open func TryGetKey(equalKey : TKey, actualKey : inout TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualKey = actualKey.to_gval();
        let __return = System_Collections_Immutable_IImmutableDictionary_2_bool__TryGetKey_0__2__TKey_outTKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), equalKey.to_gval(), &_tmp_out_actualKey);
            let _tmp2_actualKey = TKey(gval: _tmp_out_actualKey);
            actualKey = _tmp2_actualKey;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IImmutableDictionary_2


// type: System.Collections.Immutable.IImmutableList`1
    /**
    Represents a list of elements that cannot be modified.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
open class IImmutableList_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Collections_Immutable_IImmutableList_1
{
    public typealias T_IImmutableList_1 = T;
    public typealias T_IEnumerable_1 = T;
    public typealias T_IReadOnlyCollection_1 = T;
    public typealias T_IReadOnlyList_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_IImmutableList_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Immutable.IImmutableList<T> Add(T)
// docid: M:System.Collections.Immutable.IImmutableList`1.Add(`0)
    /**
    Makes a copy of the list, and adds the specified object to the end of the  copied list.

    - Parameter value: The object to add to the list.
    - Returns: A new list with the object added.

    */
    open func Add(value : T) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> AddRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Makes a copy of the list and adds the specified objects to the end of the copied list.

    - Parameter items: The objects to add to the list.
    - Returns: A new list with the elements added.

    */
    open func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___AddRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> Clear()
// docid: M:System.Collections.Immutable.IImmutableList`1.Clear
    /**
    Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.

    - Returns: An empty list that has the same sorting and ordering semantics as this instance.

    */
    open func Clear() throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the  that starts at the specified index and contains the specified number of elements.

    - Parameter item: The object to locate in the . This value can be null for reference types.
    - Parameter index: The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements in the section to search.
    - Parameter equalityComparer: The equality comparer to use to locate .
    - Returns: The zero-based index of the first occurrence of  within the range of elements in the  that starts at  and contains  number of elements if found; otherwise -1.

    */
    open func IndexOf(item : T, index : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_i32__IndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.IImmutableList<T> Insert(System.Int32, T)
// docid: M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)
    /**
    Inserts the specified element at the specified index in the immutable list.

    - Parameter index: The zero-based index at which to insert the value.
    - Parameter element: The object to insert.
    - Returns: A new immutable list that includes the specified element.

    */
    open func Insert(index : Swift.Int32, element : T) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, element.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    /**
    Inserts the specified elements at the specified index in the immutable list.

    - Parameter index: The zero-based index at which the new elements should be inserted.
    - Parameter items: The elements to insert.
    - Returns: A new immutable list that includes the specified elements.

    */
    open func InsertRange(index : Swift.Int32, items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___InsertRange_0__2__i32_System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the  that contains the specified number of elements and ends at the specified index.

    - Parameter item: The object to locate in the list. The value can be  for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements in the section to search.
    - Parameter equalityComparer: The equality comparer to match .
    - Returns: Returns .

    */
    open func LastIndexOf(item : T, index : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_i32__LastIndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.IImmutableList<T> Remove(T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Removes the first occurrence of a specified object from this immutable list.

    - Parameter value: The object to remove from the list.
    - Parameter equalityComparer: The equality comparer to use to locate .
    - Returns: A new list with the specified object removed.

    */
    open func Remove(value : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___Remove_0__2__T_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> RemoveAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})
    /**
    Removes all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to remove.
    - Returns: A new immutable list with the elements removed.

    */
    open func RemoveAll(match : dotnet.System.Predicate_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___RemoveAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func RemoveAll(match : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveAll(match: del_match);
    }
    // System.Collections.Immutable.IImmutableList<T> RemoveAt(System.Int32)
// docid: M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index of the immutable list.

    - Parameter index: The index of the element to remove.
    - Returns: A new list with the element removed.

    */
    open func RemoveAt(index : Swift.Int32) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Removes the specified object from the list.

    - Parameter items: The objects to remove from the list.
    - Parameter equalityComparer: The equality comparer to use to determine if  match any objects in the list.
    - Returns: A new immutable list with the specified objects removed, if  matched objects in the list.

    */
    open func RemoveRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___RemoveRange_0__2__System_Collections_Generic_IEnumerable_T__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> RemoveRange(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)
    /**
    Removes a range of elements from the .

    - Parameter index: The zero-based starting index of the range of elements to remove.
    - Parameter count: The number of elements to remove.
    - Returns: A new immutable list with the elements removed.

    */
    open func RemoveRange(index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___RemoveRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Returns a new list with the first matching element in the list replaced with the specified element.

    - Parameter oldValue: The element to be replaced.
    - Parameter newValue: The element to replace the first occurrence of  with
    - Parameter equalityComparer: The equality comparer to use for matching .
    - Returns: A new list that contains , even if  is the same as .

    */
    open func Replace(oldValue : T, newValue : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___Replace_0__3__T_T_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), oldValue.to_gval(), newValue.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> SetItem(System.Int32, T)
// docid: M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)
    /**
    Replaces an element in the list at a given position with the specified element.

    - Parameter index: The position in the list of the element to replace.
    - Parameter value: The element to replace the old element with.
    - Returns: A new list that contains the new element, even if the element at the specified location is the same as the new element.

    */
    open func SetItem(index : Swift.Int32, value : T) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableList_1_System_Collections_Immutable_IImmutableList_T___SetItem_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
} // IImmutableList_1


// type: System.Collections.Immutable.IImmutableQueue`1
    /**
    Represents an immutable first-in, first-out collection of objects.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
open class IImmutableQueue_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Collections_Immutable_IImmutableQueue_1
{
    public typealias T_IImmutableQueue_1 = T;
    public typealias T_IEnumerable_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_IImmutableQueue_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Immutable.IImmutableQueue<T> Clear()
// docid: M:System.Collections.Immutable.IImmutableQueue`1.Clear
    /**
    Returns a new queue with all the elements removed.

    - Returns: An empty immutable queue.

    */
    open func Clear() throws -> dotnet.System.Collections.Immutable.IImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableQueue_1_System_Collections_Immutable_IImmutableQueue_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableQueue_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableQueue<T> Dequeue()
// docid: M:System.Collections.Immutable.IImmutableQueue`1.Dequeue
    /**
    Removes the first element in the immutable queue, and returns the new queue.

    - Returns: The new immutable queue with the first element removed. This value is never .

    */
    open func Dequeue() throws -> dotnet.System.Collections.Immutable.IImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableQueue_1_System_Collections_Immutable_IImmutableQueue_T___Dequeue_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableQueue_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableQueue<T> Enqueue(T)
// docid: M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)
    /**
    Adds an element to the end of the immutable queue, and returns the new queue.

    - Parameter value: The element to add.
    - Returns: The new immutable queue with the specified element added.

    */
    open func Enqueue(value : T) throws -> dotnet.System.Collections.Immutable.IImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableQueue_1_System_Collections_Immutable_IImmutableQueue_T___Enqueue_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableQueue_1(hndl : __return);
        }
    }
    // T Peek()
// docid: M:System.Collections.Immutable.IImmutableQueue`1.Peek
    /**
    Returns the element at the beginning of the immutable queue without removing it.

    - Returns: The element at the beginning of the queue.

    */
    open func Peek() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableQueue_1_T__Peek_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.IImmutableQueue`1.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableQueue_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IImmutableQueue_1


// type: System.Collections.Immutable.IImmutableSet`1
    /**
    Represents a set of elements that can only be modified by creating a new instance of the set.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
open class IImmutableSet_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Collections_Immutable_IImmutableSet_1
{
    public typealias T_IImmutableSet_1 = T;
    public typealias T_IEnumerable_1 = T;
    public typealias T_IReadOnlyCollection_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_IImmutableSet_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Immutable.IImmutableSet<T> Add(T)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Add(`0)
    /**
    Adds the specified element to this immutable set.

    - Parameter value: The element to add.
    - Returns: A new set with the element added, or this set if the element is already in the set.

    */
    open func Add(value : T) throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableSet<T> Clear()
// docid: M:System.Collections.Immutable.IImmutableSet`1.Clear
    /**
    Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.

    - Returns: An empty set that has the same sorting and ordering semantics as this instance.

    */
    open func Clear() throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)
    /**
    Determines whether this immutable set contains a specified element.

    - Parameter value: The element to locate in the set.
    - Returns: 
         if the set contains the specified value; otherwise, .

    */
    open func Contains(value : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.IImmutableSet<T> Except(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the elements in the specified collection from the current immutable set.

    - Parameter other: The collection of items to remove from this set.
    - Returns: A new set with the items removed; or the original set if none of the items were in the set.

    */
    open func Except(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___Except_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableSet<T> Intersect(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates an immutable set that contains only elements that exist in this set and the specified set.

    - Parameter other: The collection to compare to the current .
    - Returns: A new immutable set that contains elements that exist in both sets.

    */
    open func Intersect(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___Intersect_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable set is a proper (strict) subset of the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper subset of the specified collection; otherwise, .

    */
    open func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable set is a proper (strict) superset of the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper superset of the specified collection; otherwise, .

    */
    open func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable set is a subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a subset of the specified collection; otherwise, .

    */
    open func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable set is a superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a superset of the specified collection; otherwise, .

    */
    open func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable set overlaps with the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set and the specified collection share at least one common element; otherwise, .

    */
    open func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.IImmutableSet<T> Remove(T)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)
    /**
    Removes the specified element from this immutable set.

    - Parameter value: The element to remove.
    - Returns: A new set with the specified element removed, or the current set if the element cannot be found in the set.

    */
    open func Remove(value : T) throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable set and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the sets are equal; otherwise, .

    */
    open func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.IImmutableSet<T> SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.

    - Parameter other: The collection to compare to the current set.
    - Returns: A new set that contains the elements that are present only in the current set or in the specified collection, but not both.

    */
    open func SymmetricExcept(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___SymmetricExcept_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)
    /**
    Determines whether the set contains a specified value.

    - Parameter equalValue: The value to search for.
    - Parameter actualValue: The matching value from the set, if found, or equalvalue if there are no matches.
    - Returns: 
         if a matching value was found; otherwise, .

    */
    open func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Immutable_IImmutableSet_1_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.IImmutableSet<T> Union(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.

    - Parameter other: The collection to add elements from.
    - Returns: A new immutable set with the items added; or the original set if all the items were already in the set.

    */
    open func Union(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableSet_1_System_Collections_Immutable_IImmutableSet_T___Union_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableSet_1(hndl : __return);
        }
    }
} // IImmutableSet_1


// type: System.Collections.Immutable.IImmutableStack`1
    /**
    Represents an immutable last-in-first-out (LIFO) collection.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
open class IImmutableStack_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Collections_Immutable_IImmutableStack_1
{
    public typealias T_IImmutableStack_1 = T;
    public typealias T_IEnumerable_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_IImmutableStack_1_get_type_handle(T.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Immutable.IImmutableStack<T> Clear()
// docid: M:System.Collections.Immutable.IImmutableStack`1.Clear
    /**
    Removes all objects from the immutable stack.

    - Returns: An empty immutable stack.

    */
    open func Clear() throws -> dotnet.System.Collections.Immutable.IImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableStack_1_System_Collections_Immutable_IImmutableStack_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableStack_1(hndl : __return);
        }
    }
    // T Peek()
// docid: M:System.Collections.Immutable.IImmutableStack`1.Peek
    /**
    Returns the element at the top of the immutable stack without removing it.

    - Returns: The element at the top of the stack.

    */
    open func Peek() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableStack_1_T__Peek_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // System.Collections.Immutable.IImmutableStack<T> Pop()
// docid: M:System.Collections.Immutable.IImmutableStack`1.Pop
    /**
    Removes the element at the top of the immutable stack and returns the new stack.

    - Returns: The new stack; never 

    */
    open func Pop() throws -> dotnet.System.Collections.Immutable.IImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableStack_1_System_Collections_Immutable_IImmutableStack_T___Pop_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableStack_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableStack<T> Push(T)
// docid: M:System.Collections.Immutable.IImmutableStack`1.Push(`0)
    /**
    Inserts an element at the top of the immutable stack and returns the new stack.

    - Parameter value: The element to push onto the stack.
    - Returns: The new stack.

    */
    open func Push(value : T) throws -> dotnet.System.Collections.Immutable.IImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableStack_1_System_Collections_Immutable_IImmutableStack_T___Push_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableStack_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.IImmutableStack`1.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_IImmutableStack_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IImmutableStack_1


// type: System.Collections.Immutable.ImmutableArray
public struct ImmutableArray {
    // System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32, System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
    /**
    Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.

    - Parameter array: The sorted array to search.
    - Parameter index: The starting index of the range to search.
    - Parameter length: The length of the range to search.
    - Parameter value: The object to search for.
    - Returns: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    public static func BinarySearch<UT : SGBridgeGenericValue>(array : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, index : Swift.Int32, length : Swift.Int32, value : UT) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_i32__BinarySearch_1__4__System_Collections_Immutable_ImmutableArray_UT__i32_i32_UT(UT.get_type_handle(), &__thrown, array.get_handle(), index, length, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
    /**
    Searches a sorted immutable array for a specified element and returns the zero-based index of the element.

    - Parameter array: The sorted array to search.
    - Parameter index: The starting index of the range to search.
    - Parameter length: The length of the range to search.
    - Parameter value: The object to search for.
    - Parameter comparer: The comparer to use when comparing elements for equality or  to use the default comparer.
    - Returns: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    public static func BinarySearch<UT : SGBridgeGenericValue>(array : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, index : Swift.Int32, length : Swift.Int32, value : UT, comparer : dotnet.System.Collections.Generic.IComparer_1<UT>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_i32__BinarySearch_1__5__System_Collections_Immutable_ImmutableArray_UT__i32_i32_UT_System_Collections_Generic_IComparer_UT_(UT.get_type_handle(), &__thrown, array.get_handle(), index, length, value.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, T)
// docid: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
    /**
    Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.

    - Parameter array: The sorted array to search.
    - Parameter value: The object to search for.
    - Returns: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    public static func BinarySearch<UT : SGBridgeGenericValue>(array : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, value : UT) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_i32__BinarySearch_1__2__System_Collections_Immutable_ImmutableArray_UT__UT(UT.get_type_handle(), &__thrown, array.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
    /**
    Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.

    - Parameter array: The sorted array to search.
    - Parameter value: The object to search for.
    - Parameter comparer: The comparer implementation to use when comparing elements, or null to use the default comparer.
    - Returns: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    public static func BinarySearch<UT : SGBridgeGenericValue>(array : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, value : UT, comparer : dotnet.System.Collections.Generic.IComparer_1<UT>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_i32__BinarySearch_1__3__System_Collections_Immutable_ImmutableArray_UT__UT_System_Collections_Generic_IComparer_UT_(UT.get_type_handle(), &__thrown, array.get_handle(), value.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<T>.Builder CreateBuilder<T>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<T>.Builder CreateBuilder<T>(System.Int32)
    // System.Collections.Immutable.ImmutableArray<T> CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new  populated with the specified items.

    - Parameter items: The elements to add to the array.
    - Returns: An immutable array that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UT___CreateRange_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
    /**
    Initializes a new instance of the  struct.

    - Parameter items: The source array to initialize the resulting array with.
    - Parameter selector: The function to apply to each element from the source array.
    - Returns: An immutable array that contains the specified items.

    */
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UTResult___CreateRange_2__2__System_Collections_Immutable_ImmutableArray_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, items.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try CreateRange(items: items, selector: del_selector);
    }
    // System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Int32, System.Int32, System.Func<TSource,TResult>)
// docid: M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
    /**
    Initializes a new instance of the  struct.

    - Parameter items: The source array to initialize the resulting array with.
    - Parameter start: The index of the first element in the source array to include in the resulting array.
    - Parameter length: The number of elements from the source array to include in the resulting array.
    - Parameter selector: The function to apply to each element from the source array included in the resulting array.
    - Returns: An immutable array that contains the specified items.

    */
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, start : Swift.Int32, length : Swift.Int32, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UTResult___CreateRange_2__4__System_Collections_Immutable_ImmutableArray_UTSource__i32_i32_System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, items.get_handle(), start, length, selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, start : Swift.Int32, length : Swift.Int32, selector : @escaping (UTSource) throws -> UTResult) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try CreateRange(items: items, start: start, length: length, selector: del_selector);
    }
    // System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource,TArg,TResult>, TArg)
// docid: M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
    /**
    Initializes a new instance of the  struct.

    - Parameter items: The source array to initialize the resulting array with.
    - Parameter selector: The function to apply to each element from the source array.
    - Parameter arg: An argument to be passed to the selector mapping function.
    - Returns: An immutable array that contains the specified items.

    */
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTArg : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, selector : dotnet.System.Func_3<UTSource,UTArg,UTResult>, arg : UTArg) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UTResult___CreateRange_3__3__System_Collections_Immutable_ImmutableArray_UTSource__System_Func_UTSource_UTArg_UTResult__UTArg(UTSource.get_type_handle(), UTArg.get_type_handle(), UTResult.get_type_handle(), &__thrown, items.get_handle(), selector.get_handle(), arg.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTArg : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, selector : @escaping (UTSource, UTArg) throws -> UTResult, arg : UTArg) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<UTSource,UTArg,UTResult>(selector);
        return try CreateRange(items: items, selector: del_selector, arg: arg);
    }
    // System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Int32, System.Int32, System.Func<TSource,TArg,TResult>, TArg)
// docid: M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
    /**
    Initializes a new instance of the  struct.

    - Parameter items: The source array to initialize the resulting array with.
    - Parameter start: The index of the first element in the source array to include in the resulting array.
    - Parameter length: The number of elements from the source array to include in the resulting array.
    - Parameter selector: The function to apply to each element from the source array included in the resulting array.
    - Parameter arg: An argument to be passed to the selector mapping function.
    - Returns: An immutable array that contains the specified items.

    */
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTArg : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, start : Swift.Int32, length : Swift.Int32, selector : dotnet.System.Func_3<UTSource,UTArg,UTResult>, arg : UTArg) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UTResult___CreateRange_3__5__System_Collections_Immutable_ImmutableArray_UTSource__i32_i32_System_Func_UTSource_UTArg_UTResult__UTArg(UTSource.get_type_handle(), UTArg.get_type_handle(), UTResult.get_type_handle(), &__thrown, items.get_handle(), start, length, selector.get_handle(), arg.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateRange<UTSource : SGBridgeGenericValue,UTArg : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, start : Swift.Int32, length : Swift.Int32, selector : @escaping (UTSource, UTArg) throws -> UTResult, arg : UTArg) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<UTSource,UTArg,UTResult>(selector);
        return try CreateRange(items: items, start: start, length: length, selector: del_selector, arg: arg);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<T> Create<T>()
    // System.Collections.Immutable.ImmutableArray<T> Create<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
    /**
    Creates an immutable array with the specified objects from another immutable array.

    - Parameter items: The source array of objects.
    - Parameter start: The index of the first element to copy from .
    - Parameter length: The number of elements from  to include in this immutable array.
    - Returns: An immutable array that contains the specified objects from the source array.

    */
    public static func Create<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, start : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UT___Create_1__3__System_Collections_Immutable_ImmutableArray_UT__i32_i32(UT.get_type_handle(), &__thrown, items.get_handle(), start, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Create<T>(T)
// docid: M:System.Collections.Immutable.ImmutableArray.Create``1(``0)
    /**
    Creates an immutable array that contains the specified object.

    - Parameter item: The object to store in the array.
    - Returns: An immutable array that contains the specified object.

    */
    public static func Create<UT : SGBridgeGenericValue>(item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UT___Create_1__1__UT(UT.get_type_handle(), &__thrown, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Create<T>(T, T)
// docid: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
    /**
    Creates an immutable array that contains the specified objects.

    - Parameter item1: The first object to store in the array.
    - Parameter item2: The second object to store in the array.
    - Returns: An immutable array that contains the specified objects.

    */
    public static func Create<UT : SGBridgeGenericValue>(item1 : UT, item2 : UT) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UT___Create_1__2__UT_UT(UT.get_type_handle(), &__thrown, item1.to_gval(), item2.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Create<T>(T, T, T)
// docid: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
    /**
    Creates an immutable array that contains the specified objects.

    - Parameter item1: The first object to store in the array.
    - Parameter item2: The second object to store in the array.
    - Parameter item3: The third object to store in the array.
    - Returns: An immutable array that contains the specified objects.

    */
    public static func Create<UT : SGBridgeGenericValue>(item1 : UT, item2 : UT, item3 : UT) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UT___Create_1__3__UT_UT_UT(UT.get_type_handle(), &__thrown, item1.to_gval(), item2.to_gval(), item3.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Create<T>(T, T, T, T)
// docid: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
    /**
    Creates an immutable array that contains the specified objects.

    - Parameter item1: The first object to store in the array.
    - Parameter item2: The second object to store in the array.
    - Parameter item3: The third object to store in the array.
    - Parameter item4: The fourth object to store in the array.
    - Returns: An immutable array that contains the specified objects.

    */
    public static func Create<UT : SGBridgeGenericValue>(item1 : UT, item2 : UT, item3 : UT, item4 : UT) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UT___Create_1__4__UT_UT_UT_UT(UT.get_type_handle(), &__thrown, item1.to_gval(), item2.to_gval(), item3.to_gval(), item4.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<T> Create<T>(T[])
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<T> Create<T>(T[], System.Int32, System.Int32)
    // System.Collections.Immutable.ImmutableArray<TSource> ToImmutableArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates an immutable array from the specified collection.

    - Parameter items: The collection of objects to copy to the immutable array.
    - Returns: An immutable array that contains the specified collection of objects.

    */
    public static func ToImmutableArray<UTSource : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UTSource___ToImmutableArray_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<TSource> ToImmutableArray<TSource>(System.Collections.Immutable.ImmutableArray<TSource>.Builder)
// docid: M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public static func ToImmutableArray<UTSource : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_System_Collections_Immutable_ImmutableArray_UTSource___ToImmutableArray_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UTSource_(UTSource.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
} // ImmutableArray


// type: System.Collections.Immutable.ImmutableArray`1
// boxed value type
    /**
    Represents an array that is immutable; meaning it cannot be changed once it is created.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableArray_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IList,
    System_Collections_IStructuralComparable,
    System_Collections_IStructuralEquatable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableArray_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets a value indicating whether this array was declared but not initialized.

    */
    public var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
    }
    /**
    Gets a value indicating whether this  is empty or is not initialized.

    */
    public var IsDefaultOrEmpty : Bool {
        get {
            return try! get_IsDefaultOrEmpty();
        }
    }
    /**
    Gets a value indicating whether this  is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the number of elements in the array.

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableArray_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // System.Collections.Immutable.ImmutableArray<T> Add(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Add(`0)
    /**
    Returns a copy of the original array with the specified item added to the end.

    - Parameter item: The item to be added to the end of the array.
    - Returns: A new array with the specified item added to the end.

    */
    public func Add(item : T) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> AddRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Returns a copy of the original array with the specified elements added to the end of the array.

    - Parameter items: The elements to add to the array.
    - Returns: A new array with the elements added.

    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___AddRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> AddRange(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
    /**
    Returns a copy of the original array with the specified elements added to the end of the array.

    - Parameter items: The elements to add to the array.
    - Returns: A new array with the elements added.

    */
    public func AddRange(items : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___AddRange_0__1__System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.ReadOnlyMemory<T> AsMemory()
// docid: M:System.Collections.Immutable.ImmutableArray`1.AsMemory
    /**
    Creates a new read-only memory region over this immutable array.

    - Returns: The read-only memory representation of this immutable array.

    */
    public func AsMemory() throws -> dotnet.System.ReadOnlyMemory_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_ReadOnlyMemory_T___AsMemory_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<TOther> As<TOther>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableArray<TOther> CastArray<TOther>()
    // System.Collections.Immutable.ImmutableArray<T> CastUp<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Initializes a new instance of the  struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.

    - Parameter items: The array to initialize the array with. No copy is made.
    - Returns: An immutable array instance with elements cast to the new type.

    */
    public class func CastUp<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___CastUp_1__1__System_Collections_Immutable_ImmutableArray_UTDerived_(T.get_type_handle(), UTDerived.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Clear()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Clear
    /**
    Returns an array with all the elements removed.

    - Returns: An array with all of the elements removed.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)
    /**
    Determines whether the specified item exists in the array.

    - Parameter item: The item to search for.
    - Returns: 
         if the specified item was found in the array; otherwise .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Int32, T[], System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,System.Collections.Immutable.T[],System.Int32,System.Int32)
    public func CopyTo(sourceIndex : Swift.Int32, destination : dotnet.System_Arr<T>, destinationIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_void__CopyTo_0__4__i32_TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), sourceIndex, destination.get_handle(), destinationIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[])
// docid: M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Collections.Immutable.T[])
    public func CopyTo(destination : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), destination.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Collections.Immutable.T[],System.Int32)
    public func CopyTo(destination : dotnet.System_Arr<T>, destinationIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), destination.get_handle(), destinationIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Equals(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
    /**
    Indicates whether specified array is equal to this array.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if  is equal to this array; otherwise, .

    */
    public func Equals(other : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__Equals_0__1__System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
    /**
    Determines if this array is equal to the specified object.

    - Parameter obj: The  to compare with this array.
    - Returns: 
         if this array is equal to ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__Equals_0__1__Object(T.get_type_handle(), &__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableArray<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the contents of the array.

    - Returns: An enumerator.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableArray_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_Enumerator_1(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Collections.Immutable.ImmutableArray`1.GetHashCode
    /**
    Returns a hash code for this instance.

    - Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__GetHashCode_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
    /**
    Searches the array for the specified item.

    - Parameter item: The item to search for.
    - Returns: The zero-based index position of the item if it is found, or -1 if it is not.

    */
    public func IndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
    /**
    Searches the array for the specified item.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Returns: The zero-based index position of the item if it is found, or -1 if it is not.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__IndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches the array for the specified item.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The zero-based index position of the item if it is found, or -1 if it is not.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__IndexOf_0__3__T_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
    /**
    Searches the array for the specified item.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Parameter count: The number of elements to search.
    - Returns: The zero-based index position of the item if it is found, or -1 if it is not.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__IndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches the array for the specified item.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Parameter count: The number of elements to search.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The zero-based index position of the item if it is found, or -1 if it is not.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__IndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Insert(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
    /**
    Returns a new array with the specified value inserted at the specified position.

    - Parameter index: The 0-based index into the array at which the new item should be added.
    - Parameter item: The item to insert at the start of the array.
    - Returns: A new array with the item inserted at the specified index.

    */
    public func Insert(index : Swift.Int32, item : T) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    /**
    Inserts the specified values at the specified index.

    - Parameter index: The index at which to insert the value.
    - Parameter items: The elements to insert.
    - Returns: A new immutable array with the items inserted at the specified index.

    */
    public func InsertRange(index : Swift.Int32, items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___InsertRange_0__2__i32_System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> InsertRange(System.Int32, System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
    /**
    Inserts the specified values at the specified index.

    - Parameter index: The index at which to insert the value.
    - Parameter items: The elements to insert.
    - Returns: A new immutable array with the items inserted at the specified index.

    */
    public func InsertRange(index : Swift.Int32, items : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___InsertRange_0__2__i32_System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Int32 LastIndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
    /**
    Searches the array for the specified item; starting at the end of the array.

    - Parameter item: The item to search for.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__LastIndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
    /**
    Searches the array for the specified item; starting at the end of the array.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__LastIndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
    /**
    Searches the array for the specified item; starting at the end of the array.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Parameter count: The number of elements to search.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__LastIndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches the array for the specified item; starting at the end of the array.

    - Parameter item: The item to search for.
    - Parameter startIndex: The index at which to begin the search.
    - Parameter count: The number of elements to search.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__LastIndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<TResult> OfType<TResult>()
    // [IsSpecialName] bool op_Equality(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
    /**
    Returns a value that indicates if two arrays are equal.

    - Parameter left: The array to the left of the operator.
    - Parameter right: The array to the right of the operator.
    - Returns: 
         if the arrays are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Collections.Immutable.ImmutableArray_1<T>, right : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__op_Equality_0__2__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Nullable<System.Collections.Immutable.ImmutableArray<T>>, System.Nullable<System.Collections.Immutable.ImmutableArray<T>>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
    /**
    Returns a value that indicates if two arrays are equal.

    - Parameter left: The array to the left of the operator.
    - Parameter right: The array to the right of the operator.
    - Returns: 
         if the arrays are equal; otherwise, .

    */
    public class func op_Equality(left : Optional<dotnet.System.Collections.Immutable.ImmutableArray_1<T>>, right : Optional<dotnet.System.Collections.Immutable.ImmutableArray_1<T>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__op_Equality_0__2__System_Nullable_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_T___System_Nullable_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_T__(T.get_type_handle(), &__thrown, (left != nil) ? left!.get_handle() : nil, (right != nil) ? right!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
    /**
    Returns a value that indicates whether two arrays are not equal.

    - Parameter left: The array to the left of the operator.
    - Parameter right: The array to the right of the operator.
    - Returns: 
         if the arrays are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Collections.Immutable.ImmutableArray_1<T>, right : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__op_Inequality_0__2__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Nullable<System.Collections.Immutable.ImmutableArray<T>>, System.Nullable<System.Collections.Immutable.ImmutableArray<T>>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
    /**
    Checks for inequality between two array.

    - Parameter left: The object to the left of the operator.
    - Parameter right: The object to the right of the operator.
    - Returns: 
         if the two arrays are not equal; otherwise, .

    */
    public class func op_Inequality(left : Optional<dotnet.System.Collections.Immutable.ImmutableArray_1<T>>, right : Optional<dotnet.System.Collections.Immutable.ImmutableArray_1<T>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__op_Inequality_0__2__System_Nullable_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_T___System_Nullable_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_T__(T.get_type_handle(), &__thrown, (left != nil) ? left!.get_handle() : nil, (right != nil) ? right!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Remove(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)
    /**
    Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.

    - Parameter item: The item to remove.
    - Returns: A new array with the item removed.

    */
    public func Remove(item : T) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Remove(T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Returns an array with the first occurrence of the specified element removed from the array.  
  
 If no match is found, the current array is returned.

    - Parameter item: The item to remove.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: A new array with the specified item removed.

    */
    public func Remove(item : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Remove_0__2__T_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
    /**
    Removes all the items from the array that meet the specified condition.

    - Parameter match: The delegate that defines the conditions of the elements to remove.
    - Returns: A new array with items that meet the specified condition removed.

    */
    public func RemoveAll(match : dotnet.System.Predicate_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func RemoveAll(match : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveAll(match: del_match);
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveAt(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
    /**
    Returns an array with the element at the specified position removed.

    - Parameter index: The 0-based index of the element to remove from the returned array.
    - Returns: A new array with the item at the specified index removed.

    */
    public func RemoveAt(index : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the specified items from this array.

    - Parameter items: The items to remove if matches are found in this list.
    - Returns: A new array with the elements removed.

    */
    public func RemoveRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Removes the specified items from this array.

    - Parameter items: The items to remove if matches are found in this list.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: A new array with the elements removed.

    */
    public func RemoveRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveRange_0__2__System_Collections_Generic_IEnumerable_T__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveRange(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
    /**
    Removes the specified values from this list.

    - Parameter items: The items to remove if matches are found in this list.
    - Returns: A new list with the elements removed.

    */
    public func RemoveRange(items : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveRange_0__1__System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveRange(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Removes the specified items from this list.

    - Parameter items: The items to remove if matches are found in this list.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: A new array with the elements removed.

    */
    public func RemoveRange(items : dotnet.System.Collections.Immutable.ImmutableArray_1<T>, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveRange_0__2__System_Collections_Immutable_ImmutableArray_T__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> RemoveRange(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
    /**
    Returns an array with the elements at the specified position removed.

    - Parameter index: The 0-based index of the starting element to remove from the array.
    - Parameter length: The number of elements to remove from the array.
    - Returns: The new array with the specified elements removed.

    */
    public func RemoveRange(index : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___RemoveRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Replace(T, T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
    /**
    Finds the first element in the array equal to the specified value and replaces the value with the specified new value.

    - Parameter oldValue: The value to find and replace in the array.
    - Parameter newValue: The value to replace the oldvalue with.
    - Returns: A new array that contains  even if the new and old values are the same.

    */
    public func Replace(oldValue : T, newValue : T) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Replace_0__2__T_T(T.get_type_handle(), &__thrown, self.get_handle(), oldValue.to_gval(), newValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Finds the first element in the array equal to the specified value and replaces the value with the specified new value.

    - Parameter oldValue: The value to find and replace in the array.
    - Parameter newValue: The value to replace the oldvalue with.
    - Parameter equalityComparer: The equality comparer to use to compare values.
    - Returns: A new array that contains  even if the new and old values are the same.

    */
    public func Replace(oldValue : T, newValue : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Replace_0__3__T_T_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), oldValue.to_gval(), newValue.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> SetItem(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
    /**
    Replaces the item at the specified index with the specified item.

    - Parameter index: The index of the item to replace.
    - Parameter item: The item to add to the list.
    - Returns: The new array that contains  at the specified index.

    */
    public func SetItem(index : Swift.Int32, item : T) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___SetItem_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Sort()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Sort
    /**
    Sorts the elements in the immutable array using the default comparer.

    - Returns: A new immutable array that contains the items in this array, in sorted order.

    */
    public func Sort() throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Sort_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Sort(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
    /**
    Sorts the elements in the immutable array using the specified comparer.

    - Parameter comparer: The implementation to use when comparing elements, or  to use the default comparer
    - Returns: A new immutable array that contains the items in this array, in sorted order.

    */
    public func Sort(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Sort_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> Sort(System.Comparison<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})
    /**
    Sorts the elements in the entire  using             the specified .

    - Parameter comparison: The  to use when comparing elements.
    - Returns: The sorted list.

    */
    public func Sort(comparison : dotnet.System.Comparison_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Sort_0__1__System_Comparison_T_(T.get_type_handle(), &__thrown, self.get_handle(), comparison.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func Sort(comparison : @escaping (T, T) throws -> Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        let del_comparison = try dotnet.System.Comparison_1<T>(comparison);
        return try Sort(comparison: del_comparison);
    }
    // System.Collections.Immutable.ImmutableArray<T> Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    /**
    Sorts the specified elements in the immutable array using the specified comparer.

    - Parameter index: The index of the first element to sort.
    - Parameter count: The number of elements to include in the sort.
    - Parameter comparer: The implementation to use when comparing elements, or  to use the default comparer
    - Returns: A new immutable array that contains the items in this array, in sorted order.

    */
    public func Sort(index : Swift.Int32, count : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T___Sort_0__3__i32_i32_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T>.Builder ToBuilder()
// docid: M:System.Collections.Immutable.ImmutableArray`1.ToBuilder
    /**
    Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.

    - Returns: The new builder with the same contents as this array.

    */
    public func ToBuilder() throws -> dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_T___ToBuilder_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_Builder_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Collections.Immutable.ImmutableArray`1.get_IsDefault
    public func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__get_IsDefault_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDefaultOrEmpty()
// docid: M:System.Collections.Immutable.ImmutableArray`1.get_IsDefaultOrEmpty
    public func get_IsDefaultOrEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__get_IsDefaultOrEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableArray`1.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.Collections.Immutable.ImmutableArray`1.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_i32__get_Length_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableArray_1


// type: System.Collections.Immutable.ImmutableArray`1+Builder
    /**
    A writable array accessor that can be converted into an  instance without allocating extra memory.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableArray_Builder_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableArray_1_Builder_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)
    /**
    Adds the specified item to the array.

    - Parameter item: The object to add to the array.
    */
    public func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Adds the specified items to the end of the array.

    - Parameter items: The items to add to the array.
    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})
    /**
    Adds the specified items to the end of the array.

    - Parameter items: The items to add to the array.
    */
    public func AddRange(items : dotnet.System.Collections.Immutable.ImmutableArray_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_0__1__System_Collections_Immutable_ImmutableArray_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)
    /**
    Adds the specified items to the end of the array.

    - Parameter items: The items to add to the array.
    - Parameter length: The number of elements from the source array to add.
    */
    public func AddRange(items : dotnet.System.Collections.Immutable.ImmutableArray_1<T>, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_0__2__System_Collections_Immutable_ImmutableArray_T__i32(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Immutable.ImmutableArray<T>.Builder)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray`1.Builder{`0})
    public func AddRange(items : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_0__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(T[])
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.T[])
    public func AddRange(items : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(T[], System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.T[],System.Int32)
    public func AddRange(items : dotnet.System_Arr<T>, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Adds the specified items that derive from the type currently in the array, to the end of the array.

    - Parameter items: The items to add to the end of the array.
    */
    public func AddRange<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_1__1__System_Collections_Immutable_ImmutableArray_UTDerived_(T.get_type_handle(), UTDerived.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>.Builder)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public func AddRange<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UTDerived>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__AddRange_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UTDerived_(T.get_type_handle(), UTDerived.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void AddRange<TDerived>(TDerived[])
    // void Clear()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear
    /**
    Removes all items from the array.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)
    /**
    Determines whether the array contains a specific value.

    - Parameter item: The object to locate in the array.
    - Returns: 
         if the object is found; otherwise, .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(System.Collections.Immutable.T[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<T> GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator
    /**
    Gets an object that can be used to iterate through the collection.

    - Returns: An object that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_System_Collections_Generic_IEnumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)
    /**
    Determines the index of a specific item in the array.

    - Parameter item: The item to locate in the array.
    - Returns: The index of  if it's found in the list; otherwise, -1.

    */
    public func IndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)
    /**
    Determines the index of the specified item.

    - Parameter item: The item to locate in the array.
    - Parameter startIndex: The starting position of the search.
    - Returns: The index of  if it's found in the list; otherwise, -1.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__IndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)
    /**
    Determines the index of the specified item.

    - Parameter item: The item to locate in the array.
    - Parameter startIndex: The starting position of the search.
    - Parameter count: The number of elements to search.
    - Returns: The index of  if it's found in the list; otherwise, -1.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__IndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Determines the index for the specified item.

    - Parameter item: The item to locate in the array.
    - Parameter startIndex: The index at which to begin the search.
    - Parameter count: The starting position of the search.
    - Parameter equalityComparer: The equality comparer to use in the search
    - Returns: The index of  if it's found in the list; otherwise, -1.

    */
    public func IndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__IndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)
    /**
    Inserts an item in the array at the specified index.

    - Parameter index: The zero-based index at which to insert the item.
    - Parameter item: The object to insert into the array.
    */
    public func Insert(index : Swift.Int32, item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 LastIndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)
    /**
    Determines the 0-based index of the last occurrence of the specified item in this array.

    - Parameter item: The item to search for.
    - Returns: The 0-based index where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__LastIndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)
    /**
    Determines the 0-based index of the last occurrence of the specified item in this array.

    - Parameter item: The item to search for.
    - Parameter startIndex: The starting position of the search.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__LastIndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
    /**
    Determines the 0-based index of the last occurrence of the specified item in this array.

    - Parameter item: The item to search for.
    - Parameter startIndex: The starting position of the search.
    - Parameter count: The number of elements to search.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__LastIndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Determines the 0-based index of the last occurrence of the specified item in this array.

    - Parameter item: The item to search for.
    - Parameter startIndex: The starting position of the search.
    - Parameter count: The number of elements to search.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The 0-based index into the array where the item was found; or -1 if it could not be found.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__LastIndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> MoveToImmutable()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable
    /**
    Extracts the internal array as an  and replaces it              with a zero length array.

    - Returns: An immutable array containing the elements of the builder.

    */
    public func MoveToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_System_Collections_Immutable_ImmutableArray_T___MoveToImmutable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)
    /**
    Removes the specified element.

    - Parameter element: The item to remove.
    - Returns: 
         if  was found and removed; otherwise, .

    */
    public func Remove(element : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), element.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)
    /**
    Removes the item at the specified index from the array.

    - Parameter index: The zero-based index of the item to remove.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse
    /**
    Reverses the order of elements in the collection.

    */
    public func Reverse() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort
    /**
    Sorts the contents of the array.

    */
    public func Sort() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Sort_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
    /**
    Sorts the contents of the array.

    - Parameter comparer: The comparer to use for sorting. If comparer is , the default comparer for the elements type in the array is used.
    */
    public func Sort(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Sort_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort(System.Comparison<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})
    /**
    Sorts the elements in the entire array using the specified .

    - Parameter comparison: The  to use when comparing elements.
    */
    public func Sort(comparison : dotnet.System.Comparison_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Sort_0__1__System_Comparison_T_(T.get_type_handle(), &__thrown, self.get_handle(), comparison.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Sort(comparison : @escaping (T, T) throws -> Swift.Int32) throws {
        let del_comparison = try dotnet.System.Comparison_1<T>(comparison);
        return try Sort(comparison: del_comparison);
    }
    // void Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    /**
    Sorts the contents of the array.

    - Parameter index: The starting index for the sort.
    - Parameter count: The number of elements to include in the sort.
    - Parameter comparer: The comparer to use for sorting. If comparer is , the default comparer for the elements type in the array is used.
    */
    public func Sort(index : Swift.Int32, count : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__Sort_0__3__i32_i32_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray
    /**
    Creates a new array with the current contents of this .

    - Returns: A new array with the contents of this .

    */
    public func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> ToImmutable()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable
    /**
    Returns an immutable array that contains the current contents of this .

    - Returns: An immutable array that contains the current contents of this .

    */
    public func ToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_System_Collections_Immutable_ImmutableArray_T___ToImmutable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Capacity()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.get_Capacity
    public func get_Capacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__get_Capacity_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Capacity(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.set_Capacity(System.Int32)
    public func set_Capacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__set_Capacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Count(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.set_Count(System.Int32)
    public func set_Count(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__set_Count_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Builder_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableArray`1.Builder.set_Item(System.Int32,`0)
    public func set_Item(index : Swift.Int32, value : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableArray_1_Builder_void__set_Item_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.

    */
    public var Capacity : Swift.Int32 {
        get {
            return try! get_Capacity();
        }
        set(v) {
            return try! set_Capacity(value: v);
        }
    }
    /**
    Gets or sets the number of items in the array.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
        set(v) {
            return try! set_Count(value: v);
        }
    }
} // ImmutableArray_Builder_1


// type: System.Collections.Immutable.ImmutableArray`1+Enumerator
// boxed value type
    /**
    An array enumerator.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableArray_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableArray_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the current item.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableArray_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext
    /**
    Advances to the next value in the array.

    - Returns: 
         if another item exists in the array; otherwise, .

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableArray_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableArray_Enumerator_1


// type: System.Collections.Immutable.ImmutableDictionary
public struct ImmutableDictionary {
    // bool Contains<TKey, TValue>(System.Collections.Immutable.IImmutableDictionary<TKey,TValue>, TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)
    /**
    Determines whether the specified immutable dictionary contains the specified key/value pair.

    - Parameter map: The immutable dictionary to search.
    - Parameter key: The key to locate in the immutable dictionary.
    - Parameter value: The value to locate on the specified key, if the key is found.
    - Returns: 
         if this map contains the specified key/value pair; otherwise, .

    */
    public static func Contains<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(map : dotnet.System.Collections.Immutable.IImmutableDictionary_2<UTKey,UTValue>, key : UTKey, value : UTValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_bool__Contains_2__3__System_Collections_Immutable_IImmutableDictionary_UTKey_UTValue__UTKey_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, map.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Builder CreateBuilder<TKey, TValue>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Builder CreateBuilder<TKey, TValue>(System.Collections.Generic.IEqualityComparer<TKey>)
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Builder CreateBuilder<TKey, TValue>(System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a new immutable dictionary builder.

    - Parameter keyComparer: The key comparer.
    - Parameter valueComparer: The value comparer.
    - Returns: The new builder.

    */
    public static func CreateBuilder<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_Builder_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_TKey_TValue__System_Collections_Immutable_Builder_UTKey_UTValue___CreateBuilder_2__2__System_Collections_Generic_IEqualityComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_Builder_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> CreateRange<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Creates a new immutable dictionary that contains the specified items.

    - Parameter items: The items used to populate the dictionary before it's immutable.
    - Returns: A new immutable dictionary that contains the specified items.

    */
    public static func CreateRange<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___CreateRange_2__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> CreateRange<TKey, TValue>(System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.

    - Parameter keyComparer: The comparer implementation to use to compare keys for equality.
    - Parameter items: The items to add to the dictionary before it's immutable.
    - Returns: A new immutable dictionary that contains the specified items and uses the specified comparer.

    */
    public static func CreateRange<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___CreateRange_2__2__System_Collections_Generic_IEqualityComparer_UTKey__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> CreateRange<TKey, TValue>(System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.

    - Parameter keyComparer: The comparer implementation to use to compare keys for equality.
    - Parameter valueComparer: The comparer implementation to use to compare values for equality.
    - Parameter items: The items to add to the dictionary before it's immutable.
    - Returns: A new immutable dictionary that contains the specified items and uses the specified comparer.

    */
    public static func CreateRange<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>, items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___CreateRange_2__3__System_Collections_Generic_IEqualityComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableDictionary<TKey,TValue> Create<TKey, TValue>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableDictionary<TKey,TValue> Create<TKey, TValue>(System.Collections.Generic.IEqualityComparer<TKey>)
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> Create<TKey, TValue>(System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates an empty immutable dictionary that uses the specified key and value comparers.

    - Parameter keyComparer: The implementation to use to determine the equality of keys in the dictionary.
    - Parameter valueComparer: The implementation to use to determine the equality of values in the dictionary.
    - Returns: An empty immutable dictionary.

    */
    public static func Create<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___Create_2__2__System_Collections_Generic_IEqualityComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // TValue GetValueOrDefault<TKey, TValue>(System.Collections.Immutable.IImmutableDictionary<TKey,TValue>, TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)
    /**
    Gets the value for a given key if a matching key exists in the dictionary.

    - Parameter dictionary: The dictionary to retrieve the value from.
    - Parameter key: The key to search for.
    - Returns: The value for the key, or default(TValue) if no matching key was found.

    */
    public static func GetValueOrDefault<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(dictionary : dotnet.System.Collections.Immutable.IImmutableDictionary_2<UTKey,UTValue>, key : UTKey) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_UTValue__GetValueOrDefault_2__2__System_Collections_Immutable_IImmutableDictionary_UTKey_UTValue__UTKey(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, dictionary.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // TValue GetValueOrDefault<TKey, TValue>(System.Collections.Immutable.IImmutableDictionary<TKey,TValue>, TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)
    /**
    Gets the value for a given key if a matching key exists in the dictionary.

    - Parameter dictionary: The dictionary to retrieve the value from.
    - Parameter key: The key to search for.
    - Parameter defaultValue: The default value to return if no matching key is found in the dictionary.
    - Returns: The value for the key, or  if no matching key was found.

    */
    public static func GetValueOrDefault<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(dictionary : dotnet.System.Collections.Immutable.IImmutableDictionary_2<UTKey,UTValue>, key : UTKey, defaultValue : UTValue) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_UTValue__GetValueOrDefault_2__3__System_Collections_Immutable_IImmutableDictionary_UTKey_UTValue__UTKey_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, dictionary.get_handle(), key.to_gval(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.

    - Parameter source: The sequence of key/value pairs to enumerate.
    - Returns: An immutable dictionary that contains the key/value pairs in the specified sequence.

    */
    public static func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_2__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.

    - Parameter source: The sequence of key/value pairs to enumerate.
    - Parameter keyComparer: The key comparer to use when building the immutable dictionary.
    - Returns: An immutable dictionary that contains the key/value pairs in the specified sequence.

    */
    public static func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_2__2__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue___System_Collections_Generic_IEqualityComparer_UTKey_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.

    - Parameter source: The sequence of key/value pairs to enumerate.
    - Parameter keyComparer: The key comparer to use when building the immutable dictionary.
    - Parameter valueComparer: The value comparer to use for the immutable dictionary.
    - Returns: An immutable dictionary that contains the key/value pairs in the specified sequence.

    */
    public static func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_2__3__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue___System_Collections_Generic_IEqualityComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TSource> ToImmutableDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.

    - Parameter source: The source collection used to generate the immutable dictionary.
    - Parameter keySelector: The function used to transform keys for the immutable dictionary.
    - Returns: The immutable dictionary that contains elements from , with keys transformed by applying .

    */
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTSource___ToImmutableDictionary_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToImmutableDictionary(source: source, keySelector: del_keySelector);
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TSource> ToImmutableDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Constructs an immutable dictionary based on some transformation of a sequence.

    - Parameter source: The source collection used to generate the immutable dictionary.
    - Parameter keySelector: The function used to transform keys for the immutable dictionary.
    - Parameter keyComparer: The key comparer to use for the dictionary.
    - Returns: The immutable dictionary that contains elements from , with keys transformed by applying .

    */
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTSource___ToImmutableDictionary_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToImmutableDictionary(source: source, keySelector: del_keySelector, keyComparer: keyComparer);
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Builder)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary`2.Builder{``0,``1})
    public static func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableDictionary_Builder_2<UTKey,UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_2__1__System_Collections_Immutable_ImmutableDictionary_TKey_TValue__System_Collections_Immutable_Builder_UTKey_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.

    - Parameter source: The sequence to enumerate to generate the dictionary.
    - Parameter keySelector: The function that will produce the key for the dictionary from each sequence element.
    - Parameter elementSelector: The function that will produce the value for the dictionary from each sequence element.
    - Returns: An immutable dictionary that contains the items in the specified sequence.

    */
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTValue_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTValue) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTValue>(elementSelector);
        return try ToImmutableDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.

    - Parameter source: The sequence to enumerate to generate the dictionary.
    - Parameter keySelector: The function that will produce the key for the dictionary from each sequence element.
    - Parameter elementSelector: The function that will produce the value for the dictionary from each sequence element.
    - Parameter keyComparer: The key comparer to use for the dictionary.
    - Returns: An immutable dictionary that contains the items in the specified sequence.

    */
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTValue>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_3__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTValue__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTValue>(elementSelector);
        return try ToImmutableDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer);
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.

    - Parameter source: The sequence to enumerate to generate the dictionary.
    - Parameter keySelector: The function that will produce the key for the dictionary from each sequence element.
    - Parameter elementSelector: The function that will produce the value for the dictionary from each sequence element.
    - Parameter keyComparer: The key comparer to use for the dictionary.
    - Parameter valueComparer: The value comparer to use for the dictionary.
    - Returns: An immutable dictionary that contains the items in the specified sequence.

    */
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTValue>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_System_Collections_Immutable_ImmutableDictionary_UTKey_UTValue___ToImmutableDictionary_3__5__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTValue__System_Collections_Generic_IEqualityComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTValue>(elementSelector);
        return try ToImmutableDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer, valueComparer: valueComparer);
    }
} // ImmutableDictionary


// type: System.Collections.Immutable.ImmutableDictionary`2
    /**
    Represents an immutable, unordered collection of keys and values.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableDictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableDictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> Add(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)
    /**
    Adds an element with the specified key and value to the immutable dictionary.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add.
    - Returns: A new immutable dictionary that contains the additional key/value pair.

    */
    public func Add(key : TKey, value : TValue) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Adds the specified key/value pairs to the immutable dictionary.

    - Parameter pairs: The key/value pairs to add.
    - Returns: A new immutable dictionary that contains the additional key/value pairs.

    */
    public func AddRange(pairs : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___AddRange_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), pairs.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> Clear()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Clear
    /**
    Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.

    - Returns: An empty dictionary with equivalent ordering and key/value comparison rules.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Determines whether this immutable dictionary contains the specified key/value pair.

    - Parameter pair: The key/value pair to locate.
    - Returns: 
         if the specified key/value pair is found in the dictionary; otherwise, .

    */
    public func Contains(pair : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), pair.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)
    /**
    Determines whether the immutable dictionary contains an element with the specified key.

    - Parameter key: The key to locate.
    - Returns: 
         if the immutable dictionary contains an element with the specified key; otherwise, .

    */
    public func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)
    /**
    Determines whether the immutable dictionary contains an element with the specified value.

    - Parameter value: The value to locate. The value can be  for reference types.
    - Returns: 
         if the dictionary contains an element with the specified value; otherwise, .

    */
    public func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable dictionary.

    - Returns: An enumerator that can be used to iterate through the dictionary.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue__System_Collections_Immutable_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_Enumerator_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> Remove(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)
    /**
    Removes the element with the specified key from the immutable dictionary.

    - Parameter key: The key of the element to remove.
    - Returns: A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.

    */
    public func Remove(key : TKey) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the elements with the specified keys from the immutable dictionary.

    - Parameter keys: The keys of the elements to remove.
    - Returns: A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.

    */
    public func RemoveRange(keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___RemoveRange_0__1__System_Collections_Generic_IEnumerable_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> SetItem(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)
    /**
    Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.

    - Parameter key: The key of the entry to add.
    - Parameter value: The key value to set.
    - Returns: A new immutable dictionary that contains the specified key/value pair.

    */
    public func SetItem(key : TKey, value : TValue) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___SetItem_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.

    - Parameter items: The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.
    - Returns: A new immutable dictionary that contains the specified key/value pairs.

    */
    public func SetItems(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___SetItems_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Builder ToBuilder()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder
    /**
    Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.

    - Returns: A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.

    */
    public func ToBuilder() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_Builder_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue__System_Collections_Immutable_Builder_TKey_TValue___ToBuilder_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_Builder_2(hndl : __return);
        }
    }
    // bool TryGetKey(TKey, ref TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)
    /**
    Determines whether this dictionary contains a specified key.

    - Parameter equalKey: The key to search for.
    - Parameter actualKey: The matching key located in the dictionary if found, or equalkey if no match is found.
    - Returns: 
         if a match for  is found; otherwise, .

    */
    public func TryGetKey(equalKey : TKey, actualKey : inout TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualKey = actualKey.to_gval();
        let __return = System_Collections_Immutable_ImmutableDictionary_2_bool__TryGetKey_0__2__TKey_outTKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), equalKey.to_gval(), &_tmp_out_actualKey);
            let _tmp2_actualKey = TKey(gval: _tmp_out_actualKey);
            actualKey = _tmp2_actualKey;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The key whose value will be retrieved.
    - Parameter value: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the  parameter. This parameter is passed uninitialized.
    - Returns: 
         if the object that implements the dictionary contains an element with the specified key; otherwise, .

    */
    public func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableDictionary_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> WithComparers(System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})
    /**
    Gets an instance of the immutable dictionary that uses the specified key comparer.

    - Parameter keyComparer: The key comparer to use.
    - Returns: An instance of the immutable dictionary that uses the given comparer.

    */
    public func WithComparers(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___WithComparers_0__1__System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> WithComparers(System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
    /**
    Gets an instance of the immutable dictionary that uses the specified key and value comparers.

    - Parameter keyComparer: The key comparer to use.
    - Parameter valueComparer: The value comparer to use.
    - Returns: An instance of the immutable dictionary that uses the given comparers.

    */
    public func WithComparers(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___WithComparers_0__2__System_Collections_Generic_IEqualityComparer_TKey__System_Collections_Generic_IEqualityComparer_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_bool__get_IsEmpty_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TKey> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Generic_IEqualityComparer_TKey___get_KeyComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TKey> get_Keys()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_Keys
    public func get_Keys() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Generic_IEnumerable_TKey___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TValue> get_ValueComparer()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_ValueComparer
    public func get_ValueComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Generic_IEqualityComparer_TValue___get_ValueComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TValue> get_Values()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_Values
    public func get_Values() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_System_Collections_Generic_IEnumerable_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    /**
    Gets the number of key/value pairs in the immutable dictionary.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether this instance of the immutable dictionary is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the key comparer for the immutable dictionary.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        get {
            return try! get_KeyComparer();
        }
    }
    /**
    Gets the keys in the immutable dictionary.

    */
    public var Keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets the value comparer used to determine whether values are equal.

    */
    public var ValueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        get {
            return try! get_ValueComparer();
        }
    }
    /**
    Gets the values in the immutable dictionary.

    */
    public var Values : dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        get {
            return try! get_Values();
        }
    }
} // ImmutableDictionary_2


// type: System.Collections.Immutable.ImmutableDictionary`2+Builder
    /**
    Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableDictionary_Builder_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableDictionary_2_Builder_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Adds the specified item to the immutable dictionary.

    - Parameter item: The object to add to the dictionary.
    */
    public func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__Add_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)
    /**
    Adds an element that has the specified key and value to the immutable dictionary.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add.
    */
    public func Add(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Adds a sequence of values to this collection.

    - Parameter items: The items to add to this collection.
    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__AddRange_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear
    /**
    Removes all items from the immutable dictionary.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Determines whether the immutable dictionary contains a specific value.

    - Parameter item: The object to locate in the dictionary.
    - Returns: 
         if  is found in the dictionary; otherwise, .

    */
    public func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)
    /**
    Determines whether the immutable dictionary contains an element that has the specified key.

    - Parameter key: The key to locate in the dictionary.
    - Returns: 
         if the dictionary contains an element with the key; otherwise, .

    */
    public func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)
    /**
    Determines whether the immutable dictionary contains an element that has the specified value.

    - Parameter value: The value to locate in the immutable dictionary. The value can be  for reference types.
    - Returns: 
         if the dictionary contains an element with the specified value; otherwise, .

    */
    public func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable dictionary.

    - Returns: An enumerator that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_System_Collections_Immutable_ImmutableDictionary_TKey_TValue__System_Collections_Immutable_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_Enumerator_2(hndl : __return);
        }
    }
    // TValue GetValueOrDefault(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)
    /**
    Gets the value for a given key if a matching key exists in the dictionary.

    - Parameter key: The key to search for.
    - Returns: The value for the key, or default(TValue) if no matching key was found.

    */
    public func GetValueOrDefault(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_TValue__GetValueOrDefault_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // TValue GetValueOrDefault(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)
    /**
    Gets the value for a given key if a matching key exists in the dictionary.

    - Parameter key: The key to search for.
    - Parameter defaultValue: The default value to return if no matching key is found in the dictionary.
    - Returns: The value for the key, or  if no matching key was found.

    */
    public func GetValueOrDefault(key : TKey, defaultValue : TValue) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_TValue__GetValueOrDefault_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Removes the first occurrence of a specific object from the immutable dictionary.

    - Parameter item: The object to remove from the dictionary.
    - Returns: 
         if  was successfully removed from the dictionary; otherwise, . This method also returns false if  is not found in the dictionary.

    */
    public func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)
    /**
    Removes the element with the specified key from the immutable dictionary.

    - Parameter key: The key of the element to remove.
    - Returns: 
         if the element is successfully removed; otherwise, .  This method also returns  if  was not found in the dictionary.

    */
    public func Remove(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.

    - Parameter keys: The keys for entries to remove from the dictionary.
    */
    public func RemoveRange(keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__RemoveRange_0__1__System_Collections_Generic_IEnumerable_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutable()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable
    /**
    Creates an immutable dictionary based on the contents of this instance.

    - Returns: An immutable dictionary.

    */
    public func ToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_System_Collections_Immutable_ImmutableDictionary_TKey_TValue___ToImmutable_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableDictionary_2(hndl : __return);
        }
    }
    // bool TryGetKey(TKey, ref TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)
    /**
    Determines whether this dictionary contains a specified key.

    - Parameter equalKey: The key to search for.
    - Parameter actualKey: The matching key located in the dictionary if found, or equalkey if no match is found.
    - Returns: 
         if a match for  is found; otherwise, .

    */
    public func TryGetKey(equalKey : TKey, actualKey : inout TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualKey = actualKey.to_gval();
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__TryGetKey_0__2__TKey_outTKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), equalKey.to_gval(), &_tmp_out_actualKey);
            let _tmp2_actualKey = TKey(gval: _tmp_out_actualKey);
            actualKey = _tmp2_actualKey;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)
    /**
    Returns the value associated with the specified key.

    - Parameter key: The key whose value will be retrieved.
    - Parameter value: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the  parameter. This parameter is passed uninitialized.
    - Returns: 
         if the object that implements the immutable dictionary contains an element with the specified key; otherwise, .

    */
    public func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TKey> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_System_Collections_Generic_IEqualityComparer_TKey___get_KeyComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeyComparer(System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.set_KeyComparer(System.Collections.Generic.IEqualityComparer{`0})
    public func set_KeyComparer(value : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__set_KeyComparer_0__1__System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TKey> get_Keys()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.get_Keys
    public func get_Keys() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_System_Collections_Generic_IEnumerable_TKey___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TValue> get_ValueComparer()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.get_ValueComparer
    public func get_ValueComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_System_Collections_Generic_IEqualityComparer_TValue___get_ValueComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueComparer(System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.set_ValueComparer(System.Collections.Generic.IEqualityComparer{`1})
    public func set_ValueComparer(value : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__set_ValueComparer_0__1__System_Collections_Generic_IEqualityComparer_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TValue> get_Values()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.get_Values
    public func get_Values() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_System_Collections_Generic_IEnumerable_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Builder_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Builder.set_Item(`0,`1)
    public func set_Item(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Builder_void__set_Item_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of elements contained in the immutable dictionary.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets or sets the key comparer.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        get {
            return try! get_KeyComparer();
        }
        set(v) {
            return try! set_KeyComparer(value: v);
        }
    }
    /**
    Gets a collection that contains the keys of the immutable dictionary.

    */
    public var Keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets or sets the value comparer.

    */
    public var ValueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        get {
            return try! get_ValueComparer();
        }
        set(v) {
            return try! set_ValueComparer(value: v);
        }
    }
    /**
    Gets a collection that contains the values of the immutable dictionary.

    */
    public var Values : dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        get {
            return try! get_Values();
        }
    }
} // ImmutableDictionary_Builder_2


// type: System.Collections.Immutable.ImmutableDictionary`2+Enumerator
// boxed value type
    /**
    Enumerates the contents of the immutable dictionary without allocating any memory.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableDictionary_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableDictionary_2_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableDictionary_2_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose
    /**
    Releases the resources used by the current instance of the  class.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the immutable dictionary.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the dictionary.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the dictionary.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableDictionary_2_Enumerator_void__Reset_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<TKey,TValue> get_Current()
// docid: M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableDictionary_2_Enumerator_System_Collections_Generic_KeyValuePair_TKey_TValue___get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // ImmutableDictionary_Enumerator_2


// type: System.Collections.Immutable.ImmutableHashSet
public struct ImmutableHashSet {
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableHashSet<T>.Builder CreateBuilder<T>()
    // System.Collections.Immutable.ImmutableHashSet<T>.Builder CreateBuilder<T>(System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})
    /**
    Creates a new immutable hash set builder.

    - Parameter equalityComparer: The object to use for comparing objects in the set for equality.
    - Returns: The new immutable hash set builder.

    */
    public static func CreateBuilder<UT : SGBridgeGenericValue>(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_Builder_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_T__System_Collections_Immutable_Builder_UT___CreateBuilder_1__1__System_Collections_Generic_IEqualityComparer_UT_(UT.get_type_handle(), &__thrown, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_Builder_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable hash set prefilled with the specified items.

    - Parameter items: The items to add to the hash set.
    - Returns: The new immutable hash set that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UT___CreateRange_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> CreateRange<T>(System.Collections.Generic.IEqualityComparer<T>, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.

    - Parameter equalityComparer: The object to use for comparing objects in the set for equality.
    - Parameter items: The items add to the collection before immutability is applied.
    - Returns: The new immutable hash set.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>, items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UT___CreateRange_1__2__System_Collections_Generic_IEqualityComparer_UT__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableHashSet<T> Create<T>()
    // System.Collections.Immutable.ImmutableHashSet<T> Create<T>(System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})
    /**
    Creates an empty immutable hash set that uses the specified equality comparer.

    - Parameter equalityComparer: The object to use for comparing objects in the set for equality.
    - Returns: An empty immutable hash set.

    */
    public static func Create<UT : SGBridgeGenericValue>(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UT___Create_1__1__System_Collections_Generic_IEqualityComparer_UT_(UT.get_type_handle(), &__thrown, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Create<T>(System.Collections.Generic.IEqualityComparer<T>, T)
// docid: M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)
    /**
    Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.

    - Parameter equalityComparer: The object to use for comparing objects in the set for equality.
    - Parameter item: The item to prepopulate the hash set with.
    - Returns: A new immutable hash set that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>, item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UT___Create_1__2__System_Collections_Generic_IEqualityComparer_UT__UT(UT.get_type_handle(), &__thrown, nil, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Create<T>(System.Collections.Generic.IEqualityComparer<T>, T[])
// docid: M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Immutable.T[])
    public static func Create<UT : SGBridgeGenericValue>(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>, items : dotnet.System_Arr<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UT___Create_1__2__System_Collections_Generic_IEqualityComparer_UT__UTArray(UT.get_type_handle(), &__thrown, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Create<T>(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)
    /**
    Creates a new immutable hash set that contains the specified item.

    - Parameter item: The item to prepopulate the hash set with.
    - Returns: A new immutable hash set that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UT___Create_1__1__UT(UT.get_type_handle(), &__thrown, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableHashSet<T> Create<T>(T[])
    // System.Collections.Immutable.ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Enumerates a sequence and produces an immutable hash set of its contents.

    - Parameter source: The sequence to enumerate.
    - Returns: An immutable hash set that contains the items in the specified sequence.

    */
    public static func ToImmutableHashSet<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UTSource___ToImmutableHashSet_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.

    - Parameter source: The sequence to enumerate.
    - Parameter equalityComparer: The object to use for comparing objects in the set for equality.
    - Returns: An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.

    */
    public static func ToImmutableHashSet<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UTSource___ToImmutableHashSet_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(System.Collections.Immutable.ImmutableHashSet<TSource>.Builder)
// docid: M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet`1.Builder{``0})
    public static func ToImmutableHashSet<UTSource : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableHashSet_Builder_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_System_Collections_Immutable_ImmutableHashSet_UTSource___ToImmutableHashSet_1__1__System_Collections_Immutable_ImmutableHashSet_T__System_Collections_Immutable_Builder_UTSource_(UTSource.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
} // ImmutableHashSet


// type: System.Collections.Immutable.ImmutableHashSet`1
    /**
    Represents an immutable, unordered hash set.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableHashSet_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableHashSet_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableHashSet<T> Add(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)
    /**
    Adds the specified element to the hash set.

    - Parameter item: The element to add to the set.
    - Returns: A hash set that contains the added value and any values previously held by the   object.

    */
    public func Add(item : T) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Clear()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Clear
    /**
    Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.

    - Returns: An empty hash set that has the same sorting and ordering semantics as this instance.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)
    /**
    Determines whether this immutable hash set contains the specified element.

    - Parameter item: The object to locate in the immutable hash set.
    - Returns: 
         if  is found in the ; otherwise, .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Except(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the elements in the specified collection from the current immutable hash set.

    - Parameter other: The collection of items to remove from this set.
    - Returns: A new set with the items removed; or the original set if none of the items were in the set.

    */
    public func Except(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___Except_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection.

    - Returns: An enumerator that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_Enumerator_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Intersect(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates an immutable hash set that contains elements that exist in both this set and the specified set.

    - Parameter other: The collection to compare to the current set.
    - Returns: A new immutable set that contains any elements that exist in both sets.

    */
    public func Intersect(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___Intersect_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper subset of the specified collection; otherwise, .

    */
    public func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper superset of the specified collection; otherwise, .

    */
    public func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable hash set is a subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a subset of the specified collection; otherwise, .

    */
    public func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable hash set is a superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a superset of the specified collection; otherwise, .

    */
    public func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable hash set overlaps with the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set and the specified collection share at least one common element; otherwise, .

    */
    public func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Remove(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)
    /**
    Removes the specified element from this immutable hash set.

    - Parameter item: The element to remove.
    - Returns: A new set with the specified element removed, or the current set if the element cannot be found in the set.

    */
    public func Remove(item : T) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable hash set and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the sets are equal; otherwise, .

    */
    public func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.

    - Parameter other: The collection to compare to the current set.
    - Returns: A new set that contains the elements that are present only in the current set or in the specified collection, but not both.

    */
    public func SymmetricExcept(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___SymmetricExcept_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T>.Builder ToBuilder()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder
    /**
    Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.

    - Returns: A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.

    */
    public func ToBuilder() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_Builder_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T__System_Collections_Immutable_Builder_T___ToBuilder_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_Builder_1(hndl : __return);
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)
    /**
    Searches the set for a given value and returns the equal value it finds, if any.

    - Parameter equalValue: The value to search for.
    - Parameter actualValue: The value from the set that the search found, or the original value if the search yielded no match.
    - Returns: A value indicating whether the search was successful.

    */
    public func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> Union(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.

    - Parameter other: The collection to add elements from.
    - Returns: A new immutable hash set with the items added; or the original set if all the items were already in the set.

    */
    public func Union(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___Union_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> WithComparer(System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})
    /**
    Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.

    - Parameter equalityComparer: The equality comparer to use.
    - Returns: An instance of this immutable hash set that uses the given comparer.

    */
    public func WithComparer(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Immutable_ImmutableHashSet_T___WithComparer_0__1__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<T> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_System_Collections_Generic_IEqualityComparer_T___get_KeyComparer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    /**
    Gets the number of elements in the immutable hash set.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether the current immutable hash set is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T> {
        get {
            return try! get_KeyComparer();
        }
    }
} // ImmutableHashSet_1


// type: System.Collections.Immutable.ImmutableHashSet`1+Builder
    /**
    Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableHashSet_Builder_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableHashSet_1_Builder_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Add(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)
    /**
    Adds the specified item to the immutable hash set.

    - Parameter item: The item to add.
    - Returns: 
         if the item did not already belong to the collection; otherwise, .

    */
    public func Add(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear
    /**
    Removes all items from the immutable hash set.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Builder_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)
    /**
    Determines whether the immutable hash set contains a specific value.

    - Parameter item: The object to locate in the hash set.
    - Returns: 
         if  is found in the hash set ; otherwise, .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes all elements in the specified collection from the current hash set.

    - Parameter other: The collection of items to remove from the set.
    */
    public func ExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Builder_void__ExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable hash set.

    - Returns: An enumerator that can be used to iterate through the set.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_System_Collections_Immutable_ImmutableHashSet_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_Enumerator_1(hndl : __return);
        }
    }
    // void IntersectWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current set so that it contains only elements that are also in a specified collection.

    - Parameter other: The collection to compare to the current set.
    */
    public func IntersectWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Builder_void__IntersectWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a proper (strict) subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper subset of ; otherwise, .

    */
    public func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a proper (strict) superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper superset of ; otherwise, .

    */
    public func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a subset of ; otherwise, .

    */
    public func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a superset of ; otherwise, .

    */
    public func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set overlaps with the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set and  share at least one common element; otherwise, .

    */
    public func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)
    /**
    Removes the first occurrence of a specific object from the immutable hash set.

    - Parameter item: The object to remove from the set.
    - Returns: 
         if  was successfully removed from the set ; otherwise, . This method also returns  if  is not found in the original set.

    */
    public func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is equal to ; otherwise, .

    */
    public func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.

    - Parameter other: The collection to compare to the current set.
    */
    public func SymmetricExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Builder_void__SymmetricExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.TryGetValue(`0,`0@)
    /**
    Searches the set for a given value and returns the equal value it finds, if any.

    - Parameter equalValue: The value for which to search.
    - Parameter actualValue: The value from the set that the search found, or the original value if the search yielded no match.
    - Returns: A value indicating whether the search was successful.

    */
    public func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableHashSet<T> ToImmutable()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable
    /**
    Creates an immutable hash set based on the contents of this instance.

    - Returns: An immutable set.

    */
    public func ToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_System_Collections_Immutable_ImmutableHashSet_T___ToImmutable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableHashSet_1(hndl : __return);
        }
    }
    // void UnionWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.

    - Parameter other: The collection to compare to the current set.
    */
    public func UnionWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Builder_void__UnionWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<T> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Builder_System_Collections_Generic_IEqualityComparer_T___get_KeyComparer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeyComparer(System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Builder.set_KeyComparer(System.Collections.Generic.IEqualityComparer{`0})
    public func set_KeyComparer(value : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Builder_void__set_KeyComparer_0__1__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of elements contained in the immutable hash set.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets or sets the key comparer.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T> {
        get {
            return try! get_KeyComparer();
        }
        set(v) {
            return try! set_KeyComparer(value: v);
        }
    }
} // ImmutableHashSet_Builder_1


// type: System.Collections.Immutable.ImmutableHashSet`1+Enumerator
// boxed value type
    /**
    Enumerates the contents of the immutable hash set without allocating any memory.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableHashSet_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableHashSet_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableHashSet_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose
    /**
    Releases the resources used by the current instance of the  class.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the immutable hash set.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the hash set.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the hash set.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableHashSet_1_Enumerator_void__Reset_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableHashSet_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableHashSet_Enumerator_1


// type: System.Collections.Immutable.ImmutableInterlocked
public struct ImmutableInterlocked {
    // TValue AddOrUpdate<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, System.Func<TKey,TValue>, System.Func<TKey,TValue,TValue>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})
    /**
    Obtains the value from a dictionary after having added it or updated an existing entry.

    - Parameter location: The variable or field to atomically update if the specified  is not in the dictionary.
    - Parameter key: The key for the value to add or update.
    - Parameter addValueFactory: The function that receives the key and returns a new value to add to the dictionary when no value previously exists.
    - Parameter updateValueFactory: The function that receives the key and prior value and returns the new value with which to update the dictionary.
    - Returns: The added or updated value.

    */
    public static func AddOrUpdate<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, addValueFactory : dotnet.System.Func_2<UTKey,UTValue>, updateValueFactory : dotnet.System.Func_3<UTKey,UTValue,UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_UTValue__AddOrUpdate_2__4__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_System_Func_UTKey_UTValue__System_Func_UTKey_UTValue_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), addValueFactory.get_handle(), updateValueFactory.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // delegate closure overload
    public static func AddOrUpdate<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, addValueFactory : @escaping (UTKey) throws -> UTValue, updateValueFactory : @escaping (UTKey, UTValue) throws -> UTValue) throws -> UTValue {
        let del_addValueFactory = try dotnet.System.Func_2<UTKey,UTValue>(addValueFactory);
        let del_updateValueFactory = try dotnet.System.Func_3<UTKey,UTValue,UTValue>(updateValueFactory);
        return try AddOrUpdate(location: &location, key: key, addValueFactory: del_addValueFactory, updateValueFactory: del_updateValueFactory);
    }
    // TValue AddOrUpdate<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, TValue, System.Func<TKey,TValue,TValue>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})
    /**
    Obtains the value from a dictionary after having added it or updated an existing entry.

    - Parameter location: The variable or field to atomically update if the specified  is not in the dictionary.
    - Parameter key: The key for the value to add or update.
    - Parameter addValue: The value to use if no previous value exists.
    - Parameter updateValueFactory: The function that receives the key and prior value and returns the new value with which to update the dictionary.
    - Returns: The added or updated value.

    */
    public static func AddOrUpdate<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, addValue : UTValue, updateValueFactory : dotnet.System.Func_3<UTKey,UTValue,UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_UTValue__AddOrUpdate_2__4__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_UTValue_System_Func_UTKey_UTValue_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), addValue.to_gval(), updateValueFactory.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // delegate closure overload
    public static func AddOrUpdate<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, addValue : UTValue, updateValueFactory : @escaping (UTKey, UTValue) throws -> UTValue) throws -> UTValue {
        let del_updateValueFactory = try dotnet.System.Func_3<UTKey,UTValue,UTValue>(updateValueFactory);
        return try AddOrUpdate(location: &location, key: key, addValue: addValue, updateValueFactory: del_updateValueFactory);
    }
    // void Enqueue<T>(ref System.Collections.Immutable.ImmutableQueue<T>, T)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)
    /**
    Atomically enqueues an element to the end of a queue.

    - Parameter location: The variable or field to atomically update.
    - Parameter value: The value to enqueue.
    */
    public static func Enqueue<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableQueue_1<UT>, value : UT) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        System_Collections_Immutable_ImmutableInterlocked_void__Enqueue_1__2__refSystem_Collections_Immutable_ImmutableQueue_UT__UT(UT.get_type_handle(), &__thrown, &_tmp_ref_location, value.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableQueue_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TValue GetOrAdd<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, System.Func<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})
    /**
    Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.

    - Parameter location: The variable or field to atomically update if the specified  is not in the dictionary.
    - Parameter key: The key for the value to retrieve or add.
    - Parameter valueFactory: The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.
    - Returns: The value at the specified key or  if the key was not present.

    */
    public static func GetOrAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, valueFactory : dotnet.System.Func_2<UTKey,UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_UTValue__GetOrAdd_2__3__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_System_Func_UTKey_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), valueFactory.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // delegate closure overload
    public static func GetOrAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, valueFactory : @escaping (UTKey) throws -> UTValue) throws -> UTValue {
        let del_valueFactory = try dotnet.System.Func_2<UTKey,UTValue>(valueFactory);
        return try GetOrAdd(location: &location, key: key, valueFactory: del_valueFactory);
    }
    // TValue GetOrAdd<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
    /**
    Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.

    - Parameter location: The variable or field to atomically update if the specified key is not in the dictionary.
    - Parameter key: The key for the value to get or add.
    - Parameter value: The value to add to the dictionary the key is not found.
    - Returns: The value at the specified key or  if the key was not present.

    */
    public static func GetOrAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, value : UTValue) throws -> UTValue {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_UTValue__GetOrAdd_2__3__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), value.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // TValue GetOrAdd<TKey, TValue, TArg>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, System.Func<TKey,TArg,TValue>, TArg)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)
    /**
    Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.

    - Parameter location: The variable or field to update if the specified is not in the dictionary.
    - Parameter key: The key for the value to retrieve or add.
    - Parameter valueFactory: The function to execute to obtain the value to insert into the dictionary if the key is not found.
    - Parameter factoryArgument: The argument to pass to the value factory.
    - Returns: The value at the specified key or  if the key was not present.

    */
    public static func GetOrAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue,UTArg : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, valueFactory : dotnet.System.Func_3<UTKey,UTArg,UTValue>, factoryArgument : UTArg) throws -> UTValue {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_UTValue__GetOrAdd_3__4__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_System_Func_UTKey_UTArg_UTValue__UTArg(UTKey.get_type_handle(), UTValue.get_type_handle(), UTArg.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), valueFactory.get_handle(), factoryArgument.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // delegate closure overload
    public static func GetOrAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue,UTArg : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, valueFactory : @escaping (UTKey, UTArg) throws -> UTValue, factoryArgument : UTArg) throws -> UTValue {
        let del_valueFactory = try dotnet.System.Func_3<UTKey,UTArg,UTValue>(valueFactory);
        return try GetOrAdd(location: &location, key: key, valueFactory: del_valueFactory, factoryArgument: factoryArgument);
    }
    // System.Collections.Immutable.ImmutableArray<T> InterlockedCompareExchange<T>(ref System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})
    /**
    Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.

    - Parameter location: The destination, whose value is compared with  and possibly replaced.
    - Parameter value: The value that replaces the destination value if the comparison results in equality.
    - Parameter comparand: The value that is compared to the value at .
    - Returns: The original value in .

    */
    public static func InterlockedCompareExchange<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, value : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, comparand : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_System_Collections_Immutable_ImmutableArray_UT___InterlockedCompareExchange_1__3__refSystem_Collections_Immutable_ImmutableArray_UT__System_Collections_Immutable_ImmutableArray_UT__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, &_tmp_ref_location, value.get_handle(), comparand.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableArray_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableArray<T> InterlockedExchange<T>(ref System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
    /**
    Sets an array to the specified array and returns a reference to the original array, as an atomic operation.

    - Parameter location: The array to set to the specified value.
    - Parameter value: The value to which the  parameter is set.
    - Returns: The original value of .

    */
    public static func InterlockedExchange<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, value : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT> {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_System_Collections_Immutable_ImmutableArray_UT___InterlockedExchange_1__2__refSystem_Collections_Immutable_ImmutableArray_UT__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, &_tmp_ref_location, value.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableArray_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableArray_1(hndl : __return);
        }
    }
    // bool InterlockedInitialize<T>(ref System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
    /**
    Sets an array to the specified array if the array has not been initialized.

    - Parameter location: The array to set to the specified value.
    - Parameter value: The value to which the  parameter is set, if it's not initialized.
    - Returns: 
         if the array was assigned the specified value;  otherwise, .

    */
    public static func InterlockedInitialize<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, value : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__InterlockedInitialize_1__2__refSystem_Collections_Immutable_ImmutableArray_UT__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, &_tmp_ref_location, value.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableArray_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Push<T>(ref System.Collections.Immutable.ImmutableStack<T>, T)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)
    /**
    Pushes a new element onto the stack.

    - Parameter location: The stack to update.
    - Parameter value: The value to push on the stack.
    */
    public static func Push<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableStack_1<UT>, value : UT) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        System_Collections_Immutable_ImmutableInterlocked_void__Push_1__2__refSystem_Collections_Immutable_ImmutableStack_UT__UT(UT.get_type_handle(), &__thrown, &_tmp_ref_location, value.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableStack_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryAdd<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
    /**
    Adds the specified key and value to the dictionary if the key is not in the dictionary.

    - Parameter location: The dictionary to update with the specified key and value.
    - Parameter key: The key to add, if is not already defined in the dictionary.
    - Parameter value: The value to add.
    - Returns: 
         if the key is not in the dictionary; otherwise, .

    */
    public static func TryAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, value : UTValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__TryAdd_2__3__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), value.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) bool TryDequeue<T>(ref System.Collections.Immutable.ImmutableQueue<T>, ref T)
// TODO COPE (write_all_methods) (unused generic param) bool TryPop<T>(ref System.Collections.Immutable.ImmutableStack<T>, ref T)
// TODO COPE (write_all_methods) (unused generic param) bool TryRemove<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, ref TValue)
    // bool TryUpdate<TKey, TValue>(ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)
    /**
    Sets the specified key to the specified value if the specified key already is set to a specific value.

    - Parameter location: The dictionary to update.
    - Parameter key: The key to update.
    - Parameter newValue: The new value to set.
    - Parameter comparisonValue: The current value for  in order for the update to succeed.
    - Returns: 
         if  and  are present in the dictionary and comparison was updated to ; otherwise, .

    */
    public static func TryUpdate<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>, key : UTKey, newValue : UTValue, comparisonValue : UTValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__TryUpdate_2__4__refSystem_Collections_Immutable_ImmutableDictionary_UTKey_UTValue__UTKey_UTValue_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, &_tmp_ref_location, key.to_gval(), newValue.to_gval(), comparisonValue.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Update<T>(ref T, System.Func<T,T>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})
    /**
    Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.

    - Parameter location: The variable or field to be changed, which may be accessed by multiple threads.
    - Parameter transformer: A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.
    - Returns: 
         if the location's value is changed by applying the result of the  function;  if the location's value remained the same because the last invocation of  returned the existing value.

    */
    public static func Update<UT : SGBridgeGenericValue>(location : inout UT, transformer : dotnet.System.Func_2<UT,UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.to_gval();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__Update_1__2__refUT_System_Func_UT_UT_(UT.get_type_handle(), &__thrown, &_tmp_ref_location, transformer.get_handle());
            let _tmp2_location = UT(gval: _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Update<UT : SGBridgeGenericValue>(location : inout UT, transformer : @escaping (UT) throws -> UT) throws -> Bool {
        let del_transformer = try dotnet.System.Func_2<UT,UT>(transformer);
        return try Update(location: &location, transformer: del_transformer);
    }
    // bool Update<T, TArg>(ref T, System.Func<T,TArg,T>, TArg)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)
    /**
    Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.

    - Parameter location: The variable or field to be changed, which may be accessed by multiple threads.
    - Parameter transformer: A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.
    - Parameter transformerArgument: The argument to pass to .
    - Returns: 
         if the location's value is changed by applying the result of the  function;  if the location's value remained the same because the last invocation of  returned the existing value.

    */
    public static func Update<UT : SGBridgeGenericValue,UTArg : SGBridgeGenericValue>(location : inout UT, transformer : dotnet.System.Func_3<UT,UTArg,UT>, transformerArgument : UTArg) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.to_gval();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__Update_2__3__refUT_System_Func_UT_UTArg_UT__UTArg(UT.get_type_handle(), UTArg.get_type_handle(), &__thrown, &_tmp_ref_location, transformer.get_handle(), transformerArgument.to_gval());
            let _tmp2_location = UT(gval: _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Update<UT : SGBridgeGenericValue,UTArg : SGBridgeGenericValue>(location : inout UT, transformer : @escaping (UT, UTArg) throws -> UT, transformerArgument : UTArg) throws -> Bool {
        let del_transformer = try dotnet.System.Func_3<UT,UTArg,UT>(transformer);
        return try Update(location: &location, transformer: del_transformer, transformerArgument: transformerArgument);
    }
    // bool Update<T>(ref System.Collections.Immutable.ImmutableArray<T>, System.Func<System.Collections.Immutable.ImmutableArray<T>,System.Collections.Immutable.ImmutableArray<T>>)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.Update``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0}})
    /**
    Mutates an immutable array in-place with optimistic locking transaction semantics via a specified transformation function.
 The transformation is retried as many times as necessary to win the optimistic locking race.

    - Parameter location: The immutable array to be changed.
    - Parameter transformer: A function that produces the new array from the old. This function should be side-effect free, as it may run multiple times when races occur with other threads.
    - Returns: 
         if the location's value is changed by applying the result of the  function;  if the location's value remained the same because the last invocation of  returned the existing value.

    */
    public static func Update<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, transformer : dotnet.System.Func_2<dotnet.System.Collections.Immutable.ImmutableArray_1<UT>,dotnet.System.Collections.Immutable.ImmutableArray_1<UT>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__Update_1__2__refSystem_Collections_Immutable_ImmutableArray_UT__System_Func_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_UT__System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_UT__(UT.get_type_handle(), &__thrown, &_tmp_ref_location, transformer.get_handle());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableArray_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Update<UT : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, transformer : @escaping (dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> Bool {
        let del_transformer = try dotnet.System.Func_2<dotnet.System.Collections.Immutable.ImmutableArray_1<UT>,dotnet.System.Collections.Immutable.ImmutableArray_1<UT>>(transformer);
        return try Update(location: &location, transformer: del_transformer);
    }
    // bool Update<T, TArg>(ref System.Collections.Immutable.ImmutableArray<T>, System.Func<System.Collections.Immutable.ImmutableArray<T>,TArg,System.Collections.Immutable.ImmutableArray<T>>, TArg)
// docid: M:System.Collections.Immutable.ImmutableInterlocked.Update``2(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},``1,System.Collections.Immutable.ImmutableArray{``0}},``1)
    /**
    Mutates an immutable array in-place with optimistic locking transaction semantics via a specified transformation function.
 The transformation is retried as many times as necessary to win the optimistic locking race.

    - Parameter location: The immutable array to be changed.
    - Parameter transformer: A function that produces the new array from the old. This function should be side-effect free, as it may run multiple times when races occur with other threads.
    - Parameter transformerArgument: The argument to pass to .
    - Returns: 
         if the location's value is changed by applying the result of the  function;  if the location's value remained the same because the last invocation of  returned the existing value.

    */
    public static func Update<UT : SGBridgeGenericValue,UTArg : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, transformer : dotnet.System.Func_3<dotnet.System.Collections.Immutable.ImmutableArray_1<UT>,UTArg,dotnet.System.Collections.Immutable.ImmutableArray_1<UT>>, transformerArgument : UTArg) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_location = location.get_handle();
        let __return = System_Collections_Immutable_ImmutableInterlocked_bool__Update_2__3__refSystem_Collections_Immutable_ImmutableArray_UT__System_Func_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_UT__UTArg_System_Collections_Immutable_System_Collections_Immutable_ImmutableArray_UT___UTArg(UT.get_type_handle(), UTArg.get_type_handle(), &__thrown, &_tmp_ref_location, transformer.get_handle(), transformerArgument.to_gval());
        let _tmp2_location = dotnet.System.Collections.Immutable.ImmutableArray_1<UT>(hndl : _tmp_ref_location);
            location = _tmp2_location;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Update<UT : SGBridgeGenericValue,UTArg : SGBridgeGenericValue>(location : inout dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, transformer : @escaping (dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, UTArg) throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, transformerArgument : UTArg) throws -> Bool {
        let del_transformer = try dotnet.System.Func_3<dotnet.System.Collections.Immutable.ImmutableArray_1<UT>,UTArg,dotnet.System.Collections.Immutable.ImmutableArray_1<UT>>(transformer);
        return try Update(location: &location, transformer: del_transformer, transformerArgument: transformerArgument);
    }
} // ImmutableInterlocked


// type: System.Collections.Immutable.ImmutableList
public struct ImmutableList {
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableList<T>.Builder CreateBuilder<T>()
    // System.Collections.Immutable.ImmutableList<T> CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable list that contains the specified items.

    - Parameter items: The items to add to the list.
    - Returns: An immutable list that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_ImmutableList_UT___CreateRange_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableList<T> Create<T>()
    // System.Collections.Immutable.ImmutableList<T> Create<T>(T)
// docid: M:System.Collections.Immutable.ImmutableList.Create``1(``0)
    /**
    Creates a new immutable list that contains the specified item.

    - Parameter item: The item to prepopulate the list with.
    - Returns: A new  that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_ImmutableList_UT___Create_1__1__UT(UT.get_type_handle(), &__thrown, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableList<T> Create<T>(T[])
    // System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T)
// docid: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the list.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the list. The value can be null for reference types.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.

    */
    public static func IndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__IndexOf_1__2__System_Collections_Immutable_IImmutableList_UT__UT(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the list.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.

    */
    public static func IndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__IndexOf_1__3__System_Collections_Immutable_IImmutableList_UT__UT_System_Collections_Generic_IEqualityComparer_UT_(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Parameter startIndex: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.

    */
    public static func IndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__IndexOf_1__3__System_Collections_Immutable_IImmutableList_UT__UT_i32(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Parameter startIndex: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements in the section to search.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.

    */
    public static func IndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__IndexOf_1__4__System_Collections_Immutable_IImmutableList_UT__UT_i32_i32(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T)
// docid: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Returns: The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.

    */
    public static func LastIndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__LastIndexOf_1__2__System_Collections_Immutable_IImmutableList_UT__UT(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.

    */
    public static func LastIndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UT>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__LastIndexOf_1__3__System_Collections_Immutable_IImmutableList_UT__UT_System_Collections_Generic_IEqualityComparer_UT_(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Parameter startIndex: The zero-based starting index of the backward search.
    - Returns: The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.

    */
    public static func LastIndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__LastIndexOf_1__3__System_Collections_Immutable_IImmutableList_UT__UT_i32(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.

    - Parameter list: The list to search.
    - Parameter item: The object to locate in the Immutable list. The value can be null for reference types.
    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Returns: The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.

    */
    public static func LastIndexOf<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, item : UT, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_i32__LastIndexOf_1__4__System_Collections_Immutable_IImmutableList_UT__UT_i32_i32(UT.get_type_handle(), &__thrown, list.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.IImmutableList<T> RemoveRange<T>(System.Collections.Immutable.IImmutableList<T>, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Removes the specified values from this list.

    - Parameter list: The list to search.
    - Parameter items: The items to remove if matches are found in this list.
    - Returns: A new immutable list with the elements removed.

    */
    public static func RemoveRange<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_IImmutableList_UT___RemoveRange_1__2__System_Collections_Immutable_IImmutableList_UT__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, list.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> Remove<T>(System.Collections.Immutable.IImmutableList<T>, T)
// docid: M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
    /**
    Removes the specified value from this list.

    - Parameter list: The list to search.
    - Parameter value: The value to remove.
    - Returns: A new immutable list with the element removed, or this list if the element is not in this list.

    */
    public static func Remove<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, value : UT) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_IImmutableList_UT___Remove_1__2__System_Collections_Immutable_IImmutableList_UT__UT(UT.get_type_handle(), &__thrown, list.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.IImmutableList<T> Replace<T>(System.Collections.Immutable.IImmutableList<T>, T, T)
// docid: M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
    /**
    Replaces the first equal element in the list with the specified element.

    - Parameter list: The list to search.
    - Parameter oldValue: The element to replace.
    - Parameter newValue: The element to replace the old element with.
    - Returns: The new list -- even if the value being replaced is equal to the new value for that position.

    */
    public static func Replace<UT : SGBridgeGenericValue>(list : dotnet.System.Collections.Immutable.IImmutableList_1<UT>, oldValue : UT, newValue : UT) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_IImmutableList_UT___Replace_1__3__System_Collections_Immutable_IImmutableList_UT__UT_UT(UT.get_type_handle(), &__thrown, list.get_handle(), oldValue.to_gval(), newValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<TSource> ToImmutableList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Enumerates a sequence and produces an immutable list of its contents.

    - Parameter source: The sequence to enumerate.
    - Returns: An immutable list that contains the items in the specified sequence.

    */
    public static func ToImmutableList<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_ImmutableList_UTSource___ToImmutableList_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<TSource> ToImmutableList<TSource>(System.Collections.Immutable.ImmutableList<TSource>.Builder)
// docid: M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList`1.Builder{``0})
    public static func ToImmutableList<UTSource : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableList_Builder_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_System_Collections_Immutable_ImmutableList_UTSource___ToImmutableList_1__1__System_Collections_Immutable_ImmutableList_T__System_Collections_Immutable_Builder_UTSource_(UTSource.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
} // ImmutableList


// type: System.Collections.Immutable.ImmutableList`1
    /**
    Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableList_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableList_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableList<T> Add(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Add(`0)
    /**
    Adds the specified object to the end of the immutable list.

    - Parameter value: The object to add.
    - Returns: A new immutable list with the object added.

    */
    public func Add(value : T) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> AddRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Adds the elements of the specified collection to the end of the immutable list.

    - Parameter items: The collection whose elements will be added to the end of the list.
    - Returns: A new immutable list with the elements added.

    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___AddRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Int32 BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    /**
    Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.

    - Parameter index: The zero-based starting index of the range to search.
    - Parameter count: The length of the range to search.
    - Parameter item: The object to locate. The value can be null for reference types.
    - Parameter comparer: The comparer implementation to use when comparing elements, or  to use the default comparer.
    - Returns: The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of .

    */
    public func BinarySearch(index : Swift.Int32, count : Swift.Int32, item : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__BinarySearch_0__4__i32_i32_T_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)
    /**
    Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.

    - Parameter item: The object to locate. The value can be  for reference types.
    - Returns: The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of .

    */
    public func BinarySearch(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__BinarySearch_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch(T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    /**
    Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.

    - Parameter item: The object to locate. The value can be null for reference types.
    - Parameter comparer: The  comparer implementation to use when comparing elements or null to use the default comparer.
    - Returns: The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of .

    */
    public func BinarySearch(item : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__BinarySearch_0__2__T_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Clear()
// docid: M:System.Collections.Immutable.ImmutableList`1.Clear
    /**
    Removes all elements from the immutable list.

    - Returns: An empty list that retains the same sort or unordered semantics that this instance has.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Contains(`0)
    /**
    Determines whether this immutable list contains the specified value.

    - Parameter value: The value to locate.
    - Returns: 
         if the list contains the specified value; otherwise, .

    */
    public func Contains(value : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableList<TOutput> ConvertAll<TOutput>(System.Func<T,TOutput>)
// docid: M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})
    /**
    Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.

    - Parameter converter: A delegate that converts each element from one type to another type.
    - Returns: A list of the target type containing the converted elements from the current .

    */
    public func ConvertAll<UTOutput : SGBridgeGenericValue>(converter : dotnet.System.Func_2<T,UTOutput>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_UTOutput___ConvertAll_1__1__System_Func_T_UTOutput_(T.get_type_handle(), UTOutput.get_type_handle(), &__thrown, self.get_handle(), converter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConvertAll<UTOutput : SGBridgeGenericValue>(converter : @escaping (T) throws -> UTOutput) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UTOutput> {
        let del_converter = try dotnet.System.Func_2<T,UTOutput>(converter);
        return try ConvertAll(converter: del_converter);
    }
    // void CopyTo(System.Int32, T[], System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,System.Collections.Immutable.T[],System.Int32,System.Int32)
    public func CopyTo(index : Swift.Int32, array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_void__CopyTo_0__4__i32_TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, array.get_handle(), arrayIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[])
// docid: M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Collections.Immutable.T[])
    public func CopyTo(array : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Collections.Immutable.T[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Exists(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})
    /**
    Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to search for.
    - Returns: 
         if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, .

    */
    public func Exists(match : dotnet.System.Predicate_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_bool__Exists_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func Exists(match : @escaping (T) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try Exists(match: del_match);
    }
    // T Find(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type .

    */
    public func Find(match : dotnet.System.Predicate_1<T>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_T__Find_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // delegate closure overload
    public func Find(match : @escaping (T) throws -> Bool) throws -> T {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try Find(match: del_match);
    }
    // System.Collections.Immutable.ImmutableList<T> FindAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})
    /**
    Retrieves all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to search for.
    - Returns: An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.

    */
    public func FindAll(match : dotnet.System.Predicate_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___FindAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func FindAll(match : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindAll(match: del_match);
    }
    // System.Int32 FindIndex(System.Int32, System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.

    - Parameter startIndex: The zero-based starting index of the search.
    - Parameter count: The number of elements in the section to search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.

    */
    public func FindIndex(startIndex : Swift.Int32, count : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__FindIndex_0__3__i32_i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, count, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindIndex(startIndex : Swift.Int32, count : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(startIndex: startIndex, count: count, match: del_match);
    }
    // System.Int32 FindIndex(System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.

    - Parameter startIndex: The zero-based starting index of the search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.

    */
    public func FindIndex(startIndex : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__FindIndex_0__2__i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindIndex(startIndex : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(startIndex: startIndex, match: del_match);
    }
    // System.Int32 FindIndex(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.

    */
    public func FindIndex(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__FindIndex_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindIndex(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(match: del_match);
    }
    // T FindLast(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type .

    */
    public func FindLast(match : dotnet.System.Predicate_1<T>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_T__FindLast_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // delegate closure overload
    public func FindLast(match : @escaping (T) throws -> Bool) throws -> T {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLast(match: del_match);
    }
    // System.Int32 FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.

    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, ?1.

    */
    public func FindLastIndex(startIndex : Swift.Int32, count : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__FindLastIndex_0__3__i32_i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, count, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindLastIndex(startIndex : Swift.Int32, count : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(startIndex: startIndex, count: count, match: del_match);
    }
    // System.Int32 FindLastIndex(System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.

    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, ?1.

    */
    public func FindLastIndex(startIndex : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__FindLastIndex_0__2__i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindLastIndex(startIndex : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(startIndex: startIndex, match: del_match);
    }
    // System.Int32 FindLastIndex(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, ?1.

    */
    public func FindLastIndex(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__FindLastIndex_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindLastIndex(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(match: del_match);
    }
    // void ForEach(System.Action<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})
    /**
    Performs the specified action on each element of the immutable list.

    - Parameter action: The delegate to perform on each element of the immutable list.
    */
    public func ForEach(action : dotnet.System.Action_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_void__ForEach_0__1__System_Action_T_(T.get_type_handle(), &__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func ForEach(action : @escaping (T) throws -> Void) throws {
        let del_action = try dotnet.System.Action_1<T>(action);
        return try ForEach(action: del_action);
    }
    // System.Collections.Immutable.ImmutableList<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableList`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable list.

    - Returns: An enumerator  that can be used to iterate through the immutable list.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableList_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_Enumerator_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> GetRange(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)
    /**
    Creates a shallow copy of a range of elements in the source immutable list.

    - Parameter index: The zero-based index at which the range starts.
    - Parameter count: The number of elements in the range.
    - Returns: A shallow copy of a range of elements in the source immutable list.

    */
    public func GetRange(index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___GetRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.

    - Parameter value: The object to locate in the immutable list. The value can be  for reference types.
    - Returns: The zero-based index of the first occurrence of  within the entire immutable list, if found; otherwise, ?1.

    */
    public func IndexOf(value : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.

    - Parameter item: The object to locate in the list The value can be null for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements in the section to search.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.

    */
    public func IndexOf(item : T, index : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__IndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Insert(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)
    /**
    Inserts the specified object into the immutable list at the specified index.

    - Parameter index: The zero-based index at which to insert the object.
    - Parameter item: The object to insert.
    - Returns: The new immutable list after the object is inserted.

    */
    public func Insert(index : Swift.Int32, item : T) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    /**
    Inserts the elements of a collection into the immutable list at the specified index.

    - Parameter index: The zero-based index at which to insert the elements.
    - Parameter items: The collection whose elements should be inserted.
    - Returns: The new immutable list after the elements are inserted.

    */
    public func InsertRange(index : Swift.Int32, items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___InsertRange_0__2__i32_System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.

    - Parameter item: The object to locate in the list. The value can be null for reference types.
    - Parameter index: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.

    */
    public func LastIndexOf(item : T, index : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__LastIndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Remove(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Remove(`0)
    /**
    Removes the first occurrence of the specified object from this immutable list.

    - Parameter value: The object to remove.
    - Returns: A new list with the object removed, or this list if the specified object is not in this list.

    */
    public func Remove(value : T) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Remove(T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Removes the first occurrence of the object that matches the specified value from this immutable list.

    - Parameter value: The value of the element to remove from the list.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: A new list with the object removed, or this list if the specified object is not in this list.

    */
    public func Remove(value : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Remove_0__2__T_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> RemoveAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})
    /**
    Removes all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to remove.
    - Returns: The new list with the elements removed.

    */
    public func RemoveAll(match : dotnet.System.Predicate_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___RemoveAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func RemoveAll(match : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveAll(match: del_match);
    }
    // System.Collections.Immutable.ImmutableList<T> RemoveAt(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index.

    - Parameter index: The zero-based index of the element to remove.
    - Returns: A new list with the element removed.

    */
    public func RemoveAt(index : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> RemoveRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes a range of elements from this immutable list.

    - Parameter items: The collection whose elements should be removed if matches are found in this list.
    - Returns: A new list with the elements removed.

    */
    public func RemoveRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___RemoveRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Removes the specified values from this list.

    - Parameter items: The items to remove if matches are found in this list.
    - Parameter equalityComparer: The equality comparer to use in the search.
    - Returns: A new list with the elements removed.

    */
    public func RemoveRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___RemoveRange_0__2__System_Collections_Generic_IEnumerable_T__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> RemoveRange(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)
    /**
    Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.

    - Parameter index: The starting index to begin removal.
    - Parameter count: The number of elements to remove.
    - Returns: A new list with the elements removed.

    */
    public func RemoveRange(index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___RemoveRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Replace(T, T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)
    /**
    Replaces the specified element in the immutable list with a new element.

    - Parameter oldValue: The element to replace.
    - Parameter newValue: The element to replace  with.
    - Returns: The new list with the replaced element, even if it is equal to the old element.

    */
    public func Replace(oldValue : T, newValue : T) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Replace_0__2__T_T(T.get_type_handle(), &__thrown, self.get_handle(), oldValue.to_gval(), newValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Replaces the specified element in the immutable list with a new element.

    - Parameter oldValue: The element to replace in the list.
    - Parameter newValue: The element to replace  with.
    - Parameter equalityComparer: The comparer to use to check for equality.
    - Returns: A new list with the object replaced, or this list if the specified object is not in this list.

    */
    public func Replace(oldValue : T, newValue : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Replace_0__3__T_T_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), oldValue.to_gval(), newValue.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Reverse()
// docid: M:System.Collections.Immutable.ImmutableList`1.Reverse
    /**
    Reverses the order of the elements in the entire immutable list.

    - Returns: The reversed list.

    */
    public func Reverse() throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Reverse(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)
    /**
    Reverses the order of the elements in the specified range of the immutable list.

    - Parameter index: The zero-based starting index of the range to reverse.
    - Parameter count: The number of elements in the range to reverse.
    - Returns: The reversed list.

    */
    public func Reverse(index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Reverse_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> SetItem(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)
    /**
    Replaces an element at a given position in the immutable list with the specified element.

    - Parameter index: The position in the list of the element to replace.
    - Parameter value: The element to replace the old element with.
    - Returns: The new list with the replaced element, even if it is equal to the old element at that position.

    */
    public func SetItem(index : Swift.Int32, value : T) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___SetItem_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Sort()
// docid: M:System.Collections.Immutable.ImmutableList`1.Sort
    /**
    Sorts the elements in the entire immutable list using the default comparer.

    - Returns: The sorted list.

    */
    public func Sort() throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Sort_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Sort(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})
    /**
    Sorts the elements in the entire immutable list using the specified comparer.

    - Parameter comparer: The  implementation to use when comparing elements, or  to use the default comparer ().
    - Returns: The sorted list.

    */
    public func Sort(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Sort_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> Sort(System.Comparison<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})
    /**
    Sorts the elements in the entire immutable list using the specified comparer.

    - Parameter comparison: The delegate to use when comparing elements.
    - Returns: The sorted list.

    */
    public func Sort(comparison : dotnet.System.Comparison_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Sort_0__1__System_Comparison_T_(T.get_type_handle(), &__thrown, self.get_handle(), comparison.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func Sort(comparison : @escaping (T, T) throws -> Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        let del_comparison = try dotnet.System.Comparison_1<T>(comparison);
        return try Sort(comparison: del_comparison);
    }
    // System.Collections.Immutable.ImmutableList<T> Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    /**
    Sorts a range of elements in the immutable list using the specified comparer.

    - Parameter index: The zero-based starting index of the range to sort.
    - Parameter count: The length of the range to sort.
    - Parameter comparer: The implementation to use when comparing elements, or  to use the default comparer ().
    - Returns: The sorted list.

    */
    public func Sort(index : Swift.Int32, count : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T___Sort_0__3__i32_i32_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T>.Builder ToBuilder()
// docid: M:System.Collections.Immutable.ImmutableList`1.ToBuilder
    /**
    Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.

    - Returns: The created list with the same contents as this list.

    */
    public func ToBuilder() throws -> dotnet.System.Collections.Immutable.ImmutableList_Builder_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_System_Collections_Immutable_ImmutableList_T__System_Collections_Immutable_Builder_T___ToBuilder_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_Builder_1(hndl : __return);
        }
    }
    // bool TrueForAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})
    /**
    Determines whether every element in the immutable list matches the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions to check against the elements.
    - Returns: 
         if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, . If the list has no elements, the return value is .

    */
    public func TrueForAll(match : dotnet.System.Predicate_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_bool__TrueForAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TrueForAll(match : @escaping (T) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try TrueForAll(match: del_match);
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableList`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableList`1.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    Gets the number of elements contained in the list.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether this list is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
} // ImmutableList_1


// type: System.Collections.Immutable.ImmutableList`1+Builder
    /**
    Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableList_Builder_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableList_1_Builder_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)
    /**
    Adds an item to the immutable list.

    - Parameter item: The item to add to the list.
    */
    public func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Adds a series of elements to the end of this list.

    - Parameter items: The elements to add to the end of the list.
    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__AddRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    /**
    Searches the specified range of the  for an element using the specified comparer and returns the zero-based index of the element.

    - Parameter index: The zero-based starting index of the range to search.
    - Parameter count: The length of the range to search.
    - Parameter item: The object to locate. This value can be null for reference types.
    - Parameter comparer: The implementation to use when comparing elements, or  for the default comparer.
    - Returns: The zero-based index of item in the , if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than .

    */
    public func BinarySearch(index : Swift.Int32, count : Swift.Int32, item : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__BinarySearch_0__4__i32_i32_T_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)
    /**
    Searches the entire  for an element using the default comparer and returns the zero-based index of the element.

    - Parameter item: The object to locate. The value can be null for reference types.
    - Returns: The zero-based index of item in the , if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than .

    */
    public func BinarySearch(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__BinarySearch_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch(T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    /**
    Searches the entire  for an element using the specified comparer and returns the zero-based index of the element.

    - Parameter item: The object to locate. This value can be null for reference types.
    - Parameter comparer: The implementation to use when comparing elements, or  for the default comparer.
    - Returns: The zero-based index of item in the , if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than .

    */
    public func BinarySearch(item : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__BinarySearch_0__2__T_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Clear
    /**
    Removes all items from the immutable list.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)
    /**
    Determines whether the immutable list contains a specific value.

    - Parameter item: The object to locate in the list.
    - Returns: 
         if item is found in the list; otherwise, .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableList<TOutput> ConvertAll<TOutput>(System.Func<T,TOutput>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})
    /**
    Creates a new immutable list from the list represented by this builder by using the converter function.

    - Parameter converter: The converter function.
    - Returns: A new immutable list from the list represented by this builder.

    */
    public func ConvertAll<UTOutput : SGBridgeGenericValue>(converter : dotnet.System.Func_2<T,UTOutput>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_System_Collections_Immutable_ImmutableList_UTOutput___ConvertAll_1__1__System_Func_T_UTOutput_(T.get_type_handle(), UTOutput.get_type_handle(), &__thrown, self.get_handle(), converter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConvertAll<UTOutput : SGBridgeGenericValue>(converter : @escaping (T) throws -> UTOutput) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<UTOutput> {
        let del_converter = try dotnet.System.Func_2<T,UTOutput>(converter);
        return try ConvertAll(converter: del_converter);
    }
    // void CopyTo(System.Int32, T[], System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,System.Collections.Immutable.T[],System.Int32,System.Int32)
    public func CopyTo(index : Swift.Int32, array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__CopyTo_0__4__i32_TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, array.get_handle(), arrayIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[])
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Collections.Immutable.T[])
    public func CopyTo(array : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Collections.Immutable.T[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Exists(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})
    /**
    Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to search for.
    - Returns: 
         if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, .

    */
    public func Exists(match : dotnet.System.Predicate_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_bool__Exists_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func Exists(match : @escaping (T) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try Exists(match: del_match);
    }
    // T Find(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type .

    */
    public func Find(match : dotnet.System.Predicate_1<T>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_T__Find_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // delegate closure overload
    public func Find(match : @escaping (T) throws -> Bool) throws -> T {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try Find(match: del_match);
    }
    // System.Collections.Immutable.ImmutableList<T> FindAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})
    /**
    Retrieves all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to search for.
    - Returns: An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.

    */
    public func FindAll(match : dotnet.System.Predicate_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_System_Collections_Immutable_ImmutableList_T___FindAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func FindAll(match : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindAll(match: del_match);
    }
    // System.Int32 FindIndex(System.Int32, System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.

    - Parameter startIndex: The zero-based starting index of the search.
    - Parameter count: The number of elements in the section to search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    public func FindIndex(startIndex : Swift.Int32, count : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__FindIndex_0__3__i32_i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, count, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindIndex(startIndex : Swift.Int32, count : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(startIndex: startIndex, count: count, match: del_match);
    }
    // System.Int32 FindIndex(System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.

    - Parameter startIndex: The zero-based starting index of the search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    public func FindIndex(startIndex : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__FindIndex_0__2__i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindIndex(startIndex : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(startIndex: startIndex, match: del_match);
    }
    // System.Int32 FindIndex(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    public func FindIndex(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__FindIndex_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindIndex(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(match: del_match);
    }
    // T FindLast(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type .

    */
    public func FindLast(match : dotnet.System.Predicate_1<T>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_T__FindLast_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // delegate closure overload
    public func FindLast(match : @escaping (T) throws -> Bool) throws -> T {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLast(match: del_match);
    }
    // System.Int32 FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.

    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    public func FindLastIndex(startIndex : Swift.Int32, count : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__FindLastIndex_0__3__i32_i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, count, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindLastIndex(startIndex : Swift.Int32, count : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(startIndex: startIndex, count: count, match: del_match);
    }
    // System.Int32 FindLastIndex(System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.

    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    public func FindLastIndex(startIndex : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__FindLastIndex_0__2__i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindLastIndex(startIndex : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(startIndex: startIndex, match: del_match);
    }
    // System.Int32 FindLastIndex(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.

    - Parameter match: The delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    public func FindLastIndex(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__FindLastIndex_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func FindLastIndex(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(match: del_match);
    }
    // void ForEach(System.Action<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})
    /**
    Performs the specified action on each element of the list.

    - Parameter action: The delegate to perform on each element of the list.
    */
    public func ForEach(action : dotnet.System.Action_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__ForEach_0__1__System_Action_T_(T.get_type_handle(), &__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func ForEach(action : @escaping (T) throws -> Void) throws {
        let del_action = try dotnet.System.Action_1<T>(action);
        return try ForEach(action: del_action);
    }
    // System.Collections.Immutable.ImmutableList<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection.

    - Returns: An enumerator that can be used to iterate through the list.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableList_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_System_Collections_Immutable_ImmutableList_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_Enumerator_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableList<T> GetRange(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)
    /**
    Creates a shallow copy of a range of elements in the source immutable list.

    - Parameter index: The zero-based index at which the range starts.
    - Parameter count: The number of elements in the range.
    - Returns: A shallow copy of a range of elements in the source immutable list.

    */
    public func GetRange(index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_System_Collections_Immutable_ImmutableList_T___GetRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Returns: The zero-based index of the first occurrence of  within the range of elements in the immutable list, if found; otherwise, -1.

    */
    public func IndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from  to the last element, if found; otherwise, -1.

    */
    public func IndexOf(item : T, index : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__IndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements in the section to search.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at  and contains  number of elements, if found; otherwise, -1.

    */
    public func IndexOf(item : T, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__IndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the  that starts at the specified index and contains the specified number of elements.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements to search.
    - Parameter equalityComparer: The value comparer to use for comparing elements for equality.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at  and contains  number of elements, if found; otherwise, -1

    */
    public func IndexOf(item : T, index : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__IndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)
    /**
    Inserts an item to the immutable list at the specified index.

    - Parameter index: The zero-based index at which  should be inserted.
    - Parameter item: The object to insert into the immutable list.
    */
    public func Insert(index : Swift.Int32, item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    /**
    Inserts the elements of a collection into the immutable list at the specified index.

    - Parameter index: The zero-based index at which the new elements should be inserted.
    - Parameter items: The collection whose elements should be inserted into the immutable list. The collection itself cannot be , but it can contain elements that are null, if type T is a reference type.
    */
    public func InsertRange(index : Swift.Int32, items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__InsertRange_0__2__i32_System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 LastIndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Returns: The zero-based index of the last occurrence of  within the entire immutable list, if found; otherwise, -1.

    */
    public func LastIndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__LastIndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Parameter startIndex: The zero-based starting index of the backward search.
    - Returns: The zero-based index of the last occurrence of  within the range of elements in the immutable list that extends from the first element to , if found; otherwise, -1.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__LastIndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Returns: The zero-based index of the last occurrence of  within the range of elements in the immutable list that contains  number of elements and ends at , if found; otherwise, -1.

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__LastIndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.

    - Parameter item: The object to locate in the immutable list. The value can be  for reference types.
    - Parameter startIndex: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements to search.
    - Parameter equalityComparer: The value comparer to use for comparing elements for equality.
    - Returns: The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at  and contains  number of elements, if found; otherwise, -1

    */
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__LastIndexOf_0__4__T_i32_i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), startIndex, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)
    /**
    Removes the first occurrence of a specific object from the immutable list.

    - Parameter item: The object to remove from the list.
    - Returns: 
         if item was successfully removed from the list; otherwise, . This method also returns  if item is not found in the list.

    */
    public func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 RemoveAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})
    /**
    Removes all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions of the elements to remove.
    - Returns: The number of elements removed from the immutable list.

    */
    public func RemoveAll(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__RemoveAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public func RemoveAll(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveAll(match: del_match);
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)
    /**
    Removes the item at the specified index of the immutable list.

    - Parameter index: The zero-based index of the item to remove from the list.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse()
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse
    /**
    Reverses the order of the elements in the entire immutable list.

    */
    public func Reverse() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse(System.Int32, System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)
    /**
    Reverses the order of the elements in the specified range of the immutable list.

    - Parameter index: The zero-based starting index of the range to reverse.
    - Parameter count: The number of elements in the range to reverse.
    */
    public func Reverse(index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Reverse_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort()
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Sort
    /**
    Sorts the elements in the entire immutable list by using the default comparer.

    */
    public func Sort() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Sort_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
    /**
    Sorts the elements in the entire immutable list by using the specified comparer.

    - Parameter comparer: The implementation to use when comparing elements, or  to use the default comparer ().
    */
    public func Sort(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Sort_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort(System.Comparison<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})
    /**
    Sorts the elements in the entire immutable list by using the specified comparison object.

    - Parameter comparison: The object to use when comparing elements.
    */
    public func Sort(comparison : dotnet.System.Comparison_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Sort_0__1__System_Comparison_T_(T.get_type_handle(), &__thrown, self.get_handle(), comparison.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Sort(comparison : @escaping (T, T) throws -> Swift.Int32) throws {
        let del_comparison = try dotnet.System.Comparison_1<T>(comparison);
        return try Sort(comparison: del_comparison);
    }
    // void Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    /**
    Sorts the elements in a range of elements in the immutable list  by using the specified comparer.

    - Parameter index: The zero-based starting index of the range to sort.
    - Parameter count: The length of the range to sort.
    - Parameter comparer: The implementation to use when comparing elements, or  to use the default comparer ().
    */
    public func Sort(index : Swift.Int32, count : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__Sort_0__3__i32_i32_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Immutable.ImmutableList<T> ToImmutable()
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable
    /**
    Creates an immutable list based on the contents of this instance.

    - Returns: An immutable list.

    */
    public func ToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_System_Collections_Immutable_ImmutableList_T___ToImmutable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableList_1(hndl : __return);
        }
    }
    // bool TrueForAll(System.Predicate<T>)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})
    /**
    Determines whether every element in the immutable list matches the conditions defined by the specified predicate.

    - Parameter match: The delegate that defines the conditions to check against the elements.
    - Returns: 
         if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, . If the list has no elements, the return value is .

    */
    public func TrueForAll(match : dotnet.System.Predicate_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_bool__TrueForAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TrueForAll(match : @escaping (T) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try TrueForAll(match: del_match);
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Builder_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, T)
// docid: M:System.Collections.Immutable.ImmutableList`1.Builder.set_Item(System.Int32,`0)
    public func set_Item(index : Swift.Int32, value : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Builder_void__set_Item_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of elements in this immutable list.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // ImmutableList_Builder_1


// type: System.Collections.Immutable.ImmutableList`1+Enumerator
// boxed value type
    /**
    Enumerates the contents of a binary tree.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableList_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableList_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableList_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose
    /**
    Releases the resources used by the current instance of the  class.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext
    /**
    Advances enumeration to the next element of the immutable list.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the list.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the immutable list.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableList_1_Enumerator_void__Reset_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Immutable.ImmutableList`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableList_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableList_Enumerator_1


// type: System.Collections.Immutable.ImmutableQueue
public struct ImmutableQueue {
    // System.Collections.Immutable.ImmutableQueue<T> CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable queue that contains the specified items.

    - Parameter items: The items to add to the queue before immutability is applied.
    - Returns: An immutable queue that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_System_Collections_Immutable_ImmutableQueue_UT___CreateRange_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableQueue<T> Create<T>()
    // System.Collections.Immutable.ImmutableQueue<T> Create<T>(T)
// docid: M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)
    /**
    Creates a new immutable queue that contains the specified item.

    - Parameter item: The item to prepopulate the queue with.
    - Returns: A new immutable queue that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_System_Collections_Immutable_ImmutableQueue_UT___Create_1__1__UT(UT.get_type_handle(), &__thrown, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableQueue<T> Create<T>(T[])
    // System.Collections.Immutable.IImmutableQueue<T> Dequeue<T>(System.Collections.Immutable.IImmutableQueue<T>, ref T)
// docid: M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)
    /**
    Removes the item at the beginning of the immutable queue, and returns the new queue.

    - Parameter queue: The queue to remove the item from.
    - Parameter value: When this method returns, contains the item from the beginning of the queue.
    - Returns: The new queue with the item removed.

    */
    public static func Dequeue<UT : SGBridgeGenericValue>(queue : dotnet.System.Collections.Immutable.IImmutableQueue_1<UT>, value : inout UT) throws -> dotnet.System.Collections.Immutable.IImmutableQueue_1<UT> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableQueue_System_Collections_Immutable_IImmutableQueue_UT___Dequeue_1__2__System_Collections_Immutable_IImmutableQueue_UT__outUT(UT.get_type_handle(), &__thrown, queue.get_handle(), &_tmp_out_value);
            let _tmp2_value = UT(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableQueue_1(hndl : __return);
        }
    }
} // ImmutableQueue


// type: System.Collections.Immutable.ImmutableQueue`1
    /**
    Represents an immutable queue.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableQueue_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableQueue_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableQueue<T> Clear()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Clear
    /**
    Removes all objects from the immutable queue.

    - Returns: The empty immutable queue.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_System_Collections_Immutable_ImmutableQueue_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableQueue<T> Dequeue()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Dequeue
    /**
    Removes the element at the beginning of the immutable queue, and returns the new queue.

    - Returns: The new immutable queue; never .

    */
    public func Dequeue() throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_System_Collections_Immutable_ImmutableQueue_T___Dequeue_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableQueue<T> Dequeue(ref T)
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)
    /**
    Removes the item at the beginning of the immutable queue, and returns the new queue.

    - Parameter value: When this method returns, contains the element from the beginning of the queue.
    - Returns: The new immutable queue with the beginning element removed.

    */
    public func Dequeue(value : inout T) throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableQueue_1_System_Collections_Immutable_ImmutableQueue_T___Dequeue_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_value);
            let _tmp2_value = T(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableQueue<T> Enqueue(T)
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)
    /**
    Adds an element to the end of the immutable queue, and returns the new queue.

    - Parameter value: The element to add.
    - Returns: The new immutable queue.

    */
    public func Enqueue(value : T) throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_System_Collections_Immutable_ImmutableQueue_T___Enqueue_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableQueue<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable queue.

    - Returns: An enumerator that can be used to iterate through the queue.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableQueue_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_System_Collections_Immutable_ImmutableQueue_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_Enumerator_1(hndl : __return);
        }
    }
    // T Peek()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Peek
    /**
    Returns the element at the beginning of the immutable queue without removing it.

    - Returns: The element at the beginning of the queue.

    */
    public func Peek() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_T__Peek_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] System.Collections.Immutable.ImmutableQueue<T> get_Empty()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.get_Empty
    public class func get_Empty() throws -> dotnet.System.Collections.Immutable.ImmutableQueue_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_System_Collections_Immutable_ImmutableQueue_T___get_Empty_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableQueue_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets an empty immutable queue.

    */
    public static var Empty : dotnet.System.Collections.Immutable.ImmutableQueue_1<T> {
        get {
            return try! get_Empty();
        }
    }
    /**
    Gets a value that indicates whether this immutable queue is empty.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
} // ImmutableQueue_1


// type: System.Collections.Immutable.ImmutableQueue`1+Enumerator
// boxed value type
    /**
    Enumerates the contents of an immutable queue without allocating any memory.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableQueue_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableQueue_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableQueue_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the immutable queue.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the queue.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableQueue_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableQueue_Enumerator_1


// type: System.Collections.Immutable.ImmutableSortedDictionary
public struct ImmutableSortedDictionary {
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Builder CreateBuilder<TKey, TValue>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Builder CreateBuilder<TKey, TValue>(System.Collections.Generic.IComparer<TKey>)
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Builder CreateBuilder<TKey, TValue>(System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a new immutable sorted dictionary builder.

    - Parameter keyComparer: The key comparer.
    - Parameter valueComparer: The value comparer.
    - Returns: The immutable collection builder.

    */
    public static func CreateBuilder<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Builder_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue__System_Collections_Immutable_Builder_UTKey_UTValue___CreateBuilder_2__2__System_Collections_Generic_IComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Builder_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> CreateRange<TKey, TValue>(System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.

    - Parameter keyComparer: The comparer implementation to use to evaluate keys for equality and sorting.
    - Parameter items: The items to add to the sorted dictionary.
    - Returns: The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.

    */
    public static func CreateRange<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___CreateRange_2__2__System_Collections_Generic_IComparer_UTKey__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> CreateRange<TKey, TValue>(System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.

    - Parameter keyComparer: The comparer implementation to use to compare keys for equality and sorting.
    - Parameter valueComparer: The comparer implementation to use to compare values for equality and sorting.
    - Parameter items: The items to add to the sorted dictionary before it's immutable.
    - Returns: An immutable sorted dictionary that contains the specified items and uses the specified comparers.

    */
    public static func CreateRange<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>, items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___CreateRange_2__3__System_Collections_Generic_IComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> CreateRange<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.

    - Parameter items: The items to add to the sorted dictionary before it's immutable.
    - Returns: An immutable sorted dictionary that contains the specified items.

    */
    public static func CreateRange<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___CreateRange_2__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> Create<TKey, TValue>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> Create<TKey, TValue>(System.Collections.Generic.IComparer<TKey>)
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> Create<TKey, TValue>(System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates an empty immutable sorted dictionary that uses the specified key and value comparers.

    - Parameter keyComparer: The implementation to use to determine the equality of keys in the dictionary.
    - Parameter valueComparer: The implementation to use to determine the equality of values in the dictionary.
    - Returns: An empty immutable sorted dictionary.

    */
    public static func Create<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___Create_2__2__System_Collections_Generic_IComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
    /**
    Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.

    - Parameter source: The sequence of key/value pairs to enumerate.
    - Returns: An immutable sorted dictionary that contains the key/value pairs in the specified sequence.

    */
    public static func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_2__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue__(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})
    /**
    Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.

    - Parameter source: The sequence of key/value pairs to enumerate.
    - Parameter keyComparer: The key comparer to use when building the immutable dictionary.
    - Returns: An immutable sorted dictionary that contains the key/value pairs in the specified sequence.

    */
    public static func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_2__2__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue___System_Collections_Generic_IComparer_UTKey_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.

    - Parameter source: The sequence of key/value pairs to enumerate.
    - Parameter keyComparer: The key comparer to use when building the immutable dictionary.
    - Parameter valueComparer: The value comparer to use for the immutable dictionary.
    - Returns: An immutable sorted dictionary that contains the key/value pairs in the specified sequence.

    */
    public static func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_2__3__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue___System_Collections_Generic_IComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Builder)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary`2.Builder{``0,``1})
    public static func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Builder_2<UTKey,UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_2__1__System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue__System_Collections_Immutable_Builder_UTKey_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.

    - Parameter source: The sequence to enumerate to generate the dictionary.
    - Parameter keySelector: The function that will produce the key for the dictionary from each sequence element.
    - Parameter elementSelector: The function that will produce the value for the dictionary from each sequence element.
    - Returns: An immutable sorted dictionary that contains the items in the specified sequence.

    */
    public static func ToImmutableSortedDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTValue_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableSortedDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTValue) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTValue>(elementSelector);
        return try ToImmutableSortedDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})
    /**
    Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.

    - Parameter source: The sequence to enumerate to generate the dictionary.
    - Parameter keySelector: The function that will produce the key for the dictionary from each sequence element.
    - Parameter elementSelector: The function that will produce the value for the dictionary from each sequence element.
    - Parameter keyComparer: The key comparer to use for the dictionary.
    - Returns: An immutable dictionary that contains the items in the specified sequence.

    */
    public static func ToImmutableSortedDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTValue>, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_3__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTValue__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableSortedDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTValue>(elementSelector);
        return try ToImmutableSortedDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer);
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.

    - Parameter source: The sequence to enumerate to generate the dictionary.
    - Parameter keySelector: The function that will produce the key for the dictionary from each sequence element.
    - Parameter elementSelector: The function that will produce the value for the dictionary from each sequence element.
    - Parameter keyComparer: The key comparer to use for the dictionary.
    - Parameter valueComparer: The value comparer to use for the dictionary.
    - Returns: An immutable sorted dictionary that contains the items in the specified sequence.

    */
    public static func ToImmutableSortedDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTValue>, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_System_Collections_Immutable_ImmutableSortedDictionary_UTKey_UTValue___ToImmutableSortedDictionary_3__5__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTValue__System_Collections_Generic_IComparer_UTKey__System_Collections_Generic_IEqualityComparer_UTValue_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToImmutableSortedDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTValue>(elementSelector);
        return try ToImmutableSortedDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer, valueComparer: valueComparer);
    }
} // ImmutableSortedDictionary


// type: System.Collections.Immutable.ImmutableSortedDictionary`2
    /**
    Represents an immutable sorted dictionary.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableSortedDictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableSortedDictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> Add(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)
    /**
    Adds an element with the specified key and value to the immutable sorted dictionary.

    - Parameter key: The key of the entry to add.
    - Parameter value: The value of entry to add.
    - Returns: A new immutable sorted dictionary that contains the additional key/value pair.

    */
    public func Add(key : TKey, value : TValue) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Adds the specific key/value pairs to the immutable sorted dictionary.

    - Parameter items: The key/value pairs to add.
    - Returns: A new immutable dictionary that contains the additional key/value pairs.

    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___AddRange_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> Clear()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear
    /**
    Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.

    - Returns: An empty dictionary with equivalent ordering and key/value comparison rules.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Determines whether this immutable sorted dictionary contains the specified key/value pair.

    - Parameter pair: The key/value pair to locate.
    - Returns: 
         if the specified key/value pair is found in the dictionary; otherwise, .

    */
    public func Contains(pair : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), pair.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)
    /**
    Determines whether this immutable sorted map contains the specified key.

    - Parameter key: The key to locate.
    - Returns: 
         if the immutable dictionary contains the specified key; otherwise, .

    */
    public func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)
    /**
    Determines whether the immutable sorted dictionary contains an element with the specified value.

    - Parameter value: The value to locate. The value can be  for reference types.
    - Returns: 
         if the dictionary contains an element with the specified value; otherwise, .

    */
    public func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable sorted dictionary.

    - Returns: An enumerator that can be used to iterate through the dictionary.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue__System_Collections_Immutable_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Enumerator_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> Remove(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)
    /**
    Removes the element with the specified value from the immutable sorted dictionary.

    - Parameter value: The value of the element to remove.
    - Returns: A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.

    */
    public func Remove(value : TKey) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the elements with the specified keys from the immutable sorted dictionary.

    - Parameter keys: The keys of the elements to remove.
    - Returns: A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.

    */
    public func RemoveRange(keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___RemoveRange_0__1__System_Collections_Generic_IEnumerable_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> SetItem(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)
    /**
    Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.

    - Parameter key: The key of the entry to add.
    - Parameter value: The key value to set.
    - Returns: A new immutable sorted dictionary that contains the specified key/value pair.

    */
    public func SetItem(key : TKey, value : TValue) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___SetItem_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.

    - Parameter items: The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.
    - Returns: An immutable dictionary that contains the specified key/value pairs.

    */
    public func SetItems(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___SetItems_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Builder ToBuilder()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder
    /**
    Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.

    - Returns: A collection with the same contents as this dictionary.

    */
    public func ToBuilder() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Builder_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue__System_Collections_Immutable_Builder_TKey_TValue___ToBuilder_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Builder_2(hndl : __return);
        }
    }
    // bool TryGetKey(TKey, ref TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)
    /**
    Determines whether this dictionary contains a specified key.

    - Parameter equalKey: The key to search for.
    - Parameter actualKey: The matching key located in the dictionary if found, or equalkey if no match is found.
    - Returns: 
         if a match for  is found; otherwise, .

    */
    public func TryGetKey(equalKey : TKey, actualKey : inout TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualKey = actualKey.to_gval();
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_bool__TryGetKey_0__2__TKey_outTKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), equalKey.to_gval(), &_tmp_out_actualKey);
            let _tmp2_actualKey = TKey(gval: _tmp_out_actualKey);
            actualKey = _tmp2_actualKey;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The key whose value will be retrieved.
    - Parameter value: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the  parameter.
    - Returns: 
         if the dictionary contains an element with the specified key; otherwise, .

    */
    public func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> WithComparers(System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})
    /**
    Gets an instance of the immutable sorted dictionary that uses the specified key comparer.

    - Parameter keyComparer: The key comparer to use.
    - Returns: An instance of the immutable dictionary that uses the given comparer.

    */
    public func WithComparers(keyComparer : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___WithComparers_0__1__System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> WithComparers(System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
    /**
    Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.

    - Parameter keyComparer: The key comparer to use.
    - Parameter valueComparer: The value comparer to use.
    - Returns: An instance of the immutable dictionary that uses the given comparers.

    */
    public func WithComparers(keyComparer : dotnet.System.Collections.Generic.IComparer_1<TKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___WithComparers_0__2__System_Collections_Generic_IComparer_TKey__System_Collections_Generic_IEqualityComparer_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_bool__get_IsEmpty_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<TKey> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Generic_IComparer_TKey___get_KeyComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TKey> get_Keys()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_Keys
    public func get_Keys() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Generic_IEnumerable_TKey___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TValue> get_ValueComparer()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_ValueComparer
    public func get_ValueComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Generic_IEqualityComparer_TValue___get_ValueComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TValue> get_Values()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_Values
    public func get_Values() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_System_Collections_Generic_IEnumerable_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    /**
    Gets the number of key/value pairs in the immutable sorted dictionary.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the key comparer for the immutable sorted dictionary.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IComparer_1<TKey> {
        get {
            return try! get_KeyComparer();
        }
    }
    /**
    Gets the keys in the immutable sorted dictionary.

    */
    public var Keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets the value comparer used to determine whether values are equal.

    */
    public var ValueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        get {
            return try! get_ValueComparer();
        }
    }
    /**
    Gets the values in the immutable sorted dictionary.

    */
    public var Values : dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        get {
            return try! get_Values();
        }
    }
} // ImmutableSortedDictionary_2


// type: System.Collections.Immutable.ImmutableSortedDictionary`2+Builder
    /**
    Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableSortedDictionary_Builder_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Adds the specified item to the immutable sorted dictionary.

    - Parameter item: The object to add to the dictionary.
    */
    public func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__Add_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)
    /**
    Adds an element that has the specified key and value to the immutable sorted dictionary.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add.
    */
    public func Add(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Adds a sequence of values to the immutable sorted dictionary.

    - Parameter items: The items to add to the dictionary.
    */
    public func AddRange(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__AddRange_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear
    /**
    Removes all items from the immutable sorted dictionary.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Determines whether the immutable sorted dictionary contains a specific value.

    - Parameter item: The object to locate in the dictionary.
    - Returns: 
         if  is found in the dictionary; otherwise, .

    */
    public func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)
    /**
    Determines whether the immutable sorted dictionary contains an element with the specified key.

    - Parameter key: The key to locate in the dictionary.
    - Returns: 
         if the dictionary contains an element with the key; otherwise, .

    */
    public func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)
    /**
    Determines whether the immutable sorted dictionary contains an element with the specified value.

    - Parameter value: The value to locate in the dictionary. The value can be  for reference types.
    - Returns: 
         if the immutable sorted dictionary contains an element with the specified value; otherwise, .

    */
    public func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable sorted dictionary.

    - Returns: An enumerator that can be used to iterate through the dictionary.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue__System_Collections_Immutable_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Enumerator_2(hndl : __return);
        }
    }
    // TValue GetValueOrDefault(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)
    /**
    Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.

    - Parameter key: The key to search for.
    - Returns: The value for the key, or default(TValue) if no matching key was found.

    */
    public func GetValueOrDefault(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_TValue__GetValueOrDefault_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // TValue GetValueOrDefault(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)
    /**
    Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.

    - Parameter key: The key to search for.
    - Parameter defaultValue: The default value to return if no matching key is found in the dictionary.
    - Returns: The value for the key, or  if no matching key was found.

    */
    public func GetValueOrDefault(key : TKey, defaultValue : TValue) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_TValue__GetValueOrDefault_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<TKey,TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    /**
    Removes the first occurrence of a specific object from the immutable sorted dictionary.

    - Parameter item: The object to remove from the dictionary.
    - Returns: 
         if  was successfully removed from the dictionary; otherwise, . This method also returns  if  is not found in the dictionary.

    */
    public func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)
    /**
    Removes the element with the specified key from the immutable sorted dictionary.

    - Parameter key: The key of the element to remove.
    - Returns: 
         if the element is successfully removed; otherwise, . This method also returns  if  was not found in the original dictionary.

    */
    public func Remove(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.

    - Parameter keys: The keys for entries to remove from the dictionary.
    */
    public func RemoveRange(keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__RemoveRange_0__1__System_Collections_Generic_IEnumerable_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), keys.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutable()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable
    /**
    Creates an immutable sorted dictionary based on the contents of this instance.

    - Returns: An immutable sorted dictionary.

    */
    public func ToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_System_Collections_Immutable_ImmutableSortedDictionary_TKey_TValue___ToImmutable_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2(hndl : __return);
        }
    }
    // bool TryGetKey(TKey, ref TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)
    /**
    Determines whether this dictionary contains a specified key.

    - Parameter equalKey: The key to search for.
    - Parameter actualKey: The matching key located in the dictionary if found, or equalkey if no match is found.
    - Returns: 
         if a match for  is found; otherwise, .

    */
    public func TryGetKey(equalKey : TKey, actualKey : inout TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualKey = actualKey.to_gval();
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__TryGetKey_0__2__TKey_outTKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), equalKey.to_gval(), &_tmp_out_actualKey);
            let _tmp2_actualKey = TKey(gval: _tmp_out_actualKey);
            actualKey = _tmp2_actualKey;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The key whose value will be retrieved.
    - Parameter value: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the  parameter. This parameter is passed uninitialized.
    - Returns: 
         if the object that implements the dictionary contains an element with the specified key; otherwise, .

    */
    public func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<TKey> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_System_Collections_Generic_IComparer_TKey___get_KeyComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeyComparer(System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.set_KeyComparer(System.Collections.Generic.IComparer{`0})
    public func set_KeyComparer(value : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__set_KeyComparer_0__1__System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TKey> get_Keys()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.get_Keys
    public func get_Keys() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_System_Collections_Generic_IEnumerable_TKey___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TValue> get_ValueComparer()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.get_ValueComparer
    public func get_ValueComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_System_Collections_Generic_IEqualityComparer_TValue___get_ValueComparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueComparer(System.Collections.Generic.IEqualityComparer<TValue>)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.set_ValueComparer(System.Collections.Generic.IEqualityComparer{`1})
    public func set_ValueComparer(value : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__set_ValueComparer_0__1__System_Collections_Generic_IEqualityComparer_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TValue> get_Values()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.get_Values
    public func get_Values() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_System_Collections_Generic_IEnumerable_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(TKey, TValue)
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.set_Item(`0,`1)
    public func set_Item(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Builder_void__set_Item_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of elements in this immutable sorted dictionary.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets or sets the key comparer.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IComparer_1<TKey> {
        get {
            return try! get_KeyComparer();
        }
        set(v) {
            return try! set_KeyComparer(value: v);
        }
    }
    /**
    Gets a strongly typed, read-only collection of elements.

    */
    public var Keys : dotnet.System.Collections.Generic.IEnumerable_1<TKey> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets or sets the value comparer.

    */
    public var ValueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TValue> {
        get {
            return try! get_ValueComparer();
        }
        set(v) {
            return try! set_ValueComparer(value: v);
        }
    }
    /**
    Gets a collection that contains the values of the immutable sorted dictionary.

    */
    public var Values : dotnet.System.Collections.Generic.IEnumerable_1<TValue> {
        get {
            return try! get_Values();
        }
    }
} // ImmutableSortedDictionary_Builder_2


// type: System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator
// boxed value type
    /**
    Enumerates the contents of a binary tree.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableSortedDictionary_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableSortedDictionary_2_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableSortedDictionary_2_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose
    /**
    Releases the resources used by the current instance of the  class.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the immutable sorted dictionary.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the sorted dictionary.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedDictionary_2_Enumerator_void__Reset_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<TKey,TValue> get_Current()
// docid: M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedDictionary_2_Enumerator_System_Collections_Generic_KeyValuePair_TKey_TValue___get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // ImmutableSortedDictionary_Enumerator_2


// type: System.Collections.Immutable.ImmutableSortedSet
public struct ImmutableSortedSet {
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedSet<T>.Builder CreateBuilder<T>()
    // System.Collections.Immutable.ImmutableSortedSet<T>.Builder CreateBuilder<T>(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
    /**
    Returns a collection that can be used to build an immutable sorted set.

    - Parameter comparer: The comparer used to compare items in the set for equality.
    - Returns: The immutable collection.

    */
    public static func CreateBuilder<UT : SGBridgeGenericValue>(comparer : dotnet.System.Collections.Generic.IComparer_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_Builder_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_T__System_Collections_Immutable_Builder_UT___CreateBuilder_1__1__System_Collections_Generic_IComparer_UT_(UT.get_type_handle(), &__thrown, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_Builder_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> CreateRange<T>(System.Collections.Generic.IComparer<T>, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable collection that contains the specified items.

    - Parameter comparer: The comparer to use to compare elements in this set.
    - Parameter items: The items to add to the set before it's immutable.
    - Returns: The new immutable set that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(comparer : dotnet.System.Collections.Generic.IComparer_1<UT>, items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UT___CreateRange_1__2__System_Collections_Generic_IComparer_UT__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable collection that contains the specified items.

    - Parameter items: The items to add to the set with before it's immutable.
    - Returns: The new immutable set that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UT___CreateRange_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedSet<T> Create<T>()
    // System.Collections.Immutable.ImmutableSortedSet<T> Create<T>(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
    /**
    Creates an empty immutable sorted set that uses the specified comparer.

    - Parameter comparer: The implementation to use when comparing items in the set.
    - Returns: An empty immutable set.

    */
    public static func Create<UT : SGBridgeGenericValue>(comparer : dotnet.System.Collections.Generic.IComparer_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UT___Create_1__1__System_Collections_Generic_IComparer_UT_(UT.get_type_handle(), &__thrown, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Create<T>(System.Collections.Generic.IComparer<T>, T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
    /**
    Creates a new immutable sorted set that contains the specified item and uses the specified comparer.

    - Parameter comparer: The implementation to use when comparing items in the set.
    - Parameter item: The item to prepopulate the set with.
    - Returns: A new immutable set that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(comparer : dotnet.System.Collections.Generic.IComparer_1<UT>, item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UT___Create_1__2__System_Collections_Generic_IComparer_UT__UT(UT.get_type_handle(), &__thrown, nil, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Create<T>(System.Collections.Generic.IComparer<T>, T[])
// docid: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},System.Collections.Immutable.T[])
    public static func Create<UT : SGBridgeGenericValue>(comparer : dotnet.System.Collections.Generic.IComparer_1<UT>, items : dotnet.System_Arr<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UT___Create_1__2__System_Collections_Generic_IComparer_UT__UTArray(UT.get_type_handle(), &__thrown, nil, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Create<T>(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
    /**
    Creates a new immutable sorted set that contains the specified item.

    - Parameter item: The item to prepopulate the set with.
    - Returns: A new immutable set that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UT___Create_1__1__UT(UT.get_type_handle(), &__thrown, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableSortedSet<T> Create<T>(T[])
    // System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Enumerates a sequence and produces an immutable sorted set of its contents.

    - Parameter source: The sequence to enumerate.
    - Returns: An immutable sorted set that contains the items in the specified sequence.

    */
    public static func ToImmutableSortedSet<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UTSource___ToImmutableSortedSet_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
    /**
    Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.

    - Parameter source: The sequence to enumerate.
    - Parameter comparer: The comparer to use for initializing and adding members to the sorted set.
    - Returns: An immutable sorted set that contains the items in the specified sequence.

    */
    public static func ToImmutableSortedSet<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UTSource___ToImmutableSortedSet_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(System.Collections.Immutable.ImmutableSortedSet<TSource>.Builder)
// docid: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet`1.Builder{``0})
    public static func ToImmutableSortedSet<UTSource : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableSortedSet_Builder_1<UTSource>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_System_Collections_Immutable_ImmutableSortedSet_UTSource___ToImmutableSortedSet_1__1__System_Collections_Immutable_ImmutableSortedSet_T__System_Collections_Immutable_Builder_UTSource_(UTSource.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
} // ImmutableSortedSet


// type: System.Collections.Immutable.ImmutableSortedSet`1
    /**
    Represents an immutable sorted set implementation.

NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableSortedSet_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableSortedSet_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableSortedSet<T> Add(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)
    /**
    Adds the specified value to this immutable sorted set.

    - Parameter value: The value to add.
    - Returns: A new set with the element added, or this set if the element is already in this set.

    */
    public func Add(value : T) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Clear()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Clear
    /**
    Removes all elements from the immutable sorted set.

    - Returns: An empty set with the elements removed.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)
    /**
    Determines whether this immutable sorted set contains the specified value.

    - Parameter value: The value to check for.
    - Returns: 
         if the set contains the specified value; otherwise, .

    */
    public func Contains(value : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Except(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes a specified set of items from this immutable sorted set.

    - Parameter other: The items to remove from this set.
    - Returns: A new set with the items removed; or the original set if none of the items were in the set.

    */
    public func Except(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___Except_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable sorted set.

    - Returns: An enumerator that can be used to iterate through the set.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_Enumerator_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)
    /**
    Gets the position within this immutable sorted set that the specified value appears in.

    - Parameter item: The value whose position is being sought.
    - Returns: The index of the specified  in the sorted set, if  is found. If  is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If  is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.

    */
    public func IndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Intersect(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.

    - Parameter other: The set to intersect with this one.
    - Returns: A new immutable sorted set that contains any elements that exist in both sets.

    */
    public func Intersect(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___Intersect_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper subset of ; otherwise, .

    */
    public func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable sorted set is a proper superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper superset of ; otherwise, .

    */
    public func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable sorted set is a subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a subset of ; otherwise, .

    */
    public func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable sorted set is a superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a superset of ; otherwise, .

    */
    public func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable sorted set and a specified collection share common elements.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set and  share at least one common element; otherwise, .

    */
    public func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Remove(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)
    /**
    Removes the specified value from this immutable sorted set.

    - Parameter value: The element to remove.
    - Returns: A new immutable sorted set with the element removed, or this set if the element was not found in the set.

    */
    public func Remove(value : T) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<T> Reverse()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse
    /**
    Returns an  that iterates over this immutable sorted set in reverse order.

    - Returns: An enumerator that iterates over the immutable sorted set in reverse order.

    */
    public func Reverse() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Generic_IEnumerable_T___Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current immutable sorted set and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the sets are equal; otherwise, .

    */
    public func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
    /**
    Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.

    - Parameter other: The other sequence of items.
    - Returns: The new immutable sorted set.

    */
    public func SymmetricExcept(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___SymmetricExcept_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T>.Builder ToBuilder()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder
    /**
    Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.

    - Returns: The sorted set builder.

    */
    public func ToBuilder() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_Builder_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T__System_Collections_Immutable_Builder_T___ToBuilder_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_Builder_1(hndl : __return);
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)
    /**
    Searches the set for a given value and returns the equal value it finds, if any.

    - Parameter equalValue: The value to search for.
    - Parameter actualValue: The value from the set that the search found, or the original value if the search yielded no match.
    - Returns: A value indicating whether the search was successful.

    */
    public func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> Union(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})
    /**
    Adds a given set of items to this immutable sorted set.

    - Parameter other: The items to add.
    - Returns: The new set with the items added; or the original set if all the items were already in the set.

    */
    public func Union(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___Union_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> WithComparer(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})
    /**
    Returns the immutable sorted set that has the specified key comparer.

    - Parameter comparer: The comparer to check for.
    - Returns: The immutable sorted set that has the specified key comparer.

    */
    public func WithComparer(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Immutable_ImmutableSortedSet_T___WithComparer_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<T> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_System_Collections_Generic_IComparer_T___get_KeyComparer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] T get_Max()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.get_Max
    public func get_Max() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_T__get_Max_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Min()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.get_Min
    public func get_Min() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_T__get_Min_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    Gets the number of elements in the immutable sorted set.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether this immutable sorted set is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the comparer used to sort keys in the immutable sorted set.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IComparer_1<T> {
        get {
            return try! get_KeyComparer();
        }
    }
    /**
    Gets the maximum value in the immutable sorted set, as defined by the comparer.

    */
    public var Max : T {
        get {
            return try! get_Max();
        }
    }
    /**
    Gets the minimum value in the immutable sorted set, as defined by the comparer.

    */
    public var Min : T {
        get {
            return try! get_Min();
        }
    }
} // ImmutableSortedSet_1


// type: System.Collections.Immutable.ImmutableSortedSet`1+Builder
    /**
    Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableSortedSet_Builder_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableSortedSet_1_Builder_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Add(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)
    /**
    Adds an element to the current set and returns a value to indicate whether the element was successfully added.

    - Parameter item: The element to add to the set.
    - Returns: 
         if the element is added to the set;  if the element is already in the set

    */
    public func Add(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear
    /**
    Removes all elements from this set.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Builder_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)
    /**
    Determines whether the set contains the specified object.

    - Parameter item: The object to locate in the set.
    - Returns: 
         if  is found in the set; otherwise, .

    */
    public func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes the specified set of items from the current set.

    - Parameter other: The collection of items to remove from the set.
    */
    public func ExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Builder_void__ExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator
    /**
    Returns an enumerator that iterates through the set.

    - Returns: A enumerator that can be used to iterate through the set.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_System_Collections_Immutable_ImmutableSortedSet_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_Enumerator_1(hndl : __return);
        }
    }
    // void IntersectWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current set so that it contains only elements that are also in a specified collection.

    - Parameter other: The collection to compare to the current set.
    */
    public func IntersectWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Builder_void__IntersectWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a proper (strict) subset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper subset of ; otherwise, .

    */
    public func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a proper (strict) superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a proper superset of ; otherwise, .

    */
    public func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a subset of a specified collection.

    - Parameter other: The collection is compare to the current set.
    - Returns: 
         if the current set is a subset of ; otherwise, .

    */
    public func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set is a superset of a specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is a superset of ; otherwise, .

    */
    public func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set overlaps with the specified collection.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set and  share at least one common element; otherwise, .

    */
    public func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)
    /**
    Removes the first occurrence of the specified object from the set.

    - Parameter item: The object to remove from the set.
    - Returns: 
         if  was removed from the set;  if  was not found in the set.

    */
    public func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerable<T> Reverse()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse
    /**
    Returns an enumerator that iterates over the immutable sorted set in reverse order.

    - Returns: An enumerator that iterates over the set in reverse order.

    */
    public func Reverse() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_System_Collections_Generic_IEnumerable_T___Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current set and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current set.
    - Returns: 
         if the current set is equal to ; otherwise, .

    */
    public func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.

    - Parameter other: The collection to compare to the current set.
    */
    public func SymmetricExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Builder_void__SymmetricExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.TryGetValue(`0,`0@)
    /**
    Searches the set for a given value and returns the equal value it finds, if any.

    - Parameter equalValue: The value for which to search.
    - Parameter actualValue: The value from the set that the search found, or the original value if the search yielded no match.
    - Returns: A value indicating whether the search was successful.

    */
    public func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Immutable.ImmutableSortedSet<T> ToImmutable()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable
    /**
    Creates an immutable sorted set based on the contents of this instance.

    - Returns: An immutable set.

    */
    public func ToImmutable() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_System_Collections_Immutable_ImmutableSortedSet_T___ToImmutable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableSortedSet_1(hndl : __return);
        }
    }
    // void UnionWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.

    - Parameter other: The collection to compare to the current state.
    */
    public func UnionWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Builder_void__UnionWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<T> get_KeyComparer()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.get_KeyComparer
    public func get_KeyComparer() throws -> dotnet.System.Collections.Generic.IComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_System_Collections_Generic_IComparer_T___get_KeyComparer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeyComparer(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.set_KeyComparer(System.Collections.Generic.IComparer{`0})
    public func set_KeyComparer(value : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Builder_void__set_KeyComparer_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] T get_Max()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.get_Max
    public func get_Max() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_T__get_Max_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Min()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.get_Min
    public func get_Min() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_T__get_Min_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Builder_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    Gets the number of elements in the immutable sorted set.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets or sets the object that is used to determine equality for the values in the immutable sorted set.

    */
    public var KeyComparer : dotnet.System.Collections.Generic.IComparer_1<T> {
        get {
            return try! get_KeyComparer();
        }
        set(v) {
            return try! set_KeyComparer(value: v);
        }
    }
    /**
    Gets the maximum value in the immutable sorted set, as defined by the comparer.

    */
    public var Max : T {
        get {
            return try! get_Max();
        }
    }
    /**
    Gets the minimum value in the immutable sorted set, as defined by the comparer.

    */
    public var Min : T {
        get {
            return try! get_Min();
        }
    }
} // ImmutableSortedSet_Builder_1


// type: System.Collections.Immutable.ImmutableSortedSet`1+Enumerator
// boxed value type
    /**
    Enumerates the contents of a binary tree.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableSortedSet_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableSortedSet_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableSortedSet_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose
    /**
    Releases the resources used by the current instance of the  class.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the immutable sorted set.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the sorted set.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Immutable_ImmutableSortedSet_1_Enumerator_void__Reset_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableSortedSet_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableSortedSet_Enumerator_1


// type: System.Collections.Immutable.ImmutableStack
public struct ImmutableStack {
    // System.Collections.Immutable.ImmutableStack<T> CreateRange<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a new immutable stack that contains the specified items.

    - Parameter items: The items to add to the stack before it's immutable.
    - Returns: An immutable stack that contains the specified items.

    */
    public static func CreateRange<UT : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_System_Collections_Immutable_ImmutableStack_UT___CreateRange_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableStack<T> Create<T>()
    // System.Collections.Immutable.ImmutableStack<T> Create<T>(T)
// docid: M:System.Collections.Immutable.ImmutableStack.Create``1(``0)
    /**
    Creates a new immutable stack that contains the specified item.

    - Parameter item: The item to prepopulate the stack with.
    - Returns: A new immutable collection that contains the specified item.

    */
    public static func Create<UT : SGBridgeGenericValue>(item : UT) throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_System_Collections_Immutable_ImmutableStack_UT___Create_1__1__UT(UT.get_type_handle(), &__thrown, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Immutable.ImmutableStack<T> Create<T>(T[])
    // System.Collections.Immutable.IImmutableStack<T> Pop<T>(System.Collections.Immutable.IImmutableStack<T>, ref T)
// docid: M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)
    /**
    Removes the specified item from an immutable stack.

    - Parameter stack: The stack to modify.
    - Parameter value: The item to remove from the stack.
    - Returns: A stack; never .

    */
    public static func Pop<UT : SGBridgeGenericValue>(stack : dotnet.System.Collections.Immutable.IImmutableStack_1<UT>, value : inout UT) throws -> dotnet.System.Collections.Immutable.IImmutableStack_1<UT> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableStack_System_Collections_Immutable_IImmutableStack_UT___Pop_1__2__System_Collections_Immutable_IImmutableStack_UT__outUT(UT.get_type_handle(), &__thrown, stack.get_handle(), &_tmp_out_value);
            let _tmp2_value = UT(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.IImmutableStack_1(hndl : __return);
        }
    }
} // ImmutableStack


// type: System.Collections.Immutable.ImmutableStack`1
    /**
    Represents an immutable stack.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableStack_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableStack_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Immutable.ImmutableStack<T> Clear()
// docid: M:System.Collections.Immutable.ImmutableStack`1.Clear
    /**
    Removes all objects from the immutable stack.

    - Returns: An empty immutable stack.

    */
    public func Clear() throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_System_Collections_Immutable_ImmutableStack_T___Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableStack<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the immutable stack.

    - Returns: An enumerator that can be used to iterate through the stack.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Immutable.ImmutableStack_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_System_Collections_Immutable_ImmutableStack_T__System_Collections_Immutable_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_Enumerator_1(hndl : __return);
        }
    }
    // T Peek()
// docid: M:System.Collections.Immutable.ImmutableStack`1.Peek
    /**
    Returns the object at the top of the stack without removing it.

    - Returns: The object at the top of the stack.

    */
    public func Peek() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_T__Peek_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // System.Collections.Immutable.ImmutableStack<T> Pop()
// docid: M:System.Collections.Immutable.ImmutableStack`1.Pop
    /**
    Removes the element at the top of the immutable stack and returns the stack after the removal.

    - Returns: A stack; never .

    */
    public func Pop() throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_System_Collections_Immutable_ImmutableStack_T___Pop_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableStack<T> Pop(ref T)
// docid: M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)
    /**
    Removes the specified element from the immutable stack and returns the stack after the removal.

    - Parameter value: The value to remove from the stack.
    - Returns: A stack; never .

    */
    public func Pop(value : inout T) throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Immutable_ImmutableStack_1_System_Collections_Immutable_ImmutableStack_T___Pop_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_value);
            let _tmp2_value = T(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
    // System.Collections.Immutable.ImmutableStack<T> Push(T)
// docid: M:System.Collections.Immutable.ImmutableStack`1.Push(`0)
    /**
    Inserts an object at the top of the immutable stack and returns the new stack.

    - Parameter value: The object to push onto the stack.
    - Returns: The new stack.

    */
    public func Push(value : T) throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_System_Collections_Immutable_ImmutableStack_T___Push_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Immutable.ImmutableStack<T> get_Empty()
// docid: M:System.Collections.Immutable.ImmutableStack`1.get_Empty
    public class func get_Empty() throws -> dotnet.System.Collections.Immutable.ImmutableStack_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_System_Collections_Immutable_ImmutableStack_T___get_Empty_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Immutable.ImmutableStack_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Collections.Immutable.ImmutableStack`1.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_bool__get_IsEmpty_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets an empty immutable stack.

    */
    public static var Empty : dotnet.System.Collections.Immutable.ImmutableStack_1<T> {
        get {
            return try! get_Empty();
        }
    }
    /**
    Gets a value that indicates whether this instance of the immutable stack is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
} // ImmutableStack_1


// type: System.Collections.Immutable.ImmutableStack`1+Enumerator
// boxed value type
    /**
    Enumerates the contents of an immutable stack without allocating any memory.  
  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)

    */
public final class ImmutableStack_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Immutable_ImmutableStack_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Immutable_ImmutableStack_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the immutable stack.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the stack.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Immutable.ImmutableStack`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Immutable_ImmutableStack_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ImmutableStack_Enumerator_1


}


// System.Linq
extension System.Linq {
// type: System.Linq.ImmutableArrayExtensions
public struct ImmutableArrayExtensions {
    // T Aggregate<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,T,T>)
// docid: M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
    /**
    Applies a function to a sequence of elements in a cumulative way.

    - Parameter immutableArray: The collection to apply the function to.
    - Parameter func: A function to be invoked on each element, in a cumulative way.
    - Returns: The final value after the cumulative function has been applied to all elements.

    */
    public static func Aggregate<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, func_ : dotnet.System.Func_3<UT,UT,UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__Aggregate_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_UT_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, func_ : @escaping (UT, UT) throws -> UT) throws -> UT {
        let del_func_ = try dotnet.System.Func_3<UT,UT,UT>(func_);
        return try Aggregate(immutableArray: immutableArray, func_: del_func_);
    }
    // TAccumulate Aggregate<TAccumulate, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate,T,TAccumulate>)
// docid: M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
    /**
    Applies a function to a sequence of elements in a cumulative way.

    - Parameter immutableArray: The collection to apply the function to.
    - Parameter seed: The initial accumulator value.
    - Parameter func: A function to be invoked on each element, in a cumulative way.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTAccumulate : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,UT,UTAccumulate>) throws -> UTAccumulate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UTAccumulate__Aggregate_2__3__System_Collections_Immutable_ImmutableArray_UT__UTAccumulate_System_Func_UTAccumulate_UT_UTAccumulate_(UTAccumulate.get_type_handle(), UT.get_type_handle(), &__thrown, immutableArray.get_handle(), seed.to_gval(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTAccumulate(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTAccumulate : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, seed : UTAccumulate, func_ : @escaping (UTAccumulate, UT) throws -> UTAccumulate) throws -> UTAccumulate {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,UT,UTAccumulate>(func_);
        return try Aggregate(immutableArray: immutableArray, seed: seed, func_: del_func_);
    }
    // TResult Aggregate<TAccumulate, TResult, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate,T,TAccumulate>, System.Func<TAccumulate,TResult>)
// docid: M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
    /**
    Applies a function to a sequence of elements in a cumulative way.

    - Parameter immutableArray: The collection to apply the function to.
    - Parameter seed: The initial accumulator value.
    - Parameter func: A function to be invoked on each element, in a cumulative way.
    - Parameter resultSelector: 
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,UT,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UTResult__Aggregate_3__4__System_Collections_Immutable_ImmutableArray_UT__UTAccumulate_System_Func_UTAccumulate_UT_UTAccumulate__System_Func_UTAccumulate_UTResult_(UTAccumulate.get_type_handle(), UTResult.get_type_handle(), UT.get_type_handle(), &__thrown, immutableArray.get_handle(), seed.to_gval(), func_.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, seed : UTAccumulate, func_ : @escaping (UTAccumulate, UT) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,UT,UTAccumulate>(func_);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try Aggregate(immutableArray: immutableArray, seed: seed, func_: del_func_, resultSelector: del_resultSelector);
    }
    // bool All<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Gets a value indicating whether all elements in this array match a given condition.

    - Parameter immutableArray: The array to check for matches.
    - Parameter predicate: The predicate.
    - Returns: 
         if every element of the source sequence passes the test in the specified predicate; otherwise, .

    */
    public static func All<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__All_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func All<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try All(immutableArray: immutableArray, predicate: del_predicate);
    }
    // bool Any<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Gets a value indicating whether the array contains any elements.

    - Parameter immutableArray: The array to check for elements.
    - Returns: 
         if the array contains an elements; otherwise, .

    */
    public static func Any_<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__Any_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Any<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Gets a value indicating whether the array contains any elements that match a specified condition.

    - Parameter immutableArray: The array to check for elements.
    - Parameter predicate: The delegate that defines the condition to match to an element.
    - Returns: 
         if an element matches the specified condition; otherwise, .

    */
    public static func Any_<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__Any_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Any_<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try Any_(immutableArray: immutableArray, predicate: del_predicate);
    }
    // bool Any<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
// docid: M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public static func Any_<UT : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__Any_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UT_(UT.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // T ElementAtOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
// docid: M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
    /**
    Returns the element at a specified index in a sequence or a default value if the index is out of range.

    - Parameter immutableArray: The array to find an element in.
    - Parameter index: The index for the element to retrieve.
    - Returns: The item at the specified index, or the default value if the index is not found.

    */
    public static func ElementAtOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, index : Swift.Int32) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__ElementAtOrDefault_1__2__System_Collections_Immutable_ImmutableArray_UT__i32(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T ElementAt<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
// docid: M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
    /**
    Returns the element at a specified index in the array.

    - Parameter immutableArray: The array to find an element in.
    - Parameter index: The index for the element to retrieve.
    - Returns: The item at the specified index.

    */
    public static func ElementAt<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, index : Swift.Int32) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__ElementAt_1__2__System_Collections_Immutable_ImmutableArray_UT__i32(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Returns the first element of a sequence, or a default value if the sequence contains no elements.

    - Parameter immutableArray: The array to retrieve items from.
    - Returns: The first item in the list, if found; otherwise the default value for the item type.

    */
    public static func FirstOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__FirstOrDefault_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.

    - Parameter immutableArray: The array to retrieve elements from.
    - Parameter predicate: The delegate that defines the conditions of the element to search for.
    - Returns: The first item in the list, if found; otherwise the default value for the item type.

    */
    public static func FirstOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__FirstOrDefault_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func FirstOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> UT {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try FirstOrDefault(immutableArray: immutableArray, predicate: del_predicate);
    }
    // T FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
// docid: M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public static func FirstOrDefault<UT : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__FirstOrDefault_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UT_(UT.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T First<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Returns the first element in an array.

    - Parameter immutableArray: The array to get an item from.
    - Returns: The first item in the array.

    */
    public static func First<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__First_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T First<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Returns the first element in a sequence that satisfies a specified condition.

    - Parameter immutableArray: The array to get an item from.
    - Parameter predicate: The delegate that defines the conditions of the element to search for.
    - Returns: The first item in the list if it meets the condition specified by .

    */
    public static func First<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__First_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func First<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> UT {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try First(immutableArray: immutableArray, predicate: del_predicate);
    }
    // T First<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
// docid: M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public static func First<UT : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__First_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UT_(UT.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Returns the last element of a sequence, or a default value if the sequence contains no elements.

    - Parameter immutableArray: The array to retrieve items from.
    - Returns: The last element of a sequence, or a default value if the sequence contains no elements.

    */
    public static func LastOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__LastOrDefault_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.

    - Parameter immutableArray: The array to retrieve an element from.
    - Parameter predicate: The delegate that defines the conditions of the element to search for.
    - Returns: The last element of a sequence, or a default value if the sequence contains no elements.

    */
    public static func LastOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__LastOrDefault_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func LastOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> UT {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try LastOrDefault(immutableArray: immutableArray, predicate: del_predicate);
    }
    // T LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
// docid: M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public static func LastOrDefault<UT : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__LastOrDefault_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UT_(UT.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Last<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Returns the last element of the array.

    - Parameter immutableArray: The array to retrieve items from.
    - Returns: The last element in the array.

    */
    public static func Last<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__Last_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Last<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Returns the last element of a sequence that satisfies a specified condition.

    - Parameter immutableArray: The array to retrieve elements from.
    - Parameter predicate: The delegate that defines the conditions of the element to retrieve.
    - Returns: The last element of the array that satisfies the  condition.

    */
    public static func Last<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__Last_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func Last<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> UT {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try Last(immutableArray: immutableArray, predicate: del_predicate);
    }
    // T Last<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
// docid: M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})
    public static func Last<UT : SGBridgeGenericValue>(builder : dotnet.System.Collections.Immutable.ImmutableArray_Builder_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__Last_1__1__System_Collections_Immutable_ImmutableArray_T__System_Collections_Immutable_Builder_UT_(UT.get_type_handle(), &__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
// docid: M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    /**
    Projects each element of a sequence to an ,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.

    - Parameter immutableArray: The immutable array.
    - Parameter collectionSelector: A transform function to apply to each element of the input sequence.
    - Parameter resultSelector: A transform function to apply to each element of the intermediate sequence.
    - Returns: An  whose elements are the result             of invoking the one-to-many transform function  on each             element of  and then mapping each of those sequence elements and their             corresponding source element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, collectionSelector : dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<UTSource,UTCollection,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_IEnumerable_UTResult___SelectMany_3__3__System_Collections_Immutable_ImmutableArray_UTSource__System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection___System_Func_UTSource_UTCollection_UTResult_(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, immutableArray.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UTSource>, collectionSelector : @escaping (UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (UTSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTSource,UTCollection,UTResult>(resultSelector);
        return try SelectMany(immutableArray: immutableArray, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> Select<T, TResult>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TResult>)
// docid: M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
    /**
    Projects each element of a sequence into a new form.

    - Parameter immutableArray: The immutable array to select items from.
    - Parameter selector: A transform function to apply to each element.
    - Returns: An  whose elements are the result of invoking the transform function on each element of source.

    */
    public static func Select<UT : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, selector : dotnet.System.Func_2<UT,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_IEnumerable_UTResult___Select_2__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_UTResult_(UT.get_type_handle(), UTResult.get_type_handle(), &__thrown, immutableArray.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UT : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, selector : @escaping (UT) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UT,UTResult>(selector);
        return try Select(immutableArray: immutableArray, selector: del_selector);
    }
    // bool SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Generic.IEnumerable<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
// docid: M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Determines whether two sequences are equal according to an equality comparer.

    - Parameter immutableArray: The array to use for comparison.
    - Parameter items: The items to use for comparison.
    - Parameter comparer: The comparer to use to check for equality.
    - Returns: 
         to indicate the sequences are equal; otherwise, .

    */
    public static func SequenceEqual<UTDerived : SGBridgeGenericValue,UTBase : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UTBase>, items : dotnet.System.Collections.Generic.IEnumerable_1<UTDerived>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTBase>/* TODO default closedgeneric crash */) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__SequenceEqual_2__3__System_Collections_Immutable_ImmutableArray_UTBase__System_Collections_Generic_IEnumerable_UTDerived__System_Collections_Generic_IEqualityComparer_UTBase_(UTDerived.get_type_handle(), UTBase.get_type_handle(), &__thrown, immutableArray.get_handle(), items.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
// docid: M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Determines whether two sequences are equal according to an equality comparer.

    - Parameter immutableArray: The array to use for comparison.
    - Parameter items: The items to use for comparison.
    - Parameter comparer: The comparer to use to check for equality.
    - Returns: 
         to indicate the sequences are equal; otherwise, .

    */
    public static func SequenceEqual<UTDerived : SGBridgeGenericValue,UTBase : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UTBase>, items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTBase>/* TODO default closedgeneric crash */) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__SequenceEqual_2__3__System_Collections_Immutable_ImmutableArray_UTBase__System_Collections_Immutable_ImmutableArray_UTDerived__System_Collections_Generic_IEqualityComparer_UTBase_(UTDerived.get_type_handle(), UTBase.get_type_handle(), &__thrown, immutableArray.get_handle(), items.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Func<TBase,TBase,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
    /**
    Determines whether two sequences are equal according to an equality comparer.

    - Parameter immutableArray: The array to use for comparison.
    - Parameter items: The items to use for comparison.
    - Parameter predicate: The comparer to use to check for equality.
    - Returns: 
         to indicate the sequences are equal; otherwise, .

    */
    public static func SequenceEqual<UTDerived : SGBridgeGenericValue,UTBase : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UTBase>, items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>, predicate : dotnet.System.Func_3<UTBase,UTBase,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_bool__SequenceEqual_2__3__System_Collections_Immutable_ImmutableArray_UTBase__System_Collections_Immutable_ImmutableArray_UTDerived__System_Func_UTBase_UTBase_bool_(UTDerived.get_type_handle(), UTBase.get_type_handle(), &__thrown, immutableArray.get_handle(), items.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func SequenceEqual<UTDerived : SGBridgeGenericValue,UTBase : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UTBase>, items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>, predicate : @escaping (UTBase, UTBase) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_3<UTBase,UTBase,Swift.Bool>(predicate);
        return try SequenceEqual(immutableArray: immutableArray, items: items, predicate: del_predicate);
    }
    // T SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.

    - Parameter immutableArray: The array.
    - Returns: The element in the array, or the default value if the array is empty.

    */
    public static func SingleOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__SingleOrDefault_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.

    - Parameter immutableArray: The array to get the element from.
    - Parameter predicate: The condition the element must satisfy.
    - Returns: The element if it satisfies the specified condition; otherwise the default element.

    */
    public static func SingleOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__SingleOrDefault_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func SingleOrDefault<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> UT {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try SingleOrDefault(immutableArray: immutableArray, predicate: del_predicate);
    }
    // T Single<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.

    - Parameter immutableArray: The array to retrieve the element from.
    - Returns: The element in the sequence.

    */
    public static func Single<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__Single_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Single<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.

    - Parameter immutableArray: 
    - Parameter predicate: 
    - Returns: Returns .

    */
    public static func Single<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UT__Single_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    public static func Single<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> UT {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try Single(immutableArray: immutableArray, predicate: del_predicate);
    }
    // T[] ToArray<T>(System.Collections.Immutable.ImmutableArray<T>)
// docid: M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
    /**
    Copies the contents of this array to a mutable array.

    - Parameter immutableArray: 
    - Returns: The newly instantiated array.

    */
    public static func ToArray<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>) throws -> dotnet.System_Arr<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_UTArray__ToArray_1__1__System_Collections_Immutable_ImmutableArray_UT_(UT.get_type_handle(), &__thrown, immutableArray.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<UT>(hndl : __return);
        }
    }
    // System.Collections.Generic.Dictionary<TKey,T> ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>)
// docid: M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
    /**
    Creates a dictionary based on the contents of this array.

    - Parameter immutableArray: The array to create a dictionary from.
    - Parameter keySelector: The key selector.
    - Returns: The newly initialized dictionary.

    */
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : dotnet.System.Func_2<UT,UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_Dictionary_UTKey_UT___ToDictionary_2__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_UTKey_(UTKey.get_type_handle(), UT.get_type_handle(), &__thrown, immutableArray.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : @escaping (UT) throws -> UTKey) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UT> {
        let del_keySelector = try dotnet.System.Func_2<UT,UTKey>(keySelector);
        return try ToDictionary(immutableArray: immutableArray, keySelector: del_keySelector);
    }
    // System.Collections.Generic.Dictionary<TKey,T> ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Creates a dictionary based on the contents of this array.

    - Parameter immutableArray: The array to create a dictionary from.
    - Parameter keySelector: The key selector.
    - Parameter comparer: The comparer to initialize the dictionary with.
    - Returns: The newly initialized dictionary.

    */
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : dotnet.System.Func_2<UT,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_Dictionary_UTKey_UT___ToDictionary_2__3__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTKey.get_type_handle(), UT.get_type_handle(), &__thrown, immutableArray.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : @escaping (UT) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UT> {
        let del_keySelector = try dotnet.System.Func_2<UT,UTKey>(keySelector);
        return try ToDictionary(immutableArray: immutableArray, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>, System.Func<T,TElement>)
// docid: M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
    /**
    Creates a dictionary based on the contents of this array.

    - Parameter immutableArray: The array to create a dictionary from.
    - Parameter keySelector: The key selector.
    - Parameter elementSelector: The element selector.
    - Returns: The newly initialized dictionary.

    */
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : dotnet.System.Func_2<UT,UTKey>, elementSelector : dotnet.System.Func_2<UT,UTElement>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_Dictionary_UTKey_UTElement___ToDictionary_3__3__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_UTKey__System_Func_UT_UTElement_(UTKey.get_type_handle(), UTElement.get_type_handle(), UT.get_type_handle(), &__thrown, immutableArray.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : @escaping (UT) throws -> UTKey, elementSelector : @escaping (UT) throws -> UTElement) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UT,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UT,UTElement>(elementSelector);
        return try ToDictionary(immutableArray: immutableArray, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>, System.Func<T,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Creates a dictionary based on the contents of this array.

    - Parameter immutableArray: The array to create a dictionary from.
    - Parameter keySelector: The key selector.
    - Parameter elementSelector: The element selector.
    - Parameter comparer: The comparer to initialize the dictionary with.
    - Returns: The newly initialized dictionary.

    */
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : dotnet.System.Func_2<UT,UTKey>, elementSelector : dotnet.System.Func_2<UT,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_Dictionary_UTKey_UTElement___ToDictionary_3__4__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_UTKey__System_Func_UT_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTKey.get_type_handle(), UTElement.get_type_handle(), UT.get_type_handle(), &__thrown, immutableArray.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, keySelector : @escaping (UT) throws -> UTKey, elementSelector : @escaping (UT) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UT,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UT,UTElement>(elementSelector);
        return try ToDictionary(immutableArray: immutableArray, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<T> Where<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
// docid: M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
    /**
    Filters a sequence of values based on a predicate.

    - Parameter immutableArray: The array to filter.
    - Parameter predicate: The condition to use for filtering the array content.
    - Returns: Returns  that contains elements that meet the condition.

    */
    public static func Where<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : dotnet.System.Func_2<UT,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ImmutableArrayExtensions_System_Collections_Generic_IEnumerable_UT___Where_1__2__System_Collections_Immutable_ImmutableArray_UT__System_Func_UT_bool_(UT.get_type_handle(), &__thrown, immutableArray.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UT : SGBridgeGenericValue>(immutableArray : dotnet.System.Collections.Immutable.ImmutableArray_1<UT>, predicate : @escaping (UT) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UT> {
        let del_predicate = try dotnet.System.Func_2<UT,Swift.Bool>(predicate);
        return try Where(immutableArray: immutableArray, predicate: del_predicate);
    }
} // ImmutableArrayExtensions


}


public protocol System_Collections_Immutable_IImmutableDictionary_2
    :
    System_Collections_Generic_IReadOnlyDictionary_2
    where
        TKey_IReadOnlyDictionary_2 == TKey_IImmutableDictionary_2,
        TValue_IReadOnlyDictionary_2 == TValue_IImmutableDictionary_2
{
    associatedtype TKey_IImmutableDictionary_2;
    associatedtype TValue_IImmutableDictionary_2;
}

public protocol System_Collections_Immutable_IImmutableList_1
    :
    System_Collections_Generic_IReadOnlyList_1
    where
        T_IReadOnlyList_1 == T_IImmutableList_1
{
    associatedtype T_IImmutableList_1;
}

public protocol System_Collections_Immutable_IImmutableQueue_1
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == T_IImmutableQueue_1
{
    associatedtype T_IImmutableQueue_1;
}

public protocol System_Collections_Immutable_IImmutableSet_1
    :
    System_Collections_Generic_IReadOnlyCollection_1
    where
        T_IReadOnlyCollection_1 == T_IImmutableSet_1
{
    associatedtype T_IImmutableSet_1;
}

public protocol System_Collections_Immutable_IImmutableStack_1
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == T_IImmutableStack_1
{
    associatedtype T_IImmutableStack_1;
}

// EXTENSION METHOD System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32, System.Int32, T)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func BinarySearch(index : Swift.Int32, length : Swift.Int32, value : T) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableArray.BinarySearch(array: self, index: index, length: length, value: value);
    }
}

// EXTENSION METHOD System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func BinarySearch(index : Swift.Int32, length : Swift.Int32, value : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableArray.BinarySearch(array: self, index: index, length: length, value: value, comparer: comparer);
    }
}

// EXTENSION METHOD System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, T)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func BinarySearch(value : T) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableArray.BinarySearch(array: self, value: value);
    }
}

// EXTENSION METHOD System.Int32 BinarySearch<T>(System.Collections.Immutable.ImmutableArray<T>, T, System.Collections.Generic.IComparer<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func BinarySearch(value : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableArray.BinarySearch(array: self, value: value, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableArray<TSource> ToImmutableArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableArray() throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableArray.ToImmutableArray(items: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableArray<TSource> ToImmutableArray<TSource>(System.Collections.Immutable.ImmutableArray<TSource>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableArray_Builder_1 {
    public func ToImmutableArray() throws -> dotnet.System.Collections.Immutable.ImmutableArray_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableArray.ToImmutableArray(builder: self);
    }
}

// EXTENSION METHOD bool Contains<TKey, TValue>(System.Collections.Immutable.IImmutableDictionary<TKey,TValue>, TKey, TValue)
extension dotnet.System.Collections.Immutable.IImmutableDictionary_2 {
    public func Contains(key : TKey, value : TValue) throws -> Bool {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.Contains(map: self, key: key, value: value);
    }
}

// EXTENSION METHOD TValue GetValueOrDefault<TKey, TValue>(System.Collections.Immutable.IImmutableDictionary<TKey,TValue>, TKey)
extension dotnet.System.Collections.Immutable.IImmutableDictionary_2 {
    public func GetValueOrDefault(key : TKey) throws -> TValue {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault(dictionary: self, key: key);
    }
}

// EXTENSION METHOD TValue GetValueOrDefault<TKey, TValue>(System.Collections.Immutable.IImmutableDictionary<TKey,TValue>, TKey, TValue)
extension dotnet.System.Collections.Immutable.IImmutableDictionary_2 {
    public func GetValueOrDefault(key : TKey, defaultValue : TValue) throws -> TValue {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault(dictionary: self, key: key, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> where T == dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> where T == dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keyComparer: keyComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> where T == dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keyComparer: keyComparer, valueComparer: valueComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TSource> ToImmutableDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,T> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TSource> ToImmutableDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,T> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: keySelector, keyComparer: keyComparer);
    }
    // delegate closure overload
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: del_keySelector, keyComparer: keyComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TKey, TValue>(System.Collections.Immutable.ImmutableDictionary<TKey,TValue>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableDictionary_Builder_2 {
    public func ToImmutableDictionary() throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<TKey,TValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(builder: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTValue) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTValue>(elementSelector);
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTValue>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector, keyComparer: keyComparer);
    }
    // delegate closure overload
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTValue>(elementSelector);
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableDictionary<TKey,TValue> ToImmutableDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTValue>, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector, keyComparer: keyComparer, valueComparer: valueComparer);
    }
    // delegate closure overload
    public func ToImmutableDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTValue>(elementSelector);
        return try dotnet.System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer, valueComparer: valueComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableHashSet() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet(source: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableHashSet(equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet(source: self, equalityComparer: equalityComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(System.Collections.Immutable.ImmutableHashSet<TSource>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableHashSet_Builder_1 {
    public func ToImmutableHashSet() throws -> dotnet.System.Collections.Immutable.ImmutableHashSet_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet(builder: self);
    }
}

// EXTENSION METHOD System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func IndexOf(item : T) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.IndexOf(list: self, item: item);
    }
}

// EXTENSION METHOD System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Collections.Generic.IEqualityComparer<T>)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func IndexOf(item : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.IndexOf(list: self, item: item, equalityComparer: equalityComparer);
    }
}

// EXTENSION METHOD System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func IndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.IndexOf(list: self, item: item, startIndex: startIndex);
    }
}

// EXTENSION METHOD System.Int32 IndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32, System.Int32)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func IndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.IndexOf(list: self, item: item, startIndex: startIndex, count: count);
    }
}

// EXTENSION METHOD System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func LastIndexOf(item : T) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.LastIndexOf(list: self, item: item);
    }
}

// EXTENSION METHOD System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Collections.Generic.IEqualityComparer<T>)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func LastIndexOf(item : T, equalityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.LastIndexOf(list: self, item: item, equalityComparer: equalityComparer);
    }
}

// EXTENSION METHOD System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func LastIndexOf(item : T, startIndex : Swift.Int32) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.LastIndexOf(list: self, item: item, startIndex: startIndex);
    }
}

// EXTENSION METHOD System.Int32 LastIndexOf<T>(System.Collections.Immutable.IImmutableList<T>, T, System.Int32, System.Int32)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func LastIndexOf(item : T, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        return try dotnet.System.Collections.Immutable.ImmutableList.LastIndexOf(list: self, item: item, startIndex: startIndex, count: count);
    }
}

// EXTENSION METHOD System.Collections.Immutable.IImmutableList<T> RemoveRange<T>(System.Collections.Immutable.IImmutableList<T>, System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func RemoveRange(items : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableList.RemoveRange(list: self, items: items);
    }
}

// EXTENSION METHOD System.Collections.Immutable.IImmutableList<T> Remove<T>(System.Collections.Immutable.IImmutableList<T>, T)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func Remove(value : T) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableList.Remove(list: self, value: value);
    }
}

// EXTENSION METHOD System.Collections.Immutable.IImmutableList<T> Replace<T>(System.Collections.Immutable.IImmutableList<T>, T, T)
extension dotnet.System.Collections.Immutable.IImmutableList_1 {
    public func Replace(oldValue : T, newValue : T) throws -> dotnet.System.Collections.Immutable.IImmutableList_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableList.Replace(list: self, oldValue: oldValue, newValue: newValue);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableList<TSource> ToImmutableList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableList() throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableList.ToImmutableList(source: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableList<TSource> ToImmutableList<TSource>(System.Collections.Immutable.ImmutableList<TSource>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableList_Builder_1 {
    public func ToImmutableList() throws -> dotnet.System.Collections.Immutable.ImmutableList_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableList.ToImmutableList(builder: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.IImmutableQueue<T> Dequeue<T>(System.Collections.Immutable.IImmutableQueue<T>, ref T)
extension dotnet.System.Collections.Immutable.IImmutableQueue_1 {
    public func Dequeue(value : inout T) throws -> dotnet.System.Collections.Immutable.IImmutableQueue_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableQueue.Dequeue(queue: self, value: &value);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> where T == dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> where T == dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keyComparer: keyComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> where T == dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keyComparer: keyComparer, valueComparer: valueComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TKey, TValue>(System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableSortedDictionary_Builder_2 {
    public func ToImmutableSortedDictionary() throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<TKey,TValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(builder: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTValue) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTValue>(elementSelector);
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTValue>, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector, keyComparer: keyComparer);
    }
    // delegate closure overload
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTValue>(elementSelector);
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedDictionary<TKey,TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TValue>, System.Collections.Generic.IComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTValue>, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector, keyComparer: keyComparer, valueComparer: valueComparer);
    }
    // delegate closure overload
    public func ToImmutableSortedDictionary<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTValue, keyComparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, valueComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTValue>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedDictionary_2<UTKey,UTValue> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTValue>(elementSelector);
        return try dotnet.System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, keyComparer: keyComparer, valueComparer: valueComparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedSet() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet(source: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToImmutableSortedSet(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(System.Collections.Immutable.ImmutableSortedSet<TSource>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableSortedSet_Builder_1 {
    public func ToImmutableSortedSet() throws -> dotnet.System.Collections.Immutable.ImmutableSortedSet_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet(builder: self);
    }
}

// EXTENSION METHOD System.Collections.Immutable.IImmutableStack<T> Pop<T>(System.Collections.Immutable.IImmutableStack<T>, ref T)
extension dotnet.System.Collections.Immutable.IImmutableStack_1 {
    public func Pop(value : inout T) throws -> dotnet.System.Collections.Immutable.IImmutableStack_1<T> {
        return try dotnet.System.Collections.Immutable.ImmutableStack.Pop(stack: self, value: &value);
    }
}

// EXTENSION METHOD T Aggregate<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,T,T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Aggregate(func_ : dotnet.System.Func_3<T,T,T>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Aggregate(immutableArray: self, func_: func_);
    }
    // delegate closure overload
    public func Aggregate(func_ : @escaping (T, T) throws -> T) throws -> T {
        let del_func_ = try dotnet.System.Func_3<T,T,T>(func_);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Aggregate(immutableArray: self, func_: del_func_);
    }
}

// EXTENSION METHOD TAccumulate Aggregate<TAccumulate, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate,T,TAccumulate>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>) throws -> UTAccumulate {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Aggregate(immutableArray: self, seed: seed, func_: func_);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : @escaping (UTAccumulate, T) throws -> UTAccumulate) throws -> UTAccumulate {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>(func_);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Aggregate(immutableArray: self, seed: seed, func_: del_func_);
    }
}

// EXTENSION METHOD TResult Aggregate<TAccumulate, TResult, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate,T,TAccumulate>, System.Func<TAccumulate,TResult>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Aggregate(immutableArray: self, seed: seed, func_: func_, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : @escaping (UTAccumulate, T) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>(func_);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Aggregate(immutableArray: self, seed: seed, func_: del_func_, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD bool All<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func All(predicate : dotnet.System.Func_2<T,Bool>) throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.All(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func All(predicate : @escaping (T) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.All(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD bool Any<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Any_() throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Any_(immutableArray: self);
    }
}

// EXTENSION METHOD bool Any<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Any_(predicate : dotnet.System.Func_2<T,Bool>) throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Any_(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func Any_(predicate : @escaping (T) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Any_(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD bool Any<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableArray_Builder_1 {
    public func Any_() throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Any_(builder: self);
    }
}

// EXTENSION METHOD T ElementAtOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ElementAtOrDefault(index : Swift.Int32) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ElementAtOrDefault(immutableArray: self, index: index);
    }
}

// EXTENSION METHOD T ElementAt<T>(System.Collections.Immutable.ImmutableArray<T>, System.Int32)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ElementAt(index : Swift.Int32) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ElementAt(immutableArray: self, index: index);
    }
}

// EXTENSION METHOD T FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func FirstOrDefault() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.FirstOrDefault(immutableArray: self);
    }
}

// EXTENSION METHOD T FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func FirstOrDefault(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.FirstOrDefault(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func FirstOrDefault(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.FirstOrDefault(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD T FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableArray_Builder_1 {
    public func FirstOrDefault() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.FirstOrDefault(builder: self);
    }
}

// EXTENSION METHOD T First<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func First() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.First(immutableArray: self);
    }
}

// EXTENSION METHOD T First<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func First(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.First(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func First(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.First(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD T First<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableArray_Builder_1 {
    public func First() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.First(builder: self);
    }
}

// EXTENSION METHOD T LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func LastOrDefault() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.LastOrDefault(immutableArray: self);
    }
}

// EXTENSION METHOD T LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func LastOrDefault(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.LastOrDefault(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func LastOrDefault(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.LastOrDefault(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD T LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableArray_Builder_1 {
    public func LastOrDefault() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.LastOrDefault(builder: self);
    }
}

// EXTENSION METHOD T Last<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Last() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Last(immutableArray: self);
    }
}

// EXTENSION METHOD T Last<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Last(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Last(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func Last(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Last(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD T Last<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
extension dotnet.System.Collections.Immutable.ImmutableArray_Builder_1 {
    public func Last() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Last(builder: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<T,UTCollection,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.SelectMany(immutableArray: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : @escaping (T) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (T, UTCollection) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<T,UTCollection,UTResult>(resultSelector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.SelectMany(immutableArray: self, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Select<T, TResult>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TResult>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<T,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Select(immutableArray: self, selector: selector);
    }
    // delegate closure overload
    public func Select<UTResult : SGBridgeGenericValue>(selector : @escaping (T) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<T,UTResult>(selector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Select(immutableArray: self, selector: del_selector);
    }
}

// EXTENSION METHOD bool SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Generic.IEnumerable<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func SequenceEqual<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Generic.IEnumerable_1<UTDerived>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>/* TODO default closedgeneric crash */) throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.SequenceEqual(immutableArray: self, items: items, comparer: comparer);
    }
}

// EXTENSION METHOD bool SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func SequenceEqual<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>/* TODO default closedgeneric crash */) throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.SequenceEqual(immutableArray: self, items: items, comparer: comparer);
    }
}

// EXTENSION METHOD bool SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Func<TBase,TBase,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func SequenceEqual<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>, predicate : dotnet.System.Func_3<T,T,Bool>) throws -> Bool {
        return try dotnet.System.Linq.ImmutableArrayExtensions.SequenceEqual(immutableArray: self, items: items, predicate: predicate);
    }
    // delegate closure overload
    public func SequenceEqual<UTDerived : SGBridgeGenericValue>(items : dotnet.System.Collections.Immutable.ImmutableArray_1<UTDerived>, predicate : @escaping (T, T) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_3<T,T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.SequenceEqual(immutableArray: self, items: items, predicate: del_predicate);
    }
}

// EXTENSION METHOD T SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func SingleOrDefault() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.SingleOrDefault(immutableArray: self);
    }
}

// EXTENSION METHOD T SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func SingleOrDefault(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.SingleOrDefault(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func SingleOrDefault(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.SingleOrDefault(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD T Single<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Single() throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Single(immutableArray: self);
    }
}

// EXTENSION METHOD T Single<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Single(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Single(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func Single(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Single(immutableArray: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD T[] ToArray<T>(System.Collections.Immutable.ImmutableArray<T>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ToArray() throws -> dotnet.System_Arr<T> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToArray(immutableArray: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,T> ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,T> ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>, System.Func<T,TElement>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,TKey>, System.Func<T,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.ImmutableArrayExtensions.ToDictionary(immutableArray: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<T> Where<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T,bool>)
extension dotnet.System.Collections.Immutable.ImmutableArray_1 {
    public func Where(predicate : dotnet.System.Func_2<T,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.ImmutableArrayExtensions.Where(immutableArray: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.ImmutableArrayExtensions.Where(immutableArray: self, predicate: del_predicate);
    }
}

