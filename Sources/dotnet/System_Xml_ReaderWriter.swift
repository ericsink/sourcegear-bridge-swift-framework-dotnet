// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Xml
extension System.Xml {
// type: System.Xml.ConformanceLevel
    /**
    Specifies the amount of input or output checking that  and  objects perform.

    */
public struct ConformanceLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_ConformanceLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.ConformanceLevel Auto
    /**
    The  or  object automatically detects whether document-level or fragment-level checking should be performed, and does the appropriate checking. If you're wrapping another  or  object, the outer object doesn't do any additional conformance checking. Conformance checking is left up to the underlying object.  
  
 See the  and  properties for details on how the compliance level is determined.

    */
    public static var Auto : dotnet.System.Xml.ConformanceLevel {
        get {
        let __return = dotnet.System.Xml.ConformanceLevel(val: System_Xml_ConformanceLevel_get_Auto());
            return __return;
        }
    }
    // static field: System.Xml.ConformanceLevel Fragment
    /**
    The XML data is a well-formed XML fragment, as defined by the W3C.  This conformance level represents an XML document that might not have a root element but is otherwise well-formed. This level of checking ensures that the stream being read or written can be consumed by any processor as an XML 1.0 external parsed entity].

    */
    public static var Fragment : dotnet.System.Xml.ConformanceLevel {
        get {
        let __return = dotnet.System.Xml.ConformanceLevel(val: System_Xml_ConformanceLevel_get_Fragment());
            return __return;
        }
    }
    // static field: System.Xml.ConformanceLevel Document
    /**
    The XML data complies with the rules for a well-formed XML 1.0 document, as defined by the W3C. This level of checking ensures that the stream being read or written can be consumed by any processor as an XML 1.0 document.

    */
    public static var Document : dotnet.System.Xml.ConformanceLevel {
        get {
        let __return = dotnet.System.Xml.ConformanceLevel(val: System_Xml_ConformanceLevel_get_Document());
            return __return;
        }
    }
} // ConformanceLevel


// type: System.Xml.DtdProcessing
    /**
    Specifies the options for processing DTDs. The  enumeration is used by the  class.

    */
public struct DtdProcessing : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_DtdProcessing_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.DtdProcessing Prohibit
    /**
    Specifies that when a DTD is encountered, an  is thrown with a message that states that DTDs are prohibited. This is the default behavior.

    */
    public static var Prohibit : dotnet.System.Xml.DtdProcessing {
        get {
        let __return = dotnet.System.Xml.DtdProcessing(val: System_Xml_DtdProcessing_get_Prohibit());
            return __return;
        }
    }
    // static field: System.Xml.DtdProcessing Ignore
    /**
    Causes the DOCTYPE element to be ignored. No DTD processing occurs, and the DTD/DOCTYPE is lost on output.

    */
    public static var Ignore : dotnet.System.Xml.DtdProcessing {
        get {
        let __return = dotnet.System.Xml.DtdProcessing(val: System_Xml_DtdProcessing_get_Ignore());
            return __return;
        }
    }
    // static field: System.Xml.DtdProcessing Parse
    /**
    Used for parsing DTDs.

    */
    public static var Parse : dotnet.System.Xml.DtdProcessing {
        get {
        let __return = dotnet.System.Xml.DtdProcessing(val: System_Xml_DtdProcessing_get_Parse());
            return __return;
        }
    }
} // DtdProcessing


// type: System.Xml.EntityHandling
    /**
    Specifies how the  or  handle entities.

    */
public struct EntityHandling : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_EntityHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.EntityHandling ExpandEntities
    /**
    Expands all entities and returns the expanded nodes.
        
 nodes are not returned. The entity text is expanded in place of the entity references.

    */
    public static var ExpandEntities : dotnet.System.Xml.EntityHandling {
        get {
        let __return = dotnet.System.Xml.EntityHandling(val: System_Xml_EntityHandling_get_ExpandEntities());
            return __return;
        }
    }
    // static field: System.Xml.EntityHandling ExpandCharEntities
    /**
    Expands character entities and returns general entities as  nodes. 
        
You must call  to see what the general entities expand to. This enables you to optimize entity handling by only expanding the entity the first time it is used.  
  
When set to , a reader call to the  method expands all entities (both general and character entities).

    */
    public static var ExpandCharEntities : dotnet.System.Xml.EntityHandling {
        get {
        let __return = dotnet.System.Xml.EntityHandling(val: System_Xml_EntityHandling_get_ExpandCharEntities());
            return __return;
        }
    }
} // EntityHandling


// type: System.Xml.Formatting
    /**
    Specifies formatting options for the .

    */
public struct Formatting : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Formatting_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Formatting None
    /**
    No special formatting is applied. This is the default.

    */
    public static var None : dotnet.System.Xml.Formatting {
        get {
        let __return = dotnet.System.Xml.Formatting(val: System_Xml_Formatting_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Formatting Indented
    /**
    Causes child elements to be indented according to the  and  settings.

This option indents element content only; mixed content is not affected. For the XML 1.0 definitions of these terms, see the World Wide Web Consortium (W3C) documentation Element Content and Mixed Content.

    */
    public static var Indented : dotnet.System.Xml.Formatting {
        get {
        let __return = dotnet.System.Xml.Formatting(val: System_Xml_Formatting_get_Indented());
            return __return;
        }
    }
} // Formatting


// type: System.Xml.IApplicationResourceStreamResolver
    /**
    Represents an application resource stream resolver.

    */
open class IApplicationResourceStreamResolver
    :
    SGBridgeGenericValue,
    System_Xml_IApplicationResourceStreamResolver
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IApplicationResourceStreamResolver_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.Stream GetApplicationResourceStream(System.Uri)
// docid: M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)
    /**
    Returns an application resource stream from the specified URI.

    - Parameter relativeUri: The relative URI.
    - Returns: An application resource stream.

    */
    open func GetApplicationResourceStream(relativeUri : dotnet.System.Uri) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IApplicationResourceStreamResolver_Stream__GetApplicationResourceStream_0__1__Uri(&__thrown, self.get_handle(), relativeUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
} // IApplicationResourceStreamResolver


// type: System.Xml.IHasXmlNode
    /**
    Enables a class to return an  from the current context or position.

    */
open class IHasXmlNode
    :
    SGBridgeGenericValue,
    System_Xml_IHasXmlNode
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IHasXmlNode_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Xml.XmlNode GetNode()
// docid: M:System.Xml.IHasXmlNode.GetNode
    /**
    Returns the  for the current position.

    - Returns: The  for the current position.

    */
    open func GetNode() throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IHasXmlNode_XmlNode__GetNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
} // IHasXmlNode


// type: System.Xml.IXmlLineInfo
    /**
    Provides an interface to enable a class to return line and position information.

    */
open class IXmlLineInfo
    :
    SGBridgeGenericValue,
    System_Xml_IXmlLineInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlLineInfo_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool HasLineInfo()
// docid: M:System.Xml.IXmlLineInfo.HasLineInfo
    /**
    Gets a value indicating whether the class can return line information.

    - Returns: 
         if  and  can be provided; otherwise, .

    */
    open func HasLineInfo() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IXmlLineInfo_bool__HasLineInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.IXmlLineInfo.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IXmlLineInfo_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.IXmlLineInfo.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IXmlLineInfo_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IXmlLineInfo


// type: System.Xml.IXmlNamespaceResolver
    /**
    Provides read-only access to a set of prefix and namespace mappings.

    */
open class IXmlNamespaceResolver
    :
    SGBridgeGenericValue,
    System_Xml_IXmlNamespaceResolver
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlNamespaceResolver_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IDictionary<System.String,System.String> GetNamespacesInScope(System.Xml.XmlNamespaceScope)
// docid: M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    /**
    Gets a collection of defined prefix-namespace mappings that are currently in scope.

    - Parameter scope: An  value that specifies the type of namespace nodes to return.
    - Returns: An  that contains the current in-scope namespaces.

    */
    open func GetNamespacesInScope(scope : dotnet.System.Xml.XmlNamespaceScope) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IXmlNamespaceResolver_System_Collections_Generic_IDictionary_string_string___GetNamespacesInScope_0__1__XmlNamespaceScope(&__thrown, self.get_handle(), scope.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
    /**
    Gets the namespace URI mapped to the specified prefix.

    - Parameter prefix: The prefix whose namespace URI you wish to find.
    - Returns: The namespace URI that is mapped to the prefix;  if the prefix is not mapped to a namespace URI.

    */
    open func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IXmlNamespaceResolver_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String LookupPrefix(System.String)
// docid: M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
    /**
    Gets the prefix that is mapped to the specified namespace URI.

    - Parameter namespaceName: The namespace URI whose prefix you wish to find.
    - Returns: The prefix that is mapped to the namespace URI;  if the namespace URI is not mapped to a prefix.

    */
    open func LookupPrefix(namespaceName : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IXmlNamespaceResolver_String__LookupPrefix_0__1__String(&__thrown, self.get_handle(), namespaceName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IXmlNamespaceResolver


// type: System.Xml.NameTable
    /**
    Implements a single-threaded .

    */
open class NameTable
    :
    dotnet.System.Xml.XmlNameTable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_NameTable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.NameTable.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_NameTable_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Add(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)
    /**
    Atomizes the specified string and adds it to the .

    - Parameter key: The character array containing the string to add.
    - Parameter start: The zero-based index into the array specifying the first character of the string.
    - Parameter len: The number of characters in the string.
    - Returns: The atomized string or the existing string if one already exists in the . If  is zero, String.Empty is returned.

    */
    open func Add(key : dotnet.System_Arr<dotnet.System.Char>, start : Swift.Int32, len : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_NameTable_String__Add_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), key.get_handle(), start, len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Add(System.String)
// docid: M:System.Xml.NameTable.Add(System.String)
    /**
    Atomizes the specified string and adds it to the .

    - Parameter key: The string to add.
    - Returns: The atomized string or the existing string if it already exists in the .

    */
    open func Add(key : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_NameTable_String__Add_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Get(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)
    /**
    Gets the atomized string containing the same characters as the specified range of characters in the given array.

    - Parameter key: The character array containing the name to find.
    - Parameter start: The zero-based index into the array specifying the first character of the name.
    - Parameter len: The number of characters in the name.
    - Returns: The atomized string or  if the string has not already been atomized. If  is zero, String.Empty is returned.

    */
    open func Get(key : dotnet.System_Arr<dotnet.System.Char>, start : Swift.Int32, len : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_NameTable_String__Get_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), key.get_handle(), start, len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Get(System.String)
// docid: M:System.Xml.NameTable.Get(System.String)
    /**
    Gets the atomized string with the specified value.

    - Parameter value: The name to find.
    - Returns: The atomized string object or  if the string has not already been atomized.

    */
    open func Get(value : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_NameTable_String__Get_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // NameTable


// type: System.Xml.NamespaceHandling
    /**
    Specifies whether to remove duplicate namespace declarations in the .

    */
public struct NamespaceHandling : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_NamespaceHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.NamespaceHandling Default
    /**
    Specifies that duplicate namespace declarations will not be removed.

    */
    public static var Default : dotnet.System.Xml.NamespaceHandling {
        get {
        let __return = dotnet.System.Xml.NamespaceHandling(val: System_Xml_NamespaceHandling_get_Default());
            return __return;
        }
    }
    // static field: System.Xml.NamespaceHandling OmitDuplicates
    /**
    Specifies that duplicate namespace declarations will be removed. For the duplicate namespace to be removed, the prefix and the namespace must match.

    */
    public static var OmitDuplicates : dotnet.System.Xml.NamespaceHandling {
        get {
        let __return = dotnet.System.Xml.NamespaceHandling(val: System_Xml_NamespaceHandling_get_OmitDuplicates());
            return __return;
        }
    }
} // NamespaceHandling


// type: System.Xml.NewLineHandling
    /**
    Specifies how to handle line breaks.

    */
public struct NewLineHandling : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_NewLineHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.NewLineHandling Replace
    /**
    New line characters are replaced to match the character specified in the  property.

    */
    public static var Replace : dotnet.System.Xml.NewLineHandling {
        get {
        let __return = dotnet.System.Xml.NewLineHandling(val: System_Xml_NewLineHandling_get_Replace());
            return __return;
        }
    }
    // static field: System.Xml.NewLineHandling Entitize
    /**
    New line characters are entitized. This setting preserves all characters when the output is read by a normalizing .

    */
    public static var Entitize : dotnet.System.Xml.NewLineHandling {
        get {
        let __return = dotnet.System.Xml.NewLineHandling(val: System_Xml_NewLineHandling_get_Entitize());
            return __return;
        }
    }
    // static field: System.Xml.NewLineHandling None
    /**
    The new line characters are unchanged. The output is the same as the input.

    */
    public static var None : dotnet.System.Xml.NewLineHandling {
        get {
        let __return = dotnet.System.Xml.NewLineHandling(val: System_Xml_NewLineHandling_get_None());
            return __return;
        }
    }
} // NewLineHandling


// type: System.Xml.ReadState
    /**
    Specifies the state of the reader.

    */
public struct ReadState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_ReadState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.ReadState Initial
    /**
    The  method has not been called.

    */
    public static var Initial : dotnet.System.Xml.ReadState {
        get {
        let __return = dotnet.System.Xml.ReadState(val: System_Xml_ReadState_get_Initial());
            return __return;
        }
    }
    // static field: System.Xml.ReadState Interactive
    /**
    The  method has been called. Additional methods may be called on the reader.

    */
    public static var Interactive : dotnet.System.Xml.ReadState {
        get {
        let __return = dotnet.System.Xml.ReadState(val: System_Xml_ReadState_get_Interactive());
            return __return;
        }
    }
    // static field: System.Xml.ReadState Error
    /**
    An error occurred that prevents the read operation from continuing.

    */
    public static var Error : dotnet.System.Xml.ReadState {
        get {
        let __return = dotnet.System.Xml.ReadState(val: System_Xml_ReadState_get_Error());
            return __return;
        }
    }
    // static field: System.Xml.ReadState EndOfFile
    /**
    The end of the file has been reached successfully.

    */
    public static var EndOfFile : dotnet.System.Xml.ReadState {
        get {
        let __return = dotnet.System.Xml.ReadState(val: System_Xml_ReadState_get_EndOfFile());
            return __return;
        }
    }
    // static field: System.Xml.ReadState Closed
    /**
    The  method has been called.

    */
    public static var Closed : dotnet.System.Xml.ReadState {
        get {
        let __return = dotnet.System.Xml.ReadState(val: System_Xml_ReadState_get_Closed());
            return __return;
        }
    }
} // ReadState


// type: System.Xml.ValidationType
    /**
    Specifies the type of validation to perform.

    */
public struct ValidationType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_ValidationType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.ValidationType None
    /**
    No validation is performed, and no validation errors are thrown. This setting creates an XML 1.0 compliant non-validating parser.
        
Calls to  report default attributes and resolve general entities. The DOCTYPE is not used for validation purposes.

    */
    public static var None : dotnet.System.Xml.ValidationType {
        get {
        let __return = dotnet.System.Xml.ValidationType(val: System_Xml_ValidationType_get_None());
            return __return;
        }
    }
    // static field: System.Xml.ValidationType Auto
    /**
    Validates if DTD or schema information is found. 

Starting with .NET Framework 2.0, this field is obsolete. It applies only to the obsolete  class.

    */
    public static var Auto : dotnet.System.Xml.ValidationType {
        get {
        let __return = dotnet.System.Xml.ValidationType(val: System_Xml_ValidationType_get_Auto());
            return __return;
        }
    }
    // static field: System.Xml.ValidationType DTD
    /**
    Validates according to the DTD.

    */
    public static var DTD : dotnet.System.Xml.ValidationType {
        get {
        let __return = dotnet.System.Xml.ValidationType(val: System_Xml_ValidationType_get_DTD());
            return __return;
        }
    }
    // static field: System.Xml.ValidationType XDR
    /**
    Validate according to XML-Data Reduced (XDR) schemas, including inline XDR schemas. XDR schemas are recognized using the  namespace prefix or the  property.
        
Starting with .NET Framework 2.0, this field is obsolete. It applies only to the obsolete  class.

    */
    public static var XDR : dotnet.System.Xml.ValidationType {
        get {
        let __return = dotnet.System.Xml.ValidationType(val: System_Xml_ValidationType_get_XDR());
            return __return;
        }
    }
    // static field: System.Xml.ValidationType Schema
    /**
    Validate according to XML Schema definition language (XSD) schemas, including inline XML Schemas. XML Schemas are associated with namespace URIs either by using the  attribute or the provided  property.

    */
    public static var Schema : dotnet.System.Xml.ValidationType {
        get {
        let __return = dotnet.System.Xml.ValidationType(val: System_Xml_ValidationType_get_Schema());
            return __return;
        }
    }
} // ValidationType


// type: System.Xml.WhitespaceHandling
    /**
    Specifies how white space is handled.

    */
public struct WhitespaceHandling : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_WhitespaceHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.WhitespaceHandling All
    /**
    Return  and  nodes. This is the default.

    */
    public static var All : dotnet.System.Xml.WhitespaceHandling {
        get {
        let __return = dotnet.System.Xml.WhitespaceHandling(val: System_Xml_WhitespaceHandling_get_All());
            return __return;
        }
    }
    // static field: System.Xml.WhitespaceHandling Significant
    /**
    Return  nodes only.

    */
    public static var Significant : dotnet.System.Xml.WhitespaceHandling {
        get {
        let __return = dotnet.System.Xml.WhitespaceHandling(val: System_Xml_WhitespaceHandling_get_Significant());
            return __return;
        }
    }
    // static field: System.Xml.WhitespaceHandling None
    /**
    Return no  and no  nodes.

    */
    public static var None : dotnet.System.Xml.WhitespaceHandling {
        get {
        let __return = dotnet.System.Xml.WhitespaceHandling(val: System_Xml_WhitespaceHandling_get_None());
            return __return;
        }
    }
} // WhitespaceHandling


// type: System.Xml.WriteState
    /**
    Specifies the state of the .

    */
public struct WriteState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_WriteState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.WriteState Start
    /**
    Indicates that a Write method has not yet been called.

    */
    public static var Start : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Start());
            return __return;
        }
    }
    // static field: System.Xml.WriteState Prolog
    /**
    Indicates that the prolog is being written.

    */
    public static var Prolog : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Prolog());
            return __return;
        }
    }
    // static field: System.Xml.WriteState Element
    /**
    Indicates that an element start tag is being written.

    */
    public static var Element : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Element());
            return __return;
        }
    }
    // static field: System.Xml.WriteState Attribute
    /**
    Indicates that an attribute value is being written.

    */
    public static var Attribute : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Attribute());
            return __return;
        }
    }
    // static field: System.Xml.WriteState Content
    /**
    Indicates that element content is being written.

    */
    public static var Content : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Content());
            return __return;
        }
    }
    // static field: System.Xml.WriteState Closed
    /**
    Indicates that the  method has been called.

    */
    public static var Closed : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Closed());
            return __return;
        }
    }
    // static field: System.Xml.WriteState Error
    /**
    An exception has been thrown, which has left the  in an invalid state. You can call the  method to put the  in the  state. Any other  method calls results in an .

This field was added in .NET Framework 2.0.

    */
    public static var Error : dotnet.System.Xml.WriteState {
        get {
        let __return = dotnet.System.Xml.WriteState(val: System_Xml_WriteState_get_Error());
            return __return;
        }
    }
} // WriteState


// type: System.Xml.XmlAttribute
    /**
    Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.

    */
open class XmlAttribute
    :
    dotnet.System.Xml.XmlNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode AppendChild(System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
    /**
    Adds the specified node to the end of the list of child nodes, of this node.

    - Parameter newChild: The  to add.
    - Returns: The  added.

    */
    open override func AppendChild(newChild : dotnet.System.Xml.XmlNode) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__AppendChild_0__1__XmlNode(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlAttribute.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself
    - Returns: The duplicate node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNode InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
    /**
    Inserts the specified node immediately after the specified reference node.

    - Parameter newChild: The  to insert.
    - Parameter refChild: The  that is the reference node. The  is placed after the .
    - Returns: The  inserted.

    */
    open override func InsertAfter(newChild : dotnet.System.Xml.XmlNode, refChild : Optional<dotnet.System.Xml.XmlNode>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__InsertAfter_0__2__XmlNode_XmlNode(&__thrown, self.get_handle(), newChild.get_handle(), refChild?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
    /**
    Inserts the specified node immediately before the specified reference node.

    - Parameter newChild: The  to insert.
    - Parameter refChild: The  that is the reference node. The  is placed before this node.
    - Returns: The  inserted.

    */
    open override func InsertBefore(newChild : dotnet.System.Xml.XmlNode, refChild : Optional<dotnet.System.Xml.XmlNode>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__InsertBefore_0__2__XmlNode_XmlNode(&__thrown, self.get_handle(), newChild.get_handle(), refChild?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode PrependChild(System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
    /**
    Adds the specified node to the beginning of the list of child nodes for this node.

    - Parameter newChild: The  to add. If it is an , the entire contents of the document fragment are moved into the child list of this node.
    - Returns: The  added.

    */
    open override func PrependChild(newChild : dotnet.System.Xml.XmlNode) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__PrependChild_0__1__XmlNode(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode RemoveChild(System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
    /**
    Removes the specified child node.

    - Parameter oldChild: The  to remove.
    - Returns: The  removed.

    */
    open override func RemoveChild(oldChild : dotnet.System.Xml.XmlNode) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__RemoveChild_0__1__XmlNode(&__thrown, self.get_handle(), oldChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNode ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
    /**
    Replaces the child node specified with the new child node specified.

    - Parameter newChild: The new child .
    - Parameter oldChild: The  to replace.
    - Returns: The  replaced.

    */
    open override func ReplaceChild(newChild : dotnet.System.Xml.XmlNode, oldChild : dotnet.System.Xml.XmlNode) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__ReplaceChild_0__2__XmlNode_XmlNode(&__thrown, self.get_handle(), newChild.get_handle(), oldChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttribute_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttribute_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlAttribute.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlAttribute.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttribute_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlAttribute.set_InnerXml(System.String)
    open override func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttribute_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlAttribute.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlAttribute.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlAttribute.get_NamespaceURI
    open override func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlAttribute.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlDocument get_OwnerDocument()
// docid: M:System.Xml.XmlAttribute.get_OwnerDocument
    open override func get_OwnerDocument() throws -> dotnet.System.Xml.XmlDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlDocument__get_OwnerDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDocument(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_OwnerElement()
// docid: M:System.Xml.XmlAttribute.get_OwnerElement
    open func get_OwnerElement() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlElement__get_OwnerElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlAttribute.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlAttribute.get_Prefix
    open override func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:System.Xml.XmlAttribute.set_Prefix(System.String)
    open override func set_Prefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttribute_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XmlAttribute.get_SchemaInfo
    open override func get_SchemaInfo() throws -> dotnet.System.Xml.Schema.IXmlSchemaInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Specified()
// docid: M:System.Xml.XmlAttribute.get_Specified
    open func get_Specified() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_bool__get_Specified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlAttribute.get_Value
    open override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlAttribute.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttribute_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the base Uniform Resource Identifier (URI) of the node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the namespace URI of this node.

    */
    open override var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the  to which this node belongs.

    */
    open override var OwnerDocument : dotnet.System.Xml.XmlDocument {
        get {
            return try! get_OwnerDocument();
        }
    }
    /**
    Gets the  to which the attribute belongs.

    */
    open var OwnerElement : Optional<dotnet.System.Xml.XmlElement> {
        get {
            return try! get_OwnerElement();
        }
    }
    /**
    Gets the parent of this node. For  nodes, this property always returns .

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets or sets the namespace prefix of this node.

    */
    open override var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v);
        }
    }
    /**
    Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.

    */
    open override var SchemaInfo : dotnet.System.Xml.Schema.IXmlSchemaInfo {
        get {
            return try! get_SchemaInfo();
        }
    }
    /**
    Gets a value indicating whether the attribute value was explicitly set.

    */
    open var Specified : Bool {
        get {
            return try! get_Specified();
        }
    }
// TODO COPE (is_override_mutable_optional_with_covariant) [IsSpecialName] System.String get_Value()
} // XmlAttribute


// type: System.Xml.XmlAttributeCollection
    /**
    Represents a collection of attributes that can be accessed by name or index.

    */
public final class XmlAttributeCollection
    :
    dotnet.System.Xml.XmlNamedNodeMap,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlAttributeCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlAttribute Append(System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)
    /**
    Inserts the specified attribute as the last node in the collection.

    - Parameter node: The attribute to insert.
    - Returns: The  to append to the collection.

    */
    public func Append(node : dotnet.System.Xml.XmlAttribute) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__Append_0__1__XmlAttribute(&__thrown, self.get_handle(), node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // void CopyTo(System.Xml.XmlAttribute[], System.Int32)
// docid: M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)
    /**
    Copies all the  objects from this collection into the given array.

    - Parameter array: The array that is the destination of the objects copied from this collection.
    - Parameter index: The index in the array where copying begins.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttributeCollection_void__CopyTo_0__2__XmlAttributeArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlAttribute InsertAfter(System.Xml.XmlAttribute, System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
    /**
    Inserts the specified attribute immediately after the specified reference attribute.

    - Parameter newNode: The attribute to insert.
    - Parameter refNode: The reference attribute.  is placed after the .
    - Returns: The  to insert into the collection.

    */
    public func InsertAfter(newNode : dotnet.System.Xml.XmlAttribute, refNode : Optional<dotnet.System.Xml.XmlAttribute>) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__InsertAfter_0__2__XmlAttribute_XmlAttribute(&__thrown, self.get_handle(), newNode.get_handle(), refNode?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute InsertBefore(System.Xml.XmlAttribute, System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
    /**
    Inserts the specified attribute immediately before the specified reference attribute.

    - Parameter newNode: The attribute to insert.
    - Parameter refNode: The reference attribute.  is placed before the .
    - Returns: The  to insert into the collection.

    */
    public func InsertBefore(newNode : dotnet.System.Xml.XmlAttribute, refNode : Optional<dotnet.System.Xml.XmlAttribute>) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__InsertBefore_0__2__XmlAttribute_XmlAttribute(&__thrown, self.get_handle(), newNode.get_handle(), refNode?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute Prepend(System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)
    /**
    Inserts the specified attribute as the first node in the collection.

    - Parameter node: The attribute to insert.
    - Returns: The  added to the collection.

    */
    public func Prepend(node : dotnet.System.Xml.XmlAttribute) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__Prepend_0__1__XmlAttribute(&__thrown, self.get_handle(), node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute Remove(System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)
    /**
    Removes the specified attribute from the collection.

    - Parameter node: The attribute to remove.
    - Returns: The node removed or  if it is not found in the collection.

    */
    public func Remove(node : Optional<dotnet.System.Xml.XmlAttribute>) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__Remove_0__1__XmlAttribute(&__thrown, self.get_handle(), node?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RemoveAll()
// docid: M:System.Xml.XmlAttributeCollection.RemoveAll
    /**
    Removes all attributes from the collection.

    */
    public func RemoveAll() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlAttributeCollection_void__RemoveAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlAttribute RemoveAt(System.Int32)
// docid: M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)
    /**
    Removes the attribute corresponding to the specified index from the collection.

    - Parameter i: The index of the node to remove. The first node has index 0.
    - Returns: Returns  if there is no attribute at the specified index.

    */
    public func RemoveAt(i : Swift.Int32) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__RemoveAt_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode SetNamedItem(System.Xml.XmlNode)
// docid: M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)
    /**
    Adds a  using its  property.

    - Parameter node: An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection.
    - Returns: If the  replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.

    */
    public override func SetNamedItem(node : Optional<dotnet.System.Xml.XmlNode>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlNode__SetNamedItem_0__1__XmlNode(&__thrown, self.get_handle(), node?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute get_ItemOf(System.Int32)
// docid: M:System.Xml.XmlAttributeCollection.get_ItemOf(System.Int32)
    public func get_ItemOf(i : Swift.Int32) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__get_ItemOf_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute get_ItemOf(System.String)
// docid: M:System.Xml.XmlAttributeCollection.get_ItemOf(System.String)
    public func get_ItemOf(name : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__get_ItemOf_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute get_ItemOf(System.String, System.String)
// docid: M:System.Xml.XmlAttributeCollection.get_ItemOf(System.String,System.String)
    public func get_ItemOf(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlAttributeCollection_XmlAttribute__get_ItemOf_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlAttributeCollection


// type: System.Xml.XmlCDataSection
    /**
    Represents a CDATA section.

    */
open class XmlCDataSection
    :
    dotnet.System.Xml.XmlCharacterData
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlCDataSection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCDataSection_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCDataSection_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCDataSection_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlCDataSection.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCDataSection_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlCDataSection.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCDataSection_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlCDataSection.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCDataSection_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlCDataSection.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCDataSection_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousText()
// docid: M:System.Xml.XmlCDataSection.get_PreviousText
    open override func get_PreviousText() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCDataSection_XmlNode__get_PreviousText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the parent of this node (for nodes that can have parents).

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets the text node that immediately precedes this node.

    */
    open override var PreviousText : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousText();
        }
    }
} // XmlCDataSection


// type: System.Xml.XmlCharacterData
    /**
    Provides text manipulation methods that are used by several classes.

    */
open class XmlCharacterData
    :
    dotnet.System.Xml.XmlLinkedNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlCharacterData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AppendData(System.String)
// docid: M:System.Xml.XmlCharacterData.AppendData(System.String)
    /**
    Appends the specified string to the end of the character data of the node.

    - Parameter strData: The string to insert into the existing string.
    */
    open func AppendData(strData : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__AppendData_0__1__String(&__thrown, self.get_handle(), strData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteData(System.Int32, System.Int32)
// docid: M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)
    /**
    Removes a range of characters from the node.

    - Parameter offset: The position within the string to start deleting.
    - Parameter count: The number of characters to delete.
    */
    open func DeleteData(offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__DeleteData_0__2__i32_i32(&__thrown, self.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertData(System.Int32, System.String)
// docid: M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)
    /**
    Inserts the specified string at the specified character offset.

    - Parameter offset: The position within the string to insert the supplied string data.
    - Parameter strData: The string data that is to be inserted into the existing string.
    */
    open func InsertData(offset : Swift.Int32, strData : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__InsertData_0__2__i32_String(&__thrown, self.get_handle(), offset, strData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceData(System.Int32, System.Int32, System.String)
// docid: M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)
    /**
    Replaces the specified number of characters starting at the specified offset with the specified string.

    - Parameter offset: The position within the string to start replacing.
    - Parameter count: The number of characters to replace.
    - Parameter strData: The new data that replaces the old string data.
    */
    open func ReplaceData(offset : Swift.Int32, count : Swift.Int32, strData : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__ReplaceData_0__3__i32_i32_String(&__thrown, self.get_handle(), offset, count, strData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Substring(System.Int32, System.Int32)
// docid: M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)
    /**
    Retrieves a substring of the full string from the specified range.

    - Parameter offset: The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data.
    - Parameter count: The number of characters to retrieve.
    - Returns: The substring corresponding to the specified range.

    */
    open func Substring(offset : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCharacterData_String__Substring_0__2__i32_i32(&__thrown, self.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Data()
// docid: M:System.Xml.XmlCharacterData.get_Data
    open func get_Data() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCharacterData_String__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Data(System.String)
// docid: M:System.Xml.XmlCharacterData.set_Data(System.String)
    open func set_Data(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__set_Data_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerText()
// docid: M:System.Xml.XmlCharacterData.get_InnerText
    open override func get_InnerText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCharacterData_String__get_InnerText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlCharacterData.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.Xml.XmlCharacterData.get_Length
    open func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCharacterData_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlCharacterData.get_Value
    open override func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlCharacterData_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlCharacterData.set_Value(System.String)
    open override func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlCharacterData_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Contains the data of the node.

    */
    open var Data : dotnet.System.String {
        get {
            return try! get_Data();
        }
        set(v) {
            return try! set_Data(value: v);
        }
    }
    /**
    Gets or sets the concatenated values of the node and all the children of the node.

    */
    open override var InnerText : dotnet.System.String {
        get {
            return try! get_InnerText();
        }
        set(v) {
            return try! set_InnerText(value: v);
        }
    }
    /**
    Gets the length of the data, in characters.

    */
    open var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets or sets the value of the node.

    */
    open override var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlCharacterData


// type: System.Xml.XmlComment
    /**
    Represents the content of an XML comment.

    */
open class XmlComment
    :
    dotnet.System.Xml.XmlCharacterData
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlComment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlComment.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlComment_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified . Because comment nodes do not have children, this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlComment_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlComment_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlComment.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlComment_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlComment.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlComment_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlComment.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlComment_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
} // XmlComment


// type: System.Xml.XmlConvert
    /**
    Encodes and decodes XML names, and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types, the values returned are locale-independent.

    */
open class XmlConvert
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlConvert_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlConvert.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlConvert_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String DecodeName(System.String)
// docid: M:System.Xml.XmlConvert.DecodeName(System.String)
    /**
    Decodes a name. This method does the reverse of the  and  methods.

    - Parameter name: The name to be transformed.
    - Returns: The decoded name.

    */
    open class func DecodeName(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__DecodeName_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String EncodeLocalName(System.String)
// docid: M:System.Xml.XmlConvert.EncodeLocalName(System.String)
    /**
    Converts the name to a valid XML local name.

    - Parameter name: The name to be encoded.
    - Returns: The encoded name.

    */
    open class func EncodeLocalName(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__EncodeLocalName_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String EncodeName(System.String)
// docid: M:System.Xml.XmlConvert.EncodeName(System.String)
    /**
    Converts the name to a valid XML name.

    - Parameter name: A name to be translated.
    - Returns: The name with any invalid characters replaced by an escape string.

    */
    open class func EncodeName(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__EncodeName_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String EncodeNmToken(System.String)
// docid: M:System.Xml.XmlConvert.EncodeNmToken(System.String)
    /**
    Verifies the name is valid according to the XML specification.

    - Parameter name: The name to be encoded.
    - Returns: The encoded name.

    */
    open class func EncodeNmToken(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__EncodeNmToken_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsNCNameChar(System.Char)
// docid: M:System.Xml.XmlConvert.IsNCNameChar(System.Char)
    /**
    Checks whether the passed-in character is a valid non-colon character type.

    - Parameter ch: The character to verify as a non-colon character.
    - Returns: 
         if the character is a valid non-colon character type; otherwise, .

    */
    open class func IsNCNameChar(ch : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__IsNCNameChar_0__1__Char(&__thrown, ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsPublicIdChar(System.Char)
// docid: M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)
    /**
    Returns the passed-in character instance if the character in the argument is a valid public id character, otherwise .

    - Parameter ch: 
         object to validate.
    - Returns: The passed-in character if the character is a valid public id character, otherwise .

    */
    open class func IsPublicIdChar(ch : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__IsPublicIdChar_0__1__Char(&__thrown, ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartNCNameChar(System.Char)
// docid: M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)
    /**
    Checks if the passed-in character is a valid Start Name Character type.

    - Parameter ch: The character to validate.
    - Returns: 
         if the character is a valid Start Name Character type; otherwise, .

    */
    open class func IsStartNCNameChar(ch : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__IsStartNCNameChar_0__1__Char(&__thrown, ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsWhitespaceChar(System.Char)
// docid: M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)
    /**
    Checks if the passed-in character is a valid XML whitespace character.

    - Parameter ch: The character to validate.
    - Returns: 
         if the passed in character is a valid XML whitespace character; otherwise, .

    */
    open class func IsWhitespaceChar(ch : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__IsWhitespaceChar_0__1__Char(&__thrown, ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsXmlChar(System.Char)
// docid: M:System.Xml.XmlConvert.IsXmlChar(System.Char)
    /**
    Checks if the passed-in character is a valid XML character.

    - Parameter ch: The character to validate.
    - Returns: 
         if the passed in character is a valid XML character; otherwise, .

    */
    open class func IsXmlChar(ch : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__IsXmlChar_0__1__Char(&__thrown, ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsXmlSurrogatePair(System.Char, System.Char)
// docid: M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)
    /**
    Checks if the passed-in surrogate pair of characters is a valid XML character.

    - Parameter lowChar: The surrogate character to validate.
    - Parameter highChar: The surrogate character to validate.
    - Returns: 
         if the passed in surrogate pair of characters is a valid XML character; otherwise, .

    */
    open class func IsXmlSurrogatePair(lowChar : dotnet.System.Char, highChar : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__IsXmlSurrogatePair_0__2__Char_Char(&__thrown, lowChar.get_value(), highChar.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ToBoolean(System.String)
// docid: M:System.Xml.XmlConvert.ToBoolean(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  value, that is,  or .

    */
    open class func ToBoolean(s : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_bool__ToBoolean_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte ToByte(System.String)
// docid: M:System.Xml.XmlConvert.ToByte(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToByte(s : dotnet.System.String) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_u8__ToByte_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char ToChar(System.String)
// docid: M:System.Xml.XmlConvert.ToChar(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string containing a single character to convert.
    - Returns: A  representing the single character.

    */
    open class func ToChar(s : dotnet.System.String) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_Char__ToChar_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.DateTime ToDateTime(System.String)
// docid: M:System.Xml.XmlConvert.ToDateTime(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToDateTime(s : dotnet.System.String) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTime__ToDateTime_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTime ToDateTime(System.String, System.String)
// docid: M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Parameter format: The format structure to apply to the converted . Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format.
    - Returns: A  equivalent of the string.

    */
    open class func ToDateTime(s : dotnet.System.String, format : dotnet.System.String) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTime__ToDateTime_0__2__String_String(&__thrown, s.get_handle(), format.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTime ToDateTime(System.String, System.String[])
// docid: M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Parameter formats: An array containing the format structures to apply to the converted . Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.
    - Returns: A  equivalent of the string.

    */
    open class func ToDateTime(s : dotnet.System.String, formats : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTime__ToDateTime_0__2__String_StringArray(&__thrown, s.get_handle(), formats.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTime ToDateTime(System.String, System.Xml.XmlDateTimeSerializationMode)
// docid: M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)
    /**
    Converts the  to a  using the  specified.

    - Parameter s: The  value to convert.
    - Parameter dateTimeOption: One of the enumeration values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.
    - Returns: A  equivalent of the .

    */
    open class func ToDateTime(s : dotnet.System.String, dateTimeOption : dotnet.System.Xml.XmlDateTimeSerializationMode) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTime__ToDateTime_0__2__String_XmlDateTimeSerializationMode(&__thrown, s.get_handle(), dateTimeOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTimeOffset ToDateTimeOffset(System.String)
// docid: M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)
    /**
    Converts the supplied  to a  equivalent.

    - Parameter s: The string to convert.  
  
 Note The string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information, see the dateTime section of the XML Schema specification..
    - Returns: The  equivalent of the supplied string.

    */
    open class func ToDateTimeOffset(s : dotnet.System.String) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTimeOffset__ToDateTimeOffset_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.DateTimeOffset ToDateTimeOffset(System.String, System.String)
// docid: M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)
    /**
    Converts the supplied  to a  equivalent.

    - Parameter s: The string to convert.
    - Parameter format: The format from which  is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..) The string  is validated against this format.
    - Returns: The  equivalent of the supplied string.

    */
    open class func ToDateTimeOffset(s : dotnet.System.String, format : dotnet.System.String) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTimeOffset__ToDateTimeOffset_0__2__String_String(&__thrown, s.get_handle(), format.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.DateTimeOffset ToDateTimeOffset(System.String, System.String[])
// docid: M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])
    /**
    Converts the supplied  to a  equivalent.

    - Parameter s: The string to convert.
    - Parameter formats: An array of formats from which  can be converted. Each format in  can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..) The string  is validated against one of these formats.
    - Returns: The  equivalent of the supplied string.

    */
    open class func ToDateTimeOffset(s : dotnet.System.String, formats : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_DateTimeOffset__ToDateTimeOffset_0__2__String_StringArray(&__thrown, s.get_handle(), formats.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.Decimal ToDecimal(System.String)
// docid: M:System.Xml.XmlConvert.ToDecimal(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToDecimal(s : dotnet.System.String) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_Decimal__ToDecimal_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ToDouble(System.String)
// docid: M:System.Xml.XmlConvert.ToDouble(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToDouble(s : dotnet.System.String) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_f64__ToDouble_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid ToGuid(System.String)
// docid: M:System.Xml.XmlConvert.ToGuid(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToGuid(s : dotnet.System.String) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_Guid__ToGuid_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 ToInt16(System.String)
// docid: M:System.Xml.XmlConvert.ToInt16(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: An  equivalent of the string.

    */
    open class func ToInt16(s : dotnet.System.String) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_i16__ToInt16_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ToInt32(System.String)
// docid: M:System.Xml.XmlConvert.ToInt32(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: An  equivalent of the string.

    */
    open class func ToInt32(s : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_i32__ToInt32_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ToInt64(System.String)
// docid: M:System.Xml.XmlConvert.ToInt64(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: An  equivalent of the string.

    */
    open class func ToInt64(s : dotnet.System.String) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_i64__ToInt64_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.SByte ToSByte(System.String)
// docid: M:System.Xml.XmlConvert.ToSByte(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: An  equivalent of the string.

    */
    open class func ToSByte(s : dotnet.System.String) throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_i8__ToSByte_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ToSingle(System.String)
// docid: M:System.Xml.XmlConvert.ToSingle(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToSingle(s : dotnet.System.String) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_f32__ToSingle_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString(bool)
// docid: M:System.Xml.XmlConvert.ToString(System.Boolean)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the , that is, "true" or "false".

    */
    open class func ToString(value : Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Byte)
// docid: M:System.Xml.XmlConvert.ToString(System.Byte)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.UInt8) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__u8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Char)
// docid: M:System.Xml.XmlConvert.ToString(System.Char)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : dotnet.System.Char) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__Char(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.DateTime)
// docid: M:System.Xml.XmlConvert.ToString(System.DateTime)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the  in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.

    */
    open class func ToString(value : dotnet.System.DateTime) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__DateTime(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.DateTime, System.String)
// docid: M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Parameter format: The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.
    - Returns: A string representation of the  in the specified format.

    */
    open class func ToString(value : dotnet.System.DateTime, format : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__2__DateTime_String(&__thrown, value.get_handle(), format.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.DateTime, System.Xml.XmlDateTimeSerializationMode)
// docid: M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)
    /**
    Converts the  to a  using the  specified.

    - Parameter value: The  value to convert.
    - Parameter dateTimeOption: One of the  values that specify how to treat the  value.
    - Returns: A  equivalent of the .

    */
    open class func ToString(value : dotnet.System.DateTime, dateTimeOption : dotnet.System.Xml.XmlDateTimeSerializationMode) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__2__DateTime_XmlDateTimeSerializationMode(&__thrown, value.get_handle(), dateTimeOption.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.DateTimeOffset)
// docid: M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)
    /**
    Converts the supplied  to a .

    - Parameter value: The  to be converted.
    - Returns: A  representation of the supplied .

    */
    open class func ToString(value : dotnet.System.DateTimeOffset) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__DateTimeOffset(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.DateTimeOffset, System.String)
// docid: M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)
    /**
    Converts the supplied  to a  in the specified format.

    - Parameter value: The  to be converted.
    - Parameter format: The format to which  is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..)
    - Returns: A  representation in the specified format of the supplied .

    */
    open class func ToString(value : dotnet.System.DateTimeOffset, format : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__2__DateTimeOffset_String(&__thrown, value.get_handle(), format.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Decimal)
// docid: M:System.Xml.XmlConvert.ToString(System.Decimal)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : dotnet.System.Decimal) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Double)
// docid: M:System.Xml.XmlConvert.ToString(System.Double)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.Double) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__f64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Guid)
// docid: M:System.Xml.XmlConvert.ToString(System.Guid)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : dotnet.System.Guid) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__Guid(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Int16)
// docid: M:System.Xml.XmlConvert.ToString(System.Int16)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.Int16) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__i16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Int32)
// docid: M:System.Xml.XmlConvert.ToString(System.Int32)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Int64)
// docid: M:System.Xml.XmlConvert.ToString(System.Int64)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.Int64) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.SByte)
// docid: M:System.Xml.XmlConvert.ToString(System.SByte)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.Int8) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__i8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Single)
// docid: M:System.Xml.XmlConvert.ToString(System.Single)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.Float) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__f32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.String ToString(System.TimeSpan)
    // System.String ToString(System.UInt16)
// docid: M:System.Xml.XmlConvert.ToString(System.UInt16)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.UInt16) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__u16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.UInt32)
// docid: M:System.Xml.XmlConvert.ToString(System.UInt32)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.UInt32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__u32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.UInt64)
// docid: M:System.Xml.XmlConvert.ToString(System.UInt64)
    /**
    Converts the  to a .

    - Parameter value: The value to convert.
    - Returns: A string representation of the .

    */
    open class func ToString(value : Swift.UInt64) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__ToString_0__1__u64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.TimeSpan ToTimeSpan(System.String)
// docid: M:System.Xml.XmlConvert.ToTimeSpan(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.
    - Returns: A  equivalent of the string.

    */
    open class func ToTimeSpan(s : dotnet.System.String) throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_TimeSpan__ToTimeSpan_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // System.UInt16 ToUInt16(System.String)
// docid: M:System.Xml.XmlConvert.ToUInt16(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToUInt16(s : dotnet.System.String) throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_u16__ToUInt16_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt32 ToUInt32(System.String)
// docid: M:System.Xml.XmlConvert.ToUInt32(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToUInt32(s : dotnet.System.String) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_u32__ToUInt32_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt64 ToUInt64(System.String)
// docid: M:System.Xml.XmlConvert.ToUInt64(System.String)
    /**
    Converts the  to a  equivalent.

    - Parameter s: The string to convert.
    - Returns: A  equivalent of the string.

    */
    open class func ToUInt64(s : dotnet.System.String) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_u64__ToUInt64_0__1__String(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String VerifyName(System.String)
// docid: M:System.Xml.XmlConvert.VerifyName(System.String)
    /**
    Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.

    - Parameter name: The name to verify.
    - Returns: The name, if it is a valid XML name.

    */
    open class func VerifyName(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyName_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String VerifyNCName(System.String)
// docid: M:System.Xml.XmlConvert.VerifyNCName(System.String)
    /**
    Verifies that the name is a valid  according to the W3C Extended Markup Language recommendation. An  is a name that cannot contain a colon.

    - Parameter name: The name to verify.
    - Returns: The name, if it is a valid NCName.

    */
    open class func VerifyNCName(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyNCName_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String VerifyNMTOKEN(System.String)
// docid: M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)
    /**
    Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation.

    - Parameter name: The string you wish to verify.
    - Returns: The name token, if it is a valid NMTOKEN.

    */
    open class func VerifyNMTOKEN(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyNMTOKEN_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String VerifyPublicId(System.String)
// docid: M:System.Xml.XmlConvert.VerifyPublicId(System.String)
    /**
    Returns the passed in string instance if all the characters in the string argument are valid public id characters.

    - Parameter publicId: 
         that contains the id to validate.
    - Returns: The passed-in string if all the characters in the argument are valid public id characters.

    */
    open class func VerifyPublicId(publicId : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyPublicId_0__1__String(&__thrown, publicId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String VerifyTOKEN(System.String)
// docid: M:System.Xml.XmlConvert.VerifyTOKEN(System.String)
    /**
    Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.

    - Parameter token: The string value you wish to verify.
    - Returns: The token, if it is a valid token.

    */
    open class func VerifyTOKEN(token : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyTOKEN_0__1__String(&__thrown, token?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String VerifyWhitespace(System.String)
// docid: M:System.Xml.XmlConvert.VerifyWhitespace(System.String)
    /**
    Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters.

    - Parameter content: 
         to verify.
    - Returns: The passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise .

    */
    open class func VerifyWhitespace(content : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyWhitespace_0__1__String(&__thrown, content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String VerifyXmlChars(System.String)
// docid: M:System.Xml.XmlConvert.VerifyXmlChars(System.String)
    /**
    Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise an  is thrown with information on the first invalid character encountered.

    - Parameter content: 
         that contains characters to verify.
    - Returns: The passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise an  is thrown with information on the first invalid character encountered.

    */
    open class func VerifyXmlChars(content : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlConvert_String__VerifyXmlChars_0__1__String(&__thrown, content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // XmlConvert


// type: System.Xml.XmlDateTimeSerializationMode
    /**
    Specifies how to treat the time value when converting between string and .

    */
public struct XmlDateTimeSerializationMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDateTimeSerializationMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlDateTimeSerializationMode Local
    /**
    Treat as local time. If the  object represents a Coordinated Universal Time (UTC), it is converted to the local time.

    */
    public static var Local : dotnet.System.Xml.XmlDateTimeSerializationMode {
        get {
        let __return = dotnet.System.Xml.XmlDateTimeSerializationMode(val: System_Xml_XmlDateTimeSerializationMode_get_Local());
            return __return;
        }
    }
    // static field: System.Xml.XmlDateTimeSerializationMode Utc
    /**
    Treat as a UTC. If the  object represents a local time, it is converted to a UTC.

    */
    public static var Utc : dotnet.System.Xml.XmlDateTimeSerializationMode {
        get {
        let __return = dotnet.System.Xml.XmlDateTimeSerializationMode(val: System_Xml_XmlDateTimeSerializationMode_get_Utc());
            return __return;
        }
    }
    // static field: System.Xml.XmlDateTimeSerializationMode Unspecified
    /**
    Treat as a local time if a  is being converted to a string. If a string is being converted to , convert to a local time if a time zone is specified.

    */
    public static var Unspecified : dotnet.System.Xml.XmlDateTimeSerializationMode {
        get {
        let __return = dotnet.System.Xml.XmlDateTimeSerializationMode(val: System_Xml_XmlDateTimeSerializationMode_get_Unspecified());
            return __return;
        }
    }
    // static field: System.Xml.XmlDateTimeSerializationMode RoundtripKind
    /**
    Time zone information should be preserved when converting.

    */
    public static var RoundtripKind : dotnet.System.Xml.XmlDateTimeSerializationMode {
        get {
        let __return = dotnet.System.Xml.XmlDateTimeSerializationMode(val: System_Xml_XmlDateTimeSerializationMode_get_RoundtripKind());
            return __return;
        }
    }
} // XmlDateTimeSerializationMode


// type: System.Xml.XmlDeclaration
    /**
    Represents the XML declaration node <?xml version='1.0'...?>.

    */
open class XmlDeclaration
    :
    dotnet.System.Xml.XmlLinkedNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDeclaration_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. Because  nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves the children of the node to the specified . Because  nodes do not have children, this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDeclaration_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDeclaration_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Encoding()
// docid: M:System.Xml.XmlDeclaration.get_Encoding
    open func get_Encoding() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Encoding(System.String)
// docid: M:System.Xml.XmlDeclaration.set_Encoding(System.String)
    open func set_Encoding(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDeclaration_void__set_Encoding_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerText()
// docid: M:System.Xml.XmlDeclaration.get_InnerText
    open override func get_InnerText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_InnerText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlDeclaration.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDeclaration_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlDeclaration.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlDeclaration.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlDeclaration.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Standalone()
// docid: M:System.Xml.XmlDeclaration.get_Standalone
    open func get_Standalone() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_Standalone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Standalone(System.String)
// docid: M:System.Xml.XmlDeclaration.set_Standalone(System.String)
    open func set_Standalone(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDeclaration_void__set_Standalone_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlDeclaration.get_Value
    open override func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlDeclaration.set_Value(System.String)
    open override func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDeclaration_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Xml.XmlDeclaration.get_Version
    open func get_Version() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDeclaration_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the encoding level of the XML document.

    */
    open var Encoding : dotnet.System.String {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v);
        }
    }
    /**
    Gets or sets the concatenated values of the .

    */
    open override var InnerText : dotnet.System.String {
        get {
            return try! get_InnerText();
        }
        set(v) {
            return try! set_InnerText(value: v);
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the value of the standalone attribute.

    */
    open var Standalone : dotnet.System.String {
        get {
            return try! get_Standalone();
        }
        set(v) {
            return try! set_Standalone(value: v);
        }
    }
    /**
    Gets or sets the value of the .

    */
    open override var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
    /**
    Gets the XML version of the document.

    */
    open var Version : dotnet.System.String {
        get {
            return try! get_Version();
        }
    }
} // XmlDeclaration


// type: System.Xml.XmlDocument
    /**
    Represents an XML document. You can use this class to load, validate, edit, add, and position XML in a document.

    */
open class XmlDocument
    :
    dotnet.System.Xml.XmlNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDocument_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlDocument.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDocument_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter nt: The  to use.
    */
    public init(nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDocument_ctor_0__1__XmlNameTable(&__thrown, nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlDocument.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: The cloned  node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute CreateAttribute(System.String)
// docid: M:System.Xml.XmlDocument.CreateAttribute(System.String)
    /**
    Creates an  with the specified .

    - Parameter name: The qualified name of the attribute. If the name contains a colon, the  property reflects the part of the name preceding the first colon and the  property reflects the part of the name following the first colon. The  remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case  has a value of http://www.w3.org/2000/xmlns/.
    - Returns: The new .

    */
    open func CreateAttribute(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlAttribute__CreateAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute CreateAttribute(System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
    /**
    Creates an  with the specified qualified name and .

    - Parameter qualifiedName: The qualified name of the attribute. If the name contains a colon then the  property will reflect the part of the name preceding the colon and the  property will reflect the part of the name after the colon.
    - Parameter namespaceURI: The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/.
    - Returns: The new .

    */
    open func CreateAttribute(qualifiedName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlAttribute__CreateAttribute_0__2__String_String(&__thrown, self.get_handle(), qualifiedName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute CreateAttribute(System.String, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
    /**
    Creates an  with the specified , , and .

    - Parameter prefix: The prefix of the attribute (if any). String.Empty and  are equivalent.
    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute (if any). String.Empty and  are equivalent. If  is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown.
    - Returns: The new .

    */
    open func CreateAttribute(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlAttribute__CreateAttribute_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlCDataSection CreateCDataSection(System.String)
// docid: M:System.Xml.XmlDocument.CreateCDataSection(System.String)
    /**
    Creates an  containing the specified data.

    - Parameter data: The content of the new .
    - Returns: The new .

    */
    open func CreateCDataSection(data : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlCDataSection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlCDataSection__CreateCDataSection_0__1__String(&__thrown, self.get_handle(), data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlCDataSection(hndl : __return);
        }
    }
    // System.Xml.XmlComment CreateComment(System.String)
// docid: M:System.Xml.XmlDocument.CreateComment(System.String)
    /**
    Creates an  containing the specified data.

    - Parameter data: The content of the new .
    - Returns: The new .

    */
    open func CreateComment(data : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlComment {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlComment__CreateComment_0__1__String(&__thrown, self.get_handle(), data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlComment(hndl : __return);
        }
    }
    // System.Xml.XmlDocumentFragment CreateDocumentFragment()
// docid: M:System.Xml.XmlDocument.CreateDocumentFragment
    /**
    Creates an .

    - Returns: The new .

    */
    open func CreateDocumentFragment() throws -> dotnet.System.Xml.XmlDocumentFragment {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlDocumentFragment__CreateDocumentFragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDocumentFragment(hndl : __return);
        }
    }
    // System.Xml.XmlDocumentType CreateDocumentType(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
    /**
    Returns a new  object.

    - Parameter name: Name of the document type.
    - Parameter publicId: The public identifier of the document type or . You can specify a public URI and also a system identifier to identify the location of the external DTD subset.
    - Parameter systemId: The system identifier of the document type or . Specifies the URL of the file location for the external DTD subset.
    - Parameter internalSubset: The DTD internal subset of the document type or .
    - Returns: The new .

    */
    open func CreateDocumentType(name : dotnet.System.String, publicId : Optional<dotnet.System.String>, systemId : Optional<dotnet.System.String>, internalSubset : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlDocumentType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlDocumentType__CreateDocumentType_0__4__String_String_String_String(&__thrown, self.get_handle(), name.get_handle(), publicId?.get_handle() ?? nil, systemId?.get_handle() ?? nil, internalSubset?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDocumentType(hndl : __return);
        }
    }
    // System.Xml.XmlElement CreateElement(System.String)
// docid: M:System.Xml.XmlDocument.CreateElement(System.String)
    /**
    Creates an element with the specified name.

    - Parameter name: The qualified name of the element. If the name contains a colon then the  property reflects the part of the name preceding the colon and the  property reflects the part of the name after the colon. The qualified name cannot include a prefix of 'xmlns'.
    - Returns: The new .

    */
    open func CreateElement(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlElement__CreateElement_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlElement(hndl : __return);
        }
    }
    // System.Xml.XmlElement CreateElement(System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateElement(System.String,System.String)
    /**
    Creates an  with the qualified name and .

    - Parameter qualifiedName: The qualified name of the element. If the name contains a colon then the  property will reflect the part of the name preceding the colon and the  property will reflect the part of the name after the colon. The qualified name cannot include a prefix of 'xmlns'.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The new .

    */
    open func CreateElement(qualifiedName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlElement__CreateElement_0__2__String_String(&__thrown, self.get_handle(), qualifiedName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlElement(hndl : __return);
        }
    }
    // System.Xml.XmlElement CreateElement(System.String, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
    /**
    Creates an element with the specified , , and .

    - Parameter prefix: The prefix of the new element (if any). String.Empty and  are equivalent.
    - Parameter localName: The local name of the new element.
    - Parameter namespaceURI: The namespace URI of the new element (if any). String.Empty and  are equivalent.
    - Returns: The new .

    */
    open func CreateElement(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlElement__CreateElement_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlElement(hndl : __return);
        }
    }
    // System.Xml.XmlEntityReference CreateEntityReference(System.String)
// docid: M:System.Xml.XmlDocument.CreateEntityReference(System.String)
    /**
    Creates an  with the specified name.

    - Parameter name: The name of the entity reference.
    - Returns: The new .

    */
    open func CreateEntityReference(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlEntityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlEntityReference__CreateEntityReference_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlEntityReference(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNavigator CreateNavigator()
// docid: M:System.Xml.XmlDocument.CreateNavigator
    /**
    Creates a new  object for navigating this document.

    - Returns: An  object.

    */
    open override func CreateNavigator() throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XPathNavigator__CreateNavigator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode CreateNode(System.String, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
    /**
    Creates an  with the specified node type, , and .

    - Parameter nodeTypeString: String version of the  of the new node. This parameter must be one of the values listed in the table below.
    - Parameter name: The qualified name of the new node. If the name contains a colon, it is parsed into  and  components.
    - Parameter namespaceURI: The namespace URI of the new node.
    - Returns: The new .

    */
    open func CreateNode(nodeTypeString : dotnet.System.String, name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__CreateNode_0__3__String_String_String(&__thrown, self.get_handle(), nodeTypeString.get_handle(), name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNode CreateNode(System.Xml.XmlNodeType, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
    /**
    Creates an  with the specified , , and .

    - Parameter type: The  of the new node.
    - Parameter name: The qualified name of the new node. If the name contains a colon then it is parsed into  and  components.
    - Parameter namespaceURI: The namespace URI of the new node.
    - Returns: The new .

    */
    open func CreateNode(type : dotnet.System.Xml.XmlNodeType, name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__CreateNode_0__3__XmlNodeType_String_String(&__thrown, self.get_handle(), type.get_value(), name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNode CreateNode(System.Xml.XmlNodeType, System.String, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
    /**
    Creates a  with the specified , , , and .

    - Parameter type: The  of the new node.
    - Parameter prefix: The prefix of the new node.
    - Parameter name: The local name of the new node.
    - Parameter namespaceURI: The namespace URI of the new node.
    - Returns: The new .

    */
    open func CreateNode(type : dotnet.System.Xml.XmlNodeType, prefix : Optional<dotnet.System.String>, name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__CreateNode_0__4__XmlNodeType_String_String_String(&__thrown, self.get_handle(), type.get_value(), prefix?.get_handle() ?? nil, name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlProcessingInstruction CreateProcessingInstruction(System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
    /**
    Creates an  with the specified name and data.

    - Parameter target: The name of the processing instruction.
    - Parameter data: The data for the processing instruction.
    - Returns: The new .

    */
    open func CreateProcessingInstruction(target : dotnet.System.String, data : dotnet.System.String) throws -> dotnet.System.Xml.XmlProcessingInstruction {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlProcessingInstruction__CreateProcessingInstruction_0__2__String_String(&__thrown, self.get_handle(), target.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlProcessingInstruction(hndl : __return);
        }
    }
    // System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(System.String)
// docid: M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
    /**
    Creates an  node.

    - Parameter text: The string must contain only the following characters &#20; &#10; &#13; and &#9;
    - Returns: A new  node.

    */
    open func CreateSignificantWhitespace(text : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlSignificantWhitespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlSignificantWhitespace__CreateSignificantWhitespace_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSignificantWhitespace(hndl : __return);
        }
    }
    // System.Xml.XmlText CreateTextNode(System.String)
// docid: M:System.Xml.XmlDocument.CreateTextNode(System.String)
    /**
    Creates an  with the specified text.

    - Parameter text: The text for the Text node.
    - Returns: The new  node.

    */
    open func CreateTextNode(text : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlText {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlText__CreateTextNode_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlText(hndl : __return);
        }
    }
    // System.Xml.XmlWhitespace CreateWhitespace(System.String)
// docid: M:System.Xml.XmlDocument.CreateWhitespace(System.String)
    /**
    Creates an  node.

    - Parameter text: The string must contain only the following characters &#20; &#10; &#13; and &#9;
    - Returns: A new  node.

    */
    open func CreateWhitespace(text : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlWhitespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlWhitespace__CreateWhitespace_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWhitespace(hndl : __return);
        }
    }
    // System.Xml.XmlDeclaration CreateXmlDeclaration(System.String, System.String, System.String)
// docid: M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
    /**
    Creates an  node with the specified values.

    - Parameter version: The version must be "1.0".
    - Parameter encoding: The value of the encoding attribute. This is the encoding that is used when you save the  to a file or a stream; therefore, it must be set to a string supported by the  class, otherwise  fails. If this is  or String.Empty, the  method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.  
  
 Note: If the  is saved to either a  or an , this encoding value is discarded. Instead, the encoding of the  or the  is used. This ensures that the XML written out can be read back using the correct encoding.
    - Parameter standalone: The value must be either "yes" or "no". If this is  or String.Empty, the  method does not write a standalone attribute on the XML declaration.
    - Returns: The new  node.

    */
    open func CreateXmlDeclaration(version : dotnet.System.String, encoding : Optional<dotnet.System.String>, standalone : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlDeclaration {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlDeclaration__CreateXmlDeclaration_0__3__String_String_String(&__thrown, self.get_handle(), version.get_handle(), encoding?.get_handle() ?? nil, standalone?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDeclaration(hndl : __return);
        }
    }
    // System.Xml.XmlElement GetElementById(System.String)
// docid: M:System.Xml.XmlDocument.GetElementById(System.String)
    /**
    Gets the  with the specified ID.

    - Parameter elementId: The attribute ID to match.
    - Returns: The  with the matching ID or  if no matching element is found.

    */
    open func GetElementById(elementId : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlElement__GetElementById_0__1__String(&__thrown, self.get_handle(), elementId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNodeList GetElementsByTagName(System.String)
// docid: M:System.Xml.XmlDocument.GetElementsByTagName(System.String)
    /**
    Returns an  containing a list of all descendant elements that match the specified .

    - Parameter name: The qualified name to match. It is matched against the  property of the matching node. The special value "(ASTERISK)" matches all tags.
    - Returns: An  containing a list of all matching nodes. If no nodes match , the returned collection will be empty.

    */
    open func GetElementsByTagName(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlNodeList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNodeList__GetElementsByTagName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeList(hndl : __return);
        }
    }
    // System.Xml.XmlNodeList GetElementsByTagName(System.String, System.String)
// docid: M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
    /**
    Returns an  containing a list of all descendant elements that match the specified  and .

    - Parameter localName: The LocalName to match. The special value "(ASTERISK)" matches all tags.
    - Parameter namespaceURI: NamespaceURI to match.
    - Returns: An  containing a list of all matching nodes. If no nodes match the specified  and , the returned collection will be empty.

    */
    open func GetElementsByTagName(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.Xml.XmlNodeList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNodeList__GetElementsByTagName_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeList(hndl : __return);
        }
    }
    // System.Xml.XmlNode ImportNode(System.Xml.XmlNode, bool)
// docid: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
    /**
    Imports a node from another document to the current document.

    - Parameter node: The node being imported.
    - Parameter deep: 
         to perform a deep clone; otherwise, .
    - Returns: The imported .

    */
    open func ImportNode(node : dotnet.System.Xml.XmlNode, deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__ImportNode_0__2__XmlNode_bool(&__thrown, self.get_handle(), node.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void Load(System.IO.Stream)
// docid: M:System.Xml.XmlDocument.Load(System.IO.Stream)
    /**
    Loads the XML document from the specified stream.

    - Parameter inStream: The stream containing the XML document to load.
    */
    open func Load(inStream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Load_0__1__Stream(&__thrown, self.get_handle(), inStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.IO.TextReader)
// docid: M:System.Xml.XmlDocument.Load(System.IO.TextReader)
    /**
    Loads the XML document from the specified .

    - Parameter txtReader: The  used to feed the XML data into the document.
    */
    open func Load(txtReader : dotnet.System.IO.TextReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Load_0__1__TextReader(&__thrown, self.get_handle(), txtReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.String)
// docid: M:System.Xml.XmlDocument.Load(System.String)
    /**
    Loads the XML document from the specified URL.

    - Parameter filename: URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).
    */
    open func Load(filename : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Load_0__1__String(&__thrown, self.get_handle(), filename.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XmlReader)
// docid: M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)
    /**
    Loads the XML document from the specified .

    - Parameter reader: The  used to feed the XML data into the document.
    */
    open func Load(reader : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Load_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadXml(System.String)
// docid: M:System.Xml.XmlDocument.LoadXml(System.String)
    /**
    Loads the XML document from the specified string.

    - Parameter xml: String containing the XML document to load.
    */
    open func LoadXml(xml : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__LoadXml_0__1__String(&__thrown, self.get_handle(), xml.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlNode ReadNode(System.Xml.XmlReader)
// docid: M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
    /**
    Creates an  object based on the information in the . The reader must be positioned on a node or attribute.

    - Parameter reader: The XML source
    - Returns: The new  or  if no more nodes exist.

    */
    open func ReadNode(reader : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__ReadNode_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Save(System.IO.Stream)
// docid: M:System.Xml.XmlDocument.Save(System.IO.Stream)
    /**
    Saves the XML document to the specified stream.

    - Parameter outStream: The stream to which you want to save.
    */
    open func Save(outStream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Save_0__1__Stream(&__thrown, self.get_handle(), outStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter)
// docid: M:System.Xml.XmlDocument.Save(System.IO.TextWriter)
    /**
    Saves the XML document to the specified .

    - Parameter writer: The  to which you want to save.
    */
    open func Save(writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Save_0__1__TextWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String)
// docid: M:System.Xml.XmlDocument.Save(System.String)
    /**
    Saves the XML document to the specified file. If the specified file exists, this method overwrites it.

    - Parameter filename: The location of the file where you want to save the document.
    */
    open func Save(filename : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Save_0__1__String(&__thrown, self.get_handle(), filename.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
    /**
    Saves the XML document to the specified .

    - Parameter w: The  to which you want to save.
    */
    open func Save(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Save_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
    /**
    Validates the  against the XML Schema Definition Language (XSD) schemas contained in the  property.

    - Parameter validationEventHandler: The  object that receives information about schema validation warnings and errors.
    */
    open func Validate(validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Validate_0__1__ValidationEventHandler(&__thrown, self.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Validate(validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(validationEventHandler: del_validationEventHandler);
    }
    // void Validate(System.Xml.Schema.ValidationEventHandler, System.Xml.XmlNode)
// docid: M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
    /**
    Validates the  object specified against the XML Schema Definition Language (XSD) schemas in the  property.

    - Parameter validationEventHandler: The  object that receives information about schema validation warnings and errors.
    - Parameter nodeToValidate: The  object created from an  to validate.
    */
    open func Validate(validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, nodeToValidate : dotnet.System.Xml.XmlNode) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__Validate_0__2__ValidationEventHandler_XmlNode(&__thrown, self.get_handle(), validationEventHandler?.get_handle() ?? nil, nodeToValidate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Validate(validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, nodeToValidate : dotnet.System.Xml.XmlNode) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(validationEventHandler: del_validationEventHandler, nodeToValidate: nodeToValidate);
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the  node to the specified .

    - Parameter xw: The  to which you want to save.
    */
    open func WriteContentTo(xw : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), xw.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the  node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlDocument.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_DocumentElement()
// docid: M:System.Xml.XmlDocument.get_DocumentElement
    open func get_DocumentElement() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlElement__get_DocumentElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlDocumentType get_DocumentType()
// docid: M:System.Xml.XmlDocument.get_DocumentType
    open func get_DocumentType() throws -> Optional<dotnet.System.Xml.XmlDocumentType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlDocumentType__get_DocumentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlDocumentType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlImplementation get_Implementation()
// docid: M:System.Xml.XmlDocument.get_Implementation
    open func get_Implementation() throws -> dotnet.System.Xml.XmlImplementation {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlImplementation__get_Implementation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlImplementation(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlDocument.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XmlDocument.get_InnerXml
    open override func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlDocument.set_InnerXml(System.String)
    open override func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Xml.XmlDocument.get_IsReadOnly
    open override func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlDocument.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlDocument.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlDocument.get_NameTable
    open func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlDocument.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlDocument get_OwnerDocument()
// docid: M:System.Xml.XmlDocument.get_OwnerDocument
    open override func get_OwnerDocument() throws -> Optional<dotnet.System.Xml.XmlDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlDocument__get_OwnerDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlDocument(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlDocument.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_PreserveWhitespace()
// docid: M:System.Xml.XmlDocument.get_PreserveWhitespace
    open func get_PreserveWhitespace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_bool__get_PreserveWhitespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveWhitespace(bool)
// docid: M:System.Xml.XmlDocument.set_PreserveWhitespace(System.Boolean)
    open func set_PreserveWhitespace(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__set_PreserveWhitespace_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XmlDocument.get_SchemaInfo
    open override func get_SchemaInfo() throws -> dotnet.System.Xml.Schema.IXmlSchemaInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSet get_Schemas()
// docid: M:System.Xml.XmlDocument.get_Schemas
    open func get_Schemas() throws -> dotnet.System.Xml.Schema.XmlSchemaSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocument_XmlSchemaSet__get_Schemas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaSet(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Schemas(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Xml.XmlDocument.set_Schemas(System.Xml.Schema.XmlSchemaSet)
    open func set_Schemas(value : dotnet.System.Xml.Schema.XmlSchemaSet) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__set_Schemas_0__1__XmlSchemaSet(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.XmlDocument.set_XmlResolver(System.Xml.XmlResolver)
    open func set_XmlResolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_NodeChanged(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.add_NodeChanged(System.Xml.XmlNodeChangedEventHandler)
    open func add_NodeChanged(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__add_NodeChanged_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_NodeChanged(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try add_NodeChanged(value: del_value);
    }
    // [IsSpecialName] void remove_NodeChanged(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.remove_NodeChanged(System.Xml.XmlNodeChangedEventHandler)
    open func remove_NodeChanged(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__remove_NodeChanged_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_NodeChanged(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try remove_NodeChanged(value: del_value);
    }
    // [IsSpecialName] void add_NodeChanging(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.add_NodeChanging(System.Xml.XmlNodeChangedEventHandler)
    open func add_NodeChanging(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__add_NodeChanging_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_NodeChanging(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try add_NodeChanging(value: del_value);
    }
    // [IsSpecialName] void remove_NodeChanging(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.remove_NodeChanging(System.Xml.XmlNodeChangedEventHandler)
    open func remove_NodeChanging(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__remove_NodeChanging_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_NodeChanging(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try remove_NodeChanging(value: del_value);
    }
    // [IsSpecialName] void add_NodeInserted(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.add_NodeInserted(System.Xml.XmlNodeChangedEventHandler)
    open func add_NodeInserted(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__add_NodeInserted_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_NodeInserted(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try add_NodeInserted(value: del_value);
    }
    // [IsSpecialName] void remove_NodeInserted(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.remove_NodeInserted(System.Xml.XmlNodeChangedEventHandler)
    open func remove_NodeInserted(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__remove_NodeInserted_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_NodeInserted(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try remove_NodeInserted(value: del_value);
    }
    // [IsSpecialName] void add_NodeInserting(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.add_NodeInserting(System.Xml.XmlNodeChangedEventHandler)
    open func add_NodeInserting(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__add_NodeInserting_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_NodeInserting(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try add_NodeInserting(value: del_value);
    }
    // [IsSpecialName] void remove_NodeInserting(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.remove_NodeInserting(System.Xml.XmlNodeChangedEventHandler)
    open func remove_NodeInserting(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__remove_NodeInserting_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_NodeInserting(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try remove_NodeInserting(value: del_value);
    }
    // [IsSpecialName] void add_NodeRemoved(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.add_NodeRemoved(System.Xml.XmlNodeChangedEventHandler)
    open func add_NodeRemoved(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__add_NodeRemoved_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_NodeRemoved(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try add_NodeRemoved(value: del_value);
    }
    // [IsSpecialName] void remove_NodeRemoved(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.remove_NodeRemoved(System.Xml.XmlNodeChangedEventHandler)
    open func remove_NodeRemoved(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__remove_NodeRemoved_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_NodeRemoved(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try remove_NodeRemoved(value: del_value);
    }
    // [IsSpecialName] void add_NodeRemoving(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.add_NodeRemoving(System.Xml.XmlNodeChangedEventHandler)
    open func add_NodeRemoving(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__add_NodeRemoving_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_NodeRemoving(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try add_NodeRemoving(value: del_value);
    }
    // [IsSpecialName] void remove_NodeRemoving(System.Xml.XmlNodeChangedEventHandler)
// docid: M:System.Xml.XmlDocument.remove_NodeRemoving(System.Xml.XmlNodeChangedEventHandler)
    open func remove_NodeRemoving(value : dotnet.System.Xml.XmlNodeChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocument_void__remove_NodeRemoving_0__1__XmlNodeChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_NodeRemoving(value : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.XmlNodeChangedEventHandler(value);
        return try remove_NodeRemoving(value: del_value);
    }
    /**
    Gets the base URI of the current node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets the root  for the document.

    */
    open var DocumentElement : Optional<dotnet.System.Xml.XmlElement> {
        get {
            return try! get_DocumentElement();
        }
    }
    /**
    Gets the node containing the DOCTYPE declaration.

    */
    open var DocumentType : Optional<dotnet.System.Xml.XmlDocumentType> {
        get {
            return try! get_DocumentType();
        }
    }
    /**
    Gets the  object for the current document.

    */
    open var Implementation : dotnet.System.Xml.XmlImplementation {
        get {
            return try! get_Implementation();
        }
    }
    /**
    Gets or sets the markup representing the children of the current node.

    */
    open override var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    Gets a value indicating whether the current node is read-only.

    */
    open override var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the  associated with this implementation.

    */
    open var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the  to which the current node belongs.

    */
    open override var OwnerDocument : Optional<dotnet.System.Xml.XmlDocument> {
        get {
            return try! get_OwnerDocument();
        }
    }
    /**
    Gets the parent node of this node (for nodes that can have parents).

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets or sets a value indicating whether to preserve white space in element content.

    */
    open var PreserveWhitespace : Bool {
        get {
            return try! get_PreserveWhitespace();
        }
        set(v) {
            return try! set_PreserveWhitespace(value: v);
        }
    }
    /**
    Returns the Post-Schema-Validation-Infoset (PSVI) of the node.

    */
    open override var SchemaInfo : dotnet.System.Xml.Schema.IXmlSchemaInfo {
        get {
            return try! get_SchemaInfo();
        }
    }
    /**
    Gets or sets the  object associated with this .

    */
    open var Schemas : dotnet.System.Xml.Schema.XmlSchemaSet {
        get {
            return try! get_Schemas();
        }
        set(v) {
            return try! set_Schemas(value: v);
        }
    }
} // XmlDocument


// type: System.Xml.XmlDocumentFragment
    /**
    Represents a lightweight object that is useful for tree insert operations.

    */
open class XmlDocumentFragment
    :
    dotnet.System.Xml.XmlNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDocumentFragment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocumentFragment_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocumentFragment_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XmlDocumentFragment.get_InnerXml
    open override func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlDocumentFragment.set_InnerXml(System.String)
    open override func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocumentFragment_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlDocumentFragment.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlDocumentFragment.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlDocumentFragment.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlDocument get_OwnerDocument()
// docid: M:System.Xml.XmlDocumentFragment.get_OwnerDocument
    open override func get_OwnerDocument() throws -> dotnet.System.Xml.XmlDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_XmlDocument__get_OwnerDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDocument(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlDocumentFragment.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentFragment_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets or sets the markup representing the children of this node.

    */
    open override var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the  to which this node belongs.

    */
    open override var OwnerDocument : dotnet.System.Xml.XmlDocument {
        get {
            return try! get_OwnerDocument();
        }
    }
    /**
    Gets the parent of this node (for nodes that can have parents).

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
} // XmlDocumentFragment


// type: System.Xml.XmlDocumentType
    /**
    Represents the document type declaration.

    */
open class XmlDocumentType
    :
    dotnet.System.Xml.XmlLinkedNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDocumentType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified . For  nodes, this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocumentType_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDocumentType_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNamedNodeMap get_Entities()
// docid: M:System.Xml.XmlDocumentType.get_Entities
    open func get_Entities() throws -> dotnet.System.Xml.XmlNamedNodeMap {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_XmlNamedNodeMap__get_Entities_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNamedNodeMap(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_InternalSubset()
// docid: M:System.Xml.XmlDocumentType.get_InternalSubset
    open func get_InternalSubset() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_String__get_InternalSubset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Xml.XmlDocumentType.get_IsReadOnly
    open override func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlDocumentType.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlDocumentType.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlDocumentType.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNamedNodeMap get_Notations()
// docid: M:System.Xml.XmlDocumentType.get_Notations
    open func get_Notations() throws -> dotnet.System.Xml.XmlNamedNodeMap {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_XmlNamedNodeMap__get_Notations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNamedNodeMap(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PublicId()
// docid: M:System.Xml.XmlDocumentType.get_PublicId
    open func get_PublicId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_String__get_PublicId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SystemId()
// docid: M:System.Xml.XmlDocumentType.get_SystemId
    open func get_SystemId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDocumentType_String__get_SystemId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the collection of  nodes declared in the document type declaration.

    */
    open var Entities : dotnet.System.Xml.XmlNamedNodeMap {
        get {
            return try! get_Entities();
        }
    }
    /**
    Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.

    */
    open var InternalSubset : Optional<dotnet.System.String> {
        get {
            return try! get_InternalSubset();
        }
    }
    /**
    Gets a value indicating whether the node is read-only.

    */
    open override var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the collection of  nodes present in the document type declaration.

    */
    open var Notations : dotnet.System.Xml.XmlNamedNodeMap {
        get {
            return try! get_Notations();
        }
    }
    /**
    Gets the value of the public identifier on the DOCTYPE declaration.

    */
    open var PublicId : Optional<dotnet.System.String> {
        get {
            return try! get_PublicId();
        }
    }
    /**
    Gets the value of the system identifier on the DOCTYPE declaration.

    */
    open var SystemId : Optional<dotnet.System.String> {
        get {
            return try! get_SystemId();
        }
    }
} // XmlDocumentType


// type: System.Xml.XmlElement
    /**
    Represents an element.

    */
open class XmlElement
    :
    dotnet.System.Xml.XmlLinkedNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlElement_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlElement.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself (and its attributes if the node is an ).
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String)
// docid: M:System.Xml.XmlElement.GetAttribute(System.String)
    /**
    Returns the value for the attribute with the specified name.

    - Parameter name: The name of the attribute to retrieve. This is a qualified name. It is matched against the  property of the matching node.
    - Returns: The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.

    */
    open func GetAttribute(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__GetAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String, System.String)
// docid: M:System.Xml.XmlElement.GetAttribute(System.String,System.String)
    /**
    Returns the value for the attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute to retrieve.
    - Parameter namespaceURI: The namespace URI of the attribute to retrieve.
    - Returns: The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.

    */
    open func GetAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__GetAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute GetAttributeNode(System.String)
// docid: M:System.Xml.XmlElement.GetAttributeNode(System.String)
    /**
    Returns the  with the specified name.

    - Parameter name: The name of the attribute to retrieve. This is a qualified name. It is matched against the  property of the matching node.
    - Returns: The specified  or  if a matching attribute was not found.

    */
    open func GetAttributeNode(name : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttribute__GetAttributeNode_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlAttribute GetAttributeNode(System.String, System.String)
// docid: M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
    /**
    Returns the  with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The specified  or  if a matching attribute was not found.

    */
    open func GetAttributeNode(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttribute__GetAttributeNode_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNodeList GetElementsByTagName(System.String)
// docid: M:System.Xml.XmlElement.GetElementsByTagName(System.String)
    /**
    Returns an  containing a list of all descendant elements that match the specified .

    - Parameter name: The name tag to match. This is a qualified name. It is matched against the  property of the matching node. The asterisk ((ASTERISK)) is a special value that matches all tags.
    - Returns: An  containing a list of all matching nodes. The list is empty if there are no matching nodes.

    */
    open func GetElementsByTagName(name : dotnet.System.String) throws -> dotnet.System.Xml.XmlNodeList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNodeList__GetElementsByTagName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeList(hndl : __return);
        }
    }
    // System.Xml.XmlNodeList GetElementsByTagName(System.String, System.String)
// docid: M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
    /**
    Returns an  containing a list of all descendant elements that match the specified  and .

    - Parameter localName: The local name to match. The asterisk ((ASTERISK)) is a special value that matches all tags.
    - Parameter namespaceURI: The namespace URI to match.
    - Returns: An  containing a list of all matching nodes. The list is empty if there are no matching nodes.

    */
    open func GetElementsByTagName(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.Xml.XmlNodeList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNodeList__GetElementsByTagName_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeList(hndl : __return);
        }
    }
    // bool HasAttribute(System.String)
// docid: M:System.Xml.XmlElement.HasAttribute(System.String)
    /**
    Determines whether the current node has an attribute with the specified name.

    - Parameter name: The name of the attribute to find. This is a qualified name. It is matched against the  property of the matching node.
    - Returns: 
         if the current node has the specified attribute; otherwise, .

    */
    open func HasAttribute(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_bool__HasAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool HasAttribute(System.String, System.String)
// docid: M:System.Xml.XmlElement.HasAttribute(System.String,System.String)
    /**
    Determines whether the current node has an attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute to find.
    - Parameter namespaceURI: The namespace URI of the attribute to find.
    - Returns: 
         if the current node has the specified attribute; otherwise, .

    */
    open func HasAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_bool__HasAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAll()
// docid: M:System.Xml.XmlElement.RemoveAll
    /**
    Removes all specified attributes and children of the current node. Default attributes are not removed.

    */
    open override func RemoveAll() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__RemoveAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAllAttributes()
// docid: M:System.Xml.XmlElement.RemoveAllAttributes
    /**
    Removes all specified attributes from the element. Default attributes are not removed.

    */
    open func RemoveAllAttributes() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__RemoveAllAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAttribute(System.String)
// docid: M:System.Xml.XmlElement.RemoveAttribute(System.String)
    /**
    Removes an attribute by name.

    - Parameter name: The name of the attribute to remove. This is a qualified name. It is matched against the  property of the matching node.
    */
    open func RemoveAttribute(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__RemoveAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAttribute(System.String, System.String)
// docid: M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
    /**
    Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).

    - Parameter localName: The local name of the attribute to remove.
    - Parameter namespaceURI: The namespace URI of the attribute to remove.
    */
    open func RemoveAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__RemoveAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlNode RemoveAttributeAt(System.Int32)
// docid: M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
    /**
    Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).

    - Parameter i: The index of the node to remove. The first node has index 0.
    - Returns: The attribute node removed or  if there is no node at the given index.

    */
    open func RemoveAttributeAt(i : Swift.Int32) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNode__RemoveAttributeAt_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlAttribute RemoveAttributeNode(System.String, System.String)
// docid: M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
    /**
    Removes the  specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The removed  or  if the  does not have a matching attribute node.

    */
    open func RemoveAttributeNode(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttribute__RemoveAttributeNode_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlAttribute RemoveAttributeNode(System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
    /**
    Removes the specified .

    - Parameter oldAttr: The  node to remove. If the removed attribute has a default value, it is immediately replaced.
    - Returns: The removed  or  if  is not an attribute node of the .

    */
    open func RemoveAttributeNode(oldAttr : dotnet.System.Xml.XmlAttribute) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttribute__RemoveAttributeNode_0__1__XmlAttribute(&__thrown, self.get_handle(), oldAttr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetAttribute(System.String, System.String)
// docid: M:System.Xml.XmlElement.SetAttribute(System.String,System.String)
    /**
    Sets the value of the attribute with the specified name.

    - Parameter name: The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.
    - Parameter value: The value to set for the attribute.
    */
    open func SetAttribute(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__SetAttribute_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String SetAttribute(System.String, System.String, System.String)
// docid: M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
    /**
    Sets the value of the attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Parameter value: The value to set for the attribute.
    - Returns: The attribute value.

    */
    open func SetAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__SetAttribute_0__3__String_String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlAttribute SetAttributeNode(System.String, System.String)
// docid: M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
    /**
    Adds the specified .

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The  to add.

    */
    open func SetAttributeNode(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttribute__SetAttributeNode_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttribute(hndl : __return);
        }
    }
    // System.Xml.XmlAttribute SetAttributeNode(System.Xml.XmlAttribute)
// docid: M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
    /**
    Adds the specified .

    - Parameter newAttr: The  node to add to the attribute collection for this element.
    - Returns: If the attribute replaces an existing attribute with the same name, the old  is returned; otherwise,  is returned.

    */
    open func SetAttributeNode(newAttr : dotnet.System.Xml.XmlAttribute) throws -> Optional<dotnet.System.Xml.XmlAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttribute__SetAttributeNode_0__1__XmlAttribute(&__thrown, self.get_handle(), newAttr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the current node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlAttributeCollection get_Attributes()
// docid: M:System.Xml.XmlElement.get_Attributes
    open override func get_Attributes() throws -> dotnet.System.Xml.XmlAttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlAttributeCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlAttributeCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasAttributes()
// docid: M:System.Xml.XmlElement.get_HasAttributes
    open func get_HasAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_bool__get_HasAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_InnerText()
// docid: M:System.Xml.XmlElement.get_InnerText
    open override func get_InnerText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__get_InnerText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlElement.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XmlElement.get_InnerXml
    open override func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlElement.set_InnerXml(System.String)
    open override func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Xml.XmlElement.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsEmpty(bool)
// docid: M:System.Xml.XmlElement.set_IsEmpty(System.Boolean)
    open func set_IsEmpty(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__set_IsEmpty_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlElement.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlElement.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlElement.get_NamespaceURI
    open override func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_NextSibling()
// docid: M:System.Xml.XmlElement.get_NextSibling
    open override func get_NextSibling() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNode__get_NextSibling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlElement.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlDocument get_OwnerDocument()
// docid: M:System.Xml.XmlElement.get_OwnerDocument
    open override func get_OwnerDocument() throws -> dotnet.System.Xml.XmlDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlDocument__get_OwnerDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDocument(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlElement.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlElement.get_Prefix
    open override func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:System.Xml.XmlElement.set_Prefix(System.String)
    open override func set_Prefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlElement_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XmlElement.get_SchemaInfo
    open override func get_SchemaInfo() throws -> dotnet.System.Xml.Schema.IXmlSchemaInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlElement_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __return);
        }
    }
    /**
    Gets an  containing the list of attributes for this node.

    */
    open override var Attributes : dotnet.System.Xml.XmlAttributeCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets a  value indicating whether the current node has any attributes.

    */
    open var HasAttributes : Bool {
        get {
            return try! get_HasAttributes();
        }
    }
    /**
    Gets or sets the concatenated values of the node and all its children.

    */
    open override var InnerText : dotnet.System.String {
        get {
            return try! get_InnerText();
        }
        set(v) {
            return try! set_InnerText(value: v);
        }
    }
    /**
    Gets or sets the markup representing just the children of this node.

    */
    open override var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    Gets or sets the tag format of the element.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
        set(v) {
            return try! set_IsEmpty(value: v);
        }
    }
    /**
    Gets the local name of the current node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the namespace URI of this node.

    */
    open override var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets the  immediately following this element.

    */
    open override var NextSibling : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_NextSibling();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the  to which this node belongs.

    */
    open override var OwnerDocument : dotnet.System.Xml.XmlDocument {
        get {
            return try! get_OwnerDocument();
        }
    }
    /**
    Gets the parent of this node (for nodes that can have parents).

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets or sets the namespace prefix of this node.

    */
    open override var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v);
        }
    }
    /**
    Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.

    */
    open override var SchemaInfo : dotnet.System.Xml.Schema.IXmlSchemaInfo {
        get {
            return try! get_SchemaInfo();
        }
    }
} // XmlElement


// type: System.Xml.XmlEntity
    /**
    Represents an entity declaration, such as <!ENTITY... >.

    */
open class XmlEntity
    :
    dotnet.System.Xml.XmlNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlEntity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlEntity.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node. Entity nodes cannot be cloned. Calling this method on an  object throws an exception.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: A copy of the  from which the method is called.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified . For  nodes, this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntity_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified . For  nodes, this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntity_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlEntity.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_InnerText()
// docid: M:System.Xml.XmlEntity.get_InnerText
    open override func get_InnerText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_InnerText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlEntity.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntity_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XmlEntity.get_InnerXml
    open override func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlEntity.set_InnerXml(System.String)
    open override func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntity_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Xml.XmlEntity.get_IsReadOnly
    open override func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlEntity.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlEntity.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlEntity.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_NotationName()
// docid: M:System.Xml.XmlEntity.get_NotationName
    open func get_NotationName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_NotationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_OuterXml()
// docid: M:System.Xml.XmlEntity.get_OuterXml
    open override func get_OuterXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_OuterXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PublicId()
// docid: M:System.Xml.XmlEntity.get_PublicId
    open func get_PublicId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_PublicId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SystemId()
// docid: M:System.Xml.XmlEntity.get_SystemId
    open func get_SystemId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntity_String__get_SystemId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the base Uniform Resource Identifier (URI) of the current node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets the concatenated values of the entity node and all its children.

    */
    open override var InnerText : dotnet.System.String {
        get {
            return try! get_InnerText();
        }
        set(v) {
            return try! set_InnerText(value: v);
        }
    }
    /**
    Gets the markup representing the children of this node.

    */
    open override var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    Gets a value indicating whether the node is read-only.

    */
    open override var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets the name of the node without the namespace prefix.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the name of the optional NDATA attribute on the entity declaration.

    */
    open var NotationName : Optional<dotnet.System.String> {
        get {
            return try! get_NotationName();
        }
    }
    /**
    Gets the markup representing this node and all its children.

    */
    open override var OuterXml : dotnet.System.String {
        get {
            return try! get_OuterXml();
        }
    }
    /**
    Gets the value of the public identifier on the entity declaration.

    */
    open var PublicId : Optional<dotnet.System.String> {
        get {
            return try! get_PublicId();
        }
    }
    /**
    Gets the value of the system identifier on the entity declaration.

    */
    open var SystemId : Optional<dotnet.System.String> {
        get {
            return try! get_SystemId();
        }
    }
} // XmlEntity


// type: System.Xml.XmlEntityReference
    /**
    Represents an entity reference node.

    */
open class XmlEntityReference
    :
    dotnet.System.Xml.XmlLinkedNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlEntityReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. For  nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntityReference_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntityReference_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlEntityReference.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Xml.XmlEntityReference.get_IsReadOnly
    open override func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlEntityReference.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlEntityReference.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlEntityReference.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlEntityReference.get_Value
    open override func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlEntityReference_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlEntityReference.set_Value(System.String)
    open override func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlEntityReference_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the base Uniform Resource Identifier (URI) of the current node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets a value indicating whether the node is read-only.

    */
    open override var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the value of the node.

    */
    open override var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlEntityReference


// type: System.Xml.XmlException
    /**
    Returns detailed information about the last exception.

    */
open class XmlException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.XmlException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error description.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Xml.XmlException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The description of the error condition.
    - Parameter innerException: The  that threw the , if any. This value can be .
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Int32, System.Int32)
// docid: M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the specified message, inner exception, line number, and line position.

    - Parameter message: The error description.
    - Parameter innerException: The exception that is the cause of the current exception. This value can be .
    - Parameter lineNumber: The line number indicating where the error occurred.
    - Parameter linePosition: The line position indicating where the error occurred.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>, lineNumber : Swift.Int32, linePosition : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlException_ctor_0__4__String_Exception_i32_i32(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil, lineNumber, linePosition);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Streams all the  properties into the  class for the given .

    - Parameter info: The  object.
    - Parameter context: The  object.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.XmlException.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlException_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.XmlException.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlException_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Xml.XmlException.get_Message
    open override func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlException_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SourceUri()
// docid: M:System.Xml.XmlException.get_SourceUri
    open func get_SourceUri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlException_String__get_SourceUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the line number indicating where the error occurred. Line numbers start at 1.

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the line position indicating where the error occurred. Line position starts at 1.

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets a message describing the current exception.

    */
    open override var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
    /**
    Gets the location of the XML file.

    */
    open var SourceUri : Optional<dotnet.System.String> {
        get {
            return try! get_SourceUri();
        }
    }
} // XmlException


// type: System.Xml.XmlImplementation
    /**
    Defines the context for a set of  objects.

    */
open class XmlImplementation
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlImplementation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlImplementation.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlImplementation_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the  specified.

    - Parameter nt: An  object.
    */
    public init(nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlImplementation_ctor_0__1__XmlNameTable(&__thrown, nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlDocument CreateDocument()
// docid: M:System.Xml.XmlImplementation.CreateDocument
    /**
    Creates a new .

    - Returns: The new  object.

    */
    open func CreateDocument() throws -> dotnet.System.Xml.XmlDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlImplementation_XmlDocument__CreateDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDocument(hndl : __return);
        }
    }
    // bool HasFeature(System.String, System.String)
// docid: M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)
    /**
    Tests if the Document Object Model (DOM) implementation implements a specific feature.

    - Parameter strFeature: The package name of the feature to test. This name is not case-sensitive.
    - Parameter strVersion: This is the version number of the package name to test. If the version is not specified (), supporting any version of the feature causes the method to return .
    - Returns: 
         if the feature is implemented in the specified version; otherwise, .  
  
 The following table shows the combinations that cause  to return .  
  
  strFeature strVersion XML 1.0 XML 2.0

    */
    open func HasFeature(strFeature : dotnet.System.String, strVersion : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlImplementation_bool__HasFeature_0__2__String_String(&__thrown, self.get_handle(), strFeature.get_handle(), strVersion.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // XmlImplementation


// type: System.Xml.XmlLinkedNode
    /**
    Gets the node immediately preceding or following this node.

    */
open class XmlLinkedNode
    :
    dotnet.System.Xml.XmlNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlLinkedNode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Xml.XmlNode get_NextSibling()
// docid: M:System.Xml.XmlLinkedNode.get_NextSibling
    open override func get_NextSibling() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlLinkedNode_XmlNode__get_NextSibling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousSibling()
// docid: M:System.Xml.XmlLinkedNode.get_PreviousSibling
    open override func get_PreviousSibling() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlLinkedNode_XmlNode__get_PreviousSibling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the node immediately following this node.

    */
    open override var NextSibling : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_NextSibling();
        }
    }
    /**
    Gets the node immediately preceding this node.

    */
    open override var PreviousSibling : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousSibling();
        }
    }
} // XmlLinkedNode


// type: System.Xml.XmlNameTable
    /**
    Table of atomized string objects.

    */
open class XmlNameTable
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNameTable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String Add(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, atomizes the specified string and adds it to the .

    - Parameter array: The character array containing the name to add.
    - Parameter offset: Zero-based index into the array specifying the first character of the name.
    - Parameter length: The number of characters in the name.
    - Returns: The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.

    */
    open func Add(array : dotnet.System_Arr<dotnet.System.Char>, offset : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNameTable_String__Add_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), array.get_handle(), offset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Add(System.String)
// docid: M:System.Xml.XmlNameTable.Add(System.String)
    /**
    When overridden in a derived class, atomizes the specified string and adds it to the .

    - Parameter array: The name to add.
    - Returns: The new atomized string or the existing one if it already exists.

    */
    open func Add(array : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNameTable_String__Add_0__1__String(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Get(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.

    - Parameter array: The character array containing the name to look up.
    - Parameter offset: The zero-based index into the array specifying the first character of the name.
    - Parameter length: The number of characters in the name.
    - Returns: The atomized string or  if the string has not already been atomized. If  is zero, String.Empty is returned.

    */
    open func Get(array : dotnet.System_Arr<dotnet.System.Char>, offset : Swift.Int32, length : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNameTable_String__Get_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), array.get_handle(), offset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Get(System.String)
// docid: M:System.Xml.XmlNameTable.Get(System.String)
    /**
    When overridden in a derived class, gets the atomized string containing the same value as the specified string.

    - Parameter array: The name to look up.
    - Returns: The atomized string or  if the string has not already been atomized.

    */
    open func Get(array : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNameTable_String__Get_0__1__String(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlNameTable


// type: System.Xml.XmlNamedNodeMap
    /**
    Represents a collection of nodes that can be accessed by name or index.

    */
open class XmlNamedNodeMap
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNamedNodeMap_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Xml.XmlNamedNodeMap.GetEnumerator
    /**
    Provides support for the "foreach" style iteration over the collection of nodes in the .

    - Returns: An enumerator object.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Xml.XmlNode GetNamedItem(System.String)
// docid: M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)
    /**
    Retrieves an  specified by name.

    - Parameter name: The qualified name of the node to retrieve. It is matched against the  property of the matching node.
    - Returns: An  with the specified name or  if a matching node is not found.

    */
    open func GetNamedItem(name : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_XmlNode__GetNamedItem_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode GetNamedItem(System.String, System.String)
// docid: M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)
    /**
    Retrieves a node with the matching  and .

    - Parameter localName: The local name of the node to retrieve.
    - Parameter namespaceURI: The namespace Uniform Resource Identifier (URI) of the node to retrieve.
    - Returns: An  with the matching local name and namespace URI or  if a matching node was not found.

    */
    open func GetNamedItem(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_XmlNode__GetNamedItem_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode Item(System.Int32)
// docid: M:System.Xml.XmlNamedNodeMap.Item(System.Int32)
    /**
    Retrieves the node at the specified index in the .

    - Parameter index: The index position of the node to retrieve from the . The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is  -1.
    - Returns: The  at the specified index. If  is less than 0 or greater than or equal to the  property,  is returned.

    */
    open func Item(index : Swift.Int32) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_XmlNode__Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode RemoveNamedItem(System.String)
// docid: M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)
    /**
    Removes the node from the .

    - Parameter name: The qualified name of the node to remove. The name is matched against the  property of the matching node.
    - Returns: The  removed from this  or  if a matching node was not found.

    */
    open func RemoveNamedItem(name : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_XmlNode__RemoveNamedItem_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode RemoveNamedItem(System.String, System.String)
// docid: M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)
    /**
    Removes a node with the matching  and .

    - Parameter localName: The local name of the node to remove.
    - Parameter namespaceURI: The namespace URI of the node to remove.
    - Returns: The  removed or  if a matching node was not found.

    */
    open func RemoveNamedItem(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_XmlNode__RemoveNamedItem_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode SetNamedItem(System.Xml.XmlNode)
// docid: M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)
    /**
    Adds an  using its  property.

    - Parameter node: An  to store in the . If a node with that name is already present in the map, it is replaced by the new one.
    - Returns: If the  replaces an existing node with the same name, the old node is returned; otherwise,  is returned.

    */
    open func SetNamedItem(node : Optional<dotnet.System.Xml.XmlNode>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_XmlNode__SetNamedItem_0__1__XmlNode(&__thrown, self.get_handle(), node?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.XmlNamedNodeMap.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamedNodeMap_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of nodes in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // XmlNamedNodeMap


// type: System.Xml.XmlNamespaceManager
    /**
    Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces.

    */
open class XmlNamespaceManager
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Xml_IXmlNamespaceResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNamespaceManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter nameTable: The  to use.
    */
    public init(nameTable : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlNamespaceManager_ctor_0__1__XmlNameTable(&__thrown, nameTable.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddNamespace(System.String, System.String)
// docid: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
    /**
    Adds the given namespace to the collection.

    - Parameter prefix: The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.  
  
 NoteIf the  will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the , refer to the  and  methods.
    - Parameter uri: The namespace to add.
    */
    open func AddNamespace(prefix : dotnet.System.String, uri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNamespaceManager_void__AddNamespace_0__2__String_String(&__thrown, self.get_handle(), prefix.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Xml.XmlNamespaceManager.GetEnumerator
    /**
    Returns an enumerator to use to iterate through the namespaces in the .

    - Returns: An  containing the prefixes stored by the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetNamespacesInScope(System.Xml.XmlNamespaceScope)
// docid: M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    /**
    Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.

    - Parameter scope: An enumeration value that specifies the type of namespace nodes to return.
    - Returns: A collection of namespace and prefix pairs currently in scope.

    */
    open func GetNamespacesInScope(scope : dotnet.System.Xml.XmlNamespaceScope) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_System_Collections_Generic_IDictionary_string_string___GetNamespacesInScope_0__1__XmlNamespaceScope(&__thrown, self.get_handle(), scope.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // bool HasNamespace(System.String)
// docid: M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)
    /**
    Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.

    - Parameter prefix: The prefix of the namespace you want to find.
    - Returns: 
         if there is a namespace defined; otherwise, .

    */
    open func HasNamespace(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_bool__HasNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
    /**
    Gets the namespace URI for the specified prefix.

    - Parameter prefix: The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.
    - Returns: The namespace URI for  or  if there is no mapped namespace. The returned string is atomized.  
  
 For more information on atomized strings, see the  class.

    */
    open func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String LookupPrefix(System.String)
// docid: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
    /**
    Finds the prefix declared for the given namespace URI.

    - Parameter uri: The namespace to resolve for the prefix.
    - Returns: The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then  is returned.

    */
    open func LookupPrefix(uri : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_String__LookupPrefix_0__1__String(&__thrown, self.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool PopScope()
// docid: M:System.Xml.XmlNamespaceManager.PopScope
    /**
    Pops a namespace scope off the stack.

    - Returns: 
         if there are namespace scopes left on the stack;  if there are no more namespaces to pop.

    */
    open func PopScope() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_bool__PopScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void PushScope()
// docid: M:System.Xml.XmlNamespaceManager.PushScope
    /**
    Pushes a namespace scope onto the stack.

    */
    open func PushScope() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNamespaceManager_void__PushScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveNamespace(System.String, System.String)
// docid: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
    /**
    Removes the given namespace for the given prefix.

    - Parameter prefix: The prefix for the namespace
    - Parameter uri: The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.
    */
    open func RemoveNamespace(prefix : dotnet.System.String, uri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNamespaceManager_void__RemoveNamespace_0__2__String_String(&__thrown, self.get_handle(), prefix.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultNamespace()
// docid: M:System.Xml.XmlNamespaceManager.get_DefaultNamespace
    open func get_DefaultNamespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_String__get_DefaultNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlNamespaceManager.get_NameTable
    open func get_NameTable() throws -> Optional<dotnet.System.Xml.XmlNameTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNamespaceManager_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNameTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the namespace URI for the default namespace.

    */
    open var DefaultNamespace : dotnet.System.String {
        get {
            return try! get_DefaultNamespace();
        }
    }
    /**
    Gets the  associated with this object.

    */
    open var NameTable : Optional<dotnet.System.Xml.XmlNameTable> {
        get {
            return try! get_NameTable();
        }
    }
} // XmlNamespaceManager


// type: System.Xml.XmlNamespaceScope
    /**
    Defines the namespace scope.

    */
public struct XmlNamespaceScope : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNamespaceScope_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlNamespaceScope All
    /**
    All namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.

    */
    public static var All : dotnet.System.Xml.XmlNamespaceScope {
        get {
        let __return = dotnet.System.Xml.XmlNamespaceScope(val: System_Xml_XmlNamespaceScope_get_All());
            return __return;
        }
    }
    // static field: System.Xml.XmlNamespaceScope ExcludeXml
    /**
    All namespaces defined in the scope of the current node, excluding the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.

    */
    public static var ExcludeXml : dotnet.System.Xml.XmlNamespaceScope {
        get {
        let __return = dotnet.System.Xml.XmlNamespaceScope(val: System_Xml_XmlNamespaceScope_get_ExcludeXml());
            return __return;
        }
    }
    // static field: System.Xml.XmlNamespaceScope Local
    /**
    All namespaces that are defined locally at the current node.

    */
    public static var Local : dotnet.System.Xml.XmlNamespaceScope {
        get {
        let __return = dotnet.System.Xml.XmlNamespaceScope(val: System_Xml_XmlNamespaceScope_get_Local());
            return __return;
        }
    }
} // XmlNamespaceScope


// type: System.Xml.XmlNode
    /**
    Represents a single node in the XML document.

    */
open class XmlNode
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_ICloneable,
    System_Xml_XPath_IXPathNavigable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode AppendChild(System.Xml.XmlNode)
// docid: M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
    /**
    Adds the specified node to the end of the list of child nodes, of this node.

    - Parameter newChild: The node to add. All the contents of the node to be added are moved into the specified location.
    - Returns: The node added.

    */
    open func AppendChild(newChild : dotnet.System.Xml.XmlNode) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__AppendChild_0__1__XmlNode(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode Clone()
// docid: M:System.Xml.XmlNode.Clone
    /**
    Creates a duplicate of this node.

    - Returns: The cloned node.

    */
    open func Clone() throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlNode.CloneNode(System.Boolean)
    /**
    Creates a duplicate of the node, when overridden in a derived class.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: The cloned node.

    */
    open func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNavigator CreateNavigator()
// docid: M:System.Xml.XmlNode.CreateNavigator
    /**
    Creates an  for navigating this object.

    - Returns: An  object used to navigate the node. The  is positioned on the node from which the method was called. It is not positioned on the root of the document.

    */
    open func CreateNavigator() throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XPathNavigator__CreateNavigator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Xml.XmlNode.GetEnumerator
    /**
    Gets an enumerator that iterates through the child nodes in the current node.

    - Returns: An  object that can be used to iterate through the child nodes in the current node.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.String GetNamespaceOfPrefix(System.String)
// docid: M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
    /**
    Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.

    - Parameter prefix: The prefix whose namespace URI you want to find.
    - Returns: The namespace URI of the specified prefix.

    */
    open func GetNamespaceOfPrefix(prefix : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__GetNamespaceOfPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetPrefixOfNamespace(System.String)
// docid: M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
    /**
    Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.

    - Parameter namespaceURI: The namespace URI whose prefix you want to find.
    - Returns: The prefix for the specified namespace URI.

    */
    open func GetPrefixOfNamespace(namespaceURI : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__GetPrefixOfNamespace_0__1__String(&__thrown, self.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Xml.XmlNode InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)
// docid: M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
    /**
    Inserts the specified node immediately after the specified reference node.

    - Parameter newChild: The node to insert.
    - Parameter refChild: The reference node.  is placed after .
    - Returns: The node being inserted.

    */
    open func InsertAfter(newChild : dotnet.System.Xml.XmlNode, refChild : Optional<dotnet.System.Xml.XmlNode>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__InsertAfter_0__2__XmlNode_XmlNode(&__thrown, self.get_handle(), newChild.get_handle(), refChild?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)
// docid: M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
    /**
    Inserts the specified node immediately before the specified reference node.

    - Parameter newChild: The node to insert.
    - Parameter refChild: The reference node.  is placed before this node.
    - Returns: The node being inserted.

    */
    open func InsertBefore(newChild : dotnet.System.Xml.XmlNode, refChild : Optional<dotnet.System.Xml.XmlNode>) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__InsertBefore_0__2__XmlNode_XmlNode(&__thrown, self.get_handle(), newChild.get_handle(), refChild?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Normalize()
// docid: M:System.Xml.XmlNode.Normalize
    /**
    Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a "normal" form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.

    */
    open func Normalize() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__Normalize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlNode PrependChild(System.Xml.XmlNode)
// docid: M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
    /**
    Adds the specified node to the beginning of the list of child nodes for this node.

    - Parameter newChild: The node to add. All the contents of the node to be added are moved into the specified location.
    - Returns: The node added.

    */
    open func PrependChild(newChild : dotnet.System.Xml.XmlNode) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__PrependChild_0__1__XmlNode(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RemoveAll()
// docid: M:System.Xml.XmlNode.RemoveAll
    /**
    Removes all the child nodes and/or attributes of the current node.

    */
    open func RemoveAll() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__RemoveAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlNode RemoveChild(System.Xml.XmlNode)
// docid: M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
    /**
    Removes specified child node.

    - Parameter oldChild: The node being removed.
    - Returns: The node removed.

    */
    open func RemoveChild(oldChild : dotnet.System.Xml.XmlNode) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__RemoveChild_0__1__XmlNode(&__thrown, self.get_handle(), oldChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNode ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)
// docid: M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
    /**
    Replaces the child node  with  node.

    - Parameter newChild: The new node to put in the child list.
    - Parameter oldChild: The node being replaced in the list.
    - Returns: The node replaced.

    */
    open func ReplaceChild(newChild : dotnet.System.Xml.XmlNode, oldChild : dotnet.System.Xml.XmlNode) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__ReplaceChild_0__2__XmlNode_XmlNode(&__thrown, self.get_handle(), newChild.get_handle(), oldChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlNodeList SelectNodes(System.String)
// docid: M:System.Xml.XmlNode.SelectNodes(System.String)
    /**
    Selects a list of nodes matching the XPath expression.

    - Parameter xpath: The XPath expression.
    - Returns: An  containing a collection of nodes matching the XPath query.

    */
    open func SelectNodes(xpath : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlNodeList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNodeList__SelectNodes_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNodeList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNodeList SelectNodes(System.String, System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
    /**
    Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied .

    - Parameter xpath: The XPath expression. See XPath Examples.
    - Parameter nsmgr: An  to use for resolving namespaces for prefixes in the XPath expression.
    - Returns: An  containing a collection of nodes matching the XPath query.

    */
    open func SelectNodes(xpath : dotnet.System.String, nsmgr : dotnet.System.Xml.XmlNamespaceManager) throws -> Optional<dotnet.System.Xml.XmlNodeList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNodeList__SelectNodes_0__2__String_XmlNamespaceManager(&__thrown, self.get_handle(), xpath.get_handle(), nsmgr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNodeList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode SelectSingleNode(System.String)
// docid: M:System.Xml.XmlNode.SelectSingleNode(System.String)
    /**
    Selects the first  that matches the XPath expression.

    - Parameter xpath: The XPath expression. See XPath Examples.
    - Returns: The first  that matches the XPath query or  if no matching node is found.

    */
    open func SelectSingleNode(xpath : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__SelectSingleNode_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlNode SelectSingleNode(System.String, System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
    /**
    Selects the first  that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied .

    - Parameter xpath: The XPath expression. See XPath Examples.
    - Parameter nsmgr: An  to use for resolving namespaces for prefixes in the XPath expression.
    - Returns: The first  that matches the XPath query or  if no matching node is found.

    */
    open func SelectSingleNode(xpath : dotnet.System.String, nsmgr : dotnet.System.Xml.XmlNamespaceManager) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__SelectSingleNode_0__2__String_XmlNamespaceManager(&__thrown, self.get_handle(), xpath.get_handle(), nsmgr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool Supports(System.String, System.String)
// docid: M:System.Xml.XmlNode.Supports(System.String,System.String)
    /**
    Tests if the DOM implementation implements a specific feature.

    - Parameter feature: The package name of the feature to test. This name is not case-sensitive.
    - Parameter version: The version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true.
    - Returns: 
         if the feature is implemented in the specified version; otherwise, . The following table describes the combinations that return .  
  
  Feature Version XML 1.0 XML 2.0

    */
    open func Supports(feature : dotnet.System.String, version : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_bool__Supports_0__2__String_String(&__thrown, self.get_handle(), feature.get_handle(), version.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the child nodes of the node to the specified , when overridden in a derived class.

    - Parameter w: The  to which you want to save.
    */
    open func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the current node to the specified , when overridden in a derived class.

    - Parameter w: The  to which you want to save.
    */
    open func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlAttributeCollection get_Attributes()
// docid: M:System.Xml.XmlNode.get_Attributes
    open func get_Attributes() throws -> Optional<dotnet.System.Xml.XmlAttributeCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlAttributeCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlAttributeCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlNode.get_BaseURI
    open func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeList get_ChildNodes()
// docid: M:System.Xml.XmlNode.get_ChildNodes
    open func get_ChildNodes() throws -> dotnet.System.Xml.XmlNodeList {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNodeList__get_ChildNodes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeList(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_FirstChild()
// docid: M:System.Xml.XmlNode.get_FirstChild
    open func get_FirstChild() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__get_FirstChild_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasChildNodes()
// docid: M:System.Xml.XmlNode.get_HasChildNodes
    open func get_HasChildNodes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_bool__get_HasChildNodes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_InnerText()
// docid: M:System.Xml.XmlNode.get_InnerText
    open func get_InnerText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_InnerText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlNode.set_InnerText(System.String)
    open func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XmlNode.get_InnerXml
    open func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlNode.set_InnerXml(System.String)
    open func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Xml.XmlNode.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_LastChild()
// docid: M:System.Xml.XmlNode.get_LastChild
    open func get_LastChild() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__get_LastChild_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlNode.get_LocalName
    open func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlNode.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlNode.get_NamespaceURI
    open func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_NextSibling()
// docid: M:System.Xml.XmlNode.get_NextSibling
    open func get_NextSibling() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__get_NextSibling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlNode.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_OuterXml()
// docid: M:System.Xml.XmlNode.get_OuterXml
    open func get_OuterXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_OuterXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlDocument get_OwnerDocument()
// docid: M:System.Xml.XmlNode.get_OwnerDocument
    open func get_OwnerDocument() throws -> Optional<dotnet.System.Xml.XmlDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlDocument__get_OwnerDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlDocument(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlNode.get_ParentNode
    open func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlNode.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:System.Xml.XmlNode.set_Prefix(System.String)
    open func set_Prefix(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousSibling()
// docid: M:System.Xml.XmlNode.get_PreviousSibling
    open func get_PreviousSibling() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__get_PreviousSibling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousText()
// docid: M:System.Xml.XmlNode.get_PreviousText
    open func get_PreviousText() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlNode__get_PreviousText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XmlNode.get_SchemaInfo
    open func get_SchemaInfo() throws -> dotnet.System.Xml.Schema.IXmlSchemaInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlNode.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlNode.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNode_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_Item(System.String)
// docid: M:System.Xml.XmlNode.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlElement__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_Item(System.String, System.String)
// docid: M:System.Xml.XmlNode.get_Item(System.String,System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(localname : dotnet.System.String, ns : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNode_XmlElement__get_Item_0__2__String_String(&__thrown, self.get_handle(), localname.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets an  containing the attributes of this node.

    */
    open var Attributes : Optional<dotnet.System.Xml.XmlAttributeCollection> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets the base URI of the current node.

    */
    open var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets all the child nodes of the node.

    */
    open var ChildNodes : dotnet.System.Xml.XmlNodeList {
        get {
            return try! get_ChildNodes();
        }
    }
    /**
    Gets the first child of the node.

    */
    open var FirstChild : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_FirstChild();
        }
    }
    /**
    Gets a value indicating whether this node has any child nodes.

    */
    open var HasChildNodes : Bool {
        get {
            return try! get_HasChildNodes();
        }
    }
    /**
    Gets or sets the concatenated values of the node and all its child nodes.

    */
    open var InnerText : dotnet.System.String {
        get {
            return try! get_InnerText();
        }
        set(v) {
            return try! set_InnerText(value: v);
        }
    }
    /**
    Gets or sets the markup representing only the child nodes of this node.

    */
    open var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    Gets a value indicating whether the node is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets the last child of the node.

    */
    open var LastChild : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_LastChild();
        }
    }
    /**
    Gets the local name of the node, when overridden in a derived class.

    */
    open var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node, when overridden in a derived class.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the namespace URI of this node.

    */
    open var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets the node immediately following this node.

    */
    open var NextSibling : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_NextSibling();
        }
    }
    /**
    Gets the type of the current node, when overridden in a derived class.

    */
    open var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the markup containing this node and all its child nodes.

    */
    open var OuterXml : dotnet.System.String {
        get {
            return try! get_OuterXml();
        }
    }
    /**
    Gets the  to which this node belongs.

    */
    open var OwnerDocument : Optional<dotnet.System.Xml.XmlDocument> {
        get {
            return try! get_OwnerDocument();
        }
    }
    /**
    Gets the parent of this node (for nodes that can have parents).

    */
    open var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets or sets the namespace prefix of this node.

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v);
        }
    }
    /**
    Gets the node immediately preceding this node.

    */
    open var PreviousSibling : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousSibling();
        }
    }
    /**
    Gets the text node that immediately precedes this node.

    */
    open var PreviousText : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousText();
        }
    }
    /**
    Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.

    */
    open var SchemaInfo : dotnet.System.Xml.Schema.IXmlSchemaInfo {
        get {
            return try! get_SchemaInfo();
        }
    }
    /**
    Gets or sets the value of the node.

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlNode


// type: System.Xml.XmlNodeChangedAction
    /**
    Specifies the type of node change.

    */
public struct XmlNodeChangedAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeChangedAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlNodeChangedAction Insert
    /**
    A node is being inserted in the tree.

    */
    public static var Insert : dotnet.System.Xml.XmlNodeChangedAction {
        get {
        let __return = dotnet.System.Xml.XmlNodeChangedAction(val: System_Xml_XmlNodeChangedAction_get_Insert());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeChangedAction Remove
    /**
    A node is being removed from the tree.

    */
    public static var Remove : dotnet.System.Xml.XmlNodeChangedAction {
        get {
        let __return = dotnet.System.Xml.XmlNodeChangedAction(val: System_Xml_XmlNodeChangedAction_get_Remove());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeChangedAction Change
    /**
    A node value is being changed.

    */
    public static var Change : dotnet.System.Xml.XmlNodeChangedAction {
        get {
        let __return = dotnet.System.Xml.XmlNodeChangedAction(val: System_Xml_XmlNodeChangedAction_get_Change());
            return __return;
        }
    }
} // XmlNodeChangedAction


// type: System.Xml.XmlNodeChangedEventArgs
    /**
    Provides data for the , , , ,  and  events.

    */
open class XmlNodeChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.XmlNode, System.Xml.XmlNode, System.Xml.XmlNode, System.String, System.String, System.Xml.XmlNodeChangedAction)
// docid: M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
    /**
    Initializes a new instance of the  class.

    - Parameter node: The  that generated the event.
    - Parameter oldParent: The old parent  of the  that generated the event.
    - Parameter newParent: The new parent  of the  that generated the event.
    - Parameter oldValue: The old value of the  that generated the event.
    - Parameter newValue: The new value of the  that generated the event.
    - Parameter action: The .
    */
    public init(node : Optional<dotnet.System.Xml.XmlNode>, oldParent : Optional<dotnet.System.Xml.XmlNode>, newParent : Optional<dotnet.System.Xml.XmlNode>, oldValue : Optional<dotnet.System.String>, newValue : Optional<dotnet.System.String>, action : dotnet.System.Xml.XmlNodeChangedAction) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlNodeChangedEventArgs_ctor_0__6__XmlNode_XmlNode_XmlNode_String_String_XmlNodeChangedAction(&__thrown, node?.get_handle() ?? nil, oldParent?.get_handle() ?? nil, newParent?.get_handle() ?? nil, oldValue?.get_handle() ?? nil, newValue?.get_handle() ?? nil, action.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeChangedAction get_Action()
// docid: M:System.Xml.XmlNodeChangedEventArgs.get_Action
    open func get_Action() throws -> dotnet.System.Xml.XmlNodeChangedAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventArgs_XmlNodeChangedAction__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeChangedAction(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_NewParent()
// docid: M:System.Xml.XmlNodeChangedEventArgs.get_NewParent
    open func get_NewParent() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventArgs_XmlNode__get_NewParent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_NewValue()
// docid: M:System.Xml.XmlNodeChangedEventArgs.get_NewValue
    open func get_NewValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventArgs_String__get_NewValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_Node()
// docid: M:System.Xml.XmlNodeChangedEventArgs.get_Node
    open func get_Node() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventArgs_XmlNode__get_Node_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_OldParent()
// docid: M:System.Xml.XmlNodeChangedEventArgs.get_OldParent
    open func get_OldParent() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventArgs_XmlNode__get_OldParent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_OldValue()
// docid: M:System.Xml.XmlNodeChangedEventArgs.get_OldValue
    open func get_OldValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventArgs_String__get_OldValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets a value indicating what type of node change event is occurring.

    */
    open var Action : dotnet.System.Xml.XmlNodeChangedAction {
        get {
            return try! get_Action();
        }
    }
    /**
    Gets the value of the  after the operation completes.

    */
    open var NewParent : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_NewParent();
        }
    }
    /**
    Gets the new value of the node.

    */
    open var NewValue : Optional<dotnet.System.String> {
        get {
            return try! get_NewValue();
        }
    }
    /**
    Gets the  that is being added, removed or changed.

    */
    open var Node : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_Node();
        }
    }
    /**
    Gets the value of the  before the operation began.

    */
    open var OldParent : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_OldParent();
        }
    }
    /**
    Gets the original value of the node.

    */
    open var OldValue : Optional<dotnet.System.String> {
        get {
            return try! get_OldValue();
        }
    }
} // XmlNodeChangedEventArgs


// type: System.Xml.XmlNodeChangedEventHandler
    /**
    Represents the method that handles , , , ,  and  events.

    */
public final class XmlNodeChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.XmlNodeChangedEventArgs)
// docid: M:System.Xml.XmlNodeChangedEventHandler.Invoke(System.Object,System.Xml.XmlNodeChangedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Xml.XmlNodeChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeChangedEventHandler_void__Invoke_0__2__Object_XmlNodeChangedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.XmlNodeChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.XmlNodeChangedEventHandler.BeginInvoke(System.Object,System.Xml.XmlNodeChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Xml.XmlNodeChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_XmlNodeChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.XmlNodeChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Xml.XmlNodeChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Xml.XmlNodeChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlNodeChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.XmlNodeChangedEventArgs)
// docid: M:System.Xml.XmlNodeChangedEventHandler.Invoke(System.Object,System.Xml.XmlNodeChangedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Xml.XmlNodeChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeChangedEventHandler_void__Invoke_0__2__Object_XmlNodeChangedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlNodeChangedEventHandler


// type: System.Xml.XmlNodeList
    /**
    Represents an ordered collection of nodes.

    */
open class XmlNodeList
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Xml.XmlNodeList.GetEnumerator
    /**
    Gets an enumerator that iterates through the collection of nodes.

    - Returns: An enumerator used to iterate through the collection of nodes.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeList_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Xml.XmlNode Item(System.Int32)
// docid: M:System.Xml.XmlNodeList.Item(System.Int32)
    /**
    Retrieves a node at the given index.

    - Parameter index: The zero-based index into the list of nodes.
    - Returns: The  with the specified index in the collection. If  is greater than or equal to the number of nodes in the list, this returns .

    */
    open func Item(index : Swift.Int32) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeList_XmlNode__Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.XmlNodeList.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeList_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ItemOf(System.Int32)
// docid: M:System.Xml.XmlNodeList.get_ItemOf(System.Int32)
    open func get_ItemOf(i : Swift.Int32) throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeList_XmlNode__get_ItemOf_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of nodes in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // XmlNodeList


// type: System.Xml.XmlNodeOrder
    /**
    Describes the document order of a node compared to a second node.

    */
public struct XmlNodeOrder : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeOrder_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlNodeOrder Before
    /**
    The current node of this navigator is before the current node of the supplied navigator.

    */
    public static var Before : dotnet.System.Xml.XmlNodeOrder {
        get {
        let __return = dotnet.System.Xml.XmlNodeOrder(val: System_Xml_XmlNodeOrder_get_Before());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeOrder After
    /**
    The current node of this navigator is after the current node of the supplied navigator.

    */
    public static var After : dotnet.System.Xml.XmlNodeOrder {
        get {
        let __return = dotnet.System.Xml.XmlNodeOrder(val: System_Xml_XmlNodeOrder_get_After());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeOrder Same
    /**
    The two navigators are positioned on the same node.

    */
    public static var Same : dotnet.System.Xml.XmlNodeOrder {
        get {
        let __return = dotnet.System.Xml.XmlNodeOrder(val: System_Xml_XmlNodeOrder_get_Same());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeOrder Unknown
    /**
    The node positions cannot be determined in document order, relative to each other. This could occur if the two nodes reside in different trees.

    */
    public static var Unknown : dotnet.System.Xml.XmlNodeOrder {
        get {
        let __return = dotnet.System.Xml.XmlNodeOrder(val: System_Xml_XmlNodeOrder_get_Unknown());
            return __return;
        }
    }
} // XmlNodeOrder


// type: System.Xml.XmlNodeReader
    /**
    Represents a reader that provides fast, non-cached forward only access to XML data in an .

    */
open class XmlNodeReader
    :
    dotnet.System.Xml.XmlReader,
    System_Xml_IXmlNamespaceResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.XmlNode)
// docid: M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)
    /**
    Creates an instance of the  class using the specified .

    - Parameter node: The  you want to read.
    */
    public init(node : dotnet.System.Xml.XmlNode) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlNodeReader_ctor_0__1__XmlNode(&__thrown, node.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Xml.XmlNodeReader.Close
    /**
    Changes the  to .

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetAttribute(System.Int32)
// docid: M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)
    /**
    Gets the value of the attribute with the specified index.

    - Parameter attributeIndex: The index of the attribute. The index is zero-based. (The first attribute has index 0.)
    - Returns: The value of the specified attribute.

    */
    open func GetAttribute(attributeIndex : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__GetAttribute_0__1__i32(&__thrown, self.get_handle(), attributeIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String)
// docid: M:System.Xml.XmlNodeReader.GetAttribute(System.String)
    /**
    Gets the value of the attribute with the specified name.

    - Parameter name: The qualified name of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found,  is returned.

    */
    open override func GetAttribute(name : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__GetAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetAttribute(System.String, System.String)
// docid: M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)
    /**
    Gets the value of the attribute with the specified local name and namespace URI.

    - Parameter name: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found,  is returned.

    */
    open override func GetAttribute(name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__GetAttribute_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.XmlNodeReader.LookupNamespace(System.String)
    /**
    Resolves a namespace prefix in the current element's scope.

    - Parameter prefix: The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.
    - Returns: The namespace URI to which the prefix maps or  if no matching prefix is found.

    */
    open override func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void MoveToAttribute(System.Int32)
// docid: M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)
    /**
    Moves to the attribute with the specified index.

    - Parameter attributeIndex: The index of the attribute.
    */
    open func MoveToAttribute(attributeIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeReader_void__MoveToAttribute_0__1__i32(&__thrown, self.get_handle(), attributeIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveToAttribute(System.String)
// docid: M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)
    /**
    Moves to the attribute with the specified name.

    - Parameter name: The qualified name of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the reader's position does not change.

    */
    open override func MoveToAttribute(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__MoveToAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToAttribute(System.String, System.String)
// docid: M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)
    /**
    Moves to the attribute with the specified local name and namespace URI.

    - Parameter name: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the reader's position does not change.

    */
    open func MoveToAttribute(name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__MoveToAttribute_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToElement()
// docid: M:System.Xml.XmlNodeReader.MoveToElement
    /**
    Moves to the element that contains the current attribute node.

    - Returns: 
         if the reader is positioned on an attribute (the reader moves to the element that owns the attribute);  if the reader is not positioned on an attribute (the position of the reader does not change).

    */
    open override func MoveToElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__MoveToElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstAttribute()
// docid: M:System.Xml.XmlNodeReader.MoveToFirstAttribute
    /**
    Moves to the first attribute.

    - Returns: 
         if an attribute exists (the reader moves to the first attribute); otherwise,  (the position of the reader does not change).

    */
    open override func MoveToFirstAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__MoveToFirstAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextAttribute()
// docid: M:System.Xml.XmlNodeReader.MoveToNextAttribute
    /**
    Moves to the next attribute.

    - Returns: 
         if there is a next attribute;  if there are no more attributes.

    */
    open override func MoveToNextAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__MoveToNextAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Read()
// docid: M:System.Xml.XmlNodeReader.Read
    /**
    Reads the next node from the stream.

    - Returns: 
         if the next node was read successfully;  if there are no more nodes to read.

    */
    open override func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadAttributeValue()
// docid: M:System.Xml.XmlNodeReader.ReadAttributeValue
    /**
    Parses the attribute value into one or more , , or  nodes.

    - Returns: 
         if there are nodes to return.  
  
  if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  
  
 An empty attribute, such as, misc="", returns  with a single node with a value of String.Empty.

    */
    open override func ReadAttributeValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__ReadAttributeValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 ReadContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the Base64 decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_i32__ReadContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the BinHex decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_i32__ReadContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the Base64 content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadElementContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_i32__ReadElementContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the BinHex content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadElementContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_i32__ReadElementContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ReadString()
// docid: M:System.Xml.XmlNodeReader.ReadString
    /**
    Reads the contents of an element or text node as a string.

    - Returns: The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  
  
  The text node can be either an element or an attribute text node.

    */
    open override func ReadString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__ReadString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void ResolveEntity()
// docid: M:System.Xml.XmlNodeReader.ResolveEntity
    /**
    Resolves the entity reference for  nodes.

    */
    open override func ResolveEntity() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeReader_void__ResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Skip()
// docid: M:System.Xml.XmlNodeReader.Skip
    /**
    Skips the children of the current node.

    */
    open override func Skip() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNodeReader_void__Skip_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_AttributeCount()
// docid: M:System.Xml.XmlNodeReader.get_AttributeCount
    open override func get_AttributeCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_i32__get_AttributeCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlNodeReader.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReadBinaryContent()
// docid: M:System.Xml.XmlNodeReader.get_CanReadBinaryContent
    open override func get_CanReadBinaryContent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_CanReadBinaryContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanResolveEntity()
// docid: M:System.Xml.XmlNodeReader.get_CanResolveEntity
    open override func get_CanResolveEntity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_CanResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Xml.XmlNodeReader.get_Depth
    open override func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_EOF()
// docid: M:System.Xml.XmlNodeReader.get_EOF
    open override func get_EOF() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_EOF_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasAttributes()
// docid: M:System.Xml.XmlNodeReader.get_HasAttributes
    open override func get_HasAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_HasAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:System.Xml.XmlNodeReader.get_HasValue
    open override func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Xml.XmlNodeReader.get_IsDefault
    open override func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmptyElement()
// docid: M:System.Xml.XmlNodeReader.get_IsEmptyElement
    open override func get_IsEmptyElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_bool__get_IsEmptyElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlNodeReader.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlNodeReader.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlNodeReader.get_NamespaceURI
    open override func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlNodeReader.get_NameTable
    open override func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlNodeReader.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlNodeReader.get_Prefix
    open override func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.ReadState get_ReadState()
// docid: M:System.Xml.XmlNodeReader.get_ReadState
    open override func get_ReadState() throws -> dotnet.System.Xml.ReadState {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_ReadState__get_ReadState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ReadState(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XmlNodeReader.get_SchemaInfo
    open override func get_SchemaInfo() throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlNodeReader.get_Value
    open override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlNodeReader.get_XmlLang
    open override func get_XmlLang() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlNodeReader.get_XmlSpace
    open override func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNodeReader_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    /**
    Gets the number of attributes on the current node.

    */
    open override var AttributeCount : Swift.Int32 {
        get {
            return try! get_AttributeCount();
        }
    }
    /**
    Gets the base URI of the current node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets a value indicating whether the  implements the binary content read methods.

    */
    open override var CanReadBinaryContent : Bool {
        get {
            return try! get_CanReadBinaryContent();
        }
    }
    /**
    Gets a value indicating whether this reader can parse and resolve entities.

    */
    open override var CanResolveEntity : Bool {
        get {
            return try! get_CanResolveEntity();
        }
    }
    /**
    Gets the depth of the current node in the XML document.

    */
    open override var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    Gets a value indicating whether the reader is positioned at the end of the stream.

    */
    open override var EOF : Bool {
        get {
            return try! get_EOF();
        }
    }
    /**
    Gets a value indicating whether the current node has any attributes.

    */
    open override var HasAttributes : Bool {
        get {
            return try! get_HasAttributes();
        }
    }
    /**
    Gets a value indicating whether the current node can have a .

    */
    open override var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.

    */
    open override var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
    }
    /**
    Gets a value indicating whether the current node is an empty element (for example, <MyElement/>).

    */
    open override var IsEmptyElement : Bool {
        get {
            return try! get_IsEmptyElement();
        }
    }
    /**
    Gets the local name of the current node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the current node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the  associated with this implementation.

    */
    open override var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
    /**
    Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.

    */
    open override var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the namespace prefix associated with the current node.

    */
    open override var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
    }
    /**
    Gets the state of the reader.

    */
    open override var ReadState : dotnet.System.Xml.ReadState {
        get {
            return try! get_ReadState();
        }
    }
    /**
    Gets the schema information that has been assigned to the current node.

    */
    open override var SchemaInfo : Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        get {
            return try! get_SchemaInfo();
        }
    }
    /**
    Gets the text value of the current node.

    */
    open override var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlLang : dotnet.System.String {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
    }
} // XmlNodeReader


// type: System.Xml.XmlNodeType
    /**
    Specifies the type of node.

    */
public struct XmlNodeType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNodeType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlNodeType None
    /**
    This is returned by the  if a  method has not been called.

    */
    public static var None : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_None());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Element
    /**
    An element (for example, <item> ).

    */
    public static var Element : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Element());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Attribute
    /**
    An attribute (for example, id='123' ).

    */
    public static var Attribute : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Attribute());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Text
    /**
    The text content of a node.

    */
    public static var Text : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Text());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType CDATA
    /**
    A CDATA section (for example, <![CDATA[my escaped text]]> ).

    */
    public static var CDATA : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_CDATA());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType EntityReference
    /**
    A reference to an entity (for example, &num; ).

    */
    public static var EntityReference : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_EntityReference());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Entity
    /**
    An entity declaration (for example, <!ENTITY...> ).

    */
    public static var Entity : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Entity());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType ProcessingInstruction
    /**
    A processing instruction (for example, <?pi test?> ).

    */
    public static var ProcessingInstruction : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_ProcessingInstruction());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Comment
    /**
    A comment (for example, <!-- my comment --> ).

    */
    public static var Comment : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Comment());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Document
    /**
    A document object that, as the root of the document tree, provides access to the entire XML document.

    */
    public static var Document : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Document());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType DocumentType
    /**
    The document type declaration, indicated by the following tag (for example, <!DOCTYPE...> ).

    */
    public static var DocumentType : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_DocumentType());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType DocumentFragment
    /**
    A document fragment.

    */
    public static var DocumentFragment : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_DocumentFragment());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Notation
    /**
    A notation in the document type declaration (for example, <!NOTATION...> ).

    */
    public static var Notation : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Notation());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType Whitespace
    /**
    White space between markup.

    */
    public static var Whitespace : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_Whitespace());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType SignificantWhitespace
    /**
    White space between markup in a mixed content model or white space within the xml:space="preserve" scope.

    */
    public static var SignificantWhitespace : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_SignificantWhitespace());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType EndElement
    /**
    An end element tag (for example, </item> ).

    */
    public static var EndElement : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_EndElement());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType EndEntity
    /**
    Returned when  gets to the end of the entity replacement as a result of a call to .

    */
    public static var EndEntity : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_EndEntity());
            return __return;
        }
    }
    // static field: System.Xml.XmlNodeType XmlDeclaration
    /**
    The XML declaration (for example, <?xml version='1.0'?> ).

    */
    public static var XmlDeclaration : dotnet.System.Xml.XmlNodeType {
        get {
        let __return = dotnet.System.Xml.XmlNodeType(val: System_Xml_XmlNodeType_get_XmlDeclaration());
            return __return;
        }
    }
} // XmlNodeType


// type: System.Xml.XmlNotation
    /**
    Represents a notation declaration, such as <!NOTATION... >.

    */
open class XmlNotation
    :
    dotnet.System.Xml.XmlNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlNotation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlNotation.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node. Notation nodes cannot be cloned. Calling this method on an  object throws an exception.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: A  copy of the node from which the method is called.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves the children of the node to the specified . This method has no effect on  nodes.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNotation_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified . This method has no effect on  nodes.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNotation_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XmlNotation.get_InnerXml
    open override func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XmlNotation.set_InnerXml(System.String)
    open override func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlNotation_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Xml.XmlNotation.get_IsReadOnly
    open override func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlNotation.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlNotation.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlNotation.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_OuterXml()
// docid: M:System.Xml.XmlNotation.get_OuterXml
    open override func get_OuterXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_String__get_OuterXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PublicId()
// docid: M:System.Xml.XmlNotation.get_PublicId
    open func get_PublicId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_String__get_PublicId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SystemId()
// docid: M:System.Xml.XmlNotation.get_SystemId
    open func get_SystemId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlNotation_String__get_SystemId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the markup representing the children of this node.

    */
    open override var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    Gets a value indicating whether the node is read-only.

    */
    open override var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets the name of the current node without the namespace prefix.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the name of the current node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the markup representing this node and all its children.

    */
    open override var OuterXml : dotnet.System.String {
        get {
            return try! get_OuterXml();
        }
    }
    /**
    Gets the value of the public identifier on the notation declaration.

    */
    open var PublicId : Optional<dotnet.System.String> {
        get {
            return try! get_PublicId();
        }
    }
    /**
    Gets the value of the system identifier on the notation declaration.

    */
    open var SystemId : Optional<dotnet.System.String> {
        get {
            return try! get_SystemId();
        }
    }
} // XmlNotation


// type: System.Xml.XmlOutputMethod
    /**
    Specifies the method used to serialize the  output.

    */
public struct XmlOutputMethod : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlOutputMethod_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlOutputMethod Xml
    /**
    Serialize according to the XML 1.0 rules.

    */
    public static var Xml : dotnet.System.Xml.XmlOutputMethod {
        get {
        let __return = dotnet.System.Xml.XmlOutputMethod(val: System_Xml_XmlOutputMethod_get_Xml());
            return __return;
        }
    }
    // static field: System.Xml.XmlOutputMethod Html
    /**
    Serialize according to the HTML rules specified by XSLT.

    */
    public static var Html : dotnet.System.Xml.XmlOutputMethod {
        get {
        let __return = dotnet.System.Xml.XmlOutputMethod(val: System_Xml_XmlOutputMethod_get_Html());
            return __return;
        }
    }
    // static field: System.Xml.XmlOutputMethod Text
    /**
    Serialize text blocks only.

    */
    public static var Text : dotnet.System.Xml.XmlOutputMethod {
        get {
        let __return = dotnet.System.Xml.XmlOutputMethod(val: System_Xml_XmlOutputMethod_get_Text());
            return __return;
        }
    }
    // static field: System.Xml.XmlOutputMethod AutoDetect
    /**
    Use the XSLT rules to choose between the  and  output methods at runtime.

    */
    public static var AutoDetect : dotnet.System.Xml.XmlOutputMethod {
        get {
        let __return = dotnet.System.Xml.XmlOutputMethod(val: System_Xml_XmlOutputMethod_get_AutoDetect());
            return __return;
        }
    }
} // XmlOutputMethod


// type: System.Xml.XmlParserContext
    /**
    Provides all the context information required by the  to parse an XML fragment.

    */
open class XmlParserContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlParserContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.String, System.String, System.String, System.String, System.String, System.Xml.XmlSpace)
// docid: M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)
    /**
    Initializes a new instance of the  class with the specified , , base URI, , , and document type values.

    - Parameter nt: The  to use to atomize strings. If this is , the name table used to construct the  is used instead. For more information about atomized strings, see .
    - Parameter nsMgr: The  to use for looking up namespace information, or .
    - Parameter docTypeName: The name of the document type declaration.
    - Parameter pubId: The public identifier.
    - Parameter sysId: The system identifier.
    - Parameter internalSubset: The internal DTD subset. The DTD subset is used for entity resolution, not for document validation.
    - Parameter baseURI: The base URI for the XML fragment (the location from which the fragment was loaded).
    - Parameter xmlLang: The  scope.
    - Parameter xmlSpace: An  value indicating the  scope.
    */
    public init(nt : Optional<dotnet.System.Xml.XmlNameTable>, nsMgr : Optional<dotnet.System.Xml.XmlNamespaceManager>, docTypeName : Optional<dotnet.System.String>, pubId : Optional<dotnet.System.String>, sysId : Optional<dotnet.System.String>, internalSubset : Optional<dotnet.System.String>, baseURI : Optional<dotnet.System.String>, xmlLang : Optional<dotnet.System.String>, xmlSpace : dotnet.System.Xml.XmlSpace) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlParserContext_ctor_0__9__XmlNameTable_XmlNamespaceManager_String_String_String_String_String_String_XmlSpace(&__thrown, nt?.get_handle() ?? nil, nsMgr?.get_handle() ?? nil, docTypeName?.get_handle() ?? nil, pubId?.get_handle() ?? nil, sysId?.get_handle() ?? nil, internalSubset?.get_handle() ?? nil, baseURI?.get_handle() ?? nil, xmlLang?.get_handle() ?? nil, xmlSpace.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.String, System.String, System.String, System.String, System.String, System.Xml.XmlSpace, System.Text.Encoding)
// docid: M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)
    /**
    Initializes a new instance of the  class with the specified , , base URI, , , encoding, and document type values.

    - Parameter nt: The  to use to atomize strings. If this is , the name table used to construct the  is used instead. For more information about atomized strings, see .
    - Parameter nsMgr: The  to use for looking up namespace information, or .
    - Parameter docTypeName: The name of the document type declaration.
    - Parameter pubId: The public identifier.
    - Parameter sysId: The system identifier.
    - Parameter internalSubset: The internal DTD subset. The DTD is used for entity resolution, not for document validation.
    - Parameter baseURI: The base URI for the XML fragment (the location from which the fragment was loaded).
    - Parameter xmlLang: The  scope.
    - Parameter xmlSpace: An  value indicating the  scope.
    - Parameter enc: An  object indicating the encoding setting.
    */
    public init(nt : Optional<dotnet.System.Xml.XmlNameTable>, nsMgr : Optional<dotnet.System.Xml.XmlNamespaceManager>, docTypeName : Optional<dotnet.System.String>, pubId : Optional<dotnet.System.String>, sysId : Optional<dotnet.System.String>, internalSubset : Optional<dotnet.System.String>, baseURI : Optional<dotnet.System.String>, xmlLang : Optional<dotnet.System.String>, xmlSpace : dotnet.System.Xml.XmlSpace, enc : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlParserContext_ctor_0__10__XmlNameTable_XmlNamespaceManager_String_String_String_String_String_String_XmlSpace_Encoding(&__thrown, nt?.get_handle() ?? nil, nsMgr?.get_handle() ?? nil, docTypeName?.get_handle() ?? nil, pubId?.get_handle() ?? nil, sysId?.get_handle() ?? nil, internalSubset?.get_handle() ?? nil, baseURI?.get_handle() ?? nil, xmlLang?.get_handle() ?? nil, xmlSpace.get_value(), enc?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.Xml.XmlSpace)
// docid: M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)
    /**
    Initializes a new instance of the  class with the specified , , , and  values.

    - Parameter nt: The  to use to atomize strings. If this is , the name table used to construct the  is used instead. For more information about atomized strings, see .
    - Parameter nsMgr: The  to use for looking up namespace information, or .
    - Parameter xmlLang: The  scope.
    - Parameter xmlSpace: An  value indicating the  scope.
    */
    public init(nt : Optional<dotnet.System.Xml.XmlNameTable>, nsMgr : Optional<dotnet.System.Xml.XmlNamespaceManager>, xmlLang : Optional<dotnet.System.String>, xmlSpace : dotnet.System.Xml.XmlSpace) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlParserContext_ctor_0__4__XmlNameTable_XmlNamespaceManager_String_XmlSpace(&__thrown, nt?.get_handle() ?? nil, nsMgr?.get_handle() ?? nil, xmlLang?.get_handle() ?? nil, xmlSpace.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.Xml.XmlSpace, System.Text.Encoding)
// docid: M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)
    /**
    Initializes a new instance of the  class with the specified , , , , and encoding.

    - Parameter nt: The  to use to atomize strings. If this is , the name table used to construct the  is used instead. For more information on atomized strings, see .
    - Parameter nsMgr: The  to use for looking up namespace information, or .
    - Parameter xmlLang: The  scope.
    - Parameter xmlSpace: An  value indicating the  scope.
    - Parameter enc: An  object indicating the encoding setting.
    */
    public init(nt : Optional<dotnet.System.Xml.XmlNameTable>, nsMgr : Optional<dotnet.System.Xml.XmlNamespaceManager>, xmlLang : Optional<dotnet.System.String>, xmlSpace : dotnet.System.Xml.XmlSpace, enc : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlParserContext_ctor_0__5__XmlNameTable_XmlNamespaceManager_String_XmlSpace_Encoding(&__thrown, nt?.get_handle() ?? nil, nsMgr?.get_handle() ?? nil, xmlLang?.get_handle() ?? nil, xmlSpace.get_value(), enc?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlParserContext.get_BaseURI
    open func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseURI(System.String)
// docid: M:System.Xml.XmlParserContext.set_BaseURI(System.String)
    open func set_BaseURI(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_BaseURI_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DocTypeName()
// docid: M:System.Xml.XmlParserContext.get_DocTypeName
    open func get_DocTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_String__get_DocTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DocTypeName(System.String)
// docid: M:System.Xml.XmlParserContext.set_DocTypeName(System.String)
    open func set_DocTypeName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_DocTypeName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:System.Xml.XmlParserContext.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoding(System.Text.Encoding)
// docid: M:System.Xml.XmlParserContext.set_Encoding(System.Text.Encoding)
    open func set_Encoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_Encoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InternalSubset()
// docid: M:System.Xml.XmlParserContext.get_InternalSubset
    open func get_InternalSubset() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_String__get_InternalSubset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InternalSubset(System.String)
// docid: M:System.Xml.XmlParserContext.set_InternalSubset(System.String)
    open func set_InternalSubset(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_InternalSubset_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNamespaceManager get_NamespaceManager()
// docid: M:System.Xml.XmlParserContext.get_NamespaceManager
    open func get_NamespaceManager() throws -> Optional<dotnet.System.Xml.XmlNamespaceManager> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_XmlNamespaceManager__get_NamespaceManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNamespaceManager(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NamespaceManager(System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.XmlParserContext.set_NamespaceManager(System.Xml.XmlNamespaceManager)
    open func set_NamespaceManager(value : Optional<dotnet.System.Xml.XmlNamespaceManager>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_NamespaceManager_0__1__XmlNamespaceManager(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlParserContext.get_NameTable
    open func get_NameTable() throws -> Optional<dotnet.System.Xml.XmlNameTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNameTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NameTable(System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlParserContext.set_NameTable(System.Xml.XmlNameTable)
    open func set_NameTable(value : Optional<dotnet.System.Xml.XmlNameTable>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_NameTable_0__1__XmlNameTable(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PublicId()
// docid: M:System.Xml.XmlParserContext.get_PublicId
    open func get_PublicId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_String__get_PublicId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PublicId(System.String)
// docid: M:System.Xml.XmlParserContext.set_PublicId(System.String)
    open func set_PublicId(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_PublicId_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SystemId()
// docid: M:System.Xml.XmlParserContext.get_SystemId
    open func get_SystemId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_String__get_SystemId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SystemId(System.String)
// docid: M:System.Xml.XmlParserContext.set_SystemId(System.String)
    open func set_SystemId(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_SystemId_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlParserContext.get_XmlLang
    open func get_XmlLang() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XmlLang(System.String)
// docid: M:System.Xml.XmlParserContext.set_XmlLang(System.String)
    open func set_XmlLang(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_XmlLang_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlParserContext.get_XmlSpace
    open func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlParserContext_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    // [IsSpecialName] void set_XmlSpace(System.Xml.XmlSpace)
// docid: M:System.Xml.XmlParserContext.set_XmlSpace(System.Xml.XmlSpace)
    open func set_XmlSpace(value : dotnet.System.Xml.XmlSpace) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlParserContext_void__set_XmlSpace_0__1__XmlSpace(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the base URI.

    */
    open var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
        set(v) {
            return try! set_BaseURI(value: v);
        }
    }
    /**
    Gets or sets the name of the document type declaration.

    */
    open var DocTypeName : dotnet.System.String {
        get {
            return try! get_DocTypeName();
        }
        set(v) {
            return try! set_DocTypeName(value: v);
        }
    }
    /**
    Gets or sets the encoding type.

    */
    open var Encoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v!);
        }
    }
    /**
    Gets or sets the internal DTD subset.

    */
    open var InternalSubset : dotnet.System.String {
        get {
            return try! get_InternalSubset();
        }
        set(v) {
            return try! set_InternalSubset(value: v);
        }
    }
    /**
    Gets the  used to atomize strings. For more information on atomized strings, see .

    */
    open var NameTable : Optional<dotnet.System.Xml.XmlNameTable> {
        get {
            return try! get_NameTable();
        }
        set(v) {
            return try! set_NameTable(value: v!);
        }
    }
    /**
    Gets or sets the .

    */
    open var NamespaceManager : Optional<dotnet.System.Xml.XmlNamespaceManager> {
        get {
            return try! get_NamespaceManager();
        }
        set(v) {
            return try! set_NamespaceManager(value: v!);
        }
    }
    /**
    Gets or sets the public identifier.

    */
    open var PublicId : dotnet.System.String {
        get {
            return try! get_PublicId();
        }
        set(v) {
            return try! set_PublicId(value: v);
        }
    }
    /**
    Gets or sets the system identifier.

    */
    open var SystemId : dotnet.System.String {
        get {
            return try! get_SystemId();
        }
        set(v) {
            return try! set_SystemId(value: v);
        }
    }
    /**
    Gets or sets the current  scope.

    */
    open var XmlLang : dotnet.System.String {
        get {
            return try! get_XmlLang();
        }
        set(v) {
            return try! set_XmlLang(value: v);
        }
    }
    /**
    Gets or sets the current  scope.

    */
    open var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
        set(v) {
            return try! set_XmlSpace(value: v);
        }
    }
} // XmlParserContext


// type: System.Xml.XmlProcessingInstruction
    /**
    Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.

    */
open class XmlProcessingInstruction
    :
    dotnet.System.Xml.XmlLinkedNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlProcessingInstruction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: The duplicate node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified . Because ProcessingInstruction nodes do not have children, this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlProcessingInstruction_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlProcessingInstruction_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Data()
// docid: M:System.Xml.XmlProcessingInstruction.get_Data
    open func get_Data() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_String__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Data(System.String)
// docid: M:System.Xml.XmlProcessingInstruction.set_Data(System.String)
    open func set_Data(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlProcessingInstruction_void__set_Data_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InnerText()
// docid: M:System.Xml.XmlProcessingInstruction.get_InnerText
    open override func get_InnerText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_String__get_InnerText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerText(System.String)
// docid: M:System.Xml.XmlProcessingInstruction.set_InnerText(System.String)
    open override func set_InnerText(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlProcessingInstruction_void__set_InnerText_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlProcessingInstruction.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlProcessingInstruction.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlProcessingInstruction.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Target()
// docid: M:System.Xml.XmlProcessingInstruction.get_Target
    open func get_Target() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_String__get_Target_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlProcessingInstruction.get_Value
    open override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlProcessingInstruction_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlProcessingInstruction.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlProcessingInstruction_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the content of the processing instruction, excluding the target.

    */
    open var Data : dotnet.System.String {
        get {
            return try! get_Data();
        }
        set(v) {
            return try! set_Data(value: v);
        }
    }
    /**
    Gets or sets the concatenated values of the node and all its children.

    */
    open override var InnerText : dotnet.System.String {
        get {
            return try! get_InnerText();
        }
        set(v) {
            return try! set_InnerText(value: v);
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the target of the processing instruction.

    */
    open var Target : Optional<dotnet.System.String> {
        get {
            return try! get_Target();
        }
    }
// TODO COPE (is_override_mutable_optional_with_covariant) [IsSpecialName] System.String get_Value()
} // XmlProcessingInstruction


// type: System.Xml.XmlQualifiedName
    /**
    Represents an XML qualified name.

    */
open class XmlQualifiedName
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlQualifiedName_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Xml.XmlQualifiedName Empty
    /**
    Provides an empty .

    */
    open class var Empty : dotnet.System.Xml.XmlQualifiedName {
        get {
        let __return = dotnet.System.Xml.XmlQualifiedName(hndl: System_Xml_XmlQualifiedName_get_Empty());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Xml.XmlQualifiedName.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlQualifiedName_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.XmlQualifiedName.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified name.

    - Parameter name: The local name to use as the name of the  object.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlQualifiedName_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified name and namespace.

    - Parameter name: The local name to use as the name of the  object.
    - Parameter ns: The namespace for the  object.
    */
    public init(name : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlQualifiedName_ctor_0__2__String_String(&__thrown, name?.get_handle() ?? nil, ns?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Xml.XmlQualifiedName.Equals(System.Object)
    /**
    Determines whether the specified  object is equal to the current  object.

    - Parameter other: The  to compare.
    - Returns: 
         if the two are the same instance object; otherwise, .

    */
    open func Equals(other : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_bool__Equals_0__1__Object(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Xml.XmlQualifiedName.GetHashCode
    /**
    Returns the hash code for the .

    - Returns: A hash code for this object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)
// docid: M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
    /**
    Compares two  objects.

    - Parameter a: An  to compare.
    - Parameter b: An  to compare.
    - Returns: 
         if the two objects have the same name and namespace values; otherwise, .

    */
    open class func op_Equality(a : Optional<dotnet.System.Xml.XmlQualifiedName>, b : Optional<dotnet.System.Xml.XmlQualifiedName>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_bool__op_Equality_0__2__XmlQualifiedName_XmlQualifiedName(&__thrown, a?.get_handle() ?? nil, b?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)
// docid: M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
    /**
    Compares two  objects.

    - Parameter a: An  to compare.
    - Parameter b: An  to compare.
    - Returns: 
         if the name and namespace values for the two objects differ; otherwise, .

    */
    open class func op_Inequality(a : Optional<dotnet.System.Xml.XmlQualifiedName>, b : Optional<dotnet.System.Xml.XmlQualifiedName>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_bool__op_Inequality_0__2__XmlQualifiedName_XmlQualifiedName(&__thrown, a?.get_handle() ?? nil, b?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.XmlQualifiedName.ToString
    /**
    Returns the string value of the .

    - Returns: The string value of the  in the format of . If the object does not have a namespace defined, this method returns just the local name.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.String)
// docid: M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)
    /**
    Returns the string value of the .

    - Parameter name: The name of the object.
    - Parameter ns: The namespace of the object.
    - Returns: The string value of the  in the format of . If the object does not have a namespace defined, this method returns just the local name.

    */
    open class func ToString(name : dotnet.System.String, ns : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_String__ToString_0__2__String_String(&__thrown, name.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Xml.XmlQualifiedName.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlQualifiedName.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.XmlQualifiedName.get_Namespace
    open func get_Namespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlQualifiedName_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets a value indicating whether the  is empty.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets a string representation of the qualified name of the .

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets a string representation of the namespace of the .

    */
    open var Namespace : dotnet.System.String {
        get {
            return try! get_Namespace();
        }
    }
} // XmlQualifiedName


// type: System.Xml.XmlReader
    /**
    Represents a reader that provides fast, noncached, forward-only access to XML data.

    */
open class XmlReader
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Xml.XmlReader.Close
    /**
    When overridden in a derived class, changes the  to .

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlReader Create(System.IO.Stream)
// docid: M:System.Xml.XmlReader.Create(System.IO.Stream)
    /**
    Creates a new  instance using the specified stream with default settings.

    - Parameter input: The stream that contains the XML data.  
  
 The  scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__1__Stream(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.Stream, System.Xml.XmlReaderSettings)
// docid: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
    /**
    Creates a new  instance with the specified stream and settings.

    - Parameter input: The stream that contains the XML data.  
  
 The  scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.Stream, settings : Optional<dotnet.System.Xml.XmlReaderSettings>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__2__Stream_XmlReaderSettings(&__thrown, input.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.Stream, System.Xml.XmlReaderSettings, System.String)
// docid: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)
    /**
    Creates a new  instance using the specified stream, base URI, and settings.

    - Parameter input: The stream that contains the XML data.  
  
 The  scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Parameter baseUri: The base URI for the entity or document being read. This value can be .  
  
 Security Note The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.Stream, settings : Optional<dotnet.System.Xml.XmlReaderSettings>, baseUri : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__3__Stream_XmlReaderSettings_String(&__thrown, input.get_handle(), settings?.get_handle() ?? nil, baseUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.Stream, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
    /**
    Creates a new  instance using the specified stream, settings, and context information for parsing.

    - Parameter input: The stream that contains the XML data.  
  
 The  scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Parameter inputContext: The context information required to parse the XML fragment. The context information can include the  to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition.  
  
 This value can be .
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.Stream, settings : Optional<dotnet.System.Xml.XmlReaderSettings>, inputContext : Optional<dotnet.System.Xml.XmlParserContext>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__3__Stream_XmlReaderSettings_XmlParserContext(&__thrown, input.get_handle(), settings?.get_handle() ?? nil, inputContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.TextReader)
// docid: M:System.Xml.XmlReader.Create(System.IO.TextReader)
    /**
    Creates a new  instance by using the specified text reader.

    - Parameter input: The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.TextReader) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__1__TextReader(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.TextReader, System.Xml.XmlReaderSettings)
// docid: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
    /**
    Creates a new  instance by using the specified text reader and settings.

    - Parameter input: The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.
    - Parameter settings: The settings for the new . This value can be .
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.TextReader, settings : Optional<dotnet.System.Xml.XmlReaderSettings>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__2__TextReader_XmlReaderSettings(&__thrown, input.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.TextReader, System.Xml.XmlReaderSettings, System.String)
// docid: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)
    /**
    Creates a new  instance by using the specified text reader, settings, and base URI.

    - Parameter input: The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the  to decode the data stream.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Parameter baseUri: The base URI for the entity or document being read. This value can be .  
  
 Security Note The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.TextReader, settings : Optional<dotnet.System.Xml.XmlReaderSettings>, baseUri : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__3__TextReader_XmlReaderSettings_String(&__thrown, input.get_handle(), settings?.get_handle() ?? nil, baseUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.IO.TextReader, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
    /**
    Creates a new  instance by using the specified text reader, settings, and context information for parsing.

    - Parameter input: The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Parameter inputContext: The context information required to parse the XML fragment. The context information can include the  to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition.  
  
 This value can be .
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(input : dotnet.System.IO.TextReader, settings : Optional<dotnet.System.Xml.XmlReaderSettings>, inputContext : Optional<dotnet.System.Xml.XmlParserContext>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__3__TextReader_XmlReaderSettings_XmlParserContext(&__thrown, input.get_handle(), settings?.get_handle() ?? nil, inputContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.String)
// docid: M:System.Xml.XmlReader.Create(System.String)
    /**
    Creates a new  instance with specified URI.

    - Parameter inputUri: The URI for the file that contains the XML data. The  class is used to convert the path to a canonical data representation.
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(inputUri : dotnet.System.String) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__1__String(&__thrown, inputUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.String, System.Xml.XmlReaderSettings)
// docid: M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
    /**
    Creates a new  instance by using the specified URI and settings.

    - Parameter inputUri: The URI for the file containing the XML data. The  object on the  object is used to convert the path to a canonical data representation. If  is , a new  object is used.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(inputUri : dotnet.System.String, settings : Optional<dotnet.System.Xml.XmlReaderSettings>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__2__String_XmlReaderSettings(&__thrown, inputUri.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.String, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
    /**
    Creates a new  instance by using the specified URI, settings, and context information for parsing.

    - Parameter inputUri: The URI for the file containing the XML data. The  object on the  object is used to convert the path to a canonical data representation. If  is , a new  object is used.
    - Parameter settings: The settings for the new  instance. This value can be .
    - Parameter inputContext: The context information required to parse the XML fragment. The context information can include the  to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition.  
  
 This value can be .
    - Returns: An object that is used to read the XML data in the stream.

    */
    open class func Create(inputUri : dotnet.System.String, settings : Optional<dotnet.System.Xml.XmlReaderSettings>, inputContext : Optional<dotnet.System.Xml.XmlParserContext>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__3__String_XmlReaderSettings_XmlParserContext(&__thrown, inputUri.get_handle(), settings?.get_handle() ?? nil, inputContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader Create(System.Xml.XmlReader, System.Xml.XmlReaderSettings)
// docid: M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
    /**
    Creates a new  instance by using the specified XML reader and settings.

    - Parameter reader: The object that you want to use as the underlying XML reader.
    - Parameter settings: The settings for the new  instance.  
  
 The conformance level of the  object must either match the conformance level of the underlying reader, or it must be set to .
    - Returns: An object that is wrapped around the specified  object.

    */
    open class func Create(reader : dotnet.System.Xml.XmlReader, settings : Optional<dotnet.System.Xml.XmlReaderSettings>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__Create_0__2__XmlReader_XmlReaderSettings(&__thrown, reader.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Xml.XmlReader.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetAttribute(System.Int32)
// docid: M:System.Xml.XmlReader.GetAttribute(System.Int32)
    /**
    When overridden in a derived class, gets the value of the attribute with the specified index.

    - Parameter i: The index of the attribute. The index is zero-based. (The first attribute has index 0.)
    - Returns: The value of the specified attribute. This method does not move the reader.

    */
    open func GetAttribute(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__GetAttribute_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String)
// docid: M:System.Xml.XmlReader.GetAttribute(System.String)
    /**
    When overridden in a derived class, gets the value of the attribute with the specified .

    - Parameter name: The qualified name of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found or the value is ,  is returned.

    */
    open func GetAttribute(name : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__GetAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetAttribute(System.String, System.String)
// docid: M:System.Xml.XmlReader.GetAttribute(System.String,System.String)
    /**
    When overridden in a derived class, gets the value of the attribute with the specified  and .

    - Parameter name: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found or the value is ,  is returned. This method does not move the reader.

    */
    open func GetAttribute(name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__GetAttribute_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.String> GetValueAsync()
// docid: M:System.Xml.XmlReader.GetValueAsync
    /**
    Asynchronously gets the value of the current node.

    - Returns: The value of the current node.

    */
    open func GetValueAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_string___GetValueAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool IsName(System.String)
// docid: M:System.Xml.XmlReader.IsName(System.String)
    /**
    Returns a value indicating whether the string argument is a valid XML name.

    - Parameter str: The name to validate.
    - Returns: 
         if the name is valid; otherwise, .

    */
    open class func IsName(str : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__IsName_0__1__String(&__thrown, str.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNameToken(System.String)
// docid: M:System.Xml.XmlReader.IsNameToken(System.String)
    /**
    Returns a value indicating whether or not the string argument is a valid XML name token.

    - Parameter str: The name token to validate.
    - Returns: 
         if it is a valid name token; otherwise .

    */
    open class func IsNameToken(str : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__IsNameToken_0__1__String(&__thrown, str.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartElement()
// docid: M:System.Xml.XmlReader.IsStartElement
    /**
    Calls  and tests if the current content node is a start tag or empty element tag.

    - Returns: 
         if  finds a start tag or empty element tag;  if a node type other than  was found.

    */
    open func IsStartElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__IsStartElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartElement(System.String)
// docid: M:System.Xml.XmlReader.IsStartElement(System.String)
    /**
    Calls  and tests if the current content node is a start tag or empty element tag and if the  property of the element found matches the given argument.

    - Parameter name: The string matched against the  property of the element found.
    - Returns: 
         if the resulting node is an element and the  property matches the specified string.  if a node type other than  was found or if the element  property does not match the specified string.

    */
    open func IsStartElement(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__IsStartElement_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartElement(System.String, System.String)
// docid: M:System.Xml.XmlReader.IsStartElement(System.String,System.String)
    /**
    Calls  and tests if the current content node is a start tag or empty element tag and if the  and  properties of the element found match the given strings.

    - Parameter localname: The string to match against the  property of the element found.
    - Parameter ns: The string to match against the  property of the element found.
    - Returns: 
         if the resulting node is an element.  if a node type other than  was found or if the  and  properties of the element do not match the specified strings.

    */
    open func IsStartElement(localname : dotnet.System.String, ns : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__IsStartElement_0__2__String_String(&__thrown, self.get_handle(), localname.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.XmlReader.LookupNamespace(System.String)
    /**
    When overridden in a derived class, resolves a namespace prefix in the current element's scope.

    - Parameter prefix: The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.
    - Returns: The namespace URI to which the prefix maps or  if no matching prefix is found.

    */
    open func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void MoveToAttribute(System.Int32)
// docid: M:System.Xml.XmlReader.MoveToAttribute(System.Int32)
    /**
    When overridden in a derived class, moves to the attribute with the specified index.

    - Parameter i: The index of the attribute.
    */
    open func MoveToAttribute(i : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__MoveToAttribute_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveToAttribute(System.String)
// docid: M:System.Xml.XmlReader.MoveToAttribute(System.String)
    /**
    When overridden in a derived class, moves to the attribute with the specified .

    - Parameter name: The qualified name of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the reader's position does not change.

    */
    open func MoveToAttribute(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__MoveToAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToAttribute(System.String, System.String)
// docid: M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
    /**
    When overridden in a derived class, moves to the attribute with the specified  and .

    - Parameter name: The local name of the attribute.
    - Parameter ns: The namespace URI of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the reader's position does not change.

    */
    open func MoveToAttribute(name : dotnet.System.String, ns : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__MoveToAttribute_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Xml.XmlNodeType MoveToContent()
// docid: M:System.Xml.XmlReader.MoveToContent
    /**
    Checks whether the current node is a content (non-white space text, , , , , or ) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: , , , , or .

    - Returns: The  of the current node found by the method or  if the reader has reached the end of the input stream.

    */
    open func MoveToContent() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlNodeType__MoveToContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.XmlNodeType> MoveToContentAsync()
// docid: M:System.Xml.XmlReader.MoveToContentAsync
    /**
    Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.

    - Returns: The  of the current node found by the method or  if the reader has reached the end of the input stream.

    */
    open func MoveToContentAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.XmlNodeType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_System_Xml_XmlNodeType___MoveToContentAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool MoveToElement()
// docid: M:System.Xml.XmlReader.MoveToElement
    /**
    When overridden in a derived class, moves to the element that contains the current attribute node.

    - Returns: 
         if the reader is positioned on an attribute (the reader moves to the element that owns the attribute);  if the reader is not positioned on an attribute (the position of the reader does not change).

    */
    open func MoveToElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__MoveToElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstAttribute()
// docid: M:System.Xml.XmlReader.MoveToFirstAttribute
    /**
    When overridden in a derived class, moves to the first attribute.

    - Returns: 
         if an attribute exists (the reader moves to the first attribute); otherwise,  (the position of the reader does not change).

    */
    open func MoveToFirstAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__MoveToFirstAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextAttribute()
// docid: M:System.Xml.XmlReader.MoveToNextAttribute
    /**
    When overridden in a derived class, moves to the next attribute.

    - Returns: 
         if there is a next attribute;  if there are no more attributes.

    */
    open func MoveToNextAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__MoveToNextAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Read()
// docid: M:System.Xml.XmlReader.Read
    /**
    When overridden in a derived class, reads the next node from the stream.

    - Returns: 
         if the next node was read successfully; otherwise, .

    */
    open func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> ReadAsync()
// docid: M:System.Xml.XmlReader.ReadAsync
    /**
    Asynchronously reads the next node from the stream.

    - Returns: 
         if the next node was read successfully;  if there are no more nodes to read.

    */
    open func ReadAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_bool___ReadAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool ReadAttributeValue()
// docid: M:System.Xml.XmlReader.ReadAttributeValue
    /**
    When overridden in a derived class, parses the attribute value into one or more , , or  nodes.

    - Returns: 
         if there are nodes to return.  
  
  if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  
  
 An empty attribute, such as, misc="", returns  with a single node with a value of .

    */
    open func ReadAttributeValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadAttributeValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ReadContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Reads the content as an object of the type specified.

    - Parameter returnType: The type of the value to be returned.  
  
 Note With the release of the .NET Framework 3.5, the value of the  parameter can now be the  type.
    - Parameter namespaceResolver: An  object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an  object to an xs:string.  
  
 This value can be .
    - Returns: The concatenated text content or attribute value converted to the requested type.

    */
    open func ReadContentAs(returnType : dotnet.System.Type_, namespaceResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Object__ReadContentAs_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), returnType.get_handle(), namespaceResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> ReadContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Asynchronously reads the content as an object of the type specified.

    - Parameter returnType: The type of the value to be returned.
    - Parameter namespaceResolver: An  object that is used to resolve any namespace prefixes related to type conversion.
    - Returns: The concatenated text content or attribute value converted to the requested type.

    */
    open func ReadContentAsAsync(returnType : dotnet.System.Type_, namespaceResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_object___ReadContentAsAsync_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), returnType.get_handle(), namespaceResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Int32 ReadContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the Base64 decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadContentAsBase64Async(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously reads the content and returns the Base64 decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadContentAsBase64Async(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_i32___ReadContentAsBase64Async_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Int32 ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the  decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously reads the content and returns the  decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadContentAsBinHexAsync(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_i32___ReadContentAsBinHexAsync_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool ReadContentAsBoolean()
// docid: M:System.Xml.XmlReader.ReadContentAsBoolean
    /**
    Reads the text content at the current position as a .

    - Returns: The text content as a  object.

    */
    open func ReadContentAsBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadContentAsBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.DateTime ReadContentAsDateTime()
// docid: M:System.Xml.XmlReader.ReadContentAsDateTime
    /**
    Reads the text content at the current position as a  object.

    - Returns: The text content as a  object.

    */
    open func ReadContentAsDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_DateTime__ReadContentAsDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTimeOffset ReadContentAsDateTimeOffset()
// docid: M:System.Xml.XmlReader.ReadContentAsDateTimeOffset
    /**
    Reads the text content at the current position as a  object.

    - Returns: The text content as a  object.

    */
    open func ReadContentAsDateTimeOffset() throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_DateTimeOffset__ReadContentAsDateTimeOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.Decimal ReadContentAsDecimal()
// docid: M:System.Xml.XmlReader.ReadContentAsDecimal
    /**
    Reads the text content at the current position as a  object.

    - Returns: The text content at the current position as a  object.

    */
    open func ReadContentAsDecimal() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Decimal__ReadContentAsDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ReadContentAsDouble()
// docid: M:System.Xml.XmlReader.ReadContentAsDouble
    /**
    Reads the text content at the current position as a double-precision floating-point number.

    - Returns: The text content as a double-precision floating-point number.

    */
    open func ReadContentAsDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_f64__ReadContentAsDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ReadContentAsFloat()
// docid: M:System.Xml.XmlReader.ReadContentAsFloat
    /**
    Reads the text content at the current position as a single-precision floating point number.

    - Returns: The text content at the current position as a single-precision floating point number.

    */
    open func ReadContentAsFloat() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_f32__ReadContentAsFloat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadContentAsInt()
// docid: M:System.Xml.XmlReader.ReadContentAsInt
    /**
    Reads the text content at the current position as a 32-bit signed integer.

    - Returns: The text content as a 32-bit signed integer.

    */
    open func ReadContentAsInt() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadContentAsInt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadContentAsLong()
// docid: M:System.Xml.XmlReader.ReadContentAsLong
    /**
    Reads the text content at the current position as a 64-bit signed integer.

    - Returns: The text content as a 64-bit signed integer.

    */
    open func ReadContentAsLong() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i64__ReadContentAsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Object ReadContentAsObject()
// docid: M:System.Xml.XmlReader.ReadContentAsObject
    /**
    Reads the text content at the current position as an .

    - Returns: The text content as the most appropriate common language runtime (CLR) object.

    */
    open func ReadContentAsObject() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Object__ReadContentAsObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> ReadContentAsObjectAsync()
// docid: M:System.Xml.XmlReader.ReadContentAsObjectAsync
    /**
    Asynchronously reads the text content at the current position as an .

    - Returns: The text content as the most appropriate common language runtime (CLR) object.

    */
    open func ReadContentAsObjectAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_object___ReadContentAsObjectAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String ReadContentAsString()
// docid: M:System.Xml.XmlReader.ReadContentAsString
    /**
    Reads the text content at the current position as a  object.

    - Returns: The text content as a  object.

    */
    open func ReadContentAsString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadContentAsString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadContentAsStringAsync()
// docid: M:System.Xml.XmlReader.ReadContentAsStringAsync
    /**
    Asynchronously reads the text content at the current position as a  object.

    - Returns: The text content as a  object.

    */
    open func ReadContentAsStringAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_string___ReadContentAsStringAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Object ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Reads the element content as the requested type.

    - Parameter returnType: The type of the value to be returned.  
  
 Note With the release of the .NET Framework 3.5, the value of the  parameter can now be the  type.
    - Parameter namespaceResolver: An  object that is used to resolve any namespace prefixes related to type conversion.
    - Returns: The element content converted to the requested typed object.

    */
    open func ReadElementContentAs(returnType : dotnet.System.Type_, namespaceResolver : dotnet.System.Xml.IXmlNamespaceResolver) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Object__ReadElementContentAs_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), returnType.get_handle(), namespaceResolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver, System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.

    - Parameter returnType: The type of the value to be returned.  
  
 Note With the release of the .NET Framework 3.5, the value of the  parameter can now be the  type.
    - Parameter namespaceResolver: An  object that is used to resolve any namespace prefixes related to type conversion.
    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content converted to the requested typed object.

    */
    open func ReadElementContentAs(returnType : dotnet.System.Type_, namespaceResolver : dotnet.System.Xml.IXmlNamespaceResolver, localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Object__ReadElementContentAs_0__4__Type_IXmlNamespaceResolver_String_String(&__thrown, self.get_handle(), returnType.get_handle(), namespaceResolver.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> ReadElementContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Asynchronously reads the element content as the requested type.

    - Parameter returnType: The type of the value to be returned.
    - Parameter namespaceResolver: An  object that is used to resolve any namespace prefixes related to type conversion.
    - Returns: The element content converted to the requested typed object.

    */
    open func ReadElementContentAsAsync(returnType : dotnet.System.Type_, namespaceResolver : dotnet.System.Xml.IXmlNamespaceResolver) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_object___ReadElementContentAsAsync_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), returnType.get_handle(), namespaceResolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Int32 ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the  content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadElementContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadElementContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadElementContentAsBase64Async(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously reads the element and decodes the  content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadElementContentAsBase64Async(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_i32___ReadElementContentAsBase64Async_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Int32 ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the  content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadElementContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadElementContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadElementContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously reads the element and decodes the  content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadElementContentAsBinHexAsync(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_i32___ReadElementContentAsBinHexAsync_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool ReadElementContentAsBoolean()
// docid: M:System.Xml.XmlReader.ReadElementContentAsBoolean
    /**
    Reads the current element and returns the contents as a  object.

    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadElementContentAsBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadElementContentAsBoolean(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a  object.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsBoolean(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadElementContentAsBoolean_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.DateTime ReadElementContentAsDateTime()
// docid: M:System.Xml.XmlReader.ReadElementContentAsDateTime
    /**
    Reads the current element and returns the contents as a  object.

    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_DateTime__ReadElementContentAsDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTime ReadElementContentAsDateTime(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a  object.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element contents as a  object.

    */
    open func ReadElementContentAsDateTime(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_DateTime__ReadElementContentAsDateTime_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal ReadElementContentAsDecimal()
// docid: M:System.Xml.XmlReader.ReadElementContentAsDecimal
    /**
    Reads the current element and returns the contents as a  object.

    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsDecimal() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Decimal__ReadElementContentAsDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Decimal ReadElementContentAsDecimal(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a  object.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsDecimal(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Decimal__ReadElementContentAsDecimal_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ReadElementContentAsDouble()
// docid: M:System.Xml.XmlReader.ReadElementContentAsDouble
    /**
    Reads the current element and returns the contents as a double-precision floating-point number.

    - Returns: The element content as a double-precision floating-point number.

    */
    open func ReadElementContentAsDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_f64__ReadElementContentAsDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double ReadElementContentAsDouble(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a double-precision floating-point number.

    */
    open func ReadElementContentAsDouble(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_f64__ReadElementContentAsDouble_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ReadElementContentAsFloat()
// docid: M:System.Xml.XmlReader.ReadElementContentAsFloat
    /**
    Reads the current element and returns the contents as single-precision floating-point number.

    - Returns: The element content as a single-precision floating point number.

    */
    open func ReadElementContentAsFloat() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_f32__ReadElementContentAsFloat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ReadElementContentAsFloat(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a single-precision floating point number.

    */
    open func ReadElementContentAsFloat(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_f32__ReadElementContentAsFloat_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsInt()
// docid: M:System.Xml.XmlReader.ReadElementContentAsInt
    /**
    Reads the current element and returns the contents as a 32-bit signed integer.

    - Returns: The element content as a 32-bit signed integer.

    */
    open func ReadElementContentAsInt() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadElementContentAsInt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsInt(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a 32-bit signed integer.

    */
    open func ReadElementContentAsInt(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadElementContentAsInt_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadElementContentAsLong()
// docid: M:System.Xml.XmlReader.ReadElementContentAsLong
    /**
    Reads the current element and returns the contents as a 64-bit signed integer.

    - Returns: The element content as a 64-bit signed integer.

    */
    open func ReadElementContentAsLong() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i64__ReadElementContentAsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadElementContentAsLong(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a 64-bit signed integer.

    */
    open func ReadElementContentAsLong(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i64__ReadElementContentAsLong_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Object ReadElementContentAsObject()
// docid: M:System.Xml.XmlReader.ReadElementContentAsObject
    /**
    Reads the current element and returns the contents as an .

    - Returns: A boxed common language runtime (CLR) object of the most appropriate type. The  property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.

    */
    open func ReadElementContentAsObject() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Object__ReadElementContentAsObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object ReadElementContentAsObject(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an .

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: A boxed common language runtime (CLR) object of the most appropriate type. The  property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.

    */
    open func ReadElementContentAsObject(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Object__ReadElementContentAsObject_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> ReadElementContentAsObjectAsync()
// docid: M:System.Xml.XmlReader.ReadElementContentAsObjectAsync
    /**
    Asynchronously reads the current element and returns the contents as an .

    - Returns: A boxed common language runtime (CLR) object of the most appropriate type. The  property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.

    */
    open func ReadElementContentAsObjectAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_object___ReadElementContentAsObjectAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String ReadElementContentAsString()
// docid: M:System.Xml.XmlReader.ReadElementContentAsString
    /**
    Reads the current element and returns the contents as a  object.

    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadElementContentAsString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReadElementContentAsString(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
    /**
    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a  object.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsString(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadElementContentAsString_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadElementContentAsStringAsync()
// docid: M:System.Xml.XmlReader.ReadElementContentAsStringAsync
    /**
    Asynchronously reads the current element and returns the contents as a  object.

    - Returns: The element content as a  object.

    */
    open func ReadElementContentAsStringAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_string___ReadElementContentAsStringAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String ReadElementString()
// docid: M:System.Xml.XmlReader.ReadElementString
    /**
    Reads a text-only element. However, we recommend that you use the  method instead, because it provides a more straightforward way to handle this operation.

    - Returns: The text contained in the element that was read. An empty string if the element is empty.

    */
    open func ReadElementString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadElementString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReadElementString(System.String)
// docid: M:System.Xml.XmlReader.ReadElementString(System.String)
    /**
    Checks that the  property of the element found matches the given string before reading a text-only element. However, we recommend that you use the  method instead, because it provides a more straightforward way to handle this operation.

    - Parameter name: The name to check.
    - Returns: The text contained in the element that was read. An empty string if the element is empty.

    */
    open func ReadElementString(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadElementString_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReadElementString(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadElementString(System.String,System.String)
    /**
    Checks that the  and  properties of the element found matches the given strings before reading a text-only element. However, we recommend that you use the  method instead, because it provides a more straightforward way to handle this operation.

    - Parameter localname: The local name to check.
    - Parameter ns: The namespace URI to check.
    - Returns: The text contained in the element that was read. An empty string if the element is empty.

    */
    open func ReadElementString(localname : dotnet.System.String, ns : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadElementString_0__2__String_String(&__thrown, self.get_handle(), localname.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void ReadEndElement()
// docid: M:System.Xml.XmlReader.ReadEndElement
    /**
    Checks that the current content node is an end tag and advances the reader to the next node.

    */
    open func ReadEndElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__ReadEndElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ReadInnerXml()
// docid: M:System.Xml.XmlReader.ReadInnerXml
    /**
    When overridden in a derived class, reads all the content, including markup, as a string.

    - Returns: All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.  
  
 If the current node is neither an element nor attribute, an empty string is returned.

    */
    open func ReadInnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadInnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadInnerXmlAsync()
// docid: M:System.Xml.XmlReader.ReadInnerXmlAsync
    /**
    Asynchronously reads all the content, including markup, as a string.

    - Returns: All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.

    */
    open func ReadInnerXmlAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_string___ReadInnerXmlAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String ReadOuterXml()
// docid: M:System.Xml.XmlReader.ReadOuterXml
    /**
    When overridden in a derived class, reads the content, including markup, representing this node and all its children.

    - Returns: If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.

    */
    open func ReadOuterXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadOuterXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadOuterXmlAsync()
// docid: M:System.Xml.XmlReader.ReadOuterXmlAsync
    /**
    Asynchronously reads the content, including markup, representing this node and all its children.

    - Returns: If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.

    */
    open func ReadOuterXmlAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_string___ReadOuterXmlAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void ReadStartElement()
// docid: M:System.Xml.XmlReader.ReadStartElement
    /**
    Checks that the current node is an element and advances the reader to the next node.

    */
    open func ReadStartElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__ReadStartElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadStartElement(System.String)
// docid: M:System.Xml.XmlReader.ReadStartElement(System.String)
    /**
    Checks that the current content node is an element with the given  and advances the reader to the next node.

    - Parameter name: The qualified name of the element.
    */
    open func ReadStartElement(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__ReadStartElement_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadStartElement(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)
    /**
    Checks that the current content node is an element with the given  and  and advances the reader to the next node.

    - Parameter localname: The local name of the element.
    - Parameter ns: The namespace URI of the element.
    */
    open func ReadStartElement(localname : dotnet.System.String, ns : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__ReadStartElement_0__2__String_String(&__thrown, self.get_handle(), localname.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ReadString()
// docid: M:System.Xml.XmlReader.ReadString
    /**
    When overridden in a derived class, reads the contents of an element or text node as a string. However, we recommend that you use the  method instead, because it provides a more straightforward way to handle this operation.

    - Returns: The contents of the element or an empty string.

    */
    open func ReadString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__ReadString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Xml.XmlReader ReadSubtree()
// docid: M:System.Xml.XmlReader.ReadSubtree
    /**
    Returns a new  instance that can be used to read the current node, and all its descendants.

    - Returns: A new XML reader instance set to . Calling the  method positions the new reader on the node that was current before the call to the  method.

    */
    open func ReadSubtree() throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReader__ReadSubtree_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // bool ReadToDescendant(System.String)
// docid: M:System.Xml.XmlReader.ReadToDescendant(System.String)
    /**
    Advances the  to the next descendant element with the specified qualified name.

    - Parameter name: The qualified name of the element you wish to move to.
    - Returns: 
         if a matching descendant element is found; otherwise . If a matching child element is not found, the  is positioned on the end tag ( is ) of the element.  
  
 If the  is not positioned on an element when  was called, this method returns  and the position of the  is not changed.

    */
    open func ReadToDescendant(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadToDescendant_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadToDescendant(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
    /**
    Advances the  to the next descendant element with the specified local name and namespace URI.

    - Parameter localName: The local name of the element you wish to move to.
    - Parameter namespaceURI: The namespace URI of the element you wish to move to.
    - Returns: 
         if a matching descendant element is found; otherwise . If a matching child element is not found, the  is positioned on the end tag ( is ) of the element.  
  
 If the  is not positioned on an element when  was called, this method returns  and the position of the  is not changed.

    */
    open func ReadToDescendant(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadToDescendant_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadToFollowing(System.String)
// docid: M:System.Xml.XmlReader.ReadToFollowing(System.String)
    /**
    Reads until an element with the specified qualified name is found.

    - Parameter name: The qualified name of the element.
    - Returns: 
         if a matching element is found; otherwise  and the  is in an end of file state.

    */
    open func ReadToFollowing(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadToFollowing_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadToFollowing(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
    /**
    Reads until an element with the specified local name and namespace URI is found.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: 
         if a matching element is found; otherwise  and the  is in an end of file state.

    */
    open func ReadToFollowing(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadToFollowing_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadToNextSibling(System.String)
// docid: M:System.Xml.XmlReader.ReadToNextSibling(System.String)
    /**
    Advances the  to the next sibling element with the specified qualified name.

    - Parameter name: The qualified name of the sibling element you wish to move to.
    - Returns: 
         if a matching sibling element is found; otherwise . If a matching sibling element is not found, the  is positioned on the end tag ( is ) of the parent element.

    */
    open func ReadToNextSibling(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadToNextSibling_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadToNextSibling(System.String, System.String)
// docid: M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
    /**
    Advances the  to the next sibling element with the specified local name and namespace URI.

    - Parameter localName: The local name of the sibling element you wish to move to.
    - Parameter namespaceURI: The namespace URI of the sibling element you wish to move to.
    - Returns: 
         if a matching sibling element is found; otherwise, . If a matching sibling element is not found, the  is positioned on the end tag ( is ) of the parent element.

    */
    open func ReadToNextSibling(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__ReadToNextSibling_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 ReadValueChunk(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
    /**
    Reads large streams of text embedded in an XML document.

    - Parameter buffer: The array of characters that serves as the buffer to which the text contents are written. This value cannot be .
    - Parameter index: The offset within the buffer where the  can start to copy the results.
    - Parameter count: The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.
    - Returns: The number of characters read into the buffer. The value zero is returned when there is no more text content.

    */
    open func ReadValueChunk(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__ReadValueChunk_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadValueChunkAsync(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
    /**
    Asynchronously reads large streams of text embedded in an XML document.

    - Parameter buffer: The array of characters that serves as the buffer to which the text contents are written. This value cannot be .
    - Parameter index: The offset within the buffer where the  can start to copy the results.
    - Parameter count: The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.
    - Returns: The number of characters read into the buffer. The value zero is returned when there is no more text content.

    */
    open func ReadValueChunkAsync(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_System_Threading_Tasks_Task_i32___ReadValueChunkAsync_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void ResolveEntity()
// docid: M:System.Xml.XmlReader.ResolveEntity
    /**
    When overridden in a derived class, resolves the entity reference for  nodes.

    */
    open func ResolveEntity() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__ResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Skip()
// docid: M:System.Xml.XmlReader.Skip
    /**
    Skips the children of the current node.

    */
    open func Skip() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReader_void__Skip_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SkipAsync()
// docid: M:System.Xml.XmlReader.SkipAsync
    /**
    Asynchronously skips the children of the current node.

    - Returns: The current node.

    */
    open func SkipAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Task__SkipAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_AttributeCount()
// docid: M:System.Xml.XmlReader.get_AttributeCount
    open func get_AttributeCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__get_AttributeCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlReader.get_BaseURI
    open func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReadBinaryContent()
// docid: M:System.Xml.XmlReader.get_CanReadBinaryContent
    open func get_CanReadBinaryContent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_CanReadBinaryContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanReadValueChunk()
// docid: M:System.Xml.XmlReader.get_CanReadValueChunk
    open func get_CanReadValueChunk() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_CanReadValueChunk_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanResolveEntity()
// docid: M:System.Xml.XmlReader.get_CanResolveEntity
    open func get_CanResolveEntity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_CanResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Xml.XmlReader.get_Depth
    open func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_EOF()
// docid: M:System.Xml.XmlReader.get_EOF
    open func get_EOF() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_EOF_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasAttributes()
// docid: M:System.Xml.XmlReader.get_HasAttributes
    open func get_HasAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_HasAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:System.Xml.XmlReader.get_HasValue
    open func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Xml.XmlReader.get_IsDefault
    open func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmptyElement()
// docid: M:System.Xml.XmlReader.get_IsEmptyElement
    open func get_IsEmptyElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_bool__get_IsEmptyElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlReader.get_LocalName
    open func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlReader.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlReader.get_NamespaceURI
    open func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlReader.get_NameTable
    open func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlReader.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlReader.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Char get_QuoteChar()
// docid: M:System.Xml.XmlReader.get_QuoteChar
    open func get_QuoteChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Char__get_QuoteChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.ReadState get_ReadState()
// docid: M:System.Xml.XmlReader.get_ReadState
    open func get_ReadState() throws -> dotnet.System.Xml.ReadState {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_ReadState__get_ReadState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ReadState(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XmlReader.get_SchemaInfo
    open func get_SchemaInfo() throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlReaderSettings get_Settings()
// docid: M:System.Xml.XmlReader.get_Settings
    open func get_Settings() throws -> Optional<dotnet.System.Xml.XmlReaderSettings> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlReaderSettings__get_Settings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlReaderSettings(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlReader.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ValueType()
// docid: M:System.Xml.XmlReader.get_ValueType
    open func get_ValueType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_Type__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlReader.get_XmlLang
    open func get_XmlLang() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlReader.get_XmlSpace
    open func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.Int32)
// docid: M:System.Xml.XmlReader.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_Item_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:System.Xml.XmlReader.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Item(System.String, System.String)
// docid: M:System.Xml.XmlReader.get_Item(System.String,System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReader_String__get_Item_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    When overridden in a derived class, gets the number of attributes on the current node.

    */
    open var AttributeCount : Swift.Int32 {
        get {
            return try! get_AttributeCount();
        }
    }
    /**
    When overridden in a derived class, gets the base URI of the current node.

    */
    open var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets a value indicating whether the  implements the binary content read methods.

    */
    open var CanReadBinaryContent : Bool {
        get {
            return try! get_CanReadBinaryContent();
        }
    }
    /**
    Gets a value indicating whether the  implements the  method.

    */
    open var CanReadValueChunk : Bool {
        get {
            return try! get_CanReadValueChunk();
        }
    }
    /**
    Gets a value indicating whether this reader can parse and resolve entities.

    */
    open var CanResolveEntity : Bool {
        get {
            return try! get_CanResolveEntity();
        }
    }
    /**
    When overridden in a derived class, gets the depth of the current node in the XML document.

    */
    open var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.

    */
    open var EOF : Bool {
        get {
            return try! get_EOF();
        }
    }
    /**
    Gets a value indicating whether the current node has any attributes.

    */
    open var HasAttributes : Bool {
        get {
            return try! get_HasAttributes();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the current node can have a .

    */
    open var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.

    */
    open var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, <MyElement/>).

    */
    open var IsEmptyElement : Bool {
        get {
            return try! get_IsEmptyElement();
        }
    }
    /**
    When overridden in a derived class, gets the local name of the current node.

    */
    open var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    When overridden in a derived class, gets the qualified name of the current node.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    When overridden in a derived class, gets the  associated with this implementation.

    */
    open var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
    /**
    When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.

    */
    open var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    When overridden in a derived class, gets the type of the current node.

    */
    open var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    When overridden in a derived class, gets the namespace prefix associated with the current node.

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
    }
    /**
    When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.

    */
    open var QuoteChar : dotnet.System.Char {
        get {
            return try! get_QuoteChar();
        }
    }
    /**
    When overridden in a derived class, gets the state of the reader.

    */
    open var ReadState : dotnet.System.Xml.ReadState {
        get {
            return try! get_ReadState();
        }
    }
    /**
    Gets the schema information that has been assigned to the current node as a result of schema validation.

    */
    open var SchemaInfo : Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        get {
            return try! get_SchemaInfo();
        }
    }
    /**
    Gets the  object used to create this  instance.

    */
    open var Settings : Optional<dotnet.System.Xml.XmlReaderSettings> {
        get {
            return try! get_Settings();
        }
    }
    /**
    When overridden in a derived class, gets the text value of the current node.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    Gets The Common Language Runtime (CLR) type for the current node.

    */
    open var ValueType : dotnet.System.Type_ {
        get {
            return try! get_ValueType();
        }
    }
    /**
    When overridden in a derived class, gets the current  scope.

    */
    open var XmlLang : dotnet.System.String {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    When overridden in a derived class, gets the current  scope.

    */
    open var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
    }
} // XmlReader


// type: System.Xml.XmlReaderSettings
    /**
    Specifies a set of features to support on the  object created by the  method.

    */
public final class XmlReaderSettings
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlReaderSettings_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlReaderSettings.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlReaderSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlReaderSettings Clone()
// docid: M:System.Xml.XmlReaderSettings.Clone
    /**
    Creates a copy of the  instance.

    - Returns: The cloned  object.

    */
    public func Clone() throws -> dotnet.System.Xml.XmlReaderSettings {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_XmlReaderSettings__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReaderSettings(hndl : __return);
        }
    }
    // void Reset()
// docid: M:System.Xml.XmlReaderSettings.Reset
    /**
    Resets the members of the settings class to their default values.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Async()
// docid: M:System.Xml.XmlReaderSettings.get_Async
    public func get_Async() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_Async_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Async(bool)
// docid: M:System.Xml.XmlReaderSettings.set_Async(System.Boolean)
    public func set_Async(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_Async_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CheckCharacters()
// docid: M:System.Xml.XmlReaderSettings.get_CheckCharacters
    public func get_CheckCharacters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_CheckCharacters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CheckCharacters(bool)
// docid: M:System.Xml.XmlReaderSettings.set_CheckCharacters(System.Boolean)
    public func set_CheckCharacters(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_CheckCharacters_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CloseInput()
// docid: M:System.Xml.XmlReaderSettings.get_CloseInput
    public func get_CloseInput() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_CloseInput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CloseInput(bool)
// docid: M:System.Xml.XmlReaderSettings.set_CloseInput(System.Boolean)
    public func set_CloseInput(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_CloseInput_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.ConformanceLevel get_ConformanceLevel()
// docid: M:System.Xml.XmlReaderSettings.get_ConformanceLevel
    public func get_ConformanceLevel() throws -> dotnet.System.Xml.ConformanceLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_ConformanceLevel__get_ConformanceLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ConformanceLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_ConformanceLevel(System.Xml.ConformanceLevel)
// docid: M:System.Xml.XmlReaderSettings.set_ConformanceLevel(System.Xml.ConformanceLevel)
    public func set_ConformanceLevel(value : dotnet.System.Xml.ConformanceLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_ConformanceLevel_0__1__ConformanceLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.DtdProcessing get_DtdProcessing()
// docid: M:System.Xml.XmlReaderSettings.get_DtdProcessing
    public func get_DtdProcessing() throws -> dotnet.System.Xml.DtdProcessing {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_DtdProcessing__get_DtdProcessing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.DtdProcessing(val: __return);
        }
    }
    // [IsSpecialName] void set_DtdProcessing(System.Xml.DtdProcessing)
// docid: M:System.Xml.XmlReaderSettings.set_DtdProcessing(System.Xml.DtdProcessing)
    public func set_DtdProcessing(value : dotnet.System.Xml.DtdProcessing) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_DtdProcessing_0__1__DtdProcessing(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreComments()
// docid: M:System.Xml.XmlReaderSettings.get_IgnoreComments
    public func get_IgnoreComments() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_IgnoreComments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreComments(bool)
// docid: M:System.Xml.XmlReaderSettings.set_IgnoreComments(System.Boolean)
    public func set_IgnoreComments(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_IgnoreComments_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreProcessingInstructions()
// docid: M:System.Xml.XmlReaderSettings.get_IgnoreProcessingInstructions
    public func get_IgnoreProcessingInstructions() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_IgnoreProcessingInstructions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreProcessingInstructions(bool)
// docid: M:System.Xml.XmlReaderSettings.set_IgnoreProcessingInstructions(System.Boolean)
    public func set_IgnoreProcessingInstructions(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_IgnoreProcessingInstructions_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreWhitespace()
// docid: M:System.Xml.XmlReaderSettings.get_IgnoreWhitespace
    public func get_IgnoreWhitespace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_IgnoreWhitespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreWhitespace(bool)
// docid: M:System.Xml.XmlReaderSettings.set_IgnoreWhitespace(System.Boolean)
    public func set_IgnoreWhitespace(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_IgnoreWhitespace_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumberOffset()
// docid: M:System.Xml.XmlReaderSettings.get_LineNumberOffset
    public func get_LineNumberOffset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_i32__get_LineNumberOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LineNumberOffset(System.Int32)
// docid: M:System.Xml.XmlReaderSettings.set_LineNumberOffset(System.Int32)
    public func set_LineNumberOffset(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_LineNumberOffset_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePositionOffset()
// docid: M:System.Xml.XmlReaderSettings.get_LinePositionOffset
    public func get_LinePositionOffset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_i32__get_LinePositionOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LinePositionOffset(System.Int32)
// docid: M:System.Xml.XmlReaderSettings.set_LinePositionOffset(System.Int32)
    public func set_LinePositionOffset(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_LinePositionOffset_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxCharactersFromEntities()
// docid: M:System.Xml.XmlReaderSettings.get_MaxCharactersFromEntities
    public func get_MaxCharactersFromEntities() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_i64__get_MaxCharactersFromEntities_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxCharactersFromEntities(System.Int64)
// docid: M:System.Xml.XmlReaderSettings.set_MaxCharactersFromEntities(System.Int64)
    public func set_MaxCharactersFromEntities(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_MaxCharactersFromEntities_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxCharactersInDocument()
// docid: M:System.Xml.XmlReaderSettings.get_MaxCharactersInDocument
    public func get_MaxCharactersInDocument() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_i64__get_MaxCharactersInDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxCharactersInDocument(System.Int64)
// docid: M:System.Xml.XmlReaderSettings.set_MaxCharactersInDocument(System.Int64)
    public func set_MaxCharactersInDocument(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_MaxCharactersInDocument_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlReaderSettings.get_NameTable
    public func get_NameTable() throws -> Optional<dotnet.System.Xml.XmlNameTable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNameTable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NameTable(System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlReaderSettings.set_NameTable(System.Xml.XmlNameTable)
    public func set_NameTable(value : Optional<dotnet.System.Xml.XmlNameTable>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_NameTable_0__1__XmlNameTable(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ProhibitDtd()
// docid: M:System.Xml.XmlReaderSettings.get_ProhibitDtd
    public func get_ProhibitDtd() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_bool__get_ProhibitDtd_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ProhibitDtd(bool)
// docid: M:System.Xml.XmlReaderSettings.set_ProhibitDtd(System.Boolean)
    public func set_ProhibitDtd(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_ProhibitDtd_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSet get_Schemas()
// docid: M:System.Xml.XmlReaderSettings.get_Schemas
    public func get_Schemas() throws -> dotnet.System.Xml.Schema.XmlSchemaSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_XmlSchemaSet__get_Schemas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaSet(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Schemas(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Xml.XmlReaderSettings.set_Schemas(System.Xml.Schema.XmlSchemaSet)
    public func set_Schemas(value : dotnet.System.Xml.Schema.XmlSchemaSet) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_Schemas_0__1__XmlSchemaSet(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaValidationFlags get_ValidationFlags()
// docid: M:System.Xml.XmlReaderSettings.get_ValidationFlags
    public func get_ValidationFlags() throws -> dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_XmlSchemaValidationFlags__get_ValidationFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: __return);
        }
    }
    // [IsSpecialName] void set_ValidationFlags(System.Xml.Schema.XmlSchemaValidationFlags)
// docid: M:System.Xml.XmlReaderSettings.set_ValidationFlags(System.Xml.Schema.XmlSchemaValidationFlags)
    public func set_ValidationFlags(value : dotnet.System.Xml.Schema.XmlSchemaValidationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_ValidationFlags_0__1__XmlSchemaValidationFlags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.ValidationType get_ValidationType()
// docid: M:System.Xml.XmlReaderSettings.get_ValidationType
    public func get_ValidationType() throws -> dotnet.System.Xml.ValidationType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlReaderSettings_ValidationType__get_ValidationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ValidationType(val: __return);
        }
    }
    // [IsSpecialName] void set_ValidationType(System.Xml.ValidationType)
// docid: M:System.Xml.XmlReaderSettings.set_ValidationType(System.Xml.ValidationType)
    public func set_ValidationType(value : dotnet.System.Xml.ValidationType) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_ValidationType_0__1__ValidationType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.XmlReaderSettings.set_XmlResolver(System.Xml.XmlResolver)
    public func set_XmlResolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.XmlReaderSettings.add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    public func add_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__add_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try add_ValidationEventHandler(value: del_value);
    }
    // [IsSpecialName] void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.XmlReaderSettings.remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    public func remove_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlReaderSettings_void__remove_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try remove_ValidationEventHandler(value: del_value);
    }
    /**
    Gets or sets whether asynchronous  methods can be used on a particular  instance.

    */
    public var Async : Bool {
        get {
            return try! get_Async();
        }
        set(v) {
            return try! set_Async(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to do character checking.

    */
    public var CheckCharacters : Bool {
        get {
            return try! get_CheckCharacters();
        }
        set(v) {
            return try! set_CheckCharacters(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the underlying stream or  should be closed when the reader is closed.

    */
    public var CloseInput : Bool {
        get {
            return try! get_CloseInput();
        }
        set(v) {
            return try! set_CloseInput(value: v);
        }
    }
    /**
    Gets or sets the level of conformance which the  will comply.

    */
    public var ConformanceLevel : dotnet.System.Xml.ConformanceLevel {
        get {
            return try! get_ConformanceLevel();
        }
        set(v) {
            return try! set_ConformanceLevel(value: v);
        }
    }
    /**
    Gets or sets a value that determines the processing of DTDs.

    */
    public var DtdProcessing : dotnet.System.Xml.DtdProcessing {
        get {
            return try! get_DtdProcessing();
        }
        set(v) {
            return try! set_DtdProcessing(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to ignore comments.

    */
    public var IgnoreComments : Bool {
        get {
            return try! get_IgnoreComments();
        }
        set(v) {
            return try! set_IgnoreComments(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to ignore processing instructions.

    */
    public var IgnoreProcessingInstructions : Bool {
        get {
            return try! get_IgnoreProcessingInstructions();
        }
        set(v) {
            return try! set_IgnoreProcessingInstructions(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to ignore insignificant white space.

    */
    public var IgnoreWhitespace : Bool {
        get {
            return try! get_IgnoreWhitespace();
        }
        set(v) {
            return try! set_IgnoreWhitespace(value: v);
        }
    }
    /**
    Gets or sets line number offset of the  object.

    */
    public var LineNumberOffset : Swift.Int32 {
        get {
            return try! get_LineNumberOffset();
        }
        set(v) {
            return try! set_LineNumberOffset(value: v);
        }
    }
    /**
    Gets or sets line position offset of the  object.

    */
    public var LinePositionOffset : Swift.Int32 {
        get {
            return try! get_LinePositionOffset();
        }
        set(v) {
            return try! set_LinePositionOffset(value: v);
        }
    }
    /**
    Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.

    */
    public var MaxCharactersFromEntities : Swift.Int64 {
        get {
            return try! get_MaxCharactersFromEntities();
        }
        set(v) {
            return try! set_MaxCharactersFromEntities(value: v);
        }
    }
    /**
    Gets or sets a value indicating the maximum allowable number of characters in an XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.

    */
    public var MaxCharactersInDocument : Swift.Int64 {
        get {
            return try! get_MaxCharactersInDocument();
        }
        set(v) {
            return try! set_MaxCharactersInDocument(value: v);
        }
    }
    /**
    Gets or sets the  used for atomized string comparisons.

    */
    public var NameTable : Optional<dotnet.System.Xml.XmlNameTable> {
        get {
            return try! get_NameTable();
        }
        set(v) {
            return try! set_NameTable(value: v!);
        }
    }
    /**
    Gets or sets a value indicating whether to prohibit document type definition (DTD) processing. This property is obsolete. Use  instead.

    */
    public var ProhibitDtd : Bool {
        get {
            return try! get_ProhibitDtd();
        }
        set(v) {
            return try! set_ProhibitDtd(value: v);
        }
    }
    /**
    Gets or sets the  to use when performing schema validation.

    */
    public var Schemas : dotnet.System.Xml.Schema.XmlSchemaSet {
        get {
            return try! get_Schemas();
        }
        set(v) {
            return try! set_Schemas(value: v);
        }
    }
    /**
    Gets or sets a value indicating the schema validation settings. This setting applies to  objects that validate schemas ( property set to ).

    */
    public var ValidationFlags : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
            return try! get_ValidationFlags();
        }
        set(v) {
            return try! set_ValidationFlags(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the  will perform validation or type assignment when reading.

    */
    public var ValidationType : dotnet.System.Xml.ValidationType {
        get {
            return try! get_ValidationType();
        }
        set(v) {
            return try! set_ValidationType(value: v);
        }
    }
} // XmlReaderSettings


// type: System.Xml.XmlResolver
    /**
    Resolves external XML resources named by a Uniform Resource Identifier (URI).

    */
open class XmlResolver
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object GetEntity(System.Uri, System.String, System.Type)
// docid: M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
    /**
    When overridden in a derived class, maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: Currently not used.
    - Parameter ofObjectToReturn: The type of object to return. The current version only returns System.IO.Stream objects.
    - Returns: A stream object or  if a type other than stream is specified.

    */
    open func GetEntity(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlResolver_Object__GetEntity_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetEntityAsync(System.Uri, System.String, System.Type)
// docid: M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
    /**
    Asynchronously maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: Currently not used.
    - Parameter ofObjectToReturn: The type of object to return. The current version only returns  objects.
    - Returns: A stream object or  if a type other than stream is specified.

    */
    open func GetEntityAsync(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlResolver_System_Threading_Tasks_Task_object___GetEntityAsync_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Uri ResolveUri(System.Uri, System.String)
// docid: M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
    /**
    When overridden in a derived class, resolves the absolute URI from the base and relative URIs.

    - Parameter baseUri: The base URI used to resolve the relative URI.
    - Parameter relativeUri: The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the  value. If relative, it combines with the  to make an absolute URI.
    - Returns: The absolute URI or  if the relative URI cannot be resolved.

    */
    open func ResolveUri(baseUri : Optional<dotnet.System.Uri>, relativeUri : Optional<dotnet.System.String>) throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlResolver_Uri__ResolveUri_0__2__Uri_String(&__thrown, self.get_handle(), baseUri?.get_handle() ?? nil, relativeUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // bool SupportsType(System.Uri, System.Type)
// docid: M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
    /**
    Enables the resolver to return types other than .

    - Parameter absoluteUri: The URI.
    - Parameter type: The type to return.
    - Returns: 
         if the  is supported; otherwise, .

    */
    open func SupportsType(absoluteUri : dotnet.System.Uri, type : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlResolver_bool__SupportsType_0__2__Uri_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Xml.XmlResolver.set_Credentials(System.Net.ICredentials)
    open func set_Credentials(value : dotnet.System.Net.ICredentials) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlResolver_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlResolver


// type: System.Xml.XmlSecureResolver
    /**
    Helps to secure another implementation of  by wrapping the  object and restricting the resources that the underlying  has access to.

    */
open class XmlSecureResolver
    :
    dotnet.System.Xml.XmlResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlSecureResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.XmlResolver, System.String)
// docid: M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
    /**
    Initializes a new instance of the  class with the  and URL provided.

    - Parameter resolver: The XML resolver that is wrapped by the .
    - Parameter securityUrl: The URL used to create the  that will be applied to the underlying . The  calls  on the created  before calling  on the underlying .
    */
    public init(resolver : dotnet.System.Xml.XmlResolver, securityUrl : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlSecureResolver_ctor_0__2__XmlResolver_String(&__thrown, resolver.get_handle(), securityUrl?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetEntity(System.Uri, System.String, System.Type)
// docid: M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
    /**
    Maps a URI to an object that contains the actual resource. This method temporarily sets the  created in the constructor by calling  before calling  on the underlying  to open the resource.

    - Parameter absoluteUri: The URI that is returned from .
    - Parameter role: Currently not used.
    - Parameter ofObjectToReturn: The type of object to return. The current version only returns  objects.
    - Returns: The stream returned by calling  on the underlying . If a type other than  is specified, the method returns .

    */
    open override func GetEntity(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSecureResolver_Object__GetEntity_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetEntityAsync(System.Uri, System.String, System.Type)
// docid: M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
    /**
    Asynchronously maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: Currently not used.
    - Parameter ofObjectToReturn: The type of object to return. The current version only returns  objects.
    - Returns: The stream returned by calling  on the underlying . If a type other than  is specified, the method returns .

    */
    open override func GetEntityAsync(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSecureResolver_System_Threading_Tasks_Task_object___GetEntityAsync_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Uri ResolveUri(System.Uri, System.String)
// docid: M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
    /**
    Resolves the absolute URI from the base and relative URIs by calling  on the underlying .

    - Parameter baseUri: The base URI used to resolve the relative URI.
    - Parameter relativeUri: The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the  value. If relative, it combines with the  to make an absolute URI.
    - Returns: The absolute URI or  if the relative URI cannot be resolved (returned by calling  on the underlying ).

    */
    open override func ResolveUri(baseUri : Optional<dotnet.System.Uri>, relativeUri : Optional<dotnet.System.String>) throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSecureResolver_Uri__ResolveUri_0__2__Uri_String(&__thrown, self.get_handle(), baseUri?.get_handle() ?? nil, relativeUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Xml.XmlSecureResolver.set_Credentials(System.Net.ICredentials)
    open override func set_Credentials(value : dotnet.System.Net.ICredentials) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlSecureResolver_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSecureResolver


// type: System.Xml.XmlSignificantWhitespace
    /**
    Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.

    */
open class XmlSignificantWhitespace
    :
    dotnet.System.Xml.XmlCharacterData
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlSignificantWhitespace_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlSignificantWhitespace_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlSignificantWhitespace_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlSignificantWhitespace.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlSignificantWhitespace.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlSignificantWhitespace.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlSignificantWhitespace.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousText()
// docid: M:System.Xml.XmlSignificantWhitespace.get_PreviousText
    open override func get_PreviousText() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_XmlNode__get_PreviousText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlSignificantWhitespace.get_Value
    open override func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlSignificantWhitespace_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlSignificantWhitespace.set_Value(System.String)
    open override func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlSignificantWhitespace_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the parent of the current node.

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets the text node that immediately precedes this node.

    */
    open override var PreviousText : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousText();
        }
    }
    /**
    Gets or sets the value of the node.

    */
    open override var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlSignificantWhitespace


// type: System.Xml.XmlSpace
    /**
    Specifies the current  scope.

    */
public struct XmlSpace : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlSpace_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlSpace None
    /**
    No  scope.

    */
    public static var None : dotnet.System.Xml.XmlSpace {
        get {
        let __return = dotnet.System.Xml.XmlSpace(val: System_Xml_XmlSpace_get_None());
            return __return;
        }
    }
    // static field: System.Xml.XmlSpace Default
    /**
    The  scope equals .

    */
    public static var Default : dotnet.System.Xml.XmlSpace {
        get {
        let __return = dotnet.System.Xml.XmlSpace(val: System_Xml_XmlSpace_get_Default());
            return __return;
        }
    }
    // static field: System.Xml.XmlSpace Preserve
    /**
    The  scope equals .

    */
    public static var Preserve : dotnet.System.Xml.XmlSpace {
        get {
        let __return = dotnet.System.Xml.XmlSpace(val: System_Xml_XmlSpace_get_Preserve());
            return __return;
        }
    }
} // XmlSpace


// type: System.Xml.XmlText
    /**
    Represents the text content of an element or attribute.

    */
open class XmlText
    :
    dotnet.System.Xml.XmlCharacterData
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlText_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlText.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // System.Xml.XmlText SplitText(System.Int32)
// docid: M:System.Xml.XmlText.SplitText(System.Int32)
    /**
    Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.

    - Parameter offset: The offset at which to split the node.
    - Returns: The new node.

    */
    open func SplitText(offset : Swift.Int32) throws -> dotnet.System.Xml.XmlText {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_XmlText__SplitText_0__1__i32(&__thrown, self.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlText(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .  nodes do not have children, so this method has no effect.

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlText_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlText_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlText.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlText.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlText.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlText.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousText()
// docid: M:System.Xml.XmlText.get_PreviousText
    open override func get_PreviousText() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_XmlNode__get_PreviousText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlText.get_Value
    open override func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlText_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlText.set_Value(System.String)
    open override func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlText_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the parent of this node (for nodes that can have parents).

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets the text node that immediately precedes this node.

    */
    open override var PreviousText : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousText();
        }
    }
    /**
    Gets or sets the value of the node.

    */
    open override var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlText


// type: System.Xml.XmlTextReader
    /**
    Represents a reader that provides fast, non-cached, forward-only access to XML data.  
  
 Starting with the .NET Framework 2.0, we recommend that you use the  class instead.

    */
open class XmlTextReader
    :
    dotnet.System.Xml.XmlReader,
    System_Xml_IXmlLineInfo,
    System_Xml_IXmlNamespaceResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlTextReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of the  class with the specified stream.

    - Parameter input: The stream containing the XML data to read.
    */
    public init(input : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__1__Stream(&__thrown, input.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified stream and .

    - Parameter input: The stream containing the XML data to read.
    - Parameter nt: The  to use.
    */
    public init(input : dotnet.System.IO.Stream, nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__2__Stream_XmlNameTable(&__thrown, input.get_handle(), nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Xml.XmlNodeType, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
    /**
    Initializes a new instance of the  class with the specified stream, , and .

    - Parameter xmlFragment: The stream containing the XML fragment to parse.
    - Parameter fragType: The  of the XML fragment. This also determines what the fragment can contain. (See table below.)
    - Parameter context: The  in which the  is to be parsed. This includes the  to use, encoding, namespace scope, the current xml:lang, and the xml:space scope.
    */
    public init(xmlFragment : dotnet.System.IO.Stream, fragType : dotnet.System.Xml.XmlNodeType, context : Optional<dotnet.System.Xml.XmlParserContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__3__Stream_XmlNodeType_XmlParserContext(&__thrown, xmlFragment.get_handle(), fragType.get_value(), context?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextReader)
// docid: M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter input: The  containing the XML data to read.
    */
    public init(input : dotnet.System.IO.TextReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__1__TextReader(&__thrown, input.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextReader, System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified  and .

    - Parameter input: The  containing the XML data to read.
    - Parameter nt: The  to use.
    */
    public init(input : dotnet.System.IO.TextReader, nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__2__TextReader_XmlNameTable(&__thrown, input.get_handle(), nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified file.

    - Parameter url: The URL for the file containing the XML data. The  is set to this value.
    */
    public init(url : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__1__String(&__thrown, url.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.Stream)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)
    /**
    Initializes a new instance of the  class with the specified URL and stream.

    - Parameter url: The URL to use for resolving external resources. The  is set to this value.
    - Parameter input: The stream containing the XML data to read.
    */
    public init(url : dotnet.System.String, input : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__2__String_Stream(&__thrown, url.get_handle(), input.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.Stream, System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified URL, stream and .

    - Parameter url: The URL to use for resolving external resources. The  is set to this value. If  is ,  is set to .
    - Parameter input: The stream containing the XML data to read.
    - Parameter nt: The  to use.
    */
    public init(url : dotnet.System.String, input : dotnet.System.IO.Stream, nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__3__String_Stream_XmlNameTable(&__thrown, url.get_handle(), input.get_handle(), nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.TextReader)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)
    /**
    Initializes a new instance of the  class with the specified URL and .

    - Parameter url: The URL to use for resolving external resources. The  is set to this value.
    - Parameter input: The  containing the XML data to read.
    */
    public init(url : dotnet.System.String, input : dotnet.System.IO.TextReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__2__String_TextReader(&__thrown, url.get_handle(), input.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.TextReader, System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified URL,  and .

    - Parameter url: The URL to use for resolving external resources. The  is set to this value. If  is ,  is set to .
    - Parameter input: The  containing the XML data to read.
    - Parameter nt: The  to use.
    */
    public init(url : dotnet.System.String, input : dotnet.System.IO.TextReader, nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__3__String_TextReader_XmlNameTable(&__thrown, url.get_handle(), input.get_handle(), nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Xml.XmlNameTable)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified file and .

    - Parameter url: The URL for the file containing the XML data to read.
    - Parameter nt: The  to use.
    */
    public init(url : dotnet.System.String, nt : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__2__String_XmlNameTable(&__thrown, url.get_handle(), nt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Xml.XmlNodeType, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
    /**
    Initializes a new instance of the  class with the specified string, , and .

    - Parameter xmlFragment: The string containing the XML fragment to parse.
    - Parameter fragType: The  of the XML fragment. This also determines what the fragment string can contain. (See table below.)
    - Parameter context: The  in which the  is to be parsed. This includes the  to use, encoding, namespace scope, the current xml:lang, and the xml:space scope.
    */
    public init(xmlFragment : dotnet.System.String, fragType : dotnet.System.Xml.XmlNodeType, context : Optional<dotnet.System.Xml.XmlParserContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextReader_ctor_0__3__String_XmlNodeType_XmlParserContext(&__thrown, xmlFragment.get_handle(), fragType.get_value(), context?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Xml.XmlTextReader.Close
    /**
    Changes the  to .

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetAttribute(System.Int32)
// docid: M:System.Xml.XmlTextReader.GetAttribute(System.Int32)
    /**
    Gets the value of the attribute with the specified index.

    - Parameter i: The index of the attribute. The index is zero-based. (The first attribute has index 0.)
    - Returns: The value of the specified attribute.

    */
    open override func GetAttribute(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__GetAttribute_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String)
// docid: M:System.Xml.XmlTextReader.GetAttribute(System.String)
    /**
    Gets the value of the attribute with the specified name.

    - Parameter name: The qualified name of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found,  is returned.

    */
    open override func GetAttribute(name : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__GetAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetAttribute(System.String, System.String)
// docid: M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)
    /**
    Gets the value of the attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found,  is returned. This method does not move the reader.

    */
    open func GetAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__GetAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetNamespacesInScope(System.Xml.XmlNamespaceScope)
// docid: M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    /**
    Gets a collection that contains all namespaces currently in-scope.

    - Parameter scope: An  value that specifies the type of namespace nodes to return.
    - Returns: An  object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.

    */
    open func GetNamespacesInScope(scope : dotnet.System.Xml.XmlNamespaceScope) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_System_Collections_Generic_IDictionary_string_string___GetNamespacesInScope_0__1__XmlNamespaceScope(&__thrown, self.get_handle(), scope.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // System.IO.TextReader GetRemainder()
// docid: M:System.Xml.XmlTextReader.GetRemainder
    /**
    Gets the remainder of the buffered XML.

    - Returns: A  containing the remainder of the buffered XML.

    */
    open func GetRemainder() throws -> dotnet.System.IO.TextReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_TextReader__GetRemainder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextReader(hndl : __return);
        }
    }
    // bool HasLineInfo()
// docid: M:System.Xml.XmlTextReader.HasLineInfo
    /**
    Gets a value indicating whether the class can return line information.

    - Returns: 
         if the class can return line information; otherwise, .

    */
    open /* method final */ func HasLineInfo() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__HasLineInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.XmlTextReader.LookupNamespace(System.String)
    /**
    Resolves a namespace prefix in the current element's scope.

    - Parameter prefix: The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.
    - Returns: The namespace URI to which the prefix maps or  if no matching prefix is found.

    */
    open override func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void MoveToAttribute(System.Int32)
// docid: M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)
    /**
    Moves to the attribute with the specified index.

    - Parameter i: The index of the attribute.
    */
    open override func MoveToAttribute(i : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__MoveToAttribute_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveToAttribute(System.String)
// docid: M:System.Xml.XmlTextReader.MoveToAttribute(System.String)
    /**
    Moves to the attribute with the specified name.

    - Parameter name: The qualified name of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the reader's position does not change.

    */
    open override func MoveToAttribute(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__MoveToAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToAttribute(System.String, System.String)
// docid: M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)
    /**
    Moves to the attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the reader's position does not change.

    */
    open func MoveToAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__MoveToAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToElement()
// docid: M:System.Xml.XmlTextReader.MoveToElement
    /**
    Moves to the element that contains the current attribute node.

    - Returns: 
         if the reader is positioned on an attribute (the reader moves to the element that owns the attribute);  if the reader is not positioned on an attribute (the position of the reader does not change).

    */
    open override func MoveToElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__MoveToElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstAttribute()
// docid: M:System.Xml.XmlTextReader.MoveToFirstAttribute
    /**
    Moves to the first attribute.

    - Returns: 
         if an attribute exists (the reader moves to the first attribute); otherwise,  (the position of the reader does not change).

    */
    open override func MoveToFirstAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__MoveToFirstAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextAttribute()
// docid: M:System.Xml.XmlTextReader.MoveToNextAttribute
    /**
    Moves to the next attribute.

    - Returns: 
         if there is a next attribute;  if there are no more attributes.

    */
    open override func MoveToNextAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__MoveToNextAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Read()
// docid: M:System.Xml.XmlTextReader.Read
    /**
    Reads the next node from the stream.

    - Returns: 
         if the next node was read successfully;  if there are no more nodes to read.

    */
    open override func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadAttributeValue()
// docid: M:System.Xml.XmlTextReader.ReadAttributeValue
    /**
    Parses the attribute value into one or more , , or  nodes.

    - Returns: 
         if there are nodes to return.  
  
  if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  
  
 An empty attribute, such as, misc="", returns  with a single node with a value of .

    */
    open override func ReadAttributeValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__ReadAttributeValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 ReadBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes Base64 and returns the decoded binary bytes.

    - Parameter array: The array of characters that serves as the buffer to which the text contents are written.
    - Parameter offset: The zero-based index into the array specifying where the method can begin to write to the buffer.
    - Parameter len: The number of bytes to write into the buffer.
    - Returns: The number of bytes written to the buffer.

    */
    open func ReadBase64(array : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, len : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), array.get_handle(), offset, len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes  and returns the decoded binary bytes.

    - Parameter array: The byte array that serves as the buffer to which the decoded binary bytes are written.
    - Parameter offset: The zero-based index into the array specifying where the method can begin to write to the buffer.
    - Parameter len: The number of bytes to write into the buffer.
    - Returns: The number of bytes written to your buffer.

    */
    open func ReadBinHex(array : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, len : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), array.get_handle(), offset, len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadChars(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)
    /**
    Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.

    - Parameter buffer: The array of characters that serves as the buffer to which the text contents are written.
    - Parameter index: The position within  where the method can begin writing text contents.
    - Parameter count: The number of characters to write into .
    - Returns: The number of characters read. This can be  if the reader is not positioned on an element or if there is no more text content to return in the current context.

    */
    open func ReadChars(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadChars_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the  decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the  decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the Base64 content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadElementContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadElementContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the  content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadElementContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__ReadElementContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ReadString()
// docid: M:System.Xml.XmlTextReader.ReadString
    /**
    Reads the contents of an element or a text node as a string.

    - Returns: The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  
  
  The text node can be either an element or an attribute text node.

    */
    open override func ReadString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__ReadString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void ResetState()
// docid: M:System.Xml.XmlTextReader.ResetState
    /**
    Resets the state of the reader to ReadState.Initial.

    */
    open func ResetState() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__ResetState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResolveEntity()
// docid: M:System.Xml.XmlTextReader.ResolveEntity
    /**
    Resolves the entity reference for  nodes.

    */
    open override func ResolveEntity() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__ResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Skip()
// docid: M:System.Xml.XmlTextReader.Skip
    /**
    Skips the children of the current node.

    */
    open override func Skip() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__Skip_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_AttributeCount()
// docid: M:System.Xml.XmlTextReader.get_AttributeCount
    open override func get_AttributeCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__get_AttributeCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlTextReader.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReadBinaryContent()
// docid: M:System.Xml.XmlTextReader.get_CanReadBinaryContent
    open override func get_CanReadBinaryContent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_CanReadBinaryContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanReadValueChunk()
// docid: M:System.Xml.XmlTextReader.get_CanReadValueChunk
    open override func get_CanReadValueChunk() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_CanReadValueChunk_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanResolveEntity()
// docid: M:System.Xml.XmlTextReader.get_CanResolveEntity
    open override func get_CanResolveEntity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_CanResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Xml.XmlTextReader.get_Depth
    open override func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Xml.DtdProcessing get_DtdProcessing()
// docid: M:System.Xml.XmlTextReader.get_DtdProcessing
    open func get_DtdProcessing() throws -> dotnet.System.Xml.DtdProcessing {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_DtdProcessing__get_DtdProcessing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.DtdProcessing(val: __return);
        }
    }
    // [IsSpecialName] void set_DtdProcessing(System.Xml.DtdProcessing)
// docid: M:System.Xml.XmlTextReader.set_DtdProcessing(System.Xml.DtdProcessing)
    open func set_DtdProcessing(value : dotnet.System.Xml.DtdProcessing) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_DtdProcessing_0__1__DtdProcessing(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:System.Xml.XmlTextReader.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.EntityHandling get_EntityHandling()
// docid: M:System.Xml.XmlTextReader.get_EntityHandling
    open func get_EntityHandling() throws -> dotnet.System.Xml.EntityHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_EntityHandling__get_EntityHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.EntityHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_EntityHandling(System.Xml.EntityHandling)
// docid: M:System.Xml.XmlTextReader.set_EntityHandling(System.Xml.EntityHandling)
    open func set_EntityHandling(value : dotnet.System.Xml.EntityHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_EntityHandling_0__1__EntityHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EOF()
// docid: M:System.Xml.XmlTextReader.get_EOF
    open override func get_EOF() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_EOF_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:System.Xml.XmlTextReader.get_HasValue
    open override func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Xml.XmlTextReader.get_IsDefault
    open override func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmptyElement()
// docid: M:System.Xml.XmlTextReader.get_IsEmptyElement
    open override func get_IsEmptyElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_IsEmptyElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.XmlTextReader.get_LineNumber
    open /* method final */ func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.XmlTextReader.get_LinePosition
    open /* method final */ func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlTextReader.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlTextReader.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Namespaces()
// docid: M:System.Xml.XmlTextReader.get_Namespaces
    open func get_Namespaces() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_Namespaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Namespaces(bool)
// docid: M:System.Xml.XmlTextReader.set_Namespaces(System.Boolean)
    open func set_Namespaces(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_Namespaces_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlTextReader.get_NamespaceURI
    open override func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlTextReader.get_NameTable
    open override func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlTextReader.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] bool get_Normalization()
// docid: M:System.Xml.XmlTextReader.get_Normalization
    open func get_Normalization() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_Normalization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Normalization(bool)
// docid: M:System.Xml.XmlTextReader.set_Normalization(System.Boolean)
    open func set_Normalization(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_Normalization_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlTextReader.get_Prefix
    open override func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ProhibitDtd()
// docid: M:System.Xml.XmlTextReader.get_ProhibitDtd
    open func get_ProhibitDtd() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_bool__get_ProhibitDtd_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ProhibitDtd(bool)
// docid: M:System.Xml.XmlTextReader.set_ProhibitDtd(System.Boolean)
    open func set_ProhibitDtd(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_ProhibitDtd_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Char get_QuoteChar()
// docid: M:System.Xml.XmlTextReader.get_QuoteChar
    open override func get_QuoteChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_Char__get_QuoteChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.ReadState get_ReadState()
// docid: M:System.Xml.XmlTextReader.get_ReadState
    open override func get_ReadState() throws -> dotnet.System.Xml.ReadState {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_ReadState__get_ReadState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ReadState(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlTextReader.get_Value
    open override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.WhitespaceHandling get_WhitespaceHandling()
// docid: M:System.Xml.XmlTextReader.get_WhitespaceHandling
    open func get_WhitespaceHandling() throws -> dotnet.System.Xml.WhitespaceHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_WhitespaceHandling__get_WhitespaceHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.WhitespaceHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_WhitespaceHandling(System.Xml.WhitespaceHandling)
// docid: M:System.Xml.XmlTextReader.set_WhitespaceHandling(System.Xml.WhitespaceHandling)
    open func set_WhitespaceHandling(value : dotnet.System.Xml.WhitespaceHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_WhitespaceHandling_0__1__WhitespaceHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlTextReader.get_XmlLang
    open override func get_XmlLang() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.XmlTextReader.set_XmlResolver(System.Xml.XmlResolver)
    open func set_XmlResolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextReader_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlTextReader.get_XmlSpace
    open override func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextReader_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    /**
    Gets the number of attributes on the current node.

    */
    open override var AttributeCount : Swift.Int32 {
        get {
            return try! get_AttributeCount();
        }
    }
    /**
    Gets the base URI of the current node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets a value indicating whether the  implements the binary content read methods.

    */
    open override var CanReadBinaryContent : Bool {
        get {
            return try! get_CanReadBinaryContent();
        }
    }
    /**
    Gets a value indicating whether the  implements the  method.

    */
    open override var CanReadValueChunk : Bool {
        get {
            return try! get_CanReadValueChunk();
        }
    }
    /**
    Gets a value indicating whether this reader can parse and resolve entities.

    */
    open override var CanResolveEntity : Bool {
        get {
            return try! get_CanResolveEntity();
        }
    }
    /**
    Gets the depth of the current node in the XML document.

    */
    open override var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    Gets or sets the  enumeration.

    */
    open var DtdProcessing : dotnet.System.Xml.DtdProcessing {
        get {
            return try! get_DtdProcessing();
        }
        set(v) {
            return try! set_DtdProcessing(value: v);
        }
    }
    /**
    Gets a value indicating whether the reader is positioned at the end of the stream.

    */
    open override var EOF : Bool {
        get {
            return try! get_EOF();
        }
    }
    /**
    Gets the encoding of the document.

    */
    open var Encoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_Encoding();
        }
    }
    /**
    Gets or sets a value that specifies how the reader handles entities.

    */
    open var EntityHandling : dotnet.System.Xml.EntityHandling {
        get {
            return try! get_EntityHandling();
        }
        set(v) {
            return try! set_EntityHandling(value: v);
        }
    }
    /**
    Gets a value indicating whether the current node can have a  other than .

    */
    open override var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.

    */
    open override var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
    }
    /**
    Gets a value indicating whether the current node is an empty element (for example, <MyElement/>).

    */
    open override var IsEmptyElement : Bool {
        get {
            return try! get_IsEmptyElement();
        }
    }
    /**
    Gets the current line number.

    */
    public var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the current line position.

    */
    public var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the local name of the current node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the current node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the  associated with this implementation.

    */
    open override var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
    /**
    Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.

    */
    open override var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets or sets a value indicating whether to do namespace support.

    */
    open var Namespaces : Bool {
        get {
            return try! get_Namespaces();
        }
        set(v) {
            return try! set_Namespaces(value: v);
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets a value indicating whether to normalize white space and attribute values.

    */
    open var Normalization : Bool {
        get {
            return try! get_Normalization();
        }
        set(v) {
            return try! set_Normalization(value: v);
        }
    }
    /**
    Gets the namespace prefix associated with the current node.

    */
    open override var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
    }
    /**
    Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use  instead.

    */
    open var ProhibitDtd : Bool {
        get {
            return try! get_ProhibitDtd();
        }
        set(v) {
            return try! set_ProhibitDtd(value: v);
        }
    }
    /**
    Gets the quotation mark character used to enclose the value of an attribute node.

    */
    open override var QuoteChar : dotnet.System.Char {
        get {
            return try! get_QuoteChar();
        }
    }
    /**
    Gets the state of the reader.

    */
    open override var ReadState : dotnet.System.Xml.ReadState {
        get {
            return try! get_ReadState();
        }
    }
    /**
    Gets the text value of the current node.

    */
    open override var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    Gets or sets a value that specifies how white space is handled.

    */
    open var WhitespaceHandling : dotnet.System.Xml.WhitespaceHandling {
        get {
            return try! get_WhitespaceHandling();
        }
        set(v) {
            return try! set_WhitespaceHandling(value: v);
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlLang : dotnet.System.String {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
    }
} // XmlTextReader


// type: System.Xml.XmlTextWriter
    /**
    Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.  
  
 Starting with the .NET Framework 2.0, we recommend that you use the  class instead.

    */
open class XmlTextWriter
    :
    dotnet.System.Xml.XmlWriter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlTextWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Text.Encoding)
// docid: M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)
    /**
    Creates an instance of the  class using the specified stream and encoding.

    - Parameter w: The stream to which you want to write.
    - Parameter encoding: The encoding to generate. If encoding is  it writes out the stream as UTF-8 and omits the encoding attribute from the .
    */
    public init(w : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextWriter_ctor_0__2__Stream_Encoding(&__thrown, w.get_handle(), encoding?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter)
// docid: M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)
    /**
    Creates an instance of the  class using the specified .

    - Parameter w: The  to write to. It is assumed that the  is already set to the correct encoding.
    */
    public init(w : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextWriter_ctor_0__1__TextWriter(&__thrown, w.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Text.Encoding)
// docid: M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)
    /**
    Creates an instance of the  class using the specified file.

    - Parameter filename: The filename to write to. If the file exists, it truncates it and overwrites it with the new content.
    - Parameter encoding: The encoding to generate. If encoding is  it writes the file out as UTF-8, and omits the encoding attribute from the .
    */
    public init(filename : dotnet.System.String, encoding : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlTextWriter_ctor_0__2__String_Encoding(&__thrown, filename.get_handle(), encoding?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Xml.XmlTextWriter.Close
    /**
    Closes this stream and the underlying stream.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.Xml.XmlTextWriter.Flush
    /**
    Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.

    */
    open override func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String LookupPrefix(System.String)
// docid: M:System.Xml.XmlTextWriter.LookupPrefix(System.String)
    /**
    Returns the closest prefix defined in the current namespace scope for the namespace URI.

    - Parameter ns: Namespace URI whose prefix you want to find.
    - Returns: The matching prefix. Or  if no matching namespace URI is found in the current scope.

    */
    open override func LookupPrefix(ns : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_String__LookupPrefix_0__1__String(&__thrown, self.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Encodes the specified binary bytes as base64 and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position within the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    */
    open override func WriteBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Encodes the specified binary bytes as binhex and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position in the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    */
    open override func WriteBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteCData(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteCData(System.String)
    /**
    Writes out a <![CDATA[...]]> block containing the specified text.

    - Parameter text: Text to place inside the CDATA block.
    */
    open override func WriteCData(text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteCData_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteCharEntity(System.Char)
// docid: M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)
    /**
    Forces the generation of a character entity for the specified Unicode character value.

    - Parameter ch: Unicode character for which to generate a character entity.
    */
    open override func WriteCharEntity(ch : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteCharEntity_0__1__Char(&__thrown, self.get_handle(), ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteChars(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)
    /**
    Writes text one buffer at a time.

    - Parameter buffer: Character array containing the text to write.
    - Parameter index: The position in the buffer indicating the start of the text to write.
    - Parameter count: The number of characters to write.
    */
    open override func WriteChars(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteChars_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteComment(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteComment(System.String)
    /**
    Writes out a comment <!--...--> containing the specified text.

    - Parameter text: Text to place inside the comment.
    */
    open override func WriteComment(text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteComment_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteDocType(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)
    /**
    Writes the DOCTYPE declaration with the specified name and optional attributes.

    - Parameter name: The name of the DOCTYPE. This must be non-empty.
    - Parameter pubid: If non-null it also writes PUBLIC "pubid" "sysid" where  and  are replaced with the value of the given arguments.
    - Parameter sysid: If  is null and  is non-null it writes SYSTEM "sysid" where  is replaced with the value of this argument.
    - Parameter subset: If non-null it writes [subset] where subset is replaced with the value of this argument.
    */
    open override func WriteDocType(name : dotnet.System.String, pubid : Optional<dotnet.System.String>, sysid : Optional<dotnet.System.String>, subset : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteDocType_0__4__String_String_String_String(&__thrown, self.get_handle(), name.get_handle(), pubid?.get_handle() ?? nil, sysid?.get_handle() ?? nil, subset?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndAttribute()
// docid: M:System.Xml.XmlTextWriter.WriteEndAttribute
    /**
    Closes the previous  call.

    */
    open override func WriteEndAttribute() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteEndAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndDocument()
// docid: M:System.Xml.XmlTextWriter.WriteEndDocument
    /**
    Closes any open elements or attributes and puts the writer back in the Start state.

    */
    open override func WriteEndDocument() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteEndDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndElement()
// docid: M:System.Xml.XmlTextWriter.WriteEndElement
    /**
    Closes one element and pops the corresponding namespace scope.

    */
    open override func WriteEndElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteEndElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntityRef(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)
    /**
    Writes out an entity reference as .

    - Parameter name: Name of the entity reference.
    */
    open override func WriteEntityRef(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteEntityRef_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteFullEndElement()
// docid: M:System.Xml.XmlTextWriter.WriteFullEndElement
    /**
    Closes one element and pops the corresponding namespace scope.

    */
    open override func WriteFullEndElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteFullEndElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteName(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteName(System.String)
    /**
    Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation.

    - Parameter name: Name to write.
    */
    open override func WriteName(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNmToken(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteNmToken(System.String)
    /**
    Writes out the specified name, ensuring it is a valid  according to the W3C XML 1.0 recommendation.

    - Parameter name: Name to write.
    */
    open override func WriteNmToken(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteNmToken_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteProcessingInstruction(System.String, System.String)
// docid: M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)
    /**
    Writes out a processing instruction with a space between the name and text as follows: <?name text?>.

    - Parameter name: Name of the processing instruction.
    - Parameter text: Text to include in the processing instruction.
    */
    open override func WriteProcessingInstruction(name : dotnet.System.String, text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteProcessingInstruction_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteQualifiedName(System.String, System.String)
// docid: M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)
    /**
    Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.

    - Parameter localName: The local name to write.
    - Parameter ns: The namespace URI to associate with the name.
    */
    open override func WriteQualifiedName(localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteQualifiedName_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteRaw(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)
    /**
    Writes raw markup manually from a character buffer.

    - Parameter buffer: Character array containing the text to write.
    - Parameter index: The position within the buffer indicating the start of the text to write.
    - Parameter count: The number of characters to write.
    */
    open override func WriteRaw(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteRaw_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteRaw(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteRaw(System.String)
    /**
    Writes raw markup manually from a string.

    - Parameter data: String containing the text to write.
    */
    open override func WriteRaw(data : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteRaw_0__1__String(&__thrown, self.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartAttribute(System.String, System.String, System.String)
// docid: M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)
    /**
    Writes the start of an attribute.

    - Parameter prefix: 
         prefix of the attribute.
    - Parameter localName: 
         of the attribute.
    - Parameter ns: 
         of the attribute
    */
    open override func WriteStartAttribute(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteStartAttribute_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartDocument()
// docid: M:System.Xml.XmlTextWriter.WriteStartDocument
    /**
    Writes the XML declaration with the version "1.0".

    */
    open override func WriteStartDocument() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteStartDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartDocument(bool)
// docid: M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)
    /**
    Writes the XML declaration with the version "1.0" and the standalone attribute.

    - Parameter standalone: If , it writes "standalone=yes"; if , it writes "standalone=no".
    */
    open override func WriteStartDocument(standalone : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteStartDocument_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(standalone ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartElement(System.String, System.String, System.String)
// docid: M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)
    /**
    Writes the specified start tag and associates it with the given namespace and prefix.

    - Parameter prefix: The namespace prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.
    */
    open override func WriteStartElement(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteStartElement_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteString(System.String)
    /**
    Writes the given text content.

    - Parameter text: Text to write.
    */
    open override func WriteString(text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteString_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteSurrogateCharEntity(System.Char, System.Char)
// docid: M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)
    /**
    Generates and writes the surrogate character entity for the surrogate character pair.

    - Parameter lowChar: The low surrogate. This must be a value between  and .
    - Parameter highChar: The high surrogate. This must be a value between  and .
    */
    open override func WriteSurrogateCharEntity(lowChar : dotnet.System.Char, highChar : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteSurrogateCharEntity_0__2__Char_Char(&__thrown, self.get_handle(), lowChar.get_value(), highChar.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteWhitespace(System.String)
// docid: M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)
    /**
    Writes out the given white space.

    - Parameter ws: The string of white space characters.
    */
    open override func WriteWhitespace(ws : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__WriteWhitespace_0__1__String(&__thrown, self.get_handle(), ws?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_BaseStream()
// docid: M:System.Xml.XmlTextWriter.get_BaseStream
    open func get_BaseStream() throws -> Optional<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_Stream__get_BaseStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.Stream(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Formatting get_Formatting()
// docid: M:System.Xml.XmlTextWriter.get_Formatting
    open func get_Formatting() throws -> dotnet.System.Xml.Formatting {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_Formatting__get_Formatting_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Formatting(val: __return);
        }
    }
    // [IsSpecialName] void set_Formatting(System.Xml.Formatting)
// docid: M:System.Xml.XmlTextWriter.set_Formatting(System.Xml.Formatting)
    open func set_Formatting(value : dotnet.System.Xml.Formatting) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__set_Formatting_0__1__Formatting(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Indentation()
// docid: M:System.Xml.XmlTextWriter.get_Indentation
    open func get_Indentation() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_i32__get_Indentation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Indentation(System.Int32)
// docid: M:System.Xml.XmlTextWriter.set_Indentation(System.Int32)
    open func set_Indentation(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__set_Indentation_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Char get_IndentChar()
// docid: M:System.Xml.XmlTextWriter.get_IndentChar
    open func get_IndentChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_Char__get_IndentChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] void set_IndentChar(System.Char)
// docid: M:System.Xml.XmlTextWriter.set_IndentChar(System.Char)
    open func set_IndentChar(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__set_IndentChar_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Namespaces()
// docid: M:System.Xml.XmlTextWriter.get_Namespaces
    open func get_Namespaces() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_bool__get_Namespaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Namespaces(bool)
// docid: M:System.Xml.XmlTextWriter.set_Namespaces(System.Boolean)
    open func set_Namespaces(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__set_Namespaces_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Char get_QuoteChar()
// docid: M:System.Xml.XmlTextWriter.get_QuoteChar
    open func get_QuoteChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_Char__get_QuoteChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] void set_QuoteChar(System.Char)
// docid: M:System.Xml.XmlTextWriter.set_QuoteChar(System.Char)
    open func set_QuoteChar(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlTextWriter_void__set_QuoteChar_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.WriteState get_WriteState()
// docid: M:System.Xml.XmlTextWriter.get_WriteState
    open override func get_WriteState() throws -> dotnet.System.Xml.WriteState {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_WriteState__get_WriteState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.WriteState(val: __return);
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlTextWriter.get_XmlLang
    open override func get_XmlLang() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlTextWriter.get_XmlSpace
    open override func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlTextWriter_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    /**
    Gets the underlying stream object.

    */
    open var BaseStream : Optional<dotnet.System.IO.Stream> {
        get {
            return try! get_BaseStream();
        }
    }
    /**
    Indicates how the output is formatted.

    */
    open var Formatting : dotnet.System.Xml.Formatting {
        get {
            return try! get_Formatting();
        }
        set(v) {
            return try! set_Formatting(value: v);
        }
    }
    /**
    Gets or sets which character to use for indenting when  is set to .

    */
    open var IndentChar : dotnet.System.Char {
        get {
            return try! get_IndentChar();
        }
        set(v) {
            return try! set_IndentChar(value: v);
        }
    }
    /**
    Gets or sets how many IndentChars to write for each level in the hierarchy when  is set to .

    */
    open var Indentation : Swift.Int32 {
        get {
            return try! get_Indentation();
        }
        set(v) {
            return try! set_Indentation(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to do namespace support.

    */
    open var Namespaces : Bool {
        get {
            return try! get_Namespaces();
        }
        set(v) {
            return try! set_Namespaces(value: v);
        }
    }
    /**
    Gets or sets which character to use to quote attribute values.

    */
    open var QuoteChar : dotnet.System.Char {
        get {
            return try! get_QuoteChar();
        }
        set(v) {
            return try! set_QuoteChar(value: v);
        }
    }
    /**
    Gets the state of the writer.

    */
    open override var WriteState : dotnet.System.Xml.WriteState {
        get {
            return try! get_WriteState();
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlLang : Optional<dotnet.System.String> {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    Gets an  representing the current  scope.

    */
    open override var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
    }
} // XmlTextWriter


// type: System.Xml.XmlTokenizedType
    /**
    Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.

    */
public struct XmlTokenizedType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlTokenizedType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlTokenizedType CDATA
    /**
    CDATA type.

    */
    public static var CDATA : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_CDATA());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType ID
    /**
    ID type.

    */
    public static var ID : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_ID());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType IDREF
    /**
    IDREF type.

    */
    public static var IDREF : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_IDREF());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType IDREFS
    /**
    IDREFS type.

    */
    public static var IDREFS : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_IDREFS());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType ENTITY
    /**
    ENTITY type.

    */
    public static var ENTITY : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_ENTITY());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType ENTITIES
    /**
    ENTITIES type.

    */
    public static var ENTITIES : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_ENTITIES());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType NMTOKEN
    /**
    NMTOKEN type.

    */
    public static var NMTOKEN : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_NMTOKEN());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType NMTOKENS
    /**
    NMTOKENS type.

    */
    public static var NMTOKENS : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_NMTOKENS());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType NOTATION
    /**
    NOTATION type.

    */
    public static var NOTATION : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_NOTATION());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType ENUMERATION
    /**
    ENUMERATION type.

    */
    public static var ENUMERATION : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_ENUMERATION());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType QName
    /**
    QName type.

    */
    public static var QName : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_QName());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType NCName
    /**
    NCName type.

    */
    public static var NCName : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_NCName());
            return __return;
        }
    }
    // static field: System.Xml.XmlTokenizedType None
    /**
    No type.

    */
    public static var None : dotnet.System.Xml.XmlTokenizedType {
        get {
        let __return = dotnet.System.Xml.XmlTokenizedType(val: System_Xml_XmlTokenizedType_get_None());
            return __return;
        }
    }
} // XmlTokenizedType


// type: System.Xml.XmlUrlResolver
    /**
    Resolves external XML resources named by a Uniform Resource Identifier (URI).

    */
open class XmlUrlResolver
    :
    dotnet.System.Xml.XmlResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlUrlResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlUrlResolver.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlUrlResolver_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetEntity(System.Uri, System.String, System.Type)
// docid: M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
    /**
    Maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: Currently not used.
    - Parameter ofObjectToReturn: The type of object to return. The current implementation only returns  objects.
    - Returns: A stream object or  if a type other than stream is specified.

    */
    open override func GetEntity(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlUrlResolver_Object__GetEntity_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetEntityAsync(System.Uri, System.String, System.Type)
// docid: M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
    /**
    Asynchronously maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: Currently not used.
    - Parameter ofObjectToReturn: The type of object to return. The current implementation only returns  objects.
    - Returns: A stream object or  if a type other than stream is specified.

    */
    open override func GetEntityAsync(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlUrlResolver_System_Threading_Tasks_Task_object___GetEntityAsync_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Uri ResolveUri(System.Uri, System.String)
// docid: M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
    /**
    Resolves the absolute URI from the base and relative URIs.

    - Parameter baseUri: The base URI used to resolve the relative URI.
    - Parameter relativeUri: The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the  value. If relative, it combines with the  to make an absolute URI.
    - Returns: The absolute URI, or  if the relative URI cannot be resolved.

    */
    open override func ResolveUri(baseUri : Optional<dotnet.System.Uri>, relativeUri : Optional<dotnet.System.String>) throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlUrlResolver_Uri__ResolveUri_0__2__Uri_String(&__thrown, self.get_handle(), baseUri?.get_handle() ?? nil, relativeUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CachePolicy(System.Net.Cache.RequestCachePolicy)
// docid: M:System.Xml.XmlUrlResolver.set_CachePolicy(System.Net.Cache.RequestCachePolicy)
    open func set_CachePolicy(value : dotnet.System.Net.Cache.RequestCachePolicy) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlUrlResolver_void__set_CachePolicy_0__1__RequestCachePolicy(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Xml.XmlUrlResolver.set_Credentials(System.Net.ICredentials)
    open override func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlUrlResolver_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Xml.XmlUrlResolver.set_Proxy(System.Net.IWebProxy)
    open func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlUrlResolver_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlUrlResolver


// type: System.Xml.XmlValidatingReader
    /**
    Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  
  
 This class is obsolete. Starting with the .NET Framework 2.0, we recommend that you use the  class and the  method to create a validating XML reader.

    */
open class XmlValidatingReader
    :
    dotnet.System.Xml.XmlReader,
    System_Xml_IXmlLineInfo,
    System_Xml_IXmlNamespaceResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlValidatingReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Xml.XmlNodeType, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter xmlFragment: The stream containing the XML fragment to parse.
    - Parameter fragType: The  of the XML fragment. This determines what the fragment can contain (see table below).
    - Parameter context: The  in which the XML fragment is to be parsed. This includes the  to use, encoding, namespace scope, current , and  scope.
    */
    public init(xmlFragment : dotnet.System.IO.Stream, fragType : dotnet.System.Xml.XmlNodeType, context : dotnet.System.Xml.XmlParserContext) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlValidatingReader_ctor_0__3__Stream_XmlNodeType_XmlParserContext(&__thrown, xmlFragment.get_handle(), fragType.get_value(), context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Xml.XmlNodeType, System.Xml.XmlParserContext)
// docid: M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter xmlFragment: The string containing the XML fragment to parse.
    - Parameter fragType: The  of the XML fragment. This also determines what the fragment string can contain (see table below).
    - Parameter context: The  in which the XML fragment is to be parsed. This includes the  to use, encoding, namespace scope, current xml:lang, and xml:space scope.
    */
    public init(xmlFragment : dotnet.System.String, fragType : dotnet.System.Xml.XmlNodeType, context : dotnet.System.Xml.XmlParserContext) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlValidatingReader_ctor_0__3__String_XmlNodeType_XmlParserContext(&__thrown, xmlFragment.get_handle(), fragType.get_value(), context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlReader)
// docid: M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)
    /**
    Initializes a new instance of the  class that validates the content returned from the given .

    - Parameter reader: The  to read from while validating. The current implementation supports only .
    */
    public init(reader : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlValidatingReader_ctor_0__1__XmlReader(&__thrown, reader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Xml.XmlValidatingReader.Close
    /**
    Changes the  to Closed.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetAttribute(System.Int32)
// docid: M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)
    /**
    Gets the value of the attribute with the specified index.

    - Parameter i: The index of the attribute. The index is zero-based. (The first attribute has index 0.)
    - Returns: The value of the specified attribute.

    */
    open override func GetAttribute(i : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__GetAttribute_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String)
// docid: M:System.Xml.XmlValidatingReader.GetAttribute(System.String)
    /**
    Gets the value of the attribute with the specified name.

    - Parameter name: The qualified name of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found,  is returned.

    */
    open override func GetAttribute(name : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__GetAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetAttribute(System.String, System.String)
// docid: M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)
    /**
    Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: The value of the specified attribute. If the attribute is not found,  is returned. This method does not move the reader.

    */
    open func GetAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__GetAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool HasLineInfo()
// docid: M:System.Xml.XmlValidatingReader.HasLineInfo
    /**
    Gets a value indicating whether the class can return line information.

    - Returns: 
         if the class can return line information; otherwise, .

    */
    open /* method final */ func HasLineInfo() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__HasLineInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)
    /**
    Resolves a namespace prefix in the current element's scope.

    - Parameter prefix: The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string.
    - Returns: The namespace URI to which the prefix maps or  if no matching prefix is found.

    */
    open override func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void MoveToAttribute(System.Int32)
// docid: M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)
    /**
    Moves to the attribute with the specified index.

    - Parameter i: The index of the attribute.
    */
    open override func MoveToAttribute(i : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__MoveToAttribute_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveToAttribute(System.String)
// docid: M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)
    /**
    Moves to the attribute with the specified name.

    - Parameter name: The qualified name of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the position of the reader does not change.

    */
    open override func MoveToAttribute(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__MoveToAttribute_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToAttribute(System.String, System.String)
// docid: M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)
    /**
    Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: 
         if the attribute is found; otherwise, . If , the position of the reader does not change.

    */
    open func MoveToAttribute(localName : dotnet.System.String, namespaceURI : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__MoveToAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToElement()
// docid: M:System.Xml.XmlValidatingReader.MoveToElement
    /**
    Moves to the element that contains the current attribute node.

    - Returns: 
         if the reader is positioned on an attribute (the reader moves to the element that owns the attribute);  if the reader is not positioned on an attribute (the position of the reader does not change).

    */
    open override func MoveToElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__MoveToElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstAttribute()
// docid: M:System.Xml.XmlValidatingReader.MoveToFirstAttribute
    /**
    Moves to the first attribute.

    - Returns: 
         if an attribute exists (the reader moves to the first attribute); otherwise,  (the position of the reader does not change).

    */
    open override func MoveToFirstAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__MoveToFirstAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextAttribute()
// docid: M:System.Xml.XmlValidatingReader.MoveToNextAttribute
    /**
    Moves to the next attribute.

    - Returns: 
         if there is a next attribute;  if there are no more attributes.

    */
    open override func MoveToNextAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__MoveToNextAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Read()
// docid: M:System.Xml.XmlValidatingReader.Read
    /**
    Reads the next node from the stream.

    - Returns: 
         if the next node was read successfully;  if there are no more nodes to read.

    */
    open override func Read() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ReadAttributeValue()
// docid: M:System.Xml.XmlValidatingReader.ReadAttributeValue
    /**
    Parses the attribute value into one or more , , or  nodes.

    - Returns: 
         if there are nodes to return.  
  
  if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  
  
 An empty attribute, such as, misc="", returns  with a single node with a value of String.Empty.

    */
    open override func ReadAttributeValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__ReadAttributeValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 ReadContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the Base64 decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__ReadContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the content and returns the BinHex decoded binary bytes.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__ReadContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the Base64 content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadElementContentAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__ReadElementContentAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    Reads the element and decodes the BinHex content.

    - Parameter buffer: The buffer into which to copy the resulting text. This value cannot be .
    - Parameter index: The offset into the buffer where to start copying the result.
    - Parameter count: The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
    - Returns: The number of bytes written to the buffer.

    */
    open override func ReadElementContentAsBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__ReadElementContentAsBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ReadString()
// docid: M:System.Xml.XmlValidatingReader.ReadString
    /**
    Reads the contents of an element or text node as a string.

    - Returns: The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  
  
   
 The text node can be either an element or an attribute text node.

    */
    open override func ReadString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__ReadString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object ReadTypedValue()
// docid: M:System.Xml.XmlValidatingReader.ReadTypedValue
    /**
    Gets the common language runtime type for the specified XML Schema definition language (XSD) type.

    - Returns: The common language runtime type for the specified XML Schema type.

    */
    open func ReadTypedValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_Object__ReadTypedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ResolveEntity()
// docid: M:System.Xml.XmlValidatingReader.ResolveEntity
    /**
    Resolves the entity reference for  nodes.

    */
    open override func ResolveEntity() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__ResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_AttributeCount()
// docid: M:System.Xml.XmlValidatingReader.get_AttributeCount
    open override func get_AttributeCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__get_AttributeCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XmlValidatingReader.get_BaseURI
    open override func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReadBinaryContent()
// docid: M:System.Xml.XmlValidatingReader.get_CanReadBinaryContent
    open override func get_CanReadBinaryContent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_CanReadBinaryContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanResolveEntity()
// docid: M:System.Xml.XmlValidatingReader.get_CanResolveEntity
    open override func get_CanResolveEntity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_CanResolveEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:System.Xml.XmlValidatingReader.get_Depth
    open override func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:System.Xml.XmlValidatingReader.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.EntityHandling get_EntityHandling()
// docid: M:System.Xml.XmlValidatingReader.get_EntityHandling
    open func get_EntityHandling() throws -> dotnet.System.Xml.EntityHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_EntityHandling__get_EntityHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.EntityHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_EntityHandling(System.Xml.EntityHandling)
// docid: M:System.Xml.XmlValidatingReader.set_EntityHandling(System.Xml.EntityHandling)
    open func set_EntityHandling(value : dotnet.System.Xml.EntityHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__set_EntityHandling_0__1__EntityHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EOF()
// docid: M:System.Xml.XmlValidatingReader.get_EOF
    open override func get_EOF() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_EOF_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:System.Xml.XmlValidatingReader.get_HasValue
    open override func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Xml.XmlValidatingReader.get_IsDefault
    open override func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmptyElement()
// docid: M:System.Xml.XmlValidatingReader.get_IsEmptyElement
    open override func get_IsEmptyElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_IsEmptyElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.XmlValidatingReader.get_LineNumber
    open /* method final */ func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.XmlValidatingReader.get_LinePosition
    open /* method final */ func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlValidatingReader.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlValidatingReader.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Namespaces()
// docid: M:System.Xml.XmlValidatingReader.get_Namespaces
    open func get_Namespaces() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_bool__get_Namespaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Namespaces(bool)
// docid: M:System.Xml.XmlValidatingReader.set_Namespaces(System.Boolean)
    open func set_Namespaces(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__set_Namespaces_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XmlValidatingReader.get_NamespaceURI
    open override func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XmlValidatingReader.get_NameTable
    open override func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlValidatingReader.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XmlValidatingReader.get_Prefix
    open override func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Char get_QuoteChar()
// docid: M:System.Xml.XmlValidatingReader.get_QuoteChar
    open override func get_QuoteChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_Char__get_QuoteChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlReader get_Reader()
// docid: M:System.Xml.XmlValidatingReader.get_Reader
    open func get_Reader() throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_XmlReader__get_Reader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.ReadState get_ReadState()
// docid: M:System.Xml.XmlValidatingReader.get_ReadState
    open override func get_ReadState() throws -> dotnet.System.Xml.ReadState {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_ReadState__get_ReadState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ReadState(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaCollection get_Schemas()
// docid: M:System.Xml.XmlValidatingReader.get_Schemas
    open func get_Schemas() throws -> dotnet.System.Xml.Schema.XmlSchemaCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_XmlSchemaCollection__get_Schemas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_SchemaType()
// docid: M:System.Xml.XmlValidatingReader.get_SchemaType
    open func get_SchemaType() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_Object__get_SchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.ValidationType get_ValidationType()
// docid: M:System.Xml.XmlValidatingReader.get_ValidationType
    open func get_ValidationType() throws -> dotnet.System.Xml.ValidationType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_ValidationType__get_ValidationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ValidationType(val: __return);
        }
    }
    // [IsSpecialName] void set_ValidationType(System.Xml.ValidationType)
// docid: M:System.Xml.XmlValidatingReader.set_ValidationType(System.Xml.ValidationType)
    open func set_ValidationType(value : dotnet.System.Xml.ValidationType) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__set_ValidationType_0__1__ValidationType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlValidatingReader.get_Value
    open override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlValidatingReader.get_XmlLang
    open override func get_XmlLang() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.XmlValidatingReader.set_XmlResolver(System.Xml.XmlResolver)
    open func set_XmlResolver(value : dotnet.System.Xml.XmlResolver) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlValidatingReader.get_XmlSpace
    open override func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlValidatingReader_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    // [IsSpecialName] void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.XmlValidatingReader.add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    open func add_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__add_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try add_ValidationEventHandler(value: del_value);
    }
    // [IsSpecialName] void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.XmlValidatingReader.remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    open func remove_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlValidatingReader_void__remove_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try remove_ValidationEventHandler(value: del_value);
    }
    /**
    Gets the number of attributes on the current node.

    */
    open override var AttributeCount : Swift.Int32 {
        get {
            return try! get_AttributeCount();
        }
    }
    /**
    Gets the base URI of the current node.

    */
    open override var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets a value indicating whether the  implements the binary content read methods.

    */
    open override var CanReadBinaryContent : Bool {
        get {
            return try! get_CanReadBinaryContent();
        }
    }
    /**
    Gets a value indicating whether this reader can parse and resolve entities.

    */
    open override var CanResolveEntity : Bool {
        get {
            return try! get_CanResolveEntity();
        }
    }
    /**
    Gets the depth of the current node in the XML document.

    */
    open override var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    Gets a value indicating whether the reader is positioned at the end of the stream.

    */
    open override var EOF : Bool {
        get {
            return try! get_EOF();
        }
    }
    /**
    Gets the encoding attribute for the document.

    */
    open var Encoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_Encoding();
        }
    }
    /**
    Gets or sets a value that specifies how the reader handles entities.

    */
    open var EntityHandling : dotnet.System.Xml.EntityHandling {
        get {
            return try! get_EntityHandling();
        }
        set(v) {
            return try! set_EntityHandling(value: v);
        }
    }
    /**
    Gets a value indicating whether the current node can have a  other than String.Empty.

    */
    open override var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.

    */
    open override var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
    }
    /**
    Gets a value indicating whether the current node is an empty element (for example, <MyElement/>).

    */
    open override var IsEmptyElement : Bool {
        get {
            return try! get_IsEmptyElement();
        }
    }
    /**
    Gets the current line number.

    */
    public var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the current line position.

    */
    public var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the local name of the current node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the current node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the  associated with this implementation.

    */
    open override var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
    /**
    Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.

    */
    open override var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets or sets a value indicating whether to do namespace support.

    */
    open var Namespaces : Bool {
        get {
            return try! get_Namespaces();
        }
        set(v) {
            return try! set_Namespaces(value: v);
        }
    }
    /**
    Gets the type of the current node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the namespace prefix associated with the current node.

    */
    open override var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
    }
    /**
    Gets the quotation mark character used to enclose the value of an attribute node.

    */
    open override var QuoteChar : dotnet.System.Char {
        get {
            return try! get_QuoteChar();
        }
    }
    /**
    Gets the state of the reader.

    */
    open override var ReadState : dotnet.System.Xml.ReadState {
        get {
            return try! get_ReadState();
        }
    }
    /**
    Gets the  used to construct this .

    */
    open var Reader : dotnet.System.Xml.XmlReader {
        get {
            return try! get_Reader();
        }
    }
    /**
    Gets a schema type object.

    */
    open var SchemaType : Optional<dotnet.System.Object> {
        get {
            return try! get_SchemaType();
        }
    }
    /**
    Gets a  to use for validation.

    */
    open var Schemas : dotnet.System.Xml.Schema.XmlSchemaCollection {
        get {
            return try! get_Schemas();
        }
    }
    /**
    Gets or sets a value indicating the type of validation to perform.

    */
    open var ValidationType : dotnet.System.Xml.ValidationType {
        get {
            return try! get_ValidationType();
        }
        set(v) {
            return try! set_ValidationType(value: v);
        }
    }
    /**
    Gets the text value of the current node.

    */
    open override var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlLang : dotnet.System.String {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    Gets the current  scope.

    */
    open override var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
    }
} // XmlValidatingReader


// type: System.Xml.XmlWhitespace
    /**
    Represents white space in element content.

    */
open class XmlWhitespace
    :
    dotnet.System.Xml.XmlCharacterData
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlWhitespace_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlNode CloneNode(bool)
// docid: M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)
    /**
    Creates a duplicate of this node.

    - Parameter deep: 
         to recursively clone the subtree under the specified node;  to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting.
    - Returns: The cloned node.

    */
    open override func CloneNode(deep : Bool) throws -> dotnet.System.Xml.XmlNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_XmlNode__CloneNode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(deep ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNode(hndl : __return);
        }
    }
    // void WriteContentTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)
    /**
    Saves all the children of the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteContentTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWhitespace_void__WriteContentTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)
    /**
    Saves the node to the specified .

    - Parameter w: The  to which you want to save.
    */
    open override func WriteTo(w : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWhitespace_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), w.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XmlWhitespace.get_LocalName
    open override func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XmlWhitespace.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.XmlWhitespace.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_ParentNode()
// docid: M:System.Xml.XmlWhitespace.get_ParentNode
    open override func get_ParentNode() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_XmlNode__get_ParentNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNode get_PreviousText()
// docid: M:System.Xml.XmlWhitespace.get_PreviousText
    open override func get_PreviousText() throws -> Optional<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_XmlNode__get_PreviousText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlWhitespace.get_Value
    open override func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWhitespace_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.XmlWhitespace.set_Value(System.String)
    open override func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWhitespace_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the local name of the node.

    */
    open override var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the qualified name of the node.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the parent of the current node.

    */
    open override var ParentNode : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_ParentNode();
        }
    }
    /**
    Gets the text node that immediately precedes this node.

    */
    open override var PreviousText : Optional<dotnet.System.Xml.XmlNode> {
        get {
            return try! get_PreviousText();
        }
    }
    /**
    Gets or sets the value of the node.

    */
    open override var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlWhitespace


// type: System.Xml.XmlWriter
    /**
    Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.

    */
open class XmlWriter
    :
    dotnet.System.Object,
    System_IAsyncDisposable,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Xml.XmlWriter.Close
    /**
    When overridden in a derived class, closes this stream and the underlying stream.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlWriter Create(System.IO.Stream)
// docid: M:System.Xml.XmlWriter.Create(System.IO.Stream)
    /**
    Creates a new  instance using the specified stream.

    - Parameter output: The stream to which you want to write. The  writes XML 1.0 text syntax and appends it to the specified stream.
    - Returns: An  object.

    */
    open class func Create(output : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__1__Stream(&__thrown, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.IO.Stream, System.Xml.XmlWriterSettings)
// docid: M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)
    /**
    Creates a new  instance using the stream and  object.

    - Parameter output: The stream to which you want to write. The  writes XML 1.0 text syntax and appends it to the specified stream.
    - Parameter settings: The  object used to configure the new  instance. If this is , a  with default settings is used.  
  
 If the  is being used with the  method, you should use the  property to obtain an  object with the correct settings. This ensures that the created  object has the correct output settings.
    - Returns: An  object.

    */
    open class func Create(output : dotnet.System.IO.Stream, settings : Optional<dotnet.System.Xml.XmlWriterSettings>) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__2__Stream_XmlWriterSettings(&__thrown, output.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.IO.TextWriter)
// docid: M:System.Xml.XmlWriter.Create(System.IO.TextWriter)
    /**
    Creates a new  instance using the specified .

    - Parameter output: The  to which you want to write. The  writes XML 1.0 text syntax and appends it to the specified .
    - Returns: An  object.

    */
    open class func Create(output : dotnet.System.IO.TextWriter) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__1__TextWriter(&__thrown, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.IO.TextWriter, System.Xml.XmlWriterSettings)
// docid: M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)
    /**
    Creates a new  instance using the  and  objects.

    - Parameter output: The  to which you want to write. The  writes XML 1.0 text syntax and appends it to the specified .
    - Parameter settings: The  object used to configure the new  instance. If this is , a  with default settings is used.  
  
 If the  is being used with the  method, you should use the  property to obtain an  object with the correct settings. This ensures that the created  object has the correct output settings.
    - Returns: An  object.

    */
    open class func Create(output : dotnet.System.IO.TextWriter, settings : Optional<dotnet.System.Xml.XmlWriterSettings>) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__2__TextWriter_XmlWriterSettings(&__thrown, output.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.String)
// docid: M:System.Xml.XmlWriter.Create(System.String)
    /**
    Creates a new  instance using the specified filename.

    - Parameter outputFileName: The file to which you want to write. The  creates a file at the specified path and writes to it in XML 1.0 text syntax. The  must be a file system path.
    - Returns: An  object.

    */
    open class func Create(outputFileName : dotnet.System.String) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__1__String(&__thrown, outputFileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.String, System.Xml.XmlWriterSettings)
// docid: M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)
    /**
    Creates a new  instance using the filename and  object.

    - Parameter outputFileName: The file to which you want to write. The  creates a file at the specified path and writes to it in XML 1.0 text syntax. The  must be a file system path.
    - Parameter settings: The  object used to configure the new  instance. If this is , a  with default settings is used.  
  
 If the  is being used with the  method, you should use the  property to obtain an  object with the correct settings. This ensures that the created  object has the correct output settings.
    - Returns: An  object.

    */
    open class func Create(outputFileName : dotnet.System.String, settings : Optional<dotnet.System.Xml.XmlWriterSettings>) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__2__String_XmlWriterSettings(&__thrown, outputFileName.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.Text.StringBuilder)
// docid: M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)
    /**
    Creates a new  instance using the specified .

    - Parameter output: The  to which to write to. Content written by the  is appended to the .
    - Returns: An  object.

    */
    open class func Create(output : dotnet.System.Text.StringBuilder) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__1__StringBuilder(&__thrown, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.Text.StringBuilder, System.Xml.XmlWriterSettings)
// docid: M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
    /**
    Creates a new  instance using the  and  objects.

    - Parameter output: The  to which to write to. Content written by the  is appended to the .
    - Parameter settings: The  object used to configure the new  instance. If this is , a  with default settings is used.  
  
 If the  is being used with the  method, you should use the  property to obtain an  object with the correct settings. This ensures that the created  object has the correct output settings.
    - Returns: An  object.

    */
    open class func Create(output : dotnet.System.Text.StringBuilder, settings : Optional<dotnet.System.Xml.XmlWriterSettings>) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__2__StringBuilder_XmlWriterSettings(&__thrown, output.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)
    /**
    Creates a new  instance using the specified  object.

    - Parameter output: The  object that you want to use as the underlying writer.
    - Returns: An  object that is wrapped around the specified  object.

    */
    open class func Create(output : dotnet.System.Xml.XmlWriter) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__1__XmlWriter(&__thrown, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter Create(System.Xml.XmlWriter, System.Xml.XmlWriterSettings)
// docid: M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)
    /**
    Creates a new  instance using the specified  and  objects.

    - Parameter output: The  object that you want to use as the underlying writer.
    - Parameter settings: The  object used to configure the new  instance. If this is , a  with default settings is used.  
  
 If the  is being used with the  method, you should use the  property to obtain an  object with the correct settings. This ensures that the created  object has the correct output settings.
    - Returns: An  object that is wrapped around the specified  object.

    */
    open class func Create(output : dotnet.System.Xml.XmlWriter, settings : Optional<dotnet.System.Xml.XmlWriterSettings>) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriter__Create_0__2__XmlWriter_XmlWriterSettings(&__thrown, output.get_handle(), settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Xml.XmlWriter.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.Xml.XmlWriter.Flush
    /**
    When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.

    */
    open func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task FlushAsync()
// docid: M:System.Xml.XmlWriter.FlushAsync
    /**
    Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.

    - Returns: The task that represents the asynchronous  operation.

    */
    open func FlushAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__FlushAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.String LookupPrefix(System.String)
// docid: M:System.Xml.XmlWriter.LookupPrefix(System.String)
    /**
    When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.

    - Parameter ns: The namespace URI whose prefix you want to find.
    - Returns: The matching prefix or  if no matching namespace URI is found in the current scope.

    */
    open func LookupPrefix(ns : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_String__LookupPrefix_0__1__String(&__thrown, self.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteAttributes(System.Xml.XmlReader, bool)
// docid: M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)
    /**
    When overridden in a derived class, writes out all the attributes found at the current position in the .

    - Parameter reader: The  from which to copy the attributes.
    - Parameter defattr: 
         to copy the default attributes from the ; otherwise, .
    */
    open func WriteAttributes(reader : dotnet.System.Xml.XmlReader, defattr : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteAttributes_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteAttributesAsync(System.Xml.XmlReader, bool)
// docid: M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)
    /**
    Asynchronously writes out all the attributes found at the current position in the .

    - Parameter reader: The  from which to copy the attributes.
    - Parameter defattr: 
         to copy the default attributes from the ; otherwise, .
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteAttributesAsync(reader : dotnet.System.Xml.XmlReader, defattr : Bool) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteAttributesAsync_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteAttributeString(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)
    /**
    When overridden in a derived class, writes out the attribute with the specified local name and value.

    - Parameter localName: The local name of the attribute.
    - Parameter value: The value of the attribute.
    */
    open func WriteAttributeString(localName : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteAttributeString_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteAttributeString(System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)
    /**
    When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.

    - Parameter localName: The local name of the attribute.
    - Parameter ns: The namespace URI to associate with the attribute.
    - Parameter value: The value of the attribute.
    */
    open func WriteAttributeString(localName : dotnet.System.String, ns : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteAttributeString_0__3__String_String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteAttributeString(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)
    /**
    When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.

    - Parameter prefix: The namespace prefix of the attribute.
    - Parameter localName: The local name of the attribute.
    - Parameter ns: The namespace URI of the attribute.
    - Parameter value: The value of the attribute.
    */
    open func WriteAttributeString(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteAttributeString_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteAttributeStringAsync(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)
    /**
    Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.

    - Parameter prefix: The namespace prefix of the attribute.
    - Parameter localName: The local name of the attribute.
    - Parameter ns: The namespace URI of the attribute.
    - Parameter value: The value of the attribute.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteAttributeStringAsync(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteAttributeStringAsync_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position in the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    */
    open func WriteBase64(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteBase64Async(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position in the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteBase64Async(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteBase64Async_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteBinHex(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, encodes the specified binary bytes as  and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position in the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    */
    open func WriteBinHex(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteBinHex_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteBinHexAsync(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously encodes the specified binary bytes as  and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position in the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteBinHexAsync(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteBinHexAsync_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteCData(System.String)
// docid: M:System.Xml.XmlWriter.WriteCData(System.String)
    /**
    When overridden in a derived class, writes out a <![CDATA[...]]> block containing the specified text.

    - Parameter text: The text to place inside the CDATA block.
    */
    open func WriteCData(text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteCData_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteCDataAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteCDataAsync(System.String)
    /**
    Asynchronously writes out a <![CDATA[...]]> block containing the specified text.

    - Parameter text: The text to place inside the CDATA block.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteCDataAsync(text : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteCDataAsync_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteCharEntity(System.Char)
// docid: M:System.Xml.XmlWriter.WriteCharEntity(System.Char)
    /**
    When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.

    - Parameter ch: The Unicode character for which to generate a character entity.
    */
    open func WriteCharEntity(ch : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteCharEntity_0__1__Char(&__thrown, self.get_handle(), ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteCharEntityAsync(System.Char)
// docid: M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)
    /**
    Asynchronously forces the generation of a character entity for the specified Unicode character value.

    - Parameter ch: The Unicode character for which to generate a character entity.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteCharEntityAsync(ch : dotnet.System.Char) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteCharEntityAsync_0__1__Char(&__thrown, self.get_handle(), ch.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteChars(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, writes text one buffer at a time.

    - Parameter buffer: Character array containing the text to write.
    - Parameter index: The position in the buffer indicating the start of the text to write.
    - Parameter count: The number of characters to write.
    */
    open func WriteChars(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteChars_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteCharsAsync(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)
    /**
    Asynchronously writes text one buffer at a time.

    - Parameter buffer: Character array containing the text to write.
    - Parameter index: The position in the buffer indicating the start of the text to write.
    - Parameter count: The number of characters to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteCharsAsync(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteCharsAsync_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteComment(System.String)
// docid: M:System.Xml.XmlWriter.WriteComment(System.String)
    /**
    When overridden in a derived class, writes out a comment <!--...--> containing the specified text.

    - Parameter text: Text to place inside the comment.
    */
    open func WriteComment(text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteComment_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteCommentAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteCommentAsync(System.String)
    /**
    Asynchronously writes out a comment <!--...--> containing the specified text.

    - Parameter text: Text to place inside the comment.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteCommentAsync(text : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteCommentAsync_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteDocType(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)
    /**
    When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.

    - Parameter name: The name of the DOCTYPE. This must be non-empty.
    - Parameter pubid: If non-null it also writes PUBLIC "pubid" "sysid" where  and  are replaced with the value of the given arguments.
    - Parameter sysid: If  is  and  is non-null it writes SYSTEM "sysid" where  is replaced with the value of this argument.
    - Parameter subset: If non-null it writes [subset] where subset is replaced with the value of this argument.
    */
    open func WriteDocType(name : dotnet.System.String, pubid : Optional<dotnet.System.String>, sysid : Optional<dotnet.System.String>, subset : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteDocType_0__4__String_String_String_String(&__thrown, self.get_handle(), name.get_handle(), pubid?.get_handle() ?? nil, sysid?.get_handle() ?? nil, subset?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteDocTypeAsync(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)
    /**
    Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.

    - Parameter name: The name of the DOCTYPE. This must be non-empty.
    - Parameter pubid: If non-null it also writes PUBLIC "pubid" "sysid" where  and  are replaced with the value of the given arguments.
    - Parameter sysid: If  is  and  is non-null it writes SYSTEM "sysid" where  is replaced with the value of this argument.
    - Parameter subset: If non-null it writes [subset] where subset is replaced with the value of this argument.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteDocTypeAsync(name : dotnet.System.String, pubid : Optional<dotnet.System.String>, sysid : Optional<dotnet.System.String>, subset : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteDocTypeAsync_0__4__String_String_String_String(&__thrown, self.get_handle(), name.get_handle(), pubid?.get_handle() ?? nil, sysid?.get_handle() ?? nil, subset?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteElementString(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)
    /**
    Writes an element with the specified local name and value.

    - Parameter localName: The local name of the element.
    - Parameter value: The value of the element.
    */
    open func WriteElementString(localName : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteElementString_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteElementString(System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)
    /**
    Writes an element with the specified local name, namespace URI, and value.

    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI to associate with the element.
    - Parameter value: The value of the element.
    */
    open func WriteElementString(localName : dotnet.System.String, ns : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteElementString_0__3__String_String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteElementString(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)
    /**
    Writes an element with the specified prefix, local name, namespace URI, and value.

    - Parameter prefix: The prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI of the element.
    - Parameter value: The value of the element.
    */
    open func WriteElementString(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteElementString_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteElementStringAsync(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)
    /**
    Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.

    - Parameter prefix: The prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI of the element.
    - Parameter value: The value of the element.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteElementStringAsync(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>, value : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteElementStringAsync_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteEndAttribute()
// docid: M:System.Xml.XmlWriter.WriteEndAttribute
    /**
    When overridden in a derived class, closes the previous  call.

    */
    open func WriteEndAttribute() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteEndAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndDocument()
// docid: M:System.Xml.XmlWriter.WriteEndDocument
    /**
    When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.

    */
    open func WriteEndDocument() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteEndDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteEndDocumentAsync()
// docid: M:System.Xml.XmlWriter.WriteEndDocumentAsync
    /**
    Asynchronously closes any open elements or attributes and puts the writer back in the Start state.

    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteEndDocumentAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteEndDocumentAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteEndElement()
// docid: M:System.Xml.XmlWriter.WriteEndElement
    /**
    When overridden in a derived class, closes one element and pops the corresponding namespace scope.

    */
    open func WriteEndElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteEndElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteEndElementAsync()
// docid: M:System.Xml.XmlWriter.WriteEndElementAsync
    /**
    Asynchronously closes one element and pops the corresponding namespace scope.

    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteEndElementAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteEndElementAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteEntityRef(System.String)
// docid: M:System.Xml.XmlWriter.WriteEntityRef(System.String)
    /**
    When overridden in a derived class, writes out an entity reference as .

    - Parameter name: The name of the entity reference.
    */
    open func WriteEntityRef(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteEntityRef_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteEntityRefAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)
    /**
    Asynchronously writes out an entity reference as .

    - Parameter name: The name of the entity reference.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteEntityRefAsync(name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteEntityRefAsync_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteFullEndElement()
// docid: M:System.Xml.XmlWriter.WriteFullEndElement
    /**
    When overridden in a derived class, closes one element and pops the corresponding namespace scope.

    */
    open func WriteFullEndElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteFullEndElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteFullEndElementAsync()
// docid: M:System.Xml.XmlWriter.WriteFullEndElementAsync
    /**
    Asynchronously closes one element and pops the corresponding namespace scope.

    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteFullEndElementAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteFullEndElementAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteName(System.String)
// docid: M:System.Xml.XmlWriter.WriteName(System.String)
    /**
    When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).

    - Parameter name: The name to write.
    */
    open func WriteName(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteNameAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteNameAsync(System.String)
    /**
    Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).

    - Parameter name: The name to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteNameAsync(name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteNameAsync_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteNmToken(System.String)
// docid: M:System.Xml.XmlWriter.WriteNmToken(System.String)
    /**
    When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).

    - Parameter name: The name to write.
    */
    open func WriteNmToken(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteNmToken_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteNmTokenAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)
    /**
    Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).

    - Parameter name: The name to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteNmTokenAsync(name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteNmTokenAsync_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteNode(System.Xml.XmlReader, bool)
// docid: M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)
    /**
    When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.

    - Parameter reader: The  to read from.
    - Parameter defattr: 
         to copy the default attributes from the ; otherwise, .
    */
    open func WriteNode(reader : dotnet.System.Xml.XmlReader, defattr : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteNode_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNode(System.Xml.XPath.XPathNavigator, bool)
// docid: M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)
    /**
    Copies everything from the  object to the writer. The position of the  remains unchanged.

    - Parameter navigator: The  to copy from.
    - Parameter defattr: 
         to copy the default attributes; otherwise, .
    */
    open func WriteNode(navigator : dotnet.System.Xml.XPath.XPathNavigator, defattr : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteNode_0__2__XPathNavigator_bool(&__thrown, self.get_handle(), navigator.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteNodeAsync(System.Xml.XmlReader, bool)
// docid: M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)
    /**
    Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.

    - Parameter reader: The  to read from.
    - Parameter defattr: 
         to copy the default attributes from the ; otherwise, .
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteNodeAsync(reader : dotnet.System.Xml.XmlReader, defattr : Bool) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteNodeAsync_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteNodeAsync(System.Xml.XPath.XPathNavigator, bool)
// docid: M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)
    /**
    Asynchronously copies everything from the  object to the writer. The position of the  remains unchanged.

    - Parameter navigator: The  to copy from.
    - Parameter defattr: 
         to copy the default attributes; otherwise, .
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteNodeAsync(navigator : dotnet.System.Xml.XPath.XPathNavigator, defattr : Bool) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteNodeAsync_0__2__XPathNavigator_bool(&__thrown, self.get_handle(), navigator.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteProcessingInstruction(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)
    /**
    When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: <?name text?>.

    - Parameter name: The name of the processing instruction.
    - Parameter text: The text to include in the processing instruction.
    */
    open func WriteProcessingInstruction(name : dotnet.System.String, text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteProcessingInstruction_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteProcessingInstructionAsync(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)
    /**
    Asynchronously writes out a processing instruction with a space between the name and text as follows: <?name text?>.

    - Parameter name: The name of the processing instruction.
    - Parameter text: The text to include in the processing instruction.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteProcessingInstructionAsync(name : dotnet.System.String, text : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteProcessingInstructionAsync_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteQualifiedName(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)
    /**
    When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.

    - Parameter localName: The local name to write.
    - Parameter ns: The namespace URI for the name.
    */
    open func WriteQualifiedName(localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteQualifiedName_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteQualifiedNameAsync(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)
    /**
    Asynchronously writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.

    - Parameter localName: The local name to write.
    - Parameter ns: The namespace URI for the name.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteQualifiedNameAsync(localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteQualifiedNameAsync_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteRaw(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)
    /**
    When overridden in a derived class, writes raw markup manually from a character buffer.

    - Parameter buffer: Character array containing the text to write.
    - Parameter index: The position within the buffer indicating the start of the text to write.
    - Parameter count: The number of characters to write.
    */
    open func WriteRaw(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteRaw_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteRaw(System.String)
// docid: M:System.Xml.XmlWriter.WriteRaw(System.String)
    /**
    When overridden in a derived class, writes raw markup manually from a string.

    - Parameter data: String containing the text to write.
    */
    open func WriteRaw(data : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteRaw_0__1__String(&__thrown, self.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteRawAsync(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)
    /**
    Asynchronously writes raw markup manually from a character buffer.

    - Parameter buffer: Character array containing the text to write.
    - Parameter index: The position within the buffer indicating the start of the text to write.
    - Parameter count: The number of characters to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteRawAsync(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteRawAsync_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteRawAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteRawAsync(System.String)
    /**
    Asynchronously writes raw markup manually from a string.

    - Parameter data: String containing the text to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteRawAsync(data : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteRawAsync_0__1__String(&__thrown, self.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteStartAttribute(System.String)
// docid: M:System.Xml.XmlWriter.WriteStartAttribute(System.String)
    /**
    Writes the start of an attribute with the specified local name.

    - Parameter localName: The local name of the attribute.
    */
    open func WriteStartAttribute(localName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartAttribute_0__1__String(&__thrown, self.get_handle(), localName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartAttribute(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)
    /**
    Writes the start of an attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter ns: The namespace URI of the attribute.
    */
    open func WriteStartAttribute(localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartAttribute(System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)
    /**
    When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.

    - Parameter prefix: The namespace prefix of the attribute.
    - Parameter localName: The local name of the attribute.
    - Parameter ns: The namespace URI for the attribute.
    */
    open func WriteStartAttribute(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartAttribute_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartDocument()
// docid: M:System.Xml.XmlWriter.WriteStartDocument
    /**
    When overridden in a derived class, writes the XML declaration with the version "1.0".

    */
    open func WriteStartDocument() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartDocument(bool)
// docid: M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)
    /**
    When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.

    - Parameter standalone: If , it writes "standalone=yes"; if , it writes "standalone=no".
    */
    open func WriteStartDocument(standalone : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartDocument_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(standalone ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteStartDocumentAsync()
// docid: M:System.Xml.XmlWriter.WriteStartDocumentAsync
    /**
    Asynchronously writes the XML declaration with the version "1.0".

    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteStartDocumentAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteStartDocumentAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteStartDocumentAsync(bool)
// docid: M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)
    /**
    Asynchronously writes the XML declaration with the version "1.0" and the standalone attribute.

    - Parameter standalone: If , it writes "standalone=yes"; if , it writes "standalone=no".
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteStartDocumentAsync(standalone : Bool) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteStartDocumentAsync_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(standalone ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteStartElement(System.String)
// docid: M:System.Xml.XmlWriter.WriteStartElement(System.String)
    /**
    When overridden in a derived class, writes out a start tag with the specified local name.

    - Parameter localName: The local name of the element.
    */
    open func WriteStartElement(localName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartElement_0__1__String(&__thrown, self.get_handle(), localName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartElement(System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)
    /**
    When overridden in a derived class, writes the specified start tag and associates it with the given namespace.

    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.
    */
    open func WriteStartElement(localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartElement_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartElement(System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)
    /**
    When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.

    - Parameter prefix: The namespace prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI to associate with the element.
    */
    open func WriteStartElement(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteStartElement_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteStartElementAsync(System.String, System.String, System.String)
// docid: M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)
    /**
    Asynchronously writes the specified start tag and associates it with the given namespace and prefix.

    - Parameter prefix: The namespace prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter ns: The namespace URI to associate with the element.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteStartElementAsync(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, ns : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteStartElementAsync_0__3__String_String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteString(System.String)
// docid: M:System.Xml.XmlWriter.WriteString(System.String)
    /**
    When overridden in a derived class, writes the given text content.

    - Parameter text: The text to write.
    */
    open func WriteString(text : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteString_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteStringAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteStringAsync(System.String)
    /**
    Asynchronously writes the given text content.

    - Parameter text: The text to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteStringAsync(text : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteStringAsync_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteSurrogateCharEntity(System.Char, System.Char)
// docid: M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)
    /**
    When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.

    - Parameter lowChar: The low surrogate. This must be a value between 0xDC00 and 0xDFFF.
    - Parameter highChar: The high surrogate. This must be a value between 0xD800 and 0xDBFF.
    */
    open func WriteSurrogateCharEntity(lowChar : dotnet.System.Char, highChar : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteSurrogateCharEntity_0__2__Char_Char(&__thrown, self.get_handle(), lowChar.get_value(), highChar.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(System.Char, System.Char)
// docid: M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)
    /**
    Asynchronously generates and writes the surrogate character entity for the surrogate character pair.

    - Parameter lowChar: The low surrogate. This must be a value between 0xDC00 and 0xDFFF.
    - Parameter highChar: The high surrogate. This must be a value between 0xD800 and 0xDBFF.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteSurrogateCharEntityAsync(lowChar : dotnet.System.Char, highChar : dotnet.System.Char) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteSurrogateCharEntityAsync_0__2__Char_Char(&__thrown, self.get_handle(), lowChar.get_value(), highChar.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteValue(bool)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Boolean)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.DateTime)
// docid: M:System.Xml.XmlWriter.WriteValue(System.DateTime)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.DateTimeOffset)
// docid: M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__DateTimeOffset(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Decimal)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Decimal)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__Decimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Double)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Double)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Int32)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Int32)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Int64)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Int64)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Object)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Object)
    /**
    Writes the object value.

    - Parameter value: The object value to write.  
  
 Note With the release of the .NET Framework 3.5, this method accepts  as a parameter.
    */
    open func WriteValue(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Single)
// docid: M:System.Xml.XmlWriter.WriteValue(System.Single)
    /**
    Writes a single-precision floating-point number.

    - Parameter value: The single-precision floating-point number to write.
    */
    open func WriteValue(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.String)
// docid: M:System.Xml.XmlWriter.WriteValue(System.String)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteWhitespace(System.String)
// docid: M:System.Xml.XmlWriter.WriteWhitespace(System.String)
    /**
    When overridden in a derived class, writes out the given white space.

    - Parameter ws: The string of white space characters.
    */
    open func WriteWhitespace(ws : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriter_void__WriteWhitespace_0__1__String(&__thrown, self.get_handle(), ws?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteWhitespaceAsync(System.String)
// docid: M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)
    /**
    Asynchronously writes out the given white space.

    - Parameter ws: The string of white space characters.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteWhitespaceAsync(ws : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_Task__WriteWhitespaceAsync_0__1__String(&__thrown, self.get_handle(), ws?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Xml.XmlWriter.DisposeAsync
    /**
    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.

    - Returns: A task that represents the asynchronous dispose operation.

    */
    open /* method final */ func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlWriterSettings get_Settings()
// docid: M:System.Xml.XmlWriter.get_Settings
    open func get_Settings() throws -> Optional<dotnet.System.Xml.XmlWriterSettings> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlWriterSettings__get_Settings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlWriterSettings(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.WriteState get_WriteState()
// docid: M:System.Xml.XmlWriter.get_WriteState
    open func get_WriteState() throws -> dotnet.System.Xml.WriteState {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_WriteState__get_WriteState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.WriteState(val: __return);
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XmlWriter.get_XmlLang
    open func get_XmlLang() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlSpace get_XmlSpace()
// docid: M:System.Xml.XmlWriter.get_XmlSpace
    open func get_XmlSpace() throws -> dotnet.System.Xml.XmlSpace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriter_XmlSpace__get_XmlSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlSpace(val: __return);
        }
    }
    /**
    Gets the  object used to create this  instance.

    */
    open var Settings : Optional<dotnet.System.Xml.XmlWriterSettings> {
        get {
            return try! get_Settings();
        }
    }
    /**
    When overridden in a derived class, gets the state of the writer.

    */
    open var WriteState : dotnet.System.Xml.WriteState {
        get {
            return try! get_WriteState();
        }
    }
    /**
    When overridden in a derived class, gets the current  scope.

    */
    open var XmlLang : Optional<dotnet.System.String> {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    When overridden in a derived class, gets an  representing the current  scope.

    */
    open var XmlSpace : dotnet.System.Xml.XmlSpace {
        get {
            return try! get_XmlSpace();
        }
    }
} // XmlWriter


// type: System.Xml.XmlWriterSettings
    /**
    Specifies a set of features to support on the  object created by the  method.

    */
public final class XmlWriterSettings
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlWriterSettings_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlWriterSettings.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlWriterSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlWriterSettings Clone()
// docid: M:System.Xml.XmlWriterSettings.Clone
    /**
    Creates a copy of the  instance.

    - Returns: The cloned  object.

    */
    public func Clone() throws -> dotnet.System.Xml.XmlWriterSettings {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_XmlWriterSettings__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriterSettings(hndl : __return);
        }
    }
    // void Reset()
// docid: M:System.Xml.XmlWriterSettings.Reset
    /**
    Resets the members of the settings class to their default values.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Async()
// docid: M:System.Xml.XmlWriterSettings.get_Async
    public func get_Async() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_Async_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Async(bool)
// docid: M:System.Xml.XmlWriterSettings.set_Async(System.Boolean)
    public func set_Async(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_Async_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CheckCharacters()
// docid: M:System.Xml.XmlWriterSettings.get_CheckCharacters
    public func get_CheckCharacters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_CheckCharacters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CheckCharacters(bool)
// docid: M:System.Xml.XmlWriterSettings.set_CheckCharacters(System.Boolean)
    public func set_CheckCharacters(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_CheckCharacters_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CloseOutput()
// docid: M:System.Xml.XmlWriterSettings.get_CloseOutput
    public func get_CloseOutput() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_CloseOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CloseOutput(bool)
// docid: M:System.Xml.XmlWriterSettings.set_CloseOutput(System.Boolean)
    public func set_CloseOutput(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_CloseOutput_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.ConformanceLevel get_ConformanceLevel()
// docid: M:System.Xml.XmlWriterSettings.get_ConformanceLevel
    public func get_ConformanceLevel() throws -> dotnet.System.Xml.ConformanceLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_ConformanceLevel__get_ConformanceLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.ConformanceLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_ConformanceLevel(System.Xml.ConformanceLevel)
// docid: M:System.Xml.XmlWriterSettings.set_ConformanceLevel(System.Xml.ConformanceLevel)
    public func set_ConformanceLevel(value : dotnet.System.Xml.ConformanceLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_ConformanceLevel_0__1__ConformanceLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_DoNotEscapeUriAttributes()
// docid: M:System.Xml.XmlWriterSettings.get_DoNotEscapeUriAttributes
    public func get_DoNotEscapeUriAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_DoNotEscapeUriAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_DoNotEscapeUriAttributes(bool)
// docid: M:System.Xml.XmlWriterSettings.set_DoNotEscapeUriAttributes(System.Boolean)
    public func set_DoNotEscapeUriAttributes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_DoNotEscapeUriAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:System.Xml.XmlWriterSettings.get_Encoding
    public func get_Encoding() throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Encoding(System.Text.Encoding)
// docid: M:System.Xml.XmlWriterSettings.set_Encoding(System.Text.Encoding)
    public func set_Encoding(value : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_Encoding_0__1__Encoding(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Indent()
// docid: M:System.Xml.XmlWriterSettings.get_Indent
    public func get_Indent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_Indent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Indent(bool)
// docid: M:System.Xml.XmlWriterSettings.set_Indent(System.Boolean)
    public func set_Indent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_Indent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_IndentChars()
// docid: M:System.Xml.XmlWriterSettings.get_IndentChars
    public func get_IndentChars() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_String__get_IndentChars_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IndentChars(System.String)
// docid: M:System.Xml.XmlWriterSettings.set_IndentChars(System.String)
    public func set_IndentChars(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_IndentChars_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.NamespaceHandling get_NamespaceHandling()
// docid: M:System.Xml.XmlWriterSettings.get_NamespaceHandling
    public func get_NamespaceHandling() throws -> dotnet.System.Xml.NamespaceHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_NamespaceHandling__get_NamespaceHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.NamespaceHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_NamespaceHandling(System.Xml.NamespaceHandling)
// docid: M:System.Xml.XmlWriterSettings.set_NamespaceHandling(System.Xml.NamespaceHandling)
    public func set_NamespaceHandling(value : dotnet.System.Xml.NamespaceHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_NamespaceHandling_0__1__NamespaceHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_NewLineChars()
// docid: M:System.Xml.XmlWriterSettings.get_NewLineChars
    public func get_NewLineChars() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_String__get_NewLineChars_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_NewLineChars(System.String)
// docid: M:System.Xml.XmlWriterSettings.set_NewLineChars(System.String)
    public func set_NewLineChars(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_NewLineChars_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.NewLineHandling get_NewLineHandling()
// docid: M:System.Xml.XmlWriterSettings.get_NewLineHandling
    public func get_NewLineHandling() throws -> dotnet.System.Xml.NewLineHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_NewLineHandling__get_NewLineHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.NewLineHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_NewLineHandling(System.Xml.NewLineHandling)
// docid: M:System.Xml.XmlWriterSettings.set_NewLineHandling(System.Xml.NewLineHandling)
    public func set_NewLineHandling(value : dotnet.System.Xml.NewLineHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_NewLineHandling_0__1__NewLineHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_NewLineOnAttributes()
// docid: M:System.Xml.XmlWriterSettings.get_NewLineOnAttributes
    public func get_NewLineOnAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_NewLineOnAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NewLineOnAttributes(bool)
// docid: M:System.Xml.XmlWriterSettings.set_NewLineOnAttributes(System.Boolean)
    public func set_NewLineOnAttributes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_NewLineOnAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_OmitXmlDeclaration()
// docid: M:System.Xml.XmlWriterSettings.get_OmitXmlDeclaration
    public func get_OmitXmlDeclaration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_OmitXmlDeclaration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_OmitXmlDeclaration(bool)
// docid: M:System.Xml.XmlWriterSettings.set_OmitXmlDeclaration(System.Boolean)
    public func set_OmitXmlDeclaration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_OmitXmlDeclaration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlOutputMethod get_OutputMethod()
// docid: M:System.Xml.XmlWriterSettings.get_OutputMethod
    public func get_OutputMethod() throws -> dotnet.System.Xml.XmlOutputMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_XmlOutputMethod__get_OutputMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlOutputMethod(val: __return);
        }
    }
    // [IsSpecialName] bool get_WriteEndDocumentOnClose()
// docid: M:System.Xml.XmlWriterSettings.get_WriteEndDocumentOnClose
    public func get_WriteEndDocumentOnClose() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlWriterSettings_bool__get_WriteEndDocumentOnClose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_WriteEndDocumentOnClose(bool)
// docid: M:System.Xml.XmlWriterSettings.set_WriteEndDocumentOnClose(System.Boolean)
    public func set_WriteEndDocumentOnClose(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlWriterSettings_void__set_WriteEndDocumentOnClose_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether asynchronous  methods can be used on a particular  instance.

    */
    public var Async : Bool {
        get {
            return try! get_Async();
        }
        set(v) {
            return try! set_Async(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the "2.2 Characters" section of the W3C XML 1.0 Recommendation.

    */
    public var CheckCharacters : Bool {
        get {
            return try! get_CheckCharacters();
        }
        set(v) {
            return try! set_CheckCharacters(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the  should also close the underlying stream or  when the  method is called.

    */
    public var CloseOutput : Bool {
        get {
            return try! get_CloseOutput();
        }
        set(v) {
            return try! set_CloseOutput(value: v);
        }
    }
    /**
    Gets or sets the level of conformance that the XML writer checks the XML output for.

    */
    public var ConformanceLevel : dotnet.System.Xml.ConformanceLevel {
        get {
            return try! get_ConformanceLevel();
        }
        set(v) {
            return try! set_ConformanceLevel(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  does not escape URI attributes.

    */
    public var DoNotEscapeUriAttributes : Bool {
        get {
            return try! get_DoNotEscapeUriAttributes();
        }
        set(v) {
            return try! set_DoNotEscapeUriAttributes(value: v);
        }
    }
    /**
    Gets or sets the type of text encoding to use.

    */
    public var Encoding : dotnet.System.Text.Encoding {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to indent elements.

    */
    public var Indent : Bool {
        get {
            return try! get_Indent();
        }
        set(v) {
            return try! set_Indent(value: v);
        }
    }
    /**
    Gets or sets the character string to use when indenting. This setting is used when the  property is set to .

    */
    public var IndentChars : dotnet.System.String {
        get {
            return try! get_IndentChars();
        }
        set(v) {
            return try! set_IndentChars(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.

    */
    public var NamespaceHandling : dotnet.System.Xml.NamespaceHandling {
        get {
            return try! get_NamespaceHandling();
        }
        set(v) {
            return try! set_NamespaceHandling(value: v);
        }
    }
    /**
    Gets or sets the character string to use for line breaks.

    */
    public var NewLineChars : dotnet.System.String {
        get {
            return try! get_NewLineChars();
        }
        set(v) {
            return try! set_NewLineChars(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to normalize line breaks in the output.

    */
    public var NewLineHandling : dotnet.System.Xml.NewLineHandling {
        get {
            return try! get_NewLineHandling();
        }
        set(v) {
            return try! set_NewLineHandling(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to write attributes on a new line.

    */
    public var NewLineOnAttributes : Bool {
        get {
            return try! get_NewLineOnAttributes();
        }
        set(v) {
            return try! set_NewLineOnAttributes(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to omit an XML declaration.

    */
    public var OmitXmlDeclaration : Bool {
        get {
            return try! get_OmitXmlDeclaration();
        }
        set(v) {
            return try! set_OmitXmlDeclaration(value: v);
        }
    }
    /**
    Gets the method used to serialize the  output.

    */
    public var OutputMethod : dotnet.System.Xml.XmlOutputMethod {
        get {
            return try! get_OutputMethod();
        }
    }
    /**
    Gets or sets a value that indicates whether the  will add closing tags to all unclosed element tags when the  method is called.

    */
    public var WriteEndDocumentOnClose : Bool {
        get {
            return try! get_WriteEndDocumentOnClose();
        }
        set(v) {
            return try! set_WriteEndDocumentOnClose(value: v);
        }
    }
} // XmlWriterSettings


}
// System.Xml.Resolvers
extension System.Xml.Resolvers {
// type: System.Xml.Resolvers.XmlKnownDtds
    /**
    The  enumeration is used by the  and defines which well-known DTDs that the  recognizes.

    */
public struct XmlKnownDtds : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Resolvers_XmlKnownDtds_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Resolvers.XmlKnownDtds None
    /**
    Specifies that the  will not recognize any of the predefined DTDs.

    */
    public static var None : dotnet.System.Xml.Resolvers.XmlKnownDtds {
        get {
        let __return = dotnet.System.Xml.Resolvers.XmlKnownDtds(val: System_Xml_Resolvers_XmlKnownDtds_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Resolvers.XmlKnownDtds Xhtml10
    /**
    Specifies that the  will recognize DTDs and entities that are defined in XHTML 1.0.

    */
    public static var Xhtml10 : dotnet.System.Xml.Resolvers.XmlKnownDtds {
        get {
        let __return = dotnet.System.Xml.Resolvers.XmlKnownDtds(val: System_Xml_Resolvers_XmlKnownDtds_get_Xhtml10());
            return __return;
        }
    }
    // static field: System.Xml.Resolvers.XmlKnownDtds Rss091
    /**
    Specifies that the  will recognize DTDs and entities that are defined in RSS 0.91.

    */
    public static var Rss091 : dotnet.System.Xml.Resolvers.XmlKnownDtds {
        get {
        let __return = dotnet.System.Xml.Resolvers.XmlKnownDtds(val: System_Xml_Resolvers_XmlKnownDtds_get_Rss091());
            return __return;
        }
    }
    // static field: System.Xml.Resolvers.XmlKnownDtds All
    /**
    Specifies that the  will recognize all currently supported DTDs. This is the default behavior.

    */
    public static var All : dotnet.System.Xml.Resolvers.XmlKnownDtds {
        get {
        let __return = dotnet.System.Xml.Resolvers.XmlKnownDtds(val: System_Xml_Resolvers_XmlKnownDtds_get_All());
            return __return;
        }
    }
} // XmlKnownDtds


// type: System.Xml.Resolvers.XmlPreloadedResolver
    /**
    Represents a class that is used to prepopulate the cache with DTDs or XML streams.

    */
open class XmlPreloadedResolver
    :
    dotnet.System.Xml.XmlResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Resolvers_XmlPreloadedResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Resolvers_XmlPreloadedResolver_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Resolvers.XmlKnownDtds)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)
    /**
    Initializes a new instance of the  class with the specified preloaded well-known DTDs.

    - Parameter preloadedDtds: The well-known DTDs that should be prepopulated into the cache.
    */
    public init(preloadedDtds : dotnet.System.Xml.Resolvers.XmlKnownDtds) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Resolvers_XmlPreloadedResolver_ctor_0__1__XmlKnownDtds(&__thrown, preloadedDtds.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlResolver)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)
    /**
    Initializes a new instance of the  class with the specified fallback resolver.

    - Parameter fallbackResolver: The , , or your own resolver.
    */
    public init(fallbackResolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Resolvers_XmlPreloadedResolver_ctor_0__1__XmlResolver(&__thrown, fallbackResolver?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlResolver, System.Xml.Resolvers.XmlKnownDtds)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)
    /**
    Initializes a new instance of the  class with the specified fallback resolver and preloaded well-known DTDs.

    - Parameter fallbackResolver: The , , or your own resolver.
    - Parameter preloadedDtds: The well-known DTDs that should be prepopulated into the cache.
    */
    public init(fallbackResolver : Optional<dotnet.System.Xml.XmlResolver>, preloadedDtds : dotnet.System.Xml.Resolvers.XmlKnownDtds) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Resolvers_XmlPreloadedResolver_ctor_0__2__XmlResolver_XmlKnownDtds(&__thrown, fallbackResolver?.get_handle() ?? nil, preloadedDtds.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlResolver, System.Xml.Resolvers.XmlKnownDtds, System.Collections.Generic.IEqualityComparer<System.Uri>)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})
    /**
    Initializes a new instance of the  class with the specified fallback resolver, preloaded well-known DTDs, and URI equality comparer.

    - Parameter fallbackResolver: The , , or your own resolver.
    - Parameter preloadedDtds: The well-known DTDs that should be prepopulated into cache.
    - Parameter uriComparer: The implementation of the  generic interface to use when you compare URIs.
    */
    public init(fallbackResolver : Optional<dotnet.System.Xml.XmlResolver>, preloadedDtds : dotnet.System.Xml.Resolvers.XmlKnownDtds, uriComparer : Optional<dotnet.System.Collections.Generic.IEqualityComparer_1<dotnet.System.Uri>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Resolvers_XmlPreloadedResolver_ctor_0__3__XmlResolver_XmlKnownDtds_System_Collections_Generic_IEqualityComparer_System_Uri_(&__thrown, fallbackResolver?.get_handle() ?? nil, preloadedDtds.get_value(), (uriComparer?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Uri, System.Byte[])
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])
    /**
    Adds a byte array to the  store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.

    - Parameter uri: The URI of the data that is being added to the  store.
    - Parameter value: A byte array with the data that corresponds to the provided URI.
    */
    open func Add(uri : dotnet.System.Uri, value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Resolvers_XmlPreloadedResolver_void__Add_0__2__Uri_u8Array(&__thrown, self.get_handle(), uri.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Uri, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)
    /**
    Adds a byte array to the  store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.

    - Parameter uri: The URI of the data that is being added to the  store.
    - Parameter value: A byte array with the data that corresponds to the provided URI.
    - Parameter offset: The offset in the provided byte array where the data starts.
    - Parameter count: The number of bytes to read from the byte array, starting at the provided offset.
    */
    open func Add(uri : dotnet.System.Uri, value : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Resolvers_XmlPreloadedResolver_void__Add_0__4__Uri_u8Array_i32_i32(&__thrown, self.get_handle(), uri.get_handle(), value.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Uri, System.IO.Stream)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)
    /**
    Adds a  to the  store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.

    - Parameter uri: The URI of the data that is being added to the  store.
    - Parameter value: A  with the data that corresponds to the provided URI.
    */
    open func Add(uri : dotnet.System.Uri, value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Resolvers_XmlPreloadedResolver_void__Add_0__2__Uri_Stream(&__thrown, self.get_handle(), uri.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Uri, System.String)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)
    /**
    Adds a string with preloaded data to the  store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.

    - Parameter uri: The URI of the data that is being added to the  store.
    - Parameter value: A  with the data that corresponds to the provided URI.
    */
    open func Add(uri : dotnet.System.Uri, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Resolvers_XmlPreloadedResolver_void__Add_0__2__Uri_String(&__thrown, self.get_handle(), uri.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetEntity(System.Uri, System.String, System.Type)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)
    /**
    Maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.
    - Parameter ofObjectToReturn: The type of object to return. The  supports  objects and  objects for URIs that were added as . If the requested type is not supported by the resolver, an exception will be thrown. Use the  method to determine whether a certain  is supported by this resolver.
    - Returns: A  or  object that corresponds to the actual source.

    */
    open override func GetEntity(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Resolvers_XmlPreloadedResolver_Object__GetEntity_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetEntityAsync(System.Uri, System.String, System.Type)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)
    /**
    Asynchronously maps a URI to an object that contains the actual resource.

    - Parameter absoluteUri: The URI returned from .
    - Parameter role: The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.
    - Parameter ofObjectToReturn: The type of object to return. The  supports  objects and  objects for URIs that were added as . If the requested type is not supported by the resolver, an exception will be thrown. Use the  method to determine whether a certain  is supported by this resolver.
    - Returns: A  or  object that corresponds to the actual source.

    */
    open override func GetEntityAsync(absoluteUri : dotnet.System.Uri, role : Optional<dotnet.System.String>, ofObjectToReturn : Optional<dotnet.System.Type_>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Resolvers_XmlPreloadedResolver_System_Threading_Tasks_Task_object___GetEntityAsync_0__3__Uri_String_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), role?.get_handle() ?? nil, ofObjectToReturn?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Remove(System.Uri)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)
    /**
    Removes the data that corresponds to the URI from the .

    - Parameter uri: The URI of the data that should be removed from the  store.
    */
    open func Remove(uri : dotnet.System.Uri) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Resolvers_XmlPreloadedResolver_void__Remove_0__1__Uri(&__thrown, self.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Uri ResolveUri(System.Uri, System.String)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)
    /**
    Resolves the absolute URI from the base and relative URIs.

    - Parameter baseUri: The base URI used to resolve the relative URI.
    - Parameter relativeUri: The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the  value. If relative, it combines with the  to make an absolute URI.
    - Returns: The  representing the absolute URI or  if the relative URI cannot be resolved.

    */
    open override func ResolveUri(baseUri : Optional<dotnet.System.Uri>, relativeUri : Optional<dotnet.System.String>) throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Resolvers_XmlPreloadedResolver_Uri__ResolveUri_0__2__Uri_String(&__thrown, self.get_handle(), baseUri?.get_handle() ?? nil, relativeUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // bool SupportsType(System.Uri, System.Type)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)
    /**
    Determines whether the resolver supports other s than just .

    - Parameter absoluteUri: The absolute URI to check.
    - Parameter type: The  to return.
    - Returns: 
         if the  is supported; otherwise, .

    */
    open override func SupportsType(absoluteUri : dotnet.System.Uri, type : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Resolvers_XmlPreloadedResolver_bool__SupportsType_0__2__Uri_Type(&__thrown, self.get_handle(), absoluteUri.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.set_Credentials(System.Net.ICredentials)
    open override func set_Credentials(value : dotnet.System.Net.ICredentials) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Resolvers_XmlPreloadedResolver_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Uri> get_PreloadedUris()
// docid: M:System.Xml.Resolvers.XmlPreloadedResolver.get_PreloadedUris
    open func get_PreloadedUris() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Resolvers_XmlPreloadedResolver_System_Collections_Generic_IEnumerable_System_Uri___get_PreloadedUris_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    Gets a collection of preloaded URIs.

    */
    open var PreloadedUris : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Uri> {
        get {
            return try! get_PreloadedUris();
        }
    }
} // XmlPreloadedResolver


}

// System.Xml.Schema
extension System.Xml.Schema {
// type: System.Xml.Schema.IXmlSchemaInfo
    /**
    Defines the post-schema-validation infoset of a validated XML node.

    */
open class IXmlSchemaInfo
    :
    SGBridgeGenericValue,
    System_Xml_Schema_IXmlSchemaInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_IXmlSchemaInfo_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_IsDefault
    open func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNil()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_IsNil
    open func get_IsNil() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_bool__get_IsNil_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_MemberType()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_MemberType
    open func get_MemberType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_XmlSchemaSimpleType__get_MemberType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAttribute get_SchemaAttribute()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute
    open func get_SchemaAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_XmlSchemaAttribute__get_SchemaAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaElement get_SchemaElement()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement
    open func get_SchemaElement() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_XmlSchemaElement__get_SchemaElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_SchemaType()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_SchemaType
    open func get_SchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_XmlSchemaType__get_SchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaValidity get_Validity()
// docid: M:System.Xml.Schema.IXmlSchemaInfo.get_Validity
    open func get_Validity() throws -> dotnet.System.Xml.Schema.XmlSchemaValidity {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_IXmlSchemaInfo_XmlSchemaValidity__get_Validity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaValidity(val: __return);
        }
    }
} // IXmlSchemaInfo


// type: System.Xml.Schema.ValidationEventArgs
    /**
    Returns detailed information related to the .

    */
open class ValidationEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_ValidationEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaException get_Exception()
// docid: M:System.Xml.Schema.ValidationEventArgs.get_Exception
    open func get_Exception() throws -> dotnet.System.Xml.Schema.XmlSchemaException {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_ValidationEventArgs_XmlSchemaException__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaException(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Xml.Schema.ValidationEventArgs.get_Message
    open func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_ValidationEventArgs_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSeverityType get_Severity()
// docid: M:System.Xml.Schema.ValidationEventArgs.get_Severity
    open func get_Severity() throws -> dotnet.System.Xml.Schema.XmlSeverityType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_ValidationEventArgs_XmlSeverityType__get_Severity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSeverityType(val: __return);
        }
    }
    /**
    Gets the  associated with the validation event.

    */
    open var Exception : dotnet.System.Xml.Schema.XmlSchemaException {
        get {
            return try! get_Exception();
        }
    }
    /**
    Gets the text description corresponding to the validation event.

    */
    open var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
    /**
    Gets the severity of the validation event.

    */
    open var Severity : dotnet.System.Xml.Schema.XmlSeverityType {
        get {
            return try! get_Severity();
        }
    }
} // ValidationEventArgs


// type: System.Xml.Schema.ValidationEventHandler
    /**
    Represents the callback method that will handle XML schema validation events and the .

    */
public final class ValidationEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_ValidationEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.Schema.ValidationEventArgs)
// docid: M:System.Xml.Schema.ValidationEventHandler.Invoke(System.Object,System.Xml.Schema.ValidationEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Schema.ValidationEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_ValidationEventHandler_void__Invoke_0__2__Object_ValidationEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.Schema.ValidationEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Schema.ValidationEventHandler.BeginInvoke(System.Object,System.Xml.Schema.ValidationEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Schema.ValidationEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_ValidationEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ValidationEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Schema.ValidationEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_ValidationEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Xml.Schema.ValidationEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_ValidationEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.Schema.ValidationEventArgs)
// docid: M:System.Xml.Schema.ValidationEventHandler.Invoke(System.Object,System.Xml.Schema.ValidationEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Xml.Schema.ValidationEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_ValidationEventHandler_void__Invoke_0__2__Object_ValidationEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ValidationEventHandler


// type: System.Xml.Schema.XmlAtomicValue
    /**
    Represents the typed value of a validated XML element or attribute. The  class cannot be inherited.

    */
public final class XmlAtomicValue
    :
    dotnet.System.Xml.XPath.XPathItem,
    System_ICloneable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlAtomicValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.Schema.XmlAtomicValue Clone()
// docid: M:System.Xml.Schema.XmlAtomicValue.Clone
    /**
    Returns a copy of this  object.

    - Returns: An  object copy of this  object.

    */
    public func Clone() throws -> dotnet.System.Xml.Schema.XmlAtomicValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_XmlAtomicValue__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlAtomicValue(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Schema.XmlAtomicValue.ToString
    /**
    Gets the  value of the validated XML element or attribute.

    - Returns: The  value of the validated XML element or attribute.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object ValueAs(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Returns the validated XML element or attribute's value as the type specified using the  object specified to resolve namespace prefixes.

    - Parameter type: The type to return the validated XML element or attribute's value as.
    - Parameter nsResolver: The  object used to resolve namespace prefixes.
    - Returns: The value of the validated XML element or attribute as the type requested.

    */
    public func ValueAs(type : dotnet.System.Type_, nsResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_Object__ValueAs_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), type.get_handle(), nsResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNode()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_IsNode
    public override func get_IsNode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_bool__get_IsNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_TypedValue()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_TypedValue
    public override func get_TypedValue() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_Object__get_TypedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_Value
    public override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ValueAsBoolean()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_ValueAsBoolean
    public override func get_ValueAsBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_bool__get_ValueAsBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.DateTime get_ValueAsDateTime()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_ValueAsDateTime
    public override func get_ValueAsDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_DateTime__get_ValueAsDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double get_ValueAsDouble()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_ValueAsDouble
    public override func get_ValueAsDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_f64__get_ValueAsDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueAsInt()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_ValueAsInt
    public override func get_ValueAsInt() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_i32__get_ValueAsInt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ValueAsLong()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_ValueAsLong
    public override func get_ValueAsLong() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_i64__get_ValueAsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_ValueType()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_ValueType
    public override func get_ValueType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_Type__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_XmlType()
// docid: M:System.Xml.Schema.XmlAtomicValue.get_XmlType
    public override func get_XmlType() throws -> dotnet.System.Xml.Schema.XmlSchemaType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlAtomicValue_XmlSchemaType__get_XmlType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __return);
        }
    }
    /**
    Gets a value indicating whether the validated XML element or attribute is an XPath node or an atomic value.

    */
    public override var IsNode : Bool {
        get {
            return try! get_IsNode();
        }
    }
    /**
    Gets the current validated XML element or attribute as a boxed object of the most appropriate Microsoft .NET Framework type according to its schema type.

    */
    public override var TypedValue : dotnet.System.Object {
        get {
            return try! get_TypedValue();
        }
    }
    /**
    Gets the  value of the validated XML element or attribute.

    */
    public override var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    Gets the validated XML element or attribute's value as a .

    */
    public override var ValueAsBoolean : Bool {
        get {
            return try! get_ValueAsBoolean();
        }
    }
    /**
    Gets the validated XML element or attribute's value as a .

    */
    public override var ValueAsDateTime : dotnet.System.DateTime {
        get {
            return try! get_ValueAsDateTime();
        }
    }
    /**
    Gets the validated XML element or attribute's value as a .

    */
    public override var ValueAsDouble : Swift.Double {
        get {
            return try! get_ValueAsDouble();
        }
    }
    /**
    Gets the validated XML element or attribute's value as an .

    */
    public override var ValueAsInt : Swift.Int32 {
        get {
            return try! get_ValueAsInt();
        }
    }
    /**
    Gets the validated XML element or attribute's value as an .

    */
    public override var ValueAsLong : Swift.Int64 {
        get {
            return try! get_ValueAsLong();
        }
    }
    /**
    Gets the Microsoft .NET Framework type of the validated XML element or attribute.

    */
    public override var ValueType : dotnet.System.Type_ {
        get {
            return try! get_ValueType();
        }
    }
    /**
    Gets the  for the validated XML element or attribute.

    */
    public override var XmlType : dotnet.System.Xml.Schema.XmlSchemaType {
        get {
            return try! get_XmlType();
        }
    }
} // XmlAtomicValue


// type: System.Xml.Schema.XmlSchema
    /**
    An in-memory representation of an XML Schema, as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes].

    */
open class XmlSchema
    :
    dotnet.System.Xml.Schema.XmlSchemaObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchema_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String InstanceNamespace
    /**
    The XML schema instance namespace. This field is constant.

    */
    open class var InstanceNamespace : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Xml_Schema_XmlSchema_get_InstanceNamespace());
            return __return;
        }
    }
    // static field: System.String Namespace
    /**
    The XML schema namespace. This field is constant.

    */
    open class var Namespace : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Xml_Schema_XmlSchema_get_Namespace());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchema.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchema_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Compile(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)
    /**
    Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.

    - Parameter validationEventHandler: The validation event handler that receives information about XML Schema validation errors.
    */
    open func Compile(validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Compile_0__1__ValidationEventHandler(&__thrown, self.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Compile(validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Compile(validationEventHandler: del_validationEventHandler);
    }
    // void Compile(System.Xml.Schema.ValidationEventHandler, System.Xml.XmlResolver)
// docid: M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)
    /**
    Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.

    - Parameter validationEventHandler: The validation event handler that receives information about the XML Schema validation errors.
    - Parameter resolver: The  used to resolve namespaces referenced in  and  elements.
    */
    open func Compile(validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Compile_0__2__ValidationEventHandler_XmlResolver(&__thrown, self.get_handle(), validationEventHandler?.get_handle() ?? nil, resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Compile(validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Compile(validationEventHandler: del_validationEventHandler, resolver: resolver);
    }
    // System.Xml.Schema.XmlSchema Read(System.IO.Stream, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)
    /**
    Reads an XML Schema  from the supplied stream.

    - Parameter stream: The supplied data stream.
    - Parameter validationEventHandler: The validation event handler that receives information about XML Schema syntax errors.
    - Returns: The  object representing the XML Schema.

    */
    open class func Read(stream : dotnet.System.IO.Stream, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchema__Read_0__2__Stream_ValidationEventHandler(&__thrown, stream.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open class func Read(stream : dotnet.System.IO.Stream, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Read(stream: stream, validationEventHandler: del_validationEventHandler);
    }
    // System.Xml.Schema.XmlSchema Read(System.IO.TextReader, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)
    /**
    Reads an XML Schema from the supplied .

    - Parameter reader: The  containing the XML Schema to read.
    - Parameter validationEventHandler: The validation event handler that receives information about the XML Schema syntax errors.
    - Returns: The  object representing the XML Schema.

    */
    open class func Read(reader : dotnet.System.IO.TextReader, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchema__Read_0__2__TextReader_ValidationEventHandler(&__thrown, reader.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open class func Read(reader : dotnet.System.IO.TextReader, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Read(reader: reader, validationEventHandler: del_validationEventHandler);
    }
    // System.Xml.Schema.XmlSchema Read(System.Xml.XmlReader, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)
    /**
    Reads an XML Schema from the supplied .

    - Parameter reader: The  containing the XML Schema to read.
    - Parameter validationEventHandler: The validation event handler that receives information about the XML Schema syntax errors.
    - Returns: The  object representing the XML Schema.

    */
    open class func Read(reader : dotnet.System.Xml.XmlReader, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchema__Read_0__2__XmlReader_ValidationEventHandler(&__thrown, reader.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open class func Read(reader : dotnet.System.Xml.XmlReader, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Read(reader: reader, validationEventHandler: del_validationEventHandler);
    }
    // void Write(System.IO.Stream)
// docid: M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)
    /**
    Writes the XML Schema to the supplied data stream.

    - Parameter stream: The supplied data stream.
    */
    open func Write(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Write_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.IO.Stream, System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)
    /**
    Writes the XML Schema to the supplied  using the  specified.

    - Parameter stream: The supplied data stream.
    - Parameter namespaceManager: The .
    */
    open func Write(stream : dotnet.System.IO.Stream, namespaceManager : Optional<dotnet.System.Xml.XmlNamespaceManager>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Write_0__2__Stream_XmlNamespaceManager(&__thrown, self.get_handle(), stream.get_handle(), namespaceManager?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.IO.TextWriter)
// docid: M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)
    /**
    Writes the XML Schema to the supplied .

    - Parameter writer: The  to write to.
    */
    open func Write(writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Write_0__1__TextWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.IO.TextWriter, System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)
    /**
    Writes the XML Schema to the supplied .

    - Parameter writer: The  to write to.
    - Parameter namespaceManager: The .
    */
    open func Write(writer : dotnet.System.IO.TextWriter, namespaceManager : Optional<dotnet.System.Xml.XmlNamespaceManager>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Write_0__2__TextWriter_XmlNamespaceManager(&__thrown, self.get_handle(), writer.get_handle(), namespaceManager?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Xml.XmlWriter)
// docid: M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)
    /**
    Writes the XML Schema to the supplied .

    - Parameter writer: The  to write to.
    */
    open func Write(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Write_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Xml.XmlWriter, System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)
    /**
    Writes the XML Schema to the supplied .

    - Parameter writer: The  to write to.
    - Parameter namespaceManager: The .
    */
    open func Write(writer : dotnet.System.Xml.XmlWriter, namespaceManager : Optional<dotnet.System.Xml.XmlNamespaceManager>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__Write_0__2__XmlWriter_XmlNamespaceManager(&__thrown, self.get_handle(), writer.get_handle(), namespaceManager?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_AttributeFormDefault()
// docid: M:System.Xml.Schema.XmlSchema.get_AttributeFormDefault
    open func get_AttributeFormDefault() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaForm__get_AttributeFormDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_AttributeFormDefault(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Schema.XmlSchema.set_AttributeFormDefault(System.Xml.Schema.XmlSchemaForm)
    open func set_AttributeFormDefault(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_AttributeFormDefault_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_AttributeGroups()
// docid: M:System.Xml.Schema.XmlSchema.get_AttributeGroups
    open func get_AttributeGroups() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectTable__get_AttributeGroups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_Attributes()
// docid: M:System.Xml.Schema.XmlSchema.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectTable__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_BlockDefault()
// docid: M:System.Xml.Schema.XmlSchema.get_BlockDefault
    open func get_BlockDefault() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaDerivationMethod__get_BlockDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_BlockDefault(System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchema.set_BlockDefault(System.Xml.Schema.XmlSchemaDerivationMethod)
    open func set_BlockDefault(value : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_BlockDefault_0__1__XmlSchemaDerivationMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_ElementFormDefault()
// docid: M:System.Xml.Schema.XmlSchema.get_ElementFormDefault
    open func get_ElementFormDefault() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaForm__get_ElementFormDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_ElementFormDefault(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Schema.XmlSchema.set_ElementFormDefault(System.Xml.Schema.XmlSchemaForm)
    open func set_ElementFormDefault(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_ElementFormDefault_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_Elements()
// docid: M:System.Xml.Schema.XmlSchema.get_Elements
    open func get_Elements() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectTable__get_Elements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_FinalDefault()
// docid: M:System.Xml.Schema.XmlSchema.get_FinalDefault
    open func get_FinalDefault() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaDerivationMethod__get_FinalDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_FinalDefault(System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchema.set_FinalDefault(System.Xml.Schema.XmlSchemaDerivationMethod)
    open func set_FinalDefault(value : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_FinalDefault_0__1__XmlSchemaDerivationMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_Groups()
// docid: M:System.Xml.Schema.XmlSchema.get_Groups
    open func get_Groups() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectTable__get_Groups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Xml.Schema.XmlSchema.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Xml.Schema.XmlSchema.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Includes()
// docid: M:System.Xml.Schema.XmlSchema.get_Includes
    open func get_Includes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectCollection__get_Includes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsCompiled()
// docid: M:System.Xml.Schema.XmlSchema.get_IsCompiled
    open func get_IsCompiled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_bool__get_IsCompiled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchema.get_Items
    open func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_Notations()
// docid: M:System.Xml.Schema.XmlSchema.get_Notations
    open func get_Notations() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectTable__get_Notations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_SchemaTypes()
// docid: M:System.Xml.Schema.XmlSchema.get_SchemaTypes
    open func get_SchemaTypes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlSchemaObjectTable__get_SchemaTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TargetNamespace()
// docid: M:System.Xml.Schema.XmlSchema.get_TargetNamespace
    open func get_TargetNamespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_String__get_TargetNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TargetNamespace(System.String)
// docid: M:System.Xml.Schema.XmlSchema.set_TargetNamespace(System.String)
    open func set_TargetNamespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_TargetNamespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute[] get_UnhandledAttributes()
// docid: M:System.Xml.Schema.XmlSchema.get_UnhandledAttributes
    open func get_UnhandledAttributes() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_XmlAttributeArray__get_UnhandledAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UnhandledAttributes(System.Xml.XmlAttribute[])
// docid: M:System.Xml.Schema.XmlSchema.set_UnhandledAttributes(System.Xml.XmlAttribute[])
    open func set_UnhandledAttributes(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_UnhandledAttributes_0__1__XmlAttributeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Xml.Schema.XmlSchema.get_Version
    open func get_Version() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchema_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Version(System.String)
// docid: M:System.Xml.Schema.XmlSchema.set_Version(System.String)
    open func set_Version(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchema_void__set_Version_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the form for attributes declared in the target namespace of the schema.

    */
    open var AttributeFormDefault : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_AttributeFormDefault();
        }
        set(v) {
            return try! set_AttributeFormDefault(value: v);
        }
    }
    /**
    Gets the post-schema-compilation value of all the global attribute groups in the schema.

    */
    open var AttributeGroups : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_AttributeGroups();
        }
    }
    /**
    Gets the post-schema-compilation value for all the attributes in the schema.

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the  attribute which sets the default value of the  attribute on element and complex types in the  of the schema.

    */
    open var BlockDefault : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_BlockDefault();
        }
        set(v) {
            return try! set_BlockDefault(value: v);
        }
    }
    /**
    Gets or sets the form for elements declared in the target namespace of the schema.

    */
    open var ElementFormDefault : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_ElementFormDefault();
        }
        set(v) {
            return try! set_ElementFormDefault(value: v);
        }
    }
    /**
    Gets the post-schema-compilation value for all the elements in the schema.

    */
    open var Elements : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_Elements();
        }
    }
    /**
    Gets or sets the  attribute which sets the default value of the  attribute on elements and complex types in the target namespace of the schema.

    */
    open var FinalDefault : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_FinalDefault();
        }
        set(v) {
            return try! set_FinalDefault(value: v);
        }
    }
    /**
    Gets the post-schema-compilation value of all the groups in the schema.

    */
    open var Groups : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_Groups();
        }
    }
    /**
    Gets or sets the string ID.

    */
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    /**
    Gets the collection of included and imported schemas.

    */
    open var Includes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Includes();
        }
    }
    /**
    Indicates if the schema has been compiled.

    */
    open var IsCompiled : Bool {
        get {
            return try! get_IsCompiled();
        }
    }
    /**
    Gets the collection of schema elements in the schema and is used to add new element types at the  element level.

    */
    open var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
    /**
    Gets the post-schema-compilation value for all notations in the schema.

    */
    open var Notations : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_Notations();
        }
    }
    /**
    Gets the post-schema-compilation value of all schema types in the schema.

    */
    open var SchemaTypes : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_SchemaTypes();
        }
    }
    /**
    Gets or sets the Uniform Resource Identifier (URI) of the schema target namespace.

    */
    open var TargetNamespace : Optional<dotnet.System.String> {
        get {
            return try! get_TargetNamespace();
        }
        set(v) {
            return try! set_TargetNamespace(value: v!);
        }
    }
    /**
    Gets or sets the qualified attributes which do not belong to the schema target namespace.

    */
    open var UnhandledAttributes : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        get {
            return try! get_UnhandledAttributes();
        }
        set(v) {
            return try! set_UnhandledAttributes(value: v!);
        }
    }
    /**
    Gets or sets the version of the schema.

    */
    open var Version : Optional<dotnet.System.String> {
        get {
            return try! get_Version();
        }
        set(v) {
            return try! set_Version(value: v!);
        }
    }
} // XmlSchema


// type: System.Xml.Schema.XmlSchemaAll
    /**
    Represents the World Wide Web Consortium (W3C)  element (compositor).

    */
open class XmlSchemaAll
    :
    dotnet.System.Xml.Schema.XmlSchemaGroupBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAll_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAll.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAll_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchemaAll.get_Items
    open override func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAll_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    /**
    Gets the collection of  elements contained within the  compositor.

    */
    open override var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
} // XmlSchemaAll


// type: System.Xml.Schema.XmlSchemaAnnotated
    /**
    The base class for any element that can contain annotation elements.

    */
open class XmlSchemaAnnotated
    :
    dotnet.System.Xml.Schema.XmlSchemaObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAnnotated_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAnnotated_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnnotation get_Annotation()
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.get_Annotation
    open func get_Annotation() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnnotated_XmlSchemaAnnotation__get_Annotation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnnotation(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Annotation(System.Xml.Schema.XmlSchemaAnnotation)
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.set_Annotation(System.Xml.Schema.XmlSchemaAnnotation)
    open func set_Annotation(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnnotated_void__set_Annotation_0__1__XmlSchemaAnnotation(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnnotated_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnnotated_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute[] get_UnhandledAttributes()
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.get_UnhandledAttributes
    open func get_UnhandledAttributes() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnnotated_XmlAttributeArray__get_UnhandledAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UnhandledAttributes(System.Xml.XmlAttribute[])
// docid: M:System.Xml.Schema.XmlSchemaAnnotated.set_UnhandledAttributes(System.Xml.XmlAttribute[])
    open func set_UnhandledAttributes(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnnotated_void__set_UnhandledAttributes_0__1__XmlAttributeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  property.

    */
    open var Annotation : Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation> {
        get {
            return try! get_Annotation();
        }
        set(v) {
            return try! set_Annotation(value: v!);
        }
    }
    /**
    Gets or sets the string id.

    */
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    /**
    Gets or sets the qualified attributes that do not belong to the current schema's target namespace.

    */
    open var UnhandledAttributes : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        get {
            return try! get_UnhandledAttributes();
        }
        set(v) {
            return try! set_UnhandledAttributes(value: v!);
        }
    }
} // XmlSchemaAnnotated


// type: System.Xml.Schema.XmlSchemaAnnotation
    /**
    Represents the World Wide Web Consortium (W3C)  element.

    */
open class XmlSchemaAnnotation
    :
    dotnet.System.Xml.Schema.XmlSchemaObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAnnotation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAnnotation.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAnnotation_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Xml.Schema.XmlSchemaAnnotation.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnnotation_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAnnotation.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnnotation_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchemaAnnotation.get_Items
    open func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnnotation_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute[] get_UnhandledAttributes()
// docid: M:System.Xml.Schema.XmlSchemaAnnotation.get_UnhandledAttributes
    open func get_UnhandledAttributes() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnnotation_XmlAttributeArray__get_UnhandledAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UnhandledAttributes(System.Xml.XmlAttribute[])
// docid: M:System.Xml.Schema.XmlSchemaAnnotation.set_UnhandledAttributes(System.Xml.XmlAttribute[])
    open func set_UnhandledAttributes(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnnotation_void__set_UnhandledAttributes_0__1__XmlAttributeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the string id.

    */
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    /**
    Gets the  collection that is used to store the  and  child elements.

    */
    open var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
    /**
    Gets or sets the qualified attributes that do not belong to the schema's target namespace.

    */
    open var UnhandledAttributes : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        get {
            return try! get_UnhandledAttributes();
        }
        set(v) {
            return try! set_UnhandledAttributes(value: v!);
        }
    }
} // XmlSchemaAnnotation


// type: System.Xml.Schema.XmlSchemaAny
    /**
    Represents the World Wide Web Consortium (W3C)  element.

    */
open class XmlSchemaAny
    :
    dotnet.System.Xml.Schema.XmlSchemaParticle
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAny_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAny.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAny_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Schema.XmlSchemaAny.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAny_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAny.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAny_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContentProcessing get_ProcessContents()
// docid: M:System.Xml.Schema.XmlSchemaAny.get_ProcessContents
    open func get_ProcessContents() throws -> dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAny_XmlSchemaContentProcessing__get_ProcessContents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaContentProcessing(val: __return);
        }
    }
    // [IsSpecialName] void set_ProcessContents(System.Xml.Schema.XmlSchemaContentProcessing)
// docid: M:System.Xml.Schema.XmlSchemaAny.set_ProcessContents(System.Xml.Schema.XmlSchemaContentProcessing)
    open func set_ProcessContents(value : dotnet.System.Xml.Schema.XmlSchemaContentProcessing) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAny_void__set_ProcessContents_0__1__XmlSchemaContentProcessing(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the namespaces containing the elements that can be used.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets information about how an application or XML processor should handle the validation of XML documents for the elements specified by the  element.

    */
    open var ProcessContents : dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        get {
            return try! get_ProcessContents();
        }
        set(v) {
            return try! set_ProcessContents(value: v);
        }
    }
} // XmlSchemaAny


// type: System.Xml.Schema.XmlSchemaAnyAttribute
    /**
    Represents the World Wide Web Consortium (W3C)  element.

    */
open class XmlSchemaAnyAttribute
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAnyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAnyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Schema.XmlSchemaAnyAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnyAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAnyAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnyAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContentProcessing get_ProcessContents()
// docid: M:System.Xml.Schema.XmlSchemaAnyAttribute.get_ProcessContents
    open func get_ProcessContents() throws -> dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAnyAttribute_XmlSchemaContentProcessing__get_ProcessContents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaContentProcessing(val: __return);
        }
    }
    // [IsSpecialName] void set_ProcessContents(System.Xml.Schema.XmlSchemaContentProcessing)
// docid: M:System.Xml.Schema.XmlSchemaAnyAttribute.set_ProcessContents(System.Xml.Schema.XmlSchemaContentProcessing)
    open func set_ProcessContents(value : dotnet.System.Xml.Schema.XmlSchemaContentProcessing) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAnyAttribute_void__set_ProcessContents_0__1__XmlSchemaContentProcessing(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the namespaces containing the attributes that can be used.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets information about how an application or XML processor should handle the validation of XML documents for the attributes specified by the  element.

    */
    open var ProcessContents : dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        get {
            return try! get_ProcessContents();
        }
        set(v) {
            return try! set_ProcessContents(value: v);
        }
    }
} // XmlSchemaAnyAttribute


// type: System.Xml.Schema.XmlSchemaAppInfo
    /**
    Represents the World Wide Web Consortium (W3C)  element.

    */
open class XmlSchemaAppInfo
    :
    dotnet.System.Xml.Schema.XmlSchemaObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAppInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAppInfo.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAppInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.XmlNode[] get_Markup()
// docid: M:System.Xml.Schema.XmlSchemaAppInfo.get_Markup
    open func get_Markup() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAppInfo_XmlNodeArray__get_Markup_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlNode>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Markup(System.Xml.XmlNode[])
// docid: M:System.Xml.Schema.XmlSchemaAppInfo.set_Markup(System.Xml.XmlNode[])
    open func set_Markup(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAppInfo_void__set_Markup_0__1__XmlNodeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Source()
// docid: M:System.Xml.Schema.XmlSchemaAppInfo.get_Source
    open func get_Source() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAppInfo_String__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Source(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAppInfo.set_Source(System.String)
    open func set_Source(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAppInfo_void__set_Source_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets an array of  objects that represents the  child nodes.

    */
    open var Markup : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>> {
        get {
            return try! get_Markup();
        }
        set(v) {
            return try! set_Markup(value: v!);
        }
    }
    /**
    Gets or sets the source of the application information.

    */
    open var Source : Optional<dotnet.System.String> {
        get {
            return try! get_Source();
        }
        set(v) {
            return try! set_Source(value: v!);
        }
    }
} // XmlSchemaAppInfo


// type: System.Xml.Schema.XmlSchemaAttribute
    /**
    Represents the  element from the XML Schema as specified by the World Wide Web Consortium (W3C). Attributes provide additional information for other document elements. The attribute tag is nested between the tags of a document's element for the schema. The XML document displays attributes as named items in the opening tag of an element.

    */
open class XmlSchemaAttribute
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_AttributeSchemaType()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_AttributeSchemaType
    open func get_AttributeSchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlSchemaSimpleType__get_AttributeSchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_AttributeType()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_AttributeType
    open func get_AttributeType() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_Object__get_AttributeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DefaultValue()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_DefaultValue
    open func get_DefaultValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_String__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultValue(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_DefaultValue(System.String)
    open func set_DefaultValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_DefaultValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FixedValue()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_FixedValue
    open func get_FixedValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_String__get_FixedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FixedValue(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_FixedValue(System.String)
    open func set_FixedValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_FixedValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_Form()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_Form
    open func get_Form() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlSchemaForm__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_Form(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_Form(System.Xml.Schema.XmlSchemaForm)
    open func set_Form(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_Form_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_QualifiedName()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_QualifiedName
    open func get_QualifiedName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlQualifiedName__get_QualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_RefName()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_RefName
    open func get_RefName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlQualifiedName__get_RefName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RefName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_RefName(System.Xml.XmlQualifiedName)
    open func set_RefName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_RefName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_SchemaType()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_SchemaType
    open func get_SchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlSchemaSimpleType__get_SchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SchemaType(System.Xml.Schema.XmlSchemaSimpleType)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_SchemaType(System.Xml.Schema.XmlSchemaSimpleType)
    open func set_SchemaType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_SchemaType_0__1__XmlSchemaSimpleType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_SchemaTypeName()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_SchemaTypeName
    open func get_SchemaTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlQualifiedName__get_SchemaTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SchemaTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_SchemaTypeName(System.Xml.XmlQualifiedName)
    open func set_SchemaTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_SchemaTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaUse get_Use()
// docid: M:System.Xml.Schema.XmlSchemaAttribute.get_Use
    open func get_Use() throws -> dotnet.System.Xml.Schema.XmlSchemaUse {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttribute_XmlSchemaUse__get_Use_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaUse(val: __return);
        }
    }
    // [IsSpecialName] void set_Use(System.Xml.Schema.XmlSchemaUse)
// docid: M:System.Xml.Schema.XmlSchemaAttribute.set_Use(System.Xml.Schema.XmlSchemaUse)
    open func set_Use(value : dotnet.System.Xml.Schema.XmlSchemaUse) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttribute_void__set_Use_0__1__XmlSchemaUse(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets an  object representing the type of the attribute based on the  or  of the attribute.

    */
    open var AttributeSchemaType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_AttributeSchemaType();
        }
    }
    /**
    Gets the common language runtime (CLR) object based on the  or  of the attribute that holds the post-compilation value of the  property.

    */
    open var AttributeType : Optional<dotnet.System.Object> {
        get {
            return try! get_AttributeType();
        }
    }
    /**
    Gets or sets the default value for the attribute.

    */
    open var DefaultValue : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultValue();
        }
        set(v) {
            return try! set_DefaultValue(value: v!);
        }
    }
    /**
    Gets or sets the fixed value for the attribute.

    */
    open var FixedValue : Optional<dotnet.System.String> {
        get {
            return try! get_FixedValue();
        }
        set(v) {
            return try! set_FixedValue(value: v!);
        }
    }
    /**
    Gets or sets the form for the attribute.

    */
    open var Form : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    Gets or sets the name of the attribute.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets the qualified name for the attribute.

    */
    open var QualifiedName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_QualifiedName();
        }
    }
    /**
    Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).

    */
    open var RefName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_RefName();
        }
        set(v) {
            return try! set_RefName(value: v);
        }
    }
    /**
    Gets or sets the attribute type to a simple type.

    */
    open var SchemaType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_SchemaType();
        }
        set(v) {
            return try! set_SchemaType(value: v!);
        }
    }
    /**
    Gets or sets the name of the simple type defined in this schema (or another schema indicated by the specified namespace).

    */
    open var SchemaTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_SchemaTypeName();
        }
        set(v) {
            return try! set_SchemaTypeName(value: v);
        }
    }
    /**
    Gets or sets information about how the attribute is used.

    */
    open var Use : dotnet.System.Xml.Schema.XmlSchemaUse {
        get {
            return try! get_Use();
        }
        set(v) {
            return try! set_Use(value: v);
        }
    }
} // XmlSchemaAttribute


// type: System.Xml.Schema.XmlSchemaAttributeGroup
    /**
    Represents the  element from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroups provides a mechanism to group a set of attribute declarations so that they can be incorporated as a group into complex type definitions.

    */
open class XmlSchemaAttributeGroup
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAttributeGroup_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAttributeGroup_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.get_AnyAttribute
    open func get_AnyAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttributeGroup_XmlSchemaAnyAttribute__get_AnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
    open func set_AnyAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttributeGroup_void__set_AnyAttribute_0__1__XmlSchemaAnyAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttributeGroup_XmlSchemaObjectCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttributeGroup_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttributeGroup_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_QualifiedName()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.get_QualifiedName
    open func get_QualifiedName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttributeGroup_XmlQualifiedName__get_QualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAttributeGroup get_RedefinedAttributeGroup()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroup.get_RedefinedAttributeGroup
    open func get_RedefinedAttributeGroup() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAttributeGroup> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttributeGroup_XmlSchemaAttributeGroup__get_RedefinedAttributeGroup_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAttributeGroup(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets or sets the  component of the attribute group.

    */
    open var AnyAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AnyAttribute();
        }
        set(v) {
            return try! set_AnyAttribute(value: v!);
        }
    }
    /**
    Gets the collection of attributes for the attribute group. Contains  and  elements.

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the name of the attribute group.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets the qualified name of the attribute group.

    */
    open var QualifiedName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_QualifiedName();
        }
    }
    /**
    Gets the redefined attribute group property from the XML Schema.

    */
    open var RedefinedAttributeGroup : Optional<dotnet.System.Xml.Schema.XmlSchemaAttributeGroup> {
        get {
            return try! get_RedefinedAttributeGroup();
        }
    }
} // XmlSchemaAttributeGroup


// type: System.Xml.Schema.XmlSchemaAttributeGroupRef
    /**
    Represents the  element with the  attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroupRef is the reference for an attributeGroup, name property contains the attribute group being referenced.

    */
open class XmlSchemaAttributeGroupRef
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaAttributeGroupRef_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaAttributeGroupRef_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_RefName()
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroupRef.get_RefName
    open func get_RefName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaAttributeGroupRef_XmlQualifiedName__get_RefName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RefName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaAttributeGroupRef.set_RefName(System.Xml.XmlQualifiedName)
    open func set_RefName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaAttributeGroupRef_void__set_RefName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the referenced  element.

    */
    open var RefName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_RefName();
        }
        set(v) {
            return try! set_RefName(value: v);
        }
    }
} // XmlSchemaAttributeGroupRef


// type: System.Xml.Schema.XmlSchemaChoice
    /**
    Represents the  element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The  allows only one of its children to appear in an instance.

    */
open class XmlSchemaChoice
    :
    dotnet.System.Xml.Schema.XmlSchemaGroupBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaChoice_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaChoice.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaChoice_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchemaChoice.get_Items
    open override func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaChoice_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    /**
    Gets the collection of the elements contained with the compositor (): , , , , or .

    */
    open override var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
} // XmlSchemaChoice


// type: System.Xml.Schema.XmlSchemaCollection
    /**
    Contains a cache of XML Schema definition language (XSD) and XML-Data Reduced (XDR) schemas. The  class is obsolete. Use  instead.

    */
public final class XmlSchemaCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable)
// docid: M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified . The  is used when loading schemas.

    - Parameter nametable: The  to use.
    */
    public init(nametable : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaCollection_ctor_0__1__XmlNameTable(&__thrown, nametable.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.String, System.String)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)
    /**
    Adds the schema located by the given URL into the schema collection.

    - Parameter ns: The namespace URI associated with the schema. For XML Schemas, this will typically be the .
    - Parameter uri: The URL that specifies the schema to load.
    - Returns: The  added to the schema collection;  if the schema being added is an XDR schema or if there are compilation errors in the schema.

    */
    public func Add(ns : Optional<dotnet.System.String>, uri : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchema__Add_0__2__String_String(&__thrown, self.get_handle(), ns?.get_handle() ?? nil, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.String, System.Xml.XmlReader)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)
    /**
    Adds the schema contained in the  to the schema collection.

    - Parameter ns: The namespace URI associated with the schema. For XML Schemas, this will typically be the .
    - Parameter reader: 
         containing the schema to add.
    - Returns: The  added to the schema collection;  if the schema being added is an XDR schema or if there are compilation errors in the schema.

    */
    public func Add(ns : Optional<dotnet.System.String>, reader : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchema__Add_0__2__String_XmlReader(&__thrown, self.get_handle(), ns?.get_handle() ?? nil, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.String, System.Xml.XmlReader, System.Xml.XmlResolver)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)
    /**
    Adds the schema contained in the  to the schema collection. The specified  is used to resolve any external resources.

    - Parameter ns: The namespace URI associated with the schema. For XML Schemas, this will typically be the .
    - Parameter reader: 
         containing the schema to add.
    - Parameter resolver: The  used to resolve namespaces referenced in  and  elements or  attribute (XDR schemas). If this is , external references are not resolved.
    - Returns: The  added to the schema collection;  if the schema being added is an XDR schema or if there are compilation errors in the schema.

    */
    public func Add(ns : Optional<dotnet.System.String>, reader : dotnet.System.Xml.XmlReader, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchema__Add_0__3__String_XmlReader_XmlResolver(&__thrown, self.get_handle(), ns?.get_handle() ?? nil, reader.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)
    /**
    Adds the  to the collection.

    - Parameter schema: The  to add to the collection.
    - Returns: The  object.

    */
    public func Add(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchema__Add_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.Xml.Schema.XmlSchema, System.Xml.XmlResolver)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)
    /**
    Adds the  to the collection. The specified  is used to resolve any external references.

    - Parameter schema: The  to add to the collection.
    - Parameter resolver: The  used to resolve namespaces referenced in  and  elements. If this is , external references are not resolved.
    - Returns: The  added to the schema collection.

    */
    public func Add(schema : dotnet.System.Xml.Schema.XmlSchema, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchema__Add_0__2__XmlSchema_XmlResolver(&__thrown, self.get_handle(), schema.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Add(System.Xml.Schema.XmlSchemaCollection)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)
    /**
    Adds all the namespaces defined in the given collection (including their associated schemas) to this collection.

    - Parameter schema: The  you want to add to this collection.
    */
    public func Add(schema : dotnet.System.Xml.Schema.XmlSchemaCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaCollection_void__Add_0__1__XmlSchemaCollection(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)
    /**
    Gets a value indicating whether a schema with the specified namespace is in the collection.

    - Parameter ns: The namespace URI associated with the schema. For XML Schemas, this will typically be the target namespace.
    - Returns: 
         if a schema with the specified namespace is in the collection; otherwise, .

    */
    public func Contains(ns : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)
    /**
    Gets a value indicating whether the  of the specified  is in the collection.

    - Parameter schema: The  object.
    - Returns: 
         if there is a schema in the collection with the same ; otherwise, .

    */
    public func Contains(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_bool__Contains_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Schema.XmlSchema[], System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
    /**
    Copies all the  objects from this collection into the given array starting at the given index.

    - Parameter array: The array to copy the objects to.
    - Parameter index: The index in  where copying will begin.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchema>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaCollection_void__CopyTo_0__2__XmlSchemaArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.Schema.XmlSchemaCollectionEnumerator GetEnumerator()
// docid: M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator
    /**
    Provides support for the "for each" style iteration over the collection of schemas.

    - Returns: An enumerator for iterating over all schemas in the current collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Xml.Schema.XmlSchemaCollectionEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchemaCollectionEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaCollectionEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.Schema.XmlSchemaCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.Schema.XmlSchemaCollection.get_NameTable
    public func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchema get_Item(System.String)
// docid: M:System.Xml.Schema.XmlSchemaCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(ns : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollection_XmlSchema__get_Item_0__1__String(&__thrown, self.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchemaCollection.add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    public func add_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaCollection_void__add_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try add_ValidationEventHandler(value: del_value);
    }
    // [IsSpecialName] void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchemaCollection.remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    public func remove_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaCollection_void__remove_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try remove_ValidationEventHandler(value: del_value);
    }
    /**
    Gets the number of namespaces defined in this collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the default  used by the  when loading new schemas.

    */
    public var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
} // XmlSchemaCollection


// type: System.Xml.Schema.XmlSchemaCollectionEnumerator
    /**
    Supports a simple iteration over a collection. This class cannot be inherited.

    */
public final class XmlSchemaCollectionEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaCollectionEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool MoveNext()
// docid: M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext
    /**
    Advances the enumerator to the next schema in the collection.

    - Returns: 
         if the move was successful;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollectionEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchema get_Current()
// docid: M:System.Xml.Schema.XmlSchemaCollectionEnumerator.get_Current
    public func get_Current() throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCollectionEnumerator_XmlSchema__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the current  in the collection.

    */
    public var Current : Optional<dotnet.System.Xml.Schema.XmlSchema> {
        get {
            return try! get_Current();
        }
    }
} // XmlSchemaCollectionEnumerator


// type: System.Xml.Schema.XmlSchemaCompilationSettings
    /**
    Provides schema compilation options for the  class This class cannot be inherited.

    */
public final class XmlSchemaCompilationSettings
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaCompilationSettings_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaCompilationSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_EnableUpaCheck()
// docid: M:System.Xml.Schema.XmlSchemaCompilationSettings.get_EnableUpaCheck
    public func get_EnableUpaCheck() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaCompilationSettings_bool__get_EnableUpaCheck_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableUpaCheck(bool)
// docid: M:System.Xml.Schema.XmlSchemaCompilationSettings.set_EnableUpaCheck(System.Boolean)
    public func set_EnableUpaCheck(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaCompilationSettings_void__set_EnableUpaCheck_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value indicating whether the  should check for Unique Particle Attribution (UPA) violations.

    */
    public var EnableUpaCheck : Bool {
        get {
            return try! get_EnableUpaCheck();
        }
        set(v) {
            return try! set_EnableUpaCheck(value: v);
        }
    }
} // XmlSchemaCompilationSettings


// type: System.Xml.Schema.XmlSchemaComplexContent
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class represents the complex content model for complex types. It contains extensions or restrictions on a complex type that has either only elements or mixed content.

    */
open class XmlSchemaComplexContent
    :
    dotnet.System.Xml.Schema.XmlSchemaContentModel
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaComplexContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaComplexContent.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaComplexContent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContent get_Content()
// docid: M:System.Xml.Schema.XmlSchemaComplexContent.get_Content
    open override func get_Content() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaContent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContent_XmlSchemaContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(System.Xml.Schema.XmlSchemaContent)
// docid: M:System.Xml.Schema.XmlSchemaComplexContent.set_Content(System.Xml.Schema.XmlSchemaContent)
    open override func set_Content(value : Optional<dotnet.System.Xml.Schema.XmlSchemaContent>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContent_void__set_Content_0__1__XmlSchemaContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsMixed()
// docid: M:System.Xml.Schema.XmlSchemaComplexContent.get_IsMixed
    open func get_IsMixed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContent_bool__get_IsMixed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsMixed(bool)
// docid: M:System.Xml.Schema.XmlSchemaComplexContent.set_IsMixed(System.Boolean)
    open func set_IsMixed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContent_void__set_IsMixed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the content.

    */
    open override var Content : Optional<dotnet.System.Xml.Schema.XmlSchemaContent> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
    /**
    Gets or sets information that determines if the type has a mixed content model.

    */
    open var IsMixed : Bool {
        get {
            return try! get_IsMixed();
        }
        set(v) {
            return try! set_IsMixed(value: v);
        }
    }
} // XmlSchemaComplexContent


// type: System.Xml.Schema.XmlSchemaComplexContentExtension
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with complex content model derived by extension. It extends the complex type by adding attributes or elements.

    */
open class XmlSchemaComplexContentExtension
    :
    dotnet.System.Xml.Schema.XmlSchemaContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaComplexContentExtension_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaComplexContentExtension_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.get_AnyAttribute
    open func get_AnyAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentExtension_XmlSchemaAnyAttribute__get_AnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
    open func set_AnyAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContentExtension_void__set_AnyAttribute_0__1__XmlSchemaAnyAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentExtension_XmlSchemaObjectCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_BaseTypeName()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.get_BaseTypeName
    open func get_BaseTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentExtension_XmlQualifiedName__get_BaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.set_BaseTypeName(System.Xml.XmlQualifiedName)
    open func set_BaseTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContentExtension_void__set_BaseTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaParticle get_Particle()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.get_Particle
    open func get_Particle() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentExtension_XmlSchemaParticle__get_Particle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaParticle(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Particle(System.Xml.Schema.XmlSchemaParticle)
// docid: M:System.Xml.Schema.XmlSchemaComplexContentExtension.set_Particle(System.Xml.Schema.XmlSchemaParticle)
    open func set_Particle(value : Optional<dotnet.System.Xml.Schema.XmlSchemaParticle>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContentExtension_void__set_Particle_0__1__XmlSchemaParticle(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  component of the complex content model.

    */
    open var AnyAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AnyAttribute();
        }
        set(v) {
            return try! set_AnyAttribute(value: v!);
        }
    }
    /**
    Gets the collection of attributes for the complex content. Contains  and  elements.

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the name of the complex type from which this type is derived by extension.

    */
    open var BaseTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_BaseTypeName();
        }
        set(v) {
            return try! set_BaseTypeName(value: v);
        }
    }
    /**
    Gets or sets one of the , , , or  classes.

    */
    open var Particle : Optional<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        get {
            return try! get_Particle();
        }
        set(v) {
            return try! set_Particle(value: v!);
        }
    }
} // XmlSchemaComplexContentExtension


// type: System.Xml.Schema.XmlSchemaComplexContentRestriction
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with a complex content model derived by restriction. It restricts the contents of the complex type to a subset of the inherited complex type.

    */
open class XmlSchemaComplexContentRestriction
    :
    dotnet.System.Xml.Schema.XmlSchemaContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaComplexContentRestriction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaComplexContentRestriction_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.get_AnyAttribute
    open func get_AnyAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentRestriction_XmlSchemaAnyAttribute__get_AnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
    open func set_AnyAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContentRestriction_void__set_AnyAttribute_0__1__XmlSchemaAnyAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentRestriction_XmlSchemaObjectCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_BaseTypeName()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.get_BaseTypeName
    open func get_BaseTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentRestriction_XmlQualifiedName__get_BaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.set_BaseTypeName(System.Xml.XmlQualifiedName)
    open func set_BaseTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContentRestriction_void__set_BaseTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaParticle get_Particle()
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.get_Particle
    open func get_Particle() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexContentRestriction_XmlSchemaParticle__get_Particle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaParticle(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Particle(System.Xml.Schema.XmlSchemaParticle)
// docid: M:System.Xml.Schema.XmlSchemaComplexContentRestriction.set_Particle(System.Xml.Schema.XmlSchemaParticle)
    open func set_Particle(value : Optional<dotnet.System.Xml.Schema.XmlSchemaParticle>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexContentRestriction_void__set_Particle_0__1__XmlSchemaParticle(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  component of the complex content model.

    */
    open var AnyAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AnyAttribute();
        }
        set(v) {
            return try! set_AnyAttribute(value: v!);
        }
    }
    /**
    Gets the collection of attributes for the complex type. Contains the  and  elements.

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the name of a complex type from which this type is derived by restriction.

    */
    open var BaseTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_BaseTypeName();
        }
        set(v) {
            return try! set_BaseTypeName(value: v);
        }
    }
    /**
    Gets or sets one of the , , , or  classes.

    */
    open var Particle : Optional<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        get {
            return try! get_Particle();
        }
        set(v) {
            return try! set_Particle(value: v!);
        }
    }
} // XmlSchemaComplexContentRestriction


// type: System.Xml.Schema.XmlSchemaComplexType
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a complex type that determines the set of attributes and content of an element.

    */
open class XmlSchemaComplexType
    :
    dotnet.System.Xml.Schema.XmlSchemaType
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaComplexType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaComplexType_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_AnyAttribute
    open func get_AnyAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaAnyAttribute__get_AnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
// docid: M:System.Xml.Schema.XmlSchemaComplexType.set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
    open func set_AnyAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexType_void__set_AnyAttribute_0__1__XmlSchemaAnyAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaObjectCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_AttributeUses()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_AttributeUses
    open func get_AttributeUses() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaObjectTable__get_AttributeUses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AttributeWildcard()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_AttributeWildcard
    open func get_AttributeWildcard() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaAnyAttribute__get_AttributeWildcard_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_Block()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_Block
    open func get_Block() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaDerivationMethod__get_Block_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_Block(System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchemaComplexType.set_Block(System.Xml.Schema.XmlSchemaDerivationMethod)
    open func set_Block(value : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexType_void__set_Block_0__1__XmlSchemaDerivationMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_BlockResolved()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_BlockResolved
    open func get_BlockResolved() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaDerivationMethod__get_BlockResolved_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContentModel get_ContentModel()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_ContentModel
    open func get_ContentModel() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaContentModel> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaContentModel__get_ContentModel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaContentModel(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentModel(System.Xml.Schema.XmlSchemaContentModel)
// docid: M:System.Xml.Schema.XmlSchemaComplexType.set_ContentModel(System.Xml.Schema.XmlSchemaContentModel)
    open func set_ContentModel(value : Optional<dotnet.System.Xml.Schema.XmlSchemaContentModel>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexType_void__set_ContentModel_0__1__XmlSchemaContentModel(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContentType get_ContentType()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_ContentType
    open func get_ContentType() throws -> dotnet.System.Xml.Schema.XmlSchemaContentType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaContentType__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaContentType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaParticle get_ContentTypeParticle()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_ContentTypeParticle
    open func get_ContentTypeParticle() throws -> dotnet.System.Xml.Schema.XmlSchemaParticle {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaParticle__get_ContentTypeParticle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaParticle(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsAbstract()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_IsAbstract
    open func get_IsAbstract() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_bool__get_IsAbstract_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsAbstract(bool)
// docid: M:System.Xml.Schema.XmlSchemaComplexType.set_IsAbstract(System.Boolean)
    open func set_IsAbstract(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexType_void__set_IsAbstract_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsMixed()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_IsMixed
    open override func get_IsMixed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_bool__get_IsMixed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsMixed(bool)
// docid: M:System.Xml.Schema.XmlSchemaComplexType.set_IsMixed(System.Boolean)
    open override func set_IsMixed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexType_void__set_IsMixed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaParticle get_Particle()
// docid: M:System.Xml.Schema.XmlSchemaComplexType.get_Particle
    open func get_Particle() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaComplexType_XmlSchemaParticle__get_Particle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaParticle(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Particle(System.Xml.Schema.XmlSchemaParticle)
// docid: M:System.Xml.Schema.XmlSchemaComplexType.set_Particle(System.Xml.Schema.XmlSchemaParticle)
    open func set_Particle(value : Optional<dotnet.System.Xml.Schema.XmlSchemaParticle>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaComplexType_void__set_Particle_0__1__XmlSchemaParticle(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the value for the  component of the complex type.

    */
    open var AnyAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AnyAttribute();
        }
        set(v) {
            return try! set_AnyAttribute(value: v!);
        }
    }
    /**
    Gets the collection of all the complied attributes of this complex type and its base types.

    */
    open var AttributeUses : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_AttributeUses();
        }
    }
    /**
    Gets the post-compilation value for  for this complex type and its base type(s).

    */
    open var AttributeWildcard : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AttributeWildcard();
        }
    }
    /**
    Gets the collection of attributes for the complex type.

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the  attribute.

    */
    open var Block : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_Block();
        }
        set(v) {
            return try! set_Block(value: v);
        }
    }
    /**
    Gets the value after the type has been compiled to the post-schema-validation information set (infoset). This value indicates how the type is enforced when  is used in the instance document.

    */
    open var BlockResolved : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_BlockResolved();
        }
    }
    /**
    Gets or sets the post-compilation  of this complex type.

    */
    open var ContentModel : Optional<dotnet.System.Xml.Schema.XmlSchemaContentModel> {
        get {
            return try! get_ContentModel();
        }
        set(v) {
            return try! set_ContentModel(value: v!);
        }
    }
    /**
    Gets the content model of the complex type which holds the post-compilation value.

    */
    open var ContentType : dotnet.System.Xml.Schema.XmlSchemaContentType {
        get {
            return try! get_ContentType();
        }
    }
    /**
    Gets the particle that holds the post-compilation value of the  particle.

    */
    open var ContentTypeParticle : dotnet.System.Xml.Schema.XmlSchemaParticle {
        get {
            return try! get_ContentTypeParticle();
        }
    }
    /**
    Gets or sets the information that determines if the  element can be used in the instance document.

    */
    open var IsAbstract : Bool {
        get {
            return try! get_IsAbstract();
        }
        set(v) {
            return try! set_IsAbstract(value: v);
        }
    }
    /**
    Gets or sets information that determines if the complex type has a mixed content model (markup within the content).

    */
    open override var IsMixed : Bool {
        get {
            return try! get_IsMixed();
        }
        set(v) {
            return try! set_IsMixed(value: v);
        }
    }
    /**
    Gets or sets the compositor type as one of the , , , or  classes.

    */
    open var Particle : Optional<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        get {
            return try! get_Particle();
        }
        set(v) {
            return try! set_Particle(value: v!);
        }
    }
} // XmlSchemaComplexType


// type: System.Xml.Schema.XmlSchemaContent
    /**
    An abstract class for schema content.

    */
open class XmlSchemaContent
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // XmlSchemaContent


// type: System.Xml.Schema.XmlSchemaContentModel
    /**
    Specifies the order and structure of the child elements of a type.

    */
open class XmlSchemaContentModel
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaContentModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContent get_Content()
// docid: M:System.Xml.Schema.XmlSchemaContentModel.get_Content
    open func get_Content() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaContent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaContentModel_XmlSchemaContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(System.Xml.Schema.XmlSchemaContent)
// docid: M:System.Xml.Schema.XmlSchemaContentModel.set_Content(System.Xml.Schema.XmlSchemaContent)
    open func set_Content(value : Optional<dotnet.System.Xml.Schema.XmlSchemaContent>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaContentModel_void__set_Content_0__1__XmlSchemaContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the content of the type.

    */
    open var Content : Optional<dotnet.System.Xml.Schema.XmlSchemaContent> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
} // XmlSchemaContentModel


// type: System.Xml.Schema.XmlSchemaContentProcessing
    /**
    Provides information about the validation mode of  and  element replacements.

    */
public struct XmlSchemaContentProcessing : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaContentProcessing_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaContentProcessing None
    /**
    Document items are not validated.

    */
    public static var None : dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentProcessing(val: System_Xml_Schema_XmlSchemaContentProcessing_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaContentProcessing Skip
    /**
    Document items must consist of well-formed XML and are not validated by the schema.
        
The XML processor attempts to notify the client through a validation event handler with  =  that no validation took place for the given item. If a validation event handler has not been set up, no information is returned when the warning is produced.

    */
    public static var Skip : dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentProcessing(val: System_Xml_Schema_XmlSchemaContentProcessing_get_Skip());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaContentProcessing Lax
    /**
    If the associated schema is found, the document items will be validated. No errors will be thrown otherwise.
        
If the item is not validated, the XML processor attempts to notify the client through a validation event handler with  = . If a validation event handler has not been set up, no information is returned when the warning is produced.

    */
    public static var Lax : dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentProcessing(val: System_Xml_Schema_XmlSchemaContentProcessing_get_Lax());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaContentProcessing Strict
    /**
    The schema processor must find a schema associated with the indicated namespace to validate the document items.
        
If the processor cannot find a schema or if the items are not valid, the XML processor attempts to notify the client through a validation event handler with  = . If a validation error occurs and a validation event handler is not provided, an exception is thrown.

    */
    public static var Strict : dotnet.System.Xml.Schema.XmlSchemaContentProcessing {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentProcessing(val: System_Xml_Schema_XmlSchemaContentProcessing_get_Strict());
            return __return;
        }
    }
} // XmlSchemaContentProcessing


// type: System.Xml.Schema.XmlSchemaContentType
    /**
    Enumerations for the content model of the complex type. This represents the content in the post-schema-validation information set (infoset).

    */
public struct XmlSchemaContentType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaContentType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaContentType TextOnly
    /**
    Text-only content.

    */
    public static var TextOnly : dotnet.System.Xml.Schema.XmlSchemaContentType {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentType(val: System_Xml_Schema_XmlSchemaContentType_get_TextOnly());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaContentType Empty
    /**
    Empty content.

    */
    public static var Empty : dotnet.System.Xml.Schema.XmlSchemaContentType {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentType(val: System_Xml_Schema_XmlSchemaContentType_get_Empty());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaContentType ElementOnly
    /**
    Element-only content.

    */
    public static var ElementOnly : dotnet.System.Xml.Schema.XmlSchemaContentType {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentType(val: System_Xml_Schema_XmlSchemaContentType_get_ElementOnly());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaContentType Mixed
    /**
    Mixed content.

    */
    public static var Mixed : dotnet.System.Xml.Schema.XmlSchemaContentType {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaContentType(val: System_Xml_Schema_XmlSchemaContentType_get_Mixed());
            return __return;
        }
    }
} // XmlSchemaContentType


// type: System.Xml.Schema.XmlSchemaDatatype
    /**
    The  class is an abstract class for mapping XML Schema definition language (XSD) types to Common Language Runtime (CLR) types.

    */
open class XmlSchemaDatatype
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaDatatype_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object ChangeType(System.Object, System.Type)
// docid: M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)
    /**
    Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the , to the CLR type specified.

    - Parameter value: The input value to convert to the specified type.
    - Parameter targetType: The target type to convert the input value to.
    - Returns: The converted input value.

    */
    open func ChangeType(value : dotnet.System.Object, targetType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_Object__ChangeType_0__2__Object_Type(&__thrown, self.get_handle(), value.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object ChangeType(System.Object, System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the , to the CLR type specified using the  if the  represents the xs:QName type or a type derived from it.

    - Parameter value: The input value to convert to the specified type.
    - Parameter targetType: The target type to convert the input value to.
    - Parameter namespaceResolver: An  used for resolving namespace prefixes. This is only of use if the  represents the xs:QName type or a type derived from it.
    - Returns: The converted input value.

    */
    open func ChangeType(value : dotnet.System.Object, targetType : dotnet.System.Type_, namespaceResolver : dotnet.System.Xml.IXmlNamespaceResolver) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_Object__ChangeType_0__3__Object_Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), value.get_handle(), targetType.get_handle(), namespaceResolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)
// docid: M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)
    /**
    The  method always returns .

    - Parameter datatype: The .
    - Returns: Always returns .

    */
    open func IsDerivedFrom(datatype : dotnet.System.Xml.Schema.XmlSchemaDatatype) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_bool__IsDerivedFrom_0__1__XmlSchemaDatatype(&__thrown, self.get_handle(), datatype.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ParseValue(System.String, System.Xml.XmlNameTable, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)
    /**
    When overridden in a derived class, validates the  specified against a built-in or user-defined simple type.

    - Parameter s: The  to validate against the simple type.
    - Parameter nameTable: The  to use for atomization while parsing the  if this  object represents the xs:NCName type.
    - Parameter nsmgr: The  object to use while parsing the  if this  object represents the xs:QName type.
    - Returns: An  that can be cast safely to the type returned by the  property.

    */
    open func ParseValue(s : dotnet.System.String, nameTable : Optional<dotnet.System.Xml.XmlNameTable>, nsmgr : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_Object__ParseValue_0__3__String_XmlNameTable_IXmlNamespaceResolver(&__thrown, self.get_handle(), s.get_handle(), nameTable?.get_handle() ?? nil, nsmgr?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlTokenizedType get_TokenizedType()
// docid: M:System.Xml.Schema.XmlSchemaDatatype.get_TokenizedType
    open func get_TokenizedType() throws -> dotnet.System.Xml.XmlTokenizedType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_XmlTokenizedType__get_TokenizedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlTokenizedType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlTypeCode get_TypeCode()
// docid: M:System.Xml.Schema.XmlSchemaDatatype.get_TypeCode
    open func get_TypeCode() throws -> dotnet.System.Xml.Schema.XmlTypeCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_XmlTypeCode__get_TypeCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlTypeCode(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_ValueType()
// docid: M:System.Xml.Schema.XmlSchemaDatatype.get_ValueType
    open func get_ValueType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_Type__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDatatypeVariety get_Variety()
// docid: M:System.Xml.Schema.XmlSchemaDatatype.get_Variety
    open func get_Variety() throws -> dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDatatype_XmlSchemaDatatypeVariety__get_Variety_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety(val: __return);
        }
    }
    /**
    When overridden in a derived class, gets the type for the  as specified in the World Wide Web Consortium (W3C) XML 1.0 specification.

    */
    open var TokenizedType : dotnet.System.Xml.XmlTokenizedType {
        get {
            return try! get_TokenizedType();
        }
    }
    /**
    Gets the  value for the simple type.

    */
    open var TypeCode : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
            return try! get_TypeCode();
        }
    }
    /**
    When overridden in a derived class, gets the Common Language Runtime (CLR) type of the item.

    */
    open var ValueType : dotnet.System.Type_ {
        get {
            return try! get_ValueType();
        }
    }
    /**
    Gets the  value for the simple type.

    */
    open var Variety : dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety {
        get {
            return try! get_Variety();
        }
    }
} // XmlSchemaDatatype


// type: System.Xml.Schema.XmlSchemaDatatypeVariety
    /**
    Specifies the W3C XML schema data type variety of the type.

    */
public struct XmlSchemaDatatypeVariety : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaDatatypeVariety_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaDatatypeVariety Atomic
    /**
    A W3C XML schema atomic type.

    */
    public static var Atomic : dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety(val: System_Xml_Schema_XmlSchemaDatatypeVariety_get_Atomic());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDatatypeVariety List
    /**
    A W3C XML schema list type.

    */
    public static var List : dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety(val: System_Xml_Schema_XmlSchemaDatatypeVariety_get_List());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDatatypeVariety Union
    /**
    A W3C XML schema union type.

    */
    public static var Union : dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDatatypeVariety(val: System_Xml_Schema_XmlSchemaDatatypeVariety_get_Union());
            return __return;
        }
    }
} // XmlSchemaDatatypeVariety


// type: System.Xml.Schema.XmlSchemaDerivationMethod
    /**
    Provides different methods for preventing derivation.

    */
public struct XmlSchemaDerivationMethod : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaDerivationMethod_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod Empty
    /**
    Override default derivation method to allow any derivation.

    */
    public static var Empty : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_Empty());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod Substitution
    /**
    Refers to derivations by .

    */
    public static var Substitution : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_Substitution());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod Extension
    /**
    Refers to derivations by .

    */
    public static var Extension : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_Extension());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod Restriction
    /**
    Refers to derivations by .

    */
    public static var Restriction : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_Restriction());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod List
    /**
    Refers to derivations by .

    */
    public static var List : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_List());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod Union
    /**
    Refers to derivations by .

    */
    public static var Union : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_Union());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod All
    /**
    
        . Refers to all derivation methods.

    */
    public static var All : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_All());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaDerivationMethod None
    /**
    Accepts the default derivation method.

    */
    public static var None : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: System_Xml_Schema_XmlSchemaDerivationMethod_get_None());
            return __return;
        }
    }
} // XmlSchemaDerivationMethod


// type: System.Xml.Schema.XmlSchemaDocumentation
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies information to be read or used by humans within an .

    */
open class XmlSchemaDocumentation
    :
    dotnet.System.Xml.Schema.XmlSchemaObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaDocumentation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaDocumentation_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Language()
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.get_Language
    open func get_Language() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDocumentation_String__get_Language_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Language(System.String)
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.set_Language(System.String)
    open func set_Language(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaDocumentation_void__set_Language_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNode[] get_Markup()
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.get_Markup
    open func get_Markup() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDocumentation_XmlNodeArray__get_Markup_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlNode>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Markup(System.Xml.XmlNode[])
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.set_Markup(System.Xml.XmlNode[])
    open func set_Markup(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaDocumentation_void__set_Markup_0__1__XmlNodeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Source()
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.get_Source
    open func get_Source() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaDocumentation_String__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Source(System.String)
// docid: M:System.Xml.Schema.XmlSchemaDocumentation.set_Source(System.String)
    open func set_Source(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaDocumentation_void__set_Source_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  attribute. This serves as an indicator of the language used in the contents.

    */
    open var Language : Optional<dotnet.System.String> {
        get {
            return try! get_Language();
        }
        set(v) {
            return try! set_Language(value: v!);
        }
    }
    /**
    Gets or sets an array of  that represents the documentation child nodes.

    */
    open var Markup : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>> {
        get {
            return try! get_Markup();
        }
        set(v) {
            return try! set_Markup(value: v!);
        }
    }
    /**
    Gets or sets the Uniform Resource Identifier (URI) source of the information.

    */
    open var Source : Optional<dotnet.System.String> {
        get {
            return try! get_Source();
        }
        set(v) {
            return try! set_Source(value: v!);
        }
    }
} // XmlSchemaDocumentation


// type: System.Xml.Schema.XmlSchemaElement
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is the base class for all particle types and is used to describe an element in an XML document.

    */
open class XmlSchemaElement
    :
    dotnet.System.Xml.Schema.XmlSchemaParticle
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaElement_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaElement.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaElement_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_Block()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_Block
    open func get_Block() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaDerivationMethod__get_Block_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_Block(System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_Block(System.Xml.Schema.XmlSchemaDerivationMethod)
    open func set_Block(value : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_Block_0__1__XmlSchemaDerivationMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_BlockResolved()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_BlockResolved
    open func get_BlockResolved() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaDerivationMethod__get_BlockResolved_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Constraints()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_Constraints
    open func get_Constraints() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaObjectCollection__get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DefaultValue()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_DefaultValue
    open func get_DefaultValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_String__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultValue(System.String)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_DefaultValue(System.String)
    open func set_DefaultValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_DefaultValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_ElementSchemaType()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_ElementSchemaType
    open func get_ElementSchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaType__get_ElementSchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ElementType()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_ElementType
    open func get_ElementType() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_Object__get_ElementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_Final()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_Final
    open func get_Final() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaDerivationMethod__get_Final_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_Final(System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_Final(System.Xml.Schema.XmlSchemaDerivationMethod)
    open func set_Final(value : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_Final_0__1__XmlSchemaDerivationMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_FinalResolved()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_FinalResolved
    open func get_FinalResolved() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaDerivationMethod__get_FinalResolved_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] System.String get_FixedValue()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_FixedValue
    open func get_FixedValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_String__get_FixedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FixedValue(System.String)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_FixedValue(System.String)
    open func set_FixedValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_FixedValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_Form()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_Form
    open func get_Form() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaForm__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_Form(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_Form(System.Xml.Schema.XmlSchemaForm)
    open func set_Form(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_Form_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsAbstract()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_IsAbstract
    open func get_IsAbstract() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_bool__get_IsAbstract_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsAbstract(bool)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_IsAbstract(System.Boolean)
    open func set_IsAbstract(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_IsAbstract_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNillable()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_IsNillable
    open func get_IsNillable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_bool__get_IsNillable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNillable(bool)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_IsNillable(System.Boolean)
    open func set_IsNillable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_IsNillable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_QualifiedName()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_QualifiedName
    open func get_QualifiedName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlQualifiedName__get_QualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_RefName()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_RefName
    open func get_RefName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlQualifiedName__get_RefName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RefName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_RefName(System.Xml.XmlQualifiedName)
    open func set_RefName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_RefName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_SchemaType()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_SchemaType
    open func get_SchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlSchemaType__get_SchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SchemaType(System.Xml.Schema.XmlSchemaType)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_SchemaType(System.Xml.Schema.XmlSchemaType)
    open func set_SchemaType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_SchemaType_0__1__XmlSchemaType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_SchemaTypeName()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_SchemaTypeName
    open func get_SchemaTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlQualifiedName__get_SchemaTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SchemaTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_SchemaTypeName(System.Xml.XmlQualifiedName)
    open func set_SchemaTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_SchemaTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_SubstitutionGroup()
// docid: M:System.Xml.Schema.XmlSchemaElement.get_SubstitutionGroup
    open func get_SubstitutionGroup() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaElement_XmlQualifiedName__get_SubstitutionGroup_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SubstitutionGroup(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaElement.set_SubstitutionGroup(System.Xml.XmlQualifiedName)
    open func set_SubstitutionGroup(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaElement_void__set_SubstitutionGroup_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a  derivation.

    */
    open var Block : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_Block();
        }
        set(v) {
            return try! set_Block(value: v);
        }
    }
    /**
    Gets the post-compilation value of the  property.

    */
    open var BlockResolved : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_BlockResolved();
        }
    }
    /**
    Gets the collection of constraints on the element.

    */
    open var Constraints : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Constraints();
        }
    }
    /**
    Gets or sets the default value of the element if its content is a simple type or content of the element is .

    */
    open var DefaultValue : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultValue();
        }
        set(v) {
            return try! set_DefaultValue(value: v!);
        }
    }
    /**
    Gets an  object representing the type of the element based on the  or  values of the element.

    */
    open var ElementSchemaType : Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        get {
            return try! get_ElementSchemaType();
        }
    }
    /**
    Gets a common language runtime (CLR) object based on the  or  of the element, which holds the post-compilation value of the  property.

    */
    open var ElementType : Optional<dotnet.System.Object> {
        get {
            return try! get_ElementType();
        }
    }
    /**
    Gets or sets the  property to indicate that no further derivations are allowed.

    */
    open var Final : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_Final();
        }
        set(v) {
            return try! set_Final(value: v);
        }
    }
    /**
    Gets the post-compilation value of the  property.

    */
    open var FinalResolved : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_FinalResolved();
        }
    }
    /**
    Gets or sets the fixed value.

    */
    open var FixedValue : Optional<dotnet.System.String> {
        get {
            return try! get_FixedValue();
        }
        set(v) {
            return try! set_FixedValue(value: v!);
        }
    }
    /**
    Gets or sets the form for the element.

    */
    open var Form : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    Gets or sets information to indicate if the element can be used in an instance document.

    */
    open var IsAbstract : Bool {
        get {
            return try! get_IsAbstract();
        }
        set(v) {
            return try! set_IsAbstract(value: v);
        }
    }
    /**
    Gets or sets information that indicates if  can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.

    */
    open var IsNillable : Bool {
        get {
            return try! get_IsNillable();
        }
        set(v) {
            return try! set_IsNillable(value: v);
        }
    }
    /**
    Gets or sets the name of the element.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets the actual qualified name for the given element.

    */
    open var QualifiedName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_QualifiedName();
        }
    }
    /**
    Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).

    */
    open var RefName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_RefName();
        }
        set(v) {
            return try! set_RefName(value: v);
        }
    }
    /**
    Gets or sets the type of the element. This can either be a complex type or a simple type.

    */
    open var SchemaType : Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        get {
            return try! get_SchemaType();
        }
        set(v) {
            return try! set_SchemaType(value: v!);
        }
    }
    /**
    Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.

    */
    open var SchemaTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_SchemaTypeName();
        }
        set(v) {
            return try! set_SchemaTypeName(value: v);
        }
    }
    /**
    Gets or sets the name of an element that is being substituted by this element.

    */
    open var SubstitutionGroup : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_SubstitutionGroup();
        }
        set(v) {
            return try! set_SubstitutionGroup(value: v);
        }
    }
} // XmlSchemaElement


// type: System.Xml.Schema.XmlSchemaEnumerationFacet
    /**
    Represents the  facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies a list of valid values for a simpleType element. Declaration is contained within a  declaration.

    */
open class XmlSchemaEnumerationFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaEnumerationFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaEnumerationFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaEnumerationFacet


// type: System.Xml.Schema.XmlSchemaException
    /**
    Returns detailed information about the schema exception.

    */
open class XmlSchemaException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the exception message specified.

    - Parameter message: A  description of the error condition.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the exception message and original  object that caused this exception specified.

    - Parameter message: A  description of the error condition.
    - Parameter innerException: The original  object that caused this exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Int32, System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the exception message specified, and the original  object, line number, and line position of the XML that cause this exception specified.

    - Parameter message: A  description of the error condition.
    - Parameter innerException: The original  object that caused this exception.
    - Parameter lineNumber: The line number of the XML that caused this exception.
    - Parameter linePosition: The line position of the XML that caused this exception.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>, lineNumber : Swift.Int32, linePosition : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaException_ctor_0__4__String_Exception_i32_i32(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil, lineNumber, linePosition);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Streams all the  properties into the  class for the given .

    - Parameter info: The .
    - Parameter context: The  information.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.Schema.XmlSchemaException.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaException_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.Schema.XmlSchemaException.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaException_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Xml.Schema.XmlSchemaException.get_Message
    open override func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaException_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObject get_SourceSchemaObject()
// docid: M:System.Xml.Schema.XmlSchemaException.get_SourceSchemaObject
    open func get_SourceSchemaObject() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaObject> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaException_XmlSchemaObject__get_SourceSchemaObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaObject(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SourceUri()
// docid: M:System.Xml.Schema.XmlSchemaException.get_SourceUri
    open func get_SourceUri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaException_String__get_SourceUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the line number indicating where the error occurred.

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the line position indicating where the error occurred.

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the description of the error condition of this exception.

    */
    open override var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
    /**
    The  that produced the .

    */
    open var SourceSchemaObject : Optional<dotnet.System.Xml.Schema.XmlSchemaObject> {
        get {
            return try! get_SourceSchemaObject();
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) location of the schema that caused the exception.

    */
    open var SourceUri : Optional<dotnet.System.String> {
        get {
            return try! get_SourceUri();
        }
    }
} // XmlSchemaException


// type: System.Xml.Schema.XmlSchemaExternal
    /**
    An abstract class. Provides information about the included schema.

    */
open class XmlSchemaExternal
    :
    dotnet.System.Xml.Schema.XmlSchemaObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaExternal_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Xml.Schema.XmlSchemaExternal.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaExternal_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Xml.Schema.XmlSchemaExternal.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaExternal_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchema get_Schema()
// docid: M:System.Xml.Schema.XmlSchemaExternal.get_Schema
    open func get_Schema() throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaExternal_XmlSchema__get_Schema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Schema(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaExternal.set_Schema(System.Xml.Schema.XmlSchema)
    open func set_Schema(value : Optional<dotnet.System.Xml.Schema.XmlSchema>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaExternal_void__set_Schema_0__1__XmlSchema(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SchemaLocation()
// docid: M:System.Xml.Schema.XmlSchemaExternal.get_SchemaLocation
    open func get_SchemaLocation() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaExternal_String__get_SchemaLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SchemaLocation(System.String)
// docid: M:System.Xml.Schema.XmlSchemaExternal.set_SchemaLocation(System.String)
    open func set_SchemaLocation(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaExternal_void__set_SchemaLocation_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlAttribute[] get_UnhandledAttributes()
// docid: M:System.Xml.Schema.XmlSchemaExternal.get_UnhandledAttributes
    open func get_UnhandledAttributes() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaExternal_XmlAttributeArray__get_UnhandledAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UnhandledAttributes(System.Xml.XmlAttribute[])
// docid: M:System.Xml.Schema.XmlSchemaExternal.set_UnhandledAttributes(System.Xml.XmlAttribute[])
    open func set_UnhandledAttributes(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaExternal_void__set_UnhandledAttributes_0__1__XmlAttributeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the string id.

    */
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    /**
    Gets or sets the  for the referenced schema.

    */
    open var Schema : Optional<dotnet.System.Xml.Schema.XmlSchema> {
        get {
            return try! get_Schema();
        }
        set(v) {
            return try! set_Schema(value: v!);
        }
    }
    /**
    Gets or sets the Uniform Resource Identifier (URI) location for the schema, which tells the schema processor where the schema physically resides.

    */
    open var SchemaLocation : Optional<dotnet.System.String> {
        get {
            return try! get_SchemaLocation();
        }
        set(v) {
            return try! set_SchemaLocation(value: v!);
        }
    }
    /**
    Gets or sets the qualified attributes, which do not belong to the schema target namespace.

    */
    open var UnhandledAttributes : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlAttribute>> {
        get {
            return try! get_UnhandledAttributes();
        }
        set(v) {
            return try! set_UnhandledAttributes(value: v!);
        }
    }
} // XmlSchemaExternal


// type: System.Xml.Schema.XmlSchemaFacet
    /**
    Abstract class for all facets that are used when simple types are derived by restriction.

    */
open class XmlSchemaFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsFixed()
// docid: M:System.Xml.Schema.XmlSchemaFacet.get_IsFixed
    open func get_IsFixed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaFacet_bool__get_IsFixed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsFixed(bool)
// docid: M:System.Xml.Schema.XmlSchemaFacet.set_IsFixed(System.Boolean)
    open func set_IsFixed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaFacet_void__set_IsFixed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.Schema.XmlSchemaFacet.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaFacet_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.Schema.XmlSchemaFacet.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaFacet_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets information that indicates that this facet is fixed.

    */
    open var IsFixed : Bool {
        get {
            return try! get_IsFixed();
        }
        set(v) {
            return try! set_IsFixed(value: v);
        }
    }
    /**
    Gets or sets the  attribute of the facet.

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // XmlSchemaFacet


// type: System.Xml.Schema.XmlSchemaForm
    /**
    Indicates if attributes or elements need to be qualified with a namespace prefix.

    */
public struct XmlSchemaForm : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaForm_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaForm None
    /**
    Element and attribute form is not specified in the schema.

    */
    public static var None : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaForm(val: System_Xml_Schema_XmlSchemaForm_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaForm Qualified
    /**
    Elements and attributes must be qualified with a namespace prefix.

    */
    public static var Qualified : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaForm(val: System_Xml_Schema_XmlSchemaForm_get_Qualified());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaForm Unqualified
    /**
    Elements and attributes are not required to be qualified with a namespace prefix.

    */
    public static var Unqualified : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaForm(val: System_Xml_Schema_XmlSchemaForm_get_Unqualified());
            return __return;
        }
    }
} // XmlSchemaForm


// type: System.Xml.Schema.XmlSchemaFractionDigitsFacet
    /**
    Specifies a restriction on the number of digits that can be entered for the fraction value of a simpleType element. The value of fractionDigits must be a positive integer. Represents the World Wide Web Consortium (W3C)  facet.

    */
open class XmlSchemaFractionDigitsFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaNumericFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaFractionDigitsFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaFractionDigitsFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaFractionDigitsFacet


// type: System.Xml.Schema.XmlSchemaGroup
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines groups at the  level that are referenced from the complex types. It groups a set of element declarations so that they can be incorporated as a group into complex type definitions.

    */
open class XmlSchemaGroup
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaGroup_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaGroup.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaGroup_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaGroup.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaGroup_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaGroup.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaGroup_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaGroupBase get_Particle()
// docid: M:System.Xml.Schema.XmlSchemaGroup.get_Particle
    open func get_Particle() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaGroupBase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaGroup_XmlSchemaGroupBase__get_Particle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaGroupBase(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Particle(System.Xml.Schema.XmlSchemaGroupBase)
// docid: M:System.Xml.Schema.XmlSchemaGroup.set_Particle(System.Xml.Schema.XmlSchemaGroupBase)
    open func set_Particle(value : Optional<dotnet.System.Xml.Schema.XmlSchemaGroupBase>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaGroup_void__set_Particle_0__1__XmlSchemaGroupBase(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_QualifiedName()
// docid: M:System.Xml.Schema.XmlSchemaGroup.get_QualifiedName
    open func get_QualifiedName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaGroup_XmlQualifiedName__get_QualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    /**
    Gets or sets the name of the schema group.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets one of the , , or  classes.

    */
    open var Particle : Optional<dotnet.System.Xml.Schema.XmlSchemaGroupBase> {
        get {
            return try! get_Particle();
        }
        set(v) {
            return try! set_Particle(value: v!);
        }
    }
    /**
    Gets the qualified name of the schema group.

    */
    open var QualifiedName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_QualifiedName();
        }
    }
} // XmlSchemaGroup


// type: System.Xml.Schema.XmlSchemaGroupBase
    /**
    An abstract class for , , or .

    */
open class XmlSchemaGroupBase
    :
    dotnet.System.Xml.Schema.XmlSchemaParticle
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaGroupBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchemaGroupBase.get_Items
    open func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaGroupBase_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    /**
    This collection is used to add new elements to the compositor.

    */
    open var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
} // XmlSchemaGroupBase


// type: System.Xml.Schema.XmlSchemaGroupRef
    /**
    Represents the  element with  attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). This class is used within complex types that reference a  defined at the  level.

    */
open class XmlSchemaGroupRef
    :
    dotnet.System.Xml.Schema.XmlSchemaParticle
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaGroupRef_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaGroupRef.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaGroupRef_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaGroupBase get_Particle()
// docid: M:System.Xml.Schema.XmlSchemaGroupRef.get_Particle
    open func get_Particle() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaGroupBase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaGroupRef_XmlSchemaGroupBase__get_Particle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaGroupBase(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_RefName()
// docid: M:System.Xml.Schema.XmlSchemaGroupRef.get_RefName
    open func get_RefName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaGroupRef_XmlQualifiedName__get_RefName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RefName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaGroupRef.set_RefName(System.Xml.XmlQualifiedName)
    open func set_RefName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaGroupRef_void__set_RefName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets one of the , , or  classes, which holds the post-compilation value of the  property.

    */
    open var Particle : Optional<dotnet.System.Xml.Schema.XmlSchemaGroupBase> {
        get {
            return try! get_Particle();
        }
    }
    /**
    Gets or sets the name of a group defined in this schema (or another schema indicated by the specified namespace).

    */
    open var RefName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_RefName();
        }
        set(v) {
            return try! set_RefName(value: v);
        }
    }
} // XmlSchemaGroupRef


// type: System.Xml.Schema.XmlSchemaIdentityConstraint
    /**
    Class for the identity constraints: , , and  elements.

    */
open class XmlSchemaIdentityConstraint
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaIdentityConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaIdentityConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Fields()
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.get_Fields
    open func get_Fields() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaIdentityConstraint_XmlSchemaObjectCollection__get_Fields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaIdentityConstraint_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaIdentityConstraint_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_QualifiedName()
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.get_QualifiedName
    open func get_QualifiedName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaIdentityConstraint_XmlQualifiedName__get_QualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaXPath get_Selector()
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.get_Selector
    open func get_Selector() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaXPath> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaIdentityConstraint_XmlSchemaXPath__get_Selector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaXPath(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Selector(System.Xml.Schema.XmlSchemaXPath)
// docid: M:System.Xml.Schema.XmlSchemaIdentityConstraint.set_Selector(System.Xml.Schema.XmlSchemaXPath)
    open func set_Selector(value : Optional<dotnet.System.Xml.Schema.XmlSchemaXPath>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaIdentityConstraint_void__set_Selector_0__1__XmlSchemaXPath(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the collection of fields that apply as children for the XML Path Language (XPath) expression selector.

    */
    open var Fields : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Fields();
        }
    }
    /**
    Gets or sets the name of the identity constraint.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets the qualified name of the identity constraint, which holds the post-compilation value of the  property.

    */
    open var QualifiedName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_QualifiedName();
        }
    }
    /**
    Gets or sets the XPath expression  element.

    */
    open var Selector : Optional<dotnet.System.Xml.Schema.XmlSchemaXPath> {
        get {
            return try! get_Selector();
        }
        set(v) {
            return try! set_Selector(value: v!);
        }
    }
} // XmlSchemaIdentityConstraint


// type: System.Xml.Schema.XmlSchemaImport
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to import schema components from other schemas.

    */
open class XmlSchemaImport
    :
    dotnet.System.Xml.Schema.XmlSchemaExternal
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaImport_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaImport.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaImport_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnnotation get_Annotation()
// docid: M:System.Xml.Schema.XmlSchemaImport.get_Annotation
    open func get_Annotation() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaImport_XmlSchemaAnnotation__get_Annotation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnnotation(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Annotation(System.Xml.Schema.XmlSchemaAnnotation)
// docid: M:System.Xml.Schema.XmlSchemaImport.set_Annotation(System.Xml.Schema.XmlSchemaAnnotation)
    open func set_Annotation(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaImport_void__set_Annotation_0__1__XmlSchemaAnnotation(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Schema.XmlSchemaImport.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaImport_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Schema.XmlSchemaImport.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaImport_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  property.

    */
    open var Annotation : Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation> {
        get {
            return try! get_Annotation();
        }
        set(v) {
            return try! set_Annotation(value: v!);
        }
    }
    /**
    Gets or sets the target namespace for the imported schema as a Uniform Resource Identifier (URI) reference.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
} // XmlSchemaImport


// type: System.Xml.Schema.XmlSchemaInclude
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to include declarations and definitions from an external schema. The included declarations and definitions are then available for processing in the containing schema.

    */
open class XmlSchemaInclude
    :
    dotnet.System.Xml.Schema.XmlSchemaExternal
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaInclude_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaInclude.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInclude_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnnotation get_Annotation()
// docid: M:System.Xml.Schema.XmlSchemaInclude.get_Annotation
    open func get_Annotation() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInclude_XmlSchemaAnnotation__get_Annotation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnnotation(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Annotation(System.Xml.Schema.XmlSchemaAnnotation)
// docid: M:System.Xml.Schema.XmlSchemaInclude.set_Annotation(System.Xml.Schema.XmlSchemaAnnotation)
    open func set_Annotation(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInclude_void__set_Annotation_0__1__XmlSchemaAnnotation(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  property.

    */
    open var Annotation : Optional<dotnet.System.Xml.Schema.XmlSchemaAnnotation> {
        get {
            return try! get_Annotation();
        }
        set(v) {
            return try! set_Annotation(value: v!);
        }
    }
} // XmlSchemaInclude


// type: System.Xml.Schema.XmlSchemaInference
    /**
    Infers an XML Schema Definition Language (XSD) schema from an XML document. The  class cannot be inherited.

    */
public final class XmlSchemaInference
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaInference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaInference.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInference_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Schema.XmlSchemaSet InferSchema(System.Xml.XmlReader)
// docid: M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
    /**
    Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the  object specified.

    - Parameter instanceDocument: An  object containing the XML document to infer a schema from.
    - Returns: An  object containing the inferred schemas.

    */
    public func InferSchema(instanceDocument : dotnet.System.Xml.XmlReader) throws -> dotnet.System.Xml.Schema.XmlSchemaSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInference_XmlSchemaSet__InferSchema_0__1__XmlReader(&__thrown, self.get_handle(), instanceDocument.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaSet(hndl : __return);
        }
    }
    // System.Xml.Schema.XmlSchemaSet InferSchema(System.Xml.XmlReader, System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
    /**
    Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the  object specified, and refines the inferred schema using an existing schema in the  object specified with the same target namespace.

    - Parameter instanceDocument: An  object containing the XML document to infer a schema from.
    - Parameter schemas: An  object containing an existing schema used to refine the inferred schema.
    - Returns: An  object containing the inferred schemas.

    */
    public func InferSchema(instanceDocument : dotnet.System.Xml.XmlReader, schemas : dotnet.System.Xml.Schema.XmlSchemaSet) throws -> dotnet.System.Xml.Schema.XmlSchemaSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInference_XmlSchemaSet__InferSchema_0__2__XmlReader_XmlSchemaSet(&__thrown, self.get_handle(), instanceDocument.get_handle(), schemas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaSet(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaInference.InferenceOption get_Occurrence()
// docid: M:System.Xml.Schema.XmlSchemaInference.get_Occurrence
    public func get_Occurrence() throws -> dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInference_InferenceOption__get_Occurrence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption(val: __return);
        }
    }
    // [IsSpecialName] void set_Occurrence(System.Xml.Schema.XmlSchemaInference.InferenceOption)
// docid: M:System.Xml.Schema.XmlSchemaInference.set_Occurrence(System.Xml.Schema.XmlSchemaInference.InferenceOption)
    public func set_Occurrence(value : dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInference_void__set_Occurrence_0__1__InferenceOption(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaInference.InferenceOption get_TypeInference()
// docid: M:System.Xml.Schema.XmlSchemaInference.get_TypeInference
    public func get_TypeInference() throws -> dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInference_InferenceOption__get_TypeInference_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption(val: __return);
        }
    }
    // [IsSpecialName] void set_TypeInference(System.Xml.Schema.XmlSchemaInference.InferenceOption)
// docid: M:System.Xml.Schema.XmlSchemaInference.set_TypeInference(System.Xml.Schema.XmlSchemaInference.InferenceOption)
    public func set_TypeInference(value : dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInference_void__set_TypeInference_0__1__InferenceOption(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  value that affects schema occurrence declarations inferred from the XML document.

    */
    public var Occurrence : dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption {
        get {
            return try! get_Occurrence();
        }
        set(v) {
            return try! set_Occurrence(value: v);
        }
    }
    /**
    Gets or sets the  value that affects types inferred from the XML document.

    */
    public var TypeInference : dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption {
        get {
            return try! get_TypeInference();
        }
        set(v) {
            return try! set_TypeInference(value: v);
        }
    }
} // XmlSchemaInference


// type: System.Xml.Schema.XmlSchemaInference+InferenceOption
    /**
    Affects occurrence and type information inferred by the  class for elements and attributes in an XML document.

    */
public struct XmlSchemaInference_InferenceOption : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaInference_InferenceOption_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaInference+InferenceOption Restricted
    /**
    Indicates that a more restrictive schema declaration should be inferred for a particular element or attribute.

    */
    public static var Restricted : dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption(val: System_Xml_Schema_XmlSchemaInference_InferenceOption_get_Restricted());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaInference+InferenceOption Relaxed
    /**
    Indicates that a less restrictive schema declaration should be inferred for a particular element or attribute.

    */
    public static var Relaxed : dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaInference_InferenceOption(val: System_Xml_Schema_XmlSchemaInference_InferenceOption_get_Relaxed());
            return __return;
        }
    }
} // XmlSchemaInference_InferenceOption


// type: System.Xml.Schema.XmlSchemaInferenceException
    /**
    Returns information about errors encountered by the  class while inferring a schema from an XML document.

    */
open class XmlSchemaInferenceException
    :
    dotnet.System.Xml.Schema.XmlSchemaException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaInferenceException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaInferenceException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInferenceException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the error message specified.

    - Parameter message: A description of the error.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInferenceException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the error message specified and the original  that caused the  specified.

    - Parameter message: A description of the error.
    - Parameter innerException: An  object containing the original exception that caused the .
    */
    public init(message : dotnet.System.String, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInferenceException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Int32, System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the error message specified, the original  that caused the  specified, and the line number and line position of the error in the XML document specified.

    - Parameter message: A description of the error.
    - Parameter innerException: An  object containing the original exception that caused the .
    - Parameter lineNumber: The line number in the XML document that caused the .
    - Parameter linePosition: The line position in the XML document that caused the .
    */
    public init(message : dotnet.System.String, innerException : Optional<dotnet.System.Exception>, lineNumber : Swift.Int32, linePosition : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInferenceException_ctor_0__4__String_Exception_i32_i32(&__thrown, message.get_handle(), innerException?.get_handle() ?? nil, lineNumber, linePosition);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Streams all the  object properties into the  object specified for the  object specified.

    - Parameter info: A  object.
    - Parameter context: A  object.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInferenceException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSchemaInferenceException


// type: System.Xml.Schema.XmlSchemaInfo
    /**
    Represents the post-schema-validation infoset of a validated XML node.

    */
open class XmlSchemaInfo
    :
    dotnet.System.Object,
    System_Xml_Schema_IXmlSchemaInfo
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaInfo.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContentType get_ContentType()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_ContentType
    open func get_ContentType() throws -> dotnet.System.Xml.Schema.XmlSchemaContentType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_XmlSchemaContentType__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaContentType(val: __return);
        }
    }
    // [IsSpecialName] void set_ContentType(System.Xml.Schema.XmlSchemaContentType)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_ContentType(System.Xml.Schema.XmlSchemaContentType)
    open func set_ContentType(value : dotnet.System.Xml.Schema.XmlSchemaContentType) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_ContentType_0__1__XmlSchemaContentType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_IsDefault
    open /* method final */ func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsDefault(bool)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_IsDefault(System.Boolean)
    open func set_IsDefault(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_IsDefault_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNil()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_IsNil
    open /* method final */ func get_IsNil() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_bool__get_IsNil_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNil(bool)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_IsNil(System.Boolean)
    open func set_IsNil(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_IsNil_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_MemberType()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_MemberType
    open /* method final */ func get_MemberType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_XmlSchemaSimpleType__get_MemberType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MemberType(System.Xml.Schema.XmlSchemaSimpleType)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_MemberType(System.Xml.Schema.XmlSchemaSimpleType)
    open func set_MemberType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_MemberType_0__1__XmlSchemaSimpleType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAttribute get_SchemaAttribute()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_SchemaAttribute
    open /* method final */ func get_SchemaAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_XmlSchemaAttribute__get_SchemaAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SchemaAttribute(System.Xml.Schema.XmlSchemaAttribute)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_SchemaAttribute(System.Xml.Schema.XmlSchemaAttribute)
    open func set_SchemaAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_SchemaAttribute_0__1__XmlSchemaAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaElement get_SchemaElement()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_SchemaElement
    open /* method final */ func get_SchemaElement() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_XmlSchemaElement__get_SchemaElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SchemaElement(System.Xml.Schema.XmlSchemaElement)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_SchemaElement(System.Xml.Schema.XmlSchemaElement)
    open func set_SchemaElement(value : Optional<dotnet.System.Xml.Schema.XmlSchemaElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_SchemaElement_0__1__XmlSchemaElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_SchemaType()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_SchemaType
    open /* method final */ func get_SchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_XmlSchemaType__get_SchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SchemaType(System.Xml.Schema.XmlSchemaType)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_SchemaType(System.Xml.Schema.XmlSchemaType)
    open func set_SchemaType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_SchemaType_0__1__XmlSchemaType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaValidity get_Validity()
// docid: M:System.Xml.Schema.XmlSchemaInfo.get_Validity
    open /* method final */ func get_Validity() throws -> dotnet.System.Xml.Schema.XmlSchemaValidity {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaInfo_XmlSchemaValidity__get_Validity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaValidity(val: __return);
        }
    }
    // [IsSpecialName] void set_Validity(System.Xml.Schema.XmlSchemaValidity)
// docid: M:System.Xml.Schema.XmlSchemaInfo.set_Validity(System.Xml.Schema.XmlSchemaValidity)
    open func set_Validity(value : dotnet.System.Xml.Schema.XmlSchemaValidity) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaInfo_void__set_Validity_0__1__XmlSchemaValidity(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  object that corresponds to the content type of this validated XML node.

    */
    open var ContentType : dotnet.System.Xml.Schema.XmlSchemaContentType {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v);
        }
    }
    /**
    Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.

    */
    public var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
        set(v) {
            return try! set_IsDefault(value: v);
        }
    }
    /**
    Gets or sets a value indicating if the value for this validated XML node is nil.

    */
    public var IsNil : Bool {
        get {
            return try! get_IsNil();
        }
        set(v) {
            return try! set_IsNil(value: v);
        }
    }
    /**
    Gets or sets the dynamic schema type for this validated XML node.

    */
    public var MemberType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_MemberType();
        }
        set(v) {
            return try! set_MemberType(value: v!);
        }
    }
    /**
    Gets or sets the compiled  object that corresponds to this validated XML node.

    */
    public var SchemaAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAttribute> {
        get {
            return try! get_SchemaAttribute();
        }
        set(v) {
            return try! set_SchemaAttribute(value: v!);
        }
    }
    /**
    Gets or sets the compiled  object that corresponds to this validated XML node.

    */
    public var SchemaElement : Optional<dotnet.System.Xml.Schema.XmlSchemaElement> {
        get {
            return try! get_SchemaElement();
        }
        set(v) {
            return try! set_SchemaElement(value: v!);
        }
    }
    /**
    Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.

    */
    public var SchemaType : Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        get {
            return try! get_SchemaType();
        }
        set(v) {
            return try! set_SchemaType(value: v!);
        }
    }
    /**
    Gets or sets the  value of this validated XML node.

    */
    public var Validity : dotnet.System.Xml.Schema.XmlSchemaValidity {
        get {
            return try! get_Validity();
        }
        set(v) {
            return try! set_Validity(value: v);
        }
    }
} // XmlSchemaInfo


// type: System.Xml.Schema.XmlSchemaKey
    /**
    This class represents the  element from XMLSchema as specified by the World Wide Web Consortium (W3C).

    */
open class XmlSchemaKey
    :
    dotnet.System.Xml.Schema.XmlSchemaIdentityConstraint
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaKey_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaKey.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaKey_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaKey


// type: System.Xml.Schema.XmlSchemaKeyref
    /**
    This class represents the  element from XMLSchema as specified by the World Wide Web Consortium (W3C).

    */
open class XmlSchemaKeyref
    :
    dotnet.System.Xml.Schema.XmlSchemaIdentityConstraint
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaKeyref_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaKeyref.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaKeyref_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_Refer()
// docid: M:System.Xml.Schema.XmlSchemaKeyref.get_Refer
    open func get_Refer() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaKeyref_XmlQualifiedName__get_Refer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Refer(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaKeyref.set_Refer(System.Xml.XmlQualifiedName)
    open func set_Refer(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaKeyref_void__set_Refer_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the key that this constraint refers to in another simple or complex type.

    */
    open var Refer : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_Refer();
        }
        set(v) {
            return try! set_Refer(value: v);
        }
    }
} // XmlSchemaKeyref


// type: System.Xml.Schema.XmlSchemaLengthFacet
    /**
    Represents the  facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the length of a  element on the data type.

    */
open class XmlSchemaLengthFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaNumericFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaLengthFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaLengthFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaLengthFacet


// type: System.Xml.Schema.XmlSchemaMaxExclusiveFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a  element. The element value must be less than the value of the  element.

    */
open class XmlSchemaMaxExclusiveFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaMaxExclusiveFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaMaxExclusiveFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaMaxExclusiveFacet


// type: System.Xml.Schema.XmlSchemaMaxInclusiveFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a  element. The element value must be less than or equal to the value of the  element.

    */
open class XmlSchemaMaxInclusiveFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaMaxInclusiveFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaMaxInclusiveFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaMaxInclusiveFacet


// type: System.Xml.Schema.XmlSchemaMaxLengthFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum length of the data value of a  element. The length must be less than the value of the  element.

    */
open class XmlSchemaMaxLengthFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaNumericFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaMaxLengthFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaMaxLengthFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaMaxLengthFacet


// type: System.Xml.Schema.XmlSchemaMinExclusiveFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a  element. The element value must be greater than the value of the  element.

    */
open class XmlSchemaMinExclusiveFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaMinExclusiveFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaMinExclusiveFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaMinExclusiveFacet


// type: System.Xml.Schema.XmlSchemaMinInclusiveFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than or equal to the value of the  element.

    */
open class XmlSchemaMinInclusiveFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaMinInclusiveFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaMinInclusiveFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaMinInclusiveFacet


// type: System.Xml.Schema.XmlSchemaMinLengthFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum length of the data value of a  element. The length must be greater than the value of the  element.

    */
open class XmlSchemaMinLengthFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaNumericFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaMinLengthFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaMinLengthFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaMinLengthFacet


// type: System.Xml.Schema.XmlSchemaNotation
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). An XML Schema  declaration is a reconstruction of  declarations. The purpose of notations is to describe the format of non-XML data within an XML document.

    */
open class XmlSchemaNotation
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaNotation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaNotation.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaNotation_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaNotation.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaNotation_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaNotation.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaNotation_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Public()
// docid: M:System.Xml.Schema.XmlSchemaNotation.get_Public
    open func get_Public() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaNotation_String__get_Public_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Public(System.String)
// docid: M:System.Xml.Schema.XmlSchemaNotation.set_Public(System.String)
    open func set_Public(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaNotation_void__set_Public_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_System()
// docid: M:System.Xml.Schema.XmlSchemaNotation.get_System
    open func get_System() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaNotation_String__get_System_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_System(System.String)
// docid: M:System.Xml.Schema.XmlSchemaNotation.set_System(System.String)
    open func set_System(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaNotation_void__set_System_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the notation.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets the  identifier.

    */
    open var Public : Optional<dotnet.System.String> {
        get {
            return try! get_Public();
        }
        set(v) {
            return try! set_Public(value: v!);
        }
    }
    /**
    Gets or sets the  identifier.

    */
    open var System : Optional<dotnet.System.String> {
        get {
            return try! get_System();
        }
        set(v) {
            return try! set_System(value: v!);
        }
    }
} // XmlSchemaNotation


// type: System.Xml.Schema.XmlSchemaNumericFacet
    /**
    Abstract class for defining  facets. This class is the base class for numeric facet classes such as 

    */
open class XmlSchemaNumericFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaNumericFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // XmlSchemaNumericFacet


// type: System.Xml.Schema.XmlSchemaObject
    /**
    Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the  class.

    */
open class XmlSchemaObject
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.Schema.XmlSchemaObject.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObject_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LineNumber(System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaObject.set_LineNumber(System.Int32)
    open func set_LineNumber(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObject_void__set_LineNumber_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.Schema.XmlSchemaObject.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObject_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LinePosition(System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaObject.set_LinePosition(System.Int32)
    open func set_LinePosition(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObject_void__set_LinePosition_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Serialization.XmlSerializerNamespaces get_Namespaces()
// docid: M:System.Xml.Schema.XmlSchemaObject.get_Namespaces
    open func get_Namespaces() throws -> dotnet.System.Xml.Serialization.XmlSerializerNamespaces {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObject_XmlSerializerNamespaces__get_Namespaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Serialization.XmlSerializerNamespaces(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Namespaces(System.Xml.Serialization.XmlSerializerNamespaces)
// docid: M:System.Xml.Schema.XmlSchemaObject.set_Namespaces(System.Xml.Serialization.XmlSerializerNamespaces)
    open func set_Namespaces(value : dotnet.System.Xml.Serialization.XmlSerializerNamespaces) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObject_void__set_Namespaces_0__1__XmlSerializerNamespaces(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObject get_Parent()
// docid: M:System.Xml.Schema.XmlSchemaObject.get_Parent
    open func get_Parent() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaObject> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObject_XmlSchemaObject__get_Parent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaObject(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Parent(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObject.set_Parent(System.Xml.Schema.XmlSchemaObject)
    open func set_Parent(value : Optional<dotnet.System.Xml.Schema.XmlSchemaObject>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObject_void__set_Parent_0__1__XmlSchemaObject(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceUri()
// docid: M:System.Xml.Schema.XmlSchemaObject.get_SourceUri
    open func get_SourceUri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObject_String__get_SourceUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SourceUri(System.String)
// docid: M:System.Xml.Schema.XmlSchemaObject.set_SourceUri(System.String)
    open func set_SourceUri(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObject_void__set_SourceUri_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the line number in the file to which the  element refers.

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
        set(v) {
            return try! set_LineNumber(value: v);
        }
    }
    /**
    Gets or sets the line position in the file to which the  element refers.

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
        set(v) {
            return try! set_LinePosition(value: v);
        }
    }
    /**
    Gets or sets the  to use with this schema object.

    */
    open var Namespaces : dotnet.System.Xml.Serialization.XmlSerializerNamespaces {
        get {
            return try! get_Namespaces();
        }
        set(v) {
            return try! set_Namespaces(value: v);
        }
    }
    /**
    Gets or sets the parent of this .

    */
    open var Parent : Optional<dotnet.System.Xml.Schema.XmlSchemaObject> {
        get {
            return try! get_Parent();
        }
        set(v) {
            return try! set_Parent(value: v!);
        }
    }
    /**
    Gets or sets the source location for the file that loaded the schema.

    */
    open var SourceUri : Optional<dotnet.System.String> {
        get {
            return try! get_SourceUri();
        }
        set(v) {
            return try! set_SourceUri(value: v!);
        }
    }
} // XmlSchemaObject


// type: System.Xml.Schema.XmlSchemaObjectCollection
    /**
    A collection of s.

    */
open class XmlSchemaObjectCollection
    :
    dotnet.System.Collections.CollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaObjectCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaObjectCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)
    /**
    Initializes a new instance of the  class that takes an .

    - Parameter parent: The .
    */
    public init(parent : Optional<dotnet.System.Xml.Schema.XmlSchemaObject>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaObjectCollection_ctor_0__1__XmlSchemaObject(&__thrown, parent?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)
    /**
    Adds an  to the .

    - Parameter item: The .
    - Returns: The index at which the item has been added.

    */
    open func Add(item : dotnet.System.Xml.Schema.XmlSchemaObject) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectCollection_i32__Add_0__1__XmlSchemaObject(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Contains(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)
    /**
    Indicates if the specified  is in the .

    - Parameter item: The .
    - Returns: 
         if the specified qualified name is in the collection; otherwise, returns . If null is supplied,  is returned because there is no qualified name with a null name.

    */
    open func Contains(item : dotnet.System.Xml.Schema.XmlSchemaObject) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectCollection_bool__Contains_0__1__XmlSchemaObject(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Schema.XmlSchemaObject[], System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)
    /**
    Copies all the s from the collection into the given array, starting at the given index.

    - Parameter array: The one-dimensional array that is the destination of the elements copied from the . The array must have zero-based indexing.
    - Parameter index: The zero-based index in the array at which copying begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaObject>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObjectCollection_void__CopyTo_0__2__XmlSchemaObjectArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.Schema.XmlSchemaObjectEnumerator GetEnumerator()
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator
    /**
    Returns an enumerator for iterating through the  contained in the .

    - Returns: The iterator returns .

    */
    open func GetEnumerator() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectCollection_XmlSchemaObjectEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)
    /**
    Gets the collection index corresponding to the specified .

    - Parameter item: The  whose index you want to return.
    - Returns: The index corresponding to the specified .

    */
    open func IndexOf(item : dotnet.System.Xml.Schema.XmlSchemaObject) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectCollection_i32__IndexOf_0__1__XmlSchemaObject(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)
    /**
    Inserts an  to the .

    - Parameter index: The zero-based index at which an item should be inserted.
    - Parameter item: The  to insert.
    */
    open func Insert(index : Swift.Int32, item : dotnet.System.Xml.Schema.XmlSchemaObject) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObjectCollection_void__Insert_0__2__i32_XmlSchemaObject(&__thrown, self.get_handle(), index, item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)
    /**
    Removes an  from the .

    - Parameter item: The  to remove.
    */
    open func Remove(item : dotnet.System.Xml.Schema.XmlSchemaObject) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObjectCollection_void__Remove_0__1__XmlSchemaObject(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObject get_Item(System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Xml.Schema.XmlSchemaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectCollection_XmlSchemaObject__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObject(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaObjectCollection.set_Item(System.Int32,System.Xml.Schema.XmlSchemaObject)
    open func set_Item(index : Swift.Int32, value : dotnet.System.Xml.Schema.XmlSchemaObject) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObjectCollection_void__set_Item_0__2__i32_XmlSchemaObject(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSchemaObjectCollection


// type: System.Xml.Schema.XmlSchemaObjectEnumerator
    /**
    Represents the enumerator for the .

    */
open class XmlSchemaObjectEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaObjectEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool MoveNext()
// docid: M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext
    /**
    Moves to the next item in the collection.

    - Returns: 
         at the end of the collection.

    */
    open func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset
    /**
    Resets the enumerator to the start of the collection.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaObjectEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObject get_Current()
// docid: M:System.Xml.Schema.XmlSchemaObjectEnumerator.get_Current
    open func get_Current() throws -> dotnet.System.Xml.Schema.XmlSchemaObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectEnumerator_XmlSchemaObject__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObject(hndl : __return);
        }
    }
    /**
    Gets the current  in the collection.

    */
    open var Current : dotnet.System.Xml.Schema.XmlSchemaObject {
        get {
            return try! get_Current();
        }
    }
} // XmlSchemaObjectEnumerator


// type: System.Xml.Schema.XmlSchemaObjectTable
    /**
    Provides the collections for contained elements in the  class (for example, Attributes, AttributeGroups, Elements, and so on).

    */
open class XmlSchemaObjectTable
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaObjectTable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Contains(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)
    /**
    Determines if the qualified name specified exists in the collection.

    - Parameter name: The .
    - Returns: 
         if the qualified name specified exists in the collection; otherwise, .

    */
    open func Contains(name : dotnet.System.Xml.XmlQualifiedName) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectTable_bool__Contains_0__1__XmlQualifiedName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator
    /**
    Returns an enumerator that can iterate through the .

    - Returns: An  that can iterate through .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectTable_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.Schema.XmlSchemaObjectTable.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectTable_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Names()
// docid: M:System.Xml.Schema.XmlSchemaObjectTable.get_Names
    open func get_Names() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectTable_ICollection__get_Names_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Xml.Schema.XmlSchemaObjectTable.get_Values
    open func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectTable_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObject get_Item(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaObjectTable.get_Item(System.Xml.XmlQualifiedName)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.Xml.XmlQualifiedName) throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaObject> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaObjectTable_XmlSchemaObject__get_Item_0__1__XmlQualifiedName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaObject(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of items contained in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Returns a collection of all the named elements in the .

    */
    open var Names : dotnet.System.Collections.ICollection {
        get {
            return try! get_Names();
        }
    }
    /**
    Returns a collection of all the values for all the elements in the .

    */
    open var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // XmlSchemaObjectTable


// type: System.Xml.Schema.XmlSchemaParticle
    /**
    Abstract class for that is the base class for all particle types (e.g. ).

    */
open class XmlSchemaParticle
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaParticle_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Decimal get_MaxOccurs()
// docid: M:System.Xml.Schema.XmlSchemaParticle.get_MaxOccurs
    open func get_MaxOccurs() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaParticle_Decimal__get_MaxOccurs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MaxOccurs(System.Decimal)
// docid: M:System.Xml.Schema.XmlSchemaParticle.set_MaxOccurs(System.Decimal)
    open func set_MaxOccurs(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaParticle_void__set_MaxOccurs_0__1__Decimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MaxOccursString()
// docid: M:System.Xml.Schema.XmlSchemaParticle.get_MaxOccursString
    open func get_MaxOccursString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaParticle_String__get_MaxOccursString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MaxOccursString(System.String)
// docid: M:System.Xml.Schema.XmlSchemaParticle.set_MaxOccursString(System.String)
    open func set_MaxOccursString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaParticle_void__set_MaxOccursString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Decimal get_MinOccurs()
// docid: M:System.Xml.Schema.XmlSchemaParticle.get_MinOccurs
    open func get_MinOccurs() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaParticle_Decimal__get_MinOccurs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MinOccurs(System.Decimal)
// docid: M:System.Xml.Schema.XmlSchemaParticle.set_MinOccurs(System.Decimal)
    open func set_MinOccurs(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaParticle_void__set_MinOccurs_0__1__Decimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MinOccursString()
// docid: M:System.Xml.Schema.XmlSchemaParticle.get_MinOccursString
    open func get_MinOccursString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaParticle_String__get_MinOccursString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MinOccursString(System.String)
// docid: M:System.Xml.Schema.XmlSchemaParticle.set_MinOccursString(System.String)
    open func set_MinOccursString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaParticle_void__set_MinOccursString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the maximum number of times the particle can occur.

    */
    open var MaxOccurs : dotnet.System.Decimal {
        get {
            return try! get_MaxOccurs();
        }
        set(v) {
            return try! set_MaxOccurs(value: v);
        }
    }
    /**
    Gets or sets the number as a string value. Maximum number of times the particle can occur.

    */
    open var MaxOccursString : Optional<dotnet.System.String> {
        get {
            return try! get_MaxOccursString();
        }
        set(v) {
            return try! set_MaxOccursString(value: v!);
        }
    }
    /**
    Gets or sets the minimum number of times the particle can occur.

    */
    open var MinOccurs : dotnet.System.Decimal {
        get {
            return try! get_MinOccurs();
        }
        set(v) {
            return try! set_MinOccurs(value: v);
        }
    }
    /**
    Gets or sets the number as a string value. The minimum number of times the particle can occur.

    */
    open var MinOccursString : Optional<dotnet.System.String> {
        get {
            return try! get_MinOccursString();
        }
        set(v) {
            return try! set_MinOccursString(value: v!);
        }
    }
} // XmlSchemaParticle


// type: System.Xml.Schema.XmlSchemaPatternFacet
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the value entered for a  element.

    */
open class XmlSchemaPatternFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaPatternFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaPatternFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaPatternFacet


// type: System.Xml.Schema.XmlSchemaRedefine
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to allow simple and complex types, groups and attribute groups from external schema files to be redefined in the current schema. This class can also be used to provide versioning for the schema elements.

    */
open class XmlSchemaRedefine
    :
    dotnet.System.Xml.Schema.XmlSchemaExternal
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaRedefine_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaRedefine.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaRedefine_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_AttributeGroups()
// docid: M:System.Xml.Schema.XmlSchemaRedefine.get_AttributeGroups
    open func get_AttributeGroups() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaRedefine_XmlSchemaObjectTable__get_AttributeGroups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_Groups()
// docid: M:System.Xml.Schema.XmlSchemaRedefine.get_Groups
    open func get_Groups() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaRedefine_XmlSchemaObjectTable__get_Groups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchemaRedefine.get_Items
    open func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaRedefine_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_SchemaTypes()
// docid: M:System.Xml.Schema.XmlSchemaRedefine.get_SchemaTypes
    open func get_SchemaTypes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaRedefine_XmlSchemaObjectTable__get_SchemaTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    /**
    Gets the  , for all attributes in the schema, which holds the post-compilation value of the  property.

    */
    open var AttributeGroups : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_AttributeGroups();
        }
    }
    /**
    Gets the , for all groups in the schema, which holds the post-compilation value of the  property.

    */
    open var Groups : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_Groups();
        }
    }
    /**
    Gets the collection of the following classes: , , , , and .

    */
    open var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
    /**
    Gets the , for all simple and complex types in the schema, which holds the post-compilation value of the  property.

    */
    open var SchemaTypes : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_SchemaTypes();
        }
    }
} // XmlSchemaRedefine


// type: System.Xml.Schema.XmlSchemaSequence
    /**
    Represents the  element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The  requires the elements in the group to appear in the specified sequence within the containing element.

    */
open class XmlSchemaSequence
    :
    dotnet.System.Xml.Schema.XmlSchemaGroupBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSequence_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSequence.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSequence_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Items()
// docid: M:System.Xml.Schema.XmlSchemaSequence.get_Items
    open override func get_Items() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSequence_XmlSchemaObjectCollection__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    /**
    The elements contained within the compositor. Collection of , , , , or .

    */
    open override var Items : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Items();
        }
    }
} // XmlSchemaSequence


// type: System.Xml.Schema.XmlSchemaSet
    /**
    Contains a cache of XML Schema definition language (XSD) schemas.

    */
open class XmlSchemaSet
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlNameTable)
// docid: M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter nameTable: The  object to use.
    */
    public init(nameTable : dotnet.System.Xml.XmlNameTable) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSet_ctor_0__1__XmlNameTable(&__thrown, nameTable.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.String, System.String)
// docid: M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
    /**
    Adds the XML Schema definition language (XSD) schema at the URL specified to the .

    - Parameter targetNamespace: The schema  property, or  to use the  specified in the schema.
    - Parameter schemaUri: The URL that specifies the schema to load.
    - Returns: An  object if the schema is valid. If the schema is not valid and a  is specified, then  is returned and the appropriate validation event is raised. Otherwise, an  is thrown.

    */
    open func Add(targetNamespace : Optional<dotnet.System.String>, schemaUri : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchema__Add_0__2__String_String(&__thrown, self.get_handle(), targetNamespace?.get_handle() ?? nil, schemaUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.String, System.Xml.XmlReader)
// docid: M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
    /**
    Adds the XML Schema definition language (XSD) schema contained in the  to the .

    - Parameter targetNamespace: The schema  property, or  to use the  specified in the schema.
    - Parameter schemaDocument: The  object.
    - Returns: An  object if the schema is valid. If the schema is not valid and a  is specified, then  is returned and the appropriate validation event is raised. Otherwise, an  is thrown.

    */
    open func Add(targetNamespace : Optional<dotnet.System.String>, schemaDocument : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchema__Add_0__2__String_XmlReader(&__thrown, self.get_handle(), targetNamespace?.get_handle() ?? nil, schemaDocument.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchema Add(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
    /**
    Adds the given  to the .

    - Parameter schema: The  object to add to the .
    - Returns: An  object if the schema is valid. If the schema is not valid and a  is specified, then  is returned and the appropriate validation event is raised. Otherwise, an  is thrown.

    */
    open func Add(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchema__Add_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Add(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
    /**
    Adds all the XML Schema definition language (XSD) schemas in the given  to the .

    - Parameter schemas: The  object.
    */
    open func Add(schemas : dotnet.System.Xml.Schema.XmlSchemaSet) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__Add_0__1__XmlSchemaSet(&__thrown, self.get_handle(), schemas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Compile()
// docid: M:System.Xml.Schema.XmlSchemaSet.Compile
    /**
    Compiles the XML Schema definition language (XSD) schemas added to the  into one logical schema.

    */
    open func Compile() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__Compile_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)
    /**
    Indicates whether an XML Schema definition language (XSD) schema with the specified target namespace URI is in the .

    - Parameter targetNamespace: The schema  property.
    - Returns: 
         if a schema with the specified target namespace URI is in the ; otherwise, .

    */
    open func Contains(targetNamespace : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_bool__Contains_0__1__String(&__thrown, self.get_handle(), targetNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
    /**
    Indicates whether the specified XML Schema definition language (XSD)  object is in the .

    - Parameter schema: The  object.
    - Returns: 
         if the  object is in the ; otherwise, .

    */
    open func Contains(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_bool__Contains_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Xml.Schema.XmlSchema[], System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
    /**
    Copies all the  objects from the  to the given array, starting at the given index.

    - Parameter schemas: The array to copy the objects to.
    - Parameter index: The index in the array where copying will begin.
    */
    open func CopyTo(schemas : dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchema>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__CopyTo_0__2__XmlSchemaArray_i32(&__thrown, self.get_handle(), schemas.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.Schema.XmlSchema Remove(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
    /**
    Removes the specified XML Schema definition language (XSD) schema from the .

    - Parameter schema: The  object to remove from the .
    - Returns: The  object removed from the  or  if the schema was not found in the .

    */
    open func Remove(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchema__Remove_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool RemoveRecursive(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
    /**
    Removes the specified XML Schema definition language (XSD) schema and all the schemas it imports from the .

    - Parameter schemaToRemove: The  object to remove from the .
    - Returns: 
         if the  object and all its imports were successfully removed; otherwise, .

    */
    open func RemoveRecursive(schemaToRemove : dotnet.System.Xml.Schema.XmlSchema) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_bool__RemoveRecursive_0__1__XmlSchema(&__thrown, self.get_handle(), schemaToRemove.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Xml.Schema.XmlSchema Reprocess(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
    /**
    Reprocesses an XML Schema definition language (XSD) schema that already exists in the .

    - Parameter schema: The schema to reprocess.
    - Returns: An  object if the schema is a valid schema. If the schema is not valid and a  is specified,  is returned and the appropriate validation event is raised. Otherwise, an  is thrown.

    */
    open func Reprocess(schema : dotnet.System.Xml.Schema.XmlSchema) throws -> dotnet.System.Xml.Schema.XmlSchema {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchema__Reprocess_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchema(hndl : __return);
        }
    }
    // System.Collections.ICollection Schemas()
// docid: M:System.Xml.Schema.XmlSchemaSet.Schemas
    /**
    Returns a collection of all the XML Schema definition language (XSD) schemas in the .

    - Returns: An  object containing all the schemas that have been added to the . If no schemas have been added to the , an empty  object is returned.

    */
    open func Schemas() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_ICollection__Schemas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // System.Collections.ICollection Schemas(System.String)
// docid: M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
    /**
    Returns a collection of all the XML Schema definition language (XSD) schemas in the  that belong to the given namespace.

    - Parameter targetNamespace: The schema  property.
    - Returns: An  object containing all the schemas that have been added to the  that belong to the given namespace. If no schemas have been added to the , an empty  object is returned.

    */
    open func Schemas(targetNamespace : Optional<dotnet.System.String>) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_ICollection__Schemas_0__1__String(&__thrown, self.get_handle(), targetNamespace?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaCompilationSettings get_CompilationSettings()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_CompilationSettings
    open func get_CompilationSettings() throws -> dotnet.System.Xml.Schema.XmlSchemaCompilationSettings {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchemaCompilationSettings__get_CompilationSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaCompilationSettings(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CompilationSettings(System.Xml.Schema.XmlSchemaCompilationSettings)
// docid: M:System.Xml.Schema.XmlSchemaSet.set_CompilationSettings(System.Xml.Schema.XmlSchemaCompilationSettings)
    open func set_CompilationSettings(value : dotnet.System.Xml.Schema.XmlSchemaCompilationSettings) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__set_CompilationSettings_0__1__XmlSchemaCompilationSettings(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_GlobalAttributes()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_GlobalAttributes
    open func get_GlobalAttributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchemaObjectTable__get_GlobalAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_GlobalElements()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_GlobalElements
    open func get_GlobalElements() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchemaObjectTable__get_GlobalElements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectTable get_GlobalTypes()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_GlobalTypes
    open func get_GlobalTypes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlSchemaObjectTable__get_GlobalTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectTable(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsCompiled()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_IsCompiled
    open func get_IsCompiled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_bool__get_IsCompiled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.Schema.XmlSchemaSet.get_NameTable
    open func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSet_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.Schema.XmlSchemaSet.set_XmlResolver(System.Xml.XmlResolver)
    open func set_XmlResolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchemaSet.add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    open func add_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__add_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try add_ValidationEventHandler(value: del_value);
    }
    // [IsSpecialName] void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchemaSet.remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    open func remove_ValidationEventHandler(value : dotnet.System.Xml.Schema.ValidationEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSet_void__remove_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try remove_ValidationEventHandler(value: del_value);
    }
    /**
    Gets or sets the  for the .

    */
    open var CompilationSettings : dotnet.System.Xml.Schema.XmlSchemaCompilationSettings {
        get {
            return try! get_CompilationSettings();
        }
        set(v) {
            return try! set_CompilationSettings(value: v);
        }
    }
    /**
    Gets the number of logical XML Schema definition language (XSD) schemas in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets all the global attributes in all the XML Schema definition language (XSD) schemas in the .

    */
    open var GlobalAttributes : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_GlobalAttributes();
        }
    }
    /**
    Gets all the global elements in all the XML Schema definition language (XSD) schemas in the .

    */
    open var GlobalElements : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_GlobalElements();
        }
    }
    /**
    Gets all of the global simple and complex types in all the XML Schema definition language (XSD) schemas in the .

    */
    open var GlobalTypes : dotnet.System.Xml.Schema.XmlSchemaObjectTable {
        get {
            return try! get_GlobalTypes();
        }
    }
    /**
    Gets a value that indicates whether the XML Schema definition language (XSD) schemas in the  have been compiled.

    */
    open var IsCompiled : Bool {
        get {
            return try! get_IsCompiled();
        }
    }
    /**
    Gets the default  used by the  when loading new XML Schema definition language (XSD) schemas.

    */
    open var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
} // XmlSchemaSet


// type: System.Xml.Schema.XmlSchemaSimpleContent
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for simple and complex types with simple content model.

    */
open class XmlSchemaSimpleContent
    :
    dotnet.System.Xml.Schema.XmlSchemaContentModel
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleContent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaContent get_Content()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContent.get_Content
    open override func get_Content() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaContent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContent_XmlSchemaContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(System.Xml.Schema.XmlSchemaContent)
// docid: M:System.Xml.Schema.XmlSchemaSimpleContent.set_Content(System.Xml.Schema.XmlSchemaContent)
    open override func set_Content(value : Optional<dotnet.System.Xml.Schema.XmlSchemaContent>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleContent_void__set_Content_0__1__XmlSchemaContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets one of the  or .

    */
    open override var Content : Optional<dotnet.System.Xml.Schema.XmlSchemaContent> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
} // XmlSchemaSimpleContent


// type: System.Xml.Schema.XmlSchemaSimpleContentExtension
    /**
    Represents the  element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by extension. Such derivations are used to extend the simple type content of the element by adding attributes.

    */
open class XmlSchemaSimpleContentExtension
    :
    dotnet.System.Xml.Schema.XmlSchemaContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleContentExtension_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleContentExtension_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentExtension.get_AnyAttribute
    open func get_AnyAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentExtension_XmlSchemaAnyAttribute__get_AnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentExtension.set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
    open func set_AnyAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleContentExtension_void__set_AnyAttribute_0__1__XmlSchemaAnyAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentExtension.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentExtension_XmlSchemaObjectCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_BaseTypeName()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentExtension.get_BaseTypeName
    open func get_BaseTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentExtension_XmlQualifiedName__get_BaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentExtension.set_BaseTypeName(System.Xml.XmlQualifiedName)
    open func set_BaseTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleContentExtension_void__set_BaseTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  to be used for the attribute value.

    */
    open var AnyAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AnyAttribute();
        }
        set(v) {
            return try! set_AnyAttribute(value: v!);
        }
    }
    /**
    Gets the collection of  and .

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the name of a built-in data type or simple type from which this type is extended.

    */
    open var BaseTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_BaseTypeName();
        }
        set(v) {
            return try! set_BaseTypeName(value: v);
        }
    }
} // XmlSchemaSimpleContentExtension


// type: System.Xml.Schema.XmlSchemaSimpleContentRestriction
    /**
    Represents the  element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by restriction. Such derivations can be used to restrict the range of values for the element to a subset of the values specified in the inherited simple type.

    */
open class XmlSchemaSimpleContentRestriction
    :
    dotnet.System.Xml.Schema.XmlSchemaContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleContentRestriction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleContentRestriction_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaAnyAttribute get_AnyAttribute()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.get_AnyAttribute
    open func get_AnyAttribute() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentRestriction_XmlSchemaAnyAttribute__get_AnyAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaAnyAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.set_AnyAttribute(System.Xml.Schema.XmlSchemaAnyAttribute)
    open func set_AnyAttribute(value : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleContentRestriction_void__set_AnyAttribute_0__1__XmlSchemaAnyAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Attributes()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentRestriction_XmlSchemaObjectCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_BaseType()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.get_BaseType
    open func get_BaseType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentRestriction_XmlSchemaSimpleType__get_BaseType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseType(System.Xml.Schema.XmlSchemaSimpleType)
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.set_BaseType(System.Xml.Schema.XmlSchemaSimpleType)
    open func set_BaseType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleContentRestriction_void__set_BaseType_0__1__XmlSchemaSimpleType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_BaseTypeName()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.get_BaseTypeName
    open func get_BaseTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentRestriction_XmlQualifiedName__get_BaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.set_BaseTypeName(System.Xml.XmlQualifiedName)
    open func set_BaseTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleContentRestriction_void__set_BaseTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Facets()
// docid: M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.get_Facets
    open func get_Facets() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleContentRestriction_XmlSchemaObjectCollection__get_Facets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    /**
    Gets or sets an  to be used for the attribute value.

    */
    open var AnyAttribute : Optional<dotnet.System.Xml.Schema.XmlSchemaAnyAttribute> {
        get {
            return try! get_AnyAttribute();
        }
        set(v) {
            return try! set_AnyAttribute(value: v!);
        }
    }
    /**
    Gets the  and  collection of attributes for the simple type.

    */
    open var Attributes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the simple type base value.

    */
    open var BaseType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_BaseType();
        }
        set(v) {
            return try! set_BaseType(value: v!);
        }
    }
    /**
    Gets or sets the name of the built-in data type or simple type from which this type is derived.

    */
    open var BaseTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_BaseTypeName();
        }
        set(v) {
            return try! set_BaseTypeName(value: v);
        }
    }
    /**
    Gets or sets an Xml Schema facet.

    */
    open var Facets : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Facets();
        }
    }
} // XmlSchemaSimpleContentRestriction


// type: System.Xml.Schema.XmlSchemaSimpleType
    /**
    Represents the  element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a simple type. Simple types can specify information and constraints for the value of attributes or elements with text-only content.

    */
open class XmlSchemaSimpleType
    :
    dotnet.System.Xml.Schema.XmlSchemaType
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleType.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleType_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleTypeContent get_Content()
// docid: M:System.Xml.Schema.XmlSchemaSimpleType.get_Content
    open func get_Content() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleType_XmlSchemaSimpleTypeContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(System.Xml.Schema.XmlSchemaSimpleTypeContent)
// docid: M:System.Xml.Schema.XmlSchemaSimpleType.set_Content(System.Xml.Schema.XmlSchemaSimpleTypeContent)
    open func set_Content(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleType_void__set_Content_0__1__XmlSchemaSimpleTypeContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets one of , , or .

    */
    open var Content : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
} // XmlSchemaSimpleType


// type: System.Xml.Schema.XmlSchemaSimpleTypeContent
    /**
    Abstract class for simple type content classes.

    */
open class XmlSchemaSimpleTypeContent
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleTypeContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // XmlSchemaSimpleTypeContent


// type: System.Xml.Schema.XmlSchemaSimpleTypeList
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to define a  element as a list of values of a specified data type.

    */
open class XmlSchemaSimpleTypeList
    :
    dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleTypeList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleTypeList_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_BaseItemType()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.get_BaseItemType
    open func get_BaseItemType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeList_XmlSchemaSimpleType__get_BaseItemType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseItemType(System.Xml.Schema.XmlSchemaSimpleType)
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.set_BaseItemType(System.Xml.Schema.XmlSchemaSimpleType)
    open func set_BaseItemType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleTypeList_void__set_BaseItemType_0__1__XmlSchemaSimpleType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_ItemType()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.get_ItemType
    open func get_ItemType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeList_XmlSchemaSimpleType__get_ItemType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ItemType(System.Xml.Schema.XmlSchemaSimpleType)
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.set_ItemType(System.Xml.Schema.XmlSchemaSimpleType)
    open func set_ItemType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleTypeList_void__set_ItemType_0__1__XmlSchemaSimpleType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_ItemTypeName()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.get_ItemTypeName
    open func get_ItemTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeList_XmlQualifiedName__get_ItemTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ItemTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeList.set_ItemTypeName(System.Xml.XmlQualifiedName)
    open func set_ItemTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleTypeList_void__set_ItemTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  representing the type of the  element based on the  and  values of the simple type.

    */
    open var BaseItemType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_BaseItemType();
        }
        set(v) {
            return try! set_BaseItemType(value: v!);
        }
    }
    /**
    Gets or sets the  element that is derived from the type specified by the base value.

    */
    open var ItemType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_ItemType();
        }
        set(v) {
            return try! set_ItemType(value: v!);
        }
    }
    /**
    Gets or sets the name of a built-in data type or  element defined in this schema (or another schema indicated by the specified namespace).

    */
    open var ItemTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_ItemTypeName();
        }
        set(v) {
            return try! set_ItemTypeName(value: v);
        }
    }
} // XmlSchemaSimpleTypeList


// type: System.Xml.Schema.XmlSchemaSimpleTypeRestriction
    /**
    Represents the  element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used restricting  element.

    */
open class XmlSchemaSimpleTypeRestriction
    :
    dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleTypeRestriction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleTypeRestriction_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType get_BaseType()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.get_BaseType
    open func get_BaseType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeRestriction_XmlSchemaSimpleType__get_BaseType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseType(System.Xml.Schema.XmlSchemaSimpleType)
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.set_BaseType(System.Xml.Schema.XmlSchemaSimpleType)
    open func set_BaseType(value : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleTypeRestriction_void__set_BaseType_0__1__XmlSchemaSimpleType(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_BaseTypeName()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.get_BaseTypeName
    open func get_BaseTypeName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeRestriction_XmlQualifiedName__get_BaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseTypeName(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.set_BaseTypeName(System.Xml.XmlQualifiedName)
    open func set_BaseTypeName(value : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleTypeRestriction_void__set_BaseTypeName_0__1__XmlQualifiedName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_Facets()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.get_Facets
    open func get_Facets() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeRestriction_XmlSchemaObjectCollection__get_Facets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    /**
    Gets or sets information on the base type.

    */
    open var BaseType : Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        get {
            return try! get_BaseType();
        }
        set(v) {
            return try! set_BaseType(value: v!);
        }
    }
    /**
    Gets or sets the name of the qualified base type.

    */
    open var BaseTypeName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_BaseTypeName();
        }
        set(v) {
            return try! set_BaseTypeName(value: v);
        }
    }
    /**
    Gets or sets an Xml Schema facet.

    */
    open var Facets : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_Facets();
        }
    }
} // XmlSchemaSimpleTypeRestriction


// type: System.Xml.Schema.XmlSchemaSimpleTypeUnion
    /**
    Represents the  element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). A  datatype can be used to specify the content of a . The value of the  element must be any one of a set of alternative datatypes specified in the union. Union types are always derived types and must comprise at least two alternative datatypes.

    */
open class XmlSchemaSimpleTypeUnion
    :
    dotnet.System.Xml.Schema.XmlSchemaSimpleTypeContent
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaSimpleTypeUnion_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaSimpleTypeUnion_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSimpleType[] get_BaseMemberTypes()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.get_BaseMemberTypes
    open func get_BaseMemberTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaSimpleType>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeUnion_XmlSchemaSimpleTypeArray__get_BaseMemberTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaSimpleType>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaObjectCollection get_BaseTypes()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.get_BaseTypes
    open func get_BaseTypes() throws -> dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeUnion_XmlSchemaObjectCollection__get_BaseTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaObjectCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName[] get_MemberTypes()
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.get_MemberTypes
    open func get_MemberTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaSimpleTypeUnion_XmlQualifiedNameArray__get_MemberTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MemberTypes(System.Xml.XmlQualifiedName[])
// docid: M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.set_MemberTypes(System.Xml.XmlQualifiedName[])
    open func set_MemberTypes(value : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaSimpleTypeUnion_void__set_MemberTypes_0__1__XmlQualifiedNameArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets an array of  objects representing the type of the  element based on the  and  values of the simple type.

    */
    open var BaseMemberTypes : Optional<dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaSimpleType>> {
        get {
            return try! get_BaseMemberTypes();
        }
    }
    /**
    Gets the collection of base types.

    */
    open var BaseTypes : dotnet.System.Xml.Schema.XmlSchemaObjectCollection {
        get {
            return try! get_BaseTypes();
        }
    }
    /**
    Gets or sets the array of qualified member names of built-in data types or  elements defined in this schema (or another schema indicated by the specified namespace).

    */
    open var MemberTypes : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>> {
        get {
            return try! get_MemberTypes();
        }
        set(v) {
            return try! set_MemberTypes(value: v!);
        }
    }
} // XmlSchemaSimpleTypeUnion


// type: System.Xml.Schema.XmlSchemaTotalDigitsFacet
    /**
    Represents the  facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the number of digits that can be entered for the value of a  element. That value of  must be a positive integer.

    */
open class XmlSchemaTotalDigitsFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaNumericFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaTotalDigitsFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaTotalDigitsFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaTotalDigitsFacet


// type: System.Xml.Schema.XmlSchemaType
    /**
    The base class for all simple types and complex types.

    */
open class XmlSchemaType
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaType.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaType_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)
// docid: M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)
    /**
    Returns an  that represents the built-in complex type of the complex type specified.

    - Parameter typeCode: One of the  values representing the complex type.
    - Returns: The  that represents the built-in complex type.

    */
    open class func GetBuiltInComplexType(typeCode : dotnet.System.Xml.Schema.XmlTypeCode) throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaComplexType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaComplexType__GetBuiltInComplexType_0__1__XmlTypeCode(&__thrown, typeCode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaComplexType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)
    /**
    Returns an  that represents the built-in complex type of the complex type specified by qualified name.

    - Parameter qualifiedName: The  of the complex type.
    - Returns: The  that represents the built-in complex type.

    */
    open class func GetBuiltInComplexType(qualifiedName : dotnet.System.Xml.XmlQualifiedName) throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaComplexType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaComplexType__GetBuiltInComplexType_0__1__XmlQualifiedName(&__thrown, qualifiedName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaComplexType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)
// docid: M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)
    /**
    Returns an  that represents the built-in simple type of the specified simple type.

    - Parameter typeCode: One of the  values representing the simple type.
    - Returns: The  that represents the built-in simple type.

    */
    open class func GetBuiltInSimpleType(typeCode : dotnet.System.Xml.Schema.XmlTypeCode) throws -> dotnet.System.Xml.Schema.XmlSchemaSimpleType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaSimpleType__GetBuiltInSimpleType_0__1__XmlTypeCode(&__thrown, typeCode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __return);
        }
    }
    // System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType(System.Xml.XmlQualifiedName)
// docid: M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)
    /**
    Returns an  that represents the built-in simple type of the simple type that is specified by the qualified name.

    - Parameter qualifiedName: The  of the simple type.
    - Returns: The  that represents the built-in simple type.

    */
    open class func GetBuiltInSimpleType(qualifiedName : dotnet.System.Xml.XmlQualifiedName) throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaSimpleType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaSimpleType__GetBuiltInSimpleType_0__1__XmlQualifiedName(&__thrown, qualifiedName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaSimpleType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsDerivedFrom(System.Xml.Schema.XmlSchemaType, System.Xml.Schema.XmlSchemaType, System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)
    /**
    Returns a value indicating if the derived schema type specified is derived from the base schema type specified.

    - Parameter derivedType: The derived  to test.
    - Parameter baseType: The base  to test the derived  against.
    - Parameter except: One of the  values representing a type derivation method to exclude from testing.
    - Returns: 
         if the derived type is derived from the base type; otherwise, .

    */
    open class func IsDerivedFrom(derivedType : Optional<dotnet.System.Xml.Schema.XmlSchemaType>, baseType : Optional<dotnet.System.Xml.Schema.XmlSchemaType>, except : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_bool__IsDerivedFrom_0__3__XmlSchemaType_XmlSchemaType_XmlSchemaDerivationMethod(&__thrown, derivedType?.get_handle() ?? nil, baseType?.get_handle() ?? nil, except.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_BaseSchemaType()
// docid: M:System.Xml.Schema.XmlSchemaType.get_BaseSchemaType
    open func get_BaseSchemaType() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_Object__get_BaseSchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_BaseXmlSchemaType()
// docid: M:System.Xml.Schema.XmlSchemaType.get_BaseXmlSchemaType
    open func get_BaseXmlSchemaType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaType__get_BaseXmlSchemaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDatatype get_Datatype()
// docid: M:System.Xml.Schema.XmlSchemaType.get_Datatype
    open func get_Datatype() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaDatatype> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaDatatype__get_Datatype_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaDatatype(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_DerivedBy()
// docid: M:System.Xml.Schema.XmlSchemaType.get_DerivedBy
    open func get_DerivedBy() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaDerivationMethod__get_DerivedBy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_Final()
// docid: M:System.Xml.Schema.XmlSchemaType.get_Final
    open func get_Final() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaDerivationMethod__get_Final_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_Final(System.Xml.Schema.XmlSchemaDerivationMethod)
// docid: M:System.Xml.Schema.XmlSchemaType.set_Final(System.Xml.Schema.XmlSchemaDerivationMethod)
    open func set_Final(value : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaType_void__set_Final_0__1__XmlSchemaDerivationMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaDerivationMethod get_FinalResolved()
// docid: M:System.Xml.Schema.XmlSchemaType.get_FinalResolved
    open func get_FinalResolved() throws -> dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlSchemaDerivationMethod__get_FinalResolved_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaDerivationMethod(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsMixed()
// docid: M:System.Xml.Schema.XmlSchemaType.get_IsMixed
    open func get_IsMixed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_bool__get_IsMixed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsMixed(bool)
// docid: M:System.Xml.Schema.XmlSchemaType.set_IsMixed(System.Boolean)
    open func set_IsMixed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaType_void__set_IsMixed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Schema.XmlSchemaType.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Schema.XmlSchemaType.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaType_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlQualifiedName get_QualifiedName()
// docid: M:System.Xml.Schema.XmlSchemaType.get_QualifiedName
    open func get_QualifiedName() throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlQualifiedName__get_QualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlTypeCode get_TypeCode()
// docid: M:System.Xml.Schema.XmlSchemaType.get_TypeCode
    open func get_TypeCode() throws -> dotnet.System.Xml.Schema.XmlTypeCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaType_XmlTypeCode__get_TypeCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlTypeCode(val: __return);
        }
    }
    /**
    Gets the post-compilation object type or the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element. This is a post-schema-compilation infoset property.

    */
    open var BaseSchemaType : Optional<dotnet.System.Object> {
        get {
            return try! get_BaseSchemaType();
        }
    }
    /**
    Gets the post-compilation value for the base type of this schema type.

    */
    open var BaseXmlSchemaType : Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        get {
            return try! get_BaseXmlSchemaType();
        }
    }
    /**
    Gets the post-compilation value for the data type of the complex type.

    */
    open var Datatype : Optional<dotnet.System.Xml.Schema.XmlSchemaDatatype> {
        get {
            return try! get_Datatype();
        }
    }
    /**
    Gets the post-compilation information on how this element was derived from its base type.

    */
    open var DerivedBy : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_DerivedBy();
        }
    }
    /**
    Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.

    */
    open var Final : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_Final();
        }
        set(v) {
            return try! set_Final(value: v);
        }
    }
    /**
    Gets the post-compilation value of the  property.

    */
    open var FinalResolved : dotnet.System.Xml.Schema.XmlSchemaDerivationMethod {
        get {
            return try! get_FinalResolved();
        }
    }
    /**
    Gets or sets a value indicating if this type has a mixed content model. This property is only valid in a complex type.

    */
    open var IsMixed : Bool {
        get {
            return try! get_IsMixed();
        }
        set(v) {
            return try! set_IsMixed(value: v);
        }
    }
    /**
    Gets or sets the name of the type.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets the qualified name for the type built from the  attribute of this type. This is a post-schema-compilation property.

    */
    open var QualifiedName : dotnet.System.Xml.XmlQualifiedName {
        get {
            return try! get_QualifiedName();
        }
    }
    /**
    Gets the  of the type.

    */
    open var TypeCode : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
            return try! get_TypeCode();
        }
    }
} // XmlSchemaType


// type: System.Xml.Schema.XmlSchemaUnique
    /**
    Represents the  element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to identify a unique constraint among a set of elements.

    */
open class XmlSchemaUnique
    :
    dotnet.System.Xml.Schema.XmlSchemaIdentityConstraint
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaUnique_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaUnique.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaUnique_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaUnique


// type: System.Xml.Schema.XmlSchemaUse
    /**
    Indicator of how the attribute is used.

    */
public struct XmlSchemaUse : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaUse_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaUse None
    /**
    Attribute use not specified.

    */
    public static var None : dotnet.System.Xml.Schema.XmlSchemaUse {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaUse(val: System_Xml_Schema_XmlSchemaUse_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaUse Optional
    /**
    Attribute is optional.

    */
    public static var Optional : dotnet.System.Xml.Schema.XmlSchemaUse {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaUse(val: System_Xml_Schema_XmlSchemaUse_get_Optional());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaUse Prohibited
    /**
    Attribute cannot be used.

    */
    public static var Prohibited : dotnet.System.Xml.Schema.XmlSchemaUse {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaUse(val: System_Xml_Schema_XmlSchemaUse_get_Prohibited());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaUse Required
    /**
    Attribute must appear once.

    */
    public static var Required : dotnet.System.Xml.Schema.XmlSchemaUse {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaUse(val: System_Xml_Schema_XmlSchemaUse_get_Required());
            return __return;
        }
    }
} // XmlSchemaUse


// type: System.Xml.Schema.XmlSchemaValidationException
    /**
    Represents the exception thrown when XML Schema Definition Language (XSD) schema validation errors and warnings are encountered in an XML document being validated.

    */
open class XmlSchemaValidationException
    :
    dotnet.System.Xml.Schema.XmlSchemaException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaValidationException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaValidationException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaValidationException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the exception message specified.

    - Parameter message: A  description of the error condition.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaValidationException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the exception message and original  object that caused this exception specified.

    - Parameter message: A  description of the error condition.
    - Parameter innerException: The original  object that caused this exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaValidationException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Int32, System.Int32)
// docid: M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the exception message specified, and the original  object, line number, and line position of the XML that cause this exception specified.

    - Parameter message: A  description of the error condition.
    - Parameter innerException: The original  object that caused this exception.
    - Parameter lineNumber: The line number of the XML that caused this exception.
    - Parameter linePosition: The line position of the XML that caused this exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>, lineNumber : Swift.Int32, linePosition : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaValidationException_ctor_0__4__String_Exception_i32_i32(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil, lineNumber, linePosition);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Constructs a new  object with the given  and  information that contains all the properties of the .

    - Parameter info: 
        
      
    - Parameter context: 
        
      
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidationException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_SourceObject()
// docid: M:System.Xml.Schema.XmlSchemaValidationException.get_SourceObject
    open func get_SourceObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidationException_Object__get_SourceObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the XML node that caused this .

    */
    open var SourceObject : Optional<dotnet.System.Object> {
        get {
            return try! get_SourceObject();
        }
    }
} // XmlSchemaValidationException


// type: System.Xml.Schema.XmlSchemaValidationFlags
    /**
    Specifies schema validation options used by the  and  classes.

    */
public struct XmlSchemaValidationFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaValidationFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaValidationFlags None
    /**
    Do not process identity constraints, inline schemas, schema location hints, or report schema validation warnings.

    */
    public static var None : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: System_Xml_Schema_XmlSchemaValidationFlags_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidationFlags ProcessInlineSchema
    /**
    Process inline schemas encountered during validation.

    */
    public static var ProcessInlineSchema : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: System_Xml_Schema_XmlSchemaValidationFlags_get_ProcessInlineSchema());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidationFlags ProcessSchemaLocation
    /**
    Process schema location hints (xsi:schemaLocation, xsi:noNamespaceSchemaLocation) encountered during validation.

    */
    public static var ProcessSchemaLocation : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: System_Xml_Schema_XmlSchemaValidationFlags_get_ProcessSchemaLocation());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidationFlags ReportValidationWarnings
    /**
    Report schema validation warnings encountered during validation.

    */
    public static var ReportValidationWarnings : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: System_Xml_Schema_XmlSchemaValidationFlags_get_ReportValidationWarnings());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidationFlags ProcessIdentityConstraints
    /**
    Process identity constraints (xs:ID, xs:IDREF, xs:key, xs:keyref, xs:unique) encountered during validation.

    */
    public static var ProcessIdentityConstraints : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: System_Xml_Schema_XmlSchemaValidationFlags_get_ProcessIdentityConstraints());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidationFlags AllowXmlAttributes
    /**
    Allow xml:(ASTERISK) attributes even if they are not defined in the schema. The attributes will be validated based on their data type.

    */
    public static var AllowXmlAttributes : dotnet.System.Xml.Schema.XmlSchemaValidationFlags {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidationFlags(val: System_Xml_Schema_XmlSchemaValidationFlags_get_AllowXmlAttributes());
            return __return;
        }
    }
} // XmlSchemaValidationFlags


// type: System.Xml.Schema.XmlSchemaValidator
    /**
    Represents an XML Schema Definition Language (XSD) Schema validation engine. The  class cannot be inherited.

    */
public final class XmlSchemaValidator
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaValidator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.XmlNameTable, System.Xml.Schema.XmlSchemaSet, System.Xml.IXmlNamespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags)
// docid: M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)
    /**
    Initializes a new instance of the  class.

    - Parameter nameTable: An  object containing element and attribute names as atomized strings.
    - Parameter schemas: An  object containing the XML Schema Definition Language (XSD) schemas used for validation.
    - Parameter namespaceResolver: An  object used for resolving namespaces encountered during validation.
    - Parameter validationFlags: An  value specifying schema validation options.
    */
    public init(nameTable : dotnet.System.Xml.XmlNameTable, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, namespaceResolver : dotnet.System.Xml.IXmlNamespaceResolver, validationFlags : dotnet.System.Xml.Schema.XmlSchemaValidationFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaValidator_ctor_0__4__XmlNameTable_XmlSchemaSet_IXmlNamespaceResolver_XmlSchemaValidationFlags(&__thrown, nameTable.get_handle(), schemas.get_handle(), namespaceResolver.get_handle(), validationFlags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddSchema(System.Xml.Schema.XmlSchema)
// docid: M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)
    /**
    Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.

    - Parameter schema: An  object to add to the set of schemas used for validation.
    */
    public func AddSchema(schema : dotnet.System.Xml.Schema.XmlSchema) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__AddSchema_0__1__XmlSchema(&__thrown, self.get_handle(), schema.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndValidation()
// docid: M:System.Xml.Schema.XmlSchemaValidator.EndValidation
    /**
    Ends validation and checks identity constraints for the entire XML document.

    */
    public func EndValidation() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__EndValidation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes()
// docid: M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes
    /**
    Returns the expected attributes for the current element context.

    - Returns: An array of  objects or an empty array if there are no expected attributes.

    */
    public func GetExpectedAttributes() throws -> dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_XmlSchemaAttributeArray__GetExpectedAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaAttribute>(hndl : __return);
        }
    }
    // System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles()
// docid: M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles
    /**
    Returns the expected particles in the current element context.

    - Returns: An array of  objects or an empty array if there are no expected particles.

    */
    public func GetExpectedParticles() throws -> dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaParticle> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_XmlSchemaParticleArray__GetExpectedParticles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.Schema.XmlSchemaParticle>(hndl : __return);
        }
    }
    // void GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)
// docid: M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)
    /**
    Validates identity constraints on the default attributes and populates the  specified with  objects for any attributes with default values that have not been previously validated using the  method in the element context.

    - Parameter defaultAttributes: An  to populate with  objects for any attributes not yet encountered during validation in the element context.
    */
    public func GetUnspecifiedDefaultAttributes(defaultAttributes : dotnet.System.Collections.ArrayList) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__GetUnspecifiedDefaultAttributes_0__1__ArrayList(&__thrown, self.get_handle(), defaultAttributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Initialize()
// docid: M:System.Xml.Schema.XmlSchemaValidator.Initialize
    /**
    Initializes the state of the  object.

    */
    public func Initialize() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__Initialize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Initialize(System.Xml.Schema.XmlSchemaObject)
// docid: M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)
    /**
    Initializes the state of the  object using the  specified for partial validation.

    - Parameter partialValidationType: An , , or  object used to initialize the validation context of the  object for partial validation.
    */
    public func Initialize(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__Initialize_0__1__XmlSchemaObject(&__thrown, self.get_handle(), partialValidationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)
    /**
    Skips validation of the current element content and prepares the  object to validate content in the parent element's context.

    - Parameter schemaInfo: An  object whose properties are set if the current element content is successfully skipped. This parameter can be .
    */
    public func SkipToEndElement(schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__SkipToEndElement_0__1__XmlSchemaInfo(&__thrown, self.get_handle(), schemaInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object ValidateAttribute(System.String, System.String, System.String, System.Xml.Schema.XmlSchemaInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
    /**
    Validates the attribute name, namespace URI, and value in the current element context.

    - Parameter localName: The local name of the attribute to validate.
    - Parameter namespaceUri: The namespace URI of the attribute to validate.
    - Parameter attributeValue: The value of the attribute to validate.
    - Parameter schemaInfo: An  object whose properties are set on successful validation of the attribute. This parameter can be .
    - Returns: The validated attribute's value.

    */
    public func ValidateAttribute(localName : dotnet.System.String, namespaceUri : dotnet.System.String, attributeValue : dotnet.System.String, schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_Object__ValidateAttribute_0__4__String_String_String_XmlSchemaInfo(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), attributeValue.get_handle(), schemaInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ValidateAttribute(System.String, System.String, System.Xml.Schema.XmlValueGetter, System.Xml.Schema.XmlSchemaInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)
    /**
    Validates the attribute name, namespace URI, and value in the current element context.

    - Parameter localName: The local name of the attribute to validate.
    - Parameter namespaceUri: The namespace URI of the attribute to validate.
    - Parameter attributeValue: An  used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.
    - Parameter schemaInfo: An  object whose properties are set on successful validation of the attribute. This parameter and can be .
    - Returns: The validated attribute's value.

    */
    public func ValidateAttribute(localName : dotnet.System.String, namespaceUri : dotnet.System.String, attributeValue : dotnet.System.Xml.Schema.XmlValueGetter, schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_Object__ValidateAttribute_0__4__String_String_XmlValueGetter_XmlSchemaInfo(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), attributeValue.get_handle(), schemaInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public func ValidateAttribute(localName : dotnet.System.String, namespaceUri : dotnet.System.String, attributeValue : @escaping () throws -> dotnet.System.Object, schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws -> Optional<dotnet.System.Object> {
        let del_attributeValue = try dotnet.System.Xml.Schema.XmlValueGetter(attributeValue);
        return try ValidateAttribute(localName: localName, namespaceUri: namespaceUri, attributeValue: del_attributeValue, schemaInfo: schemaInfo);
    }
    // void ValidateElement(System.String, System.String, System.Xml.Schema.XmlSchemaInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
    /**
    Validates the element in the current context.

    - Parameter localName: The local name of the element to validate.
    - Parameter namespaceUri: The namespace URI of the element to validate.
    - Parameter schemaInfo: An  object whose properties are set on successful validation of the element's name. This parameter can be .
    */
    public func ValidateElement(localName : dotnet.System.String, namespaceUri : dotnet.System.String, schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateElement_0__3__String_String_XmlSchemaInfo(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), schemaInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateElement(System.String, System.String, System.Xml.Schema.XmlSchemaInfo, System.String, System.String, System.String, System.String)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)
    /**
    Validates the element in the current context with the xsi:Type, xsi:Nil, xsi:SchemaLocation, and xsi:NoNamespaceSchemaLocation attribute values specified.

    - Parameter localName: The local name of the element to validate.
    - Parameter namespaceUri: The namespace URI of the element to validate.
    - Parameter schemaInfo: An  object whose properties are set on successful validation of the element's name. This parameter can be .
    - Parameter xsiType: The xsi:Type attribute value of the element. This parameter can be .
    - Parameter xsiNil: The xsi:Nil attribute value of the element. This parameter can be .
    - Parameter xsiSchemaLocation: The xsi:SchemaLocation attribute value of the element. This parameter can be .
    - Parameter xsiNoNamespaceSchemaLocation: The xsi:NoNamespaceSchemaLocation attribute value of the element. This parameter can be .
    */
    public func ValidateElement(localName : dotnet.System.String, namespaceUri : dotnet.System.String, schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>, xsiType : Optional<dotnet.System.String>, xsiNil : Optional<dotnet.System.String>, xsiSchemaLocation : Optional<dotnet.System.String>, xsiNoNamespaceSchemaLocation : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateElement_0__7__String_String_XmlSchemaInfo_String_String_String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), schemaInfo?.get_handle() ?? nil, xsiType?.get_handle() ?? nil, xsiNil?.get_handle() ?? nil, xsiSchemaLocation?.get_handle() ?? nil, xsiNoNamespaceSchemaLocation?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)
    /**
    Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.

    - Parameter schemaInfo: An  object whose properties are set on successful validation of the element. This parameter can be .
    - Returns: The parsed, typed text value of the element if the element has simple content.

    */
    public func ValidateEndElement(schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_Object__ValidateEndElement_0__1__XmlSchemaInfo(&__thrown, self.get_handle(), schemaInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ValidateEndElement(System.Xml.Schema.XmlSchemaInfo, System.Object)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)
    /**
    Verifies if the text content of the element specified is valid according to its data type.

    - Parameter schemaInfo: An  object whose properties are set on successful validation of the text content of the element. This parameter can be .
    - Parameter typedValue: The typed text content of the element.
    - Returns: The parsed, typed simple content of the element.

    */
    public func ValidateEndElement(schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>, typedValue : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_Object__ValidateEndElement_0__2__XmlSchemaInfo_Object(&__thrown, self.get_handle(), schemaInfo?.get_handle() ?? nil, typedValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)
    /**
    Verifies whether all the required attributes in the element context are present and prepares the  object to validate the child content of the element.

    - Parameter schemaInfo: An  object whose properties are set on successful verification that all the required attributes in the element context are present. This parameter can be .
    */
    public func ValidateEndOfAttributes(schemaInfo : Optional<dotnet.System.Xml.Schema.XmlSchemaInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateEndOfAttributes_0__1__XmlSchemaInfo(&__thrown, self.get_handle(), schemaInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateText(System.String)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)
    /**
    Validates whether the text  specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.

    - Parameter elementValue: A text  to validate in the current element context.
    */
    public func ValidateText(elementValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateText_0__1__String(&__thrown, self.get_handle(), elementValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateText(System.Xml.Schema.XmlValueGetter)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)
    /**
    Validates whether the text returned by the  object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.

    - Parameter elementValue: An  used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.
    */
    public func ValidateText(elementValue : dotnet.System.Xml.Schema.XmlValueGetter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateText_0__1__XmlValueGetter(&__thrown, self.get_handle(), elementValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func ValidateText(elementValue : @escaping () throws -> dotnet.System.Object) throws {
        let del_elementValue = try dotnet.System.Xml.Schema.XmlValueGetter(elementValue);
        return try ValidateText(elementValue: del_elementValue);
    }
    // void ValidateWhitespace(System.String)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)
    /**
    Validates whether the white space in the  specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.

    - Parameter elementValue: A white space  to validate in the current element context.
    */
    public func ValidateWhitespace(elementValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateWhitespace_0__1__String(&__thrown, self.get_handle(), elementValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateWhitespace(System.Xml.Schema.XmlValueGetter)
// docid: M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)
    /**
    Validates whether the white space returned by the  object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.

    - Parameter elementValue: An  used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.
    */
    public func ValidateWhitespace(elementValue : dotnet.System.Xml.Schema.XmlValueGetter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__ValidateWhitespace_0__1__XmlValueGetter(&__thrown, self.get_handle(), elementValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func ValidateWhitespace(elementValue : @escaping () throws -> dotnet.System.Object) throws {
        let del_elementValue = try dotnet.System.Xml.Schema.XmlValueGetter(elementValue);
        return try ValidateWhitespace(elementValue: del_elementValue);
    }
    // [IsSpecialName] System.Xml.IXmlLineInfo get_LineInfoProvider()
// docid: M:System.Xml.Schema.XmlSchemaValidator.get_LineInfoProvider
    public func get_LineInfoProvider() throws -> dotnet.System.Xml.IXmlLineInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_IXmlLineInfo__get_LineInfoProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.IXmlLineInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_LineInfoProvider(System.Xml.IXmlLineInfo)
// docid: M:System.Xml.Schema.XmlSchemaValidator.set_LineInfoProvider(System.Xml.IXmlLineInfo)
    public func set_LineInfoProvider(value : dotnet.System.Xml.IXmlLineInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__set_LineInfoProvider_0__1__IXmlLineInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_SourceUri()
// docid: M:System.Xml.Schema.XmlSchemaValidator.get_SourceUri
    public func get_SourceUri() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_Uri__get_SourceUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SourceUri(System.Uri)
// docid: M:System.Xml.Schema.XmlSchemaValidator.set_SourceUri(System.Uri)
    public func set_SourceUri(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__set_SourceUri_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_ValidationEventSender()
// docid: M:System.Xml.Schema.XmlSchemaValidator.get_ValidationEventSender
    public func get_ValidationEventSender() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaValidator_Object__get_ValidationEventSender_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValidationEventSender(System.Object)
// docid: M:System.Xml.Schema.XmlSchemaValidator.set_ValidationEventSender(System.Object)
    public func set_ValidationEventSender(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__set_ValidationEventSender_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.Schema.XmlSchemaValidator.set_XmlResolver(System.Xml.XmlResolver)
    public func set_XmlResolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchemaValidator.add_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    public func add_ValidationEventHandler(value : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__add_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try add_ValidationEventHandler(value: del_value);
    }
    // [IsSpecialName] void remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.XmlSchemaValidator.remove_ValidationEventHandler(System.Xml.Schema.ValidationEventHandler)
    public func remove_ValidationEventHandler(value : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaValidator_void__remove_ValidationEventHandler_0__1__ValidationEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_ValidationEventHandler(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Schema.ValidationEventHandler(value);
        return try remove_ValidationEventHandler(value: del_value);
    }
    /**
    Gets or sets the line number information for the XML node being validated.

    */
    public var LineInfoProvider : dotnet.System.Xml.IXmlLineInfo {
        get {
            return try! get_LineInfoProvider();
        }
        set(v) {
            return try! set_LineInfoProvider(value: v);
        }
    }
    /**
    Gets or sets the source URI for the XML node being validated.

    */
    public var SourceUri : Optional<dotnet.System.Uri> {
        get {
            return try! get_SourceUri();
        }
        set(v) {
            return try! set_SourceUri(value: v!);
        }
    }
    /**
    Gets or sets the object sent as the sender object of a validation event.

    */
    public var ValidationEventSender : dotnet.System.Object {
        get {
            return try! get_ValidationEventSender();
        }
        set(v) {
            return try! set_ValidationEventSender(value: v);
        }
    }
} // XmlSchemaValidator


// type: System.Xml.Schema.XmlSchemaValidity
    /**
    Represents the validity of an XML item validated by the  class.

    */
public struct XmlSchemaValidity : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaValidity_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSchemaValidity NotKnown
    /**
    The validity of the XML item is not known.

    */
    public static var NotKnown : dotnet.System.Xml.Schema.XmlSchemaValidity {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidity(val: System_Xml_Schema_XmlSchemaValidity_get_NotKnown());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidity Valid
    /**
    The XML item is valid.

    */
    public static var Valid : dotnet.System.Xml.Schema.XmlSchemaValidity {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidity(val: System_Xml_Schema_XmlSchemaValidity_get_Valid());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSchemaValidity Invalid
    /**
    The XML item is invalid.

    */
    public static var Invalid : dotnet.System.Xml.Schema.XmlSchemaValidity {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSchemaValidity(val: System_Xml_Schema_XmlSchemaValidity_get_Invalid());
            return __return;
        }
    }
} // XmlSchemaValidity


// type: System.Xml.Schema.XmlSchemaWhiteSpaceFacet
    /**
    Represents the World Wide Web Consortium (W3C)  facet.

    */
open class XmlSchemaWhiteSpaceFacet
    :
    dotnet.System.Xml.Schema.XmlSchemaFacet
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaWhiteSpaceFacet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaWhiteSpaceFacet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlSchemaWhiteSpaceFacet


// type: System.Xml.Schema.XmlSchemaXPath
    /**
    Represents the World Wide Web Consortium (W3C)  element.

    */
open class XmlSchemaXPath
    :
    dotnet.System.Xml.Schema.XmlSchemaAnnotated
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSchemaXPath_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Schema.XmlSchemaXPath.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlSchemaXPath_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_XPath()
// docid: M:System.Xml.Schema.XmlSchemaXPath.get_XPath
    open func get_XPath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlSchemaXPath_String__get_XPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_XPath(System.String)
// docid: M:System.Xml.Schema.XmlSchemaXPath.set_XPath(System.String)
    open func set_XPath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_XmlSchemaXPath_void__set_XPath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the attribute for the XPath expression.

    */
    open var XPath : Optional<dotnet.System.String> {
        get {
            return try! get_XPath();
        }
        set(v) {
            return try! set_XPath(value: v!);
        }
    }
} // XmlSchemaXPath


// type: System.Xml.Schema.XmlSeverityType
    /**
    Represents the severity of the validation event.

    */
public struct XmlSeverityType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlSeverityType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlSeverityType Error
    /**
    Indicates a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.

    */
    public static var Error : dotnet.System.Xml.Schema.XmlSeverityType {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSeverityType(val: System_Xml_Schema_XmlSeverityType_get_Error());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlSeverityType Warning
    /**
    Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD, or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.

    */
    public static var Warning : dotnet.System.Xml.Schema.XmlSeverityType {
        get {
        let __return = dotnet.System.Xml.Schema.XmlSeverityType(val: System_Xml_Schema_XmlSeverityType_get_Warning());
            return __return;
        }
    }
} // XmlSeverityType


// type: System.Xml.Schema.XmlTypeCode
    /**
    Represents the W3C XML Schema Definition Language (XSD) schema types.

    */
public struct XmlTypeCode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlTypeCode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Schema.XmlTypeCode None
    /**
    No type information.

    */
    public static var None : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Item
    /**
    An item such as a node or atomic value.

    */
    public static var Item : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Item());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Node
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Node : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Node());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Document
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Document : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Document());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Element
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Element : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Element());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Attribute
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Attribute : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Attribute());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Namespace
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Namespace : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Namespace());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode ProcessingInstruction
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var ProcessingInstruction : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_ProcessingInstruction());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Comment
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Comment : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Comment());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Text
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var Text : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Text());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode AnyAtomicType
    /**
    Any atomic value of a union.

    */
    public static var AnyAtomicType : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_AnyAtomicType());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode UntypedAtomic
    /**
    An untyped atomic value.

    */
    public static var UntypedAtomic : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_UntypedAtomic());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode String
    /**
    A W3C XML Schema  type.

    */
    public static var String : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_String());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Boolean
    /**
    A W3C XML Schema  type.

    */
    public static var Boolean : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Boolean());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Decimal
    /**
    A W3C XML Schema  type.

    */
    public static var Decimal : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Decimal());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Float
    /**
    A W3C XML Schema  type.

    */
    public static var Float : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Float());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Double
    /**
    A W3C XML Schema  type.

    */
    public static var Double : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Double());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Duration
    /**
    A W3C XML Schema  type.

    */
    public static var Duration : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Duration());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode DateTime
    /**
    A W3C XML Schema  type.

    */
    public static var DateTime : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_DateTime());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Time
    /**
    A W3C XML Schema  type.

    */
    public static var Time : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Time());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Date
    /**
    A W3C XML Schema  type.

    */
    public static var Date : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Date());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode GYearMonth
    /**
    A W3C XML Schema  type.

    */
    public static var GYearMonth : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_GYearMonth());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode GYear
    /**
    A W3C XML Schema  type.

    */
    public static var GYear : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_GYear());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode GMonthDay
    /**
    A W3C XML Schema  type.

    */
    public static var GMonthDay : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_GMonthDay());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode GDay
    /**
    A W3C XML Schema  type.

    */
    public static var GDay : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_GDay());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode GMonth
    /**
    A W3C XML Schema  type.

    */
    public static var GMonth : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_GMonth());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode HexBinary
    /**
    A W3C XML Schema  type.

    */
    public static var HexBinary : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_HexBinary());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Base64Binary
    /**
    A W3C XML Schema  type.

    */
    public static var Base64Binary : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Base64Binary());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode AnyUri
    /**
    A W3C XML Schema  type.

    */
    public static var AnyUri : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_AnyUri());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode QName
    /**
    A W3C XML Schema  type.

    */
    public static var QName : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_QName());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Notation
    /**
    A W3C XML Schema  type.

    */
    public static var Notation : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Notation());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode NormalizedString
    /**
    A W3C XML Schema  type.

    */
    public static var NormalizedString : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_NormalizedString());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Token
    /**
    A W3C XML Schema  type.

    */
    public static var Token : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Token());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Language
    /**
    A W3C XML Schema  type.

    */
    public static var Language : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Language());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode NmToken
    /**
    A W3C XML Schema  type.

    */
    public static var NmToken : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_NmToken());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Name
    /**
    A W3C XML Schema  type.

    */
    public static var Name : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Name());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode NCName
    /**
    A W3C XML Schema  type.

    */
    public static var NCName : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_NCName());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Id
    /**
    A W3C XML Schema  type.

    */
    public static var Id : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Id());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Idref
    /**
    A W3C XML Schema  type.

    */
    public static var Idref : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Idref());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Entity
    /**
    A W3C XML Schema  type.

    */
    public static var Entity : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Entity());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Integer
    /**
    A W3C XML Schema  type.

    */
    public static var Integer : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Integer());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode NonPositiveInteger
    /**
    A W3C XML Schema  type.

    */
    public static var NonPositiveInteger : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_NonPositiveInteger());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode NegativeInteger
    /**
    A W3C XML Schema  type.

    */
    public static var NegativeInteger : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_NegativeInteger());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Long
    /**
    A W3C XML Schema  type.

    */
    public static var Long : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Long());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Int
    /**
    A W3C XML Schema  type.

    */
    public static var Int : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Int());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Short
    /**
    A W3C XML Schema  type.

    */
    public static var Short : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Short());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode Byte
    /**
    A W3C XML Schema  type.

    */
    public static var Byte : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_Byte());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode NonNegativeInteger
    /**
    A W3C XML Schema  type.

    */
    public static var NonNegativeInteger : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_NonNegativeInteger());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode UnsignedLong
    /**
    A W3C XML Schema  type.

    */
    public static var UnsignedLong : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_UnsignedLong());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode UnsignedInt
    /**
    A W3C XML Schema  type.

    */
    public static var UnsignedInt : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_UnsignedInt());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode UnsignedShort
    /**
    A W3C XML Schema  type.

    */
    public static var UnsignedShort : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_UnsignedShort());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode UnsignedByte
    /**
    A W3C XML Schema  type.

    */
    public static var UnsignedByte : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_UnsignedByte());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode PositiveInteger
    /**
    A W3C XML Schema  type.

    */
    public static var PositiveInteger : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_PositiveInteger());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode YearMonthDuration
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var YearMonthDuration : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_YearMonthDuration());
            return __return;
        }
    }
    // static field: System.Xml.Schema.XmlTypeCode DayTimeDuration
    /**
    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    */
    public static var DayTimeDuration : dotnet.System.Xml.Schema.XmlTypeCode {
        get {
        let __return = dotnet.System.Xml.Schema.XmlTypeCode(val: System_Xml_Schema_XmlTypeCode_get_DayTimeDuration());
            return __return;
        }
    }
} // XmlTypeCode


// type: System.Xml.Schema.XmlValueGetter
    /**
    A  used by the  class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.

    */
public final class XmlValueGetter
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Schema_XmlValueGetter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object Invoke()
// docid: M:System.Xml.Schema.XmlValueGetter.Invoke
    public func Invoke() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlValueGetter_Object__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:System.Xml.Schema.XmlValueGetter.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlValueGetter_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Schema.XmlValueGetter.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlValueGetter_Object__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Object) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NullableHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NullableHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NullableHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NullableHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Schema_XmlValueGetter_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Invoke()
// docid: M:System.Xml.Schema.XmlValueGetter.Invoke
    public func callAsFunction() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_XmlValueGetter_Object__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlValueGetter


}

// System.Xml.Serialization
extension System.Xml.Serialization {
// type: System.Xml.Serialization.IXmlSerializable
    /**
    Provides custom formatting for XML serialization and deserialization.

    */
open class IXmlSerializable
    :
    SGBridgeGenericValue,
    System_Xml_Serialization_IXmlSerializable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_IXmlSerializable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Xml.Schema.XmlSchema GetSchema()
// docid: M:System.Xml.Serialization.IXmlSerializable.GetSchema
    /**
    This method is reserved and should not be used. When implementing the  interface, you should return  ( in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the  to the class.

    - Returns: An  that describes the XML representation of the object that is produced by the  method and consumed by the  method.

    */
    open func GetSchema() throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_IXmlSerializable_XmlSchema__GetSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReadXml(System.Xml.XmlReader)
// docid: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    /**
    Generates an object from its XML representation.

    - Parameter reader: The  stream from which the object is deserialized.
    */
    open func ReadXml(reader : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_IXmlSerializable_void__ReadXml_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter)
// docid: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    /**
    Converts an object into its XML representation.

    - Parameter writer: The  stream to which the object is serialized.
    */
    open func WriteXml(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_IXmlSerializable_void__WriteXml_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IXmlSerializable


// type: System.Xml.Serialization.XmlAnyAttributeAttribute
    /**
    Specifies that the member (a field that returns an array of  objects) can contain any XML attributes.

    */
open class XmlAnyAttributeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAnyAttributeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor
    /**
    Constructs a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAnyAttributeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlAnyAttributeAttribute


// type: System.Xml.Serialization.XmlAnyElementAttribute
    /**
    Specifies that the member (a field that returns an array of  or  objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.

    */
open class XmlAnyElementAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAnyElementAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAnyElementAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the XML element name generated in the XML document.

    - Parameter name: The name of the XML element that the  generates.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAnyElementAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class and specifies the XML element name generated in the XML document and its XML namespace.

    - Parameter name: The name of the XML element that the  generates.
    - Parameter ns: The XML namespace of the XML element.
    */
    public init(name : Optional<dotnet.System.String>, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAnyElementAttribute_ctor_0__2__String_String(&__thrown, name?.get_handle() ?? nil, ns?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAnyElementAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:System.Xml.Serialization.XmlAnyElementAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAnyElementAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XML element name.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    Gets or sets the XML namespace generated in the XML document.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the explicit order in which the elements are serialized or deserialized.

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // XmlAnyElementAttribute


// type: System.Xml.Serialization.XmlAttributeAttribute
    /**
    Specifies that the  must serialize the class member as an XML attribute.

    */
open class XmlAttributeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlAttributeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the generated XML attribute.

    - Parameter attributeName: The name of the XML attribute that the  generates.
    */
    public init(attributeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributeAttribute_ctor_0__1__String(&__thrown, attributeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter attributeName: The name of the XML attribute that is generated.
    - Parameter type: The  used to store the attribute.
    */
    public init(attributeName : Optional<dotnet.System.String>, type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributeAttribute_ctor_0__2__String_Type(&__thrown, attributeName?.get_handle() ?? nil, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter type: The  used to store the attribute.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlAttributeAttribute_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_AttributeName()
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.get_AttributeName
    open func get_AttributeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeAttribute_String__get_AttributeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AttributeName(System.String)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.set_AttributeName(System.String)
    open func set_AttributeName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeAttribute_void__set_AttributeName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_Form()
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.get_Form
    open func get_Form() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeAttribute_XmlSchemaForm__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_Form(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.set_Form(System.Xml.Schema.XmlSchemaForm)
    open func set_Form(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeAttribute_void__set_Form_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlAttributeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.XmlAttributeAttribute.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlAttributeAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the XML attribute.

    */
    open var AttributeName : dotnet.System.String {
        get {
            return try! get_AttributeName();
        }
        set(v) {
            return try! set_AttributeName(value: v);
        }
    }
    /**
    Gets or sets the XSD data type of the XML attribute generated by the .

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the XML attribute name generated by the  is qualified.

    */
    open var Form : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    Gets or sets the XML namespace of the XML attribute.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the complex type of the XML attribute.

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // XmlAttributeAttribute


// type: System.Xml.Serialization.XmlElementAttribute
    /**
    Indicates that a public field or property represents an XML element when the  serializes or deserializes the object that contains it.

    */
open class XmlElementAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlElementAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlElementAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlElementAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the XML element.

    - Parameter elementName: The XML element name of the serialized member.
    */
    public init(elementName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlElementAttribute_ctor_0__1__String(&__thrown, elementName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  and specifies the name of the XML element and a derived type for the member to which the  is applied. This member type is used when the  serializes the object that contains it.

    - Parameter elementName: The XML element name of the serialized member.
    - Parameter type: The  of an object derived from the member's type.
    */
    public init(elementName : Optional<dotnet.System.String>, type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlElementAttribute_ctor_0__2__String_Type(&__thrown, elementName?.get_handle() ?? nil, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class and specifies a type for the member to which the  is applied. This type is used by the  when serializing or deserializing object that contains it.

    - Parameter type: The  of an object derived from the member's type.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlElementAttribute_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ElementName(System.String)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_ElementName(System.String)
    open func set_ElementName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_ElementName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaForm get_Form()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_Form
    open func get_Form() throws -> dotnet.System.Xml.Schema.XmlSchemaForm {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_XmlSchemaForm__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaForm(val: __return);
        }
    }
    // [IsSpecialName] void set_Form(System.Xml.Schema.XmlSchemaForm)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_Form(System.Xml.Schema.XmlSchemaForm)
    open func set_Form(value : dotnet.System.Xml.Schema.XmlSchemaForm) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_Form_0__1__XmlSchemaForm(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNullable(bool)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_IsNullable(System.Boolean)
    open func set_IsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_IsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.XmlElementAttribute.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlElementAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.XmlElementAttribute.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlElementAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the .

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the name of the generated XML element.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
        set(v) {
            return try! set_ElementName(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the element is qualified.

    */
    open var Form : dotnet.System.Xml.Schema.XmlSchemaForm {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  must serialize a member that is set to  as an empty tag with the  attribute set to .

    */
    open var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
        set(v) {
            return try! set_IsNullable(value: v);
        }
    }
    /**
    Gets or sets the namespace assigned to the XML element that results when the class is serialized.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the explicit order in which the elements are serialized or deserialized.

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    Gets or sets the object type used to represent the XML element.

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // XmlElementAttribute


// type: System.Xml.Serialization.XmlEnumAttribute
    /**
    Controls how the  serializes an enumeration member.

    */
open class XmlEnumAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlEnumAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlEnumAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlEnumAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class, and specifies the XML value that the  generates or recognizes (when it serializes or deserializes the enumeration, respectively).

    - Parameter name: The overriding name of the enumeration member.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlEnumAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Serialization.XmlEnumAttribute.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlEnumAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Serialization.XmlEnumAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlEnumAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the value generated in an XML-document instance when the  serializes an enumeration, or the value recognized when it deserializes the enumeration member.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // XmlEnumAttribute


// type: System.Xml.Serialization.XmlIgnoreAttribute
    /**
    Instructs the  method of the  not to serialize the public field or public read/write property value.

    */
open class XmlIgnoreAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlIgnoreAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlIgnoreAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlIgnoreAttribute


// type: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute
    /**
    Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.

    */
open class XmlNamespaceDeclarationsAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlNamespaceDeclarationsAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlNamespaceDeclarationsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlNamespaceDeclarationsAttribute


// type: System.Xml.Serialization.XmlRootAttribute
    /**
    Controls XML serialization of the attribute target as an XML root element.

    */
open class XmlRootAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlRootAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlRootAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlRootAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies the name of the XML root element.

    - Parameter elementName: The name of the XML root element.
    */
    public init(elementName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlRootAttribute_ctor_0__1__String(&__thrown, elementName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.XmlRootAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlRootAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.XmlRootAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlRootAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:System.Xml.Serialization.XmlRootAttribute.get_ElementName
    open func get_ElementName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlRootAttribute_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ElementName(System.String)
// docid: M:System.Xml.Serialization.XmlRootAttribute.set_ElementName(System.String)
    open func set_ElementName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlRootAttribute_void__set_ElementName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.Xml.Serialization.XmlRootAttribute.get_IsNullable
    open func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlRootAttribute_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsNullable(bool)
// docid: M:System.Xml.Serialization.XmlRootAttribute.set_IsNullable(System.Boolean)
    open func set_IsNullable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlRootAttribute_void__set_IsNullable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Xml.Serialization.XmlRootAttribute.get_Namespace
    open func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlRootAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Xml.Serialization.XmlRootAttribute.set_Namespace(System.String)
    open func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlRootAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XSD data type of the XML root element.

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the name of the XML element that is generated and recognized by the  class's  and  methods, respectively.

    */
    open var ElementName : dotnet.System.String {
        get {
            return try! get_ElementName();
        }
        set(v) {
            return try! set_ElementName(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  must serialize a member that is set to  into the  attribute set to .

    */
    open var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
        set(v) {
            return try! set_IsNullable(value: v);
        }
    }
    /**
    Gets or sets the namespace for the XML root element.

    */
    open var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
} // XmlRootAttribute


// type: System.Xml.Serialization.XmlSchemaProviderAttribute
    /**
    When applied to a type, stores the name of a static method of the type that returns an XML schema and a  (or  for anonymous types) that controls the serialization of the type.

    */
public final class XmlSchemaProviderAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSchemaProviderAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class, taking the name of the static method that supplies the type's XML schema.

    - Parameter methodName: The name of the static method that must be implemented.
    */
    public init(methodName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSchemaProviderAttribute_ctor_0__1__String(&__thrown, methodName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsAny()
// docid: M:System.Xml.Serialization.XmlSchemaProviderAttribute.get_IsAny
    public func get_IsAny() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaProviderAttribute_bool__get_IsAny_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsAny(bool)
// docid: M:System.Xml.Serialization.XmlSchemaProviderAttribute.set_IsAny(System.Boolean)
    public func set_IsAny(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSchemaProviderAttribute_void__set_IsAny_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MethodName()
// docid: M:System.Xml.Serialization.XmlSchemaProviderAttribute.get_MethodName
    public func get_MethodName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSchemaProviderAttribute_String__get_MethodName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class has contains only an  element.

    */
    public var IsAny : Bool {
        get {
            return try! get_IsAny();
        }
        set(v) {
            return try! set_IsAny(value: v);
        }
    }
    /**
    Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.

    */
    public var MethodName : Optional<dotnet.System.String> {
        get {
            return try! get_MethodName();
        }
    }
} // XmlSchemaProviderAttribute


// type: System.Xml.Serialization.XmlSerializerNamespaces
    /**
    Contains the XML namespaces and prefixes that the  uses to generate qualified names in an XML-document instance.

    */
open class XmlSerializerNamespaces
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlSerializerNamespaces_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerNamespaces_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Serialization.XmlSerializerNamespaces)
// docid: M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)
    /**
    Initializes a new instance of the  class, using the specified instance of  containing the collection of prefix and namespace pairs.

    - Parameter namespaces: An instance of the  containing the namespace and prefix pairs.
    */
    public init(namespaces : dotnet.System.Xml.Serialization.XmlSerializerNamespaces) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerNamespaces_ctor_0__1__XmlSerializerNamespaces(&__thrown, namespaces.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlQualifiedName[])
// docid: M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])
    /**
    Initializes a new instance of the  class.

    - Parameter namespaces: An array of  objects.
    */
    public init(namespaces : dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlSerializerNamespaces_ctor_0__1__XmlQualifiedNameArray(&__thrown, namespaces.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.String)
// docid: M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)
    /**
    Adds a prefix and namespace pair to an  object.

    - Parameter prefix: The prefix associated with an XML namespace.
    - Parameter ns: An XML namespace.
    */
    open func Add(prefix : dotnet.System.String, ns : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlSerializerNamespaces_void__Add_0__2__String_String(&__thrown, self.get_handle(), prefix.get_handle(), ns?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlQualifiedName[] ToArray()
// docid: M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray
    /**
    Gets the array of prefix and namespace pairs in an  object.

    - Returns: An array of  objects that are used as qualified names in an XML document.

    */
    open func ToArray() throws -> dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerNamespaces_XmlQualifiedNameArray__ToArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.XmlQualifiedName>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.Serialization.XmlSerializerNamespaces.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlSerializerNamespaces_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of prefix and namespace pairs in the collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // XmlSerializerNamespaces


// type: System.Xml.Serialization.XmlTextAttribute
    /**
    Indicates to the  that the member must be treated as XML text when the class that contains it is serialized or deserialized.

    */
open class XmlTextAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Serialization_XmlTextAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Serialization.XmlTextAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlTextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter type: The  of the member to be serialized.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Serialization_XmlTextAttribute_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DataType()
// docid: M:System.Xml.Serialization.XmlTextAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTextAttribute_String__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataType(System.String)
// docid: M:System.Xml.Serialization.XmlTextAttribute.set_DataType(System.String)
    open func set_DataType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlTextAttribute_void__set_DataType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Xml.Serialization.XmlTextAttribute.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Serialization_XmlTextAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:System.Xml.Serialization.XmlTextAttribute.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Serialization_XmlTextAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the XML Schema definition language (XSD) data type of the text generated by the .

    */
    open var DataType : dotnet.System.String {
        get {
            return try! get_DataType();
        }
        set(v) {
            return try! set_DataType(value: v);
        }
    }
    /**
    Gets or sets the type of the member.

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // XmlTextAttribute


}

// System.Xml.XPath
extension System.Xml.XPath {
// type: System.Xml.XPath.IXPathNavigable
    /**
    Provides an accessor to the  class.

    */
open class IXPathNavigable
    :
    SGBridgeGenericValue,
    System_Xml_XPath_IXPathNavigable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_IXPathNavigable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Xml.XPath.XPathNavigator CreateNavigator()
// docid: M:System.Xml.XPath.IXPathNavigable.CreateNavigator
    /**
    Returns a new  object.

    - Returns: An  object.

    */
    open func CreateNavigator() throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_IXPathNavigable_XPathNavigator__CreateNavigator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IXPathNavigable


// type: System.Xml.XPath.XPathExpression
    /**
    Provides a typed class that represents a compiled XPath expression.

    */
open class XPathExpression
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddSort(System.Object, System.Collections.IComparer)
// docid: M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)
    /**
    When overridden in a derived class, sorts the nodes selected by the XPath expression according to the specified  object.

    - Parameter expr: An object representing the sort key. This can be the  value of the node or an  object with a compiled XPath expression.
    - Parameter comparer: An  object that provides the specific data type comparisons for comparing two objects for equivalence.
    */
    open func AddSort(expr : dotnet.System.Object, comparer : dotnet.System.Collections.IComparer) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathExpression_void__AddSort_0__2__Object_IComparer(&__thrown, self.get_handle(), expr.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddSort(System.Object, System.Xml.XPath.XmlSortOrder, System.Xml.XPath.XmlCaseOrder, System.String, System.Xml.XPath.XmlDataType)
// docid: M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)
    /**
    When overridden in a derived class, sorts the nodes selected by the XPath expression according to the supplied parameters.

    - Parameter expr: An object representing the sort key. This can be the  value of the node or an  object with a compiled XPath expression.
    - Parameter order: An  value indicating the sort order.
    - Parameter caseOrder: An  value indicating how to sort uppercase and lowercase letters.
    - Parameter lang: The language to use for comparison. Uses the  class that can be passed to the  method for the language types, for example, "us-en" for U.S. English. If an empty string is specified, the system environment is used to determine the .
    - Parameter dataType: An  value indicating the sort order for the data type.
    */
    open func AddSort(expr : dotnet.System.Object, order : dotnet.System.Xml.XPath.XmlSortOrder, caseOrder : dotnet.System.Xml.XPath.XmlCaseOrder, lang : dotnet.System.String, dataType : dotnet.System.Xml.XPath.XmlDataType) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathExpression_void__AddSort_0__5__Object_XmlSortOrder_XmlCaseOrder_String_XmlDataType(&__thrown, self.get_handle(), expr.get_handle(), order.get_value(), caseOrder.get_value(), lang.get_handle(), dataType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XPath.XPathExpression Clone()
// docid: M:System.Xml.XPath.XPathExpression.Clone
    /**
    When overridden in a derived class, returns a clone of this .

    - Returns: A new  object.

    */
    open func Clone() throws -> dotnet.System.Xml.XPath.XPathExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathExpression_XPathExpression__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathExpression(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathExpression Compile(System.String)
// docid: M:System.Xml.XPath.XPathExpression.Compile(System.String)
    /**
    Compiles the XPath expression specified and returns an  object representing the XPath expression.

    - Parameter xpath: An XPath expression.
    - Returns: An  object.

    */
    open class func Compile(xpath : dotnet.System.String) throws -> dotnet.System.Xml.XPath.XPathExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathExpression_XPathExpression__Compile_0__1__String(&__thrown, xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathExpression(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathExpression Compile(System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Compiles the specified XPath expression, with the  object specified for namespace resolution, and returns an  object that represents the XPath expression.

    - Parameter xpath: An XPath expression.
    - Parameter nsResolver: An object that implements the  interface for namespace resolution.
    - Returns: An  object.

    */
    open class func Compile(xpath : dotnet.System.String, nsResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Xml.XPath.XPathExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathExpression_XPathExpression__Compile_0__2__String_IXmlNamespaceResolver(&__thrown, xpath.get_handle(), nsResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathExpression(hndl : __return);
        }
    }
    // void SetContext(System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)
    /**
    When overridden in a derived class, specifies the  object to use for namespace resolution.

    - Parameter nsResolver: An object that implements the  interface to use for namespace resolution.
    */
    open func SetContext(nsResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathExpression_void__SetContext_0__1__IXmlNamespaceResolver(&__thrown, self.get_handle(), nsResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetContext(System.Xml.XmlNamespaceManager)
// docid: M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)
    /**
    When overridden in a derived class, specifies the  object to use for namespace resolution.

    - Parameter nsManager: An  object to use for namespace resolution.
    */
    open func SetContext(nsManager : dotnet.System.Xml.XmlNamespaceManager) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathExpression_void__SetContext_0__1__XmlNamespaceManager(&__thrown, self.get_handle(), nsManager.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Expression()
// docid: M:System.Xml.XPath.XPathExpression.get_Expression
    open func get_Expression() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathExpression_String__get_Expression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XPath.XPathResultType get_ReturnType()
// docid: M:System.Xml.XPath.XPathExpression.get_ReturnType
    open func get_ReturnType() throws -> dotnet.System.Xml.XPath.XPathResultType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathExpression_XPathResultType__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathResultType(val: __return);
        }
    }
    /**
    When overridden in a derived class, gets a  representation of the .

    */
    open var Expression : dotnet.System.String {
        get {
            return try! get_Expression();
        }
    }
    /**
    When overridden in a derived class, gets the result type of the XPath expression.

    */
    open var ReturnType : dotnet.System.Xml.XPath.XPathResultType {
        get {
            return try! get_ReturnType();
        }
    }
} // XPathExpression


// type: System.Xml.XPath.XPathItem
    /**
    Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.

    */
open class XPathItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathItem_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object ValueAs(System.Type)
// docid: M:System.Xml.XPath.XPathItem.ValueAs(System.Type)
    /**
    Returns the item's value as the specified type.

    - Parameter returnType: The type to return the item value as.
    - Returns: The value of the item as the type requested.

    */
    open func ValueAs(returnType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_Object__ValueAs_0__1__Type(&__thrown, self.get_handle(), returnType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object ValueAs(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    When overridden in a derived class, returns the item's value as the type specified using the  object specified to resolve namespace prefixes.

    - Parameter returnType: The type to return the item's value as.
    - Parameter nsResolver: The  object used to resolve namespace prefixes.
    - Returns: The value of the item as the type requested.

    */
    open func ValueAs(returnType : dotnet.System.Type_, nsResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_Object__ValueAs_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), returnType.get_handle(), nsResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNode()
// docid: M:System.Xml.XPath.XPathItem.get_IsNode
    open func get_IsNode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_bool__get_IsNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_TypedValue()
// docid: M:System.Xml.XPath.XPathItem.get_TypedValue
    open func get_TypedValue() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_Object__get_TypedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XPath.XPathItem.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ValueAsBoolean()
// docid: M:System.Xml.XPath.XPathItem.get_ValueAsBoolean
    open func get_ValueAsBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_bool__get_ValueAsBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.DateTime get_ValueAsDateTime()
// docid: M:System.Xml.XPath.XPathItem.get_ValueAsDateTime
    open func get_ValueAsDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_DateTime__get_ValueAsDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double get_ValueAsDouble()
// docid: M:System.Xml.XPath.XPathItem.get_ValueAsDouble
    open func get_ValueAsDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_f64__get_ValueAsDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueAsInt()
// docid: M:System.Xml.XPath.XPathItem.get_ValueAsInt
    open func get_ValueAsInt() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_i32__get_ValueAsInt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ValueAsLong()
// docid: M:System.Xml.XPath.XPathItem.get_ValueAsLong
    open func get_ValueAsLong() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_i64__get_ValueAsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_ValueType()
// docid: M:System.Xml.XPath.XPathItem.get_ValueType
    open func get_ValueType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_Type__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_XmlType()
// docid: M:System.Xml.XPath.XPathItem.get_XmlType
    open func get_XmlType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathItem_XmlSchemaType__get_XmlType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.

    */
    open var IsNode : Bool {
        get {
            return try! get_IsNode();
        }
    }
    /**
    When overridden in a derived class, gets the current item as a boxed object of the most appropriate .NET Framework 2.0 type according to its schema type.

    */
    open var TypedValue : dotnet.System.Object {
        get {
            return try! get_TypedValue();
        }
    }
    /**
    When overridden in a derived class, gets the  value of the item.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    When overridden in a derived class, gets the item's value as a .

    */
    open var ValueAsBoolean : Bool {
        get {
            return try! get_ValueAsBoolean();
        }
    }
    /**
    When overridden in a derived class, gets the item's value as a .

    */
    open var ValueAsDateTime : dotnet.System.DateTime {
        get {
            return try! get_ValueAsDateTime();
        }
    }
    /**
    When overridden in a derived class, gets the item's value as a .

    */
    open var ValueAsDouble : Swift.Double {
        get {
            return try! get_ValueAsDouble();
        }
    }
    /**
    When overridden in a derived class, gets the item's value as an .

    */
    open var ValueAsInt : Swift.Int32 {
        get {
            return try! get_ValueAsInt();
        }
    }
    /**
    When overridden in a derived class, gets the item's value as an .

    */
    open var ValueAsLong : Swift.Int64 {
        get {
            return try! get_ValueAsLong();
        }
    }
    /**
    When overridden in a derived class, gets the .NET Framework 2.0 type of the item.

    */
    open var ValueType : dotnet.System.Type_ {
        get {
            return try! get_ValueType();
        }
    }
    /**
    When overridden in a derived class, gets the  for the item.

    */
    open var XmlType : Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        get {
            return try! get_XmlType();
        }
    }
} // XPathItem


// type: System.Xml.XPath.XPathNamespaceScope
    /**
    Defines the namespace scope.

    */
public struct XPathNamespaceScope : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathNamespaceScope_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XPath.XPathNamespaceScope All
    /**
    Returns all namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.

    */
    public static var All : dotnet.System.Xml.XPath.XPathNamespaceScope {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNamespaceScope(val: System_Xml_XPath_XPathNamespaceScope_get_All());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNamespaceScope ExcludeXml
    /**
    Returns all namespaces defined in the scope of the current node, excluding the xmlns:xml namespace. The xmlns:xml namespace is always declared implicitly. The order of the namespaces returned is not defined.

    */
    public static var ExcludeXml : dotnet.System.Xml.XPath.XPathNamespaceScope {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNamespaceScope(val: System_Xml_XPath_XPathNamespaceScope_get_ExcludeXml());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNamespaceScope Local
    /**
    Returns all namespaces that are defined locally at the current node.

    */
    public static var Local : dotnet.System.Xml.XPath.XPathNamespaceScope {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNamespaceScope(val: System_Xml_XPath_XPathNamespaceScope_get_Local());
            return __return;
        }
    }
} // XPathNamespaceScope


// type: System.Xml.XPath.XPathNavigator
    /**
    Provides a cursor model for navigating and editing XML data.

    */
open class XPathNavigator
    :
    dotnet.System.Xml.XPath.XPathItem,
    System_ICloneable,
    System_Xml_IXmlNamespaceResolver,
    System_Xml_XPath_IXPathNavigable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathNavigator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlWriter AppendChild()
// docid: M:System.Xml.XPath.XPathNavigator.AppendChild
    /**
    Returns an  object used to create one or more new child nodes at the end of the list of child nodes of the current node.

    - Returns: An  object used to create new child nodes at the end of the list of child nodes of the current node.

    */
    open func AppendChild() throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlWriter__AppendChild_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // void AppendChild(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)
    /**
    Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.

    - Parameter newChild: The XML data string for the new child node.
    */
    open func AppendChild(newChild : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__AppendChild_0__1__String(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendChild(System.Xml.XmlReader)
// docid: M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)
    /**
    Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the  object specified.

    - Parameter newChild: An  object positioned on the XML data for the new child node.
    */
    open func AppendChild(newChild : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__AppendChild_0__1__XmlReader(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendChild(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)
    /**
    Creates a new child node at the end of the list of child nodes of the current node using the nodes in the  specified.

    - Parameter newChild: An  object positioned on the node to add as the new child node.
    */
    open func AppendChild(newChild : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__AppendChild_0__1__XPathNavigator(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendChildElement(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)
    /**
    Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.

    - Parameter prefix: The namespace prefix of the new child element node (if any).
    - Parameter localName: The local name of the new child element node (if any).
    - Parameter namespaceURI: The namespace URI of the new child element node (if any).  and  are equivalent.
    - Parameter value: The value of the new child element node. If  or  are passed, an empty element is created.
    */
    open func AppendChildElement(prefix : dotnet.System.String, localName : dotnet.System.String, namespaceURI : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__AppendChildElement_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix.get_handle(), localName.get_handle(), namespaceURI.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CheckValidity(System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
    /**
    Verifies that the XML data in the  conforms to the XML Schema definition language (XSD) schema provided.

    - Parameter schemas: The  containing the schemas used to validate the XML data contained in the .
    - Parameter validationEventHandler: The  that receives information about schema validation warnings and errors.
    - Returns: 
         if no schema validation errors occurred; otherwise, .

    */
    open func CheckValidity(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : dotnet.System.Xml.Schema.ValidationEventHandler) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__CheckValidity_0__2__XmlSchemaSet_ValidationEventHandler(&__thrown, self.get_handle(), schemas.get_handle(), validationEventHandler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    open func CheckValidity(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws -> Bool {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try CheckValidity(schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
    // System.Xml.XPath.XPathNavigator Clone()
// docid: M:System.Xml.XPath.XPathNavigator.Clone
    /**
    When overridden in a derived class, creates a new  positioned at the same node as this .

    - Returns: A new  positioned at the same node as this .

    */
    open func Clone() throws -> dotnet.System.Xml.XPath.XPathNavigator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNavigator__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNavigator(hndl : __return);
        }
    }
    // System.Xml.XmlNodeOrder ComparePosition(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)
    /**
    Compares the position of the current  with the position of the  specified.

    - Parameter nav: The  to compare against.
    - Returns: An  value representing the comparative position of the two  objects.

    */
    open func ComparePosition(nav : Optional<dotnet.System.Xml.XPath.XPathNavigator>) throws -> dotnet.System.Xml.XmlNodeOrder {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlNodeOrder__ComparePosition_0__1__XPathNavigator(&__thrown, self.get_handle(), nav?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeOrder(val: __return);
        }
    }
    // System.Xml.XPath.XPathExpression Compile(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.Compile(System.String)
    /**
    Compiles a string representing an XPath expression and returns an  object.

    - Parameter xpath: A string representing an XPath expression.
    - Returns: An  object representing the XPath expression.

    */
    open func Compile(xpath : dotnet.System.String) throws -> dotnet.System.Xml.XPath.XPathExpression {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathExpression__Compile_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathExpression(hndl : __return);
        }
    }
    // void CreateAttribute(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)
    /**
    Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.

    - Parameter prefix: The namespace prefix of the new attribute node (if any).
    - Parameter localName: The local name of the new attribute node which cannot  or .
    - Parameter namespaceURI: The namespace URI for the new attribute node (if any).
    - Parameter value: The value of the new attribute node. If  or  are passed, an empty attribute node is created.
    */
    open func CreateAttribute(prefix : dotnet.System.String, localName : dotnet.System.String, namespaceURI : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__CreateAttribute_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix.get_handle(), localName.get_handle(), namespaceURI.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlWriter CreateAttributes()
// docid: M:System.Xml.XPath.XPathNavigator.CreateAttributes
    /**
    Returns an  object used to create new attributes on the current element.

    - Returns: An  object used to create new attributes on the current element.

    */
    open func CreateAttributes() throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlWriter__CreateAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNavigator CreateNavigator()
// docid: M:System.Xml.XPath.XPathNavigator.CreateNavigator
    /**
    Returns a copy of the .

    - Returns: An  copy of this .

    */
    open func CreateNavigator() throws -> dotnet.System.Xml.XPath.XPathNavigator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNavigator__CreateNavigator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNavigator(hndl : __return);
        }
    }
    // void DeleteRange(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)
    /**
    Deletes a range of sibling nodes from the current node to the node specified.

    - Parameter lastSiblingToDelete: An  positioned on the last sibling node in the range to delete.
    */
    open func DeleteRange(lastSiblingToDelete : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__DeleteRange_0__1__XPathNavigator(&__thrown, self.get_handle(), lastSiblingToDelete.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteSelf()
// docid: M:System.Xml.XPath.XPathNavigator.DeleteSelf
    /**
    Deletes the current node and its child nodes.

    */
    open func DeleteSelf() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__DeleteSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Evaluate(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)
    /**
    Evaluates the specified XPath expression and returns the typed result.

    - Parameter xpath: A string representing an XPath expression that can be evaluated.
    - Returns: The result of the expression (Boolean, number, string, or node set). This maps to , , , or  objects respectively.

    */
    open func Evaluate(xpath : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__Evaluate_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Evaluate(System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Evaluates the specified XPath expression and returns the typed result, using the  object specified to resolve namespace prefixes in the XPath expression.

    - Parameter xpath: A string representing an XPath expression that can be evaluated.
    - Parameter resolver: The  object used to resolve namespace prefixes in the XPath expression.
    - Returns: The result of the expression (Boolean, number, string, or node set). This maps to , , , or  objects respectively.

    */
    open func Evaluate(xpath : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__Evaluate_0__2__String_IXmlNamespaceResolver(&__thrown, self.get_handle(), xpath.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Evaluate(System.Xml.XPath.XPathExpression)
// docid: M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)
    /**
    Evaluates the  and returns the typed result.

    - Parameter expr: An  that can be evaluated.
    - Returns: The result of the expression (Boolean, number, string, or node set). This maps to , , , or  objects respectively.

    */
    open func Evaluate(expr : dotnet.System.Xml.XPath.XPathExpression) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__Evaluate_0__1__XPathExpression(&__thrown, self.get_handle(), expr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Evaluate(System.Xml.XPath.XPathExpression, System.Xml.XPath.XPathNodeIterator)
// docid: M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)
    /**
    Uses the supplied context to evaluate the , and returns the typed result.

    - Parameter expr: An  that can be evaluated.
    - Parameter context: An  that points to the selected node set that the evaluation is to be performed on.
    - Returns: The result of the expression (Boolean, number, string, or node set). This maps to , , , or  objects respectively.

    */
    open func Evaluate(expr : dotnet.System.Xml.XPath.XPathExpression, context : Optional<dotnet.System.Xml.XPath.XPathNodeIterator>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__Evaluate_0__2__XPathExpression_XPathNodeIterator(&__thrown, self.get_handle(), expr.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.String GetAttribute(System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)
    /**
    Gets the value of the attribute with the specified local name and namespace URI.

    - Parameter localName: The local name of the attribute.  is case-sensitive.
    - Parameter namespaceURI: The namespace URI of the attribute.
    - Returns: A  that contains the value of the specified attribute;  if a matching attribute is not found, or if the  is not positioned on an element node.

    */
    open func GetAttribute(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__GetAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetNamespace(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)
    /**
    Returns the value of the namespace node corresponding to the specified local name.

    - Parameter name: The local name of the namespace node.
    - Returns: A  that contains the value of the namespace node;  if a matching namespace node is not found, or if the  is not positioned on an element node.

    */
    open func GetNamespace(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__GetNamespace_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetNamespacesInScope(System.Xml.XmlNamespaceScope)
// docid: M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    /**
    Returns the in-scope namespaces of the current node.

    - Parameter scope: An  value specifying the namespaces to return.
    - Returns: An  collection of namespace names keyed by prefix.

    */
    open func GetNamespacesInScope(scope : dotnet.System.Xml.XmlNamespaceScope) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_System_Collections_Generic_IDictionary_string_string___GetNamespacesInScope_0__1__XmlNamespaceScope(&__thrown, self.get_handle(), scope.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // System.Xml.XmlWriter InsertAfter()
// docid: M:System.Xml.XPath.XPathNavigator.InsertAfter
    /**
    Returns an  object used to create a new sibling node after the currently selected node.

    - Returns: An  object used to create a new sibling node after the currently selected node.

    */
    open func InsertAfter() throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlWriter__InsertAfter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // void InsertAfter(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)
    /**
    Creates a new sibling node after the currently selected node using the XML string specified.

    - Parameter newSibling: The XML data string for the new sibling node.
    */
    open func InsertAfter(newSibling : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertAfter_0__1__String(&__thrown, self.get_handle(), newSibling.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertAfter(System.Xml.XmlReader)
// docid: M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)
    /**
    Creates a new sibling node after the currently selected node using the XML contents of the  object specified.

    - Parameter newSibling: An  object positioned on the XML data for the new sibling node.
    */
    open func InsertAfter(newSibling : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertAfter_0__1__XmlReader(&__thrown, self.get_handle(), newSibling.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertAfter(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)
    /**
    Creates a new sibling node after the currently selected node using the nodes in the  object specified.

    - Parameter newSibling: An  object positioned on the node to add as the new sibling node.
    */
    open func InsertAfter(newSibling : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertAfter_0__1__XPathNavigator(&__thrown, self.get_handle(), newSibling.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlWriter InsertBefore()
// docid: M:System.Xml.XPath.XPathNavigator.InsertBefore
    /**
    Returns an  object used to create a new sibling node before the currently selected node.

    - Returns: An  object used to create a new sibling node before the currently selected node.

    */
    open func InsertBefore() throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlWriter__InsertBefore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // void InsertBefore(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)
    /**
    Creates a new sibling node before the currently selected node using the XML string specified.

    - Parameter newSibling: The XML data string for the new sibling node.
    */
    open func InsertBefore(newSibling : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertBefore_0__1__String(&__thrown, self.get_handle(), newSibling.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertBefore(System.Xml.XmlReader)
// docid: M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)
    /**
    Creates a new sibling node before the currently selected node using the XML contents of the  object specified.

    - Parameter newSibling: An  object positioned on the XML data for the new sibling node.
    */
    open func InsertBefore(newSibling : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertBefore_0__1__XmlReader(&__thrown, self.get_handle(), newSibling.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertBefore(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)
    /**
    Creates a new sibling node before the currently selected node using the nodes in the  specified.

    - Parameter newSibling: An  object positioned on the node to add as the new sibling node.
    */
    open func InsertBefore(newSibling : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertBefore_0__1__XPathNavigator(&__thrown, self.get_handle(), newSibling.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertElementAfter(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)
    /**
    Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.

    - Parameter prefix: The namespace prefix of the new child element (if any).
    - Parameter localName: The local name of the new child element (if any).
    - Parameter namespaceURI: The namespace URI of the new child element (if any).  and  are equivalent.
    - Parameter value: The value of the new child element. If  or  are passed, an empty element is created.
    */
    open func InsertElementAfter(prefix : dotnet.System.String, localName : dotnet.System.String, namespaceURI : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertElementAfter_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix.get_handle(), localName.get_handle(), namespaceURI.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertElementBefore(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)
    /**
    Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.

    - Parameter prefix: The namespace prefix of the new child element (if any).
    - Parameter localName: The local name of the new child element (if any).
    - Parameter namespaceURI: The namespace URI of the new child element (if any).  and  are equivalent.
    - Parameter value: The value of the new child element. If  or  are passed, an empty element is created.
    */
    open func InsertElementBefore(prefix : dotnet.System.String, localName : dotnet.System.String, namespaceURI : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__InsertElementBefore_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix.get_handle(), localName.get_handle(), namespaceURI.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsDescendant(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)
    /**
    Determines whether the specified  is a descendant of the current .

    - Parameter nav: The  to compare to this .
    - Returns: 
         if the specified  is a descendant of the current ; otherwise, .

    */
    open func IsDescendant(nav : Optional<dotnet.System.Xml.XPath.XPathNavigator>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__IsDescendant_0__1__XPathNavigator(&__thrown, self.get_handle(), nav?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSamePosition(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)
    /**
    When overridden in a derived class, determines whether the current  is at the same position as the specified .

    - Parameter other: The  to compare to this .
    - Returns: 
         if the two  objects have the same position; otherwise, .

    */
    open func IsSamePosition(other : dotnet.System.Xml.XPath.XPathNavigator) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__IsSamePosition_0__1__XPathNavigator(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String LookupNamespace(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)
    /**
    Gets the namespace URI for the specified prefix.

    - Parameter prefix: The prefix whose namespace URI you want to resolve. To match the default namespace, pass .
    - Returns: A  that contains the namespace URI assigned to the namespace prefix specified;  if no namespace URI is assigned to the prefix specified. The  returned is atomized.

    */
    open func LookupNamespace(prefix : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__LookupNamespace_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String LookupPrefix(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)
    /**
    Gets the prefix declared for the specified namespace URI.

    - Parameter namespaceURI: The namespace URI to resolve for the prefix.
    - Returns: A  that contains the namespace prefix assigned to the namespace URI specified; otherwise,  if no prefix is assigned to the namespace URI specified. The  returned is atomized.

    */
    open func LookupPrefix(namespaceURI : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__LookupPrefix_0__1__String(&__thrown, self.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool Matches(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.Matches(System.String)
    /**
    Determines whether the current node matches the specified XPath expression.

    - Parameter xpath: The XPath expression.
    - Returns: 
         if the current node matches the specified XPath expression; otherwise, .

    */
    open func Matches(xpath : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__Matches_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Matches(System.Xml.XPath.XPathExpression)
// docid: M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)
    /**
    Determines whether the current node matches the specified .

    - Parameter expr: An  object containing the compiled XPath expression.
    - Returns: 
         if the current node matches the ; otherwise, .

    */
    open func Matches(expr : dotnet.System.Xml.XPath.XPathExpression) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__Matches_0__1__XPathExpression(&__thrown, self.get_handle(), expr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveTo(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)
    /**
    When overridden in a derived class, moves the  to the same position as the specified .

    - Parameter other: The  positioned on the node that you want to move to.
    - Returns: 
         if the  is successful moving to the same position as the specified ; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveTo(other : dotnet.System.Xml.XPath.XPathNavigator) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveTo_0__1__XPathNavigator(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToAttribute(System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)
    /**
    Moves the  to the attribute with the matching local name and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceURI: The namespace URI of the attribute;  for an empty namespace.
    - Returns: 
         if the  is successful moving to the attribute; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToAttribute(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToChild(System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)
    /**
    Moves the  to the child node with the local name and namespace URI specified.

    - Parameter localName: The local name of the child node to move to.
    - Parameter namespaceURI: The namespace URI of the child node to move to.
    - Returns: 
         if the  is successful moving to the child node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToChild(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToChild_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToChild(System.Xml.XPath.XPathNodeType)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)
    /**
    Moves the  to the child node of the  specified.

    - Parameter type: The  of the child node to move to.
    - Returns: 
         if the  is successful moving to the child node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToChild(type : dotnet.System.Xml.XPath.XPathNodeType) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToChild_0__1__XPathNodeType(&__thrown, self.get_handle(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirst()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFirst
    /**
    Moves the  to the first sibling node of the current node.

    - Returns: 
         if the  is successful moving to the first sibling node of the current node;  if there is no first sibling, or if the  is currently positioned on an attribute node. If the  is already positioned on the first sibling,  will return  and will not move its position.  
  
 If  returns  because there is no first sibling, or if  is currently positioned on an attribute, the position of the  is unchanged.

    */
    open func MoveToFirst() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFirst_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstAttribute()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute
    /**
    When overridden in a derived class, moves the  to the first attribute of the current node.

    - Returns: 
         if the  is successful moving to the first attribute of the current node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToFirstAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFirstAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstChild()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFirstChild
    /**
    When overridden in a derived class, moves the  to the first child node of the current node.

    - Returns: 
         if the  is successful moving to the first child node of the current node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToFirstChild() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFirstChild_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstNamespace()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace
    /**
    Moves the  to first namespace node of the current node.

    - Returns: 
         if the  is successful moving to the first namespace node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToFirstNamespace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFirstNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)
    /**
    When overridden in a derived class, moves the  to the first namespace node that matches the  specified.

    - Parameter namespaceScope: An  value describing the namespace scope.
    - Returns: 
         if the  is successful moving to the first namespace node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToFirstNamespace(namespaceScope : dotnet.System.Xml.XPath.XPathNamespaceScope) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFirstNamespace_0__1__XPathNamespaceScope(&__thrown, self.get_handle(), namespaceScope.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFollowing(System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)
    /**
    Moves the  to the element with the local name and namespace URI specified in document order.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Returns: 
         if the  moved successfully; otherwise, .

    */
    open func MoveToFollowing(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFollowing_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFollowing(System.String, System.String, System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)
    /**
    Moves the  to the element with the local name and namespace URI specified, to the boundary specified, in document order.

    - Parameter localName: The local name of the element.
    - Parameter namespaceURI: The namespace URI of the element.
    - Parameter end: The  object positioned on the element boundary which the current  will not move past while searching for the following element.
    - Returns: 
         if the  moved successfully; otherwise, .

    */
    open func MoveToFollowing(localName : dotnet.System.String, namespaceURI : dotnet.System.String, end : Optional<dotnet.System.Xml.XPath.XPathNavigator>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFollowing_0__3__String_String_XPathNavigator(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle(), end?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFollowing(System.Xml.XPath.XPathNodeType)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)
    /**
    Moves the  to the following element of the  specified in document order.

    - Parameter type: The  of the element. The  cannot be  or .
    - Returns: 
         if the  moved successfully; otherwise, .

    */
    open func MoveToFollowing(type : dotnet.System.Xml.XPath.XPathNodeType) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFollowing_0__1__XPathNodeType(&__thrown, self.get_handle(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToFollowing(System.Xml.XPath.XPathNodeType, System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)
    /**
    Moves the  to the following element of the  specified, to the boundary specified, in document order.

    - Parameter type: The  of the element. The  cannot be  or .
    - Parameter end: The  object positioned on the element boundary which the current  will not move past while searching for the following element.
    - Returns: 
         if the  moved successfully; otherwise, .

    */
    open func MoveToFollowing(type : dotnet.System.Xml.XPath.XPathNodeType, end : Optional<dotnet.System.Xml.XPath.XPathNavigator>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToFollowing_0__2__XPathNodeType_XPathNavigator(&__thrown, self.get_handle(), type.get_value(), end?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToId(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)
    /**
    When overridden in a derived class, moves to the node that has an attribute of type ID whose value matches the specified .

    - Parameter id: A  representing the ID value of the node to which you want to move.
    - Returns: 
         if the  is successful moving; otherwise, . If , the position of the navigator is unchanged.

    */
    open func MoveToId(id : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToId_0__1__String(&__thrown, self.get_handle(), id.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNamespace(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)
    /**
    Moves the  to the namespace node with the specified namespace prefix.

    - Parameter name: The namespace prefix of the namespace node.
    - Returns: 
         if the  is successful moving to the specified namespace;  if a matching namespace node was not found, or if the  is not positioned on an element node. If , the position of the  is unchanged.

    */
    open func MoveToNamespace(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNamespace_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNext()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNext
    /**
    When overridden in a derived class, moves the  to the next sibling node of the current node.

    - Returns: 
         if the  is successful moving to the next sibling node; otherwise,  if there are no more siblings or if the  is currently positioned on an attribute node. If , the position of the  is unchanged.

    */
    open func MoveToNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNext(System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)
    /**
    Moves the  to the next sibling node with the local name and namespace URI specified.

    - Parameter localName: The local name of the next sibling node to move to.
    - Parameter namespaceURI: The namespace URI of the next sibling node to move to.
    - Returns: 
         if the  is successful moving to the next sibling node;  if there are no more siblings, or if the  is currently positioned on an attribute node. If , the position of the  is unchanged.

    */
    open func MoveToNext(localName : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNext_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNext(System.Xml.XPath.XPathNodeType)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)
    /**
    Moves the  to the next sibling node of the current node that matches the  specified.

    - Parameter type: The  of the sibling node to move to.
    - Returns: 
         if the  is successful moving to the next sibling node; otherwise,  if there are no more siblings or if the  is currently positioned on an attribute node. If , the position of the  is unchanged.

    */
    open func MoveToNext(type : dotnet.System.Xml.XPath.XPathNodeType) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNext_0__1__XPathNodeType(&__thrown, self.get_handle(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextAttribute()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute
    /**
    When overridden in a derived class, moves the  to the next attribute.

    - Returns: 
         if the  is successful moving to the next attribute;  if there are no more attributes. If , the position of the  is unchanged.

    */
    open func MoveToNextAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNextAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextNamespace()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace
    /**
    Moves the  to the next namespace node.

    - Returns: 
         if the  is successful moving to the next namespace node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToNextNamespace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNextNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)
// docid: M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)
    /**
    When overridden in a derived class, moves the  to the next namespace node matching the  specified.

    - Parameter namespaceScope: An  value describing the namespace scope.
    - Returns: 
         if the  is successful moving to the next namespace node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToNextNamespace(namespaceScope : dotnet.System.Xml.XPath.XPathNamespaceScope) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToNextNamespace_0__1__XPathNamespaceScope(&__thrown, self.get_handle(), namespaceScope.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToParent()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToParent
    /**
    When overridden in a derived class, moves the  to the parent node of the current node.

    - Returns: 
         if the  is successful moving to the parent node of the current node; otherwise, . If , the position of the  is unchanged.

    */
    open func MoveToParent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToParent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool MoveToPrevious()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToPrevious
    /**
    When overridden in a derived class, moves the  to the previous sibling node of the current node.

    - Returns: 
         if the  is successful moving to the previous sibling node; otherwise,  if there is no previous sibling node or if the  is currently positioned on an attribute node. If , the position of the  is unchanged.

    */
    open func MoveToPrevious() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__MoveToPrevious_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void MoveToRoot()
// docid: M:System.Xml.XPath.XPathNavigator.MoveToRoot
    /**
    Moves the  to the root node that the current node belongs to.

    */
    open func MoveToRoot() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__MoveToRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlWriter PrependChild()
// docid: M:System.Xml.XPath.XPathNavigator.PrependChild
    /**
    Returns an  object used to create a new child node at the beginning of the list of child nodes of the current node.

    - Returns: An  object used to create a new child node at the beginning of the list of child nodes of the current node.

    */
    open func PrependChild() throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlWriter__PrependChild_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // void PrependChild(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)
    /**
    Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.

    - Parameter newChild: The XML data string for the new child node.
    */
    open func PrependChild(newChild : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__PrependChild_0__1__String(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PrependChild(System.Xml.XmlReader)
// docid: M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)
    /**
    Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the  object specified.

    - Parameter newChild: An  object positioned on the XML data for the new child node.
    */
    open func PrependChild(newChild : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__PrependChild_0__1__XmlReader(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PrependChild(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)
    /**
    Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the  object specified.

    - Parameter newChild: An  object positioned on the node to add as the new child node.
    */
    open func PrependChild(newChild : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__PrependChild_0__1__XPathNavigator(&__thrown, self.get_handle(), newChild.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PrependChildElement(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)
    /**
    Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.

    - Parameter prefix: The namespace prefix of the new child element (if any).
    - Parameter localName: The local name of the new child element (if any).
    - Parameter namespaceURI: The namespace URI of the new child element (if any).  and  are equivalent.
    - Parameter value: The value of the new child element. If  or  are passed, an empty element is created.
    */
    open func PrependChildElement(prefix : dotnet.System.String, localName : dotnet.System.String, namespaceURI : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__PrependChildElement_0__4__String_String_String_String(&__thrown, self.get_handle(), prefix.get_handle(), localName.get_handle(), namespaceURI.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlReader ReadSubtree()
// docid: M:System.Xml.XPath.XPathNavigator.ReadSubtree
    /**
    Returns an  object that contains the current node and its child nodes.

    - Returns: An  object that contains the current node and its child nodes.

    */
    open func ReadSubtree() throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlReader__ReadSubtree_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlWriter ReplaceRange(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)
    /**
    Replaces a range of sibling nodes from the current node to the node specified.

    - Parameter lastSiblingToReplace: An  positioned on the last sibling node in the range to replace.
    - Returns: An  object used to specify the replacement range.

    */
    open func ReplaceRange(lastSiblingToReplace : dotnet.System.Xml.XPath.XPathNavigator) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlWriter__ReplaceRange_0__1__XPathNavigator(&__thrown, self.get_handle(), lastSiblingToReplace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // void ReplaceSelf(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)
    /**
    Replaces the current node with the content of the string specified.

    - Parameter newNode: The XML data string for the new node.
    */
    open func ReplaceSelf(newNode : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__ReplaceSelf_0__1__String(&__thrown, self.get_handle(), newNode.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceSelf(System.Xml.XmlReader)
// docid: M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)
    /**
    Replaces the current node with the contents of the  object specified.

    - Parameter newNode: An  object positioned on the XML data for the new node.
    */
    open func ReplaceSelf(newNode : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__ReplaceSelf_0__1__XmlReader(&__thrown, self.get_handle(), newNode.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceSelf(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)
    /**
    Replaces the current node with the contents of the  object specified.

    - Parameter newNode: An  object positioned on the new node.
    */
    open func ReplaceSelf(newNode : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__ReplaceSelf_0__1__XPathNavigator(&__thrown, self.get_handle(), newNode.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XPath.XPathNodeIterator Select(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.Select(System.String)
    /**
    Selects a node set, using the specified XPath expression.

    - Parameter xpath: A  representing an XPath expression.
    - Returns: An  pointing to the selected node set.

    */
    open func Select(xpath : dotnet.System.String) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__Select_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator Select(System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Selects a node set using the specified XPath expression with the  object specified to resolve namespace prefixes.

    - Parameter xpath: A  representing an XPath expression.
    - Parameter resolver: The  object used to resolve namespace prefixes.
    - Returns: An  that points to the selected node set.

    */
    open func Select(xpath : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__Select_0__2__String_IXmlNamespaceResolver(&__thrown, self.get_handle(), xpath.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator Select(System.Xml.XPath.XPathExpression)
// docid: M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)
    /**
    Selects a node set using the specified .

    - Parameter expr: An  object containing the compiled XPath query.
    - Returns: An  that points to the selected node set.

    */
    open func Select(expr : dotnet.System.Xml.XPath.XPathExpression) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__Select_0__1__XPathExpression(&__thrown, self.get_handle(), expr.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator SelectAncestors(System.String, System.String, bool)
// docid: M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)
    /**
    Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.

    - Parameter name: The local name of the ancestor nodes.
    - Parameter namespaceURI: The namespace URI of the ancestor nodes.
    - Parameter matchSelf: To include the context node in the selection, ; otherwise, .
    - Returns: An  that contains the selected nodes. The returned nodes are in reverse document order.

    */
    open func SelectAncestors(name : dotnet.System.String, namespaceURI : dotnet.System.String, matchSelf : Bool) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__SelectAncestors_0__3__String_String_bool(&__thrown, self.get_handle(), name.get_handle(), namespaceURI.get_handle(), Swift.Int32(matchSelf ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator SelectAncestors(System.Xml.XPath.XPathNodeType, bool)
// docid: M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)
    /**
    Selects all the ancestor nodes of the current node that have a matching .

    - Parameter type: The  of the ancestor nodes.
    - Parameter matchSelf: To include the context node in the selection, ; otherwise, .
    - Returns: An  that contains the selected nodes. The returned nodes are in reverse document order.

    */
    open func SelectAncestors(type : dotnet.System.Xml.XPath.XPathNodeType, matchSelf : Bool) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__SelectAncestors_0__2__XPathNodeType_bool(&__thrown, self.get_handle(), type.get_value(), Swift.Int32(matchSelf ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator SelectChildren(System.String, System.String)
// docid: M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)
    /**
    Selects all the child nodes of the current node that have the local name and namespace URI specified.

    - Parameter name: The local name of the child nodes.
    - Parameter namespaceURI: The namespace URI of the child nodes.
    - Returns: An  that contains the selected nodes.

    */
    open func SelectChildren(name : dotnet.System.String, namespaceURI : dotnet.System.String) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__SelectChildren_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceURI.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator SelectChildren(System.Xml.XPath.XPathNodeType)
// docid: M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)
    /**
    Selects all the child nodes of the current node that have the matching .

    - Parameter type: The  of the child nodes.
    - Returns: An  that contains the selected nodes.

    */
    open func SelectChildren(type : dotnet.System.Xml.XPath.XPathNodeType) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__SelectChildren_0__1__XPathNodeType(&__thrown, self.get_handle(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator SelectDescendants(System.String, System.String, bool)
// docid: M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)
    /**
    Selects all the descendant nodes of the current node with the local name and namespace URI specified.

    - Parameter name: The local name of the descendant nodes.
    - Parameter namespaceURI: The namespace URI of the descendant nodes.
    - Parameter matchSelf: 
         to include the context node in the selection; otherwise, .
    - Returns: An  that contains the selected nodes.

    */
    open func SelectDescendants(name : dotnet.System.String, namespaceURI : dotnet.System.String, matchSelf : Bool) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__SelectDescendants_0__3__String_String_bool(&__thrown, self.get_handle(), name.get_handle(), namespaceURI.get_handle(), Swift.Int32(matchSelf ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNodeIterator SelectDescendants(System.Xml.XPath.XPathNodeType, bool)
// docid: M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)
    /**
    Selects all the descendant nodes of the current node that have a matching .

    - Parameter type: The  of the descendant nodes.
    - Parameter matchSelf: 
         to include the context node in the selection; otherwise, .
    - Returns: An  that contains the selected nodes.

    */
    open func SelectDescendants(type : dotnet.System.Xml.XPath.XPathNodeType, matchSelf : Bool) throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeIterator__SelectDescendants_0__2__XPathNodeType_bool(&__thrown, self.get_handle(), type.get_value(), Swift.Int32(matchSelf ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNavigator SelectSingleNode(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)
    /**
    Selects a single node in the  using the specified XPath query.

    - Parameter xpath: A  representing an XPath expression.
    - Returns: An  object that contains the first matching node for the XPath query specified; otherwise,  if there are no query results.

    */
    open func SelectSingleNode(xpath : dotnet.System.String) throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNavigator__SelectSingleNode_0__1__String(&__thrown, self.get_handle(), xpath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XPath.XPathNavigator SelectSingleNode(System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Selects a single node in the  object using the specified XPath query with the  object specified to resolve namespace prefixes.

    - Parameter xpath: A  representing an XPath expression.
    - Parameter resolver: The  object used to resolve namespace prefixes in the XPath query.
    - Returns: An  object that contains the first matching node for the XPath query specified; otherwise  if there are no query results.

    */
    open func SelectSingleNode(xpath : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNavigator__SelectSingleNode_0__2__String_IXmlNamespaceResolver(&__thrown, self.get_handle(), xpath.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XPath.XPathNavigator SelectSingleNode(System.Xml.XPath.XPathExpression)
// docid: M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)
    /**
    Selects a single node in the  using the specified  object.

    - Parameter expression: An  object containing the compiled XPath query.
    - Returns: An  object that contains the first matching node for the XPath query specified; otherwise  if there are no query results.

    */
    open func SelectSingleNode(expression : dotnet.System.Xml.XPath.XPathExpression) throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNavigator__SelectSingleNode_0__1__XPathExpression(&__thrown, self.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetTypedValue(System.Object)
// docid: M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)
    /**
    Sets the typed value of the current node.

    - Parameter typedValue: The new typed value of the node.
    */
    open func SetTypedValue(typedValue : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__SetTypedValue_0__1__Object(&__thrown, self.get_handle(), typedValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.SetValue(System.String)
    /**
    Sets the value of the current node.

    - Parameter value: The new value of the node.
    */
    open func SetValue(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__SetValue_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.XPath.XPathNavigator.ToString
    /**
    Gets the text value of the current node.

    - Returns: A  that contains the text value of the current node.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object ValueAs(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Gets the current node's value as the  specified, using the  object specified to resolve namespace prefixes.

    - Parameter returnType: The  to return the current node's value as.
    - Parameter nsResolver: The  object used to resolve namespace prefixes.
    - Returns: The value of the current node as the  requested.

    */
    open override func ValueAs(returnType : dotnet.System.Type_, nsResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__ValueAs_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), returnType.get_handle(), nsResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void WriteSubtree(System.Xml.XmlWriter)
// docid: M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)
    /**
    Streams the current node and its child nodes to the  object specified.

    - Parameter writer: The  object to stream to.
    */
    open func WriteSubtree(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__WriteSubtree_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BaseURI()
// docid: M:System.Xml.XPath.XPathNavigator.get_BaseURI
    open func get_BaseURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_BaseURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanEdit()
// docid: M:System.Xml.XPath.XPathNavigator.get_CanEdit
    open func get_CanEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__get_CanEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasAttributes()
// docid: M:System.Xml.XPath.XPathNavigator.get_HasAttributes
    open func get_HasAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__get_HasAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasChildren()
// docid: M:System.Xml.XPath.XPathNavigator.get_HasChildren
    open func get_HasChildren() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__get_HasChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_InnerXml()
// docid: M:System.Xml.XPath.XPathNavigator.get_InnerXml
    open func get_InnerXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_InnerXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InnerXml(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.set_InnerXml(System.String)
    open func set_InnerXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__set_InnerXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEmptyElement()
// docid: M:System.Xml.XPath.XPathNavigator.get_IsEmptyElement
    open func get_IsEmptyElement() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__get_IsEmptyElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNode()
// docid: M:System.Xml.XPath.XPathNavigator.get_IsNode
    open /* method final */ override func get_IsNode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__get_IsNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.XPath.XPathNavigator.get_LocalName
    open func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.XPath.XPathNavigator.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceURI()
// docid: M:System.Xml.XPath.XPathNavigator.get_NamespaceURI
    open func get_NamespaceURI() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_NamespaceURI_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNameTable get_NameTable()
// docid: M:System.Xml.XPath.XPathNavigator.get_NameTable
    open func get_NameTable() throws -> dotnet.System.Xml.XmlNameTable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlNameTable__get_NameTable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNameTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.IEqualityComparer get_NavigatorComparer()
// docid: M:System.Xml.XPath.XPathNavigator.get_NavigatorComparer
    open class func get_NavigatorComparer() throws -> dotnet.System.Collections.IEqualityComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_IEqualityComparer__get_NavigatorComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEqualityComparer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XPath.XPathNodeType get_NodeType()
// docid: M:System.Xml.XPath.XPathNavigator.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Xml.XPath.XPathNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XPathNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_OuterXml()
// docid: M:System.Xml.XPath.XPathNavigator.get_OuterXml
    open func get_OuterXml() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_OuterXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OuterXml(System.String)
// docid: M:System.Xml.XPath.XPathNavigator.set_OuterXml(System.String)
    open func set_OuterXml(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XPath_XPathNavigator_void__set_OuterXml_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:System.Xml.XPath.XPathNavigator.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
// docid: M:System.Xml.XPath.XPathNavigator.get_SchemaInfo
    open func get_SchemaInfo() throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_IXmlSchemaInfo__get_SchemaInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_TypedValue()
// docid: M:System.Xml.XPath.XPathNavigator.get_TypedValue
    open override func get_TypedValue() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__get_TypedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_UnderlyingObject()
// docid: M:System.Xml.XPath.XPathNavigator.get_UnderlyingObject
    open func get_UnderlyingObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Object__get_UnderlyingObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ValueAsBoolean()
// docid: M:System.Xml.XPath.XPathNavigator.get_ValueAsBoolean
    open override func get_ValueAsBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_bool__get_ValueAsBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.DateTime get_ValueAsDateTime()
// docid: M:System.Xml.XPath.XPathNavigator.get_ValueAsDateTime
    open override func get_ValueAsDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_DateTime__get_ValueAsDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double get_ValueAsDouble()
// docid: M:System.Xml.XPath.XPathNavigator.get_ValueAsDouble
    open override func get_ValueAsDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_f64__get_ValueAsDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueAsInt()
// docid: M:System.Xml.XPath.XPathNavigator.get_ValueAsInt
    open override func get_ValueAsInt() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_i32__get_ValueAsInt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ValueAsLong()
// docid: M:System.Xml.XPath.XPathNavigator.get_ValueAsLong
    open override func get_ValueAsLong() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_i64__get_ValueAsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_ValueType()
// docid: M:System.Xml.XPath.XPathNavigator.get_ValueType
    open override func get_ValueType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_Type__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XmlLang()
// docid: M:System.Xml.XPath.XPathNavigator.get_XmlLang
    open func get_XmlLang() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_String__get_XmlLang_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaType get_XmlType()
// docid: M:System.Xml.XPath.XPathNavigator.get_XmlType
    open override func get_XmlType() throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNavigator_XmlSchemaType__get_XmlType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    When overridden in a derived class, gets the base URI for the current node.

    */
    open var BaseURI : dotnet.System.String {
        get {
            return try! get_BaseURI();
        }
    }
    /**
    Gets a value that indicates whether the  can edit the underlying XML data.

    */
    open var CanEdit : Bool {
        get {
            return try! get_CanEdit();
        }
    }
    /**
    Gets a value that indicates whether the current node has any attributes.

    */
    open var HasAttributes : Bool {
        get {
            return try! get_HasAttributes();
        }
    }
    /**
    Gets a value that indicates whether the current node has any child nodes.

    */
    open var HasChildren : Bool {
        get {
            return try! get_HasChildren();
        }
    }
    /**
    Gets or sets the markup representing the child nodes of the current node.

    */
    open var InnerXml : dotnet.System.String {
        get {
            return try! get_InnerXml();
        }
        set(v) {
            return try! set_InnerXml(value: v);
        }
    }
    /**
    When overridden in a derived class, gets a value that indicates whether the current node is an empty element without an end element tag.

    */
    open var IsEmptyElement : Bool {
        get {
            return try! get_IsEmptyElement();
        }
    }
    /**
    Gets a value that indicates if the current node represents an XPath node.

    */
    public override var IsNode : Bool {
        get {
            return try! get_IsNode();
        }
    }
    /**
    When overridden in a derived class, gets the  of the current node without any namespace prefix.

    */
    open var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    When overridden in a derived class, gets the qualified name of the current node.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    When overridden in a derived class, gets the  of the .

    */
    open var NameTable : dotnet.System.Xml.XmlNameTable {
        get {
            return try! get_NameTable();
        }
    }
    /**
    When overridden in a derived class, gets the namespace URI of the current node.

    */
    open var NamespaceURI : dotnet.System.String {
        get {
            return try! get_NamespaceURI();
        }
    }
    /**
    Gets an  used for equality comparison of  objects.

    */
    public static var NavigatorComparer : dotnet.System.Collections.IEqualityComparer {
        get {
            return try! get_NavigatorComparer();
        }
    }
    /**
    When overridden in a derived class, gets the  of the current node.

    */
    open var NodeType : dotnet.System.Xml.XPath.XPathNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.

    */
    open var OuterXml : dotnet.System.String {
        get {
            return try! get_OuterXml();
        }
        set(v) {
            return try! set_OuterXml(value: v);
        }
    }
    /**
    When overridden in a derived class, gets the namespace prefix associated with the current node.

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
    }
    /**
    Gets the schema information that has been assigned to the current node as a result of schema validation.

    */
    open var SchemaInfo : Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        get {
            return try! get_SchemaInfo();
        }
    }
    /**
    Gets the current node as a boxed object of the most appropriate .NET Framework type.

    */
    open override var TypedValue : dotnet.System.Object {
        get {
            return try! get_TypedValue();
        }
    }
    /**
    Used by  implementations which provide a "virtualized" XML view over a store, to provide access to underlying objects.

    */
    open var UnderlyingObject : Optional<dotnet.System.Object> {
        get {
            return try! get_UnderlyingObject();
        }
    }
    /**
    Gets the current node's value as a .

    */
    open override var ValueAsBoolean : Bool {
        get {
            return try! get_ValueAsBoolean();
        }
    }
    /**
    Gets the current node's value as a .

    */
    open override var ValueAsDateTime : dotnet.System.DateTime {
        get {
            return try! get_ValueAsDateTime();
        }
    }
    /**
    Gets the current node's value as a .

    */
    open override var ValueAsDouble : Swift.Double {
        get {
            return try! get_ValueAsDouble();
        }
    }
    /**
    Gets the current node's value as an .

    */
    open override var ValueAsInt : Swift.Int32 {
        get {
            return try! get_ValueAsInt();
        }
    }
    /**
    Gets the current node's value as an .

    */
    open override var ValueAsLong : Swift.Int64 {
        get {
            return try! get_ValueAsLong();
        }
    }
    /**
    Gets the .NET Framework  of the current node.

    */
    open override var ValueType : dotnet.System.Type_ {
        get {
            return try! get_ValueType();
        }
    }
    /**
    Gets the xml:lang scope for the current node.

    */
    open var XmlLang : dotnet.System.String {
        get {
            return try! get_XmlLang();
        }
    }
    /**
    Gets the  information for the current node.

    */
    open override var XmlType : Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        get {
            return try! get_XmlType();
        }
    }
} // XPathNavigator


// type: System.Xml.XPath.XPathNodeIterator
    /**
    Provides an iterator over a selected set of nodes.

    */
open class XPathNodeIterator
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathNodeIterator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XPath.XPathNodeIterator Clone()
// docid: M:System.Xml.XPath.XPathNodeIterator.Clone
    /**
    When overridden in a derived class, returns a clone of this  object.

    - Returns: A new  object clone of this  object.

    */
    open func Clone() throws -> dotnet.System.Xml.XPath.XPathNodeIterator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNodeIterator_XPathNodeIterator__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNodeIterator(hndl : __return);
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Xml.XPath.XPathNodeIterator.GetEnumerator
    /**
    Returns an  object to iterate through the selected node set.

    - Returns: An  object to iterate through the selected node set.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNodeIterator_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // bool MoveNext()
// docid: M:System.Xml.XPath.XPathNodeIterator.MoveNext
    /**
    When overridden in a derived class, moves the  object returned by the  property to the next node in the selected node set.

    - Returns: 
         if the  object moved to the next node;  if there are no more selected nodes.

    */
    open func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNodeIterator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Xml.XPath.XPathNodeIterator.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNodeIterator_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Xml.XPath.XPathNavigator get_Current()
// docid: M:System.Xml.XPath.XPathNodeIterator.get_Current
    open func get_Current() throws -> Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNodeIterator_XPathNavigator__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XPath.XPathNavigator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_CurrentPosition()
// docid: M:System.Xml.XPath.XPathNodeIterator.get_CurrentPosition
    open func get_CurrentPosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XPathNodeIterator_i32__get_CurrentPosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the index of the last node in the selected set of nodes.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    When overridden in a derived class, gets the  object for this , positioned on the current context node.

    */
    open var Current : Optional<dotnet.System.Xml.XPath.XPathNavigator> {
        get {
            return try! get_Current();
        }
    }
    /**
    When overridden in a derived class, gets the index of the current position in the selected set of nodes.

    */
    open var CurrentPosition : Swift.Int32 {
        get {
            return try! get_CurrentPosition();
        }
    }
} // XPathNodeIterator


// type: System.Xml.XPath.XPathNodeType
    /**
    Defines the XPath node types that can be returned from the  class.

    */
public struct XPathNodeType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathNodeType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XPath.XPathNodeType Root
    /**
    The root node of the XML document or node tree.

    */
    public static var Root : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Root());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType Element
    /**
    An element, such as <element>.

    */
    public static var Element : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Element());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType Attribute
    /**
    An attribute, such as id='123'.

    */
    public static var Attribute : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Attribute());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType Namespace
    /**
    A namespace, such as xmlns="namespace".

    */
    public static var Namespace : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Namespace());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType Text
    /**
    The text content of a node. Equivalent to the Document Object Model (DOM) Text and CDATA node types. Contains at least one character.

    */
    public static var Text : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Text());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType SignificantWhitespace
    /**
    A node with white space characters and xml:space set to preserve.

    */
    public static var SignificantWhitespace : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_SignificantWhitespace());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType Whitespace
    /**
    A node with only white space characters and no significant white space. White space characters are #x20, #x9, #xD, or #xA.

    */
    public static var Whitespace : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Whitespace());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType ProcessingInstruction
    /**
    A processing instruction, such as <?pi test?>. This does not include XML declarations, which are not visible to the  class.

    */
    public static var ProcessingInstruction : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_ProcessingInstruction());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType Comment
    /**
    A comment, such as <!-- my comment -->

    */
    public static var Comment : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_Comment());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathNodeType All
    /**
    Any of the  node types.

    */
    public static var All : dotnet.System.Xml.XPath.XPathNodeType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathNodeType(val: System_Xml_XPath_XPathNodeType_get_All());
            return __return;
        }
    }
} // XPathNodeType


// type: System.Xml.XPath.XPathResultType
    /**
    Specifies the return type of the XPath expression.

    */
public struct XPathResultType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XPathResultType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XPath.XPathResultType Number
    /**
    A numeric value.

    */
    public static var Number : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_Number());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathResultType Navigator
    /**
    A tree fragment.

    */
    public static var Navigator : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_Navigator());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathResultType String
    /**
    A  value.

    */
    public static var String : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_String());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathResultType Boolean
    /**
    A  or  value.

    */
    public static var Boolean : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_Boolean());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathResultType NodeSet
    /**
    A node collection.

    */
    public static var NodeSet : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_NodeSet());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathResultType Any
    /**
    Any of the XPath node types.

    */
    public static var Any_ : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_Any());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XPathResultType Error
    /**
    The expression does not evaluate to the correct XPath type.

    */
    public static var Error : dotnet.System.Xml.XPath.XPathResultType {
        get {
        let __return = dotnet.System.Xml.XPath.XPathResultType(val: System_Xml_XPath_XPathResultType_get_Error());
            return __return;
        }
    }
} // XPathResultType


// type: System.Xml.XPath.XmlCaseOrder
    /**
    Specifies the sort order for uppercase and lowercase letters.

    */
public struct XmlCaseOrder : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XmlCaseOrder_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XPath.XmlCaseOrder None
    /**
    Ignore the case.

    */
    public static var None : dotnet.System.Xml.XPath.XmlCaseOrder {
        get {
        let __return = dotnet.System.Xml.XPath.XmlCaseOrder(val: System_Xml_XPath_XmlCaseOrder_get_None());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XmlCaseOrder UpperFirst
    /**
    Uppercase letters are sorted before lowercase letters.

    */
    public static var UpperFirst : dotnet.System.Xml.XPath.XmlCaseOrder {
        get {
        let __return = dotnet.System.Xml.XPath.XmlCaseOrder(val: System_Xml_XPath_XmlCaseOrder_get_UpperFirst());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XmlCaseOrder LowerFirst
    /**
    Lowercase letters are sorted before uppercase letters.

    */
    public static var LowerFirst : dotnet.System.Xml.XPath.XmlCaseOrder {
        get {
        let __return = dotnet.System.Xml.XPath.XmlCaseOrder(val: System_Xml_XPath_XmlCaseOrder_get_LowerFirst());
            return __return;
        }
    }
} // XmlCaseOrder


// type: System.Xml.XPath.XmlDataType
    /**
    Specifies the data type used to determine sort order.

    */
public struct XmlDataType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XmlDataType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XPath.XmlDataType Text
    /**
    Values are sorted alphabetically.

    */
    public static var Text : dotnet.System.Xml.XPath.XmlDataType {
        get {
        let __return = dotnet.System.Xml.XPath.XmlDataType(val: System_Xml_XPath_XmlDataType_get_Text());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XmlDataType Number
    /**
    Values are sorted numerically.

    */
    public static var Number : dotnet.System.Xml.XPath.XmlDataType {
        get {
        let __return = dotnet.System.Xml.XPath.XmlDataType(val: System_Xml_XPath_XmlDataType_get_Number());
            return __return;
        }
    }
} // XmlDataType


// type: System.Xml.XPath.XmlSortOrder
    /**
    Specifies the sort order.

    */
public struct XmlSortOrder : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XPath_XmlSortOrder_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XPath.XmlSortOrder Ascending
    /**
    Nodes are sorted in ascending order. For example, if the numbers 1,2,3, and 4 are sorted in ascending order, they appear as 1,2,3,4.

    */
    public static var Ascending : dotnet.System.Xml.XPath.XmlSortOrder {
        get {
        let __return = dotnet.System.Xml.XPath.XmlSortOrder(val: System_Xml_XPath_XmlSortOrder_get_Ascending());
            return __return;
        }
    }
    // static field: System.Xml.XPath.XmlSortOrder Descending
    /**
    Nodes are sorted in descending order. For example, if the numbers 1,2,3, and 4 are sorted in descending order, they appear as, 4,3,2,1.

    */
    public static var Descending : dotnet.System.Xml.XPath.XmlSortOrder {
        get {
        let __return = dotnet.System.Xml.XPath.XmlSortOrder(val: System_Xml_XPath_XmlSortOrder_get_Descending());
            return __return;
        }
    }
} // XmlSortOrder


}

// System.Xml.Xsl
extension System.Xml.Xsl {
// type: System.Xml.Xsl.IXsltContextFunction
    /**
    Provides an interface to a given function defined in the Extensible Stylesheet Language for Transformations (XSLT) style sheet during runtime execution.

    */
open class IXsltContextFunction
    :
    SGBridgeGenericValue,
    System_Xml_Xsl_IXsltContextFunction
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_IXsltContextFunction_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Invoke(System.Xml.Xsl.XsltContext, System.Object[], System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)
    /**
    Provides the method to invoke the function with the given arguments in the given context.

    - Parameter xsltContext: The XSLT context for the function call.
    - Parameter args: The arguments of the function call. Each argument is an element in the array.
    - Parameter docContext: The context node for the function call.
    - Returns: An  representing the return value of the function.

    */
    open func Invoke(xsltContext : dotnet.System.Xml.Xsl.XsltContext, args : dotnet.System_Arr<dotnet.System.Object>, docContext : dotnet.System.Xml.XPath.XPathNavigator) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextFunction_Object__Invoke_0__3__XsltContext_ObjectArray_XPathNavigator(&__thrown, self.get_handle(), xsltContext.get_handle(), args.get_handle(), docContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XPath.XPathResultType[] get_ArgTypes()
// docid: M:System.Xml.Xsl.IXsltContextFunction.get_ArgTypes
    open func get_ArgTypes() throws -> dotnet.System_Arr<dotnet.System.Xml.XPath.XPathResultType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextFunction_XPathResultTypeArray__get_ArgTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.XPath.XPathResultType>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Maxargs()
// docid: M:System.Xml.Xsl.IXsltContextFunction.get_Maxargs
    open func get_Maxargs() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextFunction_i32__get_Maxargs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Minargs()
// docid: M:System.Xml.Xsl.IXsltContextFunction.get_Minargs
    open func get_Minargs() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextFunction_i32__get_Minargs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Xml.XPath.XPathResultType get_ReturnType()
// docid: M:System.Xml.Xsl.IXsltContextFunction.get_ReturnType
    open func get_ReturnType() throws -> dotnet.System.Xml.XPath.XPathResultType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextFunction_XPathResultType__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathResultType(val: __return);
        }
    }
} // IXsltContextFunction


// type: System.Xml.Xsl.IXsltContextVariable
    /**
    Provides an interface to a given variable that is defined in the style sheet during runtime execution.

    */
open class IXsltContextVariable
    :
    SGBridgeGenericValue,
    System_Xml_Xsl_IXsltContextVariable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_IXsltContextVariable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Evaluate(System.Xml.Xsl.XsltContext)
// docid: M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)
    /**
    Evaluates the variable at runtime and returns an object that represents the value of the variable.

    - Parameter xsltContext: An  representing the execution context of the variable.
    - Returns: An  representing the value of the variable. Possible return types include number, string, Boolean, document fragment, or node set.

    */
    open func Evaluate(xsltContext : dotnet.System.Xml.Xsl.XsltContext) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextVariable_Object__Evaluate_0__1__XsltContext(&__thrown, self.get_handle(), xsltContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsLocal()
// docid: M:System.Xml.Xsl.IXsltContextVariable.get_IsLocal
    open func get_IsLocal() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextVariable_bool__get_IsLocal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsParam()
// docid: M:System.Xml.Xsl.IXsltContextVariable.get_IsParam
    open func get_IsParam() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextVariable_bool__get_IsParam_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.XPath.XPathResultType get_VariableType()
// docid: M:System.Xml.Xsl.IXsltContextVariable.get_VariableType
    open func get_VariableType() throws -> dotnet.System.Xml.XPath.XPathResultType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_IXsltContextVariable_XPathResultType__get_VariableType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathResultType(val: __return);
        }
    }
} // IXsltContextVariable


// type: System.Xml.Xsl.XslCompiledTransform
    /**
    Transforms XML data using an XSLT style sheet.

    */
public final class XslCompiledTransform
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XslCompiledTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Xsl.XslCompiledTransform.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XslCompiledTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class with the specified debug setting.

    - Parameter enableDebug: 
         to generate debug information; otherwise . Setting this to  enables you to debug the style sheet with the Microsoft Visual Studio Debugger.
    */
    public init(enableDebug : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XslCompiledTransform_ctor_0__1__bool(&__thrown, Swift.Int32(enableDebug ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load(System.Reflection.MethodInfo, System.Byte[], System.Type[])
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
    /**
    Loads a method from a style sheet compiled using the  utility.

    - Parameter executeMethod: A  object representing the compiler-generated execute method of the compiled style sheet.
    - Parameter queryData: A byte array of serialized data structures in the staticData field of the compiled style sheet as generated by the  method.
    - Parameter earlyBoundTypes: An array of types stored in the compiler-generated ebTypes field of the compiled style sheet.
    */
    public func Load(executeMethod : dotnet.System.Reflection.MethodInfo, queryData : dotnet.System_Arr<Swift.UInt8>, earlyBoundTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__3__MethodInfo_u8Array_TypeArray(&__thrown, self.get_handle(), executeMethod.get_handle(), queryData.get_handle(), (earlyBoundTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.String)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)
    /**
    Loads and compiles the style sheet located at the specified URI.

    - Parameter stylesheetUri: The URI of the style sheet.
    */
    public func Load(stylesheetUri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__1__String(&__thrown, self.get_handle(), stylesheetUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.String, System.Xml.Xsl.XsltSettings, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
    /**
    Loads and compiles the XSLT style sheet specified by the URI. The  resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.

    - Parameter stylesheetUri: The URI of the style sheet.
    - Parameter settings: The  to apply to the style sheet. If this is , the  setting is applied.
    - Parameter stylesheetResolver: The  used to resolve the style sheet URI and any style sheets referenced in XSLT import and include elements.
    */
    public func Load(stylesheetUri : dotnet.System.String, settings : Optional<dotnet.System.Xml.Xsl.XsltSettings>, stylesheetResolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__3__String_XsltSettings_XmlResolver(&__thrown, self.get_handle(), stylesheetUri.get_handle(), settings?.get_handle() ?? nil, stylesheetResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Type)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
    /**
    Loads the compiled style sheet that was created using the XSLT Compiler (xsltc.exe).

    - Parameter compiledStylesheet: The name of the class that contains the compiled style sheet.  
  
 This is usually the name of the style sheet. Unless otherwise specified, the xsltc.exe tool uses the name of the style sheet for the class and assembly names.
    */
    public func Load(compiledStylesheet : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__1__Type(&__thrown, self.get_handle(), compiledStylesheet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XmlReader)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
    /**
    Compiles the style sheet contained in the .

    - Parameter stylesheet: An  containing the style sheet.
    */
    public func Load(stylesheet : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__1__XmlReader(&__thrown, self.get_handle(), stylesheet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XmlReader, System.Xml.Xsl.XsltSettings, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
    /**
    Compiles the XSLT style sheet contained in the . The  resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.

    - Parameter stylesheet: The  containing the style sheet.
    - Parameter settings: The  to apply to the style sheet. If this is , the  setting is applied.
    - Parameter stylesheetResolver: The  used to resolve any style sheets referenced in XSLT import and include elements. If this is , external resources are not resolved.
    */
    public func Load(stylesheet : dotnet.System.Xml.XmlReader, settings : Optional<dotnet.System.Xml.Xsl.XsltSettings>, stylesheetResolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__3__XmlReader_XsltSettings_XmlResolver(&__thrown, self.get_handle(), stylesheet.get_handle(), settings?.get_handle() ?? nil, stylesheetResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XPath.IXPathNavigable)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
    /**
    Compiles the style sheet contained in the  object.

    - Parameter stylesheet: An object implementing the  interface. In the Microsoft .NET Framework, this can be either an  (typically an ), or an  containing the style sheet.
    */
    public func Load(stylesheet : dotnet.System.Xml.XPath.IXPathNavigable) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__1__IXPathNavigable(&__thrown, self.get_handle(), stylesheet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltSettings, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
    /**
    Compiles the XSLT style sheet contained in the . The  resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.

    - Parameter stylesheet: An object implementing the  interface. In the Microsoft .NET Framework, this can be either an  (typically an ), or an  containing the style sheet.
    - Parameter settings: The  to apply to the style sheet. If this is , the  setting is applied.
    - Parameter stylesheetResolver: The  used to resolve any style sheets referenced in XSLT import and include elements. If this is , external resources are not resolved.
    */
    public func Load(stylesheet : dotnet.System.Xml.XPath.IXPathNavigable, settings : Optional<dotnet.System.Xml.Xsl.XsltSettings>, stylesheetResolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Load_0__3__IXPathNavigable_XsltSettings_XmlResolver(&__thrown, self.get_handle(), stylesheet.get_handle(), settings?.get_handle() ?? nil, stylesheetResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.String)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
    /**
    Executes the transform using the input document specified by the URI and outputs the results to a file.

    - Parameter inputUri: The URI of the input document.
    - Parameter resultsFile: The URI of the output file.
    */
    public func Transform(inputUri : dotnet.System.String, resultsFile : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__2__String_String(&__thrown, self.get_handle(), inputUri.get_handle(), resultsFile.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
    /**
    Executes the transform using the input document specified by the URI and outputs the results to an .

    - Parameter inputUri: The URI of the input document.
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    */
    public func Transform(inputUri : dotnet.System.String, results : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__2__String_XmlWriter(&__thrown, self.get_handle(), inputUri.get_handle(), results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.Xml.Xsl.XsltArgumentList, System.IO.Stream)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
    /**
    Executes the transform using the input document specified by the URI and outputs the results to stream. The  provides additional run-time arguments.

    - Parameter inputUri: The URI of the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The stream to which you want to output.
    */
    public func Transform(inputUri : dotnet.System.String, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__String_XsltArgumentList_Stream(&__thrown, self.get_handle(), inputUri.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
    /**
    Executes the transform using the input document specified by the URI and outputs the results to a .

    - Parameter inputUri: The URI of the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.
    */
    public func Transform(inputUri : dotnet.System.String, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__String_XsltArgumentList_TextWriter(&__thrown, self.get_handle(), inputUri.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
    /**
    Executes the transform using the input document specified by the URI and outputs the results to an . The  provides additional run-time arguments.

    - Parameter inputUri: The URI of the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    */
    public func Transform(inputUri : dotnet.System.String, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__String_XsltArgumentList_XmlWriter(&__thrown, self.get_handle(), inputUri.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XmlReader, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to an .

    - Parameter input: The  containing the input document.
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    */
    public func Transform(input : dotnet.System.Xml.XmlReader, results : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__2__XmlReader_XmlWriter(&__thrown, self.get_handle(), input.get_handle(), results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XmlReader, System.Xml.Xsl.XsltArgumentList, System.IO.Stream)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to a stream. The  provides additional run-time arguments.

    - Parameter input: An  containing the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The stream to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XmlReader, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__XmlReader_XsltArgumentList_Stream(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XmlReader, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to a . The  provides additional run-time arguments.

    - Parameter input: An  containing the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XmlReader, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__XmlReader_XsltArgumentList_TextWriter(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XmlReader, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to an . The  provides additional run-time arguments.

    - Parameter input: An  containing the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    */
    public func Transform(input : dotnet.System.Xml.XmlReader, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__XmlReader_XsltArgumentList_XmlWriter(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XmlReader, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to an . The  provides additional run-time arguments and the XmlResolver resolves the XSLT document() function.

    - Parameter input: An  containing the input document.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    - Parameter documentResolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.
    */
    public func Transform(input : dotnet.System.Xml.XmlReader, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.Xml.XmlWriter, documentResolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__4__XmlReader_XsltArgumentList_XmlWriter_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle(), documentResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to an .

    - Parameter input: An object implementing the  interface. In the Microsoft .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, results : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__2__IXPathNavigable_XmlWriter(&__thrown, self.get_handle(), input.get_handle(), results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.IO.Stream)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to a stream. The  provides additional runtime arguments.

    - Parameter input: An object implementing the  interface. In the Microsoft .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The stream to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__IXPathNavigable_XsltArgumentList_Stream(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to an . The  provides additional run-time arguments.

    - Parameter input: An object implementing the  interface. In the Microsoft .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__IXPathNavigable_XsltArgumentList_TextWriter(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
    /**
    Executes the transform using the input document specified by the  object and outputs the results to an . The  provides additional run-time arguments.

    - Parameter input: An object implementing the  interface. In the Microsoft .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter arguments: An  containing the namespace-qualified arguments used as input to the transform. This value can be .
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an xsl:output element, you should create the  using the  object returned from the  property. This ensures that the  has the correct output settings.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__3__IXPathNavigable_XsltArgumentList_XmlWriter(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
    /**
    Executes the transform by using the input document that is specified by the  object and outputs the results to an . The  provides additional run-time arguments and the  resolves the XSLT  function.

    - Parameter input: The document to transform that is specified by the  object.
    - Parameter arguments: Argument list as .
    - Parameter results: The  to which you want to output.  
  
 If the style sheet contains an  element, you should create the  by using the  object that is returned from the  property. This ensures that the  has the correct output settings.
    - Parameter documentResolver: The  used to resolve the XSLT  function. If this is , the  function is not resolved.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, arguments : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, results : dotnet.System.Xml.XmlWriter, documentResolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslCompiledTransform_void__Transform_0__4__IXPathNavigable_XsltArgumentList_XmlWriter_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), arguments?.get_handle() ?? nil, results.get_handle(), documentResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlWriterSettings get_OutputSettings()
// docid: M:System.Xml.Xsl.XslCompiledTransform.get_OutputSettings
    public func get_OutputSettings() throws -> Optional<dotnet.System.Xml.XmlWriterSettings> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XslCompiledTransform_XmlWriterSettings__get_OutputSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlWriterSettings(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets an  object that contains the output information derived from the xsl:output element of the style sheet.

    */
    public var OutputSettings : Optional<dotnet.System.Xml.XmlWriterSettings> {
        get {
            return try! get_OutputSettings();
        }
    }
} // XslCompiledTransform


// type: System.Xml.Xsl.XslTransform
    /**
    Transforms XML data using an Extensible Stylesheet Language for Transformations (XSLT) style sheet.

    */
public final class XslTransform
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XslTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Xsl.XslTransform.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XslTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load(System.String)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.String)
    /**
    Loads the XSLT style sheet specified by a URL.

    - Parameter url: The URL that specifies the XSLT style sheet to load.
    */
    public func Load(url : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.String, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)
    /**
    Loads the XSLT style sheet specified by a URL.

    - Parameter url: The URL that specifies the XSLT style sheet to load.
    - Parameter resolver: The  to use to load the style sheet and any style sheet(s) referenced in xsl:import and xsl:include elements.  
  
 If this is , a default  with no user credentials is used to open the style sheet. The default  is not used to resolve any external resources in the style sheet, so xsl:import and xsl:include elements are not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Load(url : dotnet.System.String, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__2__String_XmlResolver(&__thrown, self.get_handle(), url.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XmlReader)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)
    /**
    Loads the XSLT style sheet contained in the .

    - Parameter stylesheet: An  object that contains the XSLT style sheet.
    */
    public func Load(stylesheet : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__1__XmlReader(&__thrown, self.get_handle(), stylesheet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XmlReader, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)
    /**
    Loads the XSLT style sheet contained in the .

    - Parameter stylesheet: An  object that contains the XSLT style sheet.
    - Parameter resolver: The  used to load any style sheets referenced in xsl:import and xsl:include elements. If this is , external resources are not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Load(stylesheet : dotnet.System.Xml.XmlReader, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__2__XmlReader_XmlResolver(&__thrown, self.get_handle(), stylesheet.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XPath.IXPathNavigable)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)
    /**
    Loads the XSLT style sheet contained in the .

    - Parameter stylesheet: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the XSLT style sheet.
    */
    public func Load(stylesheet : dotnet.System.Xml.XPath.IXPathNavigable) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__1__IXPathNavigable(&__thrown, self.get_handle(), stylesheet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XPath.IXPathNavigable, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)
    /**
    Loads the XSLT style sheet contained in the .

    - Parameter stylesheet: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the XSLT style sheet.
    - Parameter resolver: The  used to load any style sheets referenced in xsl:import and xsl:include elements. If this is , external resources are not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Load(stylesheet : dotnet.System.Xml.XPath.IXPathNavigable, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__2__IXPathNavigable_XmlResolver(&__thrown, self.get_handle(), stylesheet.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)
    /**
    Loads the XSLT style sheet contained in the .

    - Parameter stylesheet: An  object that contains the XSLT style sheet.
    */
    public func Load(stylesheet : dotnet.System.Xml.XPath.XPathNavigator) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__1__XPathNavigator(&__thrown, self.get_handle(), stylesheet.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.Xml.XPath.XPathNavigator, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)
    /**
    Loads the XSLT style sheet contained in the .

    - Parameter stylesheet: An  object that contains the XSLT style sheet.
    - Parameter resolver: The  used to load any style sheets referenced in xsl:import and xsl:include elements. If this is , external resources are not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Load(stylesheet : dotnet.System.Xml.XPath.XPathNavigator, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Load_0__2__XPathNavigator_XmlResolver(&__thrown, self.get_handle(), stylesheet.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.String)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)
    /**
    Transforms the XML data in the input file and outputs the result to an output file.

    - Parameter inputfile: The URL of the source document to be transformed.
    - Parameter outputfile: The URL of the output file.
    */
    public func Transform(inputfile : dotnet.System.String, outputfile : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__2__String_String(&__thrown, self.get_handle(), inputfile.get_handle(), outputfile.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.String, System.String, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the input file and outputs the result to an output file.

    - Parameter inputfile: The URL of the source document to be transformed.
    - Parameter outputfile: The URL of the output file.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(inputfile : dotnet.System.String, outputfile : dotnet.System.String, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__String_String_XmlResolver(&__thrown, self.get_handle(), inputfile.get_handle(), outputfile.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlReader Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to an .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Returns: An  containing the results of the transformation.

    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XslTransform_XmlReader__Transform_0__2__IXPathNavigable_XsltArgumentList(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.IO.Stream)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The stream to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__IXPathNavigable_XsltArgumentList_Stream(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.IO.Stream, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The stream to which you want to output.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.Stream, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__4__IXPathNavigable_XsltArgumentList_Stream_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__IXPathNavigable_XsltArgumentList_TextWriter(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.TextWriter, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__4__IXPathNavigable_XsltArgumentList_TextWriter_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlReader Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to an .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    - Returns: An  containing the results of the transformation.

    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XslTransform_XmlReader__Transform_0__3__IXPathNavigable_XsltArgumentList_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to an .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__IXPathNavigable_XsltArgumentList_XmlWriter(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to an .

    - Parameter input: An object implementing the  interface. In the .NET Framework, this can be either an  (typically an ), or an  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(input : dotnet.System.Xml.XPath.IXPathNavigable, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.Xml.XmlWriter, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__4__IXPathNavigable_XsltArgumentList_XmlWriter_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlReader Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to an .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Returns: An  containing the results of the transformation.

    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XslTransform_XmlReader__Transform_0__2__XPathNavigator_XsltArgumentList(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // void Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.IO.Stream)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The stream to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__XPathNavigator_XsltArgumentList_Stream(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.IO.Stream, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The stream to which you want to output.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.Stream, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__4__XPathNavigator_XsltArgumentList_Stream_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__XPathNavigator_XsltArgumentList_TextWriter(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.IO.TextWriter, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to a .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.IO.TextWriter, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__4__XPathNavigator_XsltArgumentList_TextWriter_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlReader Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified  and outputs the result to an .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    - Returns: An  containing the results of the transformation.

    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XslTransform_XmlReader__Transform_0__3__XPathNavigator_XsltArgumentList_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // void Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
    /**
    Transforms the XML data in the  using the specified args and outputs the result to an .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__3__XPathNavigator_XsltArgumentList_XmlWriter(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Transform(System.Xml.XPath.XPathNavigator, System.Xml.Xsl.XsltArgumentList, System.Xml.XmlWriter, System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
    /**
    Transforms the XML data in the  using the specified args and outputs the result to an .

    - Parameter input: An  containing the data to be transformed.
    - Parameter args: An  containing the namespace-qualified arguments used as input to the transformation.
    - Parameter output: The  to which you want to output.
    - Parameter resolver: The  used to resolve the XSLT document() function. If this is , the document() function is not resolved.  
  
 The  is not cached after the  method completes.
    */
    public func Transform(input : dotnet.System.Xml.XPath.XPathNavigator, args : Optional<dotnet.System.Xml.Xsl.XsltArgumentList>, output : dotnet.System.Xml.XmlWriter, resolver : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__Transform_0__4__XPathNavigator_XsltArgumentList_XmlWriter_XmlResolver(&__thrown, self.get_handle(), input.get_handle(), args?.get_handle() ?? nil, output.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_XmlResolver(System.Xml.XmlResolver)
// docid: M:System.Xml.Xsl.XslTransform.set_XmlResolver(System.Xml.XmlResolver)
    public func set_XmlResolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XslTransform_void__set_XmlResolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XslTransform


// type: System.Xml.Xsl.XsltArgumentList
    /**
    Contains a variable number of arguments which are either XSLT parameters or extension objects.

    */
open class XsltArgumentList
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltArgumentList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Xsl.XsltArgumentList.#ctor
    /**
    Implements a new instance of the .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltArgumentList_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddExtensionObject(System.String, System.Object)
// docid: M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)
    /**
    Adds a new object to the  and associates it with the namespace URI.

    - Parameter namespaceUri: The namespace URI to associate with the object. To use the default namespace, specify an empty string.
    - Parameter extension: The object to add to the list.
    */
    open func AddExtensionObject(namespaceUri : dotnet.System.String, extension_ : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltArgumentList_void__AddExtensionObject_0__2__String_Object(&__thrown, self.get_handle(), namespaceUri.get_handle(), extension_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddParam(System.String, System.String, System.Object)
// docid: M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)
    /**
    Adds a parameter to the  and associates it with the namespace qualified name.

    - Parameter name: The name to associate with the parameter.
    - Parameter namespaceUri: The namespace URI to associate with the parameter. To use the default namespace, specify an empty string.
    - Parameter parameter: The parameter value or object to add to the list.
    */
    open func AddParam(name : dotnet.System.String, namespaceUri : dotnet.System.String, parameter : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltArgumentList_void__AddParam_0__3__String_String_Object(&__thrown, self.get_handle(), name.get_handle(), namespaceUri.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Xml.Xsl.XsltArgumentList.Clear
    /**
    Removes all parameters and extension objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltArgumentList_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetExtensionObject(System.String)
// docid: M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)
    /**
    Gets the object associated with the given namespace.

    - Parameter namespaceUri: The namespace URI of the object.
    - Returns: The namespace URI object or  if one was not found.

    */
    open func GetExtensionObject(namespaceUri : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltArgumentList_Object__GetExtensionObject_0__1__String(&__thrown, self.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetParam(System.String, System.String)
// docid: M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)
    /**
    Gets the parameter associated with the namespace qualified name.

    - Parameter name: The name of the parameter.  does not check to ensure the name passed is a valid local name; however, the name cannot be .
    - Parameter namespaceUri: The namespace URI associated with the parameter.
    - Returns: The parameter object or  if one was not found.

    */
    open func GetParam(name : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltArgumentList_Object__GetParam_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object RemoveExtensionObject(System.String)
// docid: M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)
    /**
    Removes the object with the namespace URI from the .

    - Parameter namespaceUri: The namespace URI associated with the object to remove.
    - Returns: The object with the namespace URI or  if one was not found.

    */
    open func RemoveExtensionObject(namespaceUri : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltArgumentList_Object__RemoveExtensionObject_0__1__String(&__thrown, self.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object RemoveParam(System.String, System.String)
// docid: M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)
    /**
    Removes the parameter from the .

    - Parameter name: The name of the parameter to remove.  does not check to ensure the name passed is a valid local name; however, the name cannot be .
    - Parameter namespaceUri: The namespace URI of the parameter to remove.
    - Returns: The parameter object or  if one was not found.

    */
    open func RemoveParam(name : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltArgumentList_Object__RemoveParam_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_XsltMessageEncountered(System.Xml.Xsl.XsltMessageEncounteredEventHandler)
// docid: M:System.Xml.Xsl.XsltArgumentList.add_XsltMessageEncountered(System.Xml.Xsl.XsltMessageEncounteredEventHandler)
    open func add_XsltMessageEncountered(value : dotnet.System.Xml.Xsl.XsltMessageEncounteredEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltArgumentList_void__add_XsltMessageEncountered_0__1__XsltMessageEncounteredEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_XsltMessageEncountered(value : @escaping (dotnet.System.Object, dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Xsl.XsltMessageEncounteredEventHandler(value);
        return try add_XsltMessageEncountered(value: del_value);
    }
    // [IsSpecialName] void remove_XsltMessageEncountered(System.Xml.Xsl.XsltMessageEncounteredEventHandler)
// docid: M:System.Xml.Xsl.XsltArgumentList.remove_XsltMessageEncountered(System.Xml.Xsl.XsltMessageEncounteredEventHandler)
    open func remove_XsltMessageEncountered(value : dotnet.System.Xml.Xsl.XsltMessageEncounteredEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltArgumentList_void__remove_XsltMessageEncountered_0__1__XsltMessageEncounteredEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_XsltMessageEncountered(value : @escaping (dotnet.System.Object, dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Xml.Xsl.XsltMessageEncounteredEventHandler(value);
        return try remove_XsltMessageEncountered(value: del_value);
    }
} // XsltArgumentList


// type: System.Xml.Xsl.XsltCompileException
    /**
    The exception that is thrown by the Load method when an error is found in the XSLT style sheet.

    */
open class XsltCompileException
    :
    dotnet.System.Xml.Xsl.XsltException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltCompileException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Xsl.XsltCompileException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltCompileException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Exception, System.String, System.Int32, System.Int32)
// docid: M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class.

    - Parameter inner: The  that threw the .
    - Parameter sourceUri: The location path of the style sheet.
    - Parameter lineNumber: The line number indicating where the error occurred in the style sheet.
    - Parameter linePosition: The line position indicating where the error occurred in the style sheet.
    */
    public init(inner : dotnet.System.Exception, sourceUri : dotnet.System.String, lineNumber : Swift.Int32, linePosition : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltCompileException_ctor_0__4__Exception_String_i32_i32(&__thrown, inner.get_handle(), sourceUri.get_handle(), lineNumber, linePosition);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The message that describes the error.
    */
    public override init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltCompileException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The message that describes the error.
    - Parameter innerException: The exception that is the cause of the current exception, or  if no inner exception is specified.
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltCompileException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Streams all the  properties into the  class for the given .

    - Parameter info: The  object.
    - Parameter context: The  object.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltCompileException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XsltCompileException


// type: System.Xml.Xsl.XsltContext
    /**
    Encapsulates the current execution context of the Extensible Stylesheet Language for Transformations (XSLT) processor allowing XML Path Language (XPath) to resolve functions, parameters, and namespaces within XPath expressions.

    */
open class XsltContext
    :
    dotnet.System.Xml.XmlNamespaceManager
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 CompareDocument(System.String, System.String)
// docid: M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)
    /**
    When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the  class).

    - Parameter baseUri: The base URI of the first document to compare.
    - Parameter nextbaseUri: The base URI of the second document to compare.
    - Returns: An integer value describing the relative order of the two base URIs: -1 if  occurs before ; 0 if the two base URIs are identical; and 1 if  occurs after .

    */
    open func CompareDocument(baseUri : dotnet.System.String, nextbaseUri : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltContext_i32__CompareDocument_0__2__String_String(&__thrown, self.get_handle(), baseUri.get_handle(), nextbaseUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool PreserveWhitespace(System.Xml.XPath.XPathNavigator)
// docid: M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)
    /**
    When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.

    - Parameter node: The white space node that is to be preserved or stripped in the current context.
    - Returns: 
         if the white space is to be preserved;  if the white space is to be stripped.

    */
    open func PreserveWhitespace(node : dotnet.System.Xml.XPath.XPathNavigator) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltContext_bool__PreserveWhitespace_0__1__XPathNavigator(&__thrown, self.get_handle(), node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Xml.Xsl.IXsltContextFunction ResolveFunction(System.String, System.String, System.Xml.XPath.XPathResultType[])
// docid: M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])
    /**
    When overridden in a derived class, resolves a function reference and returns an  representing the function. The  is used at execution time to get the return value of the function.

    - Parameter prefix: The prefix of the function as it appears in the XPath expression.
    - Parameter name: The name of the function.
    - Parameter ArgTypes: An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).
    - Returns: An  representing the function.

    */
    open func ResolveFunction(prefix : dotnet.System.String, name : dotnet.System.String, ArgTypes : dotnet.System_Arr<dotnet.System.Xml.XPath.XPathResultType>) throws -> dotnet.System.Xml.Xsl.IXsltContextFunction {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltContext_IXsltContextFunction__ResolveFunction_0__3__String_String_XPathResultTypeArray(&__thrown, self.get_handle(), prefix.get_handle(), name.get_handle(), ArgTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Xsl.IXsltContextFunction(hndl : __return);
        }
    }
    // System.Xml.Xsl.IXsltContextVariable ResolveVariable(System.String, System.String)
// docid: M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)
    /**
    When overridden in a derived class, resolves a variable reference and returns an  representing the variable.

    - Parameter prefix: The prefix of the variable as it appears in the XPath expression.
    - Parameter name: The name of the variable.
    - Returns: An  representing the variable at runtime.

    */
    open func ResolveVariable(prefix : dotnet.System.String, name : dotnet.System.String) throws -> dotnet.System.Xml.Xsl.IXsltContextVariable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltContext_IXsltContextVariable__ResolveVariable_0__2__String_String(&__thrown, self.get_handle(), prefix.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Xsl.IXsltContextVariable(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Whitespace()
// docid: M:System.Xml.Xsl.XsltContext.get_Whitespace
    open func get_Whitespace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltContext_bool__get_Whitespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.

    */
    open var Whitespace : Bool {
        get {
            return try! get_Whitespace();
        }
    }
} // XsltContext


// type: System.Xml.Xsl.XsltException
    /**
    The exception that is thrown when an error occurs while processing an XSLT transformation.

    */
open class XsltException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Xsl.XsltException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.Xsl.XsltException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The message that describes the error.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter message: The description of the error condition.
    - Parameter innerException: The  which threw the , if any. This value can be .
    */
    public init(message : dotnet.System.String, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Streams all the  properties into the  class for the given .

    - Parameter info: The  object.
    - Parameter context: The  object.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LineNumber()
// docid: M:System.Xml.Xsl.XsltException.get_LineNumber
    open func get_LineNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltException_i32__get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LinePosition()
// docid: M:System.Xml.Xsl.XsltException.get_LinePosition
    open func get_LinePosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltException_i32__get_LinePosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Xml.Xsl.XsltException.get_Message
    open override func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltException_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SourceUri()
// docid: M:System.Xml.Xsl.XsltException.get_SourceUri
    open func get_SourceUri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltException_String__get_SourceUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the line number indicating where the error occurred in the style sheet.

    */
    open var LineNumber : Swift.Int32 {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets the line position indicating where the error occurred in the style sheet.

    */
    open var LinePosition : Swift.Int32 {
        get {
            return try! get_LinePosition();
        }
    }
    /**
    Gets the formatted error message describing the current exception.

    */
    open override var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
    /**
    Gets the location path of the style sheet.

    */
    open var SourceUri : Optional<dotnet.System.String> {
        get {
            return try! get_SourceUri();
        }
    }
} // XsltException


// type: System.Xml.Xsl.XsltMessageEncounteredEventArgs
    /**
    Provides data for the  event.

    */
open class XsltMessageEncounteredEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltMessageEncounteredEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.get_Message
    open func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltMessageEncounteredEventArgs_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the contents of the xsl:message element.

    */
    open var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
} // XsltMessageEncounteredEventArgs


// type: System.Xml.Xsl.XsltMessageEncounteredEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class XsltMessageEncounteredEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltMessageEncounteredEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Xml.Xsl.XsltMessageEncounteredEventArgs)
// docid: M:System.Xml.Xsl.XsltMessageEncounteredEventHandler.Invoke(System.Object,System.Xml.Xsl.XsltMessageEncounteredEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltMessageEncounteredEventHandler_void__Invoke_0__2__Object_XsltMessageEncounteredEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Xml.Xsl.XsltMessageEncounteredEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Xml.Xsl.XsltMessageEncounteredEventHandler.BeginInvoke(System.Object,System.Xml.Xsl.XsltMessageEncounteredEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltMessageEncounteredEventHandler_IAsyncResult__BeginInvoke_0__4__Object_XsltMessageEncounteredEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.Xsl.XsltMessageEncounteredEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltMessageEncounteredEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltMessageEncounteredEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Xml.Xsl.XsltMessageEncounteredEventArgs)
// docid: M:System.Xml.Xsl.XsltMessageEncounteredEventHandler.Invoke(System.Object,System.Xml.Xsl.XsltMessageEncounteredEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Xml.Xsl.XsltMessageEncounteredEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltMessageEncounteredEventHandler_void__Invoke_0__2__Object_XsltMessageEncounteredEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XsltMessageEncounteredEventHandler


// type: System.Xml.Xsl.XsltSettings
    /**
    Specifies the XSLT features to support during execution of the XSLT style sheet.

    */
public final class XsltSettings
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Xsl_XsltSettings_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Xsl.XsltSettings.#ctor
    /**
    Initializes a new instance of the  class with default settings.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool)
// docid: M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class with the specified settings.

    - Parameter enableDocumentFunction: 
         to enable support for the XSLT document() function; otherwise, .
    - Parameter enableScript: 
         to enable support for embedded scripts blocks; otherwise, .
    */
    public init(enableDocumentFunction : Bool, enableScript : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Xsl_XsltSettings_ctor_0__2__bool_bool(&__thrown, Swift.Int32(enableDocumentFunction ? 1 : 0), Swift.Int32(enableScript ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Xsl.XsltSettings get_Default()
// docid: M:System.Xml.Xsl.XsltSettings.get_Default
    public class func get_Default() throws -> dotnet.System.Xml.Xsl.XsltSettings {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltSettings_XsltSettings__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Xsl.XsltSettings(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_EnableDocumentFunction()
// docid: M:System.Xml.Xsl.XsltSettings.get_EnableDocumentFunction
    public func get_EnableDocumentFunction() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltSettings_bool__get_EnableDocumentFunction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableDocumentFunction(bool)
// docid: M:System.Xml.Xsl.XsltSettings.set_EnableDocumentFunction(System.Boolean)
    public func set_EnableDocumentFunction(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltSettings_void__set_EnableDocumentFunction_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableScript()
// docid: M:System.Xml.Xsl.XsltSettings.get_EnableScript
    public func get_EnableScript() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltSettings_bool__get_EnableScript_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableScript(bool)
// docid: M:System.Xml.Xsl.XsltSettings.set_EnableScript(System.Boolean)
    public func set_EnableScript(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Xsl_XsltSettings_void__set_EnableScript_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Xsl.XsltSettings get_TrustedXslt()
// docid: M:System.Xml.Xsl.XsltSettings.get_TrustedXslt
    public class func get_TrustedXslt() throws -> dotnet.System.Xml.Xsl.XsltSettings {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Xsl_XsltSettings_XsltSettings__get_TrustedXslt_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Xsl.XsltSettings(hndl : __return);
        }
    }
    /**
    Gets an  object with default settings. Support for the XSLT document() function and embedded script blocks is disabled.

    */
    public static var Default : dotnet.System.Xml.Xsl.XsltSettings {
        get {
            return try! get_Default();
        }
    }
    /**
    Gets or sets a value indicating whether to enable support for the XSLT document() function.

    */
    public var EnableDocumentFunction : Bool {
        get {
            return try! get_EnableDocumentFunction();
        }
        set(v) {
            return try! set_EnableDocumentFunction(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to enable support for embedded script blocks.

    */
    public var EnableScript : Bool {
        get {
            return try! get_EnableScript();
        }
        set(v) {
            return try! set_EnableScript(value: v);
        }
    }
    /**
    Gets an  object that enables support for the XSLT document() function and embedded script blocks.

    */
    public static var TrustedXslt : dotnet.System.Xml.Xsl.XsltSettings {
        get {
            return try! get_TrustedXslt();
        }
    }
} // XsltSettings


}



public protocol System_Xml_IApplicationResourceStreamResolver
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IHasXmlNode
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlLineInfo
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlNamespaceResolver
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_Schema_IXmlSchemaInfo
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_Serialization_IXmlSerializable
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_XPath_IXPathNavigable
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_Xsl_IXsltContextFunction
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_Xsl_IXsltContextVariable
    :
    SGBridgeGetHandle
{
}

