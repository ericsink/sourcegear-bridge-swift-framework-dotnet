// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.ComponentModel
// System.ComponentModel.DataAnnotations
extension System.ComponentModel.DataAnnotations {
// type: System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider
    /**
    Extends the metadata information for a class by adding attributes and property information that is defined in an associated class.

    */
open class AssociatedMetadataTypeTypeDescriptionProvider
    :
    dotnet.System.ComponentModel.TypeDescriptionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_AssociatedMetadataTypeTypeDescriptionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type)
    /**
    Initializes a new instance of the  class by using the specified type.

    - Parameter type: The type for which the metadata provider is created.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_AssociatedMetadataTypeTypeDescriptionProvider_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type)
// docid: M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type,System.Type)
    /**
    Initializes a new instance of the  class by using the specified metadata provider type and associated type.

    - Parameter type: The type for which the metadata provider is created.
    - Parameter associatedMetadataType: The associated type that contains the metadata.
    */
    public init(type : Optional<dotnet.System.Type_>, associatedMetadataType : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_AssociatedMetadataTypeTypeDescriptionProvider_ctor_0__2__Type_Type(&__thrown, type?.get_handle() ?? nil, associatedMetadataType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type, System.Object)
// docid: M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
    /**
    Gets a type descriptor for the specified type and object.

    - Parameter objectType: The type of object to retrieve the type descriptor for.
    - Parameter instance: An instance of the type.
    - Returns: The descriptor that provides metadata for the type.

    */
    open override func GetTypeDescriptor(objectType : Optional<dotnet.System.Type_>, instance : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.ComponentModel.ICustomTypeDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociatedMetadataTypeTypeDescriptionProvider_ICustomTypeDescriptor__GetTypeDescriptor_0__2__Type_Object(&__thrown, self.get_handle(), objectType?.get_handle() ?? nil, instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ICustomTypeDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // AssociatedMetadataTypeTypeDescriptionProvider


// type: System.ComponentModel.DataAnnotations.AssociationAttribute
    /**
    Specifies that an entity member represents a data relationship, such as a foreign key relationship.

    */
public final class AssociationAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_AssociationAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name of the association.
    - Parameter thisKey: A comma-separated list of the property names of the key values on the  side of the association.
    - Parameter otherKey: A comma-separated list of the property names of the key values on the  side of the association.
    */
    public init(name : dotnet.System.String, thisKey : dotnet.System.String, otherKey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_AssociationAttribute_ctor_0__3__String_String_String(&__thrown, name.get_handle(), thisKey.get_handle(), otherKey.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsForeignKey()
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.get_IsForeignKey
    public func get_IsForeignKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociationAttribute_bool__get_IsForeignKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsForeignKey(bool)
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.set_IsForeignKey(System.Boolean)
    public func set_IsForeignKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_AssociationAttribute_void__set_IsForeignKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociationAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_OtherKey()
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.get_OtherKey
    public func get_OtherKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociationAttribute_String__get_OtherKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_OtherKeyMembers()
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.get_OtherKeyMembers
    public func get_OtherKeyMembers() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociationAttribute_System_Collections_Generic_IEnumerable_string___get_OtherKeyMembers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ThisKey()
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.get_ThisKey
    public func get_ThisKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociationAttribute_String__get_ThisKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_ThisKeyMembers()
// docid: M:System.ComponentModel.DataAnnotations.AssociationAttribute.get_ThisKeyMembers
    public func get_ThisKeyMembers() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_AssociationAttribute_System_Collections_Generic_IEnumerable_string___get_ThisKeyMembers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    Gets or sets a value that indicates whether the association member represents a foreign key.

    */
    public var IsForeignKey : Bool {
        get {
            return try! get_IsForeignKey();
        }
        set(v) {
            return try! set_IsForeignKey(value: v);
        }
    }
    /**
    Gets the name of the association.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the property names of the key values on the OtherKey side of the association.

    */
    public var OtherKey : dotnet.System.String {
        get {
            return try! get_OtherKey();
        }
    }
    /**
    Gets a collection of individual key members that are specified in the  property.

    */
    public var OtherKeyMembers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_OtherKeyMembers();
        }
    }
    /**
    Gets the property names of the key values on the ThisKey side of the association.

    */
    public var ThisKey : dotnet.System.String {
        get {
            return try! get_ThisKey();
        }
    }
    /**
    Gets a collection of individual key members that are specified in the  property.

    */
    public var ThisKeyMembers : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_ThisKeyMembers();
        }
    }
} // AssociationAttribute


// type: System.ComponentModel.DataAnnotations.CompareAttribute
    /**
    Provides an attribute that compares two properties.

    */
open class CompareAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_CompareAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.CompareAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter otherProperty: The property to compare with the current property.
    */
    public init(otherProperty : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_CompareAttribute_ctor_0__1__String(&__thrown, otherProperty.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.CompareAttribute.FormatErrorMessage(System.String)
    /**
    Applies formatting to an error message, based on the data field where the error occurred.

    - Parameter name: The name of the field that caused the validation failure.
    - Returns: The formatted error message.

    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CompareAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_OtherProperty()
// docid: M:System.ComponentModel.DataAnnotations.CompareAttribute.get_OtherProperty
    open func get_OtherProperty() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CompareAttribute_String__get_OtherProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_OtherPropertyDisplayName()
// docid: M:System.ComponentModel.DataAnnotations.CompareAttribute.get_OtherPropertyDisplayName
    open func get_OtherPropertyDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CompareAttribute_String__get_OtherPropertyDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_RequiresValidationContext()
// docid: M:System.ComponentModel.DataAnnotations.CompareAttribute.get_RequiresValidationContext
    open override func get_RequiresValidationContext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CompareAttribute_bool__get_RequiresValidationContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the property to compare with the current property.

    */
    open var OtherProperty : dotnet.System.String {
        get {
            return try! get_OtherProperty();
        }
    }
    /**
    Gets the display name of the other property.

    */
    open var OtherPropertyDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_OtherPropertyDisplayName();
        }
    }
    /**
    Gets a value that indicates whether the attribute requires validation context.

    */
    open override var RequiresValidationContext : Bool {
        get {
            return try! get_RequiresValidationContext();
        }
    }
} // CompareAttribute


// type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute
    /**
    Specifies that a property participates in optimistic concurrency checks.

    */
public final class ConcurrencyCheckAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_ConcurrencyCheckAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ConcurrencyCheckAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ConcurrencyCheckAttribute


// type: System.ComponentModel.DataAnnotations.CreditCardAttribute
    /**
    Specifies that a data field value is a credit card number.

    */
public final class CreditCardAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.DataTypeAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_CreditCardAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.CreditCardAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_CreditCardAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.CreditCardAttribute.IsValid(System.Object)
    /**
    Determines whether the specified credit card number is valid.

    - Parameter value: The value to validate.
    - Returns: 
         if the credit card number is valid; otherwise, .

    */
    public override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CreditCardAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // CreditCardAttribute


// type: System.ComponentModel.DataAnnotations.CustomValidationAttribute
    /**
    Specifies a custom validation method that is used to validate a property or class instance.

    */
public final class CustomValidationAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_CustomValidationAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.String)
// docid: M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter validatorType: The type that contains the method that performs custom validation.
    - Parameter method: The method that performs custom validation.
    */
    public init(validatorType : dotnet.System.Type_, method : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_CustomValidationAttribute_ctor_0__2__Type_String(&__thrown, validatorType.get_handle(), method.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)
    /**
    Formats a validation error message.

    - Parameter name: The name to include in the formatted message.
    - Returns: An instance of the formatted error message.

    */
    public override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CustomValidationAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.get_Method
    public func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CustomValidationAttribute_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ValidatorType()
// docid: M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.get_ValidatorType
    public func get_ValidatorType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_CustomValidationAttribute_Type__get_ValidatorType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the validation method.

    */
    public var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
    }
    /**
    Gets the type that performs custom validation.

    */
    public var ValidatorType : dotnet.System.Type_ {
        get {
            return try! get_ValidatorType();
        }
    }
} // CustomValidationAttribute


// type: System.ComponentModel.DataAnnotations.DataType
    /**
    Represents an enumeration of the data types associated with data fields and parameters.

    */
public struct DataType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_DataType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.DataAnnotations.DataType Custom
    /**
    Represents a custom data type.

    */
    public static var Custom : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Custom());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType DateTime
    /**
    Represents an instant in time, expressed as a date and time of day.

    */
    public static var DateTime : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_DateTime());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Date
    /**
    Represents a date value.

    */
    public static var Date : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Date());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Time
    /**
    Represents a time value.

    */
    public static var Time : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Time());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Duration
    /**
    Represents a continuous time during which an object exists.

    */
    public static var Duration : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Duration());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType PhoneNumber
    /**
    Represents a phone number value.

    */
    public static var PhoneNumber : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_PhoneNumber());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Currency
    /**
    Represents a currency value.

    */
    public static var Currency : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Currency());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Text
    /**
    Represents text that is displayed.

    */
    public static var Text : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Text());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Html
    /**
    Represents an HTML file.

    */
    public static var Html : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Html());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType MultilineText
    /**
    Represents multi-line text.

    */
    public static var MultilineText : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_MultilineText());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType EmailAddress
    /**
    Represents an email address.

    */
    public static var EmailAddress : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_EmailAddress());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Password
    /**
    Represent a password value.

    */
    public static var Password : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Password());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Url
    /**
    Represents a URL value.

    */
    public static var Url : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Url());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType ImageUrl
    /**
    Represents a URL to an image.

    */
    public static var ImageUrl : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_ImageUrl());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType CreditCard
    /**
    Represents a credit card number.

    */
    public static var CreditCard : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_CreditCard());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType PostalCode
    /**
    Represents a postal code.

    */
    public static var PostalCode : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_PostalCode());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.DataType Upload
    /**
    Represents file upload data type.

    */
    public static var Upload : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.DataType(val: System_ComponentModel_DataAnnotations_DataType_get_Upload());
            return __return;
        }
    }
} // DataType


// type: System.ComponentModel.DataAnnotations.DataTypeAttribute
    /**
    Specifies the name of an additional type to associate with a data field.

    */
open class DataTypeAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_DataTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.DataAnnotations.DataType)
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)
    /**
    Initializes a new instance of the  class by using the specified type name.

    - Parameter dataType: The name of the type to associate with the data field.
    */
    public init(dataType : dotnet.System.ComponentModel.DataAnnotations.DataType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DataTypeAttribute_ctor_0__1__DataType(&__thrown, dataType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the specified field template name.

    - Parameter customDataType: The name of the custom field template to associate with the data field.
    */
    public init(customDataType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DataTypeAttribute_ctor_0__1__String(&__thrown, customDataType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetDataTypeName()
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName
    /**
    Returns the name of the type that is associated with the data field.

    - Returns: The name of the type associated with the data field.

    */
    open func GetDataTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DataTypeAttribute_String__GetDataTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)
    /**
    Checks that the value of the data field is valid.

    - Parameter value: The data field value to validate.
    - Returns: 
         always.

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DataTypeAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_CustomDataType()
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.get_CustomDataType
    open func get_CustomDataType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DataTypeAttribute_String__get_CustomDataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.DataAnnotations.DataType get_DataType()
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.get_DataType
    open func get_DataType() throws -> dotnet.System.ComponentModel.DataAnnotations.DataType {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DataTypeAttribute_DataType__get_DataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.DataAnnotations.DataType(val: __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.DataAnnotations.DisplayFormatAttribute get_DisplayFormat()
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.get_DisplayFormat
    open func get_DisplayFormat() throws -> Optional<dotnet.System.ComponentModel.DataAnnotations.DisplayFormatAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DataTypeAttribute_DisplayFormatAttribute__get_DisplayFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.DataAnnotations.DisplayFormatAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayFormat(System.ComponentModel.DataAnnotations.DisplayFormatAttribute)
// docid: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.set_DisplayFormat(System.ComponentModel.DataAnnotations.DisplayFormatAttribute)
    open func set_DisplayFormat(value : Optional<dotnet.System.ComponentModel.DataAnnotations.DisplayFormatAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DataTypeAttribute_void__set_DisplayFormat_0__1__DisplayFormatAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the name of custom field template that is associated with the data field.

    */
    open var CustomDataType : Optional<dotnet.System.String> {
        get {
            return try! get_CustomDataType();
        }
    }
    /**
    Gets the type that is associated with the data field.

    */
    open var DataType : dotnet.System.ComponentModel.DataAnnotations.DataType {
        get {
            return try! get_DataType();
        }
    }
    /**
    Gets a data-field display format.

    */
    open var DisplayFormat : Optional<dotnet.System.ComponentModel.DataAnnotations.DisplayFormatAttribute> {
        get {
            return try! get_DisplayFormat();
        }
        set(v) {
            return try! set_DisplayFormat(value: v!);
        }
    }
} // DataTypeAttribute


// type: System.ComponentModel.DataAnnotations.DisplayAttribute
    /**
    Provides a general-purpose attribute that lets you specify localizable strings for types and members of entity partial classes.

    */
public final class DisplayAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_DisplayAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DisplayAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Nullable<bool> GetAutoGenerateField()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField
    /**
    Returns the value of the  property.

    - Returns: The value of  if the property has been initialized; otherwise, .

    */
    public func GetAutoGenerateField() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_System_Nullable_bool___GetAutoGenerateField_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // System.Nullable<bool> GetAutoGenerateFilter()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter
    /**
    Returns a value that indicates whether UI should be generated automatically in order to display filtering for this field.

    - Returns: The value of  if the property has been initialized; otherwise, .

    */
    public func GetAutoGenerateFilter() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_System_Nullable_bool___GetAutoGenerateFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // System.String GetDescription()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription
    /**
    Returns the value of the  property.

    - Returns: The localized description, if the  has been specified and the  property represents a resource key; otherwise, the non-localized value of the  property.

    */
    public func GetDescription() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__GetDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetGroupName()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName
    /**
    Returns the value of the  property.

    - Returns: A value that will be used for grouping fields in the UI, if  has been initialized; otherwise, . If the  property has been specified and the  property represents a resource key, a localized string is returned; otherwise, a non-localized string is returned.

    */
    public func GetGroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__GetGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetName()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName
    /**
    Returns a value that is used for field display in the UI.

    - Returns: The localized string for the  property, if the  property has been specified and the  property represents a resource key; otherwise, the non-localized value of the  property.

    */
    public func GetName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__GetName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Nullable<System.Int32> GetOrder()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder
    /**
    Returns the value of the  property.

    - Returns: The value of the  property, if it has been set; otherwise, .

    */
    public func GetOrder() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_System_Nullable_i32___GetOrder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // System.String GetPrompt()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt
    /**
    Returns the value of the  property.

    - Returns: The localized string for the  property if the  property has been specified and if the  property represents a resource key; otherwise, the non-localized value of the  property.

    */
    public func GetPrompt() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__GetPrompt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetShortName()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName
    /**
    Returns the value of the  property.

    - Returns: The localized string for the  property if the  property has been specified and if the  property represents a resource key; otherwise, the non-localized value of the  value property.

    */
    public func GetShortName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__GetShortName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_AutoGenerateField()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_AutoGenerateField
    public func get_AutoGenerateField() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_bool__get_AutoGenerateField_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AutoGenerateField(bool)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_AutoGenerateField(System.Boolean)
    public func set_AutoGenerateField(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_AutoGenerateField_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AutoGenerateFilter()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_AutoGenerateFilter
    public func get_AutoGenerateFilter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_bool__get_AutoGenerateFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AutoGenerateFilter(bool)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_AutoGenerateFilter(System.Boolean)
    public func set_AutoGenerateFilter(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_AutoGenerateFilter_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_Description
    public func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Description(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_Description(System.String)
    public func set_Description(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_Description_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_GroupName()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_GroupName
    public func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_GroupName(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_GroupName(System.String)
    public func set_GroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_GroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_Order(System.Int32)
    public func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Prompt()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_Prompt
    public func get_Prompt() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__get_Prompt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Prompt(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_Prompt(System.String)
    public func set_Prompt(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_Prompt_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ResourceType()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_ResourceType
    public func get_ResourceType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_Type__get_ResourceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ResourceType(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_ResourceType(System.Type)
    public func set_ResourceType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_ResourceType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ShortName()
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.get_ShortName
    public func get_ShortName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayAttribute_String__get_ShortName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ShortName(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayAttribute.set_ShortName(System.String)
    public func set_ShortName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayAttribute_void__set_ShortName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether UI should be generated automatically in order to display this field.

    */
    public var AutoGenerateField : Bool {
        get {
            return try! get_AutoGenerateField();
        }
        set(v) {
            return try! set_AutoGenerateField(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether filtering UI is automatically displayed for this field.

    */
    public var AutoGenerateFilter : Bool {
        get {
            return try! get_AutoGenerateFilter();
        }
        set(v) {
            return try! set_AutoGenerateFilter(value: v);
        }
    }
    /**
    Gets or sets a value that is used to display a description in the UI.

    */
    public var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
        set(v) {
            return try! set_Description(value: v!);
        }
    }
    /**
    Gets or sets a value that is used to group fields in the UI.

    */
    public var GroupName : Optional<dotnet.System.String> {
        get {
            return try! get_GroupName();
        }
        set(v) {
            return try! set_GroupName(value: v!);
        }
    }
    /**
    Gets or sets a value that is used for display in the UI.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets the order weight of the column.

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    Gets or sets a value that will be used to set the watermark for prompts in the UI.

    */
    public var Prompt : Optional<dotnet.System.String> {
        get {
            return try! get_Prompt();
        }
        set(v) {
            return try! set_Prompt(value: v!);
        }
    }
    /**
    Gets or sets the type that contains the resources for the , , , and  properties.

    */
    public var ResourceType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ResourceType();
        }
        set(v) {
            return try! set_ResourceType(value: v!);
        }
    }
    /**
    Gets or sets a value that is used for the grid column label.

    */
    public var ShortName : Optional<dotnet.System.String> {
        get {
            return try! get_ShortName();
        }
        set(v) {
            return try! set_ShortName(value: v!);
        }
    }
} // DisplayAttribute


// type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute
    /**
    Specifies the column that is displayed in the referred table as a foreign-key column.

    */
open class DisplayColumnAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_DisplayColumnAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the specified column.

    - Parameter displayColumn: The name of the column to use as the display column.
    */
    public init(displayColumn : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DisplayColumnAttribute_ctor_0__1__String(&__thrown, displayColumn.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class by using the specified display and sort columns.

    - Parameter displayColumn: The name of the column to use as the display column.
    - Parameter sortColumn: The name of the column to use for sorting.
    */
    public init(displayColumn : dotnet.System.String, sortColumn : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DisplayColumnAttribute_ctor_0__2__String_String(&__thrown, displayColumn.get_handle(), sortColumn?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, bool)
// docid: M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)
    /**
    Initializes a new instance of the  class by using the specified display column, and the specified sort column and sort order.

    - Parameter displayColumn: The name of the column to use as the display column.
    - Parameter sortColumn: The name of the column to use for sorting.
    - Parameter sortDescending: 
         to sort in descending order; otherwise, . The default is .
    */
    public init(displayColumn : dotnet.System.String, sortColumn : Optional<dotnet.System.String>, sortDescending : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DisplayColumnAttribute_ctor_0__3__String_String_bool(&__thrown, displayColumn.get_handle(), sortColumn?.get_handle() ?? nil, Swift.Int32(sortDescending ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DisplayColumn()
// docid: M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.get_DisplayColumn
    open func get_DisplayColumn() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayColumnAttribute_String__get_DisplayColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SortColumn()
// docid: M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.get_SortColumn
    open func get_SortColumn() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayColumnAttribute_String__get_SortColumn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_SortDescending()
// docid: M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.get_SortDescending
    open func get_SortDescending() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayColumnAttribute_bool__get_SortDescending_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the name of the column to use as the display field.

    */
    open var DisplayColumn : dotnet.System.String {
        get {
            return try! get_DisplayColumn();
        }
    }
    /**
    Gets the name of the column to use for sorting.

    */
    open var SortColumn : Optional<dotnet.System.String> {
        get {
            return try! get_SortColumn();
        }
    }
    /**
    Gets a value that indicates whether to sort in descending or ascending order.

    */
    open var SortDescending : Bool {
        get {
            return try! get_SortDescending();
        }
    }
} // DisplayColumnAttribute


// type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute
    /**
    Specifies how data fields are displayed and formatted by ASP.NET Dynamic Data.

    */
open class DisplayFormatAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_DisplayFormatAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetNullDisplayText()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.GetNullDisplayText
    /**
    Returns the UI display string for .

    - Returns: 
        The UI display string.
        If  has not been specified, the value of  is returned.
        If  has been specified and  represents a resource key within that resource type, the localized value is returned.
        If  and  have not been set, returns .
      

    */
    open func GetNullDisplayText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_String__GetNullDisplayText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ApplyFormatInEditMode()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.get_ApplyFormatInEditMode
    open func get_ApplyFormatInEditMode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_bool__get_ApplyFormatInEditMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ApplyFormatInEditMode(bool)
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.set_ApplyFormatInEditMode(System.Boolean)
    open func set_ApplyFormatInEditMode(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayFormatAttribute_void__set_ApplyFormatInEditMode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ConvertEmptyStringToNull()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.get_ConvertEmptyStringToNull
    open func get_ConvertEmptyStringToNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_bool__get_ConvertEmptyStringToNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ConvertEmptyStringToNull(bool)
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.set_ConvertEmptyStringToNull(System.Boolean)
    open func set_ConvertEmptyStringToNull(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayFormatAttribute_void__set_ConvertEmptyStringToNull_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataFormatString()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.get_DataFormatString
    open func get_DataFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_String__get_DataFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataFormatString(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.set_DataFormatString(System.String)
    open func set_DataFormatString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayFormatAttribute_void__set_DataFormatString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HtmlEncode()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.get_HtmlEncode
    open func get_HtmlEncode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_bool__get_HtmlEncode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HtmlEncode(bool)
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.set_HtmlEncode(System.Boolean)
    open func set_HtmlEncode(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayFormatAttribute_void__set_HtmlEncode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_NullDisplayText()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.get_NullDisplayText
    open func get_NullDisplayText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_String__get_NullDisplayText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NullDisplayText(System.String)
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.set_NullDisplayText(System.String)
    open func set_NullDisplayText(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayFormatAttribute_void__set_NullDisplayText_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_NullDisplayTextResourceType()
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.get_NullDisplayTextResourceType
    open func get_NullDisplayTextResourceType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_DisplayFormatAttribute_Type__get_NullDisplayTextResourceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NullDisplayTextResourceType(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.set_NullDisplayTextResourceType(System.Type)
    open func set_NullDisplayTextResourceType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_DisplayFormatAttribute_void__set_NullDisplayTextResourceType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether the formatting string that is specified by the  property is applied to the field value when the data field is in edit mode.

    */
    open var ApplyFormatInEditMode : Bool {
        get {
            return try! get_ApplyFormatInEditMode();
        }
        set(v) {
            return try! set_ApplyFormatInEditMode(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether empty string values ("") are automatically converted to  when the data field is updated in the data source.

    */
    open var ConvertEmptyStringToNull : Bool {
        get {
            return try! get_ConvertEmptyStringToNull();
        }
        set(v) {
            return try! set_ConvertEmptyStringToNull(value: v);
        }
    }
    /**
    Gets or sets the display format for the field value.

    */
    open var DataFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_DataFormatString();
        }
        set(v) {
            return try! set_DataFormatString(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates whether the field should be HTML-encoded.

    */
    open var HtmlEncode : Bool {
        get {
            return try! get_HtmlEncode();
        }
        set(v) {
            return try! set_HtmlEncode(value: v);
        }
    }
    /**
    Gets or sets the text that is displayed for a field when the field's value is .

    */
    open var NullDisplayText : Optional<dotnet.System.String> {
        get {
            return try! get_NullDisplayText();
        }
        set(v) {
            return try! set_NullDisplayText(value: v!);
        }
    }
    /**
    Gets or sets the  that contains the resources for .
        
Using  along with , allows the  method to return localized values.

    */
    open var NullDisplayTextResourceType : Optional<dotnet.System.Type_> {
        get {
            return try! get_NullDisplayTextResourceType();
        }
        set(v) {
            return try! set_NullDisplayTextResourceType(value: v!);
        }
    }
} // DisplayFormatAttribute


// type: System.ComponentModel.DataAnnotations.EditableAttribute
    /**
    Indicates whether a data field is editable.

    */
public final class EditableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_EditableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter allowEdit: 
         to specify that field is editable; otherwise, .
    */
    public init(allowEdit : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_EditableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(allowEdit ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_AllowEdit()
// docid: M:System.ComponentModel.DataAnnotations.EditableAttribute.get_AllowEdit
    public func get_AllowEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_EditableAttribute_bool__get_AllowEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowInitialValue()
// docid: M:System.ComponentModel.DataAnnotations.EditableAttribute.get_AllowInitialValue
    public func get_AllowInitialValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_EditableAttribute_bool__get_AllowInitialValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowInitialValue(bool)
// docid: M:System.ComponentModel.DataAnnotations.EditableAttribute.set_AllowInitialValue(System.Boolean)
    public func set_AllowInitialValue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_EditableAttribute_void__set_AllowInitialValue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets a value that indicates whether a field is editable.

    */
    public var AllowEdit : Bool {
        get {
            return try! get_AllowEdit();
        }
    }
    /**
    Gets or sets a value that indicates whether an initial value is enabled.

    */
    public var AllowInitialValue : Bool {
        get {
            return try! get_AllowInitialValue();
        }
        set(v) {
            return try! set_AllowInitialValue(value: v);
        }
    }
} // EditableAttribute


// type: System.ComponentModel.DataAnnotations.EmailAddressAttribute
    /**
    Validates an email address.

    */
public final class EmailAddressAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.DataTypeAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_EmailAddressAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.EmailAddressAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_EmailAddressAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.EmailAddressAttribute.IsValid(System.Object)
    /**
    Determines whether the specified value matches the pattern of a valid email address.

    - Parameter value: The value to validate.
    - Returns: 
         if the specified value is valid or ; otherwise, .

    */
    public override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_EmailAddressAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // EmailAddressAttribute


// type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute
    /**
    Enables a .NET Framework enumeration to be mapped to a data column.

    */
public final class EnumDataTypeAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.DataTypeAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_EnumDataTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter enumType: The type of the enumeration.
    */
    public init(enumType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_EnumDataTypeAttribute_ctor_0__1__Type(&__thrown, enumType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.IsValid(System.Object)
    /**
    Checks that the value of the data field is valid.

    - Parameter value: The data field value to validate.
    - Returns: 
         if the data field value is valid; otherwise, .

    */
    public override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_EnumDataTypeAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_EnumType()
// docid: M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.get_EnumType
    public func get_EnumType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_EnumDataTypeAttribute_Type__get_EnumType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets or sets the enumeration type.

    */
    public var EnumType : dotnet.System.Type_ {
        get {
            return try! get_EnumType();
        }
    }
} // EnumDataTypeAttribute


// type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute
    /**
    Validates file name extensions.

    */
public final class FileExtensionsAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.DataTypeAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_FileExtensionsAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_FileExtensionsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.FormatErrorMessage(System.String)
    /**
    Applies formatting to an error message, based on the data field where the error occurred.

    - Parameter name: The name of the field that caused the validation failure.
    - Returns: The formatted error message.

    */
    public override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FileExtensionsAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.IsValid(System.Object)
    /**
    Checks that the specified file name extension or extensions is valid.

    - Parameter value: A comma delimited list of valid file extensions.
    - Returns: 
         if the file name extension is valid; otherwise, .

    */
    public override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FileExtensionsAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Extensions()
// docid: M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.get_Extensions
    public func get_Extensions() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FileExtensionsAttribute_String__get_Extensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Extensions(System.String)
// docid: M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.set_Extensions(System.String)
    public func set_Extensions(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_FileExtensionsAttribute_void__set_Extensions_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the file name extensions.

    */
    public var Extensions : dotnet.System.String {
        get {
            return try! get_Extensions();
        }
        set(v) {
            return try! set_Extensions(value: v);
        }
    }
} // FileExtensionsAttribute


// type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute
    /**
    Represents an attribute that is used to specify the filtering behavior for a column.

    */
public final class FilterUIHintAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_FilterUIHintAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the filter UI hint.

    - Parameter filterUIHint: The name of the control to use for filtering.
    */
    public init(filterUIHint : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_ctor_0__1__String(&__thrown, filterUIHint.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class by using the filter UI hint and presentation layer name.

    - Parameter filterUIHint: The name of the control to use for filtering.
    - Parameter presentationLayer: The name of the presentation layer that supports this control.
    */
    public init(filterUIHint : dotnet.System.String, presentationLayer : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_ctor_0__2__String_String(&__thrown, filterUIHint.get_handle(), presentationLayer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object[])
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])
    /**
    Initializes a new instance of the  class by using the filter UI hint, presentation layer name, and control parameters.

    - Parameter filterUIHint: The name of the control to use for filtering.
    - Parameter presentationLayer: The name of the presentation layer that supports this control.
    - Parameter controlParameters: The list of parameters for the control.
    */
    public init(filterUIHint : dotnet.System.String, presentationLayer : Optional<dotnet.System.String>, controlParameters : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_ctor_0__3__String_String_ObjectArray(&__thrown, filterUIHint.get_handle(), presentationLayer?.get_handle() ?? nil, controlParameters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this attribute instance is equal to a specified object.

    - Parameter obj: The object to compare with this attribute instance.
    - Returns: 
         if the passed object is equal to this attribute instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode
    /**
    Returns the hash code for this attribute instance.

    - Returns: This attribute instance hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_ControlParameters()
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.get_ControlParameters
    public func get_ControlParameters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_System_Collections_Generic_IDictionary_string_object___get_ControlParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FilterUIHint()
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.get_FilterUIHint
    public func get_FilterUIHint() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_String__get_FilterUIHint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PresentationLayer()
// docid: M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.get_PresentationLayer
    public func get_PresentationLayer() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_FilterUIHintAttribute_String__get_PresentationLayer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name/value pairs that are used as parameters in the control's constructor.

    */
    public var ControlParameters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_ControlParameters();
        }
    }
    /**
    Gets the name of the control to use for filtering.

    */
    public var FilterUIHint : dotnet.System.String {
        get {
            return try! get_FilterUIHint();
        }
    }
    /**
    Gets the name of the presentation layer that supports this control.

    */
    public var PresentationLayer : Optional<dotnet.System.String> {
        get {
            return try! get_PresentationLayer();
        }
    }
} // FilterUIHintAttribute


// type: System.ComponentModel.DataAnnotations.IValidatableObject
    /**
    Provides a way for an object to be validated.

    */
open class IValidatableObject
    :
    SGBridgeGenericValue,
    System_ComponentModel_DataAnnotations_IValidatableObject
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_IValidatableObject_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(System.ComponentModel.DataAnnotations.ValidationContext)
// docid: M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
    /**
    Determines whether the specified object is valid.

    - Parameter validationContext: The validation context.
    - Returns: A collection that holds failed-validation information.

    */
    open func Validate(validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ComponentModel.DataAnnotations.ValidationResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_IValidatableObject_System_Collections_Generic_IEnumerable_System_ComponentModel_DataAnnotations_ValidationResult___Validate_0__1__ValidationContext(&__thrown, self.get_handle(), validationContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IValidatableObject


// type: System.ComponentModel.DataAnnotations.KeyAttribute
    /**
    Denotes one or more properties that uniquely identify an entity.

    */
public final class KeyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_KeyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_KeyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // KeyAttribute


// type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    /**
    Specifies the maximum length of array or string data allowed in a property.

    */
open class MaxLengthAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_MaxLengthAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_MaxLengthAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class based on the  parameter.

    - Parameter length: The maximum allowable length of array or string data.
    */
    public init(length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_MaxLengthAttribute_ctor_0__1__i32(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.FormatErrorMessage(System.String)
    /**
    Applies formatting to a specified error message.

    - Parameter name: The name to include in the formatted string.
    - Returns: A localized string to describe the maximum acceptable length.

    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MaxLengthAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.IsValid(System.Object)
    /**
    Determines whether a specified object is valid.

    - Parameter value: The object to validate.
    - Returns: 
         if the value is null, or if the value is less than or equal to the specified maximum length; otherwise, .

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MaxLengthAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.get_Length
    open func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MaxLengthAttribute_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the maximum allowable length of the array or string data.

    */
    open var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
} // MaxLengthAttribute


// type: System.ComponentModel.DataAnnotations.MetadataTypeAttribute
    /**
    Specifies the metadata class to associate with a data model class.

    */
public final class MetadataTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_MetadataTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter metadataClassType: The metadata class to reference.
    */
    public init(metadataClassType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_MetadataTypeAttribute_ctor_0__1__Type(&__thrown, metadataClassType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_MetadataClassType()
// docid: M:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.get_MetadataClassType
    public func get_MetadataClassType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MetadataTypeAttribute_Type__get_MetadataClassType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the metadata class that is associated with a data-model partial class.

    */
    public var MetadataClassType : dotnet.System.Type_ {
        get {
            return try! get_MetadataClassType();
        }
    }
} // MetadataTypeAttribute


// type: System.ComponentModel.DataAnnotations.MinLengthAttribute
    /**
    Specifies the minimum length of array or string data allowed in a property.

    */
open class MinLengthAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_MinLengthAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class.

    - Parameter length: The length of the array or string data.
    */
    public init(length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_MinLengthAttribute_ctor_0__1__i32(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.MinLengthAttribute.FormatErrorMessage(System.String)
    /**
    Applies formatting to a specified error message.

    - Parameter name: The name to include in the formatted string.
    - Returns: A localized string to describe the minimum acceptable length.

    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MinLengthAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.MinLengthAttribute.IsValid(System.Object)
    /**
    Determines whether a specified object is valid.

    - Parameter value: The object to validate.
    - Returns: 
         if the specified object is valid; otherwise, .

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MinLengthAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.ComponentModel.DataAnnotations.MinLengthAttribute.get_Length
    open func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_MinLengthAttribute_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets or sets the minimum allowable length of the array or string data.

    */
    open var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
} // MinLengthAttribute


// type: System.ComponentModel.DataAnnotations.PhoneAttribute
    /**
    Specifies that a data field value is a well-formed phone number.

    */
public final class PhoneAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.DataTypeAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_PhoneAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.PhoneAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_PhoneAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.PhoneAttribute.IsValid(System.Object)
    /**
    Determines whether the specified phone number is in a valid phone number format.

    - Parameter value: The value to validate.
    - Returns: 
         if the phone number is valid; otherwise, .

    */
    public override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_PhoneAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // PhoneAttribute


// type: System.ComponentModel.DataAnnotations.RangeAttribute
    /**
    Specifies the numeric range constraints for the value of a data field.

    */
open class RangeAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_RangeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Double, System.Double)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)
    /**
    Initializes a new instance of the  class by using the specified minimum and maximum values.

    - Parameter minimum: Specifies the minimum value allowed for the data field value.
    - Parameter maximum: Specifies the maximum value allowed for the data field value.
    */
    public init(minimum : Swift.Double, maximum : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_RangeAttribute_ctor_0__2__f64_f64(&__thrown, minimum, maximum);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class by using the specified minimum and maximum values.

    - Parameter minimum: Specifies the minimum value allowed for the data field value.
    - Parameter maximum: Specifies the maximum value allowed for the data field value.
    */
    public init(minimum : Swift.Int32, maximum : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_RangeAttribute_ctor_0__2__i32_i32(&__thrown, minimum, maximum);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String, System.String)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)
    /**
    Initializes a new instance of the  class by using the specified minimum and maximum values and the specific type.

    - Parameter type: Specifies the type of the object to test.
    - Parameter minimum: Specifies the minimum value allowed for the data field value.
    - Parameter maximum: Specifies the maximum value allowed for the data field value.
    */
    public init(type : dotnet.System.Type_, minimum : dotnet.System.String, maximum : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_RangeAttribute_ctor_0__3__Type_String_String(&__thrown, type.get_handle(), minimum.get_handle(), maximum.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)
    /**
    Formats the error message that is displayed when range validation fails.

    - Parameter name: The name of the field that caused the validation failure.
    - Returns: The formatted error message.

    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)
    /**
    Checks that the value of the data field is in the specified range.

    - Parameter value: The data field value to validate.
    - Returns: 
         if the specified value is in the range; otherwise, .

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_ConvertValueInInvariantCulture()
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.get_ConvertValueInInvariantCulture
    open func get_ConvertValueInInvariantCulture() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_bool__get_ConvertValueInInvariantCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ConvertValueInInvariantCulture(bool)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.set_ConvertValueInInvariantCulture(System.Boolean)
    open func set_ConvertValueInInvariantCulture(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_RangeAttribute_void__set_ConvertValueInInvariantCulture_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Maximum()
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.get_Maximum
    open func get_Maximum() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_Object__get_Maximum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Minimum()
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.get_Minimum
    open func get_Minimum() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_Object__get_Minimum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_OperandType()
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.get_OperandType
    open func get_OperandType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_Type__get_OperandType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ParseLimitsInInvariantCulture()
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.get_ParseLimitsInInvariantCulture
    open func get_ParseLimitsInInvariantCulture() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RangeAttribute_bool__get_ParseLimitsInInvariantCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ParseLimitsInInvariantCulture(bool)
// docid: M:System.ComponentModel.DataAnnotations.RangeAttribute.set_ParseLimitsInInvariantCulture(System.Boolean)
    open func set_ParseLimitsInInvariantCulture(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_RangeAttribute_void__set_ParseLimitsInInvariantCulture_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that determines whether any conversions of the value being validated to  as set by the type parameter of the  constructor use the invariant culture or the current culture.

    */
    open var ConvertValueInInvariantCulture : Bool {
        get {
            return try! get_ConvertValueInInvariantCulture();
        }
        set(v) {
            return try! set_ConvertValueInInvariantCulture(value: v);
        }
    }
    /**
    Gets the maximum allowed field value.

    */
    open var Maximum : dotnet.System.Object {
        get {
            return try! get_Maximum();
        }
    }
    /**
    Gets the minimum allowed field value.

    */
    open var Minimum : dotnet.System.Object {
        get {
            return try! get_Minimum();
        }
    }
    /**
    Gets the type of the data field whose value must be validated.

    */
    open var OperandType : dotnet.System.Type_ {
        get {
            return try! get_OperandType();
        }
    }
    /**
    Gets or sets a value that determines whether string values for  and  are parsed using the invariant culture rather than the current culture.

    */
    open var ParseLimitsInInvariantCulture : Bool {
        get {
            return try! get_ParseLimitsInInvariantCulture();
        }
        set(v) {
            return try! set_ParseLimitsInInvariantCulture(value: v);
        }
    }
} // RangeAttribute


// type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute
    /**
    Specifies that a data field value in ASP.NET Dynamic Data must match the specified regular expression.

    */
open class RegularExpressionAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_RegularExpressionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter pattern: The regular expression that is used to validate the data field value.
    */
    public init(pattern : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_RegularExpressionAttribute_ctor_0__1__String(&__thrown, pattern.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)
    /**
    Formats the error message to display if the regular expression validation fails.

    - Parameter name: The name of the field that caused the validation failure.
    - Returns: The formatted error message.

    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RegularExpressionAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)
    /**
    Checks whether the value entered by the user matches the regular expression pattern.

    - Parameter value: The data field value to validate.
    - Returns: 
         if validation is successful; otherwise, .

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RegularExpressionAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MatchTimeoutInMilliseconds()
// docid: M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.get_MatchTimeoutInMilliseconds
    open func get_MatchTimeoutInMilliseconds() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RegularExpressionAttribute_i32__get_MatchTimeoutInMilliseconds_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MatchTimeoutInMilliseconds(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.set_MatchTimeoutInMilliseconds(System.Int32)
    open func set_MatchTimeoutInMilliseconds(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_RegularExpressionAttribute_void__set_MatchTimeoutInMilliseconds_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Pattern()
// docid: M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.get_Pattern
    open func get_Pattern() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RegularExpressionAttribute_String__get_Pattern_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the amount of time in milliseconds to execute a single matching operation before the operation times out.

    */
    open var MatchTimeoutInMilliseconds : Swift.Int32 {
        get {
            return try! get_MatchTimeoutInMilliseconds();
        }
        set(v) {
            return try! set_MatchTimeoutInMilliseconds(value: v);
        }
    }
    /**
    Gets the regular expression pattern.

    */
    open var Pattern : dotnet.System.String {
        get {
            return try! get_Pattern();
        }
    }
} // RegularExpressionAttribute


// type: System.ComponentModel.DataAnnotations.RequiredAttribute
    /**
    Specifies that a data field value is required.

    */
open class RequiredAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_RequiredAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_RequiredAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)
    /**
    Checks that the value of the required data field is not empty.

    - Parameter value: The data field value to validate.
    - Returns: 
         if validation is successful; otherwise, .

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RequiredAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowEmptyStrings()
// docid: M:System.ComponentModel.DataAnnotations.RequiredAttribute.get_AllowEmptyStrings
    open func get_AllowEmptyStrings() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_RequiredAttribute_bool__get_AllowEmptyStrings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowEmptyStrings(bool)
// docid: M:System.ComponentModel.DataAnnotations.RequiredAttribute.set_AllowEmptyStrings(System.Boolean)
    open func set_AllowEmptyStrings(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_RequiredAttribute_void__set_AllowEmptyStrings_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether an empty string is allowed.

    */
    open var AllowEmptyStrings : Bool {
        get {
            return try! get_AllowEmptyStrings();
        }
        set(v) {
            return try! set_AllowEmptyStrings(value: v);
        }
    }
} // RequiredAttribute


// type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute
    /**
    Specifies whether a class or data column uses scaffolding.

    */
open class ScaffoldColumnAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_ScaffoldColumnAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of  using the  property.

    - Parameter scaffold: The value that specifies whether scaffolding is enabled.
    */
    public init(scaffold : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ScaffoldColumnAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(scaffold ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Scaffold()
// docid: M:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.get_Scaffold
    open func get_Scaffold() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ScaffoldColumnAttribute_bool__get_Scaffold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets or sets the value that specifies whether scaffolding is enabled.

    */
    open var Scaffold : Bool {
        get {
            return try! get_Scaffold();
        }
    }
} // ScaffoldColumnAttribute


// type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    /**
    Specifies the minimum and maximum length of characters that are allowed in a data field.

    */
open class StringLengthAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_StringLengthAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class by using a specified maximum length.

    - Parameter maximumLength: The maximum length of a string.
    */
    public init(maximumLength : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_StringLengthAttribute_ctor_0__1__i32(&__thrown, maximumLength);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)
    /**
    Applies formatting to a specified error message.

    - Parameter name: The name of the field that caused the validation failure.
    - Returns: The formatted error message.

    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_StringLengthAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)
    /**
    Determines whether a specified object is valid.

    - Parameter value: The object to validate.
    - Returns: 
         if the specified object is valid; otherwise, .

    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_StringLengthAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumLength()
// docid: M:System.ComponentModel.DataAnnotations.StringLengthAttribute.get_MaximumLength
    open func get_MaximumLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_StringLengthAttribute_i32__get_MaximumLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MinimumLength()
// docid: M:System.ComponentModel.DataAnnotations.StringLengthAttribute.get_MinimumLength
    open func get_MinimumLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_StringLengthAttribute_i32__get_MinimumLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MinimumLength(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.StringLengthAttribute.set_MinimumLength(System.Int32)
    open func set_MinimumLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_StringLengthAttribute_void__set_MinimumLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the maximum length of a string.

    */
    open var MaximumLength : Swift.Int32 {
        get {
            return try! get_MaximumLength();
        }
    }
    /**
    Gets or sets the minimum length of a string.

    */
    open var MinimumLength : Swift.Int32 {
        get {
            return try! get_MinimumLength();
        }
        set(v) {
            return try! set_MinimumLength(value: v);
        }
    }
} // StringLengthAttribute


// type: System.ComponentModel.DataAnnotations.TimestampAttribute
    /**
    Specifies the data type of the column as a row version.

    */
public final class TimestampAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_TimestampAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_TimestampAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // TimestampAttribute


// type: System.ComponentModel.DataAnnotations.UIHintAttribute
    /**
    Specifies the template or user control that Dynamic Data uses to display a data field.

    */
open class UIHintAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_UIHintAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using a specified user control.

    - Parameter uiHint: The user control to use to display the data field.
    */
    public init(uiHint : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_UIHintAttribute_ctor_0__1__String(&__thrown, uiHint.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the specified user control and specified presentation layer.

    - Parameter uiHint: The user control (field template) to use to display the data field.
    - Parameter presentationLayer: The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".
    */
    public init(uiHint : dotnet.System.String, presentationLayer : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_UIHintAttribute_ctor_0__2__String_String(&__thrown, uiHint.get_handle(), presentationLayer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object[])
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])
    /**
    Initializes a new instance of the  class by using the specified user control, presentation layer, and control parameters.

    - Parameter uiHint: The user control (field template) to use to display the data field.
    - Parameter presentationLayer: The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".
    - Parameter controlParameters: The object to use to retrieve values from any data sources.
    */
    public init(uiHint : dotnet.System.String, presentationLayer : Optional<dotnet.System.String>, controlParameters : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_UIHintAttribute_ctor_0__3__String_String_ObjectArray(&__thrown, uiHint.get_handle(), presentationLayer?.get_handle() ?? nil, (controlParameters?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)
    /**
    Gets a value that indicates whether this instance is equal to the specified object.

    - Parameter obj: The object to compare with this instance, or a  reference.
    - Returns: 
         if the specified object is equal to this instance; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_UIHintAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode
    /**
    Gets the hash code for the current instance of the attribute.

    - Returns: The attribute instance hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_UIHintAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_ControlParameters()
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.get_ControlParameters
    open func get_ControlParameters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_UIHintAttribute_System_Collections_Generic_IDictionary_string_object___get_ControlParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PresentationLayer()
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.get_PresentationLayer
    open func get_PresentationLayer() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_UIHintAttribute_String__get_PresentationLayer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_UIHint()
// docid: M:System.ComponentModel.DataAnnotations.UIHintAttribute.get_UIHint
    open func get_UIHint() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_UIHintAttribute_String__get_UIHint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the  object to use to retrieve values from any data source.

    */
    open var ControlParameters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_ControlParameters();
        }
    }
    /**
    Gets or sets the presentation layer that uses the  class.

    */
    open var PresentationLayer : Optional<dotnet.System.String> {
        get {
            return try! get_PresentationLayer();
        }
    }
    /**
    Gets or sets the name of the field template to use to display the data field.

    */
    open var UIHint : dotnet.System.String {
        get {
            return try! get_UIHint();
        }
    }
} // UIHintAttribute


// type: System.ComponentModel.DataAnnotations.UrlAttribute
    /**
    Provides URL validation.

    */
public final class UrlAttribute
    :
    dotnet.System.ComponentModel.DataAnnotations.DataTypeAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_UrlAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.UrlAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_UrlAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.UrlAttribute.IsValid(System.Object)
    /**
    Validates the format of the specified URL.

    - Parameter value: The URL to validate.
    - Returns: 
         if the URL format is valid or ; otherwise, .

    */
    public override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_UrlAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // UrlAttribute


// type: System.ComponentModel.DataAnnotations.ValidationAttribute
    /**
    Serves as the base class for all validation attributes.

    */
open class ValidationAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_ValidationAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String FormatErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)
    /**
    Applies formatting to an error message, based on the data field where the error occurred.

    - Parameter name: The name to include in the formatted message.
    - Returns: An instance of the formatted error message.

    */
    open func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.ComponentModel.DataAnnotations.ValidationResult GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    /**
    Checks whether the specified value is valid with respect to the current validation attribute.

    - Parameter value: The value to validate.
    - Parameter validationContext: The context information about the validation operation.
    - Returns: An instance of the  class.

    */
    open func GetValidationResult(value : Optional<dotnet.System.Object>, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext) throws -> Optional<dotnet.System.ComponentModel.DataAnnotations.ValidationResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_ValidationResult__GetValidationResult_0__2__Object_ValidationContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil, validationContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.DataAnnotations.ValidationResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)
    /**
    Determines whether the specified value of the object is valid.

    - Parameter value: The value of the object to validate.
    - Returns: 
         if the specified value is valid; otherwise, .

    */
    open func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    /**
    Validates the specified object.

    - Parameter value: The object to validate.
    - Parameter validationContext: The  object that describes the context where the validation checks are performed. This parameter cannot be .
    */
    open func Validate(value : Optional<dotnet.System.Object>, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationAttribute_void__Validate_0__2__Object_ValidationContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil, validationContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate(System.Object, System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)
    /**
    Validates the specified object.

    - Parameter value: The value of the object to validate.
    - Parameter name: The name to include in the error message.
    */
    open func Validate(value : Optional<dotnet.System.Object>, name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationAttribute_void__Validate_0__2__Object_String(&__thrown, self.get_handle(), value?.get_handle() ?? nil, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ErrorMessage()
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.get_ErrorMessage
    open func get_ErrorMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_String__get_ErrorMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.set_ErrorMessage(System.String)
    open func set_ErrorMessage(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationAttribute_void__set_ErrorMessage_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ErrorMessageResourceName()
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.get_ErrorMessageResourceName
    open func get_ErrorMessageResourceName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_String__get_ErrorMessageResourceName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ErrorMessageResourceName(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.set_ErrorMessageResourceName(System.String)
    open func set_ErrorMessageResourceName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationAttribute_void__set_ErrorMessageResourceName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ErrorMessageResourceType()
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.get_ErrorMessageResourceType
    open func get_ErrorMessageResourceType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_Type__get_ErrorMessageResourceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ErrorMessageResourceType(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.set_ErrorMessageResourceType(System.Type)
    open func set_ErrorMessageResourceType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationAttribute_void__set_ErrorMessageResourceType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RequiresValidationContext()
// docid: M:System.ComponentModel.DataAnnotations.ValidationAttribute.get_RequiresValidationContext
    open func get_RequiresValidationContext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationAttribute_bool__get_RequiresValidationContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets or sets an error message to associate with a validation control if validation fails.

    */
    open var ErrorMessage : Optional<dotnet.System.String> {
        get {
            return try! get_ErrorMessage();
        }
        set(v) {
            return try! set_ErrorMessage(value: v!);
        }
    }
    /**
    Gets or sets the error message resource name to use in order to look up the  property value if validation fails.

    */
    open var ErrorMessageResourceName : Optional<dotnet.System.String> {
        get {
            return try! get_ErrorMessageResourceName();
        }
        set(v) {
            return try! set_ErrorMessageResourceName(value: v!);
        }
    }
    /**
    Gets or sets the resource type to use for error-message lookup if validation fails.

    */
    open var ErrorMessageResourceType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ErrorMessageResourceType();
        }
        set(v) {
            return try! set_ErrorMessageResourceType(value: v!);
        }
    }
    /**
    Gets a value that indicates whether the attribute requires validation context.

    */
    open var RequiresValidationContext : Bool {
        get {
            return try! get_RequiresValidationContext();
        }
    }
} // ValidationAttribute


// type: System.ComponentModel.DataAnnotations.ValidationContext
    /**
    Describes the context in which a validation check is performed.

    */
public final class ValidationContext
    :
    dotnet.System.Object,
    System_IServiceProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_ValidationContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object)
    /**
    Initializes a new instance of the  class using the specified object instance.

    - Parameter instance: The object instance to validate. It cannot be .
    */
    public init(instance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationContext_ctor_0__1__Object(&__thrown, instance.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object, System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})
    /**
    Initializes a new instance of the  class using the specified object and an optional property bag.

    - Parameter instance: The object instance to validate.  It cannot be 
    - Parameter items: An optional set of key/value pairs to make available to consumers.
    */
    public init(instance : dotnet.System.Object, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationContext_ctor_0__2__Object_System_Collections_Generic_IDictionary_object_object_(&__thrown, instance.get_handle(), (items?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object, System.IServiceProvider, System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})
    /**
    Initializes a new instance of the  class using the service provider and dictionary of service consumers.

    - Parameter instance: The object to validate. This parameter is required.
    - Parameter serviceProvider: The object that implements the  interface. This parameter is optional.
    - Parameter items: A dictionary of key/value pairs to make available to the service consumers. This parameter is optional.
    */
    public init(instance : dotnet.System.Object, serviceProvider : Optional<dotnet.System.IServiceProvider>, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationContext_ctor_0__3__Object_IServiceProvider_System_Collections_Generic_IDictionary_object_object_(&__thrown, instance.get_handle(), serviceProvider?.get_handle() ?? nil, (items?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetService(System.Type)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)
    /**
    Returns the service that provides custom validation.

    - Parameter serviceType: The type of the service to use for validation.
    - Returns: An instance of the service, or  if the service is not available.

    */
    public func GetService(serviceType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationContext_Object__GetService_0__1__Type(&__thrown, self.get_handle(), serviceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void InitializeServiceProvider(System.Func<System.Type,System.Object>)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.InitializeServiceProvider(System.Func{System.Type,System.Object})
    /**
    Initializes the  using a service provider that can return service instances by type when  is called.

    - Parameter serviceProvider: The service provider.
    */
    public func InitializeServiceProvider(serviceProvider : dotnet.System.Func_2<dotnet.System.Type_,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationContext_void__InitializeServiceProvider_0__1__System_Func_System_Type_object_(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func InitializeServiceProvider(serviceProvider : @escaping (Optional<dotnet.System.Type_>) throws -> dotnet.System.Object) throws {
        let del_serviceProvider = try dotnet.System.Func_2<dotnet.System.Type_,dotnet.System.Object>(serviceProvider);
        return try InitializeServiceProvider(serviceProvider: del_serviceProvider);
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.get_DisplayName
    public func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationContext_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.set_DisplayName(System.String)
    public func set_DisplayName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationContext_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.get_Items
    public func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_MemberName()
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.get_MemberName
    public func get_MemberName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationContext_String__get_MemberName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MemberName(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.set_MemberName(System.String)
    public func set_MemberName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationContext_void__set_MemberName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_ObjectInstance()
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.get_ObjectInstance
    public func get_ObjectInstance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationContext_Object__get_ObjectInstance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ObjectType()
// docid: M:System.ComponentModel.DataAnnotations.ValidationContext.get_ObjectType
    public func get_ObjectType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationContext_Type__get_ObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets or sets the name of the member to validate.

    */
    public var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v);
        }
    }
    /**
    Gets the dictionary of key/value pairs that is associated with this context.

    */
    public var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Items();
        }
    }
    /**
    Gets or sets the name of the member to validate.

    */
    public var MemberName : Optional<dotnet.System.String> {
        get {
            return try! get_MemberName();
        }
        set(v) {
            return try! set_MemberName(value: v!);
        }
    }
    /**
    Gets the object to validate.

    */
    public var ObjectInstance : dotnet.System.Object {
        get {
            return try! get_ObjectInstance();
        }
    }
    /**
    Gets the type of the object to validate.

    */
    public var ObjectType : dotnet.System.Type_ {
        get {
            return try! get_ObjectType();
        }
    }
} // ValidationContext


// type: System.ComponentModel.DataAnnotations.ValidationException
    /**
    Represents the exception that occurs during validation of a data field when the  class is used.

    */
open class ValidationException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_ValidationException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.#ctor
    /**
    Initializes a new instance of the  class using an error message generated by the system.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.DataAnnotations.ValidationResult, System.ComponentModel.DataAnnotations.ValidationAttribute, System.Object)
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)
    /**
    Initializes a new instance of the  class by using a validation result, a validation attribute, and the value of the current exception.

    - Parameter validationResult: The list of validation results.
    - Parameter validatingAttribute: The attribute that caused the current exception.
    - Parameter value: The value of the object that caused the attribute to trigger the validation error.
    */
    public init(validationResult : dotnet.System.ComponentModel.DataAnnotations.ValidationResult, validatingAttribute : Optional<dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationException_ctor_0__3__ValidationResult_ValidationAttribute_Object(&__thrown, validationResult.get_handle(), validatingAttribute?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)
    /**
    Initializes a new instance of the  class using a specified error message.

    - Parameter message: A specified message that states the error.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.ComponentModel.DataAnnotations.ValidationAttribute, System.Object)
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)
    /**
    Initializes a new instance of the  class using a specified error message, a validation attribute, and the value of the current exception.

    - Parameter errorMessage: The message that states the error.
    - Parameter validatingAttribute: The attribute that caused the current exception.
    - Parameter value: The value of the object that caused the attribute to trigger validation error.
    */
    public init(errorMessage : Optional<dotnet.System.String>, validatingAttribute : Optional<dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationException_ctor_0__3__String_ValidationAttribute_Object(&__thrown, errorMessage?.get_handle() ?? nil, validatingAttribute?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class using a specified error message and a collection of inner exception instances.

    - Parameter message: The error message.
    - Parameter innerException: The collection of validation exceptions.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.DataAnnotations.ValidationAttribute get_ValidationAttribute()
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.get_ValidationAttribute
    open func get_ValidationAttribute() throws -> Optional<dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationException_ValidationAttribute__get_ValidationAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.DataAnnotations.ValidationResult get_ValidationResult()
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.get_ValidationResult
    open func get_ValidationResult() throws -> dotnet.System.ComponentModel.DataAnnotations.ValidationResult {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationException_ValidationResult__get_ValidationResult_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.DataAnnotations.ValidationResult(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.ComponentModel.DataAnnotations.ValidationException.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationException_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the instance of the  class that triggered this exception.

    */
    open var ValidationAttribute : Optional<dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute> {
        get {
            return try! get_ValidationAttribute();
        }
    }
    /**
    Gets the  instance that describes the validation error.

    */
    open var ValidationResult : dotnet.System.ComponentModel.DataAnnotations.ValidationResult {
        get {
            return try! get_ValidationResult();
        }
    }
    /**
    Gets the value of the object that causes the  class to trigger this exception.

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // ValidationException


// type: System.ComponentModel.DataAnnotations.ValidationResult
    /**
    Represents a container for the results of a validation request.

    */
open class ValidationResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_ValidationResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DataAnnotations.ValidationResult Success
    /**
    Represents the success of the validation ( if validation was successful; otherwise, ).

    */
    open class var Success : Optional<dotnet.System.ComponentModel.DataAnnotations.ValidationResult> {
        get {
        let __h = System_ComponentModel_DataAnnotations_ValidationResult_get_Success();
        let __return = (__h != nil) ? dotnet.System.ComponentModel.DataAnnotations.ValidationResult(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using an error message.

    - Parameter errorMessage: The error message.
    */
    public init(errorMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationResult_ctor_0__1__String(&__thrown, errorMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    Initializes a new instance of the  class by using an error message and a list of members that have validation errors.

    - Parameter errorMessage: The error message.
    - Parameter memberNames: The list of member names that have validation errors.
    */
    public init(errorMessage : Optional<dotnet.System.String>, memberNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_ValidationResult_ctor_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, errorMessage?.get_handle() ?? nil, (memberNames?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.DataAnnotations.ValidationResult.ToString
    /**
    Returns a string representation of the current validation result.

    - Returns: The current validation result.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationResult_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ErrorMessage()
// docid: M:System.ComponentModel.DataAnnotations.ValidationResult.get_ErrorMessage
    open func get_ErrorMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationResult_String__get_ErrorMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ErrorMessage(System.String)
// docid: M:System.ComponentModel.DataAnnotations.ValidationResult.set_ErrorMessage(System.String)
    open func set_ErrorMessage(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_ValidationResult_void__set_ErrorMessage_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_MemberNames()
// docid: M:System.ComponentModel.DataAnnotations.ValidationResult.get_MemberNames
    open func get_MemberNames() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_ValidationResult_System_Collections_Generic_IEnumerable_string___get_MemberNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    Gets the error message for the validation.

    */
    open var ErrorMessage : Optional<dotnet.System.String> {
        get {
            return try! get_ErrorMessage();
        }
        set(v) {
            return try! set_ErrorMessage(value: v!);
        }
    }
    /**
    Gets the collection of member names that indicate which fields have validation errors.

    */
    open var MemberNames : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_MemberNames();
        }
    }
} // ValidationResult


// type: System.ComponentModel.DataAnnotations.Validator
public struct Validator {
    // bool TryValidateObject(System.Object, System.ComponentModel.DataAnnotations.ValidationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult>)
// docid: M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})
    /**
    Determines whether the specified object is valid using the validation context and validation results collection.

    - Parameter instance: The object to validate.
    - Parameter validationContext: The context that describes the object to validate.
    - Parameter validationResults: A collection to hold each failed validation.
    - Returns: 
         if the object validates; otherwise, .

    */
    public static func TryValidateObject(instance : dotnet.System.Object, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext, validationResults : Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.ComponentModel.DataAnnotations.ValidationResult>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Validator_bool__TryValidateObject_0__3__Object_ValidationContext_System_Collections_Generic_ICollection_System_ComponentModel_DataAnnotations_ValidationResult_(&__thrown, instance.get_handle(), validationContext.get_handle(), (validationResults?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryValidateObject(System.Object, System.ComponentModel.DataAnnotations.ValidationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult>, bool)
// docid: M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)
    /**
    Determines whether the specified object is valid using the validation context, validation results collection, and a value that specifies whether to validate all properties.

    - Parameter instance: The object to validate.
    - Parameter validationContext: The context that describes the object to validate.
    - Parameter validationResults: A collection to hold each failed validation.
    - Parameter validateAllProperties: 
         to validate all properties; if , only required attributes are validated.
    - Returns: 
         if the object validates; otherwise, .

    */
    public static func TryValidateObject(instance : dotnet.System.Object, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext, validationResults : Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.ComponentModel.DataAnnotations.ValidationResult>>, validateAllProperties : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Validator_bool__TryValidateObject_0__4__Object_ValidationContext_System_Collections_Generic_ICollection_System_ComponentModel_DataAnnotations_ValidationResult__bool(&__thrown, instance.get_handle(), validationContext.get_handle(), (validationResults?.get_handle()), Swift.Int32(validateAllProperties ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryValidateProperty(System.Object, System.ComponentModel.DataAnnotations.ValidationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult>)
// docid: M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})
    /**
    Validates the property.

    - Parameter value: The value to validate.
    - Parameter validationContext: The context that describes the property to validate.
    - Parameter validationResults: A collection to hold each failed validation.
    - Returns: 
         if the property validates; otherwise, .

    */
    public static func TryValidateProperty(value : Optional<dotnet.System.Object>, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext, validationResults : Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.ComponentModel.DataAnnotations.ValidationResult>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Validator_bool__TryValidateProperty_0__3__Object_ValidationContext_System_Collections_Generic_ICollection_System_ComponentModel_DataAnnotations_ValidationResult_(&__thrown, value?.get_handle() ?? nil, validationContext.get_handle(), (validationResults?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryValidateValue(System.Object, System.ComponentModel.DataAnnotations.ValidationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult>, System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationAttribute>)
// docid: M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})
    /**
    Returns a value that indicates whether the specified value is valid with the specified attributes.

    - Parameter value: The value to validate.
    - Parameter validationContext: The context that describes the object to validate.
    - Parameter validationResults: A collection to hold failed validations.
    - Parameter validationAttributes: The validation attributes.
    - Returns: 
         if the object validates; otherwise, .

    */
    public static func TryValidateValue(value : dotnet.System.Object, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext, validationResults : Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.ComponentModel.DataAnnotations.ValidationResult>>, validationAttributes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Validator_bool__TryValidateValue_0__4__Object_ValidationContext_System_Collections_Generic_ICollection_System_ComponentModel_DataAnnotations_ValidationResult__System_Collections_Generic_IEnumerable_System_ComponentModel_DataAnnotations_ValidationAttribute_(&__thrown, value.get_handle(), validationContext.get_handle(), (validationResults?.get_handle()), validationAttributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ValidateObject(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
// docid: M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    /**
    Determines whether the specified object is valid using the validation context.

    - Parameter instance: The object to validate.
    - Parameter validationContext: The context that describes the object to validate.
    */
    public static func ValidateObject(instance : dotnet.System.Object, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Validator_void__ValidateObject_0__2__Object_ValidationContext(&__thrown, instance.get_handle(), validationContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateObject(System.Object, System.ComponentModel.DataAnnotations.ValidationContext, bool)
// docid: M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)
    /**
    Determines whether the specified object is valid using the validation context, and a value that specifies whether to validate all properties.

    - Parameter instance: The object to validate.
    - Parameter validationContext: The context that describes the object to validate.
    - Parameter validateAllProperties: 
         to validate all properties; otherwise, .
    */
    public static func ValidateObject(instance : dotnet.System.Object, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext, validateAllProperties : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Validator_void__ValidateObject_0__3__Object_ValidationContext_bool(&__thrown, instance.get_handle(), validationContext.get_handle(), Swift.Int32(validateAllProperties ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateProperty(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
// docid: M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    /**
    Validates the property.

    - Parameter value: The value to validate.
    - Parameter validationContext: The context that describes the property to validate.
    */
    public static func ValidateProperty(value : Optional<dotnet.System.Object>, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Validator_void__ValidateProperty_0__2__Object_ValidationContext(&__thrown, value?.get_handle() ?? nil, validationContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ValidateValue(System.Object, System.ComponentModel.DataAnnotations.ValidationContext, System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationAttribute>)
// docid: M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})
    /**
    Validates the specified attributes.

    - Parameter value: The value to validate.
    - Parameter validationContext: The context that describes the object to validate.
    - Parameter validationAttributes: The validation attributes.
    */
    public static func ValidateValue(value : dotnet.System.Object, validationContext : dotnet.System.ComponentModel.DataAnnotations.ValidationContext, validationAttributes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Validator_void__ValidateValue_0__3__Object_ValidationContext_System_Collections_Generic_IEnumerable_System_ComponentModel_DataAnnotations_ValidationAttribute_(&__thrown, value.get_handle(), validationContext.get_handle(), validationAttributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Validator


}
// System.ComponentModel.DataAnnotations.Schema
extension System.ComponentModel.DataAnnotations.Schema {
// type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute
    /**
    Represents the database column that a property is mapped to.

    */
open class ColumnAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name of the column the property is mapped to.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.get_TypeName
    open func get_TypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TypeName(System.String)
// docid: M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.set_TypeName(System.String)
    open func set_TypeName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Schema_ColumnAttribute_void__set_TypeName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the name of the column the property is mapped to.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets or sets the zero-based order of the column the property is mapped to.

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    Gets or sets the database provider specific data type of the column the property is mapped to.

    */
    open var TypeName : Optional<dotnet.System.String> {
        get {
            return try! get_TypeName();
        }
        set(v) {
            return try! set_TypeName(value: v!);
        }
    }
} // ColumnAttribute


// type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute
    /**
    Denotes that the class is a complex type. Complex types are non-scalar properties of entity types that enable scalar properties to be organized within entities. Complex types do not have keys and cannot be managed by the Entity Framework apart from the parent object.

    */
open class ComplexTypeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_ComplexTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_ComplexTypeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ComplexTypeAttribute


// type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute
    /**
    Specifies how the database generates values for a property.

    */
open class DatabaseGeneratedAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)
// docid: M:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.#ctor(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)
    /**
    Initializes a new instance of the  class.

    - Parameter databaseGeneratedOption: The database generated option.
    */
    public init(databaseGeneratedOption : dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedAttribute_ctor_0__1__DatabaseGeneratedOption(&__thrown, databaseGeneratedOption.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption get_DatabaseGeneratedOption()
// docid: M:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.get_DatabaseGeneratedOption
    open func get_DatabaseGeneratedOption() throws -> dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedAttribute_DatabaseGeneratedOption__get_DatabaseGeneratedOption_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption(val: __return);
        }
    }
    /**
    Gets or sets the pattern used to generate values for the property in the database.

    */
    open var DatabaseGeneratedOption : dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption {
        get {
            return try! get_DatabaseGeneratedOption();
        }
    }
} // DatabaseGeneratedAttribute


// type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption
    /**
    Represents the pattern used to generate values for a property in the database.

    */
public struct DatabaseGeneratedOption : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedOption_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption None
    /**
    The database does not generate values.

    */
    public static var None : dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption(val: System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedOption_get_None());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption Identity
    /**
    The database generates a value when a row is inserted.

    */
    public static var Identity : dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption(val: System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedOption_get_Identity());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption Computed
    /**
    The database generates a value when a row is inserted or updated.

    */
    public static var Computed : dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption {
        get {
        let __return = dotnet.System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption(val: System_ComponentModel_DataAnnotations_Schema_DatabaseGeneratedOption_get_Computed());
            return __return;
        }
    }
} // DatabaseGeneratedOption


// type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute
    /**
    Denotes a property used as a foreign key in a relationship.

    */
open class ForeignKeyAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_ForeignKeyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name of the associated navigation property, or the name of one or more associated foreign keys.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_ForeignKeyAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_ForeignKeyAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of the associated navigation property or of the associated foreign keys.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // ForeignKeyAttribute


// type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    /**
    Specifies the inverse of a navigation property that represents the other end of the same relationship.

    */
open class InversePropertyAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_InversePropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified property.

    - Parameter property: The navigation property representing the other end of the same relationship.
    */
    public init(property : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_InversePropertyAttribute_ctor_0__1__String(&__thrown, property.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Property()
// docid: M:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.get_Property
    open func get_Property() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_InversePropertyAttribute_String__get_Property_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the navigation property representing the other end of the same relationship.

    */
    open var Property : dotnet.System.String {
        get {
            return try! get_Property();
        }
    }
} // InversePropertyAttribute


// type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    /**
    Denotes that a property or class should be excluded from database mapping.

    */
open class NotMappedAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_NotMappedAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_NotMappedAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NotMappedAttribute


// type: System.ComponentModel.DataAnnotations.Schema.TableAttribute
    /**
    Specifies the database table that a class is mapped to.

    */
open class TableAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataAnnotations_Schema_TableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified name of the table.

    - Parameter name: The name of the table the class is mapped to.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataAnnotations_Schema_TableAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_TableAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Schema()
// docid: M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.get_Schema
    open func get_Schema() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataAnnotations_Schema_TableAttribute_String__get_Schema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Schema(System.String)
// docid: M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.set_Schema(System.String)
    open func set_Schema(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DataAnnotations_Schema_TableAttribute_void__set_Schema_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the name of the table the class is mapped to.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets or sets the schema of the table the class is mapped to.

    */
    open var Schema : Optional<dotnet.System.String> {
        get {
            return try! get_Schema();
        }
        set(v) {
            return try! set_Schema(value: v!);
        }
    }
} // TableAttribute


}




public protocol System_ComponentModel_DataAnnotations_IValidatableObject
    :
    SGBridgeGetHandle
{
}

