// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.ComponentModel
extension System.ComponentModel {
// type: System.ComponentModel.AsyncCompletedEventArgs
    /**
    Provides data for the MethodName event.

    */
open class AsyncCompletedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AsyncCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Exception, bool, System.Object)
// docid: M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter error: Any error that occurred during the asynchronous operation.
    - Parameter cancelled: A value indicating whether the asynchronous operation was canceled.
    - Parameter userState: The optional user-supplied state object passed to the  method.
    */
    public init(error : Optional<dotnet.System.Exception>, cancelled : Bool, userState : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AsyncCompletedEventArgs_ctor_0__3__Exception_bool_Object(&__thrown, error?.get_handle() ?? nil, Swift.Int32(cancelled ? 1 : 0), userState?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Cancelled()
// docid: M:System.ComponentModel.AsyncCompletedEventArgs.get_Cancelled
    open func get_Cancelled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncCompletedEventArgs_bool__get_Cancelled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Exception get_Error()
// docid: M:System.ComponentModel.AsyncCompletedEventArgs.get_Error
    open func get_Error() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncCompletedEventArgs_Exception__get_Error_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_UserState()
// docid: M:System.ComponentModel.AsyncCompletedEventArgs.get_UserState
    open func get_UserState() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncCompletedEventArgs_Object__get_UserState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets a value indicating whether an asynchronous operation has been canceled.

    */
    open var Cancelled : Bool {
        get {
            return try! get_Cancelled();
        }
    }
    /**
    Gets a value indicating which error occurred during an asynchronous operation.

    */
    open var Error : Optional<dotnet.System.Exception> {
        get {
            return try! get_Error();
        }
    }
    /**
    Gets the unique identifier for the asynchronous task.

    */
    open var UserState : Optional<dotnet.System.Object> {
        get {
            return try! get_UserState();
        }
    }
} // AsyncCompletedEventArgs


// type: System.ComponentModel.AsyncCompletedEventHandler
    /**
    Represents the method that will handle the MethodName event of an asynchronous operation.

    */
public final class AsyncCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AsyncCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs)
// docid: M:System.ComponentModel.AsyncCompletedEventHandler.Invoke(System.Object,System.ComponentModel.AsyncCompletedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncCompletedEventHandler_void__Invoke_0__2__Object_AsyncCompletedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.AsyncCompletedEventHandler.BeginInvoke(System.Object,System.ComponentModel.AsyncCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.AsyncCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_AsyncCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.AsyncCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.AsyncCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AsyncCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs)
// docid: M:System.ComponentModel.AsyncCompletedEventHandler.Invoke(System.Object,System.ComponentModel.AsyncCompletedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncCompletedEventHandler_void__Invoke_0__2__Object_AsyncCompletedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AsyncCompletedEventHandler


// type: System.ComponentModel.AsyncOperation
    /**
    Tracks the lifetime of an asynchronous operation.

    */
public final class AsyncOperation
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AsyncOperation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void OperationCompleted()
// docid: M:System.ComponentModel.AsyncOperation.OperationCompleted
    /**
    Ends the lifetime of an asynchronous operation.

    */
    public func OperationCompleted() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncOperation_void__OperationCompleted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Post(System.Threading.SendOrPostCallback, System.Object)
// docid: M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
    /**
    Invokes a delegate on the thread or context appropriate for the application model.

    - Parameter d: A  object that wraps the delegate to be called when the operation ends.
    - Parameter arg: An argument for the delegate contained in the  parameter.
    */
    public func Post(d : dotnet.System.Threading.SendOrPostCallback, arg : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncOperation_void__Post_0__2__SendOrPostCallback_Object(&__thrown, self.get_handle(), d.get_handle(), arg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Post(d : @escaping (Optional<dotnet.System.Object>) throws -> Void, arg : Optional<dotnet.System.Object>) throws {
        let del_d = try dotnet.System.Threading.SendOrPostCallback(d);
        return try Post(d: del_d, arg: arg);
    }
    // void PostOperationCompleted(System.Threading.SendOrPostCallback, System.Object)
// docid: M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
    /**
    Ends the lifetime of an asynchronous operation.

    - Parameter d: A  object that wraps the delegate to be called when the operation ends.
    - Parameter arg: An argument for the delegate contained in the  parameter.
    */
    public func PostOperationCompleted(d : dotnet.System.Threading.SendOrPostCallback, arg : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncOperation_void__PostOperationCompleted_0__2__SendOrPostCallback_Object(&__thrown, self.get_handle(), d.get_handle(), arg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func PostOperationCompleted(d : @escaping (Optional<dotnet.System.Object>) throws -> Void, arg : Optional<dotnet.System.Object>) throws {
        let del_d = try dotnet.System.Threading.SendOrPostCallback(d);
        return try PostOperationCompleted(d: del_d, arg: arg);
    }
    // [IsSpecialName] System.Threading.SynchronizationContext get_SynchronizationContext()
// docid: M:System.ComponentModel.AsyncOperation.get_SynchronizationContext
    public func get_SynchronizationContext() throws -> dotnet.System.Threading.SynchronizationContext {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncOperation_SynchronizationContext__get_SynchronizationContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.SynchronizationContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_UserSuppliedState()
// docid: M:System.ComponentModel.AsyncOperation.get_UserSuppliedState
    public func get_UserSuppliedState() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncOperation_Object__get_UserSuppliedState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the  object that was passed to the constructor.

    */
    public var SynchronizationContext : dotnet.System.Threading.SynchronizationContext {
        get {
            return try! get_SynchronizationContext();
        }
    }
    /**
    Gets or sets an object used to uniquely identify an asynchronous operation.

    */
    public var UserSuppliedState : Optional<dotnet.System.Object> {
        get {
            return try! get_UserSuppliedState();
        }
    }
} // AsyncOperation


// type: System.ComponentModel.AsyncOperationManager
public struct AsyncOperationManager {
    // System.ComponentModel.AsyncOperation CreateOperation(System.Object)
// docid: M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)
    /**
    Returns an  for tracking the duration of a particular asynchronous operation.

    - Parameter userSuppliedState: An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.
    - Returns: An  that you can use to track the duration of an asynchronous method invocation.

    */
    public static func CreateOperation(userSuppliedState : Optional<dotnet.System.Object>) throws -> dotnet.System.ComponentModel.AsyncOperation {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncOperationManager_AsyncOperation__CreateOperation_0__1__Object(&__thrown, userSuppliedState?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AsyncOperation(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.SynchronizationContext get_SynchronizationContext()
// docid: M:System.ComponentModel.AsyncOperationManager.get_SynchronizationContext
    public static func get_SynchronizationContext() throws -> dotnet.System.Threading.SynchronizationContext {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AsyncOperationManager_SynchronizationContext__get_SynchronizationContext_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.SynchronizationContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SynchronizationContext(System.Threading.SynchronizationContext)
// docid: M:System.ComponentModel.AsyncOperationManager.set_SynchronizationContext(System.Threading.SynchronizationContext)
    public static func set_SynchronizationContext(value : dotnet.System.Threading.SynchronizationContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AsyncOperationManager_void__set_SynchronizationContext_0__1__SynchronizationContext(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the synchronization context for the asynchronous operation.

    */
    public static var SynchronizationContext : dotnet.System.Threading.SynchronizationContext {
        get {
            return try! get_SynchronizationContext();
        }
        set(v) {
            return try! set_SynchronizationContext(value: v);
        }
    }
} // AsyncOperationManager


// type: System.ComponentModel.BackgroundWorker
    /**
    Executes an operation on a separate thread.

    */
open class BackgroundWorker
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BackgroundWorker_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.BackgroundWorker.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BackgroundWorker_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CancelAsync()
// docid: M:System.ComponentModel.BackgroundWorker.CancelAsync
    /**
    Requests cancellation of a pending background operation.

    */
    open func CancelAsync() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__CancelAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReportProgress(System.Int32)
// docid: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
    /**
    Raises the  event.

    - Parameter percentProgress: The percentage, from 0 to 100, of the background operation that is complete.
    */
    open func ReportProgress(percentProgress : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__ReportProgress_0__1__i32(&__thrown, self.get_handle(), percentProgress);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReportProgress(System.Int32, System.Object)
// docid: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
    /**
    Raises the  event.

    - Parameter percentProgress: The percentage, from 0 to 100, of the background operation that is complete.
    - Parameter userState: A unique  indicating the user state. Returned as the  property of the .
    */
    open func ReportProgress(percentProgress : Swift.Int32, userState : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__ReportProgress_0__2__i32_Object(&__thrown, self.get_handle(), percentProgress, userState?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RunWorkerAsync()
// docid: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync
    /**
    Starts execution of a background operation.

    */
    open func RunWorkerAsync() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__RunWorkerAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RunWorkerAsync(System.Object)
// docid: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
    /**
    Starts execution of a background operation.

    - Parameter argument: A parameter for use by the background operation to be executed in the  event handler.
    */
    open func RunWorkerAsync(argument : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__RunWorkerAsync_0__1__Object(&__thrown, self.get_handle(), argument?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CancellationPending()
// docid: M:System.ComponentModel.BackgroundWorker.get_CancellationPending
    open func get_CancellationPending() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BackgroundWorker_bool__get_CancellationPending_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsBusy()
// docid: M:System.ComponentModel.BackgroundWorker.get_IsBusy
    open func get_IsBusy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BackgroundWorker_bool__get_IsBusy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_WorkerReportsProgress()
// docid: M:System.ComponentModel.BackgroundWorker.get_WorkerReportsProgress
    open func get_WorkerReportsProgress() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BackgroundWorker_bool__get_WorkerReportsProgress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_WorkerReportsProgress(bool)
// docid: M:System.ComponentModel.BackgroundWorker.set_WorkerReportsProgress(System.Boolean)
    open func set_WorkerReportsProgress(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__set_WorkerReportsProgress_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_WorkerSupportsCancellation()
// docid: M:System.ComponentModel.BackgroundWorker.get_WorkerSupportsCancellation
    open func get_WorkerSupportsCancellation() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BackgroundWorker_bool__get_WorkerSupportsCancellation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_WorkerSupportsCancellation(bool)
// docid: M:System.ComponentModel.BackgroundWorker.set_WorkerSupportsCancellation(System.Boolean)
    open func set_WorkerSupportsCancellation(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__set_WorkerSupportsCancellation_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_DoWork(System.ComponentModel.DoWorkEventHandler)
// docid: M:System.ComponentModel.BackgroundWorker.add_DoWork(System.ComponentModel.DoWorkEventHandler)
    open func add_DoWork(value : Optional<dotnet.System.ComponentModel.DoWorkEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__add_DoWork_0__1__DoWorkEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DoWork(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.DoWorkEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.DoWorkEventHandler(value);
        return try add_DoWork(value: del_value);
    }
    // [IsSpecialName] void remove_DoWork(System.ComponentModel.DoWorkEventHandler)
// docid: M:System.ComponentModel.BackgroundWorker.remove_DoWork(System.ComponentModel.DoWorkEventHandler)
    open func remove_DoWork(value : Optional<dotnet.System.ComponentModel.DoWorkEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__remove_DoWork_0__1__DoWorkEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DoWork(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.DoWorkEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.DoWorkEventHandler(value);
        return try remove_DoWork(value: del_value);
    }
    // [IsSpecialName] void add_ProgressChanged(System.ComponentModel.ProgressChangedEventHandler)
// docid: M:System.ComponentModel.BackgroundWorker.add_ProgressChanged(System.ComponentModel.ProgressChangedEventHandler)
    open func add_ProgressChanged(value : Optional<dotnet.System.ComponentModel.ProgressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__add_ProgressChanged_0__1__ProgressChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ProgressChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ProgressChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ProgressChangedEventHandler(value);
        return try add_ProgressChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ProgressChanged(System.ComponentModel.ProgressChangedEventHandler)
// docid: M:System.ComponentModel.BackgroundWorker.remove_ProgressChanged(System.ComponentModel.ProgressChangedEventHandler)
    open func remove_ProgressChanged(value : Optional<dotnet.System.ComponentModel.ProgressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__remove_ProgressChanged_0__1__ProgressChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ProgressChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ProgressChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ProgressChangedEventHandler(value);
        return try remove_ProgressChanged(value: del_value);
    }
    // [IsSpecialName] void add_RunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventHandler)
// docid: M:System.ComponentModel.BackgroundWorker.add_RunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventHandler)
    open func add_RunWorkerCompleted(value : Optional<dotnet.System.ComponentModel.RunWorkerCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__add_RunWorkerCompleted_0__1__RunWorkerCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_RunWorkerCompleted(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.RunWorkerCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.RunWorkerCompletedEventHandler(value);
        return try add_RunWorkerCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_RunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventHandler)
// docid: M:System.ComponentModel.BackgroundWorker.remove_RunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventHandler)
    open func remove_RunWorkerCompleted(value : Optional<dotnet.System.ComponentModel.RunWorkerCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BackgroundWorker_void__remove_RunWorkerCompleted_0__1__RunWorkerCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_RunWorkerCompleted(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.RunWorkerCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.RunWorkerCompletedEventHandler(value);
        return try remove_RunWorkerCompleted(value: del_value);
    }
    /**
    Gets a value indicating whether the application has requested cancellation of a background operation.

    */
    open var CancellationPending : Bool {
        get {
            return try! get_CancellationPending();
        }
    }
    /**
    Gets a value indicating whether the  is running an asynchronous operation.

    */
    open var IsBusy : Bool {
        get {
            return try! get_IsBusy();
        }
    }
    /**
    Gets or sets a value indicating whether the  can report progress updates.

    */
    open var WorkerReportsProgress : Bool {
        get {
            return try! get_WorkerReportsProgress();
        }
        set(v) {
            return try! set_WorkerReportsProgress(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the  supports asynchronous cancellation.

    */
    open var WorkerSupportsCancellation : Bool {
        get {
            return try! get_WorkerSupportsCancellation();
        }
        set(v) {
            return try! set_WorkerSupportsCancellation(value: v);
        }
    }
} // BackgroundWorker


// type: System.ComponentModel.DoWorkEventArgs
    /**
    Provides data for the  event handler.

    */
open class DoWorkEventArgs
    :
    dotnet.System.ComponentModel.CancelEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DoWorkEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter argument: Specifies an argument for an asynchronous operation.
    */
    public init(argument : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DoWorkEventArgs_ctor_0__1__Object(&__thrown, argument?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Argument()
// docid: M:System.ComponentModel.DoWorkEventArgs.get_Argument
    open func get_Argument() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DoWorkEventArgs_Object__get_Argument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Result()
// docid: M:System.ComponentModel.DoWorkEventArgs.get_Result
    open func get_Result() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DoWorkEventArgs_Object__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(System.Object)
// docid: M:System.ComponentModel.DoWorkEventArgs.set_Result(System.Object)
    open func set_Result(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DoWorkEventArgs_void__set_Result_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets a value that represents the argument of an asynchronous operation.

    */
    open var Argument : Optional<dotnet.System.Object> {
        get {
            return try! get_Argument();
        }
    }
    /**
    Gets or sets a value that represents the result of an asynchronous operation.

    */
    open var Result : Optional<dotnet.System.Object> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // DoWorkEventArgs


// type: System.ComponentModel.DoWorkEventHandler
    /**
    Represents the method that will handle the  event. This class cannot be inherited.

    */
public final class DoWorkEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DoWorkEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.DoWorkEventArgs)
// docid: M:System.ComponentModel.DoWorkEventHandler.Invoke(System.Object,System.ComponentModel.DoWorkEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.DoWorkEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DoWorkEventHandler_void__Invoke_0__2__Object_DoWorkEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.DoWorkEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.DoWorkEventHandler.BeginInvoke(System.Object,System.ComponentModel.DoWorkEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.DoWorkEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DoWorkEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DoWorkEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.DoWorkEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DoWorkEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.DoWorkEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.DoWorkEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DoWorkEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.DoWorkEventArgs)
// docid: M:System.ComponentModel.DoWorkEventHandler.Invoke(System.Object,System.ComponentModel.DoWorkEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.DoWorkEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_DoWorkEventHandler_void__Invoke_0__2__Object_DoWorkEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DoWorkEventHandler


// type: System.ComponentModel.ProgressChangedEventArgs
    /**
    Provides data for the  event.

    */
open class ProgressChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ProgressChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.Object)
// docid: M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter progressPercentage: The percentage of an asynchronous task that has been completed.
    - Parameter userState: A unique user state.
    */
    public init(progressPercentage : Swift.Int32, userState : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ProgressChangedEventArgs_ctor_0__2__i32_Object(&__thrown, progressPercentage, userState?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_ProgressPercentage()
// docid: M:System.ComponentModel.ProgressChangedEventArgs.get_ProgressPercentage
    open func get_ProgressPercentage() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProgressChangedEventArgs_i32__get_ProgressPercentage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_UserState()
// docid: M:System.ComponentModel.ProgressChangedEventArgs.get_UserState
    open func get_UserState() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProgressChangedEventArgs_Object__get_UserState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the asynchronous task progress percentage.

    */
    open var ProgressPercentage : Swift.Int32 {
        get {
            return try! get_ProgressPercentage();
        }
    }
    /**
    Gets a unique user state.

    */
    open var UserState : Optional<dotnet.System.Object> {
        get {
            return try! get_UserState();
        }
    }
} // ProgressChangedEventArgs


// type: System.ComponentModel.ProgressChangedEventHandler
    /**
    Represents the method that will handle the  event of the  class. This class cannot be inherited.

    */
public final class ProgressChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ProgressChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.ProgressChangedEventArgs)
// docid: M:System.ComponentModel.ProgressChangedEventHandler.Invoke(System.Object,System.ComponentModel.ProgressChangedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.ProgressChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ProgressChangedEventHandler_void__Invoke_0__2__Object_ProgressChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.ProgressChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.ProgressChangedEventHandler.BeginInvoke(System.Object,System.ComponentModel.ProgressChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.ProgressChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProgressChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ProgressChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.ProgressChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ProgressChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ProgressChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.ProgressChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ProgressChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.ProgressChangedEventArgs)
// docid: M:System.ComponentModel.ProgressChangedEventHandler.Invoke(System.Object,System.ComponentModel.ProgressChangedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.ProgressChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ProgressChangedEventHandler_void__Invoke_0__2__Object_ProgressChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ProgressChangedEventHandler


// type: System.ComponentModel.RunWorkerCompletedEventArgs
    /**
    Provides data for the MethodName event.

    */
open class RunWorkerCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RunWorkerCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.Exception, bool)
// docid: M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter result: The result of an asynchronous operation.
    - Parameter error: Any error that occurred during the asynchronous operation.
    - Parameter cancelled: A value indicating whether the asynchronous operation was canceled.
    */
    public init(result : Optional<dotnet.System.Object>, error : Optional<dotnet.System.Exception>, cancelled : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RunWorkerCompletedEventArgs_ctor_0__3__Object_Exception_bool(&__thrown, result?.get_handle() ?? nil, error?.get_handle() ?? nil, Swift.Int32(cancelled ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Result()
// docid: M:System.ComponentModel.RunWorkerCompletedEventArgs.get_Result
    open func get_Result() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunWorkerCompletedEventArgs_Object__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_UserState()
// docid: M:System.ComponentModel.RunWorkerCompletedEventArgs.get_UserState
    open override func get_UserState() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunWorkerCompletedEventArgs_Object__get_UserState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets a value that represents the result of an asynchronous operation.

    */
    open var Result : Optional<dotnet.System.Object> {
        get {
            return try! get_Result();
        }
    }
    /**
    Gets a value that represents the user state.

    */
    open override var UserState : Optional<dotnet.System.Object> {
        get {
            return try! get_UserState();
        }
    }
} // RunWorkerCompletedEventArgs


// type: System.ComponentModel.RunWorkerCompletedEventHandler
    /**
    Represents the method that will handle the  event of a  class.

    */
public final class RunWorkerCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RunWorkerCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.RunWorkerCompletedEventArgs)
// docid: M:System.ComponentModel.RunWorkerCompletedEventHandler.Invoke(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.RunWorkerCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_RunWorkerCompletedEventHandler_void__Invoke_0__2__Object_RunWorkerCompletedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.RunWorkerCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.RunWorkerCompletedEventHandler.BeginInvoke(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.RunWorkerCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunWorkerCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_RunWorkerCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.RunWorkerCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_RunWorkerCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.RunWorkerCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.RunWorkerCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RunWorkerCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.RunWorkerCompletedEventArgs)
// docid: M:System.ComponentModel.RunWorkerCompletedEventHandler.Invoke(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.RunWorkerCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_RunWorkerCompletedEventHandler_void__Invoke_0__2__Object_RunWorkerCompletedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RunWorkerCompletedEventHandler


}


