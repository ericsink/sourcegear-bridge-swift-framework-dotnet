// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Collections
extension System.Collections {
// type: System.Collections.BitArray
    /**
    Manages a compact array of bit values, which are represented as Booleans, where  indicates that the bit is on (1) and  indicates the bit is off (0).

    */
public final class BitArray
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_ICloneable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_BitArray_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool[])
// docid: M:System.Collections.BitArray.#ctor(System.Boolean[])
    /**
    Initializes a new instance of the  class that contains bit values copied from the specified array of Booleans.

    - Parameter values: An array of Booleans to copy.
    */
    public init(values : dotnet.System_Arr<Bool>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_BitArray_ctor_0__1__boolArray(&__thrown, values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Collections.BitArray.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  class that contains bit values copied from the specified array of bytes.

    - Parameter bytes: An array of bytes containing the values to copy, where each byte represents eight consecutive bits.
    */
    public init(bytes : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_BitArray_ctor_0__1__u8Array(&__thrown, bytes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.BitArray)
// docid: M:System.Collections.BitArray.#ctor(System.Collections.BitArray)
    /**
    Initializes a new instance of the  class that contains bit values copied from the specified .

    - Parameter bits: The  to copy.
    */
    public init(bits : dotnet.System.Collections.BitArray) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_BitArray_ctor_0__1__BitArray(&__thrown, bits.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.BitArray.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that can hold the specified number of bit values, which are initially set to .

    - Parameter length: The number of bit values in the new .
    */
    public init(length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_BitArray_ctor_0__1__i32(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, bool)
// docid: M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
    /**
    Initializes a new instance of the  class that can hold the specified number of bit values, which are initially set to the specified value.

    - Parameter length: The number of bit values in the new .
    - Parameter defaultValue: The Boolean value to assign to each bit.
    */
    public init(length : Swift.Int32, defaultValue : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_BitArray_ctor_0__2__i32_bool(&__thrown, length, Swift.Int32(defaultValue ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32[])
// docid: M:System.Collections.BitArray.#ctor(System.Int32[])
    /**
    Initializes a new instance of the  class that contains bit values copied from the specified array of 32-bit integers.

    - Parameter values: An array of integers containing the values to copy, where each integer represents 32 consecutive bits.
    */
    public init(values : dotnet.System_Arr<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_BitArray_ctor_0__1__i32Array(&__thrown, values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.BitArray And(System.Collections.BitArray)
// docid: M:System.Collections.BitArray.And(System.Collections.BitArray)
    /**
    Performs the bitwise AND operation between the elements of the current  object and the corresponding elements in the specified array. The current  object will be modified to store the result of the bitwise AND operation.

    - Parameter value: The array with which to perform the bitwise AND operation.
    - Returns: An array containing the result of the bitwise AND operation, which is a reference to the current  object.

    */
    public func And(value : dotnet.System.Collections.BitArray) throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_BitArray__And_0__1__BitArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // System.Object Clone()
// docid: M:System.Collections.BitArray.Clone
    /**
    Creates a shallow copy of the .

    - Returns: A shallow copy of the .

    */
    public func Clone() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_Object__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)
    /**
    Copies the entire  to a compatible one-dimensional , starting at the specified index of the target array.

    - Parameter array: The one-dimensional  that is the destination of the elements copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    public func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_BitArray_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Get(System.Int32)
// docid: M:System.Collections.BitArray.Get(System.Int32)
    /**
    Gets the value of the bit at a specific position in the .

    - Parameter index: The zero-based index of the value to get.
    - Returns: The value of the bit at position .

    */
    public func Get(index : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_bool__Get_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.BitArray.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  for the entire .

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Collections.BitArray LeftShift(System.Int32)
// docid: M:System.Collections.BitArray.LeftShift(System.Int32)
    /**
    Shifts all the bit values of the current  to the left on  bits.

    - Parameter count: The number of shifts to make for each bit.
    - Returns: The current .

    */
    public func LeftShift(count : Swift.Int32) throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_BitArray__LeftShift_0__1__i32(&__thrown, self.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // System.Collections.BitArray Not()
// docid: M:System.Collections.BitArray.Not
    /**
    Inverts all the bit values in the current , so that elements set to  are changed to , and elements set to  are changed to .

    - Returns: The current instance with inverted bit values.

    */
    public func Not() throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_BitArray__Not_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // System.Collections.BitArray Or(System.Collections.BitArray)
// docid: M:System.Collections.BitArray.Or(System.Collections.BitArray)
    /**
    Performs the bitwise OR operation between the elements of the current  object and the corresponding elements in the specified array. The current  object will be modified to store the result of the bitwise OR operation.

    - Parameter value: The array with which to perform the bitwise OR operation.
    - Returns: An array containing the result of the bitwise OR operation, which is a reference to the current  object.

    */
    public func Or(value : dotnet.System.Collections.BitArray) throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_BitArray__Or_0__1__BitArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // System.Collections.BitArray RightShift(System.Int32)
// docid: M:System.Collections.BitArray.RightShift(System.Int32)
    /**
    Shifts all the bit values of the current  to the right on  bits.

    - Parameter count: The number of shifts to make for each bit.
    - Returns: The current .

    */
    public func RightShift(count : Swift.Int32) throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_BitArray__RightShift_0__1__i32(&__thrown, self.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // void Set(System.Int32, bool)
// docid: M:System.Collections.BitArray.Set(System.Int32,System.Boolean)
    /**
    Sets the bit at a specific position in the  to the specified value.

    - Parameter index: The zero-based index of the bit to set.
    - Parameter value: The Boolean value to assign to the bit.
    */
    public func Set(index : Swift.Int32, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_BitArray_void__Set_0__2__i32_bool(&__thrown, self.get_handle(), index, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAll(bool)
// docid: M:System.Collections.BitArray.SetAll(System.Boolean)
    /**
    Sets all bits in the  to the specified value.

    - Parameter value: The Boolean value to assign to all bits.
    */
    public func SetAll(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_BitArray_void__SetAll_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.BitArray Xor(System.Collections.BitArray)
// docid: M:System.Collections.BitArray.Xor(System.Collections.BitArray)
    /**
    Performs the bitwise exclusive OR operation between the elements of the current  object against the corresponding elements in the specified array. The current  object will be modified to store the result of the bitwise exclusive OR operation.

    - Parameter value: The array with which to perform the bitwise exclusive OR operation.
    - Returns: An array containing the result of the bitwise exclusive OR operation, which is a reference to the current  object.

    */
    public func Xor(value : dotnet.System.Collections.BitArray) throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_BitArray__Xor_0__1__BitArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.BitArray.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Collections.BitArray.get_IsReadOnly
    public func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.BitArray.get_IsSynchronized
    public func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.Collections.BitArray.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Length(System.Int32)
// docid: M:System.Collections.BitArray.set_Length(System.Int32)
    public func set_Length(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_BitArray_void__set_Length_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.BitArray.get_SyncRoot
    public func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Item(System.Int32)
// docid: M:System.Collections.BitArray.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_BitArray_bool__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, bool)
// docid: M:System.Collections.BitArray.set_Item(System.Int32,System.Boolean)
    public func set_Item(index : Swift.Int32, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_BitArray_void__set_Item_0__2__i32_bool(&__thrown, self.get_handle(), index, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the  is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value indicating whether access to the  is synchronized (thread safe).

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets or sets the number of elements in the .

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
        set(v) {
            return try! set_Length(value: v);
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // BitArray


// type: System.Collections.StructuralComparisons
public struct StructuralComparisons {
    // [IsSpecialName] System.Collections.IComparer get_StructuralComparer()
// docid: M:System.Collections.StructuralComparisons.get_StructuralComparer
    public static func get_StructuralComparer() throws -> dotnet.System.Collections.IComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_StructuralComparisons_IComparer__get_StructuralComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IComparer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.IEqualityComparer get_StructuralEqualityComparer()
// docid: M:System.Collections.StructuralComparisons.get_StructuralEqualityComparer
    public static func get_StructuralEqualityComparer() throws -> dotnet.System.Collections.IEqualityComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_StructuralComparisons_IEqualityComparer__get_StructuralEqualityComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEqualityComparer(hndl : __return);
        }
    }
    /**
    Gets a predefined object that performs a structural comparison of two objects.

    */
    public static var StructuralComparer : dotnet.System.Collections.IComparer {
        get {
            return try! get_StructuralComparer();
        }
    }
    /**
    Gets a predefined object that compares two objects for structural equality.

    */
    public static var StructuralEqualityComparer : dotnet.System.Collections.IEqualityComparer {
        get {
            return try! get_StructuralEqualityComparer();
        }
    }
} // StructuralComparisons


}
// System.Collections.Generic
extension System.Collections.Generic {
// type: System.Collections.Generic.CollectionExtensions
public struct CollectionExtensions {
    // TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, TKey)
// docid: M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)
    /**
    Tries to get the value associated with the specified  in the .

    - Parameter dictionary: A dictionary with keys of type  and values of type .
    - Parameter key: The key of the value to get.
    - Returns: A  instance. When the method is successful, the returned object is the value associated with the specified . When the method fails, it returns the  value for .

    */
    public static func GetValueOrDefault<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(dictionary : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<UTKey,UTValue>, key : UTKey) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_CollectionExtensions_UTValue__GetValueOrDefault_2__2__System_Collections_Generic_IReadOnlyDictionary_UTKey_UTValue__UTKey(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, dictionary.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, TKey, TValue)
// docid: M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)
    /**
    Tries to get the value associated with the specified key in the .

    - Parameter dictionary: A dictionary with keys of type  and values of type .
    - Parameter key: The key of the value to get.
    - Parameter defaultValue: The default value to return when the  cannot find a value associated with the specified .
    - Returns: A  instance. When the method is successful, the returned object is the value associated with the specified . When the method fails, it returns .

    */
    public static func GetValueOrDefault<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(dictionary : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<UTKey,UTValue>, key : UTKey, defaultValue : UTValue) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_CollectionExtensions_UTValue__GetValueOrDefault_2__3__System_Collections_Generic_IReadOnlyDictionary_UTKey_UTValue__UTKey_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, dictionary.get_handle(), key.to_gval(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // bool Remove<TKey, TValue>(System.Collections.Generic.IDictionary<TKey,TValue>, TKey, ref TValue)
// docid: M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)
    /**
    Tries to remove the value with the specified  from the .

    - Parameter dictionary: A dictionary with keys of type  and values of type .
    - Parameter key: The key of the value to remove.
    - Parameter value: When this method returns , the removed value; when this method returns , the  value for .
    - Returns: 
         when a value is found in the  with the specified ;  when the  cannot find a value associated with the specified .

    */
    public static func Remove<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(dictionary : dotnet.System.Collections.Generic.IDictionary_2<UTKey,UTValue>, key : UTKey, value : inout UTValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Generic_CollectionExtensions_bool__Remove_2__3__System_Collections_Generic_IDictionary_UTKey_UTValue__UTKey_outUTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, dictionary.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = UTValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryAdd<TKey, TValue>(System.Collections.Generic.IDictionary<TKey,TValue>, TKey, TValue)
// docid: M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
    /**
    Tries to add the specified  and  to the .

    - Parameter dictionary: A dictionary with keys of type  and values of type .
    - Parameter key: The key of the value to add.
    - Parameter value: The value to add.
    - Returns: 
         when the  and  are successfully added to the ;  when the  already contains the specified , in which case nothing gets added.

    */
    public static func TryAdd<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(dictionary : dotnet.System.Collections.Generic.IDictionary_2<UTKey,UTValue>, key : UTKey, value : UTValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_CollectionExtensions_bool__TryAdd_2__3__System_Collections_Generic_IDictionary_UTKey_UTValue__UTKey_UTValue(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, dictionary.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // CollectionExtensions


// type: System.Collections.Generic.Comparer`1
    /**
    Provides a base class for implementations of the  generic interface.

    */
open class Comparer_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IComparer
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Comparer_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 Compare(T, T)
// docid: M:System.Collections.Generic.Comparer`1.Compare(`0,`0)
    /**
    When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.

    - Parameter x: The first object to compare.
    - Parameter y: The second object to compare.
    - Returns: A signed integer that indicates the relative values of  and , as shown in the following table.  
  
  Value Meaning Less than zero is less than . Zero equals . Greater than zero is greater than .

    */
    open func Compare(x : T, y : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Comparer_1_i32__Compare_0__2__T_T(T.get_type_handle(), &__thrown, self.get_handle(), x.to_gval(), y.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Generic.Comparer<T> Create(System.Comparison<T>)
// docid: M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
    /**
    Creates a comparer by using the specified comparison.

    - Parameter comparison: The comparison to use.
    - Returns: The new comparer.

    */
    open class func Create(comparison : dotnet.System.Comparison_1<T>) throws -> dotnet.System.Collections.Generic.Comparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Comparer_1_System_Collections_Generic_Comparer_T___Create_0__1__System_Comparison_T_(T.get_type_handle(), &__thrown, comparison.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Comparer_1(hndl : __return);
        }
    }
    // delegate closure overload
    open class func Create(comparison : @escaping (T, T) throws -> Swift.Int32) throws -> dotnet.System.Collections.Generic.Comparer_1<T> {
        let del_comparison = try dotnet.System.Comparison_1<T>(comparison);
        return try Create(comparison: del_comparison);
    }
    // [IsSpecialName] System.Collections.Generic.Comparer<T> get_Default()
// docid: M:System.Collections.Generic.Comparer`1.get_Default
    open class func get_Default() throws -> dotnet.System.Collections.Generic.Comparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Comparer_1_System_Collections_Generic_Comparer_T___get_Default_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Comparer_1(hndl : __return);
        }
    }
    /**
    Returns a default sort order comparer for the type specified by the generic argument.

    */
    public static var Default : dotnet.System.Collections.Generic.Comparer_1<T> {
        get {
            return try! get_Default();
        }
    }
} // Comparer_1


// type: System.Collections.Generic.Dictionary`2
    /**
    Represents a collection of keys and values.

    */
open class Dictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Dictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.Dictionary`2.#ctor
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  and uses the default equality comparer for the key type.

    - Parameter dictionary: The  whose elements are copied to the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__1__System_Collections_Generic_IDictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  and uses the specified .

    - Parameter dictionary: The  whose elements are copied to the new .
    - Parameter comparer: The  implementation to use when comparing keys, or  to use the default  for the type of the key.
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__2__System_Collections_Generic_IDictionary_TKey_TValue__System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified .

    - Parameter collection: The   whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue__(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  and uses the specified .

    - Parameter collection: The  whose elements are copied to the new .
    - Parameter comparer: The  implementation to use when comparing keys, or  to use the default  for the type of the key.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__2__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue___System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, collection.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and uses the specified .

    - Parameter comparer: The  implementation to use when comparing keys, or  to use the default  for the type of the key.
    */
    public init(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__1__System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.

    - Parameter capacity: The initial number of elements that the  can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__1__i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the specified .

    - Parameter capacity: The initial number of elements that the  can contain.
    - Parameter comparer: The  implementation to use when comparing keys, or  to use the default  for the type of the key.
    */
    public init(capacity : Swift.Int32, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ctor_0__2__i32_System_Collections_Generic_IEqualityComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, capacity, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(TKey, TValue)
// docid: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
    /**
    Adds the specified key and value to the dictionary.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add. The value can be  for reference types.
    */
    open /* method final */ func Add(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.Dictionary`2.Clear
    /**
    Removes all keys and values from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    /**
    Determines whether the  contains the specified key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    /**
    Determines whether the  contains a specific value.

    - Parameter value: The value to locate in the . The value can be  for reference types.
    - Returns: 
         if the  contains an element with the specified value; otherwise, .

    */
    open func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 EnsureCapacity(System.Int32)
// docid: M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)
    /**
    Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.

    - Parameter capacity: The number of entries.
    - Returns: The current capacity of the .

    */
    open func EnsureCapacity(capacity : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_i32__EnsureCapacity_0__1__i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Generic.Dictionary<TKey,TValue>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.Dictionary`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  structure for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.Dictionary_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_System_Collections_Generic_Dictionary_TKey_TValue__System_Collections_Generic_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_Enumerator_2(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Implements the  interface and returns the data needed to serialize the  instance.

    - Parameter info: A  object that contains the information required to serialize the  instance.
    - Parameter context: A  structure that contains the source and destination of the serialized stream associated with the  instance.
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__GetObjectData_0__2__SerializationInfo_StreamingContext(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnDeserialization(System.Object)
// docid: M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    /**
    Implements the  interface and raises the deserialization event when the deserialization is complete.

    - Parameter sender: The source of the deserialization event.
    */
    open func OnDeserialization(sender : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__OnDeserialization_0__1__Object(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), sender?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(TKey)
// docid: M:System.Collections.Generic.Dictionary`2.Remove(`0)
    /**
    Removes the value with the specified key from the .

    - Parameter key: The key of the element to remove.
    - Returns: 
         if the element is successfully found and removed; otherwise, .  This method returns  if  is not found in the .

    */
    open /* method final */ func Remove(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_bool__Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(TKey, ref TValue)
// docid: M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)
    /**
    Removes the value with the specified key from the , and copies the element to the  parameter.

    - Parameter key: The key of the element to remove.
    - Parameter value: The removed element.
    - Returns: 
         if the element is successfully found and removed; otherwise, .

    */
    open func Remove(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Generic_Dictionary_2_bool__Remove_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.Dictionary`2.TrimExcess
    /**
    Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.

    */
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__TrimExcess_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TrimExcess(System.Int32)
// docid: M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)
    /**
    Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.

    - Parameter capacity: The new capacity.
    */
    open func TrimExcess(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__TrimExcess_0__1__i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryAdd(TKey, TValue)
// docid: M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)
    /**
    Attempts to add the specified key and value to the dictionary.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add. It can be .
    - Returns: 
         if the key/value pair was added to the dictionary successfully; otherwise, .

    */
    open func TryAdd(key : TKey, value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_bool__TryAdd_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The key of the value to get.
    - Parameter value: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the  parameter. This parameter is passed uninitialized.
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Generic_Dictionary_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TKey> get_Comparer()
// docid: M:System.Collections.Generic.Dictionary`2.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_System_Collections_Generic_IEqualityComparer_TKey___get_Comparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.Dictionary`2.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.Dictionary<TKey,TValue>.KeyCollection get_Keys()
// docid: M:System.Collections.Generic.Dictionary`2.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.Dictionary_KeyCollection_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_System_Collections_Generic_Dictionary_TKey_TValue__System_Collections_Generic_KeyCollection_TKey_TValue___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_KeyCollection_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.Dictionary<TKey,TValue>.ValueCollection get_Values()
// docid: M:System.Collections.Generic.Dictionary`2.get_Values
    open func get_Values() throws -> dotnet.System.Collections.Generic.Dictionary_ValueCollection_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_System_Collections_Generic_Dictionary_TKey_TValue__System_Collections_Generic_ValueCollection_TKey_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_ValueCollection_2(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Generic.Dictionary`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(TKey, TValue)
// docid: M:System.Collections.Generic.Dictionary`2.set_Item(`0,`1)
    open /* method final */ func set_Item(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_void__set_Item_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the  that is used to determine equality of keys for the dictionary.

    */
    open var Comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    Gets the number of key/value pairs contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a collection containing the keys in the .

    */
    open var Keys : dotnet.System.Collections.Generic.Dictionary_KeyCollection_2<TKey,TValue> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets a collection containing the values in the .

    */
    open var Values : dotnet.System.Collections.Generic.Dictionary_ValueCollection_2<TKey,TValue> {
        get {
            return try! get_Values();
        }
    }
} // Dictionary_2


// type: System.Collections.Generic.Dictionary`2+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class Dictionary_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable,
    System_Collections_IDictionaryEnumerator
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Dictionary_2_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_Dictionary_2_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<TKey,TValue> get_Current()
// docid: M:System.Collections.Generic.Dictionary`2.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_Enumerator_System_Collections_Generic_KeyValuePair_TKey_TValue___get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // Dictionary_Enumerator_2


// type: System.Collections.Generic.Dictionary`2+KeyCollection
    /**
    Represents the collection of keys in a . This class cannot be inherited.

    */
public final class Dictionary_KeyCollection_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Dictionary_2_KeyCollection_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.Dictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
    /**
    Initializes a new instance of the  class that reflects the keys in the specified .

    - Parameter dictionary: The  whose keys are reflected in the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.Dictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_KeyCollection_ctor_0__1__System_Collections_Generic_Dictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(TKey[], System.Int32)
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(System.Collections.Generic.TKey[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<TKey>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_KeyCollection_void__CopyTo_0__2__TKeyArray_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.Dictionary<TKey,TValue>.KeyCollection.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  for the .

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.Dictionary_KeyCollection_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_KeyCollection_System_Collections_Generic_Dictionary_TKey_TValue__System_Collections_Generic_KeyCollection_TKey_TValue__System_Collections_Generic_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_KeyCollection_Enumerator_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_KeyCollection_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // Dictionary_KeyCollection_2


// type: System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class Dictionary_KeyCollection_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Dictionary_2_KeyCollection_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : TKey {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_Dictionary_2_KeyCollection_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_KeyCollection_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_KeyCollection_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] TKey get_Current()
// docid: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.get_Current
    public func get_Current() throws -> TKey {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_KeyCollection_Enumerator_TKey__get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TKey(gval: __return);
        }
    }
} // Dictionary_KeyCollection_Enumerator_2


// type: System.Collections.Generic.Dictionary`2+ValueCollection
    /**
    Represents the collection of values in a . This class cannot be inherited.

    */
public final class Dictionary_ValueCollection_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Dictionary_2_ValueCollection_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.Dictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
    /**
    Initializes a new instance of the  class that reflects the values in the specified .

    - Parameter dictionary: The  whose values are reflected in the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.Dictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Dictionary_2_ValueCollection_ctor_0__1__System_Collections_Generic_Dictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(TValue[], System.Int32)
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(System.Collections.Generic.TValue[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<TValue>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_ValueCollection_void__CopyTo_0__2__TValueArray_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.Dictionary<TKey,TValue>.ValueCollection.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  for the .

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.Dictionary_ValueCollection_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_ValueCollection_System_Collections_Generic_Dictionary_TKey_TValue__System_Collections_Generic_ValueCollection_TKey_TValue__System_Collections_Generic_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_ValueCollection_Enumerator_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_ValueCollection_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // Dictionary_ValueCollection_2


// type: System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class Dictionary_ValueCollection_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Dictionary_2_ValueCollection_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : TValue {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_Dictionary_2_ValueCollection_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Dictionary_2_ValueCollection_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_ValueCollection_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] TValue get_Current()
// docid: M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.get_Current
    public func get_Current() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Dictionary_2_ValueCollection_Enumerator_TValue__get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
} // Dictionary_ValueCollection_Enumerator_2


// type: System.Collections.Generic.EqualityComparer`1
    /**
    Provides a base class for implementations of the  generic interface.

    */
open class EqualityComparer_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEqualityComparer
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_EqualityComparer_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(T, T)
// docid: M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)
    /**
    When overridden in a derived class, determines whether two objects of type  are equal.

    - Parameter x: The first object to compare.
    - Parameter y: The second object to compare.
    - Returns: 
         if the specified objects are equal; otherwise, .

    */
    open func Equals(x : T, y : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_EqualityComparer_1_bool__Equals_0__2__T_T(T.get_type_handle(), &__thrown, self.get_handle(), x.to_gval(), y.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode(T)
// docid: M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)
    /**
    When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.

    - Parameter obj: The object for which to get a hash code.
    - Returns: A hash code for the specified object.

    */
    open func GetHashCode(obj : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_EqualityComparer_1_i32__GetHashCode_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.EqualityComparer<T> get_Default()
// docid: M:System.Collections.Generic.EqualityComparer`1.get_Default
    open class func get_Default() throws -> dotnet.System.Collections.Generic.EqualityComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_EqualityComparer_1_System_Collections_Generic_EqualityComparer_T___get_Default_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.EqualityComparer_1(hndl : __return);
        }
    }
    /**
    Returns a default equality comparer for the type specified by the generic argument.

    */
    public static var Default : dotnet.System.Collections.Generic.EqualityComparer_1<T> {
        get {
            return try! get_Default();
        }
    }
} // EqualityComparer_1


// type: System.Collections.Generic.HashSet`1
    /**
    Represents a set of values.

    */
open class HashSet_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_HashSet_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.HashSet`1.#ctor
    /**
    Initializes a new instance of the  class that is empty and uses the default equality comparer for the set type.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_HashSet_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.

    - Parameter collection: The collection whose elements are copied to the new set.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_HashSet_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.

    - Parameter collection: The collection whose elements are copied to the new set.
    - Parameter comparer: The  implementation to use when comparing values in the set, or  to use the default  implementation for the set type.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_HashSet_1_ctor_0__2__System_Collections_Generic_IEnumerable_T__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, collection.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that is empty and uses the specified equality comparer for the set type.

    - Parameter comparer: The  implementation to use when comparing values in the set, or  to use the default  implementation for the set type.
    */
    public init(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_HashSet_1_ctor_0__1__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty, but has reserved space for  items and uses the default equality comparer for the set type.

    - Parameter capacity: The initial size of the 
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_HashSet_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
    /**
    Initializes a new instance of the  class that uses the specified equality comparer for the set type, and has sufficient capacity to accommodate  elements.

    - Parameter capacity: The initial size of the 
    - Parameter comparer: The  implementation to use when comparing values in the set, or null (Nothing in Visual Basic) to use the default  implementation for the set type.
    */
    public init(capacity : Swift.Int32, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_HashSet_1_ctor_0__2__i32_System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, capacity, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Add(T)
// docid: M:System.Collections.Generic.HashSet`1.Add(`0)
    /**
    Adds the specified element to a set.

    - Parameter item: The element to add to the set.
    - Returns: 
         if the element is added to the  object;  if the element is already present.

    */
    open /* method final */ func Add(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.HashSet`1.Clear
    /**
    Removes all elements from a  object.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Generic.HashSet`1.Contains(`0)
    /**
    Determines whether a  object contains the specified element.

    - Parameter item: The element to locate in the  object.
    - Returns: 
         if the  object contains the specified element; otherwise, .

    */
    open /* method final */ func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[])
// docid: M:System.Collections.Generic.HashSet`1.CopyTo(System.Collections.Generic.T[])
    open func CopyTo(array : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Generic.HashSet`1.CopyTo(System.Collections.Generic.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32, System.Int32)
// docid: M:System.Collections.Generic.HashSet`1.CopyTo(System.Collections.Generic.T[],System.Int32,System.Int32)
    open func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__CopyTo_0__3__TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEqualityComparer<System.Collections.Generic.HashSet<T>> CreateSetComparer()
// docid: M:System.Collections.Generic.HashSet`1.CreateSetComparer
    /**
    Returns an  object that can be used for equality testing of a  object.

    - Returns: An  object that can be used for deep equality testing of the  object.

    */
    open class func CreateSetComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<dotnet.System.Collections.Generic.HashSet_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_System_Collections_Generic_IEqualityComparer_System_Collections_Generic_System_Collections_Generic_HashSet_T____CreateSetComparer_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // System.Int32 EnsureCapacity(System.Int32)
// docid: M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)
    /**
    Ensures that this hash set can hold the specified number of elements without growing.

    - Parameter capacity: The minimum capacity to ensure.
    - Returns: The new capacity of this instance.

    */
    open func EnsureCapacity(capacity : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_i32__EnsureCapacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void ExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes all elements in the specified collection from the current  object.

    - Parameter other: The collection of items to remove from the  object.
    */
    open /* method final */ func ExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__ExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.HashSet<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.HashSet`1.GetEnumerator
    /**
    Returns an enumerator that iterates through a  object.

    - Returns: A  object for the  object.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.HashSet_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_System_Collections_Generic_HashSet_T__System_Collections_Generic_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.HashSet_Enumerator_1(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Implements the  interface and returns the data needed to serialize a  object.

    - Parameter info: A  object that contains the information required to serialize the  object.
    - Parameter context: A  structure that contains the source and destination of the serialized stream associated with the  object.
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__GetObjectData_0__2__SerializationInfo_StreamingContext(T.get_type_handle(), &__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void IntersectWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current  object to contain only elements that are present in that object and in the specified collection.

    - Parameter other: The collection to compare to the current  object.
    */
    open /* method final */ func IntersectWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__IntersectWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a proper subset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a proper subset of ; otherwise, .

    */
    open /* method final */ func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a proper superset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a proper superset of ; otherwise, .

    */
    open /* method final */ func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a subset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a subset of ; otherwise, .

    */
    open /* method final */ func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a superset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a superset of ; otherwise, .

    */
    open /* method final */ func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void OnDeserialization(System.Object)
// docid: M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
    /**
    Implements the  interface and raises the deserialization event when the deserialization is complete.

    - Parameter sender: The source of the deserialization event.
    */
    open func OnDeserialization(sender : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__OnDeserialization_0__1__Object(T.get_type_handle(), &__thrown, self.get_handle(), sender?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current  object and a specified collection share common elements.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object and  share at least one common element; otherwise, .

    */
    open /* method final */ func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Generic.HashSet`1.Remove(`0)
    /**
    Removes the specified element from a  object.

    - Parameter item: The element to remove.
    - Returns: 
         if the element is successfully found and removed; otherwise, .  This method returns  if  is not found in the  object.

    */
    open /* method final */ func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 RemoveWhere(System.Predicate<T>)
// docid: M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
    /**
    Removes all elements that match the conditions defined by the specified predicate from a  collection.

    - Parameter match: The  delegate that defines the conditions of the elements to remove.
    - Returns: The number of elements that were removed from the  collection.

    */
    open func RemoveWhere(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_i32__RemoveWhere_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func RemoveWhere(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveWhere(match: del_match);
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is equal to ; otherwise, .

    */
    open /* method final */ func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current  object to contain only elements that are present either in that object or in the specified collection, but not both.

    - Parameter other: The collection to compare to the current  object.
    */
    open /* method final */ func SymmetricExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__SymmetricExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.HashSet`1.TrimExcess
    /**
    Sets the capacity of a  object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.

    */
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__TrimExcess_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)
    /**
    Searches the set for a given value and returns the equal value it finds, if any.

    - Parameter equalValue: The value to search for.
    - Parameter actualValue: The value from the set that the search found, or the default value of T when the search yielded no match.
    - Returns: A value indicating whether the search was successful.

    */
    open func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Generic_HashSet_1_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void UnionWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current  object to contain all elements that are present in itself, the specified collection, or both.

    - Parameter other: The collection to compare to the current  object.
    */
    open /* method final */ func UnionWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_void__UnionWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<T> get_Comparer()
// docid: M:System.Collections.Generic.HashSet`1.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_System_Collections_Generic_IEqualityComparer_T___get_Comparer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.HashSet`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the  object that is used to determine equality for the values in the set.

    */
    open var Comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    Gets the number of elements that are contained in a set.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // HashSet_1


// type: System.Collections.Generic.HashSet`1+Enumerator
// boxed value type
    /**
    Enumerates the elements of a  object.

    */
public final class HashSet_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_HashSet_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_HashSet_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.HashSet`1.Enumerator.Dispose
    /**
    Releases all resources used by a  object.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_HashSet_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the  collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Generic.HashSet`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_HashSet_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // HashSet_Enumerator_1


// type: System.Collections.Generic.LinkedListNode`1
    /**
    Represents a node in a . This class cannot be inherited.

    */
public final class LinkedListNode_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_LinkedListNode_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(T)
// docid: M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)
    /**
    Initializes a new instance of the  class, containing the specified value.

    - Parameter value: The value to contain in the .
    */
    public init(value : T) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_LinkedListNode_1_ctor_0__1__T(T.get_type_handle(), &__thrown, value.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.LinkedList<T> get_List()
// docid: M:System.Collections.Generic.LinkedListNode`1.get_List
    public func get_List() throws -> Optional<dotnet.System.Collections.Generic.LinkedList_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedListNode_1_System_Collections_Generic_LinkedList_T___get_List_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.LinkedListNode<T> get_Next()
// docid: M:System.Collections.Generic.LinkedListNode`1.get_Next
    public func get_Next() throws -> Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedListNode_1_System_Collections_Generic_LinkedListNode_T___get_Next_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.LinkedListNode<T> get_Previous()
// docid: M:System.Collections.Generic.LinkedListNode`1.get_Previous
    public func get_Previous() throws -> Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedListNode_1_System_Collections_Generic_LinkedListNode_T___get_Previous_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] T get_Value()
// docid: M:System.Collections.Generic.LinkedListNode`1.get_Value
    public func get_Value() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedListNode_1_T__get_Value_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] void set_Value(T)
// docid: M:System.Collections.Generic.LinkedListNode`1.set_Value(`0)
    public func set_Value(value : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedListNode_1_void__set_Value_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the  that the  belongs to.

    */
    public var List : Optional<dotnet.System.Collections.Generic.LinkedList_1<T>> {
        get {
            return try! get_List();
        }
    }
    /**
    Gets the next node in the .

    */
    public var Next : Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        get {
            return try! get_Next();
        }
    }
    /**
    Gets the previous node in the .

    */
    public var Previous : Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        get {
            return try! get_Previous();
        }
    }
    /**
    Gets the value contained in the node.

    */
    public var Value : T {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // LinkedListNode_1


// type: System.Collections.Generic.LinkedList`1
    /**
    Represents a doubly linked list.

    */
open class LinkedList_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_LinkedList_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.LinkedList`1.#ctor
    /**
    Initializes a new instance of the  class that is empty.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_LinkedList_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  and has sufficient capacity to accommodate the number of elements copied.

    - Parameter collection: The  whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_LinkedList_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddAfter(System.Collections.Generic.LinkedListNode<T>, System.Collections.Generic.LinkedListNode<T>)
// docid: M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
    /**
    Adds the specified new node after the specified existing node in the .

    - Parameter node: The  after which to insert .
    - Parameter newNode: The new  to add to the .
    */
    open func AddAfter(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>, newNode : dotnet.System.Collections.Generic.LinkedListNode_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__AddAfter_0__2__System_Collections_Generic_LinkedListNode_T__System_Collections_Generic_LinkedListNode_T_(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle(), newNode.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.LinkedListNode<T> AddAfter(System.Collections.Generic.LinkedListNode<T>, T)
// docid: M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
    /**
    Adds a new node containing the specified value after the specified existing node in the .

    - Parameter node: The  after which to insert a new  containing .
    - Parameter value: The value to add to the .
    - Returns: The new  containing .

    */
    open func AddAfter(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>, value : T) throws -> dotnet.System.Collections.Generic.LinkedListNode_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___AddAfter_0__2__System_Collections_Generic_LinkedListNode_T__T(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __return);
        }
    }
    // void AddBefore(System.Collections.Generic.LinkedListNode<T>, System.Collections.Generic.LinkedListNode<T>)
// docid: M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
    /**
    Adds the specified new node before the specified existing node in the .

    - Parameter node: The  before which to insert .
    - Parameter newNode: The new  to add to the .
    */
    open func AddBefore(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>, newNode : dotnet.System.Collections.Generic.LinkedListNode_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__AddBefore_0__2__System_Collections_Generic_LinkedListNode_T__System_Collections_Generic_LinkedListNode_T_(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle(), newNode.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.LinkedListNode<T> AddBefore(System.Collections.Generic.LinkedListNode<T>, T)
// docid: M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
    /**
    Adds a new node containing the specified value before the specified existing node in the .

    - Parameter node: The  before which to insert a new  containing .
    - Parameter value: The value to add to the .
    - Returns: The new  containing .

    */
    open func AddBefore(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>, value : T) throws -> dotnet.System.Collections.Generic.LinkedListNode_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___AddBefore_0__2__System_Collections_Generic_LinkedListNode_T__T(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __return);
        }
    }
    // void AddFirst(System.Collections.Generic.LinkedListNode<T>)
// docid: M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
    /**
    Adds the specified new node at the start of the .

    - Parameter node: The new  to add at the start of the .
    */
    open func AddFirst(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__AddFirst_0__1__System_Collections_Generic_LinkedListNode_T_(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.LinkedListNode<T> AddFirst(T)
// docid: M:System.Collections.Generic.LinkedList`1.AddFirst(`0)
    /**
    Adds a new node containing the specified value at the start of the .

    - Parameter value: The value to add at the start of the .
    - Returns: The new  containing .

    */
    open func AddFirst(value : T) throws -> dotnet.System.Collections.Generic.LinkedListNode_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___AddFirst_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __return);
        }
    }
    // void AddLast(System.Collections.Generic.LinkedListNode<T>)
// docid: M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
    /**
    Adds the specified new node at the end of the .

    - Parameter node: The new  to add at the end of the .
    */
    open func AddLast(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__AddLast_0__1__System_Collections_Generic_LinkedListNode_T_(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.LinkedListNode<T> AddLast(T)
// docid: M:System.Collections.Generic.LinkedList`1.AddLast(`0)
    /**
    Adds a new node containing the specified value at the end of the .

    - Parameter value: The value to add at the end of the .
    - Returns: The new  containing .

    */
    open func AddLast(value : T) throws -> dotnet.System.Collections.Generic.LinkedListNode_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___AddLast_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __return);
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.LinkedList`1.Clear
    /**
    Removes all nodes from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Generic.LinkedList`1.Contains(`0)
    /**
    Determines whether a value is in the .

    - Parameter value: The value to locate in the . The value can be  for reference types.
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open /* method final */ func Contains(value : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Generic.LinkedList`1.CopyTo(System.Collections.Generic.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.LinkedListNode<T> Find(T)
// docid: M:System.Collections.Generic.LinkedList`1.Find(`0)
    /**
    Finds the first node that contains the specified value.

    - Parameter value: The value to locate in the .
    - Returns: The first  that contains the specified value, if found; otherwise, .

    */
    open func Find(value : T) throws -> Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___Find_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.LinkedListNode<T> FindLast(T)
// docid: M:System.Collections.Generic.LinkedList`1.FindLast(`0)
    /**
    Finds the last node that contains the specified value.

    - Parameter value: The value to locate in the .
    - Returns: The last  that contains the specified value, if found; otherwise, .

    */
    open func FindLast(value : T) throws -> Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___FindLast_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.LinkedList<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.LinkedList`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.LinkedList_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedList_T__System_Collections_Generic_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.LinkedList_Enumerator_1(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Implements the  interface and returns the data needed to serialize the  instance.

    - Parameter info: A  object that contains the information required to serialize the  instance.
    - Parameter context: A  object that contains the source and destination of the serialized stream associated with the  instance.
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__GetObjectData_0__2__SerializationInfo_StreamingContext(T.get_type_handle(), &__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnDeserialization(System.Object)
// docid: M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
    /**
    Implements the  interface and raises the deserialization event when the deserialization is complete.

    - Parameter sender: The source of the deserialization event.
    */
    open func OnDeserialization(sender : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__OnDeserialization_0__1__Object(T.get_type_handle(), &__thrown, self.get_handle(), sender?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Collections.Generic.LinkedListNode<T>)
// docid: M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
    /**
    Removes the specified node from the .

    - Parameter node: The  to remove from the .
    */
    open func Remove(node : dotnet.System.Collections.Generic.LinkedListNode_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__Remove_0__1__System_Collections_Generic_LinkedListNode_T_(T.get_type_handle(), &__thrown, self.get_handle(), node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Generic.LinkedList`1.Remove(`0)
    /**
    Removes the first occurrence of the specified value from the .

    - Parameter value: The value to remove from the .
    - Returns: 
         if the element containing  is successfully removed; otherwise, .  This method also returns  if  was not found in the original .

    */
    open /* method final */ func Remove(value : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveFirst()
// docid: M:System.Collections.Generic.LinkedList`1.RemoveFirst
    /**
    Removes the node at the start of the .

    */
    open func RemoveFirst() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__RemoveFirst_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveLast()
// docid: M:System.Collections.Generic.LinkedList`1.RemoveLast
    /**
    Removes the node at the end of the .

    */
    open func RemoveLast() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_void__RemoveLast_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.LinkedList`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.LinkedListNode<T> get_First()
// docid: M:System.Collections.Generic.LinkedList`1.get_First
    open func get_First() throws -> Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___get_First_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.LinkedListNode<T> get_Last()
// docid: M:System.Collections.Generic.LinkedList`1.get_Last
    open func get_Last() throws -> Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_System_Collections_Generic_LinkedListNode_T___get_Last_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.LinkedListNode_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of nodes actually contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the first node of the .

    */
    open var First : Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        get {
            return try! get_First();
        }
    }
    /**
    Gets the last node of the .

    */
    open var Last : Optional<dotnet.System.Collections.Generic.LinkedListNode_1<T>> {
        get {
            return try! get_Last();
        }
    }
} // LinkedList_1


// type: System.Collections.Generic.LinkedList`1+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class LinkedList_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_LinkedList_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_LinkedList_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_LinkedList_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Generic.LinkedList`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_LinkedList_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // LinkedList_Enumerator_1


// type: System.Collections.Generic.List`1
    /**
    Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.

    */
open class List_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_List_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.List`1.#ctor
    /**
    Initializes a new instance of the  class that is empty and has the default initial capacity.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_List_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.

    - Parameter collection: The collection whose elements are copied to the new list.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_List_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.List`1.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty and has the specified initial capacity.

    - Parameter capacity: The number of elements that the new list can initially store.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_List_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(T)
// docid: M:System.Collections.Generic.List`1.Add(`0)
    /**
    Adds an object to the end of the .

    - Parameter item: The object to be added to the end of the . The value can be  for reference types.
    */
    open /* method final */ func Add(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    /**
    Adds the elements of the specified collection to the end of the .

    - Parameter collection: The collection whose elements should be added to the end of the . The collection itself cannot be , but it can contain elements that are , if type  is a reference type.
    */
    open func AddRange(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__AddRange_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), collection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly()
// docid: M:System.Collections.Generic.List`1.AsReadOnly
    /**
    Returns a read-only  wrapper for the current collection.

    - Returns: An object that acts as a read-only wrapper around the current .

    */
    open func AsReadOnly() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_System_Collections_ObjectModel_ReadOnlyCollection_T___AsReadOnly_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // System.Int32 BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    /**
    Searches a range of elements in the sorted  for an element using the specified comparer and returns the zero-based index of the element.

    - Parameter index: The zero-based starting index of the range to search.
    - Parameter count: The length of the range to search.
    - Parameter item: The object to locate. The value can be  for reference types.
    - Parameter comparer: The  implementation to use when comparing elements, or  to use the default comparer .
    - Returns: The zero-based index of  in the sorted , if  is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    open func BinarySearch(index : Swift.Int32, count : Swift.Int32, item : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__BinarySearch_0__4__i32_i32_T_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch(T)
// docid: M:System.Collections.Generic.List`1.BinarySearch(`0)
    /**
    Searches the entire sorted  for an element using the default comparer and returns the zero-based index of the element.

    - Parameter item: The object to locate. The value can be  for reference types.
    - Returns: The zero-based index of  in the sorted , if  is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    open func BinarySearch(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__BinarySearch_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 BinarySearch(T, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    /**
    Searches the entire sorted  for an element using the specified comparer and returns the zero-based index of the element.

    - Parameter item: The object to locate. The value can be  for reference types.
    - Parameter comparer: The  implementation to use when comparing elements.  
  
 -or-  
  
  to use the default comparer .
    - Returns: The zero-based index of  in the sorted , if  is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than  or, if there is no larger element, the bitwise complement of .

    */
    open func BinarySearch(item : T, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__BinarySearch_0__2__T_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.List`1.Clear
    /**
    Removes all elements from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Generic.List`1.Contains(`0)
    /**
    Determines whether an element is in the .

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open /* method final */ func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.List<TOutput> ConvertAll<TOutput>(System.Converter<T,TOutput>)
// docid: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    /**
    Converts the elements in the current  to another type, and returns a list containing the converted elements.

    - Parameter converter: A  delegate that converts each element from one type to another type.
    - Returns: A  of the target type containing the converted elements from the current .

    */
    open func ConvertAll<UTOutput : SGBridgeGenericValue>(converter : dotnet.System.Converter_2<T,UTOutput>) throws -> dotnet.System.Collections.Generic.List_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_System_Collections_Generic_List_UTOutput___ConvertAll_1__1__System_Converter_T_UTOutput_(T.get_type_handle(), UTOutput.get_type_handle(), &__thrown, self.get_handle(), converter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConvertAll<UTOutput : SGBridgeGenericValue>(converter : @escaping (T) throws -> UTOutput) throws -> dotnet.System.Collections.Generic.List_1<UTOutput> {
        let del_converter = try dotnet.System.Converter_2<T,UTOutput>(converter);
        return try ConvertAll(converter: del_converter);
    }
    // void CopyTo(System.Int32, T[], System.Int32, System.Int32)
// docid: M:System.Collections.Generic.List`1.CopyTo(System.Int32,System.Collections.Generic.T[],System.Int32,System.Int32)
    open func CopyTo(index : Swift.Int32, array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__CopyTo_0__4__i32_TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, array.get_handle(), arrayIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[])
// docid: M:System.Collections.Generic.List`1.CopyTo(System.Collections.Generic.T[])
    open func CopyTo(array : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Generic.List`1.CopyTo(System.Collections.Generic.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 EnsureCapacity(System.Int32)
// docid: M:System.Collections.Generic.List`1.EnsureCapacity(System.Int32)
    open func EnsureCapacity(capacity : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__EnsureCapacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Exists(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    /**
    Determines whether the  contains elements that match the conditions defined by the specified predicate.

    - Parameter match: The  delegate that defines the conditions of the elements to search for.
    - Returns: 
         if the  contains one or more elements that match the conditions defined by the specified predicate; otherwise, .

    */
    open func Exists(match : dotnet.System.Predicate_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_bool__Exists_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    open func Exists(match : @escaping (T) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try Exists(match: del_match);
    }
    // T Find(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire .

    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type .

    */
    open func Find(match : dotnet.System.Predicate_1<T>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_T__Find_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // delegate closure overload
    open func Find(match : @escaping (T) throws -> Bool) throws -> T {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try Find(match: del_match);
    }
    // System.Collections.Generic.List<T> FindAll(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    /**
    Retrieves all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The  delegate that defines the conditions of the elements to search for.
    - Returns: A  containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty .

    */
    open func FindAll(match : dotnet.System.Predicate_1<T>) throws -> dotnet.System.Collections.Generic.List_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_System_Collections_Generic_List_T___FindAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func FindAll(match : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Generic.List_1<T> {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindAll(match: del_match);
    }
    // System.Int32 FindIndex(System.Int32, System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the  that starts at the specified index and contains the specified number of elements.

    - Parameter startIndex: The zero-based starting index of the search.
    - Parameter count: The number of elements in the section to search.
    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    open func FindIndex(startIndex : Swift.Int32, count : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__FindIndex_0__3__i32_i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, count, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func FindIndex(startIndex : Swift.Int32, count : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(startIndex: startIndex, count: count, match: del_match);
    }
    // System.Int32 FindIndex(System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the  that extends from the specified index to the last element.

    - Parameter startIndex: The zero-based starting index of the search.
    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    open func FindIndex(startIndex : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__FindIndex_0__2__i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func FindIndex(startIndex : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(startIndex: startIndex, match: del_match);
    }
    // System.Int32 FindIndex(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire .

    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the first occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    open func FindIndex(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__FindIndex_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func FindIndex(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindIndex(match: del_match);
    }
    // T FindLast(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire .

    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type .

    */
    open func FindLast(match : dotnet.System.Predicate_1<T>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_T__FindLast_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // delegate closure overload
    open func FindLast(match : @escaping (T) throws -> Bool) throws -> T {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLast(match: del_match);
    }
    // System.Int32 FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the  that contains the specified number of elements and ends at the specified index.

    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    open func FindLastIndex(startIndex : Swift.Int32, count : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__FindLastIndex_0__3__i32_i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, count, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func FindLastIndex(startIndex : Swift.Int32, count : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(startIndex: startIndex, count: count, match: del_match);
    }
    // System.Int32 FindLastIndex(System.Int32, System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the  that extends from the first element to the specified index.

    - Parameter startIndex: The zero-based starting index of the backward search.
    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    open func FindLastIndex(startIndex : Swift.Int32, match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__FindLastIndex_0__2__i32_System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), startIndex, match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func FindLastIndex(startIndex : Swift.Int32, match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(startIndex: startIndex, match: del_match);
    }
    // System.Int32 FindLastIndex(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    /**
    Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire .

    - Parameter match: The  delegate that defines the conditions of the element to search for.
    - Returns: The zero-based index of the last occurrence of an element that matches the conditions defined by , if found; otherwise, -1.

    */
    open func FindLastIndex(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__FindLastIndex_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func FindLastIndex(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try FindLastIndex(match: del_match);
    }
    // void ForEach(System.Action<T>)
// docid: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
    /**
    Performs the specified action on each element of the .

    - Parameter action: The  delegate to perform on each element of the .
    */
    open func ForEach(action : dotnet.System.Action_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__ForEach_0__1__System_Action_T_(T.get_type_handle(), &__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func ForEach(action : @escaping (T) throws -> Void) throws {
        let del_action = try dotnet.System.Action_1<T>(action);
        return try ForEach(action: del_action);
    }
    // System.Collections.Generic.List<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.List`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.List_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_System_Collections_Generic_List_T__System_Collections_Generic_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_Enumerator_1(hndl : __return);
        }
    }
    // System.Collections.Generic.List<T> GetRange(System.Int32, System.Int32)
// docid: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    /**
    Creates a shallow copy of a range of elements in the source .

    - Parameter index: The zero-based  index at which the range starts.
    - Parameter count: The number of elements in the range.
    - Returns: A shallow copy of a range of elements in the source .

    */
    open func GetRange(index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.List_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_System_Collections_Generic_List_T___GetRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(T)
// docid: M:System.Collections.Generic.List`1.IndexOf(`0)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the entire .

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Returns: The zero-based index of the first occurrence of  within the entire , if found; otherwise, -1.

    */
    open /* method final */ func IndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__IndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32)
// docid: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the  that extends from the specified index to the last element.

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Returns: The zero-based index of the first occurrence of  within the range of elements in the  that extends from  to the last element, if found; otherwise, -1.

    */
    open func IndexOf(item : T, index : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__IndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the  that starts at the specified index and contains the specified number of elements.

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Parameter index: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - Parameter count: The number of elements in the section to search.
    - Returns: The zero-based index of the first occurrence of  within the range of elements in the  that starts at  and contains  number of elements, if found; otherwise, -1.

    */
    open func IndexOf(item : T, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__IndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, T)
// docid: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
    /**
    Inserts an element into the  at the specified index.

    - Parameter index: The zero-based index at which  should be inserted.
    - Parameter item: The object to insert. The value can be  for reference types.
    */
    open /* method final */ func Insert(index : Swift.Int32, item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Insert_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    /**
    Inserts the elements of a collection into the  at the specified index.

    - Parameter index: The zero-based index at which the new elements should be inserted.
    - Parameter collection: The collection whose elements should be inserted into the . The collection itself cannot be , but it can contain elements that are , if type  is a reference type.
    */
    open func InsertRange(index : Swift.Int32, collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__InsertRange_0__2__i32_System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, collection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 LastIndexOf(T)
// docid: M:System.Collections.Generic.List`1.LastIndexOf(`0)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the entire .

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Returns: The zero-based index of the last occurrence of  within the entire the , if found; otherwise, -1.

    */
    open func LastIndexOf(item : T) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__LastIndexOf_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32)
// docid: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the  that extends from the first element to the specified index.

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Parameter index: The zero-based starting index of the backward search.
    - Returns: The zero-based index of the last occurrence of  within the range of elements in the  that extends from the first element to , if found; otherwise, -1.

    */
    open func LastIndexOf(item : T, index : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__LastIndexOf_0__2__T_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 LastIndexOf(T, System.Int32, System.Int32)
// docid: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    /**
    Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the  that contains the specified number of elements and ends at the specified index.

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Parameter index: The zero-based starting index of the backward search.
    - Parameter count: The number of elements in the section to search.
    - Returns: The zero-based index of the last occurrence of  within the range of elements in the  that contains  number of elements and ends at , if found; otherwise, -1.

    */
    open func LastIndexOf(item : T, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__LastIndexOf_0__3__T_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Generic.List`1.Remove(`0)
    /**
    Removes the first occurrence of a specific object from the .

    - Parameter item: The object to remove from the . The value can be  for reference types.
    - Returns: 
         if  is successfully removed; otherwise, .  This method also returns  if  was not found in the .

    */
    open /* method final */ func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 RemoveAll(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    /**
    Removes all the elements that match the conditions defined by the specified predicate.

    - Parameter match: The  delegate that defines the conditions of the elements to remove.
    - Returns: The number of elements removed from the .

    */
    open func RemoveAll(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__RemoveAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func RemoveAll(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveAll(match: del_match);
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index of the .

    - Parameter index: The zero-based index of the element to remove.
    */
    open /* method final */ func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__RemoveAt_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveRange(System.Int32, System.Int32)
// docid: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    /**
    Removes a range of elements from the .

    - Parameter index: The zero-based starting index of the range of elements to remove.
    - Parameter count: The number of elements to remove.
    */
    open func RemoveRange(index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__RemoveRange_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse()
// docid: M:System.Collections.Generic.List`1.Reverse
    /**
    Reverses the order of the elements in the entire .

    */
    open func Reverse() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reverse(System.Int32, System.Int32)
// docid: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    /**
    Reverses the order of the elements in the specified range.

    - Parameter index: The zero-based starting index of the range to reverse.
    - Parameter count: The number of elements in the range to reverse.
    */
    open func Reverse(index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Reverse_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort()
// docid: M:System.Collections.Generic.List`1.Sort
    /**
    Sorts the elements in the entire  using the default comparer.

    */
    open func Sort() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Sort_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    /**
    Sorts the elements in the entire  using the specified comparer.

    - Parameter comparer: The  implementation to use when comparing elements, or  to use the default comparer .
    */
    open func Sort(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Sort_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Sort(System.Comparison<T>)
// docid: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    /**
    Sorts the elements in the entire  using the specified .

    - Parameter comparison: The  to use when comparing elements.
    */
    open func Sort(comparison : dotnet.System.Comparison_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Sort_0__1__System_Comparison_T_(T.get_type_handle(), &__thrown, self.get_handle(), comparison.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Sort(comparison : @escaping (T, T) throws -> Swift.Int32) throws {
        let del_comparison = try dotnet.System.Comparison_1<T>(comparison);
        return try Sort(comparison: del_comparison);
    }
    // void Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    /**
    Sorts the elements in a range of elements in  using the specified comparer.

    - Parameter index: The zero-based starting index of the range to sort.
    - Parameter count: The length of the range to sort.
    - Parameter comparer: The  implementation to use when comparing elements, or  to use the default comparer .
    */
    open func Sort(index : Swift.Int32, count : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__Sort_0__3__i32_i32_System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, self.get_handle(), index, count, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Generic.List`1.ToArray
    /**
    Copies the elements of the  to a new array.

    - Returns: An array containing copies of the elements of the .

    */
    open func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.List`1.TrimExcess
    /**
    Sets the capacity to the actual number of elements in the , if that number is less than a threshold value.

    */
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__TrimExcess_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TrueForAll(System.Predicate<T>)
// docid: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    /**
    Determines whether every element in the  matches the conditions defined by the specified predicate.

    - Parameter match: The  delegate that defines the conditions to check against the elements.
    - Returns: 
         if every element in the  matches the conditions defined by the specified predicate; otherwise, . If the list has no elements, the return value is .

    */
    open func TrueForAll(match : dotnet.System.Predicate_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_bool__TrueForAll_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    open func TrueForAll(match : @escaping (T) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try TrueForAll(match: del_match);
    }
    // [IsSpecialName] System.Int32 get_Capacity()
// docid: M:System.Collections.Generic.List`1.get_Capacity
    open func get_Capacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__get_Capacity_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Capacity(System.Int32)
// docid: M:System.Collections.Generic.List`1.set_Capacity(System.Int32)
    open func set_Capacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__set_Capacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.List`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Collections.Generic.List`1.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, T)
// docid: M:System.Collections.Generic.List`1.set_Item(System.Int32,`0)
    open /* method final */ func set_Item(index : Swift.Int32, value : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_void__set_Item_0__2__i32_T(T.get_type_handle(), &__thrown, self.get_handle(), index, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the total number of elements the internal data structure can hold without resizing.

    */
    open var Capacity : Swift.Int32 {
        get {
            return try! get_Capacity();
        }
        set(v) {
            return try! set_Capacity(value: v);
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // List_1


// type: System.Collections.Generic.List`1+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class List_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_List_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_List_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.List`1.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_List_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.List`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Generic.List`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_List_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // List_Enumerator_1


// type: System.Collections.Generic.PriorityQueue`2
open class PriorityQueue_2<TElement : SGBridgeGenericValue,TPriority : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_PriorityQueue_2_get_type_handle(TElement.get_type_handle(),TPriority.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.PriorityQueue`2.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_PriorityQueue_2_ctor_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IComparer<TPriority>)
// docid: M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1})
    public init(comparer : dotnet.System.Collections.Generic.IComparer_1<TPriority>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_PriorityQueue_2_ctor_0__1__System_Collections_Generic_IComparer_TPriority_(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.ValueTuple<TElement,TPriority>>)
// docid: M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})
    public init(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_2<TElement,TPriority>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_PriorityQueue_2_ctor_0__1__System_Collections_Generic_IEnumerable_System_System_ValueTuple_TElement_TPriority__(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.ValueTuple<TElement,TPriority>>, System.Collections.Generic.IComparer<TPriority>)
// docid: M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}},System.Collections.Generic.IComparer{`1})
    public init(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_2<TElement,TPriority>>, comparer : dotnet.System.Collections.Generic.IComparer_1<TPriority>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_PriorityQueue_2_ctor_0__2__System_Collections_Generic_IEnumerable_System_System_ValueTuple_TElement_TPriority___System_Collections_Generic_IComparer_TPriority_(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, items.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Int32)
    public init(initialCapacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_PriorityQueue_2_ctor_0__1__i32(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, initialCapacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.Generic.IComparer<TPriority>)
// docid: M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`1})
    public init(initialCapacity : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<TPriority>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_PriorityQueue_2_ctor_0__2__i32_System_Collections_Generic_IComparer_TPriority_(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, initialCapacity, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.PriorityQueue`2.Clear
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_PriorityQueue_2_void__Clear_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TElement Dequeue()
// docid: M:System.Collections.Generic.PriorityQueue`2.Dequeue
    open func Dequeue() throws -> TElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_TElement__Dequeue_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TElement(gval: __return);
        }
    }
    // void Enqueue(TElement, TPriority)
// docid: M:System.Collections.Generic.PriorityQueue`2.Enqueue(`0,`1)
    open func Enqueue(element : TElement, priority : TPriority) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_PriorityQueue_2_void__Enqueue_0__2__TElement_TPriority(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), element.to_gval(), priority.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TElement EnqueueDequeue(TElement, TPriority)
// docid: M:System.Collections.Generic.PriorityQueue`2.EnqueueDequeue(`0,`1)
    open func EnqueueDequeue(element : TElement, priority : TPriority) throws -> TElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_TElement__EnqueueDequeue_0__2__TElement_TPriority(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), element.to_gval(), priority.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TElement(gval: __return);
        }
    }
    // void EnqueueRange(System.Collections.Generic.IEnumerable<System.ValueTuple<TElement,TPriority>>)
// docid: M:System.Collections.Generic.PriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})
    open func EnqueueRange(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_2<TElement,TPriority>>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_PriorityQueue_2_void__EnqueueRange_0__1__System_Collections_Generic_IEnumerable_System_System_ValueTuple_TElement_TPriority__(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnqueueRange(System.Collections.Generic.IEnumerable<TElement>, TPriority)
// docid: M:System.Collections.Generic.PriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{`0},`1)
    open func EnqueueRange(elements : dotnet.System.Collections.Generic.IEnumerable_1<TElement>, priority : TPriority) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_PriorityQueue_2_void__EnqueueRange_0__2__System_Collections_Generic_IEnumerable_TElement__TPriority(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), elements.get_handle(), priority.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 EnsureCapacity(System.Int32)
// docid: M:System.Collections.Generic.PriorityQueue`2.EnsureCapacity(System.Int32)
    open func EnsureCapacity(capacity : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_i32__EnsureCapacity_0__1__i32(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // TElement Peek()
// docid: M:System.Collections.Generic.PriorityQueue`2.Peek
    open func Peek() throws -> TElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_TElement__Peek_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TElement(gval: __return);
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.PriorityQueue`2.TrimExcess
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_PriorityQueue_2_void__TrimExcess_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryDequeue(ref TElement, ref TPriority)
// docid: M:System.Collections.Generic.PriorityQueue`2.TryDequeue(`0@,`1@)
    open func TryDequeue(element : inout TElement, priority : inout TPriority) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_element = element.to_gval();
            var _tmp_out_priority = priority.to_gval();
        let __return = System_Collections_Generic_PriorityQueue_2_bool__TryDequeue_0__2__outTElement_outTPriority(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_element, &_tmp_out_priority);
            let _tmp2_element = TElement(gval: _tmp_out_element);
            element = _tmp2_element;
            let _tmp2_priority = TPriority(gval: _tmp_out_priority);
            priority = _tmp2_priority;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryPeek(ref TElement, ref TPriority)
// docid: M:System.Collections.Generic.PriorityQueue`2.TryPeek(`0@,`1@)
    open func TryPeek(element : inout TElement, priority : inout TPriority) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_element = element.to_gval();
            var _tmp_out_priority = priority.to_gval();
        let __return = System_Collections_Generic_PriorityQueue_2_bool__TryPeek_0__2__outTElement_outTPriority(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_element, &_tmp_out_priority);
            let _tmp2_element = TElement(gval: _tmp_out_element);
            element = _tmp2_element;
            let _tmp2_priority = TPriority(gval: _tmp_out_priority);
            priority = _tmp2_priority;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<TPriority> get_Comparer()
// docid: M:System.Collections.Generic.PriorityQueue`2.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<TPriority> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_System_Collections_Generic_IComparer_TPriority___get_Comparer_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.PriorityQueue`2.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_i32__get_Count_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.PriorityQueue<TElement,TPriority>.UnorderedItemsCollection get_UnorderedItems()
// docid: M:System.Collections.Generic.PriorityQueue`2.get_UnorderedItems
    open func get_UnorderedItems() throws -> dotnet.System.Collections.Generic.PriorityQueue_UnorderedItemsCollection_2<TElement,TPriority> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_System_Collections_Generic_PriorityQueue_TElement_TPriority__System_Collections_Generic_UnorderedItemsCollection_TElement_TPriority___get_UnorderedItems_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.PriorityQueue_UnorderedItemsCollection_2(hndl : __return);
        }
    }
    open var Comparer : dotnet.System.Collections.Generic.IComparer_1<TPriority> {
        get {
            return try! get_Comparer();
        }
    }
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    open var UnorderedItems : dotnet.System.Collections.Generic.PriorityQueue_UnorderedItemsCollection_2<TElement,TPriority> {
        get {
            return try! get_UnorderedItems();
        }
    }
} // PriorityQueue_2


// type: System.Collections.Generic.PriorityQueue`2+UnorderedItemsCollection
public final class PriorityQueue_UnorderedItemsCollection_2<TElement : SGBridgeGenericValue,TPriority : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_get_type_handle(TElement.get_type_handle(),TPriority.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.PriorityQueue<TElement,TPriority>.UnorderedItemsCollection.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.PriorityQueue_UnorderedItemsCollection_Enumerator_2<TElement,TPriority> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_System_Collections_Generic_PriorityQueue_TElement_TPriority__System_Collections_Generic_UnorderedItemsCollection_TElement_TPriority__System_Collections_Generic_Enumerator_TElement_TPriority___GetEnumerator_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.PriorityQueue_UnorderedItemsCollection_Enumerator_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_i32__get_Count_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // PriorityQueue_UnorderedItemsCollection_2


// type: System.Collections.Generic.PriorityQueue`2+UnorderedItemsCollection+Enumerator
// boxed value type
public final class PriorityQueue_UnorderedItemsCollection_Enumerator_2<TElement : SGBridgeGenericValue,TPriority : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_Enumerator_get_type_handle(TElement.get_type_handle(),TPriority.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Current : dotnet.System.ValueTuple_2<TElement,TPriority> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_Enumerator_implicit_ctor(TElement.get_type_handle(), TPriority.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_Enumerator_void__Dispose_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator.MoveNext
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_Enumerator_bool__MoveNext_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ValueTuple<TElement,TPriority> get_Current()
// docid: M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.ValueTuple_2<TElement,TPriority> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_PriorityQueue_2_UnorderedItemsCollection_Enumerator_System_ValueTuple_TElement_TPriority___get_Current_0__0(TElement.get_type_handle(), TPriority.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ValueTuple_2(hndl : __return);
        }
    }
} // PriorityQueue_UnorderedItemsCollection_Enumerator_2


// type: System.Collections.Generic.Queue`1
    /**
    Represents a first-in, first-out collection of objects.

    */
open class Queue_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Queue_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.Queue`1.#ctor
    /**
    Initializes a new instance of the  class that is empty and has the default initial capacity.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Queue_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.

    - Parameter collection: The collection whose elements are copied to the new .
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Queue_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.Queue`1.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty and has the specified initial capacity.

    - Parameter capacity: The initial number of elements that the  can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Queue_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.Queue`1.Clear
    /**
    Removes all objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Queue_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Generic.Queue`1.Contains(`0)
    /**
    Determines whether an element is in the .

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Generic.Queue`1.CopyTo(System.Collections.Generic.T[],System.Int32)
    open func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Queue_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // T Dequeue()
// docid: M:System.Collections.Generic.Queue`1.Dequeue
    /**
    Removes and returns the object at the beginning of the .

    - Returns: The object that is removed from the beginning of the .

    */
    open func Dequeue() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_T__Dequeue_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // void Enqueue(T)
// docid: M:System.Collections.Generic.Queue`1.Enqueue(`0)
    /**
    Adds an object to the end of the .

    - Parameter item: The object to add to the . The value can be  for reference types.
    */
    open func Enqueue(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Queue_1_void__Enqueue_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.Queue<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.Queue`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.Queue_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_System_Collections_Generic_Queue_T__System_Collections_Generic_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Queue_Enumerator_1(hndl : __return);
        }
    }
    // T Peek()
// docid: M:System.Collections.Generic.Queue`1.Peek
    /**
    Returns the object at the beginning of the  without removing it.

    - Returns: The object at the beginning of the .

    */
    open func Peek() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_T__Peek_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Generic.Queue`1.ToArray
    /**
    Copies the  elements to a new array.

    - Returns: A new array containing elements copied from the .

    */
    open func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.Queue`1.TrimExcess
    /**
    Sets the capacity to the actual number of elements in the , if that number is less than 90 percent of current capacity.

    */
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Queue_1_void__TrimExcess_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 EnsureCapacity(System.Int32)
// docid: M:System.Collections.Generic.Queue`1.EnsureCapacity(System.Int32)
    open func EnsureCapacity(capacity : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_i32__EnsureCapacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool TryDequeue(ref T)
// docid: M:System.Collections.Generic.Queue`1.TryDequeue(`0@)
    /**
    Removes the object at the beginning of the , and copies it to the  parameter.

    - Parameter result: The removed object.
    - Returns: 
         if the object is successfully removed;  if the  is empty.

    */
    open func TryDequeue(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Generic_Queue_1_bool__TryDequeue_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryPeek(ref T)
// docid: M:System.Collections.Generic.Queue`1.TryPeek(`0@)
    /**
    Returns a value that indicates whether there is an object at the beginning of the , and if one is present, copies it to the  parameter. The object is not removed from the .

    - Parameter result: If present, the object at the beginning of the ; otherwise, the default value of .
    - Returns: 
         if there is an object at the beginning of the ;  if the  is empty.

    */
    open func TryPeek(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Generic_Queue_1_bool__TryPeek_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.Queue`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // Queue_1


// type: System.Collections.Generic.Queue`1+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class Queue_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Queue_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_Queue_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.Queue`1.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Queue_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.Queue`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Generic.Queue`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Queue_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // Queue_Enumerator_1


// type: System.Collections.Generic.ReferenceEqualityComparer
    /**
    An  that uses reference equality () instead of value equality () when comparing two object instances.

    */
public final class ReferenceEqualityComparer
    :
    dotnet.System.Object,
    System_Collections_IEqualityComparer
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_ReferenceEqualityComparer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Object, System.Object)
// docid: M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)
    /**
    Determines whether two object references refer to the same object instance.

    - Parameter x: The first object to compare.
    - Parameter y: The second object to compare.
    - Returns: 
         if both  and  refer to the same object instance or if both are ; otherwise, .

    */
    public func Equals(x : Optional<dotnet.System.Object>, y : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_ReferenceEqualityComparer_bool__Equals_0__2__Object_Object(&__thrown, self.get_handle(), x?.get_handle() ?? nil, y?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode(System.Object)
// docid: M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)
    /**
    Returns a hash code for the specified object. The returned hash code is based on the object identity, not on the contents of the object.

    - Parameter obj: The object for which to retrieve the hash code.
    - Returns: A hash code for the identity of .

    */
    public func GetHashCode(obj : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_ReferenceEqualityComparer_i32__GetHashCode_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ReferenceEqualityComparer get_Instance()
// docid: M:System.Collections.Generic.ReferenceEqualityComparer.get_Instance
    public class func get_Instance() throws -> dotnet.System.Collections.Generic.ReferenceEqualityComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_ReferenceEqualityComparer_ReferenceEqualityComparer__get_Instance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ReferenceEqualityComparer(hndl : __return);
        }
    }
    /**
    Gets the singleton  instance.

    */
    public static var Instance : dotnet.System.Collections.Generic.ReferenceEqualityComparer {
        get {
            return try! get_Instance();
        }
    }
} // ReferenceEqualityComparer


// type: System.Collections.Generic.SortedDictionary`2
    /**
    Represents a collection of key/value pairs that are sorted on the key.

    */
open class SortedDictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedDictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.SortedDictionary`2.#ctor
    /**
    Initializes a new instance of the  class that is empty and uses the default  implementation for the key type.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedDictionary_2_ctor_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that is empty and uses the specified  implementation to compare keys.

    - Parameter comparer: The  implementation to use when comparing keys, or  to use the default  for the type of the key.
    */
    public init(comparer : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedDictionary_2_ctor_0__1__System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  and uses the default  implementation for the key type.

    - Parameter dictionary: The  whose elements are copied to the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedDictionary_2_ctor_0__1__System_Collections_Generic_IDictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified  and uses the specified  implementation to compare keys.

    - Parameter dictionary: The  whose elements are copied to the new .
    - Parameter comparer: The  implementation to use when comparing keys, or  to use the default  for the type of the key.
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>, comparer : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedDictionary_2_ctor_0__2__System_Collections_Generic_IDictionary_TKey_TValue__System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(TKey, TValue)
// docid: M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
    /**
    Adds an element with the specified key and value into the .

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add. The value can be  for reference types.
    */
    open /* method final */ func Add(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_void__Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.SortedDictionary`2.Clear
    /**
    Removes all elements from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_void__Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
    /**
    Determines whether the  contains an element with the specified key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)
    /**
    Determines whether the  contains an element with the specified value.

    - Parameter value: The value to locate in the . The value can be  for reference types.
    - Returns: 
         if the  contains an element with the specified value; otherwise, .

    */
    open func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<TKey,TValue>[], System.Int32)
// docid: M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_TKey_TValue_Array_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.SortedDictionary<TKey,TValue>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.SortedDictionary`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.SortedDictionary_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_System_Collections_Generic_SortedDictionary_TKey_TValue__System_Collections_Generic_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedDictionary_Enumerator_2(hndl : __return);
        }
    }
    // bool Remove(TKey)
// docid: M:System.Collections.Generic.SortedDictionary`2.Remove(`0)
    /**
    Removes the element with the specified key from the .

    - Parameter key: The key of the element to remove.
    - Returns: 
         if the element is successfully removed; otherwise, .  This method also returns  if  is not found in the .

    */
    open /* method final */ func Remove(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_bool__Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The key of the value to get.
    - Parameter value: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the  parameter.
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Generic_SortedDictionary_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<TKey> get_Comparer()
// docid: M:System.Collections.Generic.SortedDictionary`2.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_System_Collections_Generic_IComparer_TKey___get_Comparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.SortedDictionary`2.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.SortedDictionary<TKey,TValue>.KeyCollection get_Keys()
// docid: M:System.Collections.Generic.SortedDictionary`2.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.SortedDictionary_KeyCollection_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_System_Collections_Generic_SortedDictionary_TKey_TValue__System_Collections_Generic_KeyCollection_TKey_TValue___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedDictionary_KeyCollection_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.SortedDictionary<TKey,TValue>.ValueCollection get_Values()
// docid: M:System.Collections.Generic.SortedDictionary`2.get_Values
    open func get_Values() throws -> dotnet.System.Collections.Generic.SortedDictionary_ValueCollection_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_System_Collections_Generic_SortedDictionary_TKey_TValue__System_Collections_Generic_ValueCollection_TKey_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedDictionary_ValueCollection_2(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Generic.SortedDictionary`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(TKey, TValue)
// docid: M:System.Collections.Generic.SortedDictionary`2.set_Item(`0,`1)
    open /* method final */ func set_Item(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_void__set_Item_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the  used to order the elements of the .

    */
    open var Comparer : dotnet.System.Collections.Generic.IComparer_1<TKey> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    Gets the number of key/value pairs contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a collection containing the keys in the .

    */
    open var Keys : dotnet.System.Collections.Generic.SortedDictionary_KeyCollection_2<TKey,TValue> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets a collection containing the values in the .

    */
    open var Values : dotnet.System.Collections.Generic.SortedDictionary_ValueCollection_2<TKey,TValue> {
        get {
            return try! get_Values();
        }
    }
} // SortedDictionary_2


// type: System.Collections.Generic.SortedDictionary`2+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class SortedDictionary_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable,
    System_Collections_IDictionaryEnumerator
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedDictionary_2_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_SortedDictionary_2_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<TKey,TValue> get_Current()
// docid: M:System.Collections.Generic.SortedDictionary`2.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_Enumerator_System_Collections_Generic_KeyValuePair_TKey_TValue___get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // SortedDictionary_Enumerator_2


// type: System.Collections.Generic.SortedDictionary`2+KeyCollection
    /**
    Represents the collection of keys in a . This class cannot be inherited.

    */
public final class SortedDictionary_KeyCollection_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedDictionary_2_KeyCollection_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.SortedDictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})
    /**
    Initializes a new instance of the  class that reflects the keys in the specified .

    - Parameter dictionary: The  whose keys are reflected in the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.SortedDictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedDictionary_2_KeyCollection_ctor_0__1__System_Collections_Generic_SortedDictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(TKey[], System.Int32)
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(System.Collections.Generic.TKey[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<TKey>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_KeyCollection_void__CopyTo_0__2__TKeyArray_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.SortedDictionary<TKey,TValue>.KeyCollection.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  structure for the .

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.SortedDictionary_KeyCollection_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_KeyCollection_System_Collections_Generic_SortedDictionary_TKey_TValue__System_Collections_Generic_KeyCollection_TKey_TValue__System_Collections_Generic_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedDictionary_KeyCollection_Enumerator_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_KeyCollection_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // SortedDictionary_KeyCollection_2


// type: System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class SortedDictionary_KeyCollection_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedDictionary_2_KeyCollection_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : TKey {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_SortedDictionary_2_KeyCollection_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_KeyCollection_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_KeyCollection_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] TKey get_Current()
// docid: M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.get_Current
    public func get_Current() throws -> TKey {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_KeyCollection_Enumerator_TKey__get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TKey(gval: __return);
        }
    }
} // SortedDictionary_KeyCollection_Enumerator_2


// type: System.Collections.Generic.SortedDictionary`2+ValueCollection
    /**
    Represents the collection of values in a . This class cannot be inherited.

    */
public final class SortedDictionary_ValueCollection_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedDictionary_2_ValueCollection_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.SortedDictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})
    /**
    Initializes a new instance of the  class that reflects the values in the specified .

    - Parameter dictionary: The  whose values are reflected in the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.SortedDictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedDictionary_2_ValueCollection_ctor_0__1__System_Collections_Generic_SortedDictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(TValue[], System.Int32)
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(System.Collections.Generic.TValue[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<TValue>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_ValueCollection_void__CopyTo_0__2__TValueArray_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.SortedDictionary<TKey,TValue>.ValueCollection.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: A  structure for the .

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.SortedDictionary_ValueCollection_Enumerator_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_ValueCollection_System_Collections_Generic_SortedDictionary_TKey_TValue__System_Collections_Generic_ValueCollection_TKey_TValue__System_Collections_Generic_Enumerator_TKey_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedDictionary_ValueCollection_Enumerator_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_ValueCollection_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // SortedDictionary_ValueCollection_2


// type: System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class SortedDictionary_ValueCollection_Enumerator_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedDictionary_2_ValueCollection_Enumerator_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : TValue {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_SortedDictionary_2_ValueCollection_Enumerator_implicit_ctor(TKey.get_type_handle(), TValue.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedDictionary_2_ValueCollection_Enumerator_void__Dispose_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_ValueCollection_Enumerator_bool__MoveNext_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] TValue get_Current()
// docid: M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.get_Current
    public func get_Current() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedDictionary_2_ValueCollection_Enumerator_TValue__get_Current_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
} // SortedDictionary_ValueCollection_Enumerator_2


// type: System.Collections.Generic.SortedList`2
    /**
    Represents a collection of key/value pairs that are sorted by key based on the associated  implementation.

    */
open class SortedList_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedList_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.SortedList`2.#ctor
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and uses the default .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedList_2_ctor_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and uses the specified .

    - Parameter comparer: The  implementation to use when comparing keys.  
  
 -or-  
  
  to use the default  for the type of the key.
    */
    public init(comparer : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedList_2_ctor_0__1__System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>)
// docid: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified , has sufficient capacity to accommodate the number of elements copied, and uses the default .

    - Parameter dictionary: The  whose elements are copied to the new .
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedList_2_ctor_0__1__System_Collections_Generic_IDictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified , has sufficient capacity to accommodate the number of elements copied, and uses the specified .

    - Parameter dictionary: The  whose elements are copied to the new .
    - Parameter comparer: The  implementation to use when comparing keys.  
  
 -or-  
  
  to use the default  for the type of the key.
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>, comparer : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedList_2_ctor_0__2__System_Collections_Generic_IDictionary_TKey_TValue__System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the default .

    - Parameter capacity: The initial number of elements that the  can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedList_2_ctor_0__1__i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the specified .

    - Parameter capacity: The initial number of elements that the  can contain.
    - Parameter comparer: The  implementation to use when comparing keys.  
  
 -or-  
  
  to use the default  for the type of the key.
    */
    public init(capacity : Swift.Int32, comparer : dotnet.System.Collections.Generic.IComparer_1<TKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedList_2_ctor_0__2__i32_System_Collections_Generic_IComparer_TKey_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, capacity, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(TKey, TValue)
// docid: M:System.Collections.Generic.SortedList`2.Add(`0,`1)
    /**
    Adds an element with the specified key and value into the .

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add. The value can be  for reference types.
    */
    open /* method final */ func Add(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedList_2_void__Add_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.SortedList`2.Clear
    /**
    Removes all elements from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedList_2_void__Clear_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)
    /**
    Determines whether the  contains a specific key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(TValue)
// docid: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)
    /**
    Determines whether the  contains a specific value.

    - Parameter value: The value to locate in the . The value can be  for reference types.
    - Returns: 
         if the  contains an element with the specified value; otherwise, .

    */
    open func ContainsValue(value : TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_bool__ContainsValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator()
// docid: M:System.Collections.Generic.SortedList`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  of type  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue____GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // System.Int32 IndexOfKey(TKey)
// docid: M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)
    /**
    Searches for the specified key and returns the zero-based index within the entire .

    - Parameter key: The key to locate in the .
    - Returns: The zero-based index of  within the entire , if found; otherwise, -1.

    */
    open func IndexOfKey(key : TKey) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_i32__IndexOfKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfValue(TValue)
// docid: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)
    /**
    Searches for the specified value and returns the zero-based index of the first occurrence within the entire .

    - Parameter value: The value to locate in the .  The value can be  for reference types.
    - Returns: The zero-based index of the first occurrence of  within the entire , if found; otherwise, -1.

    */
    open func IndexOfValue(value : TValue) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_i32__IndexOfValue_0__1__TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Remove(TKey)
// docid: M:System.Collections.Generic.SortedList`2.Remove(`0)
    /**
    Removes the element with the specified key from the .

    - Parameter key: The key of the element to remove.
    - Returns: 
         if the element is successfully removed; otherwise, .  This method also returns  if  was not found in the original .

    */
    open /* method final */ func Remove(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_bool__Remove_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index of the .

    - Parameter index: The zero-based index of the element to remove.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedList_2_void__RemoveAt_0__1__i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.SortedList`2.TrimExcess
    /**
    Sets the capacity to the actual number of elements in the , if that number is less than 90 percent of current capacity.

    */
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedList_2_void__TrimExcess_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The key whose value to get.
    - Parameter value: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the  parameter. This parameter is passed uninitialized.
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_Generic_SortedList_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Capacity()
// docid: M:System.Collections.Generic.SortedList`2.get_Capacity
    open func get_Capacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_i32__get_Capacity_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Capacity(System.Int32)
// docid: M:System.Collections.Generic.SortedList`2.set_Capacity(System.Int32)
    open func set_Capacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedList_2_void__set_Capacity_0__1__i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<TKey> get_Comparer()
// docid: M:System.Collections.Generic.SortedList`2.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_System_Collections_Generic_IComparer_TKey___get_Comparer_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.SortedList`2.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<TKey> get_Keys()
// docid: M:System.Collections.Generic.SortedList`2.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.IList_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_System_Collections_Generic_IList_TKey___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<TValue> get_Values()
// docid: M:System.Collections.Generic.SortedList`2.get_Values
    open func get_Values() throws -> dotnet.System.Collections.Generic.IList_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_System_Collections_Generic_IList_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.Generic.SortedList`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedList_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Item(TKey, TValue)
// docid: M:System.Collections.Generic.SortedList`2.set_Item(`0,`1)
    open /* method final */ func set_Item(key : TKey, value : TValue) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedList_2_void__set_Item_0__2__TKey_TValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the number of elements that the  can contain.

    */
    open var Capacity : Swift.Int32 {
        get {
            return try! get_Capacity();
        }
        set(v) {
            return try! set_Capacity(value: v);
        }
    }
    /**
    Gets the  for the sorted list.

    */
    open var Comparer : dotnet.System.Collections.Generic.IComparer_1<TKey> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    Gets the number of key/value pairs contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a collection containing the keys in the , in sorted order.

    */
    open var Keys : dotnet.System.Collections.Generic.IList_1<TKey> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets a collection containing the values in the .

    */
    open var Values : dotnet.System.Collections.Generic.IList_1<TValue> {
        get {
            return try! get_Values();
        }
    }
} // SortedList_2


// type: System.Collections.Generic.SortedSet`1
    /**
    Represents a collection of objects that is maintained in sorted order.

    */
open class SortedSet_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedSet_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.SortedSet`1.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedSet_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that uses a specified comparer.

    - Parameter comparer: The default comparer to use for comparing objects.
    */
    public init(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedSet_1_ctor_0__1__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from a specified enumerable collection.

    - Parameter collection: The enumerable collection to be copied.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedSet_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IComparer<T>)
// docid: M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from a specified enumerable collection and that uses a specified comparer.

    - Parameter collection: The enumerable collection to be copied.
    - Parameter comparer: The default comparer to use for comparing objects.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_SortedSet_1_ctor_0__2__System_Collections_Generic_IEnumerable_T__System_Collections_Generic_IComparer_T_(T.get_type_handle(), &__thrown, collection.get_handle(), nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Add(T)
// docid: M:System.Collections.Generic.SortedSet`1.Add(`0)
    /**
    Adds an element to the set and returns a value that indicates if it was successfully added.

    - Parameter item: The element to add to the set.
    - Returns: 
         if  is added to the set; otherwise, .

    */
    open /* method final */ func Add(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.SortedSet`1.Clear
    /**
    Removes all elements from the set.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Generic.SortedSet`1.Contains(`0)
    /**
    Determines whether the set contains a specific element.

    - Parameter item: The element to locate in the set.
    - Returns: 
         if the set contains ; otherwise, .

    */
    open func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[])
// docid: M:System.Collections.Generic.SortedSet`1.CopyTo(System.Collections.Generic.T[])
    open func CopyTo(array : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Generic.SortedSet`1.CopyTo(System.Collections.Generic.T[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32, System.Int32)
// docid: M:System.Collections.Generic.SortedSet`1.CopyTo(System.Collections.Generic.T[],System.Int32,System.Int32)
    open func CopyTo(array : dotnet.System_Arr<T>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__CopyTo_0__3__TArray_i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer()
// docid: M:System.Collections.Generic.SortedSet`1.CreateSetComparer
    /**
    Returns an  object that can be used to create a collection that contains individual sets.

    - Returns: A comparer for creating a collection of sets.

    */
    open class func CreateSetComparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<dotnet.System.Collections.Generic.SortedSet_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_System_Collections_Generic_IEqualityComparer_System_Collections_Generic_System_Collections_Generic_SortedSet_T____CreateSetComparer_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer(System.Collections.Generic.IEqualityComparer<T>)
// docid: M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
    /**
    Returns an  object, according to a specified comparer, that can be used to create a collection that contains individual sets.

    - Parameter memberEqualityComparer: The comparer to use for creating the returned comparer.
    - Returns: A comparer for creating a collection of sets.

    */
    open class func CreateSetComparer(memberEqualityComparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<dotnet.System.Collections.Generic.SortedSet_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_System_Collections_Generic_IEqualityComparer_System_Collections_Generic_System_Collections_Generic_SortedSet_T____CreateSetComparer_0__1__System_Collections_Generic_IEqualityComparer_T_(T.get_type_handle(), &__thrown, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // void ExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Removes all elements that are in a specified collection from the current  object.

    - Parameter other: The collection of items to remove from the  object.
    */
    open /* method final */ func ExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__ExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.SortedSet<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.SortedSet`1.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator that iterates through the  in sorted order.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.SortedSet_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_System_Collections_Generic_SortedSet_T__System_Collections_Generic_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedSet_Enumerator_1(hndl : __return);
        }
    }
    // System.Collections.Generic.SortedSet<T> GetViewBetween(T, T)
// docid: M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
    /**
    Returns a view of a subset in a .

    - Parameter lowerValue: The lowest desired value in the view.
    - Parameter upperValue: The highest desired value in the view.
    - Returns: A subset view that contains only the values in the specified range.

    */
    open func GetViewBetween(lowerValue : T, upperValue : T) throws -> dotnet.System.Collections.Generic.SortedSet_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_System_Collections_Generic_SortedSet_T___GetViewBetween_0__2__T_T(T.get_type_handle(), &__thrown, self.get_handle(), lowerValue.to_gval(), upperValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.SortedSet_1(hndl : __return);
        }
    }
    // void IntersectWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current  object so that it contains only elements that are also in a specified collection.

    - Parameter other: The collection to compare to the current  object.
    */
    open func IntersectWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__IntersectWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a proper subset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a proper subset of ; otherwise, .

    */
    open /* method final */ func IsProperSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__IsProperSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a proper superset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a proper superset of ; otherwise, .

    */
    open /* method final */ func IsProperSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__IsProperSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a subset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the current  object is a subset of ; otherwise, .

    */
    open /* method final */ func IsSubsetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__IsSubsetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether a  object is a superset of the specified collection.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object is a superset of ; otherwise, .

    */
    open /* method final */ func IsSupersetOf(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__IsSupersetOf_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Overlaps(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current  object and a specified collection share common elements.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the  object and  share at least one common element; otherwise, .

    */
    open /* method final */ func Overlaps(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__Overlaps_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(T)
// docid: M:System.Collections.Generic.SortedSet`1.Remove(`0)
    /**
    Removes a specified item from the .

    - Parameter item: The element to remove.
    - Returns: 
         if the element is found and successfully removed; otherwise, .

    */
    open /* method final */ func Remove(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__Remove_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 RemoveWhere(System.Predicate<T>)
// docid: M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
    /**
    Removes all elements that match the conditions defined by the specified predicate from a .

    - Parameter match: The delegate that defines the conditions of the elements to remove.
    - Returns: The number of elements that were removed from the  collection.

    */
    open func RemoveWhere(match : dotnet.System.Predicate_1<T>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_i32__RemoveWhere_0__1__System_Predicate_T_(T.get_type_handle(), &__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    open func RemoveWhere(match : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_match = try dotnet.System.Predicate_1<T>(match);
        return try RemoveWhere(match: del_match);
    }
    // System.Collections.Generic.IEnumerable<T> Reverse()
// docid: M:System.Collections.Generic.SortedSet`1.Reverse
    /**
    Returns an  that iterates over the  in reverse order.

    - Returns: An enumerator that iterates over the  in reverse order.

    */
    open func Reverse() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_System_Collections_Generic_IEnumerable_T___Reverse_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool SetEquals(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    /**
    Determines whether the current  object and the specified collection contain the same elements.

    - Parameter other: The collection to compare to the current  object.
    - Returns: 
         if the current  object is equal to ; otherwise, .

    */
    open /* method final */ func SetEquals(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_bool__SetEquals_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current  object so that it contains only elements that are present either in the current object or in the specified collection, but not both.

    - Parameter other: The collection to compare to the current  object.
    */
    open /* method final */ func SymmetricExceptWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__SymmetricExceptWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetValue(T, ref T)
// docid: M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)
    /**
    Searches the set for a given value and returns the equal value it finds, if any.

    - Parameter equalValue: The value to search for.
    - Parameter actualValue: The value from the set that the search found, or the default value of T when the search yielded no match.
    - Returns: A value indicating whether the search was successful.

    */
    open func TryGetValue(equalValue : T, actualValue : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_actualValue = actualValue.to_gval();
        let __return = System_Collections_Generic_SortedSet_1_bool__TryGetValue_0__2__T_outT(T.get_type_handle(), &__thrown, self.get_handle(), equalValue.to_gval(), &_tmp_out_actualValue);
            let _tmp2_actualValue = T(gval: _tmp_out_actualValue);
            actualValue = _tmp2_actualValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void UnionWith(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    /**
    Modifies the current  object so that it contains all elements that are present in either the current object or the specified collection.

    - Parameter other: The collection to compare to the current  object.
    */
    open /* method final */ func UnionWith(other : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_void__UnionWith_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<T> get_Comparer()
// docid: M:System.Collections.Generic.SortedSet`1.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_System_Collections_Generic_IComparer_T___get_Comparer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.SortedSet`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] T get_Max()
// docid: M:System.Collections.Generic.SortedSet`1.get_Max
    open func get_Max() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_T__get_Max_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Min()
// docid: M:System.Collections.Generic.SortedSet`1.get_Min
    open func get_Min() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_T__get_Min_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    Gets the  object that is used to order the values in the .

    */
    open var Comparer : dotnet.System.Collections.Generic.IComparer_1<T> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    Gets the number of elements in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the maximum value in the , as defined by the comparer.

    */
    open var Max : T {
        get {
            return try! get_Max();
        }
    }
    /**
    Gets the minimum value in the , as defined by the comparer.

    */
    open var Min : T {
        get {
            return try! get_Min();
        }
    }
} // SortedSet_1


// type: System.Collections.Generic.SortedSet`1+Enumerator
// boxed value type
    /**
    Enumerates the elements of a  object.

    */
public final class SortedSet_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_SortedSet_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_SortedSet_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_SortedSet_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the  collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Generic.SortedSet`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_SortedSet_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // SortedSet_Enumerator_1


// type: System.Collections.Generic.Stack`1
    /**
    Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.

    */
open class Stack_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Stack_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Generic.Stack`1.#ctor
    /**
    Initializes a new instance of the  class that is empty and has the default initial capacity.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Stack_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.

    - Parameter collection: The collection to copy elements from.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Stack_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Generic.Stack`1.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.

    - Parameter capacity: The initial number of elements that the  can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Generic_Stack_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Generic.Stack`1.Clear
    /**
    Removes all objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Stack_1_void__Clear_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(T)
// docid: M:System.Collections.Generic.Stack`1.Contains(`0)
    /**
    Determines whether an element is in the .

    - Parameter item: The object to locate in the . The value can be  for reference types.
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open func Contains(item : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_bool__Contains_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Collections.Generic.Stack`1.CopyTo(System.Collections.Generic.T[],System.Int32)
    open func CopyTo(array : dotnet.System_Arr<T>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Stack_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.Stack<T>.Enumerator GetEnumerator()
// docid: M:System.Collections.Generic.Stack`1.GetEnumerator
    /**
    Returns an enumerator for the .

    - Returns: An  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.Stack_Enumerator_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_System_Collections_Generic_Stack_T__System_Collections_Generic_Enumerator_T___GetEnumerator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Stack_Enumerator_1(hndl : __return);
        }
    }
    // T Peek()
// docid: M:System.Collections.Generic.Stack`1.Peek
    /**
    Returns the object at the top of the  without removing it.

    - Returns: The object at the top of the .

    */
    open func Peek() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_T__Peek_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Pop()
// docid: M:System.Collections.Generic.Stack`1.Pop
    /**
    Removes and returns the object at the top of the .

    - Returns: The object removed from the top of the .

    */
    open func Pop() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_T__Pop_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // void Push(T)
// docid: M:System.Collections.Generic.Stack`1.Push(`0)
    /**
    Inserts an object at the top of the .

    - Parameter item: The object to push onto the . The value can be  for reference types.
    */
    open func Push(item : T) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Stack_1_void__Push_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 EnsureCapacity(System.Int32)
// docid: M:System.Collections.Generic.Stack`1.EnsureCapacity(System.Int32)
    open func EnsureCapacity(capacity : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_i32__EnsureCapacity_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // T[] ToArray()
// docid: M:System.Collections.Generic.Stack`1.ToArray
    /**
    Copies the  to a new array.

    - Returns: A new array containing copies of the elements of the .

    */
    open func ToArray() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_TArray__ToArray_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // void TrimExcess()
// docid: M:System.Collections.Generic.Stack`1.TrimExcess
    /**
    Sets the capacity to the actual number of elements in the , if that number is less than 90 percent of current capacity.

    */
    open func TrimExcess() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Stack_1_void__TrimExcess_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryPeek(ref T)
// docid: M:System.Collections.Generic.Stack`1.TryPeek(`0@)
    /**
    Returns a value that indicates whether there is an object at the top of the , and if one is present, copies it to the  parameter. The object is not removed from the .

    - Parameter result: If present, the object at the top of the ; otherwise, the default value of .
    - Returns: 
         if there is an object at the top of the ;  if the  is empty.

    */
    open func TryPeek(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Generic_Stack_1_bool__TryPeek_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryPop(ref T)
// docid: M:System.Collections.Generic.Stack`1.TryPop(`0@)
    /**
    Returns a value that indicates whether there is an object at the top of the , and if one is present, copies it to the  parameter, and removes it from the .

    - Parameter result: If present, the object at the top of the ; otherwise, the default value of .
    - Returns: 
         if there is an object at the top of the ;  if the  is empty.

    */
    open func TryPop(result : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.to_gval();
        let __return = System_Collections_Generic_Stack_1_bool__TryPop_0__1__outT(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_result);
            let _tmp2_result = T(gval: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Generic.Stack`1.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // Stack_1


// type: System.Collections.Generic.Stack`1+Enumerator
// boxed value type
    /**
    Enumerates the elements of a .

    */
public final class Stack_Enumerator_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Generic_Stack_1_Enumerator_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element at the current position of the enumerator.

    */
    public var Current : T {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Collections_Generic_Stack_1_Enumerator_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Collections.Generic.Stack`1.Enumerator.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Generic_Stack_1_Enumerator_void__Dispose_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Collections.Generic.Stack`1.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the .

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_Enumerator_bool__MoveNext_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] T get_Current()
// docid: M:System.Collections.Generic.Stack`1.Enumerator.get_Current
    public func get_Current() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Generic_Stack_1_Enumerator_T__get_Current_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // Stack_Enumerator_1


}



// EXTENSION METHOD TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, TKey)
extension dotnet.System.Collections.Generic.IReadOnlyDictionary_2 {
    public func GetValueOrDefault(key : TKey) throws -> TValue {
        return try dotnet.System.Collections.Generic.CollectionExtensions.GetValueOrDefault(dictionary: self, key: key);
    }
}

// EXTENSION METHOD TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, TKey, TValue)
extension dotnet.System.Collections.Generic.IReadOnlyDictionary_2 {
    public func GetValueOrDefault(key : TKey, defaultValue : TValue) throws -> TValue {
        return try dotnet.System.Collections.Generic.CollectionExtensions.GetValueOrDefault(dictionary: self, key: key, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD bool Remove<TKey, TValue>(System.Collections.Generic.IDictionary<TKey,TValue>, TKey, ref TValue)
extension dotnet.System.Collections.Generic.IDictionary_2 {
    public func Remove(key : TKey, value : inout TValue) throws -> Bool {
        return try dotnet.System.Collections.Generic.CollectionExtensions.Remove(dictionary: self, key: key, value: &value);
    }
}

// EXTENSION METHOD bool TryAdd<TKey, TValue>(System.Collections.Generic.IDictionary<TKey,TValue>, TKey, TValue)
extension dotnet.System.Collections.Generic.IDictionary_2 {
    public func TryAdd(key : TKey, value : TValue) throws -> Bool {
        return try dotnet.System.Collections.Generic.CollectionExtensions.TryAdd(dictionary: self, key: key, value: value);
    }
}

