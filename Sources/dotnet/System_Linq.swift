// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Linq
extension System.Linq {
// type: System.Linq.Enumerable
public struct Enumerable {
    // TSource Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TSource,TSource>)
// docid: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
    /**
    Applies an accumulator function over a sequence.

    - Parameter source: An  to aggregate over.
    - Parameter func: An accumulator function to be invoked on each element.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, func_ : dotnet.System.Func_3<UTSource,UTSource,UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Aggregate_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTSource_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, func_ : @escaping (UTSource, UTSource) throws -> UTSource) throws -> UTSource {
        let del_func_ = try dotnet.System.Func_3<UTSource,UTSource,UTSource>(func_);
        return try Aggregate(source: source, func_: del_func_);
    }
    // TAccumulate Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>)
// docid: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
    /**
    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.

    - Parameter source: An  to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter func: An accumulator function to be invoked on each element.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>) throws -> UTAccumulate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTAccumulate__Aggregate_2__3__System_Collections_Generic_IEnumerable_UTSource__UTAccumulate_System_Func_UTAccumulate_UTSource_UTAccumulate_(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTAccumulate(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, seed : UTAccumulate, func_ : @escaping (UTAccumulate, UTSource) throws -> UTAccumulate) throws -> UTAccumulate {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>(func_);
        return try Aggregate(source: source, seed: seed, func_: del_func_);
    }
    // TResult Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TResult>)
// docid: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
    /**
    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.

    - Parameter source: An  to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter func: An accumulator function to be invoked on each element.
    - Parameter resultSelector: A function to transform the final accumulator value into the result value.
    - Returns: The transformed final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTResult__Aggregate_3__4__System_Collections_Generic_IEnumerable_UTSource__UTAccumulate_System_Func_UTAccumulate_UTSource_UTAccumulate__System_Func_UTAccumulate_UTResult_(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), func_.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, seed : UTAccumulate, func_ : @escaping (UTAccumulate, UTSource) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>(func_);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try Aggregate(source: source, seed: seed, func_: del_func_, resultSelector: del_resultSelector);
    }
    // bool All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Determines whether all elements of a sequence satisfy a condition.

    - Parameter source: An  that contains the elements to apply the predicate to.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
         if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, .

    */
    public static func All<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__All_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func All<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try All(source: source, predicate: del_predicate);
    }
    // bool Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Determines whether a sequence contains any elements.

    - Parameter source: The  to check for emptiness.
    - Returns: 
         if the source sequence contains any elements; otherwise, .

    */
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__Any_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Determines whether any element of a sequence satisfies a condition.

    - Parameter source: An  whose elements to apply the predicate to.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
         if the source sequence is not empty and at least one of its elements passes the test in the specified predicate; otherwise, .

    */
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__Any_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Any_(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
    /**
    Appends a value to the end of the sequence.

    - Parameter source: A sequence of values.
    - Parameter element: The value to append to .
    - Returns: A new sequence that ends with .

    */
    public static func Append<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, element : UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Append_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), element.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the input typed as .

    - Parameter source: The sequence to type as .
    - Returns: The input sequence typed as .

    */
    public static func AsEnumerable<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___AsEnumerable_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Decimal Average(System.Collections.Generic.IEnumerable<System.Decimal>)
// docid: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Average_0__1__System_Collections_Generic_IEnumerable_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Average(System.Collections.Generic.IEnumerable<System.Double>)
// docid: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Average_0__1__System_Collections_Generic_IEnumerable_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average(System.Collections.Generic.IEnumerable<System.Int32>)
// docid: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Average_0__1__System_Collections_Generic_IEnumerable_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average(System.Collections.Generic.IEnumerable<System.Int64>)
// docid: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int64>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Average_0__1__System_Collections_Generic_IEnumerable_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Average(System.Collections.Generic.IEnumerable<System.Single>)
// docid: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Average_0__1__System_Collections_Generic_IEnumerable_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    /**
    Computes the average of a sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Average_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Double Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    /**
    Computes the average of a sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Average_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Double Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    /**
    Computes the average of a sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Average_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Double Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    /**
    Computes the average of a sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Average_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Average(source: source, selector: del_selector);
    }
    // System.Single Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    /**
    Computes the average of a sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Average_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Average(source: source, selector: del_selector);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<TResult> Cast<TResult>(System.Collections.IEnumerable)
    // System.Collections.Generic.IEnumerable<TSource[]> Chunk<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    public static func Chunk<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, size : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System_Arr<UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSourceArray___Chunk_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), size);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Concatenates two sequences.

    - Parameter first: The first sequence to concatenate.
    - Parameter second: The sequence to concatenate to the first sequence.
    - Returns: An  that contains the concatenated elements of the two input sequences.

    */
    public static func Concat<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Concat_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
    /**
    Determines whether a sequence contains a specified element by using the default equality comparer.

    - Parameter source: A sequence in which to locate a value.
    - Parameter value: The value to locate in the sequence.
    - Returns: 
         if the source sequence contains an element that has the specified value; otherwise, .

    */
    public static func Contains<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, value : UTSource) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__Contains_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    /**
    Determines whether a sequence contains a specified element by using a specified .

    - Parameter source: A sequence in which to locate a value.
    - Parameter value: The value to locate in the sequence.
    - Parameter comparer: An equality comparer to compare values.
    - Returns: 
         if the source sequence contains an element that has the specified value; otherwise, .

    */
    public static func Contains<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, value : UTSource, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__Contains_1__3__System_Collections_Generic_IEnumerable_UTSource__UTSource_System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), value.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the number of elements in a sequence.

    - Parameter source: A sequence that contains elements to be counted.
    - Returns: The number of elements in the input sequence.

    */
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Count_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns a number that represents how many elements in the specified sequence satisfy a condition.

    - Parameter source: A sequence that contains elements to be tested and counted.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.

    */
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Count_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Swift.Int32 {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Count(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.

    - Parameter source: The sequence to return a default value for if it is empty.
    - Returns: An  object that contains the default value for the  type if  is empty; otherwise, .

    */
    public static func DefaultIfEmpty<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___DefaultIfEmpty_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
    /**
    Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.

    - Parameter source: The sequence to return the specified value for if it is empty.
    - Parameter defaultValue: The value to return if the sequence is empty.
    - Returns: An  that contains  if  is empty; otherwise, .

    */
    public static func DefaultIfEmpty<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, defaultValue : UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___DefaultIfEmpty_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    public static func DistinctBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___DistinctBy_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func DistinctBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try DistinctBy(source: source, keySelector: del_keySelector);
    }
    // System.Collections.Generic.IEnumerable<TSource> DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    public static func DistinctBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___DistinctBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func DistinctBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try DistinctBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns distinct elements from a sequence by using the default equality comparer to compare values.

    - Parameter source: The sequence to remove duplicate elements from.
    - Returns: An  that contains distinct elements from the source sequence.

    */
    public static func Distinct<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Distinct_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Returns distinct elements from a sequence by using a specified  to compare values.

    - Parameter source: The sequence to remove duplicate elements from.
    - Parameter comparer: An  to compare values.
    - Returns: An  that contains distinct elements from the source sequence.

    */
    public static func Distinct<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Distinct_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // TSource ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Index)
// docid: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Index)
    public static func ElementAtOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, index : dotnet.System.Index) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__ElementAtOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__Index(UTSource.get_type_handle(), &__thrown, source.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    /**
    Returns the element at a specified index in a sequence or a default value if the index is out of range.

    - Parameter source: An  to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: 
        () if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.

    */
    public static func ElementAtOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, index : Swift.Int32) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__ElementAtOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Index)
// docid: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index)
    public static func ElementAt<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, index : dotnet.System.Index) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__ElementAt_1__2__System_Collections_Generic_IEnumerable_UTSource__Index(UTSource.get_type_handle(), &__thrown, source.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    /**
    Returns the element at a specified index in a sequence.

    - Parameter source: An  to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: The element at the specified position in the source sequence.

    */
    public static func ElementAt<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, index : Swift.Int32) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__ElementAt_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<TResult> Empty<TResult>()
    // System.Collections.Generic.IEnumerable<TSource> ExceptBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})
    public static func ExceptBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___ExceptBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ExceptBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ExceptBy(first: first, second: second, keySelector: del_keySelector);
    }
    // System.Collections.Generic.IEnumerable<TSource> ExceptBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    public static func ExceptBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___ExceptBy_2__4__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ExceptBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ExceptBy(first: first, second: second, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TSource> Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Produces the set difference of two sequences by using the default equality comparer to compare values.

    - Parameter first: An  whose elements that are not also in  will be returned.
    - Parameter second: An  whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - Returns: A sequence that contains the set difference of the elements of two sequences.

    */
    public static func Except<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Except_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set difference of two sequences by using the specified  to compare values.

    - Parameter first: An  whose elements that are not also in  will be returned.
    - Parameter second: An  whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - Parameter comparer: An  to compare values.
    - Returns: A sequence that contains the set difference of the elements of two sequences.

    */
    public static func Except<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Except_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the first element of a sequence, or a default value if the sequence contains no elements.

    - Parameter source: The  to return the first element of.
    - Returns: 
        () if  is empty; otherwise, the first element in .

    */
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__FirstOrDefault_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__FirstOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
        () if  is empty or if no element passes the test specified by ; otherwise, the first element in  that passes the test specified by .

    */
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__FirstOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try FirstOrDefault(source: source, predicate: del_predicate);
    }
    // TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>, TSource)
// docid: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__FirstOrDefault_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool, defaultValue : UTSource) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try FirstOrDefault(source: source, predicate: del_predicate, defaultValue: defaultValue);
    }
    // TSource First<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the first element of a sequence.

    - Parameter source: The  to return the first element of.
    - Returns: The first element in the specified sequence.

    */
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__First_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns the first element in a sequence that satisfies a specified condition.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The first element in the sequence that passes the test in the specified predicate function.

    */
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__First_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try First(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Groups the elements of a sequence according to a specified key selector function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Returns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each  object contains a sequence of objects and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_System_Linq_System_Linq_IGrouping_UTKey_UTSource____GroupBy_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try GroupBy(source: source, keySelector: del_keySelector);
    }
    // System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter comparer: An  to compare keys.
    - Returns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each  object contains a collection of objects and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_System_Linq_System_Linq_IGrouping_UTKey_UTSource____GroupBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try GroupBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
// docid: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in the .
    - Returns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each  object contains a collection of objects of type  and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_System_Linq_System_Linq_IGrouping_UTKey_UTElement____GroupBy_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Parameter comparer: An  to compare keys.
    - Returns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each  object contains a collection of objects of type  and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_System_Linq_System_Linq_IGrouping_UTKey_UTElement____GroupBy_3__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>)
// docid: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter resultSelector: A function to create a result value from each group.
    - Returns: A collection of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___GroupBy_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTSource__UTResult_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter resultSelector: A function to create a result value from each group.
    - Parameter comparer: An  to compare keys with.
    - Returns: A collection of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___GroupBy_3__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTSource__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>)
// docid: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Parameter resultSelector: A function to create a result value from each group.
    - Returns: A collection of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___GroupBy_4__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTResult_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Parameter resultSelector: A function to create a result value from each group.
    - Parameter comparer: An  to compare keys with.
    - Returns: A collection of elements of type  where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___GroupBy_4__5__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try GroupBy(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>)
// docid: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    /**
    Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Returns: An  that contains elements of type  that are obtained by performing a grouped join on two sequences.

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___GroupJoin_4__5__System_Collections_Generic_IEnumerable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try GroupJoin(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Correlates the elements of two sequences based on key equality and groups the results. A specified  is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Parameter comparer: An  to hash and compare keys.
    - Returns: An  that contains elements of type  that are obtained by performing a grouped join on two sequences.

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___GroupJoin_4__6__System_Collections_Generic_IEnumerable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try GroupJoin(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TSource> IntersectBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})
    public static func IntersectBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___IntersectBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func IntersectBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try IntersectBy(first: first, second: second, keySelector: del_keySelector);
    }
    // System.Collections.Generic.IEnumerable<TSource> IntersectBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    public static func IntersectBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___IntersectBy_2__4__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func IntersectBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try IntersectBy(first: first, second: second, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Produces the set intersection of two sequences by using the default equality comparer to compare values.

    - Parameter first: An  whose distinct elements that also appear in  will be returned.
    - Parameter second: An  whose distinct elements that also appear in the first sequence will be returned.
    - Returns: A sequence that contains the elements that form the set intersection of two sequences.

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Intersect_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set intersection of two sequences by using the specified  to compare values.

    - Parameter first: An  whose distinct elements that also appear in  will be returned.
    - Parameter second: An  whose distinct elements that also appear in the first sequence will be returned.
    - Parameter comparer: An  to compare values.
    - Returns: A sequence that contains the elements that form the set intersection of two sequences.

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Intersect_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>)
// docid: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    /**
    Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Returns: An  that has elements of type  that are obtained by performing an inner join on two sequences.

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,UTInner,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___Join_4__5__System_Collections_Generic_IEnumerable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_UTInner_UTResult_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, UTInner) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,UTInner,UTResult>(resultSelector);
        return try Join(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Correlates the elements of two sequences based on matching keys. A specified  is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Parameter comparer: An  to hash and compare keys.
    - Returns: An  that has elements of type  that are obtained by performing an inner join on two sequences.

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<UTOuter,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<UTOuter,UTInner,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___Join_4__6__System_Collections_Generic_IEnumerable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Func_UTOuter_UTKey__System_Func_UTInner_UTKey__System_Func_UTOuter_UTInner_UTResult__System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Collections.Generic.IEnumerable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (UTOuter) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (UTOuter, UTInner) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<UTOuter,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTOuter,UTInner,UTResult>(resultSelector);
        return try Join(outer: outer, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
    // TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the last element of a sequence, or a default value if the sequence contains no elements.

    - Parameter source: An  to return the last element of.
    - Returns: 
        () if the source sequence is empty; otherwise, the last element in the .

    */
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__LastOrDefault_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__LastOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
        () if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.

    */
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__LastOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try LastOrDefault(source: source, predicate: del_predicate);
    }
    // TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>, TSource)
// docid: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__LastOrDefault_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool, defaultValue : UTSource) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try LastOrDefault(source: source, predicate: del_predicate, defaultValue: defaultValue);
    }
    // TSource Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the last element of a sequence.

    - Parameter source: An  to return the last element of.
    - Returns: The value at the last position in the source sequence.

    */
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Last_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns the last element of a sequence that satisfies a specified condition.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The last element in the sequence that passes the test in the specified predicate function.

    */
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Last_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Last(source: source, predicate: del_predicate);
    }
    // System.Int64 LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns an  that represents the total number of elements in a sequence.

    - Parameter source: An  that contains the elements to be counted.
    - Returns: The number of elements in the source sequence.

    */
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__LongCount_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns an  that represents how many elements in a sequence satisfy a condition.

    - Parameter source: An  that contains the elements to be counted.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.

    */
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__LongCount_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> Swift.Int64 {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try LongCount(source: source, predicate: del_predicate);
    }
    // System.Decimal Max(System.Collections.Generic.IEnumerable<System.Decimal>)
// docid: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
    /**
    Returns the maximum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Max_0__1__System_Collections_Generic_IEnumerable_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Max(System.Collections.Generic.IEnumerable<System.Double>)
// docid: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
    /**
    Returns the maximum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Max_0__1__System_Collections_Generic_IEnumerable_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Max(System.Collections.Generic.IEnumerable<System.Int32>)
// docid: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
    /**
    Returns the maximum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Max_0__1__System_Collections_Generic_IEnumerable_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Max(System.Collections.Generic.IEnumerable<System.Int64>)
// docid: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
    /**
    Returns the maximum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__Max_0__1__System_Collections_Generic_IEnumerable_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Max(System.Collections.Generic.IEnumerable<System.Single>)
// docid: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
    /**
    Returns the maximum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Max_0__1__System_Collections_Generic_IEnumerable_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // TSource MaxBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    public static func MaxBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__MaxBy_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func MaxBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> UTSource {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try MaxBy(source: source, keySelector: del_keySelector);
    }
    // TSource MaxBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    public static func MaxBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__MaxBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func MaxBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> UTSource {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try MaxBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // TSource Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the maximum value in a generic sequence.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Max_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Max_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Decimal Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    /**
    Invokes a transform function on each element of a sequence and returns the maximum  value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Max_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Double Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    /**
    Invokes a transform function on each element of a sequence and returns the maximum  value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Max_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Int32 Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    /**
    Invokes a transform function on each element of a sequence and returns the maximum  value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Max_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Int64 Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    /**
    Invokes a transform function on each element of a sequence and returns the maximum  value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__Max_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Single Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    /**
    Invokes a transform function on each element of a sequence and returns the maximum  value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Max_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // TResult Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.

    - Parameter source: A sequence of values to determine the maximum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTResult__Max_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Max<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try Max(source: source, selector: del_selector);
    }
    // System.Decimal Min(System.Collections.Generic.IEnumerable<System.Decimal>)
// docid: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
    /**
    Returns the minimum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Min_0__1__System_Collections_Generic_IEnumerable_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Min(System.Collections.Generic.IEnumerable<System.Double>)
// docid: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
    /**
    Returns the minimum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Min_0__1__System_Collections_Generic_IEnumerable_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Min(System.Collections.Generic.IEnumerable<System.Int32>)
// docid: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
    /**
    Returns the minimum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Min_0__1__System_Collections_Generic_IEnumerable_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Min(System.Collections.Generic.IEnumerable<System.Int64>)
// docid: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
    /**
    Returns the minimum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__Min_0__1__System_Collections_Generic_IEnumerable_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Min(System.Collections.Generic.IEnumerable<System.Single>)
// docid: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
    /**
    Returns the minimum value in a sequence of  values.

    - Parameter source: A sequence of  values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Min_0__1__System_Collections_Generic_IEnumerable_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // TSource MinBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    public static func MinBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__MinBy_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func MinBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> UTSource {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try MinBy(source: source, keySelector: del_keySelector);
    }
    // TSource MinBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    public static func MinBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__MinBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func MinBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> UTSource {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try MinBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // TSource Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the minimum value in a generic sequence.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Min_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Min_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Decimal Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    /**
    Invokes a transform function on each element of a sequence and returns the minimum  value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Min_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Double Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    /**
    Invokes a transform function on each element of a sequence and returns the minimum  value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Min_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Int32 Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    /**
    Invokes a transform function on each element of a sequence and returns the minimum  value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Min_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Int64 Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    /**
    Invokes a transform function on each element of a sequence and returns the minimum  value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__Min_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // System.Single Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    /**
    Invokes a transform function on each element of a sequence and returns the minimum  value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Min_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Min(source: source, selector: del_selector);
    }
    // TResult Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.

    - Parameter source: A sequence of values to determine the minimum value of.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTResult__Min_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // delegate closure overload
    public static func Min<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try Min(source: source, selector: del_selector);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<TResult> OfType<TResult>(System.Collections.IEnumerable)
    // System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Sorts the elements of a sequence in descending order according to a key.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___OrderByDescending_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the elements of a sequence in descending order by using a specified comparer.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___OrderByDescending_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Sorts the elements of a sequence in ascending order according to a key.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___OrderBy_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector);
    }
    // System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the elements of a sequence in ascending order by using a specified comparer.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___OrderBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try OrderBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TSource> Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
    /**
    Adds a value to the beginning of the sequence.

    - Parameter source: A sequence of values.
    - Parameter element: The value to prepend to .
    - Returns: A new sequence that begins with .

    */
    public static func Prepend<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, element : UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Prepend_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), element.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Int32> Range(System.Int32, System.Int32)
// docid: M:System.Linq.Enumerable.Range(System.Int32,System.Int32)
    /**
    Generates a sequence of integral numbers within a specified range.

    - Parameter start: The value of the first integer in the sequence.
    - Parameter count: The number of sequential integers to generate.
    - Returns: An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.

    */
    public static func Range(start : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_i32___Range_0__2__i32_i32(&__thrown, start, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult, System.Int32)
// docid: M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)
    /**
    Generates a sequence that contains one repeated value.

    - Parameter element: The value to be repeated.
    - Parameter count: The number of times to repeat the value in the generated sequence.
    - Returns: An  that contains a repeated value.

    */
    public static func Repeat<UTResult : SGBridgeGenericValue>(element : UTResult, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___Repeat_1__2__UTResult_i32(UTResult.get_type_handle(), &__thrown, element.to_gval(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Inverts the order of the elements in a sequence.

    - Parameter source: A sequence of values to reverse.
    - Returns: A sequence whose elements correspond to those of the input sequence in reverse order.

    */
    public static func Reverse<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Reverse_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>)
// docid: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    /**
    Projects each element of a sequence to an  and flattens the resulting sequences into one sequence.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A transform function to apply to each element.
    - Returns: An  whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___SelectMany_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try SelectMany(source: source, selector: del_selector);
    }
    // System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>)
// docid: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
    /**
    Projects each element of a sequence to an , and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    - Returns: An  whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___SelectMany_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try SelectMany(source: source, selector: del_selector);
    }
    // System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
// docid: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    /**
    Projects each element of a sequence to an , flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.

    - Parameter source: A sequence of values to project.
    - Parameter collectionSelector: A transform function to apply to each element of the input sequence.
    - Parameter resultSelector: A transform function to apply to each element of the intermediate sequence.
    - Returns: An  whose elements are the result of invoking the one-to-many transform function  on each element of  and then mapping each of those sequence elements and their corresponding source element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, collectionSelector : dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<UTSource,UTCollection,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___SelectMany_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection___System_Func_UTSource_UTCollection_UTResult_(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, collectionSelector : @escaping (UTSource) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (UTSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTSource,UTCollection,UTResult>(resultSelector);
        return try SelectMany(source: source, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
// docid: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    /**
    Projects each element of a sequence to an , flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.

    - Parameter source: A sequence of values to project.
    - Parameter collectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    - Parameter resultSelector: A transform function to apply to each element of the intermediate sequence.
    - Returns: An  whose elements are the result of invoking the one-to-many transform function  on each element of  and then mapping each of those sequence elements and their corresponding source element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, collectionSelector : dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<UTSource,UTCollection,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___SelectMany_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection___System_Func_UTSource_UTCollection_UTResult_(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, collectionSelector : @escaping (UTSource, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (UTSource, UTCollection) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTSource,UTCollection,UTResult>(resultSelector);
        return try SelectMany(source: source, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
    // System.Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,TResult>)
// docid: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
    /**
    Projects each element of a sequence into a new form by incorporating the element's index.

    - Parameter source: A sequence of values to invoke a transform function on.
    - Parameter selector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    - Returns: An  whose elements are the result of invoking the transform function on each element of .

    */
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_3<UTSource,Swift.Int32,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___Select_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource, Swift.Int32) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<UTSource,Swift.Int32,UTResult>(selector);
        return try Select(source: source, selector: del_selector);
    }
    // System.Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TResult>)
// docid: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Projects each element of a sequence into a new form.

    - Parameter source: A sequence of values to invoke a transform function on.
    - Parameter selector: A transform function to apply to each element.
    - Returns: An  whose elements are the result of invoking the transform function on each element of .

    */
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___Select_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTResult_(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<UTSource,UTResult>(selector);
        return try Select(source: source, selector: del_selector);
    }
    // bool SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.

    - Parameter first: An  to compare to .
    - Parameter second: An  to compare to the first sequence.
    - Returns: 
         if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__SequenceEqual_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Determines whether two sequences are equal by comparing their elements by using a specified .

    - Parameter first: An  to compare to .
    - Parameter second: An  to compare to the first sequence.
    - Parameter comparer: An  to use to compare elements.
    - Returns: 
         if the two source sequences are of equal length and their corresponding elements compare equal according to ; otherwise, .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_bool__SequenceEqual_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.

    - Parameter source: An  to return the single element of.
    - Returns: The single element of the input sequence, or () if the sequence contains no elements.

    */
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__SingleOrDefault_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
// docid: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__SingleOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.

    - Parameter source: An  to return a single element from.
    - Parameter predicate: A function to test an element for a condition.
    - Returns: The single element of the input sequence that satisfies the condition, or () if no such element is found.

    */
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__SingleOrDefault_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try SingleOrDefault(source: source, predicate: del_predicate);
    }
    // TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>, TSource)
// docid: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__SingleOrDefault_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool, defaultValue : UTSource) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try SingleOrDefault(source: source, predicate: del_predicate, defaultValue: defaultValue);
    }
    // TSource Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.

    - Parameter source: An  to return the single element of.
    - Returns: The single element of the input sequence.

    */
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Single_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.

    - Parameter source: An  to return a single element from.
    - Parameter predicate: A function to test an element for a condition.
    - Returns: The single element of the input sequence that satisfies a condition.

    */
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSource__Single_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // delegate closure overload
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> UTSource {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Single(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> SkipLast<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    /**
    Returns a new enumerable collection that contains the elements from  with the last  elements of the source collection omitted.

    - Parameter source: An enumerable collection instance.
    - Parameter count: The number of elements to omit from the end of the collection.
    - Returns: A new enumerable collection that contains the elements from  minus  elements from the end of the collection.

    */
    public static func SkipLast<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___SkipLast_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.

    - Parameter source: An  to return elements from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by .

    */
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___SkipWhile_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try SkipWhile(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,bool>)
// docid: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    /**
    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.

    - Parameter source: An  to return elements from.
    - Parameter predicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    - Returns: An  that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by .

    */
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_3<UTSource,Swift.Int32,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___SkipWhile_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_predicate = try dotnet.System.Func_3<UTSource,Swift.Int32,Swift.Bool>(predicate);
        return try SkipWhile(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    /**
    Bypasses a specified number of elements in a sequence and then returns the remaining elements.

    - Parameter source: An  to return elements from.
    - Parameter count: The number of elements to skip before returning the remaining elements.
    - Returns: An  that contains the elements that occur after the specified index in the input sequence.

    */
    public static func Skip<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Skip_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Decimal Sum(System.Collections.Generic.IEnumerable<System.Decimal>)
// docid: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Sum_0__1__System_Collections_Generic_IEnumerable_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Sum(System.Collections.Generic.IEnumerable<System.Double>)
// docid: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Sum_0__1__System_Collections_Generic_IEnumerable_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Sum(System.Collections.Generic.IEnumerable<System.Int32>)
// docid: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Sum_0__1__System_Collections_Generic_IEnumerable_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Sum(System.Collections.Generic.IEnumerable<System.Int64>)
// docid: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__Sum_0__1__System_Collections_Generic_IEnumerable_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Sum(System.Collections.Generic.IEnumerable<System.Single>)
// docid: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Collections.Generic.IEnumerable_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Sum_0__1__System_Collections_Generic_IEnumerable_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
// docid: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    /**
    Computes the sum of the sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate a sum.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_Decimal__Sum_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Decimal_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<UTSource,dotnet.System.Decimal>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Double Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
// docid: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    /**
    Computes the sum of the sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate a sum.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f64__Sum_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Double>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Int32 Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
// docid: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    /**
    Computes the sum of the sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate a sum.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i32__Sum_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int32>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Int64 Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
// docid: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    /**
    Computes the sum of the sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate a sum.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_i64__Sum_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Int64>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Single Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
// docid: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    /**
    Computes the sum of the sequence of  values that are obtained by invoking a transform function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate a sum.
    - Parameter selector: A transform function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : dotnet.System.Func_2<UTSource,Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_f32__Sum_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_f32_(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // delegate closure overload
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, selector : @escaping (UTSource) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<UTSource,Swift.Float>(selector);
        return try Sum(source: source, selector: del_selector);
    }
    // System.Collections.Generic.IEnumerable<TSource> TakeLast<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    /**
    Returns a new enumerable collection that contains the last  elements from .

    - Parameter source: An enumerable collection instance.
    - Parameter count: The number of elements to take from the end of the collection.
    - Returns: A new enumerable collection that contains the last  elements from .

    */
    public static func TakeLast<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___TakeLast_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Returns elements from a sequence as long as a specified condition is true.

    - Parameter source: A sequence to return elements from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains the elements from the input sequence that occur before the element at which the test no longer passes.

    */
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___TakeWhile_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try TakeWhile(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,bool>)
// docid: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    /**
    Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    - Returns: An  that contains elements from the input sequence that occur before the element at which the test no longer passes.

    */
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_3<UTSource,Swift.Int32,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___TakeWhile_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_predicate = try dotnet.System.Func_3<UTSource,Swift.Int32,Swift.Bool>(predicate);
        return try TakeWhile(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
// docid: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    /**
    Returns a specified number of contiguous elements from the start of a sequence.

    - Parameter source: The sequence to return elements from.
    - Parameter count: The number of elements to return.
    - Returns: An  that contains the specified number of elements from the start of the input sequence.

    */
    public static func Take<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Take_1__2__System_Collections_Generic_IEnumerable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Range)
// docid: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Range)
    public static func Take<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, range : dotnet.System.Range) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Take_1__2__System_Collections_Generic_IEnumerable_UTSource__Range(UTSource.get_type_handle(), &__thrown, source.get_handle(), range.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
    /**
    Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___ThenByDescending_2__2__System_Linq_IOrderedEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenByDescending(source: source, keySelector: del_keySelector);
    }
    // System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___ThenByDescending_2__3__System_Linq_IOrderedEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenByDescending(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
    /**
    Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___ThenBy_2__2__System_Linq_IOrderedEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenBy(source: source, keySelector: del_keySelector);
    }
    // System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    /**
    Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_IOrderedEnumerable_UTSource___ThenBy_2__3__System_Linq_IOrderedEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ThenBy(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // TSource[] ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates an array from a .

    - Parameter source: An  to create an array from.
    - Returns: An array that contains the elements from the input sequence.

    */
    public static func ToArray<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System_Arr<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_UTSourceArray__ToArray_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<UTSource>(hndl : __return);
        }
    }
    // System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Creates a  from an  according to a specified key selector function.

    - Parameter source: An  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: A  that contains keys and values. The values within each group are in the same order as in .

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_Dictionary_UTKey_UTSource___ToDictionary_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToDictionary(source: source, keySelector: del_keySelector);
    }
    // System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a  from an  according to a specified key selector function and key comparer.

    - Parameter source: An  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains keys and values. The values within each group are in the same order as in .

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_Dictionary_UTKey_UTSource___ToDictionary_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToDictionary(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
// docid: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Creates a  from an  according to specified key selector and element selector functions.

    - Parameter source: An  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Returns: A  that contains values of type  selected from the input sequence.

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_Dictionary_UTKey_UTElement___ToDictionary_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a  from an  according to a specified key selector function, a comparer, and an element selector function.

    - Parameter source: An  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains values of type  selected from the input sequence.

    */
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_Dictionary_UTKey_UTElement___ToDictionary_3__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToDictionary<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToDictionary(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // System.Collections.Generic.HashSet<TSource> ToHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a  from an .

    - Parameter source: An  to create a  from.
    - Returns: A  that contains values of type TSource selected from the input sequence.

    */
    public static func ToHashSet<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.HashSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_HashSet_UTSource___ToHashSet_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.HashSet_1(hndl : __return);
        }
    }
    // System.Collections.Generic.HashSet<TSource> ToHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Creates a  from an  using the  to compare keys.

    - Parameter source: An  to create a  from.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains values of type  selected from the input sequence.

    */
    public static func ToHashSet<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Collections.Generic.HashSet_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_HashSet_UTSource___ToHashSet_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.HashSet_1(hndl : __return);
        }
    }
    // System.Collections.Generic.List<TSource> ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Creates a  from an .

    - Parameter source: The  to create a  from.
    - Returns: A  that contains elements from the input sequence.

    */
    public static func ToList<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.List_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_List_UTSource___ToList_1__1__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_1(hndl : __return);
        }
    }
    // System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    /**
    Creates a  from an  according to a specified key selector function.

    - Parameter source: The  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: A  that contains keys and values. The values within each group are in the same order as in .

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_ILookup_UTKey_UTSource___ToLookup_2__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToLookup(source: source, keySelector: del_keySelector);
    }
    // System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a  from an  according to a specified key selector function and key comparer.

    - Parameter source: The  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains keys and values. The values within each group are in the same order as in .

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_ILookup_UTKey_UTSource___ToLookup_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try ToLookup(source: source, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
// docid: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    /**
    Creates a  from an  according to specified key selector and element selector functions.

    - Parameter source: The  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Returns: A  that contains values of type  selected from the input sequence.

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_ILookup_UTKey_UTElement___ToLookup_3__3__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToLookup(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
    // System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Creates a  from an  according to a specified key selector function, a comparer and an element selector function.

    - Parameter source: The  to create a  from.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter elementSelector: A transform function to produce a result element value from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A  that contains values of type  selected from the input sequence.

    */
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, elementSelector : dotnet.System.Func_2<UTSource,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Linq_ILookup_UTKey_UTElement___ToLookup_3__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Func_UTSource_UTElement__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.ILookup_2(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ToLookup<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, elementSelector : @escaping (UTSource) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<UTSource,UTElement>(elementSelector);
        return try ToLookup(source: source, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
    // bool TryGetNonEnumeratedCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, ref System.Int32)
// docid: M:System.Linq.Enumerable.TryGetNonEnumeratedCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)
    public static func TryGetNonEnumeratedCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, count : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_count = count;
        let __return = System_Linq_Enumerable_bool__TryGetNonEnumeratedCount_1__2__System_Collections_Generic_IEnumerable_UTSource__outi32(UTSource.get_type_handle(), &__thrown, source.get_handle(), &_tmp_out_count);
        let _tmp2_count = _tmp_out_count;
            count = _tmp2_count;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> UnionBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
// docid: M:System.Linq.Enumerable.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    public static func UnionBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___UnionBy_2__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UnionBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try UnionBy(first: first, second: second, keySelector: del_keySelector);
    }
    // System.Collections.Generic.IEnumerable<TSource> UnionBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Enumerable.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    public static func UnionBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Func_2<UTSource,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___UnionBy_2__4__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_UTKey__System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UnionBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : @escaping (UTSource) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_keySelector = try dotnet.System.Func_2<UTSource,UTKey>(keySelector);
        return try UnionBy(first: first, second: second, keySelector: del_keySelector, comparer: comparer);
    }
    // System.Collections.Generic.IEnumerable<TSource> Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Produces the set union of two sequences by using the default equality comparer.

    - Parameter first: An  whose distinct elements form the first set for the union.
    - Parameter second: An  whose distinct elements form the second set for the union.
    - Returns: An  that contains the elements from both input sequences, excluding duplicates.

    */
    public static func Union<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Union_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set union of two sequences by using a specified .

    - Parameter first: An  whose distinct elements form the first set for the union.
    - Parameter second: An  whose distinct elements form the second set for the union.
    - Parameter comparer: The  to compare values.
    - Returns: An  that contains the elements from both input sequences, excluding duplicates.

    */
    public static func Union<UTSource : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Union_1__3__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TSource> Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
// docid: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    /**
    Filters a sequence of values based on a predicate.

    - Parameter source: An  to filter.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains elements from the input sequence that satisfy the condition.

    */
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_2<UTSource,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Where_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_predicate = try dotnet.System.Func_2<UTSource,Swift.Bool>(predicate);
        return try Where(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<TSource> Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,bool>)
// docid: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    /**
    Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.

    - Parameter source: An  to filter.
    - Parameter predicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    - Returns: An  that contains elements from the input sequence that satisfy the condition.

    */
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : dotnet.System.Func_3<UTSource,Swift.Int32,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTSource___Where_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_i32_bool_(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, predicate : @escaping (UTSource, Swift.Int32) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTSource> {
        let del_predicate = try dotnet.System.Func_3<UTSource,Swift.Int32,Swift.Bool>(predicate);
        return try Where(source: source, predicate: del_predicate);
    }
    // System.Collections.Generic.IEnumerable<System.ValueTuple<TFirst,TSecond>> Zip<TFirst, TSecond>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>)
// docid: M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
    /**
    Produces a sequence of tuples with elements from the two specified sequences.

    - Parameter first: The first sequence to merge.
    - Parameter second: The second sequence to merge.
    - Returns: A sequence of tuples with elements taken from the first and second sequences, in that order.

    */
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTFirst>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_2<UTFirst,UTSecond>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_System_System_ValueTuple_UTFirst_UTSecond____Zip_2__2__System_Collections_Generic_IEnumerable_UTFirst__System_Collections_Generic_IEnumerable_UTSecond_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), &__thrown, first.get_handle(), second.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.ValueTuple<TFirst,TSecond,TThird>> Zip<TFirst, TSecond, TThird>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Collections.Generic.IEnumerable<TThird>)
// docid: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTThird : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTFirst>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, third : dotnet.System.Collections.Generic.IEnumerable_1<UTThird>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_3<UTFirst,UTSecond,UTThird>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_System_System_ValueTuple_UTFirst_UTSecond_UTThird____Zip_3__3__System_Collections_Generic_IEnumerable_UTFirst__System_Collections_Generic_IEnumerable_UTSecond__System_Collections_Generic_IEnumerable_UTThird_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), UTThird.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), third.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst,TSecond,TResult>)
// docid: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
    /**
    Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.

    - Parameter first: The first sequence to merge.
    - Parameter second: The second sequence to merge.
    - Parameter resultSelector: A function that specifies how to merge the elements from the two sequences.
    - Returns: An  that contains merged elements of two input sequences.

    */
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTFirst>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : dotnet.System.Func_3<UTFirst,UTSecond,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Enumerable_System_Collections_Generic_IEnumerable_UTResult___Zip_3__3__System_Collections_Generic_IEnumerable_UTFirst__System_Collections_Generic_IEnumerable_UTSecond__System_Func_UTFirst_UTSecond_UTResult_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), UTResult.get_type_handle(), &__thrown, first.get_handle(), second.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(first : dotnet.System.Collections.Generic.IEnumerable_1<UTFirst>, second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : @escaping (UTFirst, UTSecond) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<UTFirst,UTSecond,UTResult>(resultSelector);
        return try Zip(first: first, second: second, resultSelector: del_resultSelector);
    }
} // Enumerable


// type: System.Linq.IGrouping`2
    /**
    Represents a collection of objects that have a common key.

    */
open class IGrouping_2<TKey : SGBridgeGenericValue,TElement : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Linq_IGrouping_2
{
    public typealias TKey_IGrouping_2 = TKey;
    public typealias TElement_IGrouping_2 = TElement;
    public typealias T_IEnumerable_1 = TElement;
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IGrouping_2_get_type_handle(TKey.get_type_handle(),TElement.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] TKey get_Key()
// docid: M:System.Linq.IGrouping`2.get_Key
    open func get_Key() throws -> TKey {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IGrouping_2_TKey__get_Key_0__0(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TKey(gval: __return);
        }
    }
} // IGrouping_2


// type: System.Linq.ILookup`2
    /**
    Defines an indexer, size property, and Boolean search method for data structures that map keys to  sequences of values.

    */
open class ILookup_2<TKey : SGBridgeGenericValue,TElement : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Linq_ILookup_2
{
    public typealias TKey_ILookup_2 = TKey;
    public typealias TElement_ILookup_2 = TElement;
    public typealias T_IEnumerable_1 = dotnet.System.Linq.IGrouping_2<TKey,TElement>;
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_ILookup_2_get_type_handle(TKey.get_type_handle(),TElement.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool Contains(TKey)
// docid: M:System.Linq.ILookup`2.Contains(`0)
    /**
    Determines whether a specified key exists in the .

    - Parameter key: The key to search for in the .
    - Returns: 
         if  is in the ; otherwise, .

    */
    open func Contains(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ILookup_2_bool__Contains_0__1__TKey(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Linq.ILookup`2.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ILookup_2_i32__get_Count_0__0(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TElement> get_Item(TKey)
// docid: M:System.Linq.ILookup`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : TKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<TElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_ILookup_2_System_Collections_Generic_IEnumerable_TElement___get_Item_0__1__TKey(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // ILookup_2


// type: System.Linq.IOrderedEnumerable`1
    /**
    Represents a sorted sequence.

    */
open class IOrderedEnumerable_1<TElement : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Linq_IOrderedEnumerable_1
{
    public typealias TElement_IOrderedEnumerable_1 = TElement;
    public typealias T_IEnumerable_1 = TElement;
    open class func get_type_handle() -> TypeHandle {
        return System_Linq_IOrderedEnumerable_1_get_type_handle(TElement.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Linq.IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey>(System.Func<TElement,TKey>, System.Collections.Generic.IComparer<TKey>, bool)
// docid: M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)
    /**
    Performs a subsequent ordering on the elements of an  according to a key.

    - Parameter keySelector: The  used to extract the key for each element.
    - Parameter comparer: The  used to compare keys for placement in the returned sequence.
    - Parameter descending: 
         to sort the elements in descending order;  to sort the elements in ascending order.
    - Returns: An  whose elements are sorted according to a key.

    */
    open func CreateOrderedEnumerable<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TElement,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, descending : Bool) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_IOrderedEnumerable_1_System_Linq_IOrderedEnumerable_TElement___CreateOrderedEnumerable_1__3__System_Func_TElement_UTKey__System_Collections_Generic_IComparer_UTKey__bool(TElement.get_type_handle(), UTKey.get_type_handle(), &__thrown, self.get_handle(), keySelector.get_handle(), nil, Swift.Int32(descending ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateOrderedEnumerable<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TElement) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>, descending : Bool) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        let del_keySelector = try dotnet.System.Func_2<TElement,UTKey>(keySelector);
        return try CreateOrderedEnumerable(keySelector: del_keySelector, comparer: comparer, descending: descending);
    }
} // IOrderedEnumerable_1


// type: System.Linq.Lookup`2
    /**
    Represents a collection of keys each mapped to one or more values.

    */
open class Lookup_2<TKey : SGBridgeGenericValue,TElement : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_Lookup_2_get_type_handle(TKey.get_type_handle(),TElement.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult>(System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>)
// docid: M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
    /**
    Applies a transform function to each key and its associated values and returns the results.

    - Parameter resultSelector: A function to project a result value from each key and its associated values.
    - Returns: A collection that contains one value for each key/value collection pair in the .

    */
    open func ApplyResultSelector<UTResult : SGBridgeGenericValue>(resultSelector : dotnet.System.Func_3<TKey,dotnet.System.Collections.Generic.IEnumerable_1<TElement>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Lookup_2_System_Collections_Generic_IEnumerable_UTResult___ApplyResultSelector_1__1__System_Func_TKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_TElement__UTResult_(TKey.get_type_handle(), TElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func ApplyResultSelector<UTResult : SGBridgeGenericValue>(resultSelector : @escaping (TKey, dotnet.System.Collections.Generic.IEnumerable_1<TElement>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<TKey,dotnet.System.Collections.Generic.IEnumerable_1<TElement>,UTResult>(resultSelector);
        return try ApplyResultSelector(resultSelector: del_resultSelector);
    }
    // bool Contains(TKey)
// docid: M:System.Linq.Lookup`2.Contains(`0)
    /**
    Determines whether a specified key is in the .

    - Parameter key: The key to find in the .
    - Returns: 
         if  is in the ; otherwise, .

    */
    open /* method final */ func Contains(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Lookup_2_bool__Contains_0__1__TKey(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>> GetEnumerator()
// docid: M:System.Linq.Lookup`2.GetEnumerator
    /**
    Returns a generic enumerator that iterates through the .

    - Returns: An enumerator for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Linq.IGrouping_2<TKey,TElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Lookup_2_System_Collections_Generic_IEnumerator_System_Linq_System_Linq_IGrouping_TKey_TElement____GetEnumerator_0__0(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Linq.Lookup`2.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Lookup_2_i32__get_Count_0__0(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TElement> get_Item(TKey)
// docid: M:System.Linq.Lookup`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : TKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<TElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Lookup_2_System_Collections_Generic_IEnumerable_TElement___get_Item_0__1__TKey(TKey.get_type_handle(), TElement.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    Gets the number of key/value collection pairs in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // Lookup_2


}


public protocol System_Linq_IGrouping_2
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == TElement_IGrouping_2
{
    associatedtype TKey_IGrouping_2 : SGBridgeGenericValue;
    associatedtype TElement_IGrouping_2;
}

public protocol System_Linq_ILookup_2
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == dotnet.System.Linq.IGrouping_2<TKey_ILookup_2,TElement_ILookup_2>
{
    associatedtype TKey_ILookup_2 : SGBridgeGenericValue;
    associatedtype TElement_ILookup_2 : SGBridgeGenericValue;
}

public protocol System_Linq_IOrderedEnumerable_1
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == TElement_IOrderedEnumerable_1
{
    associatedtype TElement_IOrderedEnumerable_1;
}

// EXTENSION METHOD TSource Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TSource,TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Aggregate(func_ : dotnet.System.Func_3<T,T,T>) throws -> T {
        return try dotnet.System.Linq.Enumerable.Aggregate(source: self, func_: func_);
    }
    // delegate closure overload
    public func Aggregate(func_ : @escaping (T, T) throws -> T) throws -> T {
        let del_func_ = try dotnet.System.Func_3<T,T,T>(func_);
        return try dotnet.System.Linq.Enumerable.Aggregate(source: self, func_: del_func_);
    }
}

// EXTENSION METHOD TAccumulate Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>) throws -> UTAccumulate {
        return try dotnet.System.Linq.Enumerable.Aggregate(source: self, seed: seed, func_: func_);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : @escaping (UTAccumulate, T) throws -> UTAccumulate) throws -> UTAccumulate {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>(func_);
        return try dotnet.System.Linq.Enumerable.Aggregate(source: self, seed: seed, func_: del_func_);
    }
}

// EXTENSION METHOD TResult Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate,TSource,TAccumulate>, System.Func<TAccumulate,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>, resultSelector : dotnet.System.Func_2<UTAccumulate,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.Enumerable.Aggregate(source: self, seed: seed, func_: func_, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : @escaping (UTAccumulate, T) throws -> UTAccumulate, resultSelector : @escaping (UTAccumulate) throws -> UTResult) throws -> UTResult {
        let del_func_ = try dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>(func_);
        let del_resultSelector = try dotnet.System.Func_2<UTAccumulate,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.Aggregate(source: self, seed: seed, func_: del_func_, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD bool All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func All(predicate : dotnet.System.Func_2<T,Bool>) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.All(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func All(predicate : @escaping (T) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.All(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD bool Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Any_() throws -> Bool {
        return try dotnet.System.Linq.Enumerable.Any_(source: self);
    }
}

// EXTENSION METHOD bool Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Any_(predicate : dotnet.System.Func_2<T,Bool>) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.Any_(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Any_(predicate : @escaping (T) throws -> Bool) throws -> Bool {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.Any_(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Append(element : T) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Append(source: self, element: element);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func AsEnumerable() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.AsEnumerable(source: self);
    }
}

// EXTENSION METHOD System.Decimal Average(System.Collections.Generic.IEnumerable<System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average() throws -> dotnet.System.Decimal where T == dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Collections.Generic.IEnumerable<System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average() throws -> Swift.Double where T == Swift.Double {
        return try dotnet.System.Linq.Enumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Collections.Generic.IEnumerable<System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average() throws -> Swift.Double where T == Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Collections.Generic.IEnumerable<System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average() throws -> Swift.Double where T == Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Single Average(System.Collections.Generic.IEnumerable<System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average() throws -> Swift.Float where T == Swift.Float {
        return try dotnet.System.Linq.Enumerable.Average(source: self);
    }
}

// EXTENSION METHOD System.Decimal Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average(selector : dotnet.System.Func_2<T,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (T) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<T,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average(selector : dotnet.System.Func_2<T,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (T) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<T,Swift.Double>(selector);
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average(selector : dotnet.System.Func_2<T,Swift.Int32>) throws -> Swift.Double {
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (T) throws -> Swift.Int32) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int32>(selector);
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average(selector : dotnet.System.Func_2<T,Swift.Int64>) throws -> Swift.Double {
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (T) throws -> Swift.Int64) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int64>(selector);
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Average(selector : dotnet.System.Func_2<T,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: selector);
    }
    // delegate closure overload
    public func Average(selector : @escaping (T) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<T,Swift.Float>(selector);
        return try dotnet.System.Linq.Enumerable.Average(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Cast<TResult>(System.Collections.IEnumerable)
// TODO COPE extension method (unused generic param) System.Collections.Generic.IEnumerable<TResult> Cast<TResult>(System.Collections.IEnumerable)

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource[]> Chunk<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Chunk(size : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System_Arr<T>> {
        return try dotnet.System.Linq.Enumerable.Chunk(source: self, size: size);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Concat(second : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Concat(first: self, second: second);
    }
}

// EXTENSION METHOD bool Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Contains(value : T) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.Contains(source: self, value: value);
    }
}

// EXTENSION METHOD bool Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Contains(value : T, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.Contains(source: self, value: value, comparer: comparer);
    }
}

// EXTENSION METHOD System.Int32 Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Count() throws -> Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Count(source: self);
    }
}

// EXTENSION METHOD System.Int32 Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Count(predicate : dotnet.System.Func_2<T,Bool>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Count(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Count(predicate : @escaping (T) throws -> Bool) throws -> Swift.Int32 {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.Count(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DefaultIfEmpty() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.DefaultIfEmpty(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DefaultIfEmpty(defaultValue : T) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.DefaultIfEmpty(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DistinctBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.DistinctBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func DistinctBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.DistinctBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DistinctBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.DistinctBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func DistinctBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.DistinctBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Distinct() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Distinct(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Distinct(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Distinct(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD TSource ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Index)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ElementAtOrDefault(index : dotnet.System.Index) throws -> T {
        return try dotnet.System.Linq.Enumerable.ElementAtOrDefault(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ElementAtOrDefault(index : Swift.Int32) throws -> T {
        return try dotnet.System.Linq.Enumerable.ElementAtOrDefault(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Index)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ElementAt(index : dotnet.System.Index) throws -> T {
        return try dotnet.System.Linq.Enumerable.ElementAt(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ElementAt(index : Swift.Int32) throws -> T {
        return try dotnet.System.Linq.Enumerable.ElementAt(source: self, index: index);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> ExceptBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ExceptBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.ExceptBy(first: self, second: second, keySelector: keySelector);
    }
    // delegate closure overload
    public func ExceptBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ExceptBy(first: self, second: second, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> ExceptBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ExceptBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.ExceptBy(first: self, second: second, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ExceptBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ExceptBy(first: self, second: second, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Except(second : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Except(first: self, second: second);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Except(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Except(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func FirstOrDefault() throws -> T {
        return try dotnet.System.Linq.Enumerable.FirstOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func FirstOrDefault(defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Enumerable.FirstOrDefault(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func FirstOrDefault(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.Enumerable.FirstOrDefault(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func FirstOrDefault(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.FirstOrDefault(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func FirstOrDefault(predicate : dotnet.System.Func_2<T,Bool>, defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Enumerable.FirstOrDefault(source: self, predicate: predicate, defaultValue: defaultValue);
    }
    // delegate closure overload
    public func FirstOrDefault(predicate : @escaping (T) throws -> Bool, defaultValue : T) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.FirstOrDefault(source: self, predicate: del_predicate, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource First<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func First() throws -> T {
        return try dotnet.System.Linq.Enumerable.First(source: self);
    }
}

// EXTENSION METHOD TSource First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func First(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.Enumerable.First(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func First(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.First(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,T>> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,T>> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,T>> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,T>> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<T>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<T>,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<T>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<T>,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>, resultSelector : dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement, resultSelector : @escaping (UTKey, dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        let del_resultSelector = try dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.GroupBy(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<T,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<T,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (T) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (T, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<T,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<T,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<T,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<T,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (T) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (T, dotnet.System.Collections.Generic.IEnumerable_1<UTInner>) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<T,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<T,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.GroupJoin(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> IntersectBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func IntersectBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.IntersectBy(first: self, second: second, keySelector: keySelector);
    }
    // delegate closure overload
    public func IntersectBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.IntersectBy(first: self, second: second, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> IntersectBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func IntersectBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.IntersectBy(first: self, second: second, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func IntersectBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.IntersectBy(first: self, second: second, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Intersect(second : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Intersect(first: self, second: second);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Intersect(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Intersect(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<T,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<T,UTInner,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (T) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (T, UTInner) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<T,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<T,UTInner,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.Join(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter,TKey>, System.Func<TInner,TKey>, System.Func<TOuter,TInner,TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Func_2<T,UTKey>, innerKeySelector : dotnet.System.Func_2<UTInner,UTKey>, resultSelector : dotnet.System.Func_3<T,UTInner,UTResult>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
    // delegate closure overload
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : @escaping (T) throws -> UTKey, innerKeySelector : @escaping (UTInner) throws -> UTKey, resultSelector : @escaping (T, UTInner) throws -> UTResult, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_outerKeySelector = try dotnet.System.Func_2<T,UTKey>(outerKeySelector);
        let del_innerKeySelector = try dotnet.System.Func_2<UTInner,UTKey>(innerKeySelector);
        let del_resultSelector = try dotnet.System.Func_3<T,UTInner,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.Join(outer: self, inner: inner, outerKeySelector: del_outerKeySelector, innerKeySelector: del_innerKeySelector, resultSelector: del_resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func LastOrDefault() throws -> T {
        return try dotnet.System.Linq.Enumerable.LastOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func LastOrDefault(defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Enumerable.LastOrDefault(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func LastOrDefault(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.Enumerable.LastOrDefault(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func LastOrDefault(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.LastOrDefault(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func LastOrDefault(predicate : dotnet.System.Func_2<T,Bool>, defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Enumerable.LastOrDefault(source: self, predicate: predicate, defaultValue: defaultValue);
    }
    // delegate closure overload
    public func LastOrDefault(predicate : @escaping (T) throws -> Bool, defaultValue : T) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.LastOrDefault(source: self, predicate: del_predicate, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Last() throws -> T {
        return try dotnet.System.Linq.Enumerable.Last(source: self);
    }
}

// EXTENSION METHOD TSource Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Last(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.Enumerable.Last(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Last(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.Last(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Int64 LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func LongCount() throws -> Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.LongCount(source: self);
    }
}

// EXTENSION METHOD System.Int64 LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func LongCount(predicate : dotnet.System.Func_2<T,Bool>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.LongCount(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func LongCount(predicate : @escaping (T) throws -> Bool) throws -> Swift.Int64 {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.LongCount(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Decimal Max(System.Collections.Generic.IEnumerable<System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max() throws -> dotnet.System.Decimal where T == dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Double Max(System.Collections.Generic.IEnumerable<System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max() throws -> Swift.Double where T == Swift.Double {
        return try dotnet.System.Linq.Enumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Int32 Max(System.Collections.Generic.IEnumerable<System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max() throws -> Swift.Int32 where T == Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Int64 Max(System.Collections.Generic.IEnumerable<System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max() throws -> Swift.Int64 where T == Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Max(source: self);
    }
}

// EXTENSION METHOD System.Single Max(System.Collections.Generic.IEnumerable<System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max() throws -> Swift.Float where T == Swift.Float {
        return try dotnet.System.Linq.Enumerable.Max(source: self);
    }
}

// EXTENSION METHOD TSource MaxBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func MaxBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> T {
        return try dotnet.System.Linq.Enumerable.MaxBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func MaxBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> T {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.MaxBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD TSource MaxBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func MaxBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> T {
        return try dotnet.System.Linq.Enumerable.MaxBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func MaxBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> T {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.MaxBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max() throws -> T {
        return try dotnet.System.Linq.Enumerable.Max(source: self);
    }
}

// EXTENSION METHOD TSource Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> T {
        return try dotnet.System.Linq.Enumerable.Max(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD System.Decimal Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max(selector : dotnet.System.Func_2<T,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (T) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<T,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max(selector : dotnet.System.Func_2<T,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (T) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<T,Swift.Double>(selector);
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int32 Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max(selector : dotnet.System.Func_2<T,Swift.Int32>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (T) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int32>(selector);
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int64 Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max(selector : dotnet.System.Func_2<T,Swift.Int64>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (T) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int64>(selector);
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max(selector : dotnet.System.Func_2<T,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max(selector : @escaping (T) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<T,Swift.Float>(selector);
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD TResult Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Max<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<T,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: selector);
    }
    // delegate closure overload
    public func Max<UTResult : SGBridgeGenericValue>(selector : @escaping (T) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<T,UTResult>(selector);
        return try dotnet.System.Linq.Enumerable.Max(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Decimal Min(System.Collections.Generic.IEnumerable<System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min() throws -> dotnet.System.Decimal where T == dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Double Min(System.Collections.Generic.IEnumerable<System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min() throws -> Swift.Double where T == Swift.Double {
        return try dotnet.System.Linq.Enumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Int32 Min(System.Collections.Generic.IEnumerable<System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min() throws -> Swift.Int32 where T == Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Int64 Min(System.Collections.Generic.IEnumerable<System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min() throws -> Swift.Int64 where T == Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Min(source: self);
    }
}

// EXTENSION METHOD System.Single Min(System.Collections.Generic.IEnumerable<System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min() throws -> Swift.Float where T == Swift.Float {
        return try dotnet.System.Linq.Enumerable.Min(source: self);
    }
}

// EXTENSION METHOD TSource MinBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func MinBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> T {
        return try dotnet.System.Linq.Enumerable.MinBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func MinBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> T {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.MinBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD TSource MinBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func MinBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> T {
        return try dotnet.System.Linq.Enumerable.MinBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func MinBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> T {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.MinBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min() throws -> T {
        return try dotnet.System.Linq.Enumerable.Min(source: self);
    }
}

// EXTENSION METHOD TSource Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> T {
        return try dotnet.System.Linq.Enumerable.Min(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD System.Decimal Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min(selector : dotnet.System.Func_2<T,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (T) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<T,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min(selector : dotnet.System.Func_2<T,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (T) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<T,Swift.Double>(selector);
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int32 Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min(selector : dotnet.System.Func_2<T,Swift.Int32>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (T) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int32>(selector);
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int64 Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min(selector : dotnet.System.Func_2<T,Swift.Int64>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (T) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int64>(selector);
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min(selector : dotnet.System.Func_2<T,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min(selector : @escaping (T) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<T,Swift.Float>(selector);
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD TResult Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Min<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<T,UTResult>) throws -> UTResult {
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: selector);
    }
    // delegate closure overload
    public func Min<UTResult : SGBridgeGenericValue>(selector : @escaping (T) throws -> UTResult) throws -> UTResult {
        let del_selector = try dotnet.System.Func_2<T,UTResult>(selector);
        return try dotnet.System.Linq.Enumerable.Min(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> OfType<TResult>(System.Collections.IEnumerable)
// TODO COPE extension method (unused generic param) System.Collections.Generic.IEnumerable<TResult> OfType<TResult>(System.Collections.IEnumerable)

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.OrderByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.OrderByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.OrderByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.OrderByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.OrderBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.OrderBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.OrderBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.OrderBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Prepend(element : T) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Prepend(source: self, element: element);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Reverse() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Reverse(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, selector: selector);
    }
    // delegate closure overload
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : @escaping (T) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_3<T,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, selector: selector);
    }
    // delegate closure overload
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : @escaping (T, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<T,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>(selector);
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<T,UTCollection,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : @escaping (T) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (T, UTCollection) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<T,UTCollection,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource,TCollection,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Func_3<T,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>, resultSelector : dotnet.System.Func_3<T,UTCollection,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : @escaping (T, Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>, resultSelector : @escaping (T, UTCollection) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_collectionSelector = try dotnet.System.Func_3<T,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>(collectionSelector);
        let del_resultSelector = try dotnet.System.Func_3<T,UTCollection,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.SelectMany(source: self, collectionSelector: del_collectionSelector, resultSelector: del_resultSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_3<T,Swift.Int32,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.Select(source: self, selector: selector);
    }
    // delegate closure overload
    public func Select<UTResult : SGBridgeGenericValue>(selector : @escaping (T, Swift.Int32) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_3<T,Swift.Int32,UTResult>(selector);
        return try dotnet.System.Linq.Enumerable.Select(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Func_2<T,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.Select(source: self, selector: selector);
    }
    // delegate closure overload
    public func Select<UTResult : SGBridgeGenericValue>(selector : @escaping (T) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_selector = try dotnet.System.Func_2<T,UTResult>(selector);
        return try dotnet.System.Linq.Enumerable.Select(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SequenceEqual(second : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.SequenceEqual(first: self, second: second);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SequenceEqual(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.SequenceEqual(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SingleOrDefault() throws -> T {
        return try dotnet.System.Linq.Enumerable.SingleOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SingleOrDefault(defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Enumerable.SingleOrDefault(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SingleOrDefault(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.Enumerable.SingleOrDefault(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func SingleOrDefault(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.SingleOrDefault(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>, TSource)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SingleOrDefault(predicate : dotnet.System.Func_2<T,Bool>, defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Enumerable.SingleOrDefault(source: self, predicate: predicate, defaultValue: defaultValue);
    }
    // delegate closure overload
    public func SingleOrDefault(predicate : @escaping (T) throws -> Bool, defaultValue : T) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.SingleOrDefault(source: self, predicate: del_predicate, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Single() throws -> T {
        return try dotnet.System.Linq.Enumerable.Single(source: self);
    }
}

// EXTENSION METHOD TSource Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Single(predicate : dotnet.System.Func_2<T,Bool>) throws -> T {
        return try dotnet.System.Linq.Enumerable.Single(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Single(predicate : @escaping (T) throws -> Bool) throws -> T {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.Single(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> SkipLast<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SkipLast(count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.SkipLast(source: self, count: count);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SkipWhile(predicate : dotnet.System.Func_2<T,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.SkipWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func SkipWhile(predicate : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.SkipWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func SkipWhile(predicate : dotnet.System.Func_3<T,Swift.Int32,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.SkipWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func SkipWhile(predicate : @escaping (T, Swift.Int32) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_3<T,Swift.Int32,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.SkipWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Skip(count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Skip(source: self, count: count);
    }
}

// EXTENSION METHOD System.Decimal Sum(System.Collections.Generic.IEnumerable<System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum() throws -> dotnet.System.Decimal where T == dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Double Sum(System.Collections.Generic.IEnumerable<System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum() throws -> Swift.Double where T == Swift.Double {
        return try dotnet.System.Linq.Enumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Int32 Sum(System.Collections.Generic.IEnumerable<System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum() throws -> Swift.Int32 where T == Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Int64 Sum(System.Collections.Generic.IEnumerable<System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum() throws -> Swift.Int64 where T == Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Single Sum(System.Collections.Generic.IEnumerable<System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum() throws -> Swift.Float where T == Swift.Float {
        return try dotnet.System.Linq.Enumerable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Decimal Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Decimal>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum(selector : dotnet.System.Func_2<T,dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (T) throws -> dotnet.System.Decimal) throws -> dotnet.System.Decimal {
        let del_selector = try dotnet.System.Func_2<T,dotnet.System.Decimal>(selector);
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Double Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Double>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum(selector : dotnet.System.Func_2<T,Swift.Double>) throws -> Swift.Double {
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (T) throws -> Swift.Double) throws -> Swift.Double {
        let del_selector = try dotnet.System.Func_2<T,Swift.Double>(selector);
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int32 Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum(selector : dotnet.System.Func_2<T,Swift.Int32>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (T) throws -> Swift.Int32) throws -> Swift.Int32 {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int32>(selector);
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Int64 Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int64>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum(selector : dotnet.System.Func_2<T,Swift.Int64>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (T) throws -> Swift.Int64) throws -> Swift.Int64 {
        let del_selector = try dotnet.System.Func_2<T,Swift.Int64>(selector);
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Single Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Single>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Sum(selector : dotnet.System.Func_2<T,Swift.Float>) throws -> Swift.Float {
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: selector);
    }
    // delegate closure overload
    public func Sum(selector : @escaping (T) throws -> Swift.Float) throws -> Swift.Float {
        let del_selector = try dotnet.System.Func_2<T,Swift.Float>(selector);
        return try dotnet.System.Linq.Enumerable.Sum(source: self, selector: del_selector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> TakeLast<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func TakeLast(count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.TakeLast(source: self, count: count);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func TakeWhile(predicate : dotnet.System.Func_2<T,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.TakeWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func TakeWhile(predicate : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.TakeWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func TakeWhile(predicate : dotnet.System.Func_3<T,Swift.Int32,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.TakeWhile(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func TakeWhile(predicate : @escaping (T, Swift.Int32) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_3<T,Swift.Int32,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.TakeWhile(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Take(count : Swift.Int32) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Take(source: self, count: count);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Range)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Take(range : dotnet.System.Range) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Take(source: self, range: range);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.IOrderedEnumerable_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TElement,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        return try dotnet.System.Linq.Enumerable.ThenByDescending(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TElement) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        let del_keySelector = try dotnet.System.Func_2<TElement,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ThenByDescending(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.IOrderedEnumerable_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TElement,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        return try dotnet.System.Linq.Enumerable.ThenByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TElement) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        let del_keySelector = try dotnet.System.Func_2<TElement,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ThenByDescending(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Linq.IOrderedEnumerable_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TElement,UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        return try dotnet.System.Linq.Enumerable.ThenBy(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TElement) throws -> UTKey) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        let del_keySelector = try dotnet.System.Func_2<TElement,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ThenBy(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.IOrderedEnumerable_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<TElement,UTKey>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        return try dotnet.System.Linq.Enumerable.ThenBy(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : @escaping (TElement) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedEnumerable_1<TElement> {
        let del_keySelector = try dotnet.System.Func_2<TElement,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ThenBy(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource[] ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToArray() throws -> dotnet.System_Arr<T> {
        return try dotnet.System.Linq.Enumerable.ToArray(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToDictionary<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.Dictionary_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.Enumerable.ToDictionary(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.HashSet<TSource> ToHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToHashSet() throws -> dotnet.System.Collections.Generic.HashSet_1<T> {
        return try dotnet.System.Linq.Enumerable.ToHashSet(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.HashSet<TSource> ToHashSet<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToHashSet(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Generic.HashSet_1<T> {
        return try dotnet.System.Linq.Enumerable.ToHashSet(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.List<TSource> ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToList() throws -> dotnet.System.Collections.Generic.List_1<T> {
        return try dotnet.System.Linq.Enumerable.ToList(source: self);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,T> {
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: keySelector);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Linq.ILookup_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TSource> ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,T> {
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector);
    }
}

// EXTENSION METHOD System.Linq.ILookup<TKey,TElement> ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Func<TSource,TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Func_2<T,UTKey>, elementSelector : dotnet.System.Func_2<T,UTElement>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
    // delegate closure overload
    public func ToLookup<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : @escaping (T) throws -> UTKey, elementSelector : @escaping (T) throws -> UTElement, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.ILookup_2<UTKey,UTElement> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        let del_elementSelector = try dotnet.System.Func_2<T,UTElement>(elementSelector);
        return try dotnet.System.Linq.Enumerable.ToLookup(source: self, keySelector: del_keySelector, elementSelector: del_elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD bool TryGetNonEnumeratedCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, ref System.Int32)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func TryGetNonEnumeratedCount(count : inout Swift.Int32) throws -> Bool {
        return try dotnet.System.Linq.Enumerable.TryGetNonEnumeratedCount(source: self, count: &count);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> UnionBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func UnionBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, keySelector : dotnet.System.Func_2<T,UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.UnionBy(first: self, second: second, keySelector: keySelector);
    }
    // delegate closure overload
    public func UnionBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, keySelector : @escaping (T) throws -> UTKey) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.UnionBy(first: self, second: second, keySelector: del_keySelector);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> UnionBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func UnionBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, keySelector : dotnet.System.Func_2<T,UTKey>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.UnionBy(first: self, second: second, keySelector: keySelector, comparer: comparer);
    }
    // delegate closure overload
    public func UnionBy<UTKey : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, keySelector : @escaping (T) throws -> UTKey, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_keySelector = try dotnet.System.Func_2<T,UTKey>(keySelector);
        return try dotnet.System.Linq.Enumerable.UnionBy(first: self, second: second, keySelector: del_keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Union(second : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Union(first: self, second: second);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Union(second : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Union(first: self, second: second, comparer: comparer);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Where(predicate : dotnet.System.Func_2<T,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Where(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (T) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_2<T,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.Where(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TSource> Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Int32,bool>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Where(predicate : dotnet.System.Func_3<T,Swift.Int32,Bool>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Linq.Enumerable.Where(source: self, predicate: predicate);
    }
    // delegate closure overload
    public func Where(predicate : @escaping (T, Swift.Int32) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        let del_predicate = try dotnet.System.Func_3<T,Swift.Int32,Swift.Bool>(predicate);
        return try dotnet.System.Linq.Enumerable.Where(source: self, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.ValueTuple<TFirst,TSecond>> Zip<TFirst, TSecond>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Zip<UTSecond : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_2<T,UTSecond>> {
        return try dotnet.System.Linq.Enumerable.Zip(first: self, second: second);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.ValueTuple<TFirst,TSecond,TThird>> Zip<TFirst, TSecond, TThird>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Collections.Generic.IEnumerable<TThird>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Zip<UTSecond : SGBridgeGenericValue,UTThird : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, third : dotnet.System.Collections.Generic.IEnumerable_1<UTThird>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.ValueTuple_3<T,UTSecond,UTThird>> {
        return try dotnet.System.Linq.Enumerable.Zip(first: self, second: second, third: third);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst,TSecond,TResult>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : dotnet.System.Func_3<T,UTSecond,UTResult>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        return try dotnet.System.Linq.Enumerable.Zip(first: self, second: second, resultSelector: resultSelector);
    }
    // delegate closure overload
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(second : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : @escaping (T, UTSecond) throws -> UTResult) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UTResult> {
        let del_resultSelector = try dotnet.System.Func_3<T,UTSecond,UTResult>(resultSelector);
        return try dotnet.System.Linq.Enumerable.Zip(first: self, second: second, resultSelector: del_resultSelector);
    }
}

