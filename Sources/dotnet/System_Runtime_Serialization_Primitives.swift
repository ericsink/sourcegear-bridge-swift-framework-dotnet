// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Runtime
// System.Runtime.Serialization
extension System.Runtime.Serialization {
// type: System.Runtime.Serialization.CollectionDataContractAttribute
    /**
    When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the  as valid, serializable collections.

    */
public final class CollectionDataContractAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_CollectionDataContractAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_CollectionDataContractAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsItemNameSetExplicitly()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsItemNameSetExplicitly
    public func get_IsItemNameSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsItemNameSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsKeyNameSetExplicitly()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsKeyNameSetExplicitly
    public func get_IsKeyNameSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsKeyNameSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNameSetExplicitly()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsNameSetExplicitly
    public func get_IsNameSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsNameSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNamespaceSetExplicitly()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsNamespaceSetExplicitly
    public func get_IsNamespaceSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsNamespaceSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReference()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsReference
    public func get_IsReference() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsReference_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReference(bool)
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.set_IsReference(System.Boolean)
    public func set_IsReference(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_CollectionDataContractAttribute_void__set_IsReference_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReferenceSetExplicitly()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsReferenceSetExplicitly
    public func get_IsReferenceSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsReferenceSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsValueNameSetExplicitly()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_IsValueNameSetExplicitly
    public func get_IsValueNameSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_bool__get_IsValueNameSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_ItemName()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_ItemName
    public func get_ItemName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_String__get_ItemName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ItemName(System.String)
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.set_ItemName(System.String)
    public func set_ItemName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_CollectionDataContractAttribute_void__set_ItemName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_KeyName()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_KeyName
    public func get_KeyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_String__get_KeyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KeyName(System.String)
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.set_KeyName(System.String)
    public func set_KeyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_CollectionDataContractAttribute_void__set_KeyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_CollectionDataContractAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_Namespace
    public func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.set_Namespace(System.String)
    public func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_CollectionDataContractAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ValueName()
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.get_ValueName
    public func get_ValueName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_CollectionDataContractAttribute_String__get_ValueName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ValueName(System.String)
// docid: M:System.Runtime.Serialization.CollectionDataContractAttribute.set_ValueName(System.String)
    public func set_ValueName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_CollectionDataContractAttribute_void__set_ValueName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsItemNameSetExplicitly : Bool {
        get {
            return try! get_IsItemNameSetExplicitly();
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsKeyNameSetExplicitly : Bool {
        get {
            return try! get_IsKeyNameSetExplicitly();
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsNameSetExplicitly : Bool {
        get {
            return try! get_IsNameSetExplicitly();
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsNamespaceSetExplicitly : Bool {
        get {
            return try! get_IsNamespaceSetExplicitly();
        }
    }
    /**
    Gets or sets a value that indicates whether to preserve object reference data.

    */
    public var IsReference : Bool {
        get {
            return try! get_IsReference();
        }
        set(v) {
            return try! set_IsReference(value: v);
        }
    }
    /**
    Gets whether reference has been explicitly set.

    */
    public var IsReferenceSetExplicitly : Bool {
        get {
            return try! get_IsReferenceSetExplicitly();
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsValueNameSetExplicitly : Bool {
        get {
            return try! get_IsValueNameSetExplicitly();
        }
    }
    /**
    Gets or sets a custom name for a collection element.

    */
    public var ItemName : Optional<dotnet.System.String> {
        get {
            return try! get_ItemName();
        }
        set(v) {
            return try! set_ItemName(value: v!);
        }
    }
    /**
    Gets or sets the custom name for a dictionary key name.

    */
    public var KeyName : Optional<dotnet.System.String> {
        get {
            return try! get_KeyName();
        }
        set(v) {
            return try! set_KeyName(value: v!);
        }
    }
    /**
    Gets or sets the data contract name for the collection type.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets the namespace for the data contract.

    */
    public var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
    /**
    Gets or sets the custom name for a dictionary value name.

    */
    public var ValueName : Optional<dotnet.System.String> {
        get {
            return try! get_ValueName();
        }
        set(v) {
            return try! set_ValueName(value: v!);
        }
    }
} // CollectionDataContractAttribute


// type: System.Runtime.Serialization.ContractNamespaceAttribute
    /**
    Specifies the CLR namespace and XML namespace of the data contract.

    */
public final class ContractNamespaceAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ContractNamespaceAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.Serialization.ContractNamespaceAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the supplied namespace.

    - Parameter contractNamespace: The namespace of the contract.
    */
    public init(contractNamespace : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_ContractNamespaceAttribute_ctor_0__1__String(&__thrown, contractNamespace.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ClrNamespace()
// docid: M:System.Runtime.Serialization.ContractNamespaceAttribute.get_ClrNamespace
    public func get_ClrNamespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ContractNamespaceAttribute_String__get_ClrNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ClrNamespace(System.String)
// docid: M:System.Runtime.Serialization.ContractNamespaceAttribute.set_ClrNamespace(System.String)
    public func set_ClrNamespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ContractNamespaceAttribute_void__set_ClrNamespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContractNamespace()
// docid: M:System.Runtime.Serialization.ContractNamespaceAttribute.get_ContractNamespace
    public func get_ContractNamespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ContractNamespaceAttribute_String__get_ContractNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the CLR namespace of the data contract type.

    */
    public var ClrNamespace : Optional<dotnet.System.String> {
        get {
            return try! get_ClrNamespace();
        }
        set(v) {
            return try! set_ClrNamespace(value: v!);
        }
    }
    /**
    Gets the namespace of the data contract members.

    */
    public var ContractNamespace : dotnet.System.String {
        get {
            return try! get_ContractNamespace();
        }
    }
} // ContractNamespaceAttribute


// type: System.Runtime.Serialization.DataContractAttribute
    /**
    Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the . To make their type serializable, type authors must define a data contract for their type.

    */
public final class DataContractAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_DataContractAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.DataContractAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsNameSetExplicitly()
// docid: M:System.Runtime.Serialization.DataContractAttribute.get_IsNameSetExplicitly
    public func get_IsNameSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractAttribute_bool__get_IsNameSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNamespaceSetExplicitly()
// docid: M:System.Runtime.Serialization.DataContractAttribute.get_IsNamespaceSetExplicitly
    public func get_IsNamespaceSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractAttribute_bool__get_IsNamespaceSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReference()
// docid: M:System.Runtime.Serialization.DataContractAttribute.get_IsReference
    public func get_IsReference() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractAttribute_bool__get_IsReference_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReference(bool)
// docid: M:System.Runtime.Serialization.DataContractAttribute.set_IsReference(System.Boolean)
    public func set_IsReference(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractAttribute_void__set_IsReference_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReferenceSetExplicitly()
// docid: M:System.Runtime.Serialization.DataContractAttribute.get_IsReferenceSetExplicitly
    public func get_IsReferenceSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractAttribute_bool__get_IsReferenceSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Runtime.Serialization.DataContractAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Runtime.Serialization.DataContractAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Runtime.Serialization.DataContractAttribute.get_Namespace
    public func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractAttribute_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Namespace(System.String)
// docid: M:System.Runtime.Serialization.DataContractAttribute.set_Namespace(System.String)
    public func set_Namespace(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractAttribute_void__set_Namespace_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsNameSetExplicitly : Bool {
        get {
            return try! get_IsNameSetExplicitly();
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsNamespaceSetExplicitly : Bool {
        get {
            return try! get_IsNamespaceSetExplicitly();
        }
    }
    /**
    Gets or sets a value that indicates whether to preserve object reference data.

    */
    public var IsReference : Bool {
        get {
            return try! get_IsReference();
        }
        set(v) {
            return try! set_IsReference(value: v);
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsReferenceSetExplicitly : Bool {
        get {
            return try! get_IsReferenceSetExplicitly();
        }
    }
    /**
    Gets or sets the name of the data contract for the type.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets the namespace for the data contract for the type.

    */
    public var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
        set(v) {
            return try! set_Namespace(value: v!);
        }
    }
} // DataContractAttribute


// type: System.Runtime.Serialization.DataMemberAttribute
    /**
    When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the .

    */
public final class DataMemberAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_DataMemberAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.DataMemberAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataMemberAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_EmitDefaultValue()
// docid: M:System.Runtime.Serialization.DataMemberAttribute.get_EmitDefaultValue
    public func get_EmitDefaultValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataMemberAttribute_bool__get_EmitDefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EmitDefaultValue(bool)
// docid: M:System.Runtime.Serialization.DataMemberAttribute.set_EmitDefaultValue(System.Boolean)
    public func set_EmitDefaultValue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataMemberAttribute_void__set_EmitDefaultValue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsNameSetExplicitly()
// docid: M:System.Runtime.Serialization.DataMemberAttribute.get_IsNameSetExplicitly
    public func get_IsNameSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataMemberAttribute_bool__get_IsNameSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsRequired()
// docid: M:System.Runtime.Serialization.DataMemberAttribute.get_IsRequired
    public func get_IsRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataMemberAttribute_bool__get_IsRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsRequired(bool)
// docid: M:System.Runtime.Serialization.DataMemberAttribute.set_IsRequired(System.Boolean)
    public func set_IsRequired(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataMemberAttribute_void__set_IsRequired_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Runtime.Serialization.DataMemberAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataMemberAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Runtime.Serialization.DataMemberAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataMemberAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.Runtime.Serialization.DataMemberAttribute.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataMemberAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:System.Runtime.Serialization.DataMemberAttribute.set_Order(System.Int32)
    public func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataMemberAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that specifies whether to serialize the default value for a field or property being serialized.

    */
    public var EmitDefaultValue : Bool {
        get {
            return try! get_EmitDefaultValue();
        }
        set(v) {
            return try! set_EmitDefaultValue(value: v);
        }
    }
    /**
    Gets whether  has been explicitly set.

    */
    public var IsNameSetExplicitly : Bool {
        get {
            return try! get_IsNameSetExplicitly();
        }
    }
    /**
    Gets or sets a value that instructs the serialization engine that the member must be present when reading or deserializing.

    */
    public var IsRequired : Bool {
        get {
            return try! get_IsRequired();
        }
        set(v) {
            return try! set_IsRequired(value: v);
        }
    }
    /**
    Gets or sets a data member name.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets the order of serialization and deserialization of a member.

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // DataMemberAttribute


// type: System.Runtime.Serialization.EnumMemberAttribute
    /**
    Specifies that the field is an enumeration member and should be serialized.

    */
public final class EnumMemberAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_EnumMemberAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.EnumMemberAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_EnumMemberAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsValueSetExplicitly()
// docid: M:System.Runtime.Serialization.EnumMemberAttribute.get_IsValueSetExplicitly
    public func get_IsValueSetExplicitly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_EnumMemberAttribute_bool__get_IsValueSetExplicitly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.Serialization.EnumMemberAttribute.get_Value
    public func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_EnumMemberAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Runtime.Serialization.EnumMemberAttribute.set_Value(System.String)
    public func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_EnumMemberAttribute_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets whether the  has been explicitly set.

    */
    public var IsValueSetExplicitly : Bool {
        get {
            return try! get_IsValueSetExplicitly();
        }
    }
    /**
    Gets or sets the value associated with the enumeration member the attribute is applied to.

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // EnumMemberAttribute


// type: System.Runtime.Serialization.ISerializationSurrogateProvider
    /**
    Provides the methods needed to construct a serialization surrogate that extends the . A serialization surrogate is used during serialization and deserialization to substitute one type for another.

    */
open class ISerializationSurrogateProvider
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_ISerializationSurrogateProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ISerializationSurrogateProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object GetDeserializedObject(System.Object, System.Type)
// docid: M:System.Runtime.Serialization.ISerializationSurrogateProvider.GetDeserializedObject(System.Object,System.Type)
    /**
    During deserialization, returns an object that is a substitute for the specified object.

    - Parameter obj: The deserialized object to be substituted.
    - Parameter targetType: The  that the substituted object should be assigned to.
    - Returns: The substituted deserialized object.

    */
    open func GetDeserializedObject(obj : dotnet.System.Object, targetType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ISerializationSurrogateProvider_Object__GetDeserializedObject_0__2__Object_Type(&__thrown, self.get_handle(), obj.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object GetObjectToSerialize(System.Object, System.Type)
// docid: M:System.Runtime.Serialization.ISerializationSurrogateProvider.GetObjectToSerialize(System.Object,System.Type)
    /**
    During serialization, returns an object that substitutes the specified object.

    - Parameter obj: The object to substitute.
    - Parameter targetType: The  that the substituted object should be assigned to.
    - Returns: The substituted object that will be serialized.

    */
    open func GetObjectToSerialize(obj : dotnet.System.Object, targetType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ISerializationSurrogateProvider_Object__GetObjectToSerialize_0__2__Object_Type(&__thrown, self.get_handle(), obj.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Type GetSurrogateType(System.Type)
// docid: M:System.Runtime.Serialization.ISerializationSurrogateProvider.GetSurrogateType(System.Type)
    /**
    During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.

    - Parameter type: The type to substitute.
    - Returns: The  to substitute for the  value.

    */
    open func GetSurrogateType(type : dotnet.System.Type_) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ISerializationSurrogateProvider_Type__GetSurrogateType_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
} // ISerializationSurrogateProvider


// type: System.Runtime.Serialization.IgnoreDataMemberAttribute
    /**
    When applied to the member of a type, specifies that the member is not part of a data contract and is not serialized.

    */
public final class IgnoreDataMemberAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_IgnoreDataMemberAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_IgnoreDataMemberAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // IgnoreDataMemberAttribute


// type: System.Runtime.Serialization.InvalidDataContractException
    /**
    The exception that is thrown when the  or  encounters an invalid data contract during serialization and deserialization.

    */
open class InvalidDataContractException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_InvalidDataContractException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.InvalidDataContractException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_InvalidDataContractException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified error message.

    - Parameter message: A description of the error.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_InvalidDataContractException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified error message and inner exception.

    - Parameter message: A description of the error.
    - Parameter innerException: The original .
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_InvalidDataContractException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidDataContractException


// type: System.Runtime.Serialization.KnownTypeAttribute
    /**
    Specifies types that should be recognized by the  when serializing or deserializing a given type.

    */
public final class KnownTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_KnownTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the name of a method that returns an  of known types.

    - Parameter methodName: The name of the method that returns an  of types used when serializing or deserializing data.
    */
    public init(methodName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_KnownTypeAttribute_ctor_0__1__String(&__thrown, methodName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the specified type.

    - Parameter type: The  that is included as a known type when serializing or deserializing data.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_KnownTypeAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_MethodName()
// docid: M:System.Runtime.Serialization.KnownTypeAttribute.get_MethodName
    public func get_MethodName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_KnownTypeAttribute_String__get_MethodName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:System.Runtime.Serialization.KnownTypeAttribute.get_Type
    public func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_KnownTypeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of a method that will return a list of types that should be recognized during serialization or deserialization.

    */
    public var MethodName : Optional<dotnet.System.String> {
        get {
            return try! get_MethodName();
        }
    }
    /**
    Gets the type that should be recognized during serialization or deserialization by the .

    */
    public var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
    }
} // KnownTypeAttribute


}



public protocol System_Runtime_Serialization_ISerializationSurrogateProvider
    :
    SGBridgeGetHandle
{
}

