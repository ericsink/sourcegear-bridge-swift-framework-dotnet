// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Security
// System.Security.Claims
extension System.Security.Claims {
// type: System.Security.Claims.Claim
    /**
    Represents a claim.

    */
open class Claim
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Claims_Claim_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.BinaryReader)
// docid: M:System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
    /**
    Initializes an instance of  with the specified .

    - Parameter reader: A  pointing to a .
    */
    public init(reader : dotnet.System.IO.BinaryReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__1__BinaryReader(&__thrown, reader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.BinaryReader, System.Security.Claims.ClaimsIdentity)
// docid: M:System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
    /**
    Initializes a new instance of the  class with the specified reader and subject.

    - Parameter reader: The binary reader.
    - Parameter subject: The subject that this claim describes.
    */
    public init(reader : dotnet.System.IO.BinaryReader, subject : Optional<dotnet.System.Security.Claims.ClaimsIdentity>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__2__BinaryReader_ClaimsIdentity(&__thrown, reader.get_handle(), subject?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Security.Claims.Claim.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified claim type, and value.

    - Parameter type: The claim type.
    - Parameter value: The claim value.
    */
    public init(type : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__2__String_String(&__thrown, type.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified claim type, value, and value type.

    - Parameter type: The claim type.
    - Parameter value: The claim value.
    - Parameter valueType: The claim value type. If this parameter is , then  is used.
    */
    public init(type : dotnet.System.String, value : dotnet.System.String, valueType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__3__String_String_String(&__thrown, type.get_handle(), value.get_handle(), valueType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified claim type, value, value type, and issuer.

    - Parameter type: The claim type.
    - Parameter value: The claim value.
    - Parameter valueType: The claim value type. If this parameter is , then  is used.
    - Parameter issuer: The claim issuer. If this parameter is empty or , then  is used.
    */
    public init(type : dotnet.System.String, value : dotnet.System.String, valueType : Optional<dotnet.System.String>, issuer : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__4__String_String_String_String(&__thrown, type.get_handle(), value.get_handle(), valueType?.get_handle() ?? nil, issuer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String, System.String)
// docid: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified claim type, value, value type, issuer,  and original issuer.

    - Parameter type: The claim type.
    - Parameter value: The claim value.
    - Parameter valueType: The claim value type. If this parameter is , then  is used.
    - Parameter issuer: The claim issuer. If this parameter is empty or , then  is used.
    - Parameter originalIssuer: The original issuer of the claim. If this parameter is empty or , then the  property is set to the value of the  property.
    */
    public init(type : dotnet.System.String, value : dotnet.System.String, valueType : Optional<dotnet.System.String>, issuer : Optional<dotnet.System.String>, originalIssuer : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__5__String_String_String_String_String(&__thrown, type.get_handle(), value.get_handle(), valueType?.get_handle() ?? nil, issuer?.get_handle() ?? nil, originalIssuer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String, System.String, System.Security.Claims.ClaimsIdentity)
// docid: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
    /**
    Initializes a new instance of the  class with the specified claim type, value, value type, issuer, original issuer and subject.

    - Parameter type: The claim type.
    - Parameter value: The claim value.
    - Parameter valueType: The claim value type. If this parameter is , then  is used.
    - Parameter issuer: The claim issuer. If this parameter is empty or , then  is used.
    - Parameter originalIssuer: The original issuer of the claim. If this parameter is empty or , then the  property is set to the value of the  property.
    - Parameter subject: The subject that this claim describes.
    */
    public init(type : dotnet.System.String, value : dotnet.System.String, valueType : Optional<dotnet.System.String>, issuer : Optional<dotnet.System.String>, originalIssuer : Optional<dotnet.System.String>, subject : Optional<dotnet.System.Security.Claims.ClaimsIdentity>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_Claim_ctor_0__6__String_String_String_String_String_ClaimsIdentity(&__thrown, type.get_handle(), value.get_handle(), valueType?.get_handle() ?? nil, issuer?.get_handle() ?? nil, originalIssuer?.get_handle() ?? nil, subject?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.Claims.Claim Clone()
// docid: M:System.Security.Claims.Claim.Clone
    /**
    Returns a new  object copied from this object. The new claim does not have a subject.

    - Returns: The new claim object.

    */
    open func Clone() throws -> dotnet.System.Security.Claims.Claim {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_Claim__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.Claim(hndl : __return);
        }
    }
    // System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity)
// docid: M:System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
    /**
    Returns a new  object copied from this object. The subject of the new claim is set to the specified ClaimsIdentity.

    - Parameter identity: The intended subject of the new claim.
    - Returns: The new claim object.

    */
    open func Clone(identity : Optional<dotnet.System.Security.Claims.ClaimsIdentity>) throws -> dotnet.System.Security.Claims.Claim {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_Claim__Clone_0__1__ClaimsIdentity(&__thrown, self.get_handle(), identity?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.Claim(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Security.Claims.Claim.ToString
    /**
    Returns a string representation of this  object.

    - Returns: The string representation of this  object.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteTo(System.IO.BinaryWriter)
// docid: M:System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
    /**
    Writes this  to the writer.

    - Parameter writer: The writer to use for data storage.
    */
    open func WriteTo(writer : dotnet.System.IO.BinaryWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_Claim_void__WriteTo_0__1__BinaryWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Issuer()
// docid: M:System.Security.Claims.Claim.get_Issuer
    open func get_Issuer() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_String__get_Issuer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_OriginalIssuer()
// docid: M:System.Security.Claims.Claim.get_OriginalIssuer
    open func get_OriginalIssuer() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_String__get_OriginalIssuer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Properties()
// docid: M:System.Security.Claims.Claim.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_System_Collections_Generic_IDictionary_string_string___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsIdentity get_Subject()
// docid: M:System.Security.Claims.Claim.get_Subject
    open func get_Subject() throws -> Optional<dotnet.System.Security.Claims.ClaimsIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_ClaimsIdentity__get_Subject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsIdentity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:System.Security.Claims.Claim.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Security.Claims.Claim.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ValueType()
// docid: M:System.Security.Claims.Claim.get_ValueType
    open func get_ValueType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_Claim_String__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the issuer of the claim.

    */
    open var Issuer : dotnet.System.String {
        get {
            return try! get_Issuer();
        }
    }
    /**
    Gets the original issuer of the claim.

    */
    open var OriginalIssuer : dotnet.System.String {
        get {
            return try! get_OriginalIssuer();
        }
    }
    /**
    Gets a dictionary that contains additional properties associated with this claim.

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Properties();
        }
    }
    /**
    Gets the subject of the claim.

    */
    open var Subject : Optional<dotnet.System.Security.Claims.ClaimsIdentity> {
        get {
            return try! get_Subject();
        }
    }
    /**
    Gets the claim type of the claim.

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
    }
    /**
    Gets the value of the claim.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    /**
    Gets the value type of the claim.

    */
    open var ValueType : dotnet.System.String {
        get {
            return try! get_ValueType();
        }
    }
} // Claim


// type: System.Security.Claims.ClaimTypes
public struct ClaimTypes {
    // static field: System.String Actor
    /**
    The URI for a claim that specifies the actor, http://schemas.xmlsoap.org/ws/2009/09/identity/claims/actor.

    */
    public static var Actor : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Actor());
            return __return;
        }
    }
    // static field: System.String Anonymous
    /**
    The URI for a claim that specifies the anonymous user; http://schemas.xmlsoap.org/ws/2005/05/identity/claims/anonymous.

    */
    public static var Anonymous : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Anonymous());
            return __return;
        }
    }
    // static field: System.String Authentication
    /**
    The URI for a claim that specifies details about whether an identity is authenticated, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authenticated.

    */
    public static var Authentication : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Authentication());
            return __return;
        }
    }
    // static field: System.String AuthenticationInstant
    /**
    The URI for a claim that specifies the instant at which an entity was authenticated; http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationinstant.

    */
    public static var AuthenticationInstant : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_AuthenticationInstant());
            return __return;
        }
    }
    // static field: System.String AuthenticationMethod
    /**
    The URI for a claim that specifies the method with which an entity was authenticated; http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationmethod.

    */
    public static var AuthenticationMethod : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_AuthenticationMethod());
            return __return;
        }
    }
    // static field: System.String AuthorizationDecision
    /**
    The URI for a claim that specifies an authorization decision on an entity; http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authorizationdecision.

    */
    public static var AuthorizationDecision : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_AuthorizationDecision());
            return __return;
        }
    }
    // static field: System.String CookiePath
    /**
    The URI for a claim that specifies the cookie path; http://schemas.microsoft.com/ws/2008/06/identity/claims/cookiepath.

    */
    public static var CookiePath : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_CookiePath());
            return __return;
        }
    }
    // static field: System.String Country
    /**
    The URI for a claim that specifies the country/region in which an entity resides, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country.

    */
    public static var Country : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Country());
            return __return;
        }
    }
    // static field: System.String DateOfBirth
    /**
    The URI for a claim that specifies the date of birth of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth.

    */
    public static var DateOfBirth : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_DateOfBirth());
            return __return;
        }
    }
    // static field: System.String DenyOnlyPrimaryGroupSid
    /**
    The URI for a claim that specifies the deny-only primary group SID on an entity; http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarygroupsid. A deny-only SID denies the specified entity to a securable object.

    */
    public static var DenyOnlyPrimaryGroupSid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_DenyOnlyPrimaryGroupSid());
            return __return;
        }
    }
    // static field: System.String DenyOnlyPrimarySid
    /**
    The URI for a claim that specifies the deny-only primary SID on an entity; http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarysid. A deny-only SID denies the specified entity to a securable object.

    */
    public static var DenyOnlyPrimarySid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_DenyOnlyPrimarySid());
            return __return;
        }
    }
    // static field: System.String DenyOnlySid
    /**
    The URI for a claim that specifies a deny-only security identifier (SID) for an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/denyonlysid. A deny-only SID denies the specified entity to a securable object.

    */
    public static var DenyOnlySid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_DenyOnlySid());
            return __return;
        }
    }
    // static field: System.String DenyOnlyWindowsDeviceGroup
    /**
    The URI for a claim that specifies the Windows deny-only group SID of the device, http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlywindowsdevicegroup.

    */
    public static var DenyOnlyWindowsDeviceGroup : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_DenyOnlyWindowsDeviceGroup());
            return __return;
        }
    }
    // static field: System.String Dns
    /**
    The URI for a claim that specifies the DNS name associated with the computer name or with the alternative name of either the subject or issuer of an X.509 certificate, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dns.

    */
    public static var Dns : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Dns());
            return __return;
        }
    }
    // static field: System.String Dsa
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/dsa.

    */
    public static var Dsa : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Dsa());
            return __return;
        }
    }
    // static field: System.String Email
    /**
    The URI for a claim that specifies the email address of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress.

    */
    public static var Email : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Email());
            return __return;
        }
    }
    // static field: System.String Expiration
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/expiration.

    */
    public static var Expiration : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Expiration());
            return __return;
        }
    }
    // static field: System.String Expired
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/expired.

    */
    public static var Expired : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Expired());
            return __return;
        }
    }
    // static field: System.String Gender
    /**
    The URI for a claim that specifies the gender of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender.

    */
    public static var Gender : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Gender());
            return __return;
        }
    }
    // static field: System.String GivenName
    /**
    The URI for a claim that specifies the given name of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname.

    */
    public static var GivenName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_GivenName());
            return __return;
        }
    }
    // static field: System.String GroupSid
    /**
    The URI for a claim that specifies the SID for the group of an entity, http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid.

    */
    public static var GroupSid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_GroupSid());
            return __return;
        }
    }
    // static field: System.String Hash
    /**
    The URI for a claim that specifies a hash value, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/hash.

    */
    public static var Hash : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Hash());
            return __return;
        }
    }
    // static field: System.String HomePhone
    /**
    The URI for a claim that specifies the home phone number of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone.

    */
    public static var HomePhone : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_HomePhone());
            return __return;
        }
    }
    // static field: System.String IsPersistent
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/ispersistent.

    */
    public static var IsPersistent : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_IsPersistent());
            return __return;
        }
    }
    // static field: System.String Locality
    /**
    The URI for a claim that specifies the locale in which an entity resides, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality.

    */
    public static var Locality : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Locality());
            return __return;
        }
    }
    // static field: System.String MobilePhone
    /**
    The URI for a claim that specifies the mobile phone number of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone.

    */
    public static var MobilePhone : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_MobilePhone());
            return __return;
        }
    }
    // static field: System.String Name
    /**
    The URI for a claim that specifies the name of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name.

    */
    public static var Name : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Name());
            return __return;
        }
    }
    // static field: System.String NameIdentifier
    /**
    The URI for a claim that specifies the name of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier.

    */
    public static var NameIdentifier : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_NameIdentifier());
            return __return;
        }
    }
    // static field: System.String OtherPhone
    /**
    The URI for a claim that specifies the alternative phone number of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/otherphone.

    */
    public static var OtherPhone : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_OtherPhone());
            return __return;
        }
    }
    // static field: System.String PostalCode
    /**
    The URI for a claim that specifies the postal code of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode.

    */
    public static var PostalCode : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_PostalCode());
            return __return;
        }
    }
    // static field: System.String PrimaryGroupSid
    /**
    The URI for a claim that specifies the primary group SID of an entity, http://schemas.microsoft.com/ws/2008/06/identity/claims/primarygroupsid.

    */
    public static var PrimaryGroupSid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_PrimaryGroupSid());
            return __return;
        }
    }
    // static field: System.String PrimarySid
    /**
    The URI for a claim that specifies the primary SID of an entity, http://schemas.microsoft.com/ws/2008/06/identity/claims/primarysid.

    */
    public static var PrimarySid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_PrimarySid());
            return __return;
        }
    }
    // static field: System.String Role
    /**
    The URI for a claim that specifies the role of an entity, http://schemas.microsoft.com/ws/2008/06/identity/claims/role.

    */
    public static var Role : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Role());
            return __return;
        }
    }
    // static field: System.String Rsa
    /**
    The URI for a claim that specifies an RSA key, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa.

    */
    public static var Rsa : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Rsa());
            return __return;
        }
    }
    // static field: System.String SerialNumber
    /**
    The URI for a claim that specifies a serial number, http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber.

    */
    public static var SerialNumber : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_SerialNumber());
            return __return;
        }
    }
    // static field: System.String Sid
    /**
    The URI for a claim that specifies a security identifier (SID), http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid.

    */
    public static var Sid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Sid());
            return __return;
        }
    }
    // static field: System.String Spn
    /**
    The URI for a claim that specifies a service principal name (SPN) claim, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/spn.

    */
    public static var Spn : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Spn());
            return __return;
        }
    }
    // static field: System.String StateOrProvince
    /**
    The URI for a claim that specifies the state or province in which an entity resides, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince.

    */
    public static var StateOrProvince : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_StateOrProvince());
            return __return;
        }
    }
    // static field: System.String StreetAddress
    /**
    The URI for a claim that specifies the street address of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress.

    */
    public static var StreetAddress : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_StreetAddress());
            return __return;
        }
    }
    // static field: System.String Surname
    /**
    The URI for a claim that specifies the surname of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname.

    */
    public static var Surname : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Surname());
            return __return;
        }
    }
    // static field: System.String System
    /**
    The URI for a claim that identifies the system entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system.

    */
    public static var System : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_System());
            return __return;
        }
    }
    // static field: System.String Thumbprint
    /**
    The URI for a claim that specifies a thumbprint, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/thumbprint. A thumbprint is a globally unique SHA-1 hash of an X.509 certificate.

    */
    public static var Thumbprint : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Thumbprint());
            return __return;
        }
    }
    // static field: System.String Upn
    /**
    The URI for a claim that specifies a user principal name (UPN), http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn.

    */
    public static var Upn : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Upn());
            return __return;
        }
    }
    // static field: System.String Uri
    /**
    The URI for a claim that specifies a URI, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri.

    */
    public static var Uri : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Uri());
            return __return;
        }
    }
    // static field: System.String UserData
    /**
    The URI for a claim that specifies the user data, http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata.

    */
    public static var UserData : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_UserData());
            return __return;
        }
    }
    // static field: System.String Version
    /**
    The URI for a claim that specifies the version, http://schemas.microsoft.com/ws/2008/06/identity/claims/version.

    */
    public static var Version : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Version());
            return __return;
        }
    }
    // static field: System.String Webpage
    /**
    The URI for a claim that specifies the webpage of an entity, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage.

    */
    public static var Webpage : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_Webpage());
            return __return;
        }
    }
    // static field: System.String WindowsAccountName
    /**
    The URI for a claim that specifies the Windows domain account name of an entity, http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname.

    */
    public static var WindowsAccountName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_WindowsAccountName());
            return __return;
        }
    }
    // static field: System.String WindowsDeviceClaim
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdeviceclaim.

    */
    public static var WindowsDeviceClaim : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_WindowsDeviceClaim());
            return __return;
        }
    }
    // static field: System.String WindowsDeviceGroup
    /**
    The URI for a claim that specifies the Windows group SID of the device, http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdevicegroup.

    */
    public static var WindowsDeviceGroup : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_WindowsDeviceGroup());
            return __return;
        }
    }
    // static field: System.String WindowsFqbnVersion
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsfqbnversion.

    */
    public static var WindowsFqbnVersion : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_WindowsFqbnVersion());
            return __return;
        }
    }
    // static field: System.String WindowsSubAuthority
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/windowssubauthority.

    */
    public static var WindowsSubAuthority : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_WindowsSubAuthority());
            return __return;
        }
    }
    // static field: System.String WindowsUserClaim
    /**
    
        http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsuserclaim.

    */
    public static var WindowsUserClaim : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_WindowsUserClaim());
            return __return;
        }
    }
    // static field: System.String X500DistinguishedName
    /**
    The URI for an X.500 distinguished name claim, such as the subject of an X.509 Public Key Certificate or an entry identifier in a directory services Directory Information Tree; http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname.

    */
    public static var X500DistinguishedName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimTypes_get_X500DistinguishedName());
            return __return;
        }
    }
} // ClaimTypes


// type: System.Security.Claims.ClaimValueTypes
public struct ClaimValueTypes {
    // static field: System.String Base64Binary
    /**
    A URI that represents the  XML data type.

    */
    public static var Base64Binary : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Base64Binary());
            return __return;
        }
    }
    // static field: System.String Base64Octet
    /**
    A URI that represents the  XML data type.

    */
    public static var Base64Octet : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Base64Octet());
            return __return;
        }
    }
    // static field: System.String Boolean
    /**
    A URI that represents the  XML data type.

    */
    public static var Boolean : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Boolean());
            return __return;
        }
    }
    // static field: System.String Date
    /**
    A URI that represents the  XML data type.

    */
    public static var Date : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Date());
            return __return;
        }
    }
    // static field: System.String DateTime
    /**
    A URI that represents the  XML data type.

    */
    public static var DateTime : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_DateTime());
            return __return;
        }
    }
    // static field: System.String DaytimeDuration
    /**
    A URI that represents the  XQuery data type.

    */
    public static var DaytimeDuration : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_DaytimeDuration());
            return __return;
        }
    }
    // static field: System.String DnsName
    /**
    A URI that represents the  SOAP data type.

    */
    public static var DnsName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_DnsName());
            return __return;
        }
    }
    // static field: System.String Double
    /**
    A URI that represents the  XML data type.

    */
    public static var Double : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Double());
            return __return;
        }
    }
    // static field: System.String DsaKeyValue
    /**
    A URI that represents the  XML Signature data type.

    */
    public static var DsaKeyValue : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_DsaKeyValue());
            return __return;
        }
    }
    // static field: System.String Email
    /**
    A URI that represents the  SOAP data type.

    */
    public static var Email : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Email());
            return __return;
        }
    }
    // static field: System.String Fqbn
    /**
    A URI that represents the  XML data type.

    */
    public static var Fqbn : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Fqbn());
            return __return;
        }
    }
    // static field: System.String HexBinary
    /**
    A URI that represents the  XML data type.

    */
    public static var HexBinary : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_HexBinary());
            return __return;
        }
    }
    // static field: System.String Integer
    /**
    A URI that represents the  XML data type.

    */
    public static var Integer : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Integer());
            return __return;
        }
    }
    // static field: System.String Integer32
    /**
    A URI that represents the  XML data type.

    */
    public static var Integer32 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Integer32());
            return __return;
        }
    }
    // static field: System.String Integer64
    /**
    A URI that represents the  XML data type.

    */
    public static var Integer64 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Integer64());
            return __return;
        }
    }
    // static field: System.String KeyInfo
    /**
    A URI that represents the  XML Signature data type.

    */
    public static var KeyInfo : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_KeyInfo());
            return __return;
        }
    }
    // static field: System.String Rfc822Name
    /**
    A URI that represents the  XACML 1.0 data type.

    */
    public static var Rfc822Name : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Rfc822Name());
            return __return;
        }
    }
    // static field: System.String Rsa
    /**
    A URI that represents the  SOAP data type.

    */
    public static var Rsa : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Rsa());
            return __return;
        }
    }
    // static field: System.String RsaKeyValue
    /**
    A URI that represents the  XML Signature data type.

    */
    public static var RsaKeyValue : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_RsaKeyValue());
            return __return;
        }
    }
    // static field: System.String Sid
    /**
    A URI that represents the  XML data type.

    */
    public static var Sid : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Sid());
            return __return;
        }
    }
    // static field: System.String String
    /**
    A URI that represents the  XML data type.

    */
    public static var String : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_String());
            return __return;
        }
    }
    // static field: System.String Time
    /**
    A URI that represents the  XML data type.

    */
    public static var Time : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_Time());
            return __return;
        }
    }
    // static field: System.String UInteger32
    /**
    A URI that represents the  XML data type.

    */
    public static var UInteger32 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_UInteger32());
            return __return;
        }
    }
    // static field: System.String UInteger64
    /**
    A URI that represents the  XML data type.

    */
    public static var UInteger64 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_UInteger64());
            return __return;
        }
    }
    // static field: System.String UpnName
    /**
    A URI that represents the  SOAP data type.

    */
    public static var UpnName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_UpnName());
            return __return;
        }
    }
    // static field: System.String X500Name
    /**
    A URI that represents the  XACML 1.0 data type.

    */
    public static var X500Name : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_X500Name());
            return __return;
        }
    }
    // static field: System.String YearMonthDuration
    /**
    A URI that represents the  XQuery data type.

    */
    public static var YearMonthDuration : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimValueTypes_get_YearMonthDuration());
            return __return;
        }
    }
} // ClaimValueTypes


// type: System.Security.Claims.ClaimsIdentity
    /**
    Represents a claims-based identity.

    */
open class ClaimsIdentity
    :
    dotnet.System.Object,
    System_Security_Principal_IIdentity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Claims_ClaimsIdentity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String DefaultIssuer
    /**
    The default issuer; "LOCAL AUTHORITY".

    */
    open class var DefaultIssuer : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimsIdentity_get_DefaultIssuer());
            return __return;
        }
    }
    // static field: System.String DefaultNameClaimType
    /**
    The default name claim type; .

    */
    open class var DefaultNameClaimType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimsIdentity_get_DefaultNameClaimType());
            return __return;
        }
    }
    // static field: System.String DefaultRoleClaimType
    /**
    The default role claim type; .

    */
    open class var DefaultRoleClaimType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Claims_ClaimsIdentity_get_DefaultRoleClaimType());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor
    /**
    Initializes a new instance of the  class with an empty claims collection.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    /**
    Initializes a new instance of the  class using an enumerated collection of  objects.

    - Parameter claims: The claims with which to populate the claims identity.
    */
    public init(claims : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__1__System_Collections_Generic_IEnumerable_System_Security_Claims_Claim_(&__thrown, (claims?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
    /**
    Initializes a new instance of the  class with the specified claims and authentication type.

    - Parameter claims: The claims with which to populate the claims identity.
    - Parameter authenticationType: The type of authentication used.
    */
    public init(claims : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim>>, authenticationType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__2__System_Collections_Generic_IEnumerable_System_Security_Claims_Claim__String(&__thrown, (claims?.get_handle()), authenticationType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified claims, authentication type, name claim type, and role claim type.

    - Parameter claims: The claims with which to populate the claims identity.
    - Parameter authenticationType: The type of authentication used.
    - Parameter nameType: The claim type to use for name claims.
    - Parameter roleType: The claim type to use for role claims.
    */
    public init(claims : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim>>, authenticationType : Optional<dotnet.System.String>, nameType : Optional<dotnet.System.String>, roleType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__4__System_Collections_Generic_IEnumerable_System_Security_Claims_Claim__String_String_String(&__thrown, (claims?.get_handle()), authenticationType?.get_handle() ?? nil, nameType?.get_handle() ?? nil, roleType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.BinaryReader)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
    /**
    Initializes an instance of  with the specified .

    - Parameter reader: A  pointing to a .
    */
    public init(reader : dotnet.System.IO.BinaryReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__1__BinaryReader(&__thrown, reader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IIdentity)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
    /**
    Initializes a new instance of the  class using the name and authentication type from the specified .

    - Parameter identity: The identity from which to base the new claims identity.
    */
    public init(identity : Optional<dotnet.System.Security.Principal.IIdentity>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__1__IIdentity(&__thrown, identity?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    /**
    Initializes a new instance of the  class using the specified claims and the specified .

    - Parameter identity: The identity from which to base the new claims identity.
    - Parameter claims: The claims with which to populate the claims identity.
    */
    public init(identity : Optional<dotnet.System.Security.Principal.IIdentity>, claims : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__2__IIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim_(&__thrown, identity?.get_handle() ?? nil, (claims?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class from the specified  using the specified claims, authentication type, name claim type, and role claim type.

    - Parameter identity: The identity from which to base the new claims identity.
    - Parameter claims: The claims with which to populate the new claims identity.
    - Parameter authenticationType: The type of authentication used.
    - Parameter nameType: The claim type to use for name claims.
    - Parameter roleType: The claim type to use for role claims.
    */
    public init(identity : Optional<dotnet.System.Security.Principal.IIdentity>, claims : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim>>, authenticationType : Optional<dotnet.System.String>, nameType : Optional<dotnet.System.String>, roleType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__5__IIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim__String_String_String(&__thrown, identity?.get_handle() ?? nil, (claims?.get_handle()), authenticationType?.get_handle() ?? nil, nameType?.get_handle() ?? nil, roleType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String)
    /**
    Initializes a new instance of the  class with an empty claims collection and the specified authentication type.

    - Parameter authenticationType: The type of authentication used.
    */
    public init(authenticationType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__1__String(&__thrown, authenticationType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified authentication type, name claim type, and role claim type.

    - Parameter authenticationType: The type of authentication used.
    - Parameter nameType: The claim type to use for name claims.
    - Parameter roleType: The claim type to use for role claims.
    */
    public init(authenticationType : Optional<dotnet.System.String>, nameType : Optional<dotnet.System.String>, roleType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsIdentity_ctor_0__3__String_String_String(&__thrown, authenticationType?.get_handle() ?? nil, nameType?.get_handle() ?? nil, roleType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddClaim(System.Security.Claims.Claim)
// docid: M:System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
    /**
    Adds a single claim to this claims identity.

    - Parameter claim: The claim to add.
    */
    open func AddClaim(claim : dotnet.System.Security.Claims.Claim) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__AddClaim_0__1__Claim(&__thrown, self.get_handle(), claim.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    /**
    Adds a list of claims to this claims identity.

    - Parameter claims: The claims to add.
    */
    open func AddClaims(claims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__AddClaims_0__1__System_Collections_Generic_IEnumerable_System_Security_Claims_Claim_(&__thrown, self.get_handle(), claims.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Claims.ClaimsIdentity Clone()
// docid: M:System.Security.Claims.ClaimsIdentity.Clone
    /**
    Returns a new  copied from this claims identity.

    - Returns: A copy of the current instance.

    */
    open func Clone() throws -> dotnet.System.Security.Claims.ClaimsIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_ClaimsIdentity__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsIdentity(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(System.Predicate<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
    /**
    Retrieves all of the claims that are matched by the specified predicate.

    - Parameter match: The function that performs the matching logic.
    - Returns: The matching claims. The list is read-only.

    */
    open func FindAll(match : dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___FindAll_0__1__System_Predicate_System_Security_Claims_Claim_(&__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func FindAll(match : @escaping (Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        let del_match = try dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>(match);
        return try FindAll(match: del_match);
    }
    // System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.FindAll(System.String)
    /**
    Retrieves all of the claims that have the specified claim type.

    - Parameter type: The claim type against which to match claims.
    - Returns: The matching claims. The list is read-only.

    */
    open func FindAll(type : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___FindAll_0__1__String(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Security.Claims.Claim FindFirst(System.Predicate<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
    /**
    Retrieves the first claim that is matched by the specified predicate.

    - Parameter match: The function that performs the matching logic.
    - Returns: The first matching claim or  if no match is found.

    */
    open func FindFirst(match : dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>) throws -> Optional<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_Claim__FindFirst_0__1__System_Predicate_System_Security_Claims_Claim_(&__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.Claim(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func FindFirst(match : @escaping (Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool) throws -> Optional<dotnet.System.Security.Claims.Claim> {
        let del_match = try dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>(match);
        return try FindFirst(match: del_match);
    }
    // System.Security.Claims.Claim FindFirst(System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
    /**
    Retrieves the first claim with the specified claim type.

    - Parameter type: The claim type to match.
    - Returns: The first matching claim or  if no match is found.

    */
    open func FindFirst(type : dotnet.System.String) throws -> Optional<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_Claim__FindFirst_0__1__String(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.Claim(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool HasClaim(System.Predicate<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
    /**
    Determines whether this claims identity has a claim that is matched by the specified predicate.

    - Parameter match: The function that performs the matching logic.
    - Returns: 
         if a matching claim exists; otherwise, .

    */
    open func HasClaim(match : dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_bool__HasClaim_0__1__System_Predicate_System_Security_Claims_Claim_(&__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    open func HasClaim(match : @escaping (Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>(match);
        return try HasClaim(match: del_match);
    }
    // bool HasClaim(System.String, System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
    /**
    Determines whether this claims identity has a claim with the specified claim type and value.

    - Parameter type: The type of the claim to match.
    - Parameter value: The value of the claim to match.
    - Returns: 
         if a match is found; otherwise, .

    */
    open func HasClaim(type : dotnet.System.String, value : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_bool__HasClaim_0__2__String_String(&__thrown, self.get_handle(), type.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveClaim(System.Security.Claims.Claim)
// docid: M:System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
    /**
    Attempts to remove a claim from the claims identity.

    - Parameter claim: The claim to remove.
    */
    open func RemoveClaim(claim : Optional<dotnet.System.Security.Claims.Claim>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__RemoveClaim_0__1__Claim(&__thrown, self.get_handle(), claim?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryRemoveClaim(System.Security.Claims.Claim)
// docid: M:System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
    /**
    Attempts to remove a claim from the claims identity.

    - Parameter claim: The claim to remove.
    - Returns: 
         if the claim was successfully removed; otherwise, .

    */
    open func TryRemoveClaim(claim : Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_bool__TryRemoveClaim_0__1__Claim(&__thrown, self.get_handle(), claim?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteTo(System.IO.BinaryWriter)
// docid: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
    /**
    Serializes using a .

    - Parameter writer: The writer to use for data storage.
    */
    open func WriteTo(writer : dotnet.System.IO.BinaryWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__WriteTo_0__1__BinaryWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsIdentity get_Actor()
// docid: M:System.Security.Claims.ClaimsIdentity.get_Actor
    open func get_Actor() throws -> Optional<dotnet.System.Security.Claims.ClaimsIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_ClaimsIdentity__get_Actor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsIdentity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Actor(System.Security.Claims.ClaimsIdentity)
// docid: M:System.Security.Claims.ClaimsIdentity.set_Actor(System.Security.Claims.ClaimsIdentity)
    open func set_Actor(value : Optional<dotnet.System.Security.Claims.ClaimsIdentity>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__set_Actor_0__1__ClaimsIdentity(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AuthenticationType()
// docid: M:System.Security.Claims.ClaimsIdentity.get_AuthenticationType
    open func get_AuthenticationType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_String__get_AuthenticationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_BootstrapContext()
// docid: M:System.Security.Claims.ClaimsIdentity.get_BootstrapContext
    open func get_BootstrapContext() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_Object__get_BootstrapContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BootstrapContext(System.Object)
// docid: M:System.Security.Claims.ClaimsIdentity.set_BootstrapContext(System.Object)
    open func set_BootstrapContext(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__set_BootstrapContext_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims()
// docid: M:System.Security.Claims.ClaimsIdentity.get_Claims
    open func get_Claims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_Claims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsAuthenticated()
// docid: M:System.Security.Claims.ClaimsIdentity.get_IsAuthenticated
    open func get_IsAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_bool__get_IsAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Label()
// docid: M:System.Security.Claims.ClaimsIdentity.get_Label
    open func get_Label() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_String__get_Label_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Label(System.String)
// docid: M:System.Security.Claims.ClaimsIdentity.set_Label(System.String)
    open func set_Label(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsIdentity_void__set_Label_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Security.Claims.ClaimsIdentity.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_NameClaimType()
// docid: M:System.Security.Claims.ClaimsIdentity.get_NameClaimType
    open func get_NameClaimType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_String__get_NameClaimType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RoleClaimType()
// docid: M:System.Security.Claims.ClaimsIdentity.get_RoleClaimType
    open func get_RoleClaimType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsIdentity_String__get_RoleClaimType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the identity of the calling party that was granted delegation rights.

    */
    open var Actor : Optional<dotnet.System.Security.Claims.ClaimsIdentity> {
        get {
            return try! get_Actor();
        }
        set(v) {
            return try! set_Actor(value: v!);
        }
    }
    /**
    Gets the authentication type.

    */
    open var AuthenticationType : Optional<dotnet.System.String> {
        get {
            return try! get_AuthenticationType();
        }
    }
    /**
    Gets or sets the token that was used to create this claims identity.

    */
    open var BootstrapContext : Optional<dotnet.System.Object> {
        get {
            return try! get_BootstrapContext();
        }
        set(v) {
            return try! set_BootstrapContext(value: v!);
        }
    }
    /**
    Gets the claims associated with this claims identity.

    */
    open var Claims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_Claims();
        }
    }
    /**
    Gets a value that indicates whether the identity has been authenticated.

    */
    open var IsAuthenticated : Bool {
        get {
            return try! get_IsAuthenticated();
        }
    }
    /**
    Gets or sets the label for this claims identity.

    */
    open var Label : Optional<dotnet.System.String> {
        get {
            return try! get_Label();
        }
        set(v) {
            return try! set_Label(value: v!);
        }
    }
    /**
    Gets the name of this claims identity.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the claim type that is used to determine which claims provide the value for the  property of this claims identity.

    */
    open var NameClaimType : dotnet.System.String {
        get {
            return try! get_NameClaimType();
        }
    }
    /**
    Gets the claim type that will be interpreted as a .NET Framework role among the claims in this claims identity.

    */
    open var RoleClaimType : dotnet.System.String {
        get {
            return try! get_RoleClaimType();
        }
    }
} // ClaimsIdentity


// type: System.Security.Claims.ClaimsPrincipal
    /**
    An  implementation that supports multiple claims-based identities.

    */
open class ClaimsPrincipal
    :
    dotnet.System.Object,
    System_Security_Principal_IPrincipal
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Claims_ClaimsPrincipal_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Claims.ClaimsPrincipal.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsPrincipal_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)
// docid: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
    /**
    Initializes a new instance of the  class using the specified claims identities.

    - Parameter identities: The identities from which to initialize the new claims principal.
    */
    public init(identities : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsPrincipal_ctor_0__1__System_Collections_Generic_IEnumerable_System_Security_Claims_ClaimsIdentity_(&__thrown, identities.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.BinaryReader)
// docid: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
    /**
    Initializes an instance of  with the specified .

    - Parameter reader: A  pointing to a .
    */
    public init(reader : dotnet.System.IO.BinaryReader) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsPrincipal_ctor_0__1__BinaryReader(&__thrown, reader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IIdentity)
// docid: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
    /**
    Initializes a new instance of the  class from the specified identity.

    - Parameter identity: The identity from which to initialize the new claims principal.
    */
    public init(identity : dotnet.System.Security.Principal.IIdentity) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsPrincipal_ctor_0__1__IIdentity(&__thrown, identity.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IPrincipal)
// docid: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
    /**
    Initializes a new instance of the  class from the specified principal.

    - Parameter principal: The principal from which to initialize the new claims principal.
    */
    public init(principal : dotnet.System.Security.Principal.IPrincipal) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Claims_ClaimsPrincipal_ctor_0__1__IPrincipal(&__thrown, principal.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddIdentities(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)
// docid: M:System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
    /**
    Adds the specified claims identities to this claims principal.

    - Parameter identities: The claims identities to add.
    */
    open func AddIdentities(identities : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsPrincipal_void__AddIdentities_0__1__System_Collections_Generic_IEnumerable_System_Security_Claims_ClaimsIdentity_(&__thrown, self.get_handle(), identities.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddIdentity(System.Security.Claims.ClaimsIdentity)
// docid: M:System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
    /**
    Adds the specified claims identity to this claims principal.

    - Parameter identity: The claims identity to add.
    */
    open func AddIdentity(identity : dotnet.System.Security.Claims.ClaimsIdentity) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsPrincipal_void__AddIdentity_0__1__ClaimsIdentity(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Claims.ClaimsPrincipal Clone()
// docid: M:System.Security.Claims.ClaimsPrincipal.Clone
    /**
    Returns a copy of this instance.

    - Returns: A new copy of the  object.

    */
    open func Clone() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_ClaimsPrincipal__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(System.Predicate<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
    /**
    Retrieves all of the claims that are matched by the specified predicate.

    - Parameter match: The function that performs the matching logic.
    - Returns: The matching claims.

    */
    open func FindAll(match : dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___FindAll_0__1__System_Predicate_System_Security_Claims_Claim_(&__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func FindAll(match : @escaping (Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        let del_match = try dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>(match);
        return try FindAll(match: del_match);
    }
    // System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(System.String)
// docid: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
    /**
    Retrieves all or the claims that have the specified claim type.

    - Parameter type: The claim type against which to match claims.
    - Returns: The matching claims.

    */
    open func FindAll(type : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___FindAll_0__1__String(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Security.Claims.Claim FindFirst(System.Predicate<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
    /**
    Retrieves the first claim that is matched by the specified predicate.

    - Parameter match: The function that performs the matching logic.
    - Returns: The first matching claim or  if no match is found.

    */
    open func FindFirst(match : dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>) throws -> Optional<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_Claim__FindFirst_0__1__System_Predicate_System_Security_Claims_Claim_(&__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.Claim(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func FindFirst(match : @escaping (Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool) throws -> Optional<dotnet.System.Security.Claims.Claim> {
        let del_match = try dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>(match);
        return try FindFirst(match: del_match);
    }
    // System.Security.Claims.Claim FindFirst(System.String)
// docid: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
    /**
    Retrieves the first claim with the specified claim type.

    - Parameter type: The claim type to match.
    - Returns: The first matching claim or  if no match is found.

    */
    open func FindFirst(type : dotnet.System.String) throws -> Optional<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_Claim__FindFirst_0__1__String(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.Claim(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool HasClaim(System.Predicate<System.Security.Claims.Claim>)
// docid: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
    /**
    Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.

    - Parameter match: The function that performs the matching logic.
    - Returns: 
         if a matching claim exists; otherwise, .

    */
    open func HasClaim(match : dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_bool__HasClaim_0__1__System_Predicate_System_Security_Claims_Claim_(&__thrown, self.get_handle(), match.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    open func HasClaim(match : @escaping (Optional<dotnet.System.Security.Claims.Claim>) throws -> Bool) throws -> Bool {
        let del_match = try dotnet.System.Predicate_1<dotnet.System.Security.Claims.Claim>(match);
        return try HasClaim(match: del_match);
    }
    // bool HasClaim(System.String, System.String)
// docid: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
    /**
    Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.

    - Parameter type: The type of the claim to match.
    - Parameter value: The value of the claim to match.
    - Returns: 
         if a matching claim exists; otherwise, .

    */
    open func HasClaim(type : dotnet.System.String, value : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_bool__HasClaim_0__2__String_String(&__thrown, self.get_handle(), type.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsInRole(System.String)
// docid: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
    /**
    Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.

    - Parameter role: The role for which to check.
    - Returns: 
         if claims principal is in the specified role; otherwise, .

    */
    open func IsInRole(role : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_bool__IsInRole_0__1__String(&__thrown, self.get_handle(), role.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteTo(System.IO.BinaryWriter)
// docid: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
    /**
    Serializes using a .

    - Parameter writer: The writer to use for data storage.
    */
    open func WriteTo(writer : dotnet.System.IO.BinaryWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsPrincipal_void__WriteTo_0__1__BinaryWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims()
// docid: M:System.Security.Claims.ClaimsPrincipal.get_Claims
    open func get_Claims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_Claims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.Security.Claims.ClaimsPrincipal> get_ClaimsPrincipalSelector()
// docid: M:System.Security.Claims.ClaimsPrincipal.get_ClaimsPrincipalSelector
    open class func get_ClaimsPrincipalSelector() throws -> dotnet.System.Func_1<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_System_Func_System_Security_Claims_ClaimsPrincipal___get_ClaimsPrincipalSelector_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ClaimsPrincipalSelector(System.Func<System.Security.Claims.ClaimsPrincipal>)
// docid: M:System.Security.Claims.ClaimsPrincipal.set_ClaimsPrincipalSelector(System.Func{System.Security.Claims.ClaimsPrincipal})
    open class func set_ClaimsPrincipalSelector(value : dotnet.System.Func_1<dotnet.System.Security.Claims.ClaimsPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsPrincipal_void__set_ClaimsPrincipalSelector_0__1__System_Func_System_Security_Claims_ClaimsPrincipal_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func set_ClaimsPrincipalSelector(value : @escaping () throws -> dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.Security.Claims.ClaimsPrincipal>(value);
        return try set_ClaimsPrincipalSelector(value: del_value);
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Current()
// docid: M:System.Security.Claims.ClaimsPrincipal.get_Current
    open class func get_Current() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_ClaimsPrincipal__get_Current_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> get_Identities()
// docid: M:System.Security.Claims.ClaimsPrincipal.get_Identities
    open func get_Identities() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_System_Collections_Generic_IEnumerable_System_Security_Claims_ClaimsIdentity___get_Identities_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.IIdentity get_Identity()
// docid: M:System.Security.Claims.ClaimsPrincipal.get_Identity
    open func get_Identity() throws -> Optional<dotnet.System.Security.Principal.IIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_IIdentity__get_Identity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.IIdentity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity> get_PrimaryIdentitySelector()
// docid: M:System.Security.Claims.ClaimsPrincipal.get_PrimaryIdentitySelector
    open class func get_PrimaryIdentitySelector() throws -> dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>,dotnet.System.Security.Claims.ClaimsIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Claims_ClaimsPrincipal_System_Func_System_Collections_Generic_System_Collections_Generic_IEnumerable_System_Security_Claims_ClaimsIdentity__System_Security_Claims_ClaimsIdentity___get_PrimaryIdentitySelector_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PrimaryIdentitySelector(System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>)
// docid: M:System.Security.Claims.ClaimsPrincipal.set_PrimaryIdentitySelector(System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity})
    open class func set_PrimaryIdentitySelector(value : dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>,dotnet.System.Security.Claims.ClaimsIdentity>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Claims_ClaimsPrincipal_void__set_PrimaryIdentitySelector_0__1__System_Func_System_Collections_Generic_System_Collections_Generic_IEnumerable_System_Security_Claims_ClaimsIdentity__System_Security_Claims_ClaimsIdentity_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func set_PrimaryIdentitySelector(value : @escaping (Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>>) throws -> dotnet.System.Security.Claims.ClaimsIdentity) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>,dotnet.System.Security.Claims.ClaimsIdentity>(value);
        return try set_PrimaryIdentitySelector(value: del_value);
    }
    /**
    Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.

    */
    open var Claims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_Claims();
        }
    }
    /**
    Gets or sets the delegate used to select the claims principal returned by the  property.

    */
    public static var ClaimsPrincipalSelector : dotnet.System.Func_1<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_ClaimsPrincipalSelector();
        }
        set(v) {
            return try! set_ClaimsPrincipalSelector(value: v);
        }
    }
    /**
    Gets the current claims principal.

    */
    public static var Current : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_Current();
        }
    }
    /**
    Gets a collection that contains all of the claims identities associated with this claims principal.

    */
    open var Identities : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity> {
        get {
            return try! get_Identities();
        }
    }
    /**
    Gets the primary claims identity associated with this claims principal.

    */
    open var Identity : Optional<dotnet.System.Security.Principal.IIdentity> {
        get {
            return try! get_Identity();
        }
    }
    /**
    Gets or sets the delegate used to select the claims identity returned by the  property.

    */
    public static var PrimaryIdentitySelector : dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.ClaimsIdentity>,dotnet.System.Security.Claims.ClaimsIdentity> {
        get {
            return try! get_PrimaryIdentitySelector();
        }
        set(v) {
            return try! set_PrimaryIdentitySelector(value: v);
        }
    }
} // ClaimsPrincipal


}

// System.Security.Principal
extension System.Security.Principal {
// type: System.Security.Principal.GenericIdentity
    /**
    Represents a generic user.

    */
open class GenericIdentity
    :
    dotnet.System.Security.Claims.ClaimsIdentity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_GenericIdentity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Security.Principal.GenericIdentity.#ctor(System.String)
    /**
    Initializes a new instance of the  class representing the user with the specified name.

    - Parameter name: The name of the user on whose behalf the code is running.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_GenericIdentity_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Security.Principal.GenericIdentity.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class representing the user with the specified name and authentication type.

    - Parameter name: The name of the user on whose behalf the code is running.
    - Parameter type: The type of authentication used to identify the user.
    */
    public init(name : dotnet.System.String, type : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_GenericIdentity_ctor_0__2__String_String(&__thrown, name.get_handle(), type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.Claims.ClaimsIdentity Clone()
// docid: M:System.Security.Principal.GenericIdentity.Clone
    /**
    Creates a new object that is a copy of the current instance.

    - Returns: A copy of the current instance.

    */
    open override func Clone() throws -> dotnet.System.Security.Claims.ClaimsIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericIdentity_ClaimsIdentity__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsIdentity(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AuthenticationType()
// docid: M:System.Security.Principal.GenericIdentity.get_AuthenticationType
    open override func get_AuthenticationType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericIdentity_String__get_AuthenticationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims()
// docid: M:System.Security.Principal.GenericIdentity.get_Claims
    open override func get_Claims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_Claims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsAuthenticated()
// docid: M:System.Security.Principal.GenericIdentity.get_IsAuthenticated
    open override func get_IsAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericIdentity_bool__get_IsAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Security.Principal.GenericIdentity.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericIdentity_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the type of authentication used to identify the user.

    */
    open override var AuthenticationType : dotnet.System.String {
        get {
            return try! get_AuthenticationType();
        }
    }
    /**
    Gets all claims for the user represented by this generic identity.

    */
    open override var Claims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_Claims();
        }
    }
    /**
    Gets a value indicating whether the user has been authenticated.

    */
    open override var IsAuthenticated : Bool {
        get {
            return try! get_IsAuthenticated();
        }
    }
    /**
    Gets the user's name.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // GenericIdentity


// type: System.Security.Principal.GenericPrincipal
    /**
    Represents a generic principal.

    */
open class GenericPrincipal
    :
    dotnet.System.Security.Claims.ClaimsPrincipal
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_GenericPrincipal_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IIdentity, System.String[])
// docid: M:System.Security.Principal.GenericPrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])
    /**
    Initializes a new instance of the  class from a user identity and an array of role names to which the user represented by that identity belongs.

    - Parameter identity: A basic implementation of  that represents any user.
    - Parameter roles: An array of role names to which the user represented by the  parameter belongs.
    */
    public init(identity : dotnet.System.Security.Principal.IIdentity, roles : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_GenericPrincipal_ctor_0__2__IIdentity_StringArray(&__thrown, identity.get_handle(), (roles?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsInRole(System.String)
// docid: M:System.Security.Principal.GenericPrincipal.IsInRole(System.String)
    /**
    Determines whether the current  belongs to the specified role.

    - Parameter role: The name of the role for which to check membership.
    - Returns: 
         if the current  is a member of the specified role; otherwise, .

    */
    open override func IsInRole(role : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericPrincipal_bool__IsInRole_0__1__String(&__thrown, self.get_handle(), role?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Security.Principal.IIdentity get_Identity()
// docid: M:System.Security.Principal.GenericPrincipal.get_Identity
    open override func get_Identity() throws -> dotnet.System.Security.Principal.IIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_GenericPrincipal_IIdentity__get_Identity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IIdentity(hndl : __return);
        }
    }
    /**
    Gets the  of the user represented by the current .

    */
    open override var Identity : dotnet.System.Security.Principal.IIdentity {
        get {
            return try! get_Identity();
        }
    }
} // GenericPrincipal


}



