// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// Microsoft
// Microsoft.CSharp
// Microsoft.CSharp.RuntimeBinder
extension Microsoft.CSharp.RuntimeBinder {
// type: Microsoft.CSharp.RuntimeBinder.Binder
public struct Binder {
    // System.Runtime.CompilerServices.CallSiteBinder BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp binary operation binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter operation: The binary operation kind.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp binary operation binder.

    */
    public static func BinaryOperation(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, operation : dotnet.System.Linq.Expressions.ExpressionType, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__BinaryOperation_0__4__CSharpBinderFlags_ExpressionType_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), operation.get_value(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Type)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)
    /**
    Initializes a new CSharp convert binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter type: The type to convert to.
    - Parameter context: The  that indicates where this operation is used.
    - Returns: A new CSharp convert binder.

    */
    public static func Convert(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, type : dotnet.System.Type_, context : Optional<dotnet.System.Type_>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__Convert_0__3__CSharpBinderFlags_Type_Type(&__thrown, flags.get_value(), type.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp get index binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp get index binder.

    */
    public static func GetIndex(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__GetIndex_0__3__CSharpBinderFlags_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp get member binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter name: The name of the member to get.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp get member binder.

    */
    public static func GetMember(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, name : dotnet.System.String, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__GetMember_0__4__CSharpBinderFlags_String_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), name.get_handle(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp invoke binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp invoke binder.

    */
    public static func Invoke(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__Invoke_0__3__CSharpBinderFlags_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp invoke constructor binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp invoke constructor binder.

    */
    public static func InvokeConstructor(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__InvokeConstructor_0__3__CSharpBinderFlags_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Collections.Generic.IEnumerable<System.Type>, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp invoke member binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter name: The name of the member to invoke.
    - Parameter typeArguments: The list of type arguments specified for this invoke.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp invoke member binder.

    */
    public static func InvokeMember(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, name : dotnet.System.String, typeArguments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__InvokeMember_0__5__CSharpBinderFlags_String_System_Collections_Generic_IEnumerable_System_Type__Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), name.get_handle(), (typeArguments?.get_handle()), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)
    /**
    Initializes a new CSharp is event binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter name: The name of the event to look for.
    - Parameter context: The  that indicates where this operation is used.
    - Returns: A new CSharp is event binder.

    */
    public static func IsEvent(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, name : dotnet.System.String, context : Optional<dotnet.System.Type_>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__IsEvent_0__3__CSharpBinderFlags_String_Type(&__thrown, flags.get_value(), name.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp set index binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp set index binder.

    */
    public static func SetIndex(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__SetIndex_0__3__CSharpBinderFlags_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp set member binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter name: The name of the member to set.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp set member binder.

    */
    public static func SetMember(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, name : dotnet.System.String, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__SetMember_0__4__CSharpBinderFlags_String_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), name.get_handle(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
    // System.Runtime.CompilerServices.CallSiteBinder UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
// docid: M:Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
    /**
    Initializes a new CSharp unary operation binder.

    - Parameter flags: The flags with which to initialize the binder.
    - Parameter operation: The unary operation kind.
    - Parameter context: The  that indicates where this operation is used.
    - Parameter argumentInfo: The sequence of  instances for the arguments to this operation.
    - Returns: A new CSharp unary operation binder.

    */
    public static func UnaryOperation(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, operation : dotnet.System.Linq.Expressions.ExpressionType, context : Optional<dotnet.System.Type_>, argumentInfo : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>>) throws -> dotnet.System.Runtime.CompilerServices.CallSiteBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_Binder_CallSiteBinder__UnaryOperation_0__4__CSharpBinderFlags_ExpressionType_Type_System_Collections_Generic_IEnumerable_Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_(&__thrown, flags.get_value(), operation.get_value(), context?.get_handle() ?? nil, (argumentInfo?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.CompilerServices.CallSiteBinder(hndl : __return);
        }
    }
} // Binder


// type: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
    /**
    Represents information about C# dynamic operations that are specific to particular arguments at a call site. Instances of this class are generated by the C# compiler.

    */
public final class CSharpArgumentInfo
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo Create(Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags, System.String)
// docid: M:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo.Create(Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter flags: The flags for the argument.
    - Parameter name: The name of the argument, if named; otherwise null.
    - Returns: A new instance of the  class.

    */
    public class func Create(flags : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags, name : Optional<dotnet.System.String>) throws -> dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfo_CSharpArgumentInfo__Create_0__2__CSharpArgumentInfoFlags_String(&__thrown, flags.get_value(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo(hndl : __return);
        }
    }
} // CSharpArgumentInfo


// type: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags
    /**
    Represents information about C# dynamic operations that are specific to particular arguments at a call site. Instances of this class are generated by the C# compiler.

    */
public struct CSharpArgumentInfoFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags None
    /**
    No additional information to represent.

    */
    public static var None : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_None());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags UseCompileTimeType
    /**
    The argument's compile-time type should be considered during binding.

    */
    public static var UseCompileTimeType : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_UseCompileTimeType());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags Constant
    /**
    The argument is a constant.

    */
    public static var Constant : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_Constant());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags NamedArgument
    /**
    The argument is a named argument.

    */
    public static var NamedArgument : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_NamedArgument());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags IsRef
    /**
    The argument is passed to a ref parameter.

    */
    public static var IsRef : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_IsRef());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags IsOut
    /**
    The argument is passed to an out parameter.

    */
    public static var IsOut : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_IsOut());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags IsStaticType
    /**
    The argument is a  indicating an actual type name used in source. Used only for target objects in static calls.

    */
    public static var IsStaticType : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpArgumentInfoFlags_get_IsStaticType());
            return __return;
        }
    }
} // CSharpArgumentInfoFlags


// type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
    /**
    Represents information about C# dynamic operations that are not specific to particular arguments at a call site. Instances of this class are generated by the C# compiler.

    */
public struct CSharpBinderFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags None
    /**
    There is no additional information required for this binder.

    */
    public static var None : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_None());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags CheckedContext
    /**
    The evaluation of this binder happens in a checked context.

    */
    public static var CheckedContext : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_CheckedContext());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags InvokeSimpleName
    /**
    The binder represents an invoke on a simple name.

    */
    public static var InvokeSimpleName : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_InvokeSimpleName());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags InvokeSpecialName
    /**
    The binder represents an invoke on a specialname.

    */
    public static var InvokeSpecialName : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_InvokeSpecialName());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags BinaryOperationLogical
    /**
    The binder represents a logical AND or logical OR that is part of a conditional logical operator evaluation.

    */
    public static var BinaryOperationLogical : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_BinaryOperationLogical());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags ConvertExplicit
    /**
    The binder represents an explicit conversion.

    */
    public static var ConvertExplicit : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_ConvertExplicit());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags ConvertArrayIndex
    /**
    The binder represents an implicit conversion for use in an array creation expression.

    */
    public static var ConvertArrayIndex : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_ConvertArrayIndex());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags ResultIndexed
    /**
    The result of any bind is going to be indexed get a set index or get index binder.

    */
    public static var ResultIndexed : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_ResultIndexed());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags ValueFromCompoundAssignment
    /**
    The value in this set index or set member comes a compound assignment operator.

    */
    public static var ValueFromCompoundAssignment : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_ValueFromCompoundAssignment());
            return __return;
        }
    }
    // static field: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags ResultDiscarded
    /**
    The binder is used in a position that does not require a result, and can therefore bind to a void returning method.

    */
    public static var ResultDiscarded : dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags {
        get {
        let __return = dotnet.Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags(val: Microsoft_CSharp_RuntimeBinder_CSharpBinderFlags_get_ResultDiscarded());
            return __return;
        }
    }
} // CSharpBinderFlags


// type: Microsoft.CSharp.RuntimeBinder.RuntimeBinderException
    /**
    Represents an error that occurs when a dynamic bind in the C# runtime binder is processed.

    */
open class RuntimeBinderException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_CSharp_RuntimeBinder_RuntimeBinderException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_CSharp_RuntimeBinder_RuntimeBinderException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException.#ctor(System.String)
    /**
    Initializes a new instance of the  class that has a specified error message.

    - Parameter message: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_CSharp_RuntimeBinder_RuntimeBinderException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class that has a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference if no inner exception is specified.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_CSharp_RuntimeBinder_RuntimeBinderException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RuntimeBinderException


// type: Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException
    /**
    Represents an error that occurs when a dynamic bind in the C# runtime binder is processed.

    */
open class RuntimeBinderInternalCompilerException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_CSharp_RuntimeBinder_RuntimeBinderInternalCompilerException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException.#ctor
    /**
    Initializes a new instance of the  class with a system-supplied message that describes the error.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_CSharp_RuntimeBinder_RuntimeBinderInternalCompilerException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified message that describes the error.

    - Parameter message: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_CSharp_RuntimeBinder_RuntimeBinderInternalCompilerException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class that has a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception, or a null reference if no inner exception is specified.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_CSharp_RuntimeBinder_RuntimeBinderInternalCompilerException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RuntimeBinderInternalCompilerException


}



