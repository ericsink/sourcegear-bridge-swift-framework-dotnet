// this file is automatically generated
// Copyright 2021 SourceGear

#include <stdint.h>

#ifndef INCLUDE_System_Security_Cryptography_OpenSsl
#define INCLUDE_System_Security_Cryptography_OpenSsl

#ifdef __cplusplus
extern "C" {
#endif

typedef const void* _Nonnull SG_HNDL_NONNULL;
typedef const void* _Nullable SG_HNDL_NULLABLE;
typedef const void* _Nonnull TYP;
typedef uint64_t GVAL;

TYP System_Security_Cryptography_DSAOpenSsl_get_type_handle(void);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_ctor_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, int32_t keySize);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_ctor_0__1__IntPtr(SG_HNDL_NULLABLE * _Nonnull __thrown, intptr_t handle);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_ctor_0__1__DSAParameters(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL parameters);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_ctor_0__1__SafeEvpPKeyHandle(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL pkeyHandle);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_u8Array__CreateSignature_0__1__u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL rgbHash);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_SafeEvpPKeyHandle__DuplicateKeyHandle_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_DSAParameters__ExportParameters_0__1__bool(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t includePrivateParameters);

void System_Security_Cryptography_DSAOpenSsl_void__ImportParameters_0__1__DSAParameters(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL parameters);

int32_t System_Security_Cryptography_DSAOpenSsl_bool__VerifySignature_0__2__u8Array_u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL rgbHash, SG_HNDL_NONNULL rgbSignature);

void System_Security_Cryptography_DSAOpenSsl_void__set_KeySize_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t value);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_KeySizesArray__get_LegalKeySizes_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_DSAOpenSsl_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP System_Security_Cryptography_ECDiffieHellmanOpenSsl_get_type_handle(void);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ctor_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, int32_t keySize);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ctor_0__1__IntPtr(SG_HNDL_NULLABLE * _Nonnull __thrown, intptr_t handle);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ctor_0__1__ECCurve(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL curve);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ctor_0__1__SafeEvpPKeyHandle(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL pkeyHandle);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_u8Array__DeriveKeyFromHash_0__4__ECDiffieHellmanPublicKey_HashAlgorithmName_u8Array_u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL otherPartyPublicKey, SG_HNDL_NONNULL hashAlgorithm, SG_HNDL_NULLABLE secretPrepend, SG_HNDL_NULLABLE secretAppend);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_u8Array__DeriveKeyFromHmac_0__5__ECDiffieHellmanPublicKey_HashAlgorithmName_u8Array_u8Array_u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL otherPartyPublicKey, SG_HNDL_NONNULL hashAlgorithm, SG_HNDL_NULLABLE hmacKey, SG_HNDL_NULLABLE secretPrepend, SG_HNDL_NULLABLE secretAppend);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_u8Array__DeriveKeyMaterial_0__1__ECDiffieHellmanPublicKey(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL otherPartyPublicKey);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_u8Array__DeriveKeyTls_0__3__ECDiffieHellmanPublicKey_u8Array_u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL otherPartyPublicKey, SG_HNDL_NONNULL prfLabel, SG_HNDL_NONNULL prfSeed);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_SafeEvpPKeyHandle__DuplicateKeyHandle_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ECParameters__ExportExplicitParameters_0__1__bool(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t includePrivateParameters);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ECParameters__ExportParameters_0__1__bool(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t includePrivateParameters);

void System_Security_Cryptography_ECDiffieHellmanOpenSsl_void__GenerateKey_0__1__ECCurve(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL curve);

void System_Security_Cryptography_ECDiffieHellmanOpenSsl_void__ImportParameters_0__1__ECParameters(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL parameters);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_ECDiffieHellmanPublicKey__get_PublicKey_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_ECDiffieHellmanOpenSsl_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP System_Security_Cryptography_ECDsaOpenSsl_get_type_handle(void);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ctor_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, int32_t keySize);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ctor_0__1__IntPtr(SG_HNDL_NULLABLE * _Nonnull __thrown, intptr_t handle);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ctor_0__1__ECCurve(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL curve);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ctor_0__1__SafeEvpPKeyHandle(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL pkeyHandle);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_SafeEvpPKeyHandle__DuplicateKeyHandle_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ECParameters__ExportExplicitParameters_0__1__bool(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t includePrivateParameters);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_ECParameters__ExportParameters_0__1__bool(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t includePrivateParameters);

void System_Security_Cryptography_ECDsaOpenSsl_void__GenerateKey_0__1__ECCurve(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL curve);

void System_Security_Cryptography_ECDsaOpenSsl_void__ImportParameters_0__1__ECParameters(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL parameters);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_u8Array__SignHash_0__1__u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL hash);

int32_t System_Security_Cryptography_ECDsaOpenSsl_bool__VerifyHash_0__2__u8Array_u8Array(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL hash, SG_HNDL_NONNULL signature);

int32_t System_Security_Cryptography_ECDsaOpenSsl_i32__get_KeySize_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

void System_Security_Cryptography_ECDsaOpenSsl_void__set_KeySize_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t value);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_KeySizesArray__get_LegalKeySizes_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_ECDsaOpenSsl_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP System_Security_Cryptography_RSAOpenSsl_get_type_handle(void);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_ctor_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, int32_t keySize);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_ctor_0__1__IntPtr(SG_HNDL_NULLABLE * _Nonnull __thrown, intptr_t handle);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_ctor_0__1__RSAParameters(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL parameters);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_ctor_0__1__SafeEvpPKeyHandle(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL pkeyHandle);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_u8Array__Decrypt_0__2__u8Array_RSAEncryptionPadding(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL data, SG_HNDL_NONNULL padding);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_SafeEvpPKeyHandle__DuplicateKeyHandle_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_u8Array__Encrypt_0__2__u8Array_RSAEncryptionPadding(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL data, SG_HNDL_NONNULL padding);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_RSAParameters__ExportParameters_0__1__bool(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t includePrivateParameters);

void System_Security_Cryptography_RSAOpenSsl_void__ImportParameters_0__1__RSAParameters(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL parameters);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_u8Array__SignHash_0__3__u8Array_HashAlgorithmName_RSASignaturePadding(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL hash, SG_HNDL_NONNULL hashAlgorithm, SG_HNDL_NONNULL padding);

int32_t System_Security_Cryptography_RSAOpenSsl_bool__VerifyHash_0__4__u8Array_u8Array_HashAlgorithmName_RSASignaturePadding(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL hash, SG_HNDL_NONNULL signature, SG_HNDL_NONNULL hashAlgorithm, SG_HNDL_NONNULL padding);

void System_Security_Cryptography_RSAOpenSsl_void__set_KeySize_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t value);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_KeySizesArray__get_LegalKeySizes_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_RSAOpenSsl_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP System_Security_Cryptography_SafeEvpPKeyHandle_get_type_handle(void);

SG_HNDL_NONNULL System_Security_Cryptography_SafeEvpPKeyHandle_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL System_Security_Cryptography_SafeEvpPKeyHandle_ctor_0__2__IntPtr_bool(SG_HNDL_NULLABLE * _Nonnull __thrown, intptr_t handle, int32_t ownsHandle);

SG_HNDL_NONNULL System_Security_Cryptography_SafeEvpPKeyHandle_SafeEvpPKeyHandle__DuplicateHandle_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

int64_t System_Security_Cryptography_SafeEvpPKeyHandle_i64__get_OpenSslVersion_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

int32_t System_Security_Cryptography_SafeEvpPKeyHandle_bool__get_IsInvalid_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL System_Security_Cryptography_SafeEvpPKeyHandle_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);


#ifdef __cplusplus
}
#endif

#endif // INCLUDE_System_Security_Cryptography_OpenSsl

